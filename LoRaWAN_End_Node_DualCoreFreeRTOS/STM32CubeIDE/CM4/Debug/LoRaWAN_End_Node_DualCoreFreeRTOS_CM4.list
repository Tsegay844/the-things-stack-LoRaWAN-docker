
LoRaWAN_End_Node_DualCoreFreeRTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a850  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b8  0800b3b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3b8  0800b3b8  0001b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3c0  0800b3c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b3c0  0800b3c0  0001b3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b3c8  0800b3c8  0001b3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 MAPPING_TABLE 00000140  20008000  20008000  00028000  2**4
                  ALLOC
 10 MB_MEM1       000001c0  20008140  20008140  00028000  2**2
                  ALLOC
 11 .bss          00003ff8  20000088  20000088  00020088  2**2
                  ALLOC
 12 RAM1_region   00000000  20004080  20004080  00020088  2**0
                  CONTENTS
 13 ._user_heap_stack 00000a00  20004080  20004080  00020088  2**0
                  ALLOC
 14 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003e312  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000092d5  00000000  00000000  0005e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0002214e  00000000  00000000  00067699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002348  00000000  00000000  000897e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002438  00000000  00000000  0008bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000281db  00000000  00000000  0008df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003f43c  00000000  00000000  000b6143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d8b94  00000000  00000000  000f557f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  001ce113  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00005f2c  00000000  00000000  001ce164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a978 	.word	0x0800a978

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	0800a978 	.word	0x0800a978

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_frsub>:
 8000190:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__addsf3>
 8000196:	bf00      	nop

08000198 <__aeabi_fsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800019c <__addsf3>:
 800019c:	0042      	lsls	r2, r0, #1
 800019e:	bf1f      	itttt	ne
 80001a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a4:	ea92 0f03 	teqne	r2, r3
 80001a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001b0:	d06a      	beq.n	8000288 <__addsf3+0xec>
 80001b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ba:	bfc1      	itttt	gt
 80001bc:	18d2      	addgt	r2, r2, r3
 80001be:	4041      	eorgt	r1, r0
 80001c0:	4048      	eorgt	r0, r1
 80001c2:	4041      	eorgt	r1, r0
 80001c4:	bfb8      	it	lt
 80001c6:	425b      	neglt	r3, r3
 80001c8:	2b19      	cmp	r3, #25
 80001ca:	bf88      	it	hi
 80001cc:	4770      	bxhi	lr
 80001ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4240      	negne	r0, r0
 80001de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ea:	bf18      	it	ne
 80001ec:	4249      	negne	r1, r1
 80001ee:	ea92 0f03 	teq	r2, r3
 80001f2:	d03f      	beq.n	8000274 <__addsf3+0xd8>
 80001f4:	f1a2 0201 	sub.w	r2, r2, #1
 80001f8:	fa41 fc03 	asr.w	ip, r1, r3
 80001fc:	eb10 000c 	adds.w	r0, r0, ip
 8000200:	f1c3 0320 	rsb	r3, r3, #32
 8000204:	fa01 f103 	lsl.w	r1, r1, r3
 8000208:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800020c:	d502      	bpl.n	8000214 <__addsf3+0x78>
 800020e:	4249      	negs	r1, r1
 8000210:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000214:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000218:	d313      	bcc.n	8000242 <__addsf3+0xa6>
 800021a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800021e:	d306      	bcc.n	800022e <__addsf3+0x92>
 8000220:	0840      	lsrs	r0, r0, #1
 8000222:	ea4f 0131 	mov.w	r1, r1, rrx
 8000226:	f102 0201 	add.w	r2, r2, #1
 800022a:	2afe      	cmp	r2, #254	; 0xfe
 800022c:	d251      	bcs.n	80002d2 <__addsf3+0x136>
 800022e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000232:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000236:	bf08      	it	eq
 8000238:	f020 0001 	biceq.w	r0, r0, #1
 800023c:	ea40 0003 	orr.w	r0, r0, r3
 8000240:	4770      	bx	lr
 8000242:	0049      	lsls	r1, r1, #1
 8000244:	eb40 0000 	adc.w	r0, r0, r0
 8000248:	3a01      	subs	r2, #1
 800024a:	bf28      	it	cs
 800024c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000250:	d2ed      	bcs.n	800022e <__addsf3+0x92>
 8000252:	fab0 fc80 	clz	ip, r0
 8000256:	f1ac 0c08 	sub.w	ip, ip, #8
 800025a:	ebb2 020c 	subs.w	r2, r2, ip
 800025e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000262:	bfaa      	itet	ge
 8000264:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000268:	4252      	neglt	r2, r2
 800026a:	4318      	orrge	r0, r3
 800026c:	bfbc      	itt	lt
 800026e:	40d0      	lsrlt	r0, r2
 8000270:	4318      	orrlt	r0, r3
 8000272:	4770      	bx	lr
 8000274:	f092 0f00 	teq	r2, #0
 8000278:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800027c:	bf06      	itte	eq
 800027e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000282:	3201      	addeq	r2, #1
 8000284:	3b01      	subne	r3, #1
 8000286:	e7b5      	b.n	80001f4 <__addsf3+0x58>
 8000288:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800028c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000290:	bf18      	it	ne
 8000292:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000296:	d021      	beq.n	80002dc <__addsf3+0x140>
 8000298:	ea92 0f03 	teq	r2, r3
 800029c:	d004      	beq.n	80002a8 <__addsf3+0x10c>
 800029e:	f092 0f00 	teq	r2, #0
 80002a2:	bf08      	it	eq
 80002a4:	4608      	moveq	r0, r1
 80002a6:	4770      	bx	lr
 80002a8:	ea90 0f01 	teq	r0, r1
 80002ac:	bf1c      	itt	ne
 80002ae:	2000      	movne	r0, #0
 80002b0:	4770      	bxne	lr
 80002b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002b6:	d104      	bne.n	80002c2 <__addsf3+0x126>
 80002b8:	0040      	lsls	r0, r0, #1
 80002ba:	bf28      	it	cs
 80002bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002c0:	4770      	bx	lr
 80002c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002c6:	bf3c      	itt	cc
 80002c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bxcc	lr
 80002ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002da:	4770      	bx	lr
 80002dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002e0:	bf16      	itet	ne
 80002e2:	4608      	movne	r0, r1
 80002e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e8:	4601      	movne	r1, r0
 80002ea:	0242      	lsls	r2, r0, #9
 80002ec:	bf06      	itte	eq
 80002ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002f2:	ea90 0f01 	teqeq	r0, r1
 80002f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002fa:	4770      	bx	lr

080002fc <__aeabi_ui2f>:
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e004      	b.n	800030c <__aeabi_i2f+0x8>
 8000302:	bf00      	nop

08000304 <__aeabi_i2f>:
 8000304:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000308:	bf48      	it	mi
 800030a:	4240      	negmi	r0, r0
 800030c:	ea5f 0c00 	movs.w	ip, r0
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000318:	4601      	mov	r1, r0
 800031a:	f04f 0000 	mov.w	r0, #0
 800031e:	e01c      	b.n	800035a <__aeabi_l2f+0x2a>

08000320 <__aeabi_ul2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f04f 0300 	mov.w	r3, #0
 800032c:	e00a      	b.n	8000344 <__aeabi_l2f+0x14>
 800032e:	bf00      	nop

08000330 <__aeabi_l2f>:
 8000330:	ea50 0201 	orrs.w	r2, r0, r1
 8000334:	bf08      	it	eq
 8000336:	4770      	bxeq	lr
 8000338:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__aeabi_l2f+0x14>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	ea5f 0c01 	movs.w	ip, r1
 8000348:	bf02      	ittt	eq
 800034a:	4684      	moveq	ip, r0
 800034c:	4601      	moveq	r1, r0
 800034e:	2000      	moveq	r0, #0
 8000350:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000354:	bf08      	it	eq
 8000356:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800035a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800035e:	fabc f28c 	clz	r2, ip
 8000362:	3a08      	subs	r2, #8
 8000364:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000368:	db10      	blt.n	800038c <__aeabi_l2f+0x5c>
 800036a:	fa01 fc02 	lsl.w	ip, r1, r2
 800036e:	4463      	add	r3, ip
 8000370:	fa00 fc02 	lsl.w	ip, r0, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800037c:	fa20 f202 	lsr.w	r2, r0, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	f020 0001 	biceq.w	r0, r0, #1
 800038a:	4770      	bx	lr
 800038c:	f102 0220 	add.w	r2, r2, #32
 8000390:	fa01 fc02 	lsl.w	ip, r1, r2
 8000394:	f1c2 0220 	rsb	r2, r2, #32
 8000398:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800039c:	fa21 f202 	lsr.w	r2, r1, r2
 80003a0:	eb43 0002 	adc.w	r0, r3, r2
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003aa:	4770      	bx	lr

080003ac <__aeabi_fmul>:
 80003ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b4:	bf1e      	ittt	ne
 80003b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ba:	ea92 0f0c 	teqne	r2, ip
 80003be:	ea93 0f0c 	teqne	r3, ip
 80003c2:	d06f      	beq.n	80004a4 <__aeabi_fmul+0xf8>
 80003c4:	441a      	add	r2, r3
 80003c6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ca:	0240      	lsls	r0, r0, #9
 80003cc:	bf18      	it	ne
 80003ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003d2:	d01e      	beq.n	8000412 <__aeabi_fmul+0x66>
 80003d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e0:	fba0 3101 	umull	r3, r1, r0, r1
 80003e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ec:	bf3e      	ittt	cc
 80003ee:	0049      	lslcc	r1, r1, #1
 80003f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f4:	005b      	lslcc	r3, r3, #1
 80003f6:	ea40 0001 	orr.w	r0, r0, r1
 80003fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003fe:	2afd      	cmp	r2, #253	; 0xfd
 8000400:	d81d      	bhi.n	800043e <__aeabi_fmul+0x92>
 8000402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000406:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800040a:	bf08      	it	eq
 800040c:	f020 0001 	biceq.w	r0, r0, #1
 8000410:	4770      	bx	lr
 8000412:	f090 0f00 	teq	r0, #0
 8000416:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800041a:	bf08      	it	eq
 800041c:	0249      	lsleq	r1, r1, #9
 800041e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000422:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000426:	3a7f      	subs	r2, #127	; 0x7f
 8000428:	bfc2      	ittt	gt
 800042a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800042e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000432:	4770      	bxgt	lr
 8000434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	3a01      	subs	r2, #1
 800043e:	dc5d      	bgt.n	80004fc <__aeabi_fmul+0x150>
 8000440:	f112 0f19 	cmn.w	r2, #25
 8000444:	bfdc      	itt	le
 8000446:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800044a:	4770      	bxle	lr
 800044c:	f1c2 0200 	rsb	r2, r2, #0
 8000450:	0041      	lsls	r1, r0, #1
 8000452:	fa21 f102 	lsr.w	r1, r1, r2
 8000456:	f1c2 0220 	rsb	r2, r2, #32
 800045a:	fa00 fc02 	lsl.w	ip, r0, r2
 800045e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000462:	f140 0000 	adc.w	r0, r0, #0
 8000466:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800046a:	bf08      	it	eq
 800046c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000470:	4770      	bx	lr
 8000472:	f092 0f00 	teq	r2, #0
 8000476:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800047a:	bf02      	ittt	eq
 800047c:	0040      	lsleq	r0, r0, #1
 800047e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000482:	3a01      	subeq	r2, #1
 8000484:	d0f9      	beq.n	800047a <__aeabi_fmul+0xce>
 8000486:	ea40 000c 	orr.w	r0, r0, ip
 800048a:	f093 0f00 	teq	r3, #0
 800048e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000492:	bf02      	ittt	eq
 8000494:	0049      	lsleq	r1, r1, #1
 8000496:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800049a:	3b01      	subeq	r3, #1
 800049c:	d0f9      	beq.n	8000492 <__aeabi_fmul+0xe6>
 800049e:	ea41 010c 	orr.w	r1, r1, ip
 80004a2:	e78f      	b.n	80003c4 <__aeabi_fmul+0x18>
 80004a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a8:	ea92 0f0c 	teq	r2, ip
 80004ac:	bf18      	it	ne
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d00a      	beq.n	80004ca <__aeabi_fmul+0x11e>
 80004b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b8:	bf18      	it	ne
 80004ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004be:	d1d8      	bne.n	8000472 <__aeabi_fmul+0xc6>
 80004c0:	ea80 0001 	eor.w	r0, r0, r1
 80004c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	4770      	bx	lr
 80004ca:	f090 0f00 	teq	r0, #0
 80004ce:	bf17      	itett	ne
 80004d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d4:	4608      	moveq	r0, r1
 80004d6:	f091 0f00 	teqne	r1, #0
 80004da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004de:	d014      	beq.n	800050a <__aeabi_fmul+0x15e>
 80004e0:	ea92 0f0c 	teq	r2, ip
 80004e4:	d101      	bne.n	80004ea <__aeabi_fmul+0x13e>
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	d10f      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004ea:	ea93 0f0c 	teq	r3, ip
 80004ee:	d103      	bne.n	80004f8 <__aeabi_fmul+0x14c>
 80004f0:	024b      	lsls	r3, r1, #9
 80004f2:	bf18      	it	ne
 80004f4:	4608      	movne	r0, r1
 80004f6:	d108      	bne.n	800050a <__aeabi_fmul+0x15e>
 80004f8:	ea80 0001 	eor.w	r0, r0, r1
 80004fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000500:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000504:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000508:	4770      	bx	lr
 800050a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000512:	4770      	bx	lr

08000514 <__aeabi_fdiv>:
 8000514:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000518:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800051c:	bf1e      	ittt	ne
 800051e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000522:	ea92 0f0c 	teqne	r2, ip
 8000526:	ea93 0f0c 	teqne	r3, ip
 800052a:	d069      	beq.n	8000600 <__aeabi_fdiv+0xec>
 800052c:	eba2 0203 	sub.w	r2, r2, r3
 8000530:	ea80 0c01 	eor.w	ip, r0, r1
 8000534:	0249      	lsls	r1, r1, #9
 8000536:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800053a:	d037      	beq.n	80005ac <__aeabi_fdiv+0x98>
 800053c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000540:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000544:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000548:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800054c:	428b      	cmp	r3, r1
 800054e:	bf38      	it	cc
 8000550:	005b      	lslcc	r3, r3, #1
 8000552:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000556:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800055a:	428b      	cmp	r3, r1
 800055c:	bf24      	itt	cs
 800055e:	1a5b      	subcs	r3, r3, r1
 8000560:	ea40 000c 	orrcs.w	r0, r0, ip
 8000564:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000568:	bf24      	itt	cs
 800056a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000572:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000576:	bf24      	itt	cs
 8000578:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800057c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000580:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000584:	bf24      	itt	cs
 8000586:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800058a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	bf18      	it	ne
 8000592:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000596:	d1e0      	bne.n	800055a <__aeabi_fdiv+0x46>
 8000598:	2afd      	cmp	r2, #253	; 0xfd
 800059a:	f63f af50 	bhi.w	800043e <__aeabi_fmul+0x92>
 800059e:	428b      	cmp	r3, r1
 80005a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b4:	327f      	adds	r2, #127	; 0x7f
 80005b6:	bfc2      	ittt	gt
 80005b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005c0:	4770      	bxgt	lr
 80005c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	3a01      	subs	r2, #1
 80005cc:	e737      	b.n	800043e <__aeabi_fmul+0x92>
 80005ce:	f092 0f00 	teq	r2, #0
 80005d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0040      	lsleq	r0, r0, #1
 80005da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005de:	3a01      	subeq	r2, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fdiv+0xc2>
 80005e2:	ea40 000c 	orr.w	r0, r0, ip
 80005e6:	f093 0f00 	teq	r3, #0
 80005ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ee:	bf02      	ittt	eq
 80005f0:	0049      	lsleq	r1, r1, #1
 80005f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f6:	3b01      	subeq	r3, #1
 80005f8:	d0f9      	beq.n	80005ee <__aeabi_fdiv+0xda>
 80005fa:	ea41 010c 	orr.w	r1, r1, ip
 80005fe:	e795      	b.n	800052c <__aeabi_fdiv+0x18>
 8000600:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000604:	ea92 0f0c 	teq	r2, ip
 8000608:	d108      	bne.n	800061c <__aeabi_fdiv+0x108>
 800060a:	0242      	lsls	r2, r0, #9
 800060c:	f47f af7d 	bne.w	800050a <__aeabi_fmul+0x15e>
 8000610:	ea93 0f0c 	teq	r3, ip
 8000614:	f47f af70 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000618:	4608      	mov	r0, r1
 800061a:	e776      	b.n	800050a <__aeabi_fmul+0x15e>
 800061c:	ea93 0f0c 	teq	r3, ip
 8000620:	d104      	bne.n	800062c <__aeabi_fdiv+0x118>
 8000622:	024b      	lsls	r3, r1, #9
 8000624:	f43f af4c 	beq.w	80004c0 <__aeabi_fmul+0x114>
 8000628:	4608      	mov	r0, r1
 800062a:	e76e      	b.n	800050a <__aeabi_fmul+0x15e>
 800062c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000630:	bf18      	it	ne
 8000632:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000636:	d1ca      	bne.n	80005ce <__aeabi_fdiv+0xba>
 8000638:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800063c:	f47f af5c 	bne.w	80004f8 <__aeabi_fmul+0x14c>
 8000640:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000644:	f47f af3c 	bne.w	80004c0 <__aeabi_fmul+0x114>
 8000648:	e75f      	b.n	800050a <__aeabi_fmul+0x15e>
 800064a:	bf00      	nop

0800064c <__aeabi_f2iz>:
 800064c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000650:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000654:	d30f      	bcc.n	8000676 <__aeabi_f2iz+0x2a>
 8000656:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800065a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800065e:	d90d      	bls.n	800067c <__aeabi_f2iz+0x30>
 8000660:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000668:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066c:	fa23 f002 	lsr.w	r0, r3, r2
 8000670:	bf18      	it	ne
 8000672:	4240      	negne	r0, r0
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2iz+0x3a>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d105      	bne.n	8000692 <__aeabi_f2iz+0x46>
 8000686:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800068a:	bf08      	it	eq
 800068c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000690:	4770      	bx	lr
 8000692:	f04f 0000 	mov.w	r0, #0
 8000696:	4770      	bx	lr

08000698 <__aeabi_f2uiz>:
 8000698:	0042      	lsls	r2, r0, #1
 800069a:	d20e      	bcs.n	80006ba <__aeabi_f2uiz+0x22>
 800069c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006a0:	d30b      	bcc.n	80006ba <__aeabi_f2uiz+0x22>
 80006a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006aa:	d409      	bmi.n	80006c0 <__aeabi_f2uiz+0x28>
 80006ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006b4:	fa23 f002 	lsr.w	r0, r3, r2
 80006b8:	4770      	bx	lr
 80006ba:	f04f 0000 	mov.w	r0, #0
 80006be:	4770      	bx	lr
 80006c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006c4:	d101      	bne.n	80006ca <__aeabi_f2uiz+0x32>
 80006c6:	0242      	lsls	r2, r0, #9
 80006c8:	d102      	bne.n	80006d0 <__aeabi_f2uiz+0x38>
 80006ca:	f04f 30ff 	mov.w	r0, #4294967295
 80006ce:	4770      	bx	lr
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__aeabi_uldivmod>:
 80006d8:	b953      	cbnz	r3, 80006f0 <__aeabi_uldivmod+0x18>
 80006da:	b94a      	cbnz	r2, 80006f0 <__aeabi_uldivmod+0x18>
 80006dc:	2900      	cmp	r1, #0
 80006de:	bf08      	it	eq
 80006e0:	2800      	cmpeq	r0, #0
 80006e2:	bf1c      	itt	ne
 80006e4:	f04f 31ff 	movne.w	r1, #4294967295
 80006e8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ec:	f000 b974 	b.w	80009d8 <__aeabi_idiv0>
 80006f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006f8:	f000 f806 	bl	8000708 <__udivmoddi4>
 80006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000704:	b004      	add	sp, #16
 8000706:	4770      	bx	lr

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14d      	bne.n	80007b4 <__udivmoddi4+0xac>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d968      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b152      	cbz	r2, 800073a <__udivmoddi4+0x32>
 8000724:	fa01 f302 	lsl.w	r3, r1, r2
 8000728:	f1c2 0120 	rsb	r1, r2, #32
 800072c:	fa20 f101 	lsr.w	r1, r0, r1
 8000730:	fa0c fc02 	lsl.w	ip, ip, r2
 8000734:	ea41 0803 	orr.w	r8, r1, r3
 8000738:	4094      	lsls	r4, r2
 800073a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800073e:	0c21      	lsrs	r1, r4, #16
 8000740:	fbb8 fef5 	udiv	lr, r8, r5
 8000744:	fa1f f78c 	uxth.w	r7, ip
 8000748:	fb05 831e 	mls	r3, r5, lr, r8
 800074c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000750:	fb0e f107 	mul.w	r1, lr, r7
 8000754:	4299      	cmp	r1, r3
 8000756:	d90b      	bls.n	8000770 <__udivmoddi4+0x68>
 8000758:	eb1c 0303 	adds.w	r3, ip, r3
 800075c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000760:	f080 811e 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000764:	4299      	cmp	r1, r3
 8000766:	f240 811b 	bls.w	80009a0 <__udivmoddi4+0x298>
 800076a:	f1ae 0e02 	sub.w	lr, lr, #2
 800076e:	4463      	add	r3, ip
 8000770:	1a5b      	subs	r3, r3, r1
 8000772:	b2a4      	uxth	r4, r4
 8000774:	fbb3 f0f5 	udiv	r0, r3, r5
 8000778:	fb05 3310 	mls	r3, r5, r0, r3
 800077c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000780:	fb00 f707 	mul.w	r7, r0, r7
 8000784:	42a7      	cmp	r7, r4
 8000786:	d90a      	bls.n	800079e <__udivmoddi4+0x96>
 8000788:	eb1c 0404 	adds.w	r4, ip, r4
 800078c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000790:	f080 8108 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000794:	42a7      	cmp	r7, r4
 8000796:	f240 8105 	bls.w	80009a4 <__udivmoddi4+0x29c>
 800079a:	4464      	add	r4, ip
 800079c:	3802      	subs	r0, #2
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80007a4:	2100      	movs	r1, #0
 80007a6:	b11e      	cbz	r6, 80007b0 <__udivmoddi4+0xa8>
 80007a8:	40d4      	lsrs	r4, r2
 80007aa:	2300      	movs	r3, #0
 80007ac:	e9c6 4300 	strd	r4, r3, [r6]
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d908      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	f000 80ee 	beq.w	800099a <__udivmoddi4+0x292>
 80007be:	2100      	movs	r1, #0
 80007c0:	e9c6 0500 	strd	r0, r5, [r6]
 80007c4:	4608      	mov	r0, r1
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f183 	clz	r1, r3
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb65 0303 	sbc.w	r3, r5, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	4698      	mov	r8, r3
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d0e2      	beq.n	80007b0 <__udivmoddi4+0xa8>
 80007ea:	e9c6 4800 	strd	r4, r8, [r6]
 80007ee:	e7df      	b.n	80007b0 <__udivmoddi4+0xa8>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8091 	bne.w	8000920 <__udivmoddi4+0x218>
 80007fe:	eba1 050c 	sub.w	r5, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2101      	movs	r1, #1
 800080c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000810:	fb07 5013 	mls	r0, r7, r3, r5
 8000814:	0c25      	lsrs	r5, r4, #16
 8000816:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	42a8      	cmp	r0, r5
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0505 	adds.w	r5, ip, r5
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	42a8      	cmp	r0, r5
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a2d      	subs	r5, r5, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb5 f0f7 	udiv	r0, r5, r7
 800083c:	fb07 5510 	mls	r5, r7, r0, r5
 8000840:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 35ff 	add.w	r5, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4628      	mov	r0, r5
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79e      	b.n	80007a6 <__udivmoddi4+0x9e>
 8000868:	f1c1 0720 	rsb	r7, r1, #32
 800086c:	408b      	lsls	r3, r1
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa05 f301 	lsl.w	r3, r5, r1
 800087e:	431c      	orrs	r4, r3
 8000880:	40fd      	lsrs	r5, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f301 	lsl.w	r3, r0, r1
 800088a:	fbb5 f8f9 	udiv	r8, r5, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 5518 	mls	r5, r9, r8, r5
 8000898:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	42a8      	cmp	r0, r5
 80008a2:	fa02 f201 	lsl.w	r2, r2, r1
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0505 	adds.w	r5, ip, r5
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	42a8      	cmp	r0, r5
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4465      	add	r5, ip
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80008c8:	fb09 5510 	mls	r5, r9, r0, r5
 80008cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	45ae      	cmp	lr, r5
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0505 	adds.w	r5, ip, r5
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	45ae      	cmp	lr, r5
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4465      	add	r5, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba5 050e 	sub.w	r5, r5, lr
 80008f6:	42a5      	cmp	r5, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15e      	cbz	r6, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb65 050e 	sbc.w	r5, r5, lr
 800090a:	fa05 f707 	lsl.w	r7, r5, r7
 800090e:	fa22 f301 	lsr.w	r3, r2, r1
 8000912:	40cd      	lsrs	r5, r1
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c6 7500 	strd	r7, r5, [r6]
 800091a:	2100      	movs	r1, #0
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	f1c2 0320 	rsb	r3, r2, #32
 8000924:	fa20 f103 	lsr.w	r1, r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa25 f303 	lsr.w	r3, r5, r3
 8000930:	4095      	lsls	r5, r2
 8000932:	430d      	orrs	r5, r1
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000940:	fb07 3011 	mls	r0, r7, r1, r3
 8000944:	0c2b      	lsrs	r3, r5, #16
 8000946:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800094a:	fb01 f00e 	mul.w	r0, r1, lr
 800094e:	4298      	cmp	r0, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f101 38ff 	add.w	r8, r1, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	4298      	cmp	r0, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3902      	subs	r1, #2
 8000966:	4463      	add	r3, ip
 8000968:	1a1b      	subs	r3, r3, r0
 800096a:	b2ad      	uxth	r5, r5
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3310 	mls	r3, r7, r0, r3
 8000974:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000978:	fb00 f30e 	mul.w	r3, r0, lr
 800097c:	42ab      	cmp	r3, r5
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0505 	adds.w	r5, ip, r5
 8000984:	f100 38ff 	add.w	r8, r0, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	42ab      	cmp	r3, r5
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3802      	subs	r0, #2
 8000990:	4465      	add	r5, ip
 8000992:	1aed      	subs	r5, r5, r3
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	4631      	mov	r1, r6
 800099c:	4630      	mov	r0, r6
 800099e:	e707      	b.n	80007b0 <__udivmoddi4+0xa8>
 80009a0:	4686      	mov	lr, r0
 80009a2:	e6e5      	b.n	8000770 <__udivmoddi4+0x68>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6fa      	b.n	800079e <__udivmoddi4+0x96>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4641      	mov	r1, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4465      	add	r5, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4608      	mov	r0, r1
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80009e0:	4a22      	ldr	r2, [pc, #136]	; (8000a6c <DBG_Init+0x90>)
 80009e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80009ee:	f002 fc5b 	bl	80032a8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80009f2:	f002 fc61 	bl	80032b8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80009f6:	f002 fc67 	bl	80032c8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80009fa:	2400      	movs	r4, #0
 80009fc:	9403      	str	r4, [sp, #12]
 80009fe:	9404      	str	r4, [sp, #16]
 8000a00:	9405      	str	r4, [sp, #20]
 8000a02:	9406      	str	r4, [sp, #24]
 8000a04:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	9306      	str	r3, [sp, #24]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a14:	f042 0202 	orr.w	r2, r2, #2
 8000a18:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a1c:	f002 0202 	and.w	r2, r2, #2
 8000a20:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000a22:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a26:	f042 0202 	orr.w	r2, r2, #2
 8000a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a34:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000a36:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8000a3a:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000a3c:	4d0c      	ldr	r5, [pc, #48]	; (8000a70 <DBG_Init+0x94>)
 8000a3e:	a903      	add	r1, sp, #12
 8000a40:	4628      	mov	r0, r5
 8000a42:	f004 f83d 	bl	8004ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000a46:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000a4a:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000a4c:	a903      	add	r1, sp, #12
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f004 f836 	bl	8004ac0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000a54:	4622      	mov	r2, r4
 8000a56:	4639      	mov	r1, r7
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f004 f981 	bl	8004d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000a5e:	4622      	mov	r2, r4
 8000a60:	4631      	mov	r1, r6
 8000a62:	4628      	mov	r0, r5
 8000a64:	f004 f97c 	bl	8004d60 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000a68:	b009      	add	sp, #36	; 0x24
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	58000800 	.word	0x58000800
 8000a70:	48000400 	.word	0x48000400

08000a74 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000a74:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000a76:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <MX_ADC_Init+0x50>)
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_ADC_Init+0x54>)
 8000a7a:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a80:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a82:	2300      	movs	r3, #0
 8000a84:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a86:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a88:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a8e:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a90:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a92:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000a94:	2201      	movs	r2, #1
 8000a96:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000aa0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000aaa:	2207      	movs	r2, #7
 8000aac:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000aae:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ab0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ab4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ab6:	f002 fc0f 	bl	80032d8 <HAL_ADC_Init>
 8000aba:	b900      	cbnz	r0, 8000abe <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000abc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000abe:	f000 fc3d 	bl	800133c <Error_Handler>
}
 8000ac2:	e7fb      	b.n	8000abc <MX_ADC_Init+0x48>
 8000ac4:	200000a4 	.word	0x200000a4
 8000ac8:	40012400 	.word	0x40012400

08000acc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000acc:	6802      	ldr	r2, [r0, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_ADC_MspInit+0x28>)
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d000      	beq.n	8000ad6 <HAL_ADC_MspInit+0xa>
 8000ad4:	4770      	bx	lr
{
 8000ad6:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ae2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000aec:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000aee:	b002      	add	sp, #8
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40012400 	.word	0x40012400

08000af8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000af8:	6802      	ldr	r2, [r0, #0]
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_ADC_MspDeInit+0x18>)
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d000      	beq.n	8000b02 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000b00:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b06:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	e7f7      	b.n	8000b00 <HAL_ADC_MspDeInit+0x8>
 8000b10:	40012400 	.word	0x40012400

08000b14 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000b22:	f7ff ffa7 	bl	8000a74 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000b26:	4816      	ldr	r0, [pc, #88]	; (8000b80 <ADC_ReadChannels+0x6c>)
 8000b28:	f003 f810 	bl	8003b4c <HAL_ADCEx_Calibration_Start>
 8000b2c:	b9f8      	cbnz	r0, 8000b6e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000b2e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b34:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b36:	a901      	add	r1, sp, #4
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <ADC_ReadChannels+0x6c>)
 8000b3a:	f002 fd47 	bl	80035cc <HAL_ADC_ConfigChannel>
 8000b3e:	b9c8      	cbnz	r0, 8000b74 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <ADC_ReadChannels+0x6c>)
 8000b42:	f002 ff07 	bl	8003954 <HAL_ADC_Start>
 8000b46:	b9c0      	cbnz	r0, 8000b7a <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000b48:	4c0d      	ldr	r4, [pc, #52]	; (8000b80 <ADC_ReadChannels+0x6c>)
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f002 fcda 	bl	8003508 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000b54:	4620      	mov	r0, r4
 8000b56:	f002 ffd9 	bl	8003b0c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f002 fd33 	bl	80035c6 <HAL_ADC_GetValue>
 8000b60:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000b62:	4620      	mov	r0, r4
 8000b64:	f002 ff72 	bl	8003a4c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000b68:	4628      	mov	r0, r5
 8000b6a:	b005      	add	sp, #20
 8000b6c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000b6e:	f000 fbe5 	bl	800133c <Error_Handler>
 8000b72:	e7dc      	b.n	8000b2e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000b74:	f000 fbe2 	bl	800133c <Error_Handler>
 8000b78:	e7e2      	b.n	8000b40 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000b7a:	f000 fbdf 	bl	800133c <Error_Handler>
 8000b7e:	e7e3      	b.n	8000b48 <ADC_ReadChannels+0x34>
 8000b80:	200000a4 	.word	0x200000a4

08000b84 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <SYS_InitMeasurement+0x8>)
 8000b86:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <SYS_InitMeasurement+0xc>)
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	4770      	bx	lr
 8000b8c:	200000a4 	.word	0x200000a4
 8000b90:	40012400 	.word	0x40012400

08000b94 <SYS_GetBatteryLevel>:
{
 8000b94:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <SYS_GetBatteryLevel+0x38>)
 8000b98:	f7ff ffbc 	bl	8000b14 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000b9c:	b1a0      	cbz	r0, 8000bc8 <SYS_GetBatteryLevel+0x34>
 8000b9e:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <SYS_GetBatteryLevel+0x3c>)
 8000ba2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000ba6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d007      	beq.n	8000bbe <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000bae:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000bb2:	fb03 f000 	mul.w	r0, r3, r0
 8000bb6:	fbb0 f0f2 	udiv	r0, r0, r2
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	e005      	b.n	8000bca <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <SYS_GetBatteryLevel+0x40>)
 8000bc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8000bc4:	b280      	uxth	r0, r0
 8000bc6:	e000      	b.n	8000bca <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000bc8:	2000      	movs	r0, #0
}
 8000bca:	bd08      	pop	{r3, pc}
 8000bcc:	b4002000 	.word	0xb4002000
 8000bd0:	1fff7500 	.word	0x1fff7500
 8000bd4:	004c08d8 	.word	0x004c08d8

08000bd8 <SYS_GetTemperatureLevel>:
{
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000be2:	f7ff ffd7 	bl	8000b94 <SYS_GetBatteryLevel>
 8000be6:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <SYS_GetTemperatureLevel+0x98>)
 8000bea:	f7ff ff93 	bl	8000b14 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SYS_GetTemperatureLevel+0x9c>)
 8000bf0:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8000bf4:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	d01d      	beq.n	8000c38 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000bfc:	fb00 f304 	mul.w	r3, r0, r4
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	4c1d      	ldr	r4, [pc, #116]	; (8000c78 <SYS_GetTemperatureLevel+0xa0>)
 8000c04:	fba4 0303 	umull	r0, r3, r4, r3
 8000c08:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	fb00 f303 	mul.w	r3, r0, r3
 8000c12:	1a52      	subs	r2, r2, r1
 8000c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c18:	331e      	adds	r3, #30
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8000c20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8000c2e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000c32:	b200      	sxth	r0, r0
 8000c34:	b002      	add	sp, #8
 8000c36:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000c38:	fb00 f404 	mul.w	r4, r0, r4
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SYS_GetTemperatureLevel+0xa4>)
 8000c3e:	fba3 2304 	umull	r2, r3, r3, r4
 8000c42:	1ae4      	subs	r4, r4, r3
 8000c44:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8000c48:	0ae4      	lsrs	r4, r4, #11
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fb03 f404 	mul.w	r4, r3, r4
 8000c52:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8000c56:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <SYS_GetTemperatureLevel+0xa8>)
 8000c5c:	fb83 2304 	smull	r2, r3, r3, r4
 8000c60:	17e4      	asrs	r4, r4, #31
 8000c62:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 8000c66:	341e      	adds	r4, #30
 8000c68:	b224      	sxth	r4, r4
 8000c6a:	f8ad 4006 	strh.w	r4, [sp, #6]
 8000c6e:	e7d7      	b.n	8000c20 <SYS_GetTemperatureLevel+0x48>
 8000c70:	b0001000 	.word	0xb0001000
 8000c74:	1fff7500 	.word	0x1fff7500
 8000c78:	09ee009f 	.word	0x09ee009f
 8000c7c:	00100101 	.word	0x00100101
 8000c80:	68db8bad 	.word	0x68db8bad

08000c84 <WakeUpTimer_Cb>:
/* USER CODE BEGIN Application */
static void WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
  UNUSED(context);
}
 8000c84:	4770      	bx	lr

08000c86 <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 8000c86:	4770      	bx	lr

08000c88 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 8000c88:	4770      	bx	lr

08000c8a <StartDefaultTask>:
{
 8000c8a:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 8000c8c:	f000 ffd0 	bl	8001c30 <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	2101      	movs	r1, #1
 8000c96:	4608      	mov	r0, r1
 8000c98:	f006 fd1e 	bl	80076d8 <osThreadFlagsWait>
  for(;;)
 8000c9c:	e7f8      	b.n	8000c90 <StartDefaultTask+0x6>
	...

08000ca0 <PreSleepProcessing>:
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 8000ca4:	6800      	ldr	r0, [r0, #0]
 8000ca6:	f7ff ffef 	bl	8000c88 <app_freertos_tick_to_ms>
 8000caa:	4601      	mov	r1, r0
  UTIL_TIMER_SetPeriod(&WakeUpTimer, WakeUpTimer_timeOut_ms);
 8000cac:	4d0a      	ldr	r5, [pc, #40]	; (8000cd8 <PreSleepProcessing+0x38>)
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f009 fc68 	bl	800a584 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&WakeUpTimer);
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f009 fc1f 	bl	800a4f8 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 8000cba:	f009 fb83 	bl	800a3c4 <UTIL_TIMER_GetCurrentTime>
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <PreSleepProcessing+0x3c>)
 8000cc0:	6018      	str	r0, [r3, #0]
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8000cc2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000cc6:	6913      	ldr	r3, [r2, #16]
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	6113      	str	r3, [r2, #16]
  UTIL_LPM_EnterLowPower();
 8000cce:	f009 fad5 	bl	800a27c <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6023      	str	r3, [r4, #0]
}
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	2000010c 	.word	0x2000010c
 8000cdc:	20000108 	.word	0x20000108

08000ce0 <PostSleepProcessing>:
{
 8000ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <PostSleepProcessing+0x58>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	f009 fb77 	bl	800a3d8 <UTIL_TIMER_GetElapsedTime>
 8000cea:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <PostSleepProcessing+0x5c>)
 8000cee:	f009 fba9 	bl	800a444 <UTIL_TIMER_Stop>
  if (portNVIC_SYSTICK_CURRENT_VALUE_REG > (SleepDuration * CORE_TICK_RATE))
 8000cf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <PostSleepProcessing+0x60>)
 8000cfa:	681c      	ldr	r4, [r3, #0]
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <PostSleepProcessing+0x64>)
 8000cfe:	fba3 3404 	umull	r3, r4, r3, r4
 8000d02:	09a4      	lsrs	r4, r4, #6
 8000d04:	fb05 f304 	mul.w	r3, r5, r4
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d911      	bls.n	8000d30 <PostSleepProcessing+0x50>
    portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG - (app_freertos_ms_to_tick(SleepDuration) * CORE_TICK_RATE);
 8000d0c:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
 8000d10:	69be      	ldr	r6, [r7, #24]
 8000d12:	4628      	mov	r0, r5
 8000d14:	f7ff ffb7 	bl	8000c86 <app_freertos_ms_to_tick>
 8000d18:	fb00 6414 	mls	r4, r0, r4, r6
 8000d1c:	617c      	str	r4, [r7, #20]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000d26:	691a      	ldr	r2, [r3, #16]
 8000d28:	f042 0201 	orr.w	r2, r2, #1
 8000d2c:	611a      	str	r2, [r3, #16]
}
 8000d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    portNVIC_SYSTICK_LOAD_REG = CORE_TICK_RATE;
 8000d30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000d34:	615c      	str	r4, [r3, #20]
 8000d36:	e7f2      	b.n	8000d1e <PostSleepProcessing+0x3e>
 8000d38:	20000108 	.word	0x20000108
 8000d3c:	2000010c 	.word	0x2000010c
 8000d40:	20000078 	.word	0x20000078
 8000d44:	10624dd3 	.word	0x10624dd3

08000d48 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	b082      	sub	sp, #8
  UTIL_TIMER_Create(&WakeUpTimer, 0, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	9400      	str	r4, [sp, #0]
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_FREERTOS_Init+0x28>)
 8000d52:	4622      	mov	r2, r4
 8000d54:	4621      	mov	r1, r4
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <MX_FREERTOS_Init+0x2c>)
 8000d58:	f009 fb16 	bl	800a388 <UTIL_TIMER_Create>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <MX_FREERTOS_Init+0x30>)
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_FREERTOS_Init+0x34>)
 8000d62:	f006 fc05 	bl	8007570 <osThreadNew>
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_FREERTOS_Init+0x38>)
 8000d68:	6018      	str	r0, [r3, #0]
}
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	bf00      	nop
 8000d70:	08000c85 	.word	0x08000c85
 8000d74:	2000010c 	.word	0x2000010c
 8000d78:	0800a9b8 	.word	0x0800a9b8
 8000d7c:	08000c8b 	.word	0x08000c8b
 8000d80:	20000124 	.word	0x20000124

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d84:	b500      	push	{lr}
 8000d86:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d8e:	f042 0204 	orr.w	r2, r2, #4
 8000d92:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d96:	f002 0204 	and.w	r2, r2, #4
 8000d9a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d9c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000dae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2107      	movs	r1, #7
 8000db4:	200f      	movs	r0, #15
 8000db6:	f002 ff7b 	bl	8003cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f002 ffb0 	bl	8003d20 <HAL_NVIC_EnableIRQ>

}
 8000dc0:	b003      	add	sp, #12
 8000dc2:	f85d fb04 	ldr.w	pc, [sp], #4

08000dc6 <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e001      	b.n	8000dce <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8000dca:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8000dcc:	3308      	adds	r3, #8
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d20a      	bcs.n	8000de8 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8000dd2:	6842      	ldr	r2, [r0, #4]
 8000dd4:	f8d0 c000 	ldr.w	ip, [r0]
 8000dd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000ddc:	bf08      	it	eq
 8000dde:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8000de2:	d0f2      	beq.n	8000dca <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8000de4:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8000de6:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8000de8:	2000      	movs	r0, #0
 8000dea:	4770      	bx	lr

08000dec <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8000dec:	b130      	cbz	r0, 8000dfc <FLASH_IF_INT_Read+0x10>
{
 8000dee:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8000df0:	b139      	cbz	r1, 8000e02 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8000df2:	b292      	uxth	r2, r2
 8000df4:	f009 fa66 	bl	800a2c4 <UTIL_MEM_cpy_8>
  return ret_status;
 8000df8:	2000      	movs	r0, #0
}
 8000dfa:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8000dfc:	f06f 0005 	mvn.w	r0, #5
}
 8000e00:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8000e02:	f06f 0005 	mvn.w	r0, #5
 8000e06:	e7f8      	b.n	8000dfa <FLASH_IF_INT_Read+0xe>

08000e08 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8000e08:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000e0a:	f003 fa59 	bl	80042c0 <HAL_FLASH_Unlock>
 8000e0e:	b978      	cbnz	r0, 8000e30 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <FLASH_IF_INT_Clear_Error+0x30>)
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8000e1e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8000e20:	f003 fa66 	bl	80042f0 <HAL_FLASH_Lock>
 8000e24:	b908      	cbnz	r0, 8000e2a <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8000e26:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8000e28:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8000e2a:	f06f 0004 	mvn.w	r0, #4
 8000e2e:	e7fb      	b.n	8000e28 <FLASH_IF_INT_Clear_Error+0x20>
 8000e30:	f06f 0004 	mvn.w	r0, #4
 8000e34:	e7f8      	b.n	8000e28 <FLASH_IF_INT_Clear_Error+0x20>
 8000e36:	bf00      	nop
 8000e38:	58004000 	.word	0x58004000

08000e3c <FLASH_IF_INT_Erase>:
{
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d039      	beq.n	8000ebc <FLASH_IF_INT_Erase+0x80>
 8000e48:	460e      	mov	r6, r1
 8000e4a:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8000e4c:	f7ff ffdc 	bl	8000e08 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000e50:	4605      	mov	r5, r0
 8000e52:	b110      	cbz	r0, 8000e5a <FLASH_IF_INT_Erase+0x1e>
}
 8000e54:	4628      	mov	r0, r5
 8000e56:	b004      	add	sp, #16
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000e5a:	f003 fa31 	bl	80042c0 <HAL_FLASH_Unlock>
 8000e5e:	bb80      	cbnz	r0, 8000ec2 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e60:	2302      	movs	r3, #2
 8000e62:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8000e64:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8000e68:	4817      	ldr	r0, [pc, #92]	; (8000ec8 <FLASH_IF_INT_Erase+0x8c>)
 8000e6a:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <FLASH_IF_INT_Erase+0x90>)
 8000e70:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8000e74:	fbb3 fcf1 	udiv	ip, r3, r1
 8000e78:	fb01 331c 	mls	r3, r1, ip, r3
 8000e7c:	0adb      	lsrs	r3, r3, #11
 8000e7e:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8000e80:	4434      	add	r4, r6
 8000e82:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 8000e86:	3c01      	subs	r4, #1
 8000e88:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8000e8c:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 8000e90:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e94:	fb02 4411 	mls	r4, r2, r1, r4
 8000e98:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 8000e9c:	3401      	adds	r4, #1
 8000e9e:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8000ea0:	a903      	add	r1, sp, #12
 8000ea2:	4668      	mov	r0, sp
 8000ea4:	f003 fdcc 	bl	8004a40 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8000ea8:	b118      	cbz	r0, 8000eb2 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000eaa:	2802      	cmp	r0, #2
 8000eac:	d004      	beq.n	8000eb8 <FLASH_IF_INT_Erase+0x7c>
 8000eae:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8000eb2:	f003 fa1d 	bl	80042f0 <HAL_FLASH_Lock>
 8000eb6:	e7cd      	b.n	8000e54 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8000eb8:	2501      	movs	r5, #1
 8000eba:	e7fa      	b.n	8000eb2 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8000ebc:	f06f 0505 	mvn.w	r5, #5
 8000ec0:	e7c8      	b.n	8000e54 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8000ec2:	f06f 0504 	mvn.w	r5, #4
 8000ec6:	e7c5      	b.n	8000e54 <FLASH_IF_INT_Erase+0x18>
 8000ec8:	1fff7000 	.word	0x1fff7000
 8000ecc:	03fffc00 	.word	0x03fffc00

08000ed0 <FLASH_IF_INT_Write>:
{
 8000ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed4:	b089      	sub	sp, #36	; 0x24
 8000ed6:	9003      	str	r0, [sp, #12]
 8000ed8:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8000eda:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8000edc:	2800      	cmp	r0, #0
 8000ede:	f000 80a9 	beq.w	8001034 <FLASH_IF_INT_Write+0x164>
 8000ee2:	4683      	mov	fp, r0
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	f000 80a9 	beq.w	800103c <FLASH_IF_INT_Write+0x16c>
 8000eea:	f012 0f07 	tst.w	r2, #7
 8000eee:	f040 80a9 	bne.w	8001044 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8000ef2:	f010 0307 	ands.w	r3, r0, #7
 8000ef6:	9305      	str	r3, [sp, #20]
 8000ef8:	f040 80a8 	bne.w	800104c <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8000efc:	f7ff ff84 	bl	8000e08 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8000f00:	9002      	str	r0, [sp, #8]
 8000f02:	b118      	cbz	r0, 8000f0c <FLASH_IF_INT_Write+0x3c>
}
 8000f04:	9802      	ldr	r0, [sp, #8]
 8000f06:	b009      	add	sp, #36	; 0x24
 8000f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8000f0c:	f003 f9d8 	bl	80042c0 <HAL_FLASH_Unlock>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f040 809f 	bne.w	8001054 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 8000f16:	9c03      	ldr	r4, [sp, #12]
 8000f18:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <FLASH_IF_INT_Write+0x18c>)
 8000f1e:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 8000f22:	494f      	ldr	r1, [pc, #316]	; (8001060 <FLASH_IF_INT_Write+0x190>)
 8000f24:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 8000f28:	fbb3 f2f1 	udiv	r2, r3, r1
 8000f2c:	fb01 3212 	mls	r2, r1, r2, r3
 8000f30:	0ad3      	lsrs	r3, r2, #11
 8000f32:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8000f34:	9b04      	ldr	r3, [sp, #16]
 8000f36:	18e3      	adds	r3, r4, r3
 8000f38:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	fbb3 f0f1 	udiv	r0, r3, r1
 8000f42:	fb01 3310 	mls	r3, r1, r0, r3
 8000f46:	0adb      	lsrs	r3, r3, #11
 8000f48:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d906      	bls.n	8000f62 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8000f54:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8000f58:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 8000f5c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000f60:	e02f      	b.n	8000fc2 <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 8000f62:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8000f66:	e7f9      	b.n	8000f5c <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8000f68:	46c8      	mov	r8, r9
          current_source = uSource;
 8000f6a:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8000f6c:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000f6e:	9d05      	ldr	r5, [sp, #20]
 8000f70:	4545      	cmp	r5, r8
 8000f72:	d215      	bcs.n	8000fa0 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8000f74:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8000f76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f003 fa2f 	bl	80043e0 <HAL_FLASH_Program>
 8000f82:	b950      	cbnz	r0, 8000f9a <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	59e9      	ldr	r1, [r5, r7]
 8000f8a:	6873      	ldr	r3, [r6, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf08      	it	eq
 8000f90:	4288      	cmpeq	r0, r1
 8000f92:	d141      	bne.n	8001018 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8000f94:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8000f96:	3508      	adds	r5, #8
 8000f98:	e7ea      	b.n	8000f70 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8000f9a:	f06f 0303 	mvn.w	r3, #3
 8000f9e:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8000fa0:	9b02      	ldr	r3, [sp, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d13f      	bne.n	8001026 <FLASH_IF_INT_Write+0x156>
        uDest += length;
 8000fa6:	44cb      	add	fp, r9
        uSource += length;
 8000fa8:	9b01      	ldr	r3, [sp, #4]
 8000faa:	444b      	add	r3, r9
 8000fac:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8000fae:	9b04      	ldr	r3, [sp, #16]
 8000fb0:	eba3 0909 	sub.w	r9, r3, r9
 8000fb4:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8000fb8:	bf28      	it	cs
 8000fba:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8000fbe:	f10a 0a01 	add.w	sl, sl, #1
 8000fc2:	9b06      	ldr	r3, [sp, #24]
 8000fc4:	9a07      	ldr	r2, [sp, #28]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4553      	cmp	r3, sl
 8000fca:	d92c      	bls.n	8001026 <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8000fcc:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8000fd0:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	9803      	ldr	r0, [sp, #12]
 8000fd6:	f7ff fef6 	bl	8000dc6 <FLASH_IF_INT_IsEmpty>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d0c4      	beq.n	8000f68 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <FLASH_IF_INT_Write+0x194>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	b1e8      	cbz	r0, 8001020 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8000fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff feff 	bl	8000dec <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <FLASH_IF_INT_Write+0x194>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f3cb 030a 	ubfx	r3, fp, #0, #11
 8000ff6:	fa1f f289 	uxth.w	r2, r9
 8000ffa:	9901      	ldr	r1, [sp, #4]
 8000ffc:	4418      	add	r0, r3
 8000ffe:	f009 f961 	bl	800a2c4 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001002:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff ff18 	bl	8000e3c <FLASH_IF_INT_Erase>
 800100c:	b970      	cbnz	r0, 800102c <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <FLASH_IF_INT_Write+0x194>)
 8001010:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 8001012:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8001016:	e7aa      	b.n	8000f6e <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001018:	f06f 0303 	mvn.w	r3, #3
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	e7bf      	b.n	8000fa0 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001020:	f06f 0305 	mvn.w	r3, #5
 8001024:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 8001026:	f003 f963 	bl	80042f0 <HAL_FLASH_Lock>
 800102a:	e76b      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 800102c:	f06f 0301 	mvn.w	r3, #1
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	e7f8      	b.n	8001026 <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 8001034:	f06f 0305 	mvn.w	r3, #5
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	e763      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
 800103c:	f06f 0305 	mvn.w	r3, #5
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	e75f      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
 8001044:	f06f 0305 	mvn.w	r3, #5
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	e75b      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
 800104c:	f06f 0305 	mvn.w	r3, #5
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	e757      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001054:	f06f 0304 	mvn.w	r3, #4
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	e753      	b.n	8000f04 <FLASH_IF_INT_Write+0x34>
 800105c:	1fff7000 	.word	0x1fff7000
 8001060:	03fffc00 	.word	0x03fffc00
 8001064:	20000128 	.word	0x20000128

08001068 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <FLASH_IF_Init+0x8>)
 800106a:	6018      	str	r0, [r3, #0]
}
 800106c:	2000      	movs	r0, #0
 800106e:	4770      	bx	lr
 8001070:	20000128 	.word	0x20000128

08001074 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001074:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001078:	d30e      	bcc.n	8001098 <FLASH_IF_Write+0x24>
{
 800107a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <FLASH_IF_Write+0x30>)
 800107e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <FLASH_IF_Write+0x34>)
 8001084:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001088:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800108c:	3b01      	subs	r3, #1
 800108e:	4298      	cmp	r0, r3
 8001090:	d805      	bhi.n	800109e <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001092:	f7ff ff1d 	bl	8000ed0 <FLASH_IF_INT_Write>
}
 8001096:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
}
 800109c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	e7f8      	b.n	8001096 <FLASH_IF_Write+0x22>
 80010a4:	1fff7000 	.word	0x1fff7000
 80010a8:	03fffc00 	.word	0x03fffc00

080010ac <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80010ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80010b0:	d30e      	bcc.n	80010d0 <FLASH_IF_Read+0x24>
{
 80010b2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <FLASH_IF_Read+0x30>)
 80010b6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <FLASH_IF_Read+0x34>)
 80010bc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80010c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4299      	cmp	r1, r3
 80010c8:	d805      	bhi.n	80010d6 <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80010ca:	f7ff fe8f 	bl	8000dec <FLASH_IF_INT_Read>
}
 80010ce:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80010d4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	e7f8      	b.n	80010ce <FLASH_IF_Read+0x22>
 80010dc:	1fff7000 	.word	0x1fff7000
 80010e0:	03fffc00 	.word	0x03fffc00

080010e4 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80010e4:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80010e8:	d30e      	bcc.n	8001108 <FLASH_IF_Erase+0x24>
{
 80010ea:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <FLASH_IF_Erase+0x30>)
 80010ee:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <FLASH_IF_Erase+0x34>)
 80010f4:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80010f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4298      	cmp	r0, r3
 8001100:	d805      	bhi.n	800110e <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001102:	f7ff fe9b 	bl	8000e3c <FLASH_IF_INT_Erase>
}
 8001106:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
}
 800110c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	e7f8      	b.n	8001106 <FLASH_IF_Erase+0x22>
 8001114:	1fff7000 	.word	0x1fff7000
 8001118:	03fffc00 	.word	0x03fffc00

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001120:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	2400      	movs	r4, #0
 8001124:	9403      	str	r4, [sp, #12]
 8001126:	9404      	str	r4, [sp, #16]
 8001128:	9405      	str	r4, [sp, #20]
 800112a:	9406      	str	r4, [sp, #24]
 800112c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001134:	f042 0202 	orr.w	r2, r2, #2
 8001138:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800113a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113c:	f002 0202 	and.w	r2, r2, #2
 8001140:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001142:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001146:	f042 0204 	orr.w	r2, r2, #4
 800114a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800114c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800114e:	f002 0204 	and.w	r2, r2, #4
 8001152:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001154:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001166:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001168:	4e26      	ldr	r6, [pc, #152]	; (8001204 <MX_GPIO_Init+0xe8>)
 800116a:	4622      	mov	r2, r4
 800116c:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001170:	4630      	mov	r0, r6
 8001172:	f003 fdf5 	bl	8004d60 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001176:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800117a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2501      	movs	r5, #1
 800117e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2302      	movs	r3, #2
 8001184:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	a903      	add	r1, sp, #12
 8001188:	4630      	mov	r0, r6
 800118a:	f003 fc99 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800118e:	f04f 0803 	mov.w	r8, #3
 8001192:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 800119a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	a903      	add	r1, sp, #12
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f003 fc8c 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80011a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	a903      	add	r1, sp, #12
 80011b8:	4630      	mov	r0, r6
 80011ba:	f003 fc81 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80011c6:	a903      	add	r1, sp, #12
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <MX_GPIO_Init+0xec>)
 80011ca:	f003 fc79 	bl	8004ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80011ce:	4622      	mov	r2, r4
 80011d0:	2105      	movs	r1, #5
 80011d2:	2006      	movs	r0, #6
 80011d4:	f002 fd6c 	bl	8003cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011d8:	2006      	movs	r0, #6
 80011da:	f002 fda1 	bl	8003d20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80011de:	4622      	mov	r2, r4
 80011e0:	2105      	movs	r1, #5
 80011e2:	2007      	movs	r0, #7
 80011e4:	f002 fd64 	bl	8003cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011e8:	2007      	movs	r0, #7
 80011ea:	f002 fd99 	bl	8003d20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011ee:	4622      	mov	r2, r4
 80011f0:	2105      	movs	r1, #5
 80011f2:	2016      	movs	r0, #22
 80011f4:	f002 fd5c 	bl	8003cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f8:	2016      	movs	r0, #22
 80011fa:	f002 fd91 	bl	8003d20 <HAL_NVIC_EnableIRQ>

}
 80011fe:	b008      	add	sp, #32
 8001200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800

0800120c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800120c:	b508      	push	{r3, lr}
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_IPCC_Init+0x18>)
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <MX_IPCC_Init+0x1c>)
 8001212:	6003      	str	r3, [r0, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001214:	f003 fea0 	bl	8004f58 <HAL_IPCC_Init>
 8001218:	b900      	cbnz	r0, 800121c <MX_IPCC_Init+0x10>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800121a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800121c:	f000 f88e 	bl	800133c <Error_Handler>
}
 8001220:	e7fb      	b.n	800121a <MX_IPCC_Init+0xe>
 8001222:	bf00      	nop
 8001224:	2000012c 	.word	0x2000012c
 8001228:	58000c00 	.word	0x58000c00

0800122c <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{

  if(ipccHandle->Instance==IPCC)
 800122c:	6802      	ldr	r2, [r0, #0]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_IPCC_MspInit+0x4c>)
 8001230:	429a      	cmp	r2, r3
 8001232:	d000      	beq.n	8001236 <HAL_IPCC_MspInit+0xa>
 8001234:	4770      	bx	lr
{
 8001236:	b500      	push	{lr}
 8001238:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB3ENR, Periphs);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001240:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001244:	651a      	str	r2, [r3, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800124e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 6, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2106      	movs	r1, #6
 8001254:	202d      	movs	r0, #45	; 0x2d
 8001256:	f002 fd2b 	bl	8003cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800125a:	202d      	movs	r0, #45	; 0x2d
 800125c:	f002 fd60 	bl	8003d20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 6, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2106      	movs	r1, #6
 8001264:	202e      	movs	r0, #46	; 0x2e
 8001266:	f002 fd23 	bl	8003cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800126a:	202e      	movs	r0, #46	; 0x2e
 800126c:	f002 fd58 	bl	8003d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001270:	b003      	add	sp, #12
 8001272:	f85d fb04 	ldr.w	pc, [sp], #4
 8001276:	bf00      	nop
 8001278:	58000c00 	.word	0x58000c00

0800127c <IpccIfIsrTxCb>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

static void IpccIfIsrTxCb(IPCC_HandleTypeDef *hIpcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800127c:	b508      	push	{r3, lr}

  /* USER CODE END IpccIfIsrTxCb_1 */
  UNUSED(hIpcc);
  UNUSED(ChannelDir);

  IpccResponseRcv(ChannelIndex);
 800127e:	4b02      	ldr	r3, [pc, #8]	; (8001288 <IpccIfIsrTxCb+0xc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4608      	mov	r0, r1
 8001284:	4798      	blx	r3
  return;
  /* USER CODE BEGIN IpccIfIsrTxCb_2 */

  /* USER CODE END IpccIfIsrTxCb_2 */
}
 8001286:	bd08      	pop	{r3, pc}
 8001288:	2000016c 	.word	0x2000016c

0800128c <IpccIfIsrRxCb>:

static void IpccIfIsrRxCb(IPCC_HandleTypeDef *hIpcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800128c:	b508      	push	{r3, lr}

  /* USER CODE END IpccIfIsrRxCb_1 */
  UNUSED(hIpcc);
  UNUSED(ChannelDir);

  IpccNotificationRcv(ChannelIndex);
 800128e:	4b02      	ldr	r3, [pc, #8]	; (8001298 <IpccIfIsrRxCb+0xc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4608      	mov	r0, r1
 8001294:	4798      	blx	r3
  return;
  /* USER CODE BEGIN IpccIfIsrRxCb_2 */

  /* USER CODE END IpccIfIsrRxCb_2 */
}
 8001296:	bd08      	pop	{r3, pc}
 8001298:	20000168 	.word	0x20000168

0800129c <IPCC_IF_Init>:
{
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	4607      	mov	r7, r0
 80012a0:	460e      	mov	r6, r1
  MX_IPCC_Init();
 80012a2:	f7ff ffb3 	bl	800120c <MX_IPCC_Init>
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <IPCC_IF_Init+0x50>)
 80012a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012ac:	f042 0210 	orr.w	r2, r2, #16
 80012b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	f042 0210 	orr.w	r2, r2, #16
 80012ba:	621a      	str	r2, [r3, #32]
  for (int32_t i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80012bc:	2400      	movs	r4, #0
 80012be:	e00d      	b.n	80012dc <IPCC_IF_Init+0x40>
    HAL_IPCC_ActivateNotification(&hipcc, i, IPCC_CHANNEL_DIR_TX, IpccIfIsrTxCb);
 80012c0:	4d0b      	ldr	r5, [pc, #44]	; (80012f0 <IPCC_IF_Init+0x54>)
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <IPCC_IF_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	4621      	mov	r1, r4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f003 fdd1 	bl	8004e70 <HAL_IPCC_ActivateNotification>
    HAL_IPCC_ActivateNotification(&hipcc, i, IPCC_CHANNEL_DIR_RX, IpccIfIsrRxCb);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <IPCC_IF_Init+0x5c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	4621      	mov	r1, r4
 80012d4:	4628      	mov	r0, r5
 80012d6:	f003 fdcb 	bl	8004e70 <HAL_IPCC_ActivateNotification>
  for (int32_t i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80012da:	3401      	adds	r4, #1
 80012dc:	2c05      	cmp	r4, #5
 80012de:	d9ef      	bls.n	80012c0 <IPCC_IF_Init+0x24>
  IpccResponseRcv = IPCC_IF_ResponseRcv_cb;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <IPCC_IF_Init+0x60>)
 80012e2:	601f      	str	r7, [r3, #0]
  IpccNotificationRcv = IPCC_IF_NotificationRcv_cb;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <IPCC_IF_Init+0x64>)
 80012e6:	601e      	str	r6, [r3, #0]
}
 80012e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	58000800 	.word	0x58000800
 80012f0:	2000012c 	.word	0x2000012c
 80012f4:	0800127d 	.word	0x0800127d
 80012f8:	0800128d 	.word	0x0800128d
 80012fc:	2000016c 	.word	0x2000016c
 8001300:	20000168 	.word	0x20000168

08001304 <IPCC_IF_CommandSnd>:
{
 8001304:	b508      	push	{r3, lr}
 8001306:	4601      	mov	r1, r0
  if (HAL_OK != HAL_IPCC_NotifyCPU(&hipcc, channelIdx, IPCC_CHANNEL_DIR_TX))
 8001308:	2200      	movs	r2, #0
 800130a:	4804      	ldr	r0, [pc, #16]	; (800131c <IPCC_IF_CommandSnd+0x18>)
 800130c:	f003 fde4 	bl	8004ed8 <HAL_IPCC_NotifyCPU>
 8001310:	b908      	cbnz	r0, 8001316 <IPCC_IF_CommandSnd+0x12>
    return 0;
 8001312:	2000      	movs	r0, #0
}
 8001314:	bd08      	pop	{r3, pc}
    return -1;
 8001316:	f04f 30ff 	mov.w	r0, #4294967295
 800131a:	e7fb      	b.n	8001314 <IPCC_IF_CommandSnd+0x10>
 800131c:	2000012c 	.word	0x2000012c

08001320 <IPCC_IF_AcknowledgeSnd>:
{
 8001320:	b508      	push	{r3, lr}
 8001322:	4601      	mov	r1, r0
  if (HAL_OK != HAL_IPCC_NotifyCPU(&hipcc, channelIdx, IPCC_CHANNEL_DIR_RX))
 8001324:	2201      	movs	r2, #1
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <IPCC_IF_AcknowledgeSnd+0x18>)
 8001328:	f003 fdd6 	bl	8004ed8 <HAL_IPCC_NotifyCPU>
 800132c:	b908      	cbnz	r0, 8001332 <IPCC_IF_AcknowledgeSnd+0x12>
    return 0;
 800132e:	2000      	movs	r0, #0
}
 8001330:	bd08      	pop	{r3, pc}
    return -1;
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	e7fb      	b.n	8001330 <IPCC_IF_AcknowledgeSnd+0x10>
 8001338:	2000012c 	.word	0x2000012c

0800133c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133e:	e7fe      	b.n	800133e <Error_Handler+0x2>

08001340 <SystemClock_Config>:
{
 8001340:	b510      	push	{r4, lr}
 8001342:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001344:	2248      	movs	r2, #72	; 0x48
 8001346:	2100      	movs	r1, #0
 8001348:	a808      	add	r0, sp, #32
 800134a:	f009 fb0d 	bl	800a968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134e:	2400      	movs	r4, #0
 8001350:	9401      	str	r4, [sp, #4]
 8001352:	9402      	str	r4, [sp, #8]
 8001354:	9403      	str	r4, [sp, #12]
 8001356:	9404      	str	r4, [sp, #16]
 8001358:	9405      	str	r4, [sp, #20]
 800135a:	9406      	str	r4, [sp, #24]
 800135c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800135e:	f003 fe19 	bl	8004f94 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001362:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001366:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800136a:	f023 0318 	bic.w	r3, r3, #24
 800136e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001376:	6813      	ldr	r3, [r2, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800138c:	2324      	movs	r3, #36	; 0x24
 800138e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001390:	2381      	movs	r3, #129	; 0x81
 8001392:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001398:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800139a:	23b0      	movs	r3, #176	; 0xb0
 800139c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	a808      	add	r0, sp, #32
 80013a2:	f003 ffb3 	bl	800530c <HAL_RCC_OscConfig>
 80013a6:	b978      	cbnz	r0, 80013c8 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80013a8:	236f      	movs	r3, #111	; 0x6f
 80013aa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80013b6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013b8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ba:	2102      	movs	r1, #2
 80013bc:	a801      	add	r0, sp, #4
 80013be:	f004 fad7 	bl	8005970 <HAL_RCC_ClockConfig>
 80013c2:	b918      	cbnz	r0, 80013cc <SystemClock_Config+0x8c>
}
 80013c4:	b01a      	add	sp, #104	; 0x68
 80013c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013c8:	f7ff ffb8 	bl	800133c <Error_Handler>
    Error_Handler();
 80013cc:	f7ff ffb6 	bl	800133c <Error_Handler>

080013d0 <main>:
{
 80013d0:	b508      	push	{r3, lr}
  HAL_Init();
 80013d2:	f001 ff45 	bl	8003260 <HAL_Init>
  SystemClock_Config();
 80013d6:	f7ff ffb3 	bl	8001340 <SystemClock_Config>
  MX_GPIO_Init();
 80013da:	f7ff fe9f 	bl	800111c <MX_GPIO_Init>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013de:	f006 f885 	bl	80074ec <osKernelInitialize>
  MX_FREERTOS_Init();
 80013e2:	f7ff fcb1 	bl	8000d48 <MX_FREERTOS_Init>
  osKernelStart();
 80013e6:	f006 f89f 	bl	8007528 <osKernelStart>
	  HAL_PWREx_EnableSRAMRetention(); // for safety reasons, enable SRAM2 backup retention when entering Standby
 80013ea:	f003 fe23 	bl	8005034 <HAL_PWREx_EnableSRAMRetention>
	  HAL_PWR_EnterSTANDBYMode();
 80013ee:	f003 fdff 	bl	8004ff0 <HAL_PWR_EnterSTANDBYMode>
	  HAL_Delay(1000); // program should not reach this state - added delay to re-enter Standby mode
 80013f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f6:	f000 f97b 	bl	80016f0 <HAL_Delay>
  while (1)
 80013fa:	e7f6      	b.n	80013ea <main+0x1a>

080013fc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013fc:	4770      	bx	lr

080013fe <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013fe:	4770      	bx	lr

08001400 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001400:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001402:	f001 ff43 	bl	800328c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001406:	2001      	movs	r0, #1
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <PWR_EnterStopMode+0x14>)
 800140a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800140e:	f003 fe47 	bl	80050a0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001412:	bd08      	pop	{r3, pc}
 8001414:	58000400 	.word	0x58000400

08001418 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001418:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800141a:	f001 ff3e 	bl	800329a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800141e:	bd08      	pop	{r3, pc}

08001420 <PWR_ExitStopMode>:
{
 8001420:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001422:	f001 ff3a 	bl	800329a <HAL_ResumeTick>
  vcom_Resume();
 8001426:	f000 fbc3 	bl	8001bb0 <vcom_Resume>
}
 800142a:	bd08      	pop	{r3, pc}

0800142c <PWR_EnterSleepMode>:
{
 800142c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800142e:	f001 ff2d 	bl	800328c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001432:	2101      	movs	r1, #1
 8001434:	2000      	movs	r0, #0
 8001436:	f003 fdb5 	bl	8004fa4 <HAL_PWR_EnterSLEEPMode>
}
 800143a:	bd08      	pop	{r3, pc}

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f002 fc33 	bl	8003cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bd08      	pop	{r3, pc}

0800144c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler>

0800144e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler>

08001450 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler>

08001452 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler>

08001454 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler>

08001456 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	4770      	bx	lr

08001458 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800145a:	2001      	movs	r0, #1
 800145c:	f003 fc8e 	bl	8004d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001460:	bd08      	pop	{r3, pc}

08001462 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001462:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001464:	2002      	movs	r0, #2
 8001466:	f003 fc89 	bl	8004d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800146a:	bd08      	pop	{r3, pc}

0800146c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800146c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800146e:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA1_Channel5_IRQHandler+0xc>)
 8001470:	f002 fe74 	bl	800415c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001474:	bd08      	pop	{r3, pc}
 8001476:	bf00      	nop
 8001478:	200001b0 	.word	0x200001b0

0800147c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800147c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800147e:	2040      	movs	r0, #64	; 0x40
 8001480:	f003 fc7c 	bl	8004d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001484:	bd08      	pop	{r3, pc}
	...

08001488 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001488:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800148a:	4802      	ldr	r0, [pc, #8]	; (8001494 <USART2_IRQHandler+0xc>)
 800148c:	f004 ff72 	bl	8006374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001490:	bd08      	pop	{r3, pc}
 8001492:	bf00      	nop
 8001494:	20000210 	.word	0x20000210

08001498 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX Occupied Interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <IPCC_C1_RX_IRQHandler+0xc>)
 800149c:	f003 fca8 	bl	8004df0 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80014a0:	bd08      	pop	{r3, pc}
 80014a2:	bf00      	nop
 80014a4:	2000012c 	.word	0x2000012c

080014a8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX Free Interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80014a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <IPCC_C1_TX_IRQHandler+0xc>)
 80014ac:	f003 fc76 	bl	8004d9c <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80014b0:	bd08      	pop	{r3, pc}
 80014b2:	bf00      	nop
 80014b4:	2000012c 	.word	0x2000012c

080014b8 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80014b8:	b40c      	push	{r2, r3}
 80014ba:	b500      	push	{lr}
 80014bc:	b083      	sub	sp, #12
 80014be:	ab04      	add	r3, sp, #16
 80014c0:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80014c4:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80014c6:	f009 f959 	bl	800a77c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80014ca:	b003      	add	sp, #12
 80014cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80014d0:	b002      	add	sp, #8
 80014d2:	4770      	bx	lr

080014d4 <TimestampNow>:
{
 80014d4:	b530      	push	{r4, r5, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80014dc:	a802      	add	r0, sp, #8
 80014de:	f008 ff25 	bl	800a32c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80014e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	9b02      	ldr	r3, [sp, #8]
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <TimestampNow+0x2c>)
 80014ec:	2110      	movs	r1, #16
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ffe2 	bl	80014b8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7fe fe43 	bl	8000180 <strlen>
 80014fa:	8028      	strh	r0, [r5, #0]
}
 80014fc:	b005      	add	sp, #20
 80014fe:	bd30      	pop	{r4, r5, pc}
 8001500:	0800a9f4 	.word	0x0800a9f4

08001504 <MBMUXIF_Init>:
{
 8001504:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_H, "\r\nCM4: System Initialization started \r\n");
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MBMUXIF_Init+0xb4>)
 8001508:	2201      	movs	r2, #1
 800150a:	2100      	movs	r1, #0
 800150c:	2003      	movs	r0, #3
 800150e:	f008 fd97 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_SystemInit();
 8001512:	f001 fc99 	bl	8002e48 <MBMUXIF_SystemInit>
  if (init_status < 0)
 8001516:	2800      	cmp	r0, #0
 8001518:	db42      	blt.n	80015a0 <MBMUXIF_Init+0x9c>
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800151a:	2001      	movs	r0, #1
 800151c:	f003 fd82 	bl	8005024 <HAL_PWREx_ReleaseCore>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_ALLOW_CPU2_TO_START);
 8001520:	f245 5055 	movw	r0, #21845	; 0x5555
 8001524:	f001 fc88 	bl	8002e38 <MBMUXIF_SetCpusSynchroFlag>
  APP_LOG(TS_ON, VLEVEL_H, "CM4: System Initialization done: Wait for CM0PLUS \r\n");
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <MBMUXIF_Init+0xb8>)
 800152a:	2201      	movs	r2, #1
 800152c:	2100      	movs	r1, #0
 800152e:	2003      	movs	r0, #3
 8001530:	f008 fd86 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  MBMUXIF_WaitCm0MbmuxIsInitialized();
 8001534:	f001 fd4e 	bl	8002fd4 <MBMUXIF_WaitCm0MbmuxIsInitialized>
  APP_LOG(TS_ON, VLEVEL_H, "CM0PLUS: System Initialization started \r\n");
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MBMUXIF_Init+0xbc>)
 800153a:	2201      	movs	r2, #1
 800153c:	2100      	movs	r1, #0
 800153e:	2003      	movs	r0, #3
 8001540:	f008 fd7e 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_supported_features_list = MBMUXIF_SystemSendCm0plusInfoListReq();
 8001544:	f001 fd8d 	bl	8003062 <MBMUXIF_SystemSendCm0plusInfoListReq>
  MBMUX_SetCm0plusFeatureListPtr(p_cm0plus_supported_features_list);
 8001548:	f001 fb0e 	bl	8002b68 <MBMUX_SetCm0plusFeatureListPtr>
  APP_LOG(TS_ON, VLEVEL_H, "System Initialization CM4-CM0PLUS completed \r\n");
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <MBMUXIF_Init+0xc0>)
 800154e:	2201      	movs	r2, #1
 8001550:	2100      	movs	r1, #0
 8001552:	2003      	movs	r0, #3
 8001554:	f008 fd74 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_SystemPrio_Add(FEAT_INFO_SYSTEM_NOTIF_PRIO_A_ID);
 8001558:	2002      	movs	r0, #2
 800155a:	f001 fdc5 	bl	80030e8 <MBMUXIF_SystemPrio_Add>
  if (init_status < 0)
 800155e:	2800      	cmp	r0, #0
 8001560:	db21      	blt.n	80015a6 <MBMUXIF_Init+0xa2>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_RTC_REGISTERED);
 8001562:	f649 1099 	movw	r0, #39321	; 0x9999
 8001566:	f001 fc67 	bl	8002e38 <MBMUXIF_SetCpusSynchroFlag>
  APP_LOG(TS_ON, VLEVEL_H, "System_Priority_A Registration for RTC Alarm handling completed \r\n");
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MBMUXIF_Init+0xc4>)
 800156c:	2201      	movs	r2, #1
 800156e:	2100      	movs	r1, #0
 8001570:	2003      	movs	r0, #3
 8001572:	f008 fd65 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_TraceInit();
 8001576:	f001 fdfd 	bl	8003174 <MBMUXIF_TraceInit>
  if (init_status < 0)
 800157a:	2800      	cmp	r0, #0
 800157c:	db16      	blt.n	80015ac <MBMUXIF_Init+0xa8>
  APP_LOG(TS_ON, VLEVEL_H, "Trace registration CM4-CM0PLUS completed \r\n");
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MBMUXIF_Init+0xc8>)
 8001580:	2201      	movs	r2, #1
 8001582:	2100      	movs	r1, #0
 8001584:	2003      	movs	r0, #3
 8001586:	f008 fd5b 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  init_status = MBMUXIF_LoraInit();
 800158a:	f001 fba9 	bl	8002ce0 <MBMUXIF_LoraInit>
  if (init_status < 0)
 800158e:	2800      	cmp	r0, #0
 8001590:	db0f      	blt.n	80015b2 <MBMUXIF_Init+0xae>
  APP_LOG(TS_ON, VLEVEL_H, "Lora registration CM4-CM0PLUS completed \r\n");
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MBMUXIF_Init+0xcc>)
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	2003      	movs	r0, #3
 800159a:	f008 fd51 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 800159e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015a0:	f7ff fecc 	bl	800133c <Error_Handler>
 80015a4:	e7b9      	b.n	800151a <MBMUXIF_Init+0x16>
    Error_Handler();
 80015a6:	f7ff fec9 	bl	800133c <Error_Handler>
 80015aa:	e7da      	b.n	8001562 <MBMUXIF_Init+0x5e>
    Error_Handler();
 80015ac:	f7ff fec6 	bl	800133c <Error_Handler>
 80015b0:	e7e5      	b.n	800157e <MBMUXIF_Init+0x7a>
    Error_Handler();
 80015b2:	f7ff fec3 	bl	800133c <Error_Handler>
 80015b6:	e7ec      	b.n	8001592 <MBMUXIF_Init+0x8e>
 80015b8:	0800aa00 	.word	0x0800aa00
 80015bc:	0800aa28 	.word	0x0800aa28
 80015c0:	0800aa60 	.word	0x0800aa60
 80015c4:	0800aa8c 	.word	0x0800aa8c
 80015c8:	0800aabc 	.word	0x0800aabc
 80015cc:	0800ab00 	.word	0x0800ab00
 80015d0:	0800ab2c 	.word	0x0800ab2c

080015d4 <SystemApp_Init>:
{
 80015d4:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	6893      	ldr	r3, [r2, #8]
 80015dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015e0:	6093      	str	r3, [r2, #8]
  DBG_Init();
 80015e2:	f7ff f9fb 	bl	80009dc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 80015e6:	f008 fcab 	bl	8009f40 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <SystemApp_Init+0x50>)
 80015ec:	f008 fcce 	bl	8009f8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <SystemApp_Init+0x54>)
 80015f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f6:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f008 fccd 	bl	8009f98 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 80015fe:	f7ff fac1 	bl	8000b84 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001602:	f000 f89b 	bl	800173c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001606:	f008 fe03 	bl	800a210 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800160a:	2101      	movs	r1, #1
 800160c:	4608      	mov	r0, r1
 800160e:	f008 fe1f 	bl	800a250 <UTIL_LPM_SetOffMode>
  MBMUXIF_Init();
 8001612:	f7ff ff77 	bl	8001504 <MBMUXIF_Init>
  UTIL_TIMER_Init();
 8001616:	f008 feab 	bl	800a370 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <SystemApp_Init+0x58>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	bd08      	pop	{r3, pc}
 8001622:	bf00      	nop
 8001624:	080014d5 	.word	0x080014d5
 8001628:	58004000 	.word	0x58004000
 800162c:	20000170 	.word	0x20000170

08001630 <Process_Sys_Notif>:
{
 8001630:	b510      	push	{r4, lr}
  notif_ack_id = ComObj->MsgId;
 8001632:	6803      	ldr	r3, [r0, #0]
  switch (notif_ack_id)
 8001634:	2b03      	cmp	r3, #3
 8001636:	d009      	beq.n	800164c <Process_Sys_Notif+0x1c>
  APP_LOG(TS_ON, VLEVEL_H, "CM4>(System)\r\n");
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <Process_Sys_Notif+0x34>)
 800163a:	2201      	movs	r2, #1
 800163c:	2100      	movs	r1, #0
 800163e:	2003      	movs	r0, #3
 8001640:	f008 fcfe 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  MBMUXIF_SystemSendAck(FEAT_INFO_SYSTEM_ID);
 8001644:	2000      	movs	r0, #0
 8001646:	f001 fcfd 	bl	8003044 <MBMUXIF_SystemSendAck>
}
 800164a:	bd10      	pop	{r4, pc}
 800164c:	4604      	mov	r4, r0
      APP_LOG(TS_ON, VLEVEL_H, "CM4<(System)\r\n");
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <Process_Sys_Notif+0x38>)
 8001650:	2201      	movs	r2, #1
 8001652:	2100      	movs	r1, #0
 8001654:	2003      	movs	r0, #3
 8001656:	f008 fcf3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      ComObj->ParamCnt = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal = 0; /* dummy value  */
 800165e:	6163      	str	r3, [r4, #20]
      break;
 8001660:	e7ea      	b.n	8001638 <Process_Sys_Notif+0x8>
 8001662:	bf00      	nop
 8001664:	0800ab68 	.word	0x0800ab68
 8001668:	0800ab58 	.word	0x0800ab58

0800166c <GetBatteryLevel>:
{
 800166c:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800166e:	f7ff fa91 	bl	8000b94 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001672:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001676:	4298      	cmp	r0, r3
 8001678:	d80d      	bhi.n	8001696 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 800167a:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 800167e:	d30c      	bcc.n	800169a <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001680:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001684:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001688:	0040      	lsls	r0, r0, #1
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <GetBatteryLevel+0x34>)
 800168c:	fba3 3000 	umull	r3, r0, r3, r0
 8001690:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001694:	e000      	b.n	8001698 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001696:	20fe      	movs	r0, #254	; 0xfe
}
 8001698:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 800169a:	2000      	movs	r0, #0
 800169c:	e7fc      	b.n	8001698 <GetBatteryLevel+0x2c>
 800169e:	bf00      	nop
 80016a0:	1b4e81b5 	.word	0x1b4e81b5

080016a4 <GetTemperatureLevel>:
{
 80016a4:	b500      	push	{lr}
 80016a6:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80016a8:	4668      	mov	r0, sp
 80016aa:	f000 f82b 	bl	8001704 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80016ae:	9801      	ldr	r0, [sp, #4]
 80016b0:	f7fe ffcc 	bl	800064c <__aeabi_f2iz>
}
 80016b4:	b200      	sxth	r0, r0
 80016b6:	b007      	add	sp, #28
 80016b8:	f85d fb04 	ldr.w	pc, [sp], #4

080016bc <UTIL_ADV_TRACE_PreSendHook>:
{
 80016bc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80016be:	2101      	movs	r1, #1
 80016c0:	2002      	movs	r0, #2
 80016c2:	f008 fdaf 	bl	800a224 <UTIL_LPM_SetStopMode>
}
 80016c6:	bd08      	pop	{r3, pc}

080016c8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80016c8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2002      	movs	r0, #2
 80016ce:	f008 fda9 	bl	800a224 <UTIL_LPM_SetStopMode>
}
 80016d2:	bd08      	pop	{r3, pc}

080016d4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80016d4:	2000      	movs	r0, #0
 80016d6:	4770      	bx	lr

080016d8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80016d8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <HAL_GetTick+0x14>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b90b      	cbnz	r3, 80016e4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80016e0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80016e2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80016e4:	f000 f856 	bl	8001794 <TIMER_IF_GetTimerValue>
 80016e8:	e7fb      	b.n	80016e2 <HAL_GetTick+0xa>
 80016ea:	bf00      	nop
 80016ec:	20000170 	.word	0x20000170

080016f0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80016f0:	b500      	push	{lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80016f6:	9801      	ldr	r0, [sp, #4]
 80016f8:	f000 f916 	bl	8001928 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80016fc:	b003      	add	sp, #12
 80016fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001704 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001704:	b510      	push	{r4, lr}
 8001706:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001708:	f7ff fa66 	bl	8000bd8 <SYS_GetTemperatureLevel>
 800170c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001710:	f7fe fdf8 	bl	8000304 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <EnvSensors_Read+0x28>)
 8001716:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001718:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <EnvSensors_Read+0x2c>)
 800171c:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <EnvSensors_Read+0x30>)
 8001720:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <EnvSensors_Read+0x34>)
 8001724:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001726:	2000      	movs	r0, #0
 8001728:	bd10      	pop	{r4, pc}
 800172a:	bf00      	nop
 800172c:	42480000 	.word	0x42480000
 8001730:	447a0000 	.word	0x447a0000
 8001734:	003e090d 	.word	0x003e090d
 8001738:	000503ab 	.word	0x000503ab

0800173c <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800173c:	2000      	movs	r0, #0
 800173e:	4770      	bx	lr

08001740 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <TIMER_IF_SetTimerContext+0x1c>)
 8001742:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001744:	e001      	b.n	800174a <TIMER_IF_SetTimerContext+0xa>
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <TIMER_IF_SetTimerContext+0x1c>)
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <TIMER_IF_SetTimerContext+0x1c>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4283      	cmp	r3, r0
 8001750:	d1f9      	bne.n	8001746 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001752:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <TIMER_IF_SetTimerContext+0x20>)
 8001756:	6018      	str	r0, [r3, #0]
}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40002800 	.word	0x40002800
 8001760:	20000174 	.word	0x20000174

08001764 <TIMER_IF_GetTimerContext>:
}
 8001764:	4b01      	ldr	r3, [pc, #4]	; (800176c <TIMER_IF_GetTimerContext+0x8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000174 	.word	0x20000174

08001770 <TIMER_IF_GetTimerElapsedTime>:
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001772:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001774:	e001      	b.n	800177a <TIMER_IF_GetTimerElapsedTime+0xa>
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001778:	6898      	ldr	r0, [r3, #8]
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4283      	cmp	r3, r0
 8001780:	d1f9      	bne.n	8001776 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001782:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001784:	4b02      	ldr	r3, [pc, #8]	; (8001790 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001786:	681b      	ldr	r3, [r3, #0]
}
 8001788:	1ac0      	subs	r0, r0, r3
 800178a:	4770      	bx	lr
 800178c:	40002800 	.word	0x40002800
 8001790:	20000174 	.word	0x20000174

08001794 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <TIMER_IF_GetTimerValue+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b153      	cbz	r3, 80017b0 <TIMER_IF_GetTimerValue+0x1c>
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <TIMER_IF_GetTimerValue+0x24>)
 800179c:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800179e:	e001      	b.n	80017a4 <TIMER_IF_GetTimerValue+0x10>
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <TIMER_IF_GetTimerValue+0x24>)
 80017a2:	6898      	ldr	r0, [r3, #8]
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <TIMER_IF_GetTimerValue+0x24>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4283      	cmp	r3, r0
 80017aa:	d1f9      	bne.n	80017a0 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 80017ac:	43c0      	mvns	r0, r0
 80017ae:	4770      	bx	lr
  uint32_t ret = 0;
 80017b0:	2000      	movs	r0, #0
}
 80017b2:	4770      	bx	lr
 80017b4:	20000171 	.word	0x20000171
 80017b8:	40002800 	.word	0x40002800

080017bc <TIMER_IF_GetMinimumTimeout>:
}
 80017bc:	2003      	movs	r0, #3
 80017be:	4770      	bx	lr

080017c0 <TIMER_IF_Convert_ms2Tick>:
{
 80017c0:	b508      	push	{r3, lr}
 80017c2:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80017c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c8:	2300      	movs	r3, #0
 80017ca:	0280      	lsls	r0, r0, #10
 80017cc:	0d89      	lsrs	r1, r1, #22
 80017ce:	f7fe ff83 	bl	80006d8 <__aeabi_uldivmod>
}
 80017d2:	bd08      	pop	{r3, pc}

080017d4 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80017d4:	0ec2      	lsrs	r2, r0, #27
 80017d6:	0143      	lsls	r3, r0, #5
 80017d8:	1a1b      	subs	r3, r3, r0
 80017da:	f162 0200 	sbc.w	r2, r2, #0
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	181b      	adds	r3, r3, r0
 80017e8:	f142 0000 	adc.w	r0, r2, #0
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80017f2:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 80017f6:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 80017fa:	4770      	bx	lr

080017fc <TIMER_IF_Init>:
{
 80017fc:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <TIMER_IF_Init+0x20>)
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <TIMER_IF_Init+0x24>)
 8001802:	6003      	str	r3, [r0, #0]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001808:	f004 fb96 	bl	8005f38 <HAL_RTC_DeactivateAlarm>
  TIMER_IF_SetTimerContext();
 800180c:	f7ff ff98 	bl	8001740 <TIMER_IF_SetTimerContext>
  RTC_Initialized = true;
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <TIMER_IF_Init+0x28>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	2000      	movs	r0, #0
 8001818:	bd08      	pop	{r3, pc}
 800181a:	bf00      	nop
 800181c:	20000178 	.word	0x20000178
 8001820:	40002800 	.word	0x40002800
 8001824:	20000171 	.word	0x20000171

08001828 <TIMER_IF_StopTimer>:
{
 8001828:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <TIMER_IF_StopTimer+0x18>)
 800182c:	2201      	movs	r2, #1
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <TIMER_IF_StopTimer+0x1c>)
 8001836:	f004 fb7f 	bl	8005f38 <HAL_RTC_DeactivateAlarm>
}
 800183a:	2000      	movs	r0, #0
 800183c:	bd08      	pop	{r3, pc}
 800183e:	bf00      	nop
 8001840:	40002800 	.word	0x40002800
 8001844:	20000178 	.word	0x20000178

08001848 <TIMER_IF_StartTimer>:
{
 8001848:	b510      	push	{r4, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800184e:	222c      	movs	r2, #44	; 0x2c
 8001850:	2100      	movs	r1, #0
 8001852:	a801      	add	r0, sp, #4
 8001854:	f009 f888 	bl	800a968 <memset>
  TIMER_IF_StopTimer();
 8001858:	f7ff ffe6 	bl	8001828 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <TIMER_IF_StartTimer+0x48>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001862:	2300      	movs	r3, #0
 8001864:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001866:	43e4      	mvns	r4, r4
 8001868:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800186a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800186c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001870:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001878:	2201      	movs	r2, #1
 800187a:	a901      	add	r1, sp, #4
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <TIMER_IF_StartTimer+0x4c>)
 800187e:	f004 fba7 	bl	8005fd0 <HAL_RTC_SetAlarm_IT>
 8001882:	b910      	cbnz	r0, 800188a <TIMER_IF_StartTimer+0x42>
}
 8001884:	2000      	movs	r0, #0
 8001886:	b00c      	add	sp, #48	; 0x30
 8001888:	bd10      	pop	{r4, pc}
    Error_Handler();
 800188a:	f7ff fd57 	bl	800133c <Error_Handler>
 800188e:	e7f9      	b.n	8001884 <TIMER_IF_StartTimer+0x3c>
 8001890:	20000174 	.word	0x20000174
 8001894:	20000178 	.word	0x20000178

08001898 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001898:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800189a:	2102      	movs	r1, #2
 800189c:	4801      	ldr	r0, [pc, #4]	; (80018a4 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800189e:	f004 fc5a 	bl	8006156 <HAL_RTCEx_BKUPRead>
}
 80018a2:	bd08      	pop	{r3, pc}
 80018a4:	20000178 	.word	0x20000178

080018a8 <TIMER_IF_GetTime>:
{
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4605      	mov	r5, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <TIMER_IF_GetTime+0x34>)
 80018ae:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018b0:	e001      	b.n	80018b6 <TIMER_IF_GetTime+0xe>
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <TIMER_IF_GetTime+0x34>)
 80018b4:	689c      	ldr	r4, [r3, #8]
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <TIMER_IF_GetTime+0x34>)
 80018b8:	6892      	ldr	r2, [r2, #8]
 80018ba:	42a2      	cmp	r2, r4
 80018bc:	d1f9      	bne.n	80018b2 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80018be:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80018c0:	f7ff ffea 	bl	8001898 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80018c4:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80018c6:	0aa4      	lsrs	r4, r4, #10
 80018c8:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80018cc:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80018d0:	f7ff ff80 	bl	80017d4 <TIMER_IF_Convert_Tick2ms>
 80018d4:	8028      	strh	r0, [r5, #0]
}
 80018d6:	4620      	mov	r0, r4
 80018d8:	bd38      	pop	{r3, r4, r5, pc}
 80018da:	bf00      	nop
 80018dc:	40002800 	.word	0x40002800

080018e0 <TIMER_IF_BkUp_Read_Seconds>:
{
 80018e0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80018e2:	2100      	movs	r1, #0
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80018e6:	f004 fc36 	bl	8006156 <HAL_RTCEx_BKUPRead>
}
 80018ea:	bd08      	pop	{r3, pc}
 80018ec:	20000178 	.word	0x20000178

080018f0 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80018f0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80018f2:	2101      	movs	r1, #1
 80018f4:	4801      	ldr	r0, [pc, #4]	; (80018fc <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80018f6:	f004 fc2e 	bl	8006156 <HAL_RTCEx_BKUPRead>
}
 80018fa:	bd08      	pop	{r3, pc}
 80018fc:	20000178 	.word	0x20000178

08001900 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001900:	b508      	push	{r3, lr}
 8001902:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001904:	2100      	movs	r1, #0
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001908:	f004 fc1e 	bl	8006148 <HAL_RTCEx_BKUPWrite>
}
 800190c:	bd08      	pop	{r3, pc}
 800190e:	bf00      	nop
 8001910:	20000178 	.word	0x20000178

08001914 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001914:	b508      	push	{r3, lr}
 8001916:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001918:	2101      	movs	r1, #1
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 800191c:	f004 fc14 	bl	8006148 <HAL_RTCEx_BKUPWrite>
}
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	20000178 	.word	0x20000178

08001928 <TIMER_IF_DelayMs>:
{
 8001928:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800192a:	f7ff ff49 	bl	80017c0 <TIMER_IF_Convert_ms2Tick>
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 8001930:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001932:	e001      	b.n	8001938 <TIMER_IF_DelayMs+0x10>
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 800193a:	6892      	ldr	r2, [r2, #8]
 800193c:	428a      	cmp	r2, r1
 800193e:	d1f9      	bne.n	8001934 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001940:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001942:	e00a      	b.n	800195a <TIMER_IF_DelayMs+0x32>
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 800194a:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800194c:	429a      	cmp	r2, r3
 800194e:	d1f9      	bne.n	8001944 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001950:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001952:	1a5b      	subs	r3, r3, r1
 8001954:	4283      	cmp	r3, r0
 8001956:	d203      	bcs.n	8001960 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001958:	bf00      	nop
 800195a:	4b02      	ldr	r3, [pc, #8]	; (8001964 <TIMER_IF_DelayMs+0x3c>)
 800195c:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800195e:	e7f3      	b.n	8001948 <TIMER_IF_DelayMs+0x20>
}
 8001960:	bd08      	pop	{r3, pc}
 8001962:	bf00      	nop
 8001964:	40002800 	.word	0x40002800

08001968 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800196a:	4817      	ldr	r0, [pc, #92]	; (80019c8 <MX_USART2_UART_Init+0x60>)
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <MX_USART2_UART_Init+0x64>)
 800196e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001970:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001974:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	2300      	movs	r3, #0
 8001978:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800197a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197e:	220c      	movs	r2, #12
 8001980:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001986:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198c:	f005 fbae 	bl	80070ec <HAL_UART_Init>
 8001990:	b970      	cbnz	r0, 80019b0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001992:	2100      	movs	r1, #0
 8001994:	480c      	ldr	r0, [pc, #48]	; (80019c8 <MX_USART2_UART_Init+0x60>)
 8001996:	f005 fd5e 	bl	8007456 <HAL_UARTEx_SetTxFifoThreshold>
 800199a:	b960      	cbnz	r0, 80019b6 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	480a      	ldr	r0, [pc, #40]	; (80019c8 <MX_USART2_UART_Init+0x60>)
 80019a0:	f005 fd7e 	bl	80074a0 <HAL_UARTEx_SetRxFifoThreshold>
 80019a4:	b950      	cbnz	r0, 80019bc <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <MX_USART2_UART_Init+0x60>)
 80019a8:	f005 fd31 	bl	800740e <HAL_UARTEx_EnableFifoMode>
 80019ac:	b948      	cbnz	r0, 80019c2 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ae:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019b0:	f7ff fcc4 	bl	800133c <Error_Handler>
 80019b4:	e7ed      	b.n	8001992 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80019b6:	f7ff fcc1 	bl	800133c <Error_Handler>
 80019ba:	e7ef      	b.n	800199c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80019bc:	f7ff fcbe 	bl	800133c <Error_Handler>
 80019c0:	e7f1      	b.n	80019a6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80019c2:	f7ff fcbb 	bl	800133c <Error_Handler>
}
 80019c6:	e7f2      	b.n	80019ae <MX_USART2_UART_Init+0x46>
 80019c8:	20000210 	.word	0x20000210
 80019cc:	40004400 	.word	0x40004400

080019d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d0:	b530      	push	{r4, r5, lr}
 80019d2:	b097      	sub	sp, #92	; 0x5c
 80019d4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	2100      	movs	r1, #0
 80019d8:	9111      	str	r1, [sp, #68]	; 0x44
 80019da:	9112      	str	r1, [sp, #72]	; 0x48
 80019dc:	9113      	str	r1, [sp, #76]	; 0x4c
 80019de:	9114      	str	r1, [sp, #80]	; 0x50
 80019e0:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e2:	2238      	movs	r2, #56	; 0x38
 80019e4:	a803      	add	r0, sp, #12
 80019e6:	f008 ffbf 	bl	800a968 <memset>
  if(uartHandle->Instance==USART2)
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_UART_MspInit+0xd4>)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019f2:	b017      	add	sp, #92	; 0x5c
 80019f4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_UART_MspInit+0xd8>)
 80019fc:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fe:	a803      	add	r0, sp, #12
 8001a00:	f004 f950 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d144      	bne.n	8001a92 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a12:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a16:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a1a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a1c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001a30:	230c      	movs	r3, #12
 8001a32:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a40:	2307      	movs	r3, #7
 8001a42:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	a911      	add	r1, sp, #68	; 0x44
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f003 f839 	bl	8004ac0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <HAL_UART_MspInit+0xdc>)
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0xe0>)
 8001a52:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001a54:	2314      	movs	r3, #20
 8001a56:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a62:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a66:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a68:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a6a:	f002 f9e9 	bl	8003e40 <HAL_DMA_Init>
 8001a6e:	b998      	cbnz	r0, 8001a98 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a70:	2110      	movs	r1, #16
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <HAL_UART_MspInit+0xdc>)
 8001a74:	f002 fbe6 	bl	8004244 <HAL_DMA_ConfigChannelAttributes>
 8001a78:	b988      	cbnz	r0, 8001a9e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_UART_MspInit+0xdc>)
 8001a7c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001a7e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2107      	movs	r1, #7
 8001a84:	2025      	movs	r0, #37	; 0x25
 8001a86:	f002 f913 	bl	8003cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a8a:	2025      	movs	r0, #37	; 0x25
 8001a8c:	f002 f948 	bl	8003d20 <HAL_NVIC_EnableIRQ>
}
 8001a90:	e7af      	b.n	80019f2 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001a92:	f7ff fc53 	bl	800133c <Error_Handler>
 8001a96:	e7b7      	b.n	8001a08 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001a98:	f7ff fc50 	bl	800133c <Error_Handler>
 8001a9c:	e7e8      	b.n	8001a70 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001a9e:	f7ff fc4d 	bl	800133c <Error_Handler>
 8001aa2:	e7ea      	b.n	8001a7a <HAL_UART_MspInit+0xaa>
 8001aa4:	40004400 	.word	0x40004400
 8001aa8:	000c0004 	.word	0x000c0004
 8001aac:	200001b0 	.word	0x200001b0
 8001ab0:	40020058 	.word	0x40020058

08001ab4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001ab4:	6802      	ldr	r2, [r0, #0]
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_UART_MspDeInit+0x34>)
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d000      	beq.n	8001abe <HAL_UART_MspDeInit+0xa>
 8001abc:	4770      	bx	lr
{
 8001abe:	b510      	push	{r4, lr}
 8001ac0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001ace:	210c      	movs	r1, #12
 8001ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad4:	f003 f8c6 	bl	8004c64 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001ad8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001ada:	f002 fa23 	bl	8003f24 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ade:	2025      	movs	r0, #37	; 0x25
 8001ae0:	f002 f92c 	bl	8003d3c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004400 	.word	0x40004400

08001aec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001aec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <vcom_Init+0x20>)
 8001af0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001af2:	f7ff f947 	bl	8000d84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001af6:	f7ff ff37 	bl	8001968 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <vcom_Init+0x24>)
 8001afc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001b08:	2000      	movs	r0, #0
 8001b0a:	bd08      	pop	{r3, pc}
 8001b0c:	200002a8 	.word	0x200002a8
 8001b10:	58000800 	.word	0x58000800

08001b14 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001b14:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b24:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001b2a:	4804      	ldr	r0, [pc, #16]	; (8001b3c <vcom_DeInit+0x28>)
 8001b2c:	f7ff ffc2 	bl	8001ab4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001b30:	200f      	movs	r0, #15
 8001b32:	f002 f903 	bl	8003d3c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001b36:	2000      	movs	r0, #0
 8001b38:	bd08      	pop	{r3, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000210 	.word	0x20000210

08001b40 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001b40:	b508      	push	{r3, lr}
 8001b42:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001b44:	4601      	mov	r1, r0
 8001b46:	4802      	ldr	r0, [pc, #8]	; (8001b50 <vcom_Trace_DMA+0x10>)
 8001b48:	f004 fb50 	bl	80061ec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	bd08      	pop	{r3, pc}
 8001b50:	20000210 	.word	0x20000210

08001b54 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <vcom_ReceiveInit+0x50>)
 8001b5a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b60:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001b62:	ab02      	add	r3, sp, #8
 8001b64:	e913 0006 	ldmdb	r3, {r1, r2}
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <vcom_ReceiveInit+0x54>)
 8001b6a:	f005 fbf8 	bl	800735e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <vcom_ReceiveInit+0x54>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69da      	ldr	r2, [r3, #28]
 8001b74:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001b78:	d1f9      	bne.n	8001b6e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001b80:	d0fb      	beq.n	8001b7a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b88:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001b8a:	4c07      	ldr	r4, [pc, #28]	; (8001ba8 <vcom_ReceiveInit+0x54>)
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f005 fc27 	bl	80073e0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <vcom_ReceiveInit+0x58>)
 8001b96:	4620      	mov	r0, r4
 8001b98:	f005 fb7a 	bl	8007290 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002a4 	.word	0x200002a4
 8001ba8:	20000210 	.word	0x20000210
 8001bac:	200002ac 	.word	0x200002ac

08001bb0 <vcom_Resume>:

void vcom_Resume(void)
{
 8001bb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <vcom_Resume+0x20>)
 8001bb4:	f005 fa9a 	bl	80070ec <HAL_UART_Init>
 8001bb8:	b920      	cbnz	r0, 8001bc4 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <vcom_Resume+0x24>)
 8001bbc:	f002 f940 	bl	8003e40 <HAL_DMA_Init>
 8001bc0:	b918      	cbnz	r0, 8001bca <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001bc2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bc4:	f7ff fbba 	bl	800133c <Error_Handler>
 8001bc8:	e7f7      	b.n	8001bba <vcom_Resume+0xa>
    Error_Handler();
 8001bca:	f7ff fbb7 	bl	800133c <Error_Handler>
}
 8001bce:	e7f8      	b.n	8001bc2 <vcom_Resume+0x12>
 8001bd0:	20000210 	.word	0x20000210
 8001bd4:	200001b0 	.word	0x200001b0

08001bd8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001bda:	6802      	ldr	r2, [r0, #0]
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_UART_TxCpltCallback+0x18>)
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d000      	beq.n	8001be4 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001be2:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_UART_TxCpltCallback+0x1c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2000      	movs	r0, #0
 8001bea:	4798      	blx	r3
}
 8001bec:	e7f9      	b.n	8001be2 <HAL_UART_TxCpltCallback+0xa>
 8001bee:	bf00      	nop
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	200002a8 	.word	0x200002a8

08001bf8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_UART_RxCpltCallback+0x2c>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d000      	beq.n	8001c02 <HAL_UART_RxCpltCallback+0xa>
 8001c00:	4770      	bx	lr
{
 8001c02:	b510      	push	{r4, lr}
 8001c04:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_UART_RxCpltCallback+0x30>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b12b      	cbz	r3, 8001c18 <HAL_UART_RxCpltCallback+0x20>
 8001c0c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001c10:	b912      	cbnz	r2, 8001c18 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001c12:	2101      	movs	r1, #1
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <HAL_UART_RxCpltCallback+0x34>)
 8001c16:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4904      	ldr	r1, [pc, #16]	; (8001c2c <HAL_UART_RxCpltCallback+0x34>)
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f005 fb37 	bl	8007290 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	40004400 	.word	0x40004400
 8001c28:	200002a4 	.word	0x200002a4
 8001c2c:	200002ac 	.word	0x200002ac

08001c30 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001c32:	f7ff fccf 	bl	80015d4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001c36:	f000 fbc3 	bl	80023c0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001c3a:	bd08      	pop	{r3, pc}

08001c3c <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8001c3c:	4770      	bx	lr

08001c3e <OnMacProcessNotify>:
static void OnMacProcessNotify(void)
{
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 8001c3e:	4770      	bx	lr

08001c40 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001c40:	4b01      	ldr	r3, [pc, #4]	; (8001c48 <OnTxFrameCtrlChanged+0x8>)
 8001c42:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000058 	.word	0x20000058

08001c4c <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001c4c:	4b01      	ldr	r3, [pc, #4]	; (8001c54 <OnPingSlotPeriodicityChanged+0x8>)
 8001c4e:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000058 	.word	0x20000058

08001c58 <OnBeaconStatusChange>:
  if (params != NULL)
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d03f      	beq.n	8001cdc <OnBeaconStatusChange+0x84>
{
 8001c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c60:	b08c      	sub	sp, #48	; 0x30
 8001c62:	4603      	mov	r3, r0
    switch (params->State)
 8001c64:	7842      	ldrb	r2, [r0, #1]
 8001c66:	2a02      	cmp	r2, #2
 8001c68:	d00a      	beq.n	8001c80 <OnBeaconStatusChange+0x28>
 8001c6a:	2a03      	cmp	r2, #3
 8001c6c:	d02f      	beq.n	8001cce <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <OnBeaconStatusChange+0x88>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	4611      	mov	r1, r2
 8001c74:	2002      	movs	r0, #2
 8001c76:	f008 f9e3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8001c7a:	b00c      	add	sp, #48	; 0x30
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8001c80:	7c02      	ldrb	r2, [r0, #16]
 8001c82:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001c86:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001c8a:	7d5c      	ldrb	r4, [r3, #21]
 8001c8c:	7d9d      	ldrb	r5, [r3, #22]
 8001c8e:	7dde      	ldrb	r6, [r3, #23]
 8001c90:	7e1f      	ldrb	r7, [r3, #24]
 8001c92:	f893 c019 	ldrb.w	ip, [r3, #25]
 8001c96:	f893 e01a 	ldrb.w	lr, [r3, #26]
 8001c9a:	f893 801b 	ldrb.w	r8, [r3, #27]
 8001c9e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8001ca2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001ca6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8001caa:	9708      	str	r7, [sp, #32]
 8001cac:	9607      	str	r6, [sp, #28]
 8001cae:	9506      	str	r5, [sp, #24]
 8001cb0:	9405      	str	r4, [sp, #20]
 8001cb2:	685c      	ldr	r4, [r3, #4]
 8001cb4:	9404      	str	r4, [sp, #16]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	9303      	str	r3, [sp, #12]
 8001cba:	9002      	str	r0, [sp, #8]
 8001cbc:	9101      	str	r1, [sp, #4]
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <OnBeaconStatusChange+0x8c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f008 f9ba 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8001ccc:	e7d5      	b.n	8001c7a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <OnBeaconStatusChange+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f008 f9b3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8001cda:	e7ce      	b.n	8001c7a <OnBeaconStatusChange+0x22>
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0800abc8 	.word	0x0800abc8
 8001ce4:	0800abe0 	.word	0x0800abe0
 8001ce8:	0800ac54 	.word	0x0800ac54

08001cec <OnClassChange>:
{
 8001cec:	b500      	push	{lr}
 8001cee:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <OnClassChange+0x1c>)
 8001cf2:	5c1b      	ldrb	r3, [r3, r0]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <OnClassChange+0x20>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f008 f99f 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8001d02:	b003      	add	sp, #12
 8001d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d08:	0800ac90 	.word	0x0800ac90
 8001d0c:	0800ac74 	.word	0x0800ac74

08001d10 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8001d10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8001d12:	2801      	cmp	r0, #1
 8001d14:	d006      	beq.n	8001d24 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <OnNvmDataChange+0x24>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f008 f98f 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8001d22:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <OnNvmDataChange+0x28>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	4611      	mov	r1, r2
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f008 f988 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8001d30:	e7f7      	b.n	8001d22 <OnNvmDataChange+0x12>
 8001d32:	bf00      	nop
 8001d34:	0800aca8 	.word	0x0800aca8
 8001d38:	0800ac94 	.word	0x0800ac94

08001d3c <OnTxTimerEvent>:
{
 8001d3c:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <OnTxTimerEvent+0x14>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	f005 fc80 	bl	8007648 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <OnTxTimerEvent+0x18>)
 8001d4a:	f008 fbd5 	bl	800a4f8 <UTIL_TIMER_Start>
}
 8001d4e:	bd08      	pop	{r3, pc}
 8001d50:	200003ec 	.word	0x200003ec
 8001d54:	20000410 	.word	0x20000410

08001d58 <OnSystemReset>:
{
 8001d58:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8001d5a:	f000 fcd3 	bl	8002704 <LmHandlerHalt>
 8001d5e:	b100      	cbz	r0, 8001d62 <OnSystemReset+0xa>
}
 8001d60:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8001d62:	f000 fca7 	bl	80026b4 <LmHandlerJoinStatus>
 8001d66:	2801      	cmp	r0, #1
 8001d68:	d1fa      	bne.n	8001d60 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d6e:	4905      	ldr	r1, [pc, #20]	; (8001d84 <OnSystemReset+0x2c>)
 8001d70:	68ca      	ldr	r2, [r1, #12]
 8001d72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <OnSystemReset+0x30>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
 8001d7c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d80:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001d82:	e7fd      	b.n	8001d80 <OnSystemReset+0x28>
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	05fa0004 	.word	0x05fa0004

08001d8c <OnTxPeriodicityChanged>:
{
 8001d8c:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <OnTxPeriodicityChanged+0x28>)
 8001d90:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8001d92:	b910      	cbnz	r0, 8001d9a <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8001d94:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d98:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8001d9a:	4c07      	ldr	r4, [pc, #28]	; (8001db8 <OnTxPeriodicityChanged+0x2c>)
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f008 fb51 	bl	800a444 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <OnTxPeriodicityChanged+0x28>)
 8001da4:	6819      	ldr	r1, [r3, #0]
 8001da6:	4620      	mov	r0, r4
 8001da8:	f008 fbec 	bl	800a584 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8001dac:	4620      	mov	r0, r4
 8001dae:	f008 fba3 	bl	800a4f8 <UTIL_TIMER_Start>
}
 8001db2:	bd10      	pop	{r4, pc}
 8001db4:	20000070 	.word	0x20000070
 8001db8:	20000410 	.word	0x20000410

08001dbc <OnTxData>:
  if ((params != NULL))
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d042      	beq.n	8001e46 <OnTxData+0x8a>
{
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8001dc6:	7803      	ldrb	r3, [r0, #0]
 8001dc8:	b90b      	cbnz	r3, 8001dce <OnTxData+0x12>
}
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd4:	481c      	ldr	r0, [pc, #112]	; (8001e48 <OnTxData+0x8c>)
 8001dd6:	f002 ffc3 	bl	8004d60 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 8001dda:	481c      	ldr	r0, [pc, #112]	; (8001e4c <OnTxData+0x90>)
 8001ddc:	f008 fb8c 	bl	800a4f8 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <OnTxData+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	4611      	mov	r1, r2
 8001de6:	2002      	movs	r0, #2
 8001de8:	f008 f92a 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001dec:	7c23      	ldrb	r3, [r4, #16]
 8001dee:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8001df2:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8001df6:	9103      	str	r1, [sp, #12]
 8001df8:	9202      	str	r2, [sp, #8]
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	68e3      	ldr	r3, [r4, #12]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <OnTxData+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	4611      	mov	r1, r2
 8001e06:	2003      	movs	r0, #3
 8001e08:	f008 f91a 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <OnTxData+0x9c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4611      	mov	r1, r2
 8001e12:	2003      	movs	r0, #3
 8001e14:	f008 f914 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001e18:	7a23      	ldrb	r3, [r4, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10c      	bne.n	8001e38 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001e1e:	7a63      	ldrb	r3, [r4, #9]
 8001e20:	b143      	cbz	r3, 8001e34 <OnTxData+0x78>
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <OnTxData+0xa0>)
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <OnTxData+0xa4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f008 f907 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8001e32:	e7ca      	b.n	8001dca <OnTxData+0xe>
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <OnTxData+0xa8>)
 8001e36:	e7f5      	b.n	8001e24 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <OnTxData+0xac>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f008 f8fe 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8001e44:	e7c1      	b.n	8001dca <OnTxData+0xe>
 8001e46:	4770      	bx	lr
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	200003f8 	.word	0x200003f8
 8001e50:	0800acc8 	.word	0x0800acc8
 8001e54:	0800acfc 	.word	0x0800acfc
 8001e58:	0800ad30 	.word	0x0800ad30
 8001e5c:	0800acc4 	.word	0x0800acc4
 8001e60:	0800ad40 	.word	0x0800ad40
 8001e64:	0800acbc 	.word	0x0800acbc
 8001e68:	0800ad54 	.word	0x0800ad54

08001e6c <OnJoinRequest>:
  if (joinParams != NULL)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d039      	beq.n	8001ee4 <OnJoinRequest+0x78>
{
 8001e70:	b510      	push	{r4, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001e76:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8001e7a:	b9fb      	cbnz	r3, 8001ebc <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001e7c:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <OnJoinRequest+0x7c>)
 8001e7e:	f008 fae1 	bl	800a444 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <OnJoinRequest+0x80>)
 8001e8a:	f002 ff69 	bl	8004d60 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <OnJoinRequest+0x84>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	4611      	mov	r1, r2
 8001e94:	2002      	movs	r0, #2
 8001e96:	f008 f8d3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001e9a:	79e3      	ldrb	r3, [r4, #7]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d006      	beq.n	8001eae <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <OnJoinRequest+0x88>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	2002      	movs	r0, #2
 8001ea8:	f008 f8ca 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8001eac:	e00c      	b.n	8001ec8 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <OnJoinRequest+0x8c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	f008 f8c3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8001eba:	e005      	b.n	8001ec8 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <OnJoinRequest+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f008 f8bc 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8001ec8:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8001ecc:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <OnJoinRequest+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4611      	mov	r1, r2
 8001eda:	2003      	movs	r0, #3
 8001edc:	f008 f8b0 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200003a4 	.word	0x200003a4
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	0800ad64 	.word	0x0800ad64
 8001ef4:	0800ad9c 	.word	0x0800ad9c
 8001ef8:	0800ad7c 	.word	0x0800ad7c
 8001efc:	0800adbc 	.word	0x0800adbc
 8001f00:	0800add8 	.word	0x0800add8

08001f04 <OnStopJoinTimerEvent>:
{
 8001f04:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <OnStopJoinTimerEvent+0x40>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d013      	beq.n	8001f36 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001f0e:	4c0e      	ldr	r4, [pc, #56]	; (8001f48 <OnStopJoinTimerEvent+0x44>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f16:	4620      	mov	r0, r4
 8001f18:	f002 ff22 	bl	8004d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f22:	4620      	mov	r0, r4
 8001f24:	f002 ff1c 	bl	8004d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f002 ff16 	bl	8004d60 <HAL_GPIO_WritePin>
}
 8001f34:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8001f36:	2101      	movs	r1, #1
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <OnStopJoinTimerEvent+0x48>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	f005 fb84 	bl	8007648 <osThreadFlagsSet>
 8001f40:	e7e5      	b.n	8001f0e <OnStopJoinTimerEvent+0xa>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	200003f0 	.word	0x200003f0

08001f50 <OnRxTimerLedEvent>:
{
 8001f50:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f58:	4801      	ldr	r0, [pc, #4]	; (8001f60 <OnRxTimerLedEvent+0x10>)
 8001f5a:	f002 ff01 	bl	8004d60 <HAL_GPIO_WritePin>
}
 8001f5e:	bd08      	pop	{r3, pc}
 8001f60:	48000400 	.word	0x48000400

08001f64 <OnTxTimerLedEvent>:
{
 8001f64:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6c:	4801      	ldr	r0, [pc, #4]	; (8001f74 <OnTxTimerLedEvent+0x10>)
 8001f6e:	f002 fef7 	bl	8004d60 <HAL_GPIO_WritePin>
}
 8001f72:	bd08      	pop	{r3, pc}
 8001f74:	48000400 	.word	0x48000400

08001f78 <OnRxData>:
  if (params != NULL)
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d06e      	beq.n	800205a <OnRxData+0xe2>
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	4604      	mov	r4, r0
 8001f82:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8001f84:	2201      	movs	r2, #1
 8001f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f8a:	4834      	ldr	r0, [pc, #208]	; (800205c <OnRxData+0xe4>)
 8001f8c:	f002 fee8 	bl	8004d60 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8001f90:	4833      	ldr	r0, [pc, #204]	; (8002060 <OnRxData+0xe8>)
 8001f92:	f008 fab1 	bl	800a4f8 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8001f96:	782e      	ldrb	r6, [r5, #0]
 8001f98:	2e00      	cmp	r6, #0
 8001f9a:	d042      	beq.n	8002022 <OnRxData+0xaa>
      if (appData != NULL)
 8001f9c:	2c00      	cmp	r4, #0
 8001f9e:	d03f      	beq.n	8002020 <OnRxData+0xa8>
        RxPort = appData->Port;
 8001fa0:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8001fa2:	6863      	ldr	r3, [r4, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <OnRxData+0xaa>
          switch (appData->Port)
 8001fa8:	2e02      	cmp	r6, #2
 8001faa:	d016      	beq.n	8001fda <OnRxData+0x62>
 8001fac:	2e03      	cmp	r6, #3
 8001fae:	d138      	bne.n	8002022 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8001fb0:	7862      	ldrb	r2, [r4, #1]
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d135      	bne.n	8002022 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d006      	beq.n	8001fca <OnRxData+0x52>
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d008      	beq.n	8001fd2 <OnRxData+0x5a>
 8001fc0:	bb7b      	cbnz	r3, 8002022 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 fbf0 	bl	80027a8 <LmHandlerRequestClass>
                    break;
 8001fc8:	e02b      	b.n	8002022 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 fbec 	bl	80027a8 <LmHandlerRequestClass>
                    break;
 8001fd0:	e027      	b.n	8002022 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f000 fbe8 	bl	80027a8 <LmHandlerRequestClass>
                    break;
 8001fd8:	e023      	b.n	8002022 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8001fda:	7862      	ldrb	r2, [r4, #1]
 8001fdc:	2a01      	cmp	r2, #1
 8001fde:	d120      	bne.n	8002022 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <OnRxData+0xec>)
 8001fe8:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8001fea:	b963      	cbnz	r3, 8002006 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <OnRxData+0xf0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f008 f824 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffe:	4817      	ldr	r0, [pc, #92]	; (800205c <OnRxData+0xe4>)
 8002000:	f002 feae 	bl	8004d60 <HAL_GPIO_WritePin>
 8002004:	e00d      	b.n	8002022 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <OnRxData+0xf4>)
 8002008:	2200      	movs	r2, #0
 800200a:	4611      	mov	r1, r2
 800200c:	2003      	movs	r0, #3
 800200e:	f008 f817 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	4810      	ldr	r0, [pc, #64]	; (800205c <OnRxData+0xe4>)
 800201a:	f002 fea1 	bl	8004d60 <HAL_GPIO_WritePin>
 800201e:	e000      	b.n	8002022 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002020:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002022:	7c2b      	ldrb	r3, [r5, #16]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d901      	bls.n	800202c <OnRxData+0xb4>
}
 8002028:	b006      	add	sp, #24
 800202a:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800202c:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002030:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002034:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002038:	9005      	str	r0, [sp, #20]
 800203a:	9104      	str	r1, [sp, #16]
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <OnRxData+0xf8>)
 800203e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	9601      	str	r6, [sp, #4]
 8002048:	68eb      	ldr	r3, [r5, #12]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <OnRxData+0xfc>)
 800204e:	2200      	movs	r2, #0
 8002050:	4611      	mov	r1, r2
 8002052:	2003      	movs	r0, #3
 8002054:	f007 fff4 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 8002058:	e7e6      	b.n	8002028 <OnRxData+0xb0>
 800205a:	4770      	bx	lr
 800205c:	48000400 	.word	0x48000400
 8002060:	200003bc 	.word	0x200003bc
 8002064:	200003a2 	.word	0x200003a2
 8002068:	0800ae04 	.word	0x0800ae04
 800206c:	0800ae10 	.word	0x0800ae10
 8002070:	0800b0cc 	.word	0x0800b0cc
 8002074:	0800ae1c 	.word	0x0800ae1c

08002078 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800207e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <OnStoreContextRequest+0x20>)
 8002084:	f7ff f82e 	bl	80010e4 <FLASH_IF_Erase>
 8002088:	b100      	cbz	r0, 800208c <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800208a:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800208c:	462a      	mov	r2, r5
 800208e:	4621      	mov	r1, r4
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <OnStoreContextRequest+0x20>)
 8002092:	f7fe ffef 	bl	8001074 <FLASH_IF_Write>
}
 8002096:	e7f8      	b.n	800208a <OnStoreContextRequest+0x12>
 8002098:	0801f000 	.word	0x0801f000

0800209c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800209c:	b508      	push	{r3, lr}
 800209e:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 80020a0:	4901      	ldr	r1, [pc, #4]	; (80020a8 <OnRestoreContextRequest+0xc>)
 80020a2:	f7ff f803 	bl	80010ac <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 80020a6:	bd08      	pop	{r3, pc}
 80020a8:	0801f000 	.word	0x0801f000

080020ac <StopJoin>:
{
 80020ac:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80020ae:	4c1e      	ldr	r4, [pc, #120]	; (8002128 <StopJoin+0x7c>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b6:	4620      	mov	r0, r4
 80020b8:	f002 fe52 	bl	8004d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c2:	4620      	mov	r0, r4
 80020c4:	f002 fe4c 	bl	8004d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ce:	4620      	mov	r0, r4
 80020d0:	f002 fe46 	bl	8004d60 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80020d4:	4815      	ldr	r0, [pc, #84]	; (800212c <StopJoin+0x80>)
 80020d6:	f008 f9b5 	bl	800a444 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80020da:	f000 fb06 	bl	80026ea <LmHandlerStop>
 80020de:	b148      	cbz	r0, 80020f4 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <StopJoin+0x84>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	4611      	mov	r1, r2
 80020e6:	2002      	movs	r0, #2
 80020e8:	f007 ffaa 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80020ec:	4811      	ldr	r0, [pc, #68]	; (8002134 <StopJoin+0x88>)
 80020ee:	f008 fa03 	bl	800a4f8 <UTIL_TIMER_Start>
}
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <StopJoin+0x8c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	4611      	mov	r1, r2
 80020fa:	2002      	movs	r0, #2
 80020fc:	f007 ffa0 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002100:	4c0e      	ldr	r4, [pc, #56]	; (800213c <StopJoin+0x90>)
 8002102:	2501      	movs	r5, #1
 8002104:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <StopJoin+0x94>)
 8002108:	2200      	movs	r2, #0
 800210a:	4611      	mov	r1, r2
 800210c:	2002      	movs	r0, #2
 800210e:	f007 ff97 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <StopJoin+0x98>)
 8002114:	f000 fab2 	bl	800267c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002118:	4629      	mov	r1, r5
 800211a:	7820      	ldrb	r0, [r4, #0]
 800211c:	f000 fad6 	bl	80026cc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <StopJoin+0x80>)
 8002122:	f008 f9e9 	bl	800a4f8 <UTIL_TIMER_Start>
 8002126:	e7e1      	b.n	80020ec <StopJoin+0x40>
 8002128:	48000400 	.word	0x48000400
 800212c:	20000410 	.word	0x20000410
 8002130:	0800ae64 	.word	0x0800ae64
 8002134:	200003d4 	.word	0x200003d4
 8002138:	0800ae84 	.word	0x0800ae84
 800213c:	20000000 	.word	0x20000000
 8002140:	0800ae98 	.word	0x0800ae98
 8002144:	20000058 	.word	0x20000058

08002148 <Thd_LoraStopJoin>:
{
 8002148:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
 800214e:	2100      	movs	r1, #0
 8002150:	2001      	movs	r0, #1
 8002152:	f005 fac1 	bl	80076d8 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 8002156:	f7ff ffa9 	bl	80020ac <StopJoin>
  for (;;)
 800215a:	e7f6      	b.n	800214a <Thd_LoraStopJoin+0x2>

0800215c <StoreContext>:
{
 800215c:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800215e:	f000 fb55 	bl	800280c <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002162:	f110 0f08 	cmn.w	r0, #8
 8002166:	d003      	beq.n	8002170 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002168:	f1b0 3fff 	cmp.w	r0, #4294967295
 800216c:	d007      	beq.n	800217e <StoreContext+0x22>
}
 800216e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <StoreContext+0x30>)
 8002172:	2200      	movs	r2, #0
 8002174:	4611      	mov	r1, r2
 8002176:	2002      	movs	r0, #2
 8002178:	f007 ff62 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 800217c:	e7f7      	b.n	800216e <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <StoreContext+0x34>)
 8002180:	2200      	movs	r2, #0
 8002182:	4611      	mov	r1, r2
 8002184:	2002      	movs	r0, #2
 8002186:	f007 ff5b 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
}
 800218a:	e7f0      	b.n	800216e <StoreContext+0x12>
 800218c:	0800aeb8 	.word	0x0800aeb8
 8002190:	0800aed0 	.word	0x0800aed0

08002194 <Thd_LoraStoreContext>:
{
 8002194:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002196:	f04f 32ff 	mov.w	r2, #4294967295
 800219a:	2100      	movs	r1, #0
 800219c:	2001      	movs	r0, #1
 800219e:	f005 fa9b 	bl	80076d8 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 80021a2:	f7ff ffdb 	bl	800215c <StoreContext>
  for (;;)
 80021a6:	e7f6      	b.n	8002196 <Thd_LoraStoreContext+0x2>

080021a8 <SendTxData>:
{
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 80021ac:	f7ff fa5e 	bl	800166c <GetBatteryLevel>
 80021b0:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 80021b2:	f000 fab4 	bl	800271e <LmHandlerIsBusy>
 80021b6:	b188      	cbz	r0, 80021dc <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80021b8:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 80021ba:	4c5a      	ldr	r4, [pc, #360]	; (8002324 <SendTxData+0x17c>)
 80021bc:	4620      	mov	r0, r4
 80021be:	f008 f941 	bl	800a444 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80021c2:	4b59      	ldr	r3, [pc, #356]	; (8002328 <SendTxData+0x180>)
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	42a9      	cmp	r1, r5
 80021c8:	bf38      	it	cc
 80021ca:	4629      	movcc	r1, r5
 80021cc:	4620      	mov	r0, r4
 80021ce:	f008 f9d9 	bl	800a584 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f008 f990 	bl	800a4f8 <UTIL_TIMER_Start>
}
 80021d8:	b009      	add	sp, #36	; 0x24
 80021da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 80021dc:	a802      	add	r0, sp, #8
 80021de:	f7ff fa91 	bl	8001704 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 80021e2:	9400      	str	r4, [sp, #0]
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <SendTxData+0x184>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	2100      	movs	r1, #0
 80021ea:	2002      	movs	r0, #2
 80021ec:	f007 ff28 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80021f0:	9803      	ldr	r0, [sp, #12]
 80021f2:	f7fe fa2b 	bl	800064c <__aeabi_f2iz>
 80021f6:	b200      	sxth	r0, r0
 80021f8:	9000      	str	r0, [sp, #0]
 80021fa:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <SendTxData+0x188>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	2100      	movs	r1, #0
 8002200:	2002      	movs	r0, #2
 8002202:	f007 ff1d 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8002206:	4c4b      	ldr	r4, [pc, #300]	; (8002334 <SendTxData+0x18c>)
 8002208:	2302      	movs	r3, #2
 800220a:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800220c:	494a      	ldr	r1, [pc, #296]	; (8002338 <SendTxData+0x190>)
 800220e:	9804      	ldr	r0, [sp, #16]
 8002210:	f7fe f8cc 	bl	80003ac <__aeabi_fmul>
 8002214:	f7fe fa40 	bl	8000698 <__aeabi_f2uiz>
 8002218:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 800221a:	9803      	ldr	r0, [sp, #12]
 800221c:	f7fe fa16 	bl	800064c <__aeabi_f2iz>
 8002220:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002222:	4946      	ldr	r1, [pc, #280]	; (800233c <SendTxData+0x194>)
 8002224:	9802      	ldr	r0, [sp, #8]
 8002226:	f7fe f8c1 	bl	80003ac <__aeabi_fmul>
 800222a:	4943      	ldr	r1, [pc, #268]	; (8002338 <SendTxData+0x190>)
 800222c:	f7fe f972 	bl	8000514 <__aeabi_fdiv>
 8002230:	f7fe fa32 	bl	8000698 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	4a42      	ldr	r2, [pc, #264]	; (8002340 <SendTxData+0x198>)
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800223c:	6863      	ldr	r3, [r4, #4]
 800223e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002242:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	0a2a      	lsrs	r2, r5, #8
 8002250:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002252:	6863      	ldr	r3, [r4, #4]
 8002254:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <SendTxData+0x19c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b08      	cmp	r3, #8
 800225c:	d002      	beq.n	8002264 <SendTxData+0xbc>
 800225e:	2b01      	cmp	r3, #1
 8002260:	d000      	beq.n	8002264 <SendTxData+0xbc>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002262:	b9d3      	cbnz	r3, 800229a <SendTxData+0xf2>
      AppData.Buffer[i++] = 0;
 8002264:	4a33      	ldr	r2, [pc, #204]	; (8002334 <SendTxData+0x18c>)
 8002266:	6851      	ldr	r1, [r2, #4]
 8002268:	2300      	movs	r3, #0
 800226a:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 800226c:	6851      	ldr	r1, [r2, #4]
 800226e:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 8002270:	6852      	ldr	r2, [r2, #4]
 8002272:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 8002274:	7253      	strb	r3, [r2, #9]
 8002276:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <SendTxData+0x18c>)
 800227a:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <SendTxData+0x1a0>)
 800227e:	7a5b      	ldrb	r3, [r3, #9]
 8002280:	bb3b      	cbnz	r3, 80022d2 <SendTxData+0x12a>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002282:	2200      	movs	r2, #0
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <SendTxData+0x19c>)
 8002286:	78d9      	ldrb	r1, [r3, #3]
 8002288:	482a      	ldr	r0, [pc, #168]	; (8002334 <SendTxData+0x18c>)
 800228a:	f000 fa57 	bl	800273c <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 800228e:	b370      	cbz	r0, 80022ee <SendTxData+0x146>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002290:	f110 0f06 	cmn.w	r0, #6
 8002294:	d033      	beq.n	80022fe <SendTxData+0x156>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002296:	2500      	movs	r5, #0
 8002298:	e78f      	b.n	80021ba <SendTxData+0x12>
      latitude = sensor_data.latitude;
 800229a:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 800229c:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800229e:	4e25      	ldr	r6, [pc, #148]	; (8002334 <SendTxData+0x18c>)
 80022a0:	6877      	ldr	r7, [r6, #4]
 80022a2:	f7ff f9e3 	bl	800166c <GetBatteryLevel>
 80022a6:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 80022a8:	6873      	ldr	r3, [r6, #4]
 80022aa:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80022ae:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80022b0:	6873      	ldr	r3, [r6, #4]
 80022b2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80022b6:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80022b8:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80022ba:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80022be:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 80022c0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80022c4:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 80022c6:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 80022c8:	2200      	movs	r2, #0
 80022ca:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 80022cc:	739a      	strb	r2, [r3, #14]
 80022ce:	220f      	movs	r2, #15
 80022d0:	e7d2      	b.n	8002278 <SendTxData+0xd0>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80022d2:	f000 f9ef 	bl	80026b4 <LmHandlerJoinStatus>
 80022d6:	2801      	cmp	r0, #1
 80022d8:	d1d3      	bne.n	8002282 <SendTxData+0xda>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <SendTxData+0x1a0>)
 80022dc:	f008 f8b2 	bl	800a444 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <SendTxData+0x1a4>)
 80022e8:	f002 fd3a 	bl	8004d60 <HAL_GPIO_WritePin>
 80022ec:	e7c9      	b.n	8002282 <SendTxData+0xda>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <SendTxData+0x1a8>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	2100      	movs	r1, #0
 80022f4:	4610      	mov	r0, r2
 80022f6:	f007 fea3 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80022fa:	2500      	movs	r5, #0
 80022fc:	e75d      	b.n	80021ba <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80022fe:	f000 fa47 	bl	8002790 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002302:	4605      	mov	r5, r0
 8002304:	2800      	cmp	r0, #0
 8002306:	f43f af58 	beq.w	80021ba <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <SendTxData+0x1ac>)
 800230c:	fba3 2300 	umull	r2, r3, r3, r0
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <SendTxData+0x1b0>)
 8002316:	2201      	movs	r2, #1
 8002318:	2100      	movs	r1, #0
 800231a:	4610      	mov	r0, r2
 800231c:	f007 fe90 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8002320:	e74b      	b.n	80021ba <SendTxData+0x12>
 8002322:	bf00      	nop
 8002324:	20000410 	.word	0x20000410
 8002328:	20000070 	.word	0x20000070
 800232c:	0800aee8 	.word	0x0800aee8
 8002330:	0800aef4 	.word	0x0800aef4
 8002334:	20000004 	.word	0x20000004
 8002338:	41200000 	.word	0x41200000
 800233c:	42c80000 	.word	0x42c80000
 8002340:	200003a2 	.word	0x200003a2
 8002344:	20000058 	.word	0x20000058
 8002348:	200003a4 	.word	0x200003a4
 800234c:	48000400 	.word	0x48000400
 8002350:	0800af00 	.word	0x0800af00
 8002354:	10624dd3 	.word	0x10624dd3
 8002358:	0800af10 	.word	0x0800af10

0800235c <Thd_LoraSendProcess>:
{
 800235c:	b510      	push	{r4, lr}
 800235e:	b088      	sub	sp, #32
	uint8_t batteryLevel = GetBatteryLevel();
 8002360:	f7ff f984 	bl	800166c <GetBatteryLevel>
 8002364:	4604      	mov	r4, r0
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	2100      	movs	r1, #0
 800236c:	2001      	movs	r0, #1
 800236e:	f005 f9b3 	bl	80076d8 <osThreadFlagsWait>
    EnvSensors_Read(&sensor_data);
 8002372:	a802      	add	r0, sp, #8
 8002374:	f7ff f9c6 	bl	8001704 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002378:	9400      	str	r4, [sp, #0]
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <Thd_LoraSendProcess+0x48>)
 800237c:	2201      	movs	r2, #1
 800237e:	2100      	movs	r1, #0
 8002380:	2002      	movs	r0, #2
 8002382:	f007 fe5d 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002386:	9803      	ldr	r0, [sp, #12]
 8002388:	f7fe f960 	bl	800064c <__aeabi_f2iz>
 800238c:	b200      	sxth	r0, r0
 800238e:	9000      	str	r0, [sp, #0]
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <Thd_LoraSendProcess+0x4c>)
 8002392:	2201      	movs	r2, #1
 8002394:	2100      	movs	r1, #0
 8002396:	2002      	movs	r0, #2
 8002398:	f007 fe52 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
    SendTxData();  /*what you want to do*/
 800239c:	f7ff ff04 	bl	80021a8 <SendTxData>
  for (;;)
 80023a0:	e7de      	b.n	8002360 <Thd_LoraSendProcess+0x4>
 80023a2:	bf00      	nop
 80023a4:	0800aee8 	.word	0x0800aee8
 80023a8:	0800aef4 	.word	0x0800aef4

080023ac <OnJoinTimerLedEvent>:
{
 80023ac:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80023ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023b2:	4802      	ldr	r0, [pc, #8]	; (80023bc <OnJoinTimerLedEvent+0x10>)
 80023b4:	f002 fcd9 	bl	8004d6a <HAL_GPIO_TogglePin>
}
 80023b8:	bd08      	pop	{r3, pc}
 80023ba:	bf00      	nop
 80023bc:	48000400 	.word	0x48000400

080023c0 <LoRaWAN_Init>:
{
 80023c0:	b530      	push	{r4, r5, lr}
 80023c2:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80023c4:	2400      	movs	r4, #0
 80023c6:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "M4_APP_VERSION:      V%X.%X.%X\r\n",
 80023c8:	9402      	str	r4, [sp, #8]
 80023ca:	2303      	movs	r3, #3
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2501      	movs	r5, #1
 80023d0:	9500      	str	r5, [sp, #0]
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <LoRaWAN_Init+0x1b0>)
 80023d4:	4622      	mov	r2, r4
 80023d6:	4621      	mov	r1, r4
 80023d8:	2002      	movs	r0, #2
 80023da:	f007 fe31 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_SYSTEM_ID);
 80023de:	4620      	mov	r0, r4
 80023e0:	f000 fe4e 	bl	8003080 <MBMUXIF_SystemGetFeatCapabInfoPtr>
  feature_version = p_cm0plus_specific_features_info->Feat_Info_Feature_Version;
 80023e4:	6843      	ldr	r3, [r0, #4]
 80023e6:	9305      	str	r3, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "M0PLUS_APP_VERSION:  V%X.%X.%X\r\n",
 80023e8:	0e1a      	lsrs	r2, r3, #24
 80023ea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80023ee:	9102      	str	r1, [sp, #8]
 80023f0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <LoRaWAN_Init+0x1b4>)
 80023fa:	4622      	mov	r2, r4
 80023fc:	4621      	mov	r1, r4
 80023fe:	2002      	movs	r0, #2
 8002400:	f007 fe1e 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_LORAWAN_ID);
 8002404:	2008      	movs	r0, #8
 8002406:	f000 fe3b 	bl	8003080 <MBMUXIF_SystemGetFeatCapabInfoPtr>
  feature_version = p_cm0plus_specific_features_info->Feat_Info_Feature_Version;
 800240a:	6843      	ldr	r3, [r0, #4]
 800240c:	9305      	str	r3, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800240e:	0e1a      	lsrs	r2, r3, #24
 8002410:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002414:	9102      	str	r1, [sp, #8]
 8002416:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <LoRaWAN_Init+0x1b8>)
 8002420:	4622      	mov	r2, r4
 8002422:	4621      	mov	r1, r4
 8002424:	2002      	movs	r0, #2
 8002426:	f007 fe0b 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  p_cm0plus_specific_features_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_RADIO_ID);
 800242a:	2007      	movs	r0, #7
 800242c:	f000 fe28 	bl	8003080 <MBMUXIF_SystemGetFeatCapabInfoPtr>
  feature_version = p_cm0plus_specific_features_info->Feat_Info_Feature_Version;
 8002430:	6843      	ldr	r3, [r0, #4]
 8002432:	9305      	str	r3, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002434:	0e1a      	lsrs	r2, r3, #24
 8002436:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800243a:	9102      	str	r1, [sp, #8]
 800243c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <LoRaWAN_Init+0x1bc>)
 8002446:	4622      	mov	r2, r4
 8002448:	4621      	mov	r1, r4
 800244a:	2002      	movs	r0, #2
 800244c:	f007 fdf8 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002450:	a905      	add	r1, sp, #20
 8002452:	4620      	mov	r0, r4
 8002454:	f000 f9b8 	bl	80027c8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002458:	9b05      	ldr	r3, [sp, #20]
 800245a:	0e1a      	lsrs	r2, r3, #24
 800245c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002460:	9102      	str	r1, [sp, #8]
 8002462:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	9200      	str	r2, [sp, #0]
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <LoRaWAN_Init+0x1c0>)
 800246c:	4622      	mov	r2, r4
 800246e:	4621      	mov	r1, r4
 8002470:	2002      	movs	r0, #2
 8002472:	f007 fde5 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002476:	a905      	add	r1, sp, #20
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f9a5 	bl	80027c8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800247e:	9b05      	ldr	r3, [sp, #20]
 8002480:	0e1a      	lsrs	r2, r3, #24
 8002482:	b2d9      	uxtb	r1, r3
 8002484:	9103      	str	r1, [sp, #12]
 8002486:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800248a:	9102      	str	r1, [sp, #8]
 800248c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <LoRaWAN_Init+0x1c4>)
 8002496:	4622      	mov	r2, r4
 8002498:	4621      	mov	r1, r4
 800249a:	2002      	movs	r0, #2
 800249c:	f007 fdd0 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80024a0:	9400      	str	r4, [sp, #0]
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <LoRaWAN_Init+0x1c8>)
 80024a4:	4622      	mov	r2, r4
 80024a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024aa:	4838      	ldr	r0, [pc, #224]	; (800258c <LoRaWAN_Init+0x1cc>)
 80024ac:	f007 ff6c 	bl	800a388 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80024b0:	9400      	str	r4, [sp, #0]
 80024b2:	4b37      	ldr	r3, [pc, #220]	; (8002590 <LoRaWAN_Init+0x1d0>)
 80024b4:	4622      	mov	r2, r4
 80024b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024ba:	4836      	ldr	r0, [pc, #216]	; (8002594 <LoRaWAN_Init+0x1d4>)
 80024bc:	f007 ff64 	bl	800a388 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80024c0:	9400      	str	r4, [sp, #0]
 80024c2:	4b35      	ldr	r3, [pc, #212]	; (8002598 <LoRaWAN_Init+0x1d8>)
 80024c4:	462a      	mov	r2, r5
 80024c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024ca:	4834      	ldr	r0, [pc, #208]	; (800259c <LoRaWAN_Init+0x1dc>)
 80024cc:	f007 ff5c 	bl	800a388 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7fe fdc9 	bl	8001068 <FLASH_IF_Init>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d13e      	bne.n	8002558 <LoRaWAN_Init+0x198>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80024da:	2400      	movs	r4, #0
 80024dc:	9400      	str	r4, [sp, #0]
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <LoRaWAN_Init+0x1e0>)
 80024e0:	4622      	mov	r2, r4
 80024e2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024e6:	482f      	ldr	r0, [pc, #188]	; (80025a4 <LoRaWAN_Init+0x1e4>)
 80024e8:	f007 ff4e 	bl	800a388 <UTIL_TIMER_Create>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <LoRaWAN_Init+0x1e8>)
 80024ee:	4621      	mov	r1, r4
 80024f0:	482e      	ldr	r0, [pc, #184]	; (80025ac <LoRaWAN_Init+0x1ec>)
 80024f2:	f005 f83d 	bl	8007570 <osThreadNew>
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <LoRaWAN_Init+0x1f0>)
 80024f8:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d02f      	beq.n	800255e <LoRaWAN_Init+0x19e>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <LoRaWAN_Init+0x1f4>)
 8002500:	2100      	movs	r1, #0
 8002502:	482d      	ldr	r0, [pc, #180]	; (80025b8 <LoRaWAN_Init+0x1f8>)
 8002504:	f005 f834 	bl	8007570 <osThreadNew>
 8002508:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <LoRaWAN_Init+0x1fc>)
 800250a:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 800250c:	b350      	cbz	r0, 8002564 <LoRaWAN_Init+0x1a4>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <LoRaWAN_Init+0x200>)
 8002510:	2100      	movs	r1, #0
 8002512:	482c      	ldr	r0, [pc, #176]	; (80025c4 <LoRaWAN_Init+0x204>)
 8002514:	f005 f82c 	bl	8007570 <osThreadNew>
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <LoRaWAN_Init+0x208>)
 800251a:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 800251c:	b328      	cbz	r0, 800256a <LoRaWAN_Init+0x1aa>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800251e:	492b      	ldr	r1, [pc, #172]	; (80025cc <LoRaWAN_Init+0x20c>)
 8002520:	482b      	ldr	r0, [pc, #172]	; (80025d0 <LoRaWAN_Init+0x210>)
 8002522:	f000 f877 	bl	8002614 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002526:	482b      	ldr	r0, [pc, #172]	; (80025d4 <LoRaWAN_Init+0x214>)
 8002528:	f000 f8a8 	bl	800267c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 800252c:	481b      	ldr	r0, [pc, #108]	; (800259c <LoRaWAN_Init+0x1dc>)
 800252e:	f007 ffe3 	bl	800a4f8 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002532:	2100      	movs	r1, #0
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <LoRaWAN_Init+0x218>)
 8002536:	7818      	ldrb	r0, [r3, #0]
 8002538:	f000 f8c8 	bl	80026cc <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800253c:	4c27      	ldr	r4, [pc, #156]	; (80025dc <LoRaWAN_Init+0x21c>)
 800253e:	2200      	movs	r2, #0
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <LoRaWAN_Init+0x220>)
 8002544:	4927      	ldr	r1, [pc, #156]	; (80025e4 <LoRaWAN_Init+0x224>)
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	4620      	mov	r0, r4
 800254a:	f007 ff1d 	bl	800a388 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800254e:	4620      	mov	r0, r4
 8002550:	f007 ffd2 	bl	800a4f8 <UTIL_TIMER_Start>
}
 8002554:	b007      	add	sp, #28
 8002556:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002558:	f7fe fef0 	bl	800133c <Error_Handler>
 800255c:	e7bd      	b.n	80024da <LoRaWAN_Init+0x11a>
    Error_Handler();
 800255e:	f7fe feed 	bl	800133c <Error_Handler>
 8002562:	e7cc      	b.n	80024fe <LoRaWAN_Init+0x13e>
    Error_Handler();
 8002564:	f7fe feea 	bl	800133c <Error_Handler>
 8002568:	e7d1      	b.n	800250e <LoRaWAN_Init+0x14e>
    Error_Handler();
 800256a:	f7fe fee7 	bl	800133c <Error_Handler>
 800256e:	e7d6      	b.n	800251e <LoRaWAN_Init+0x15e>
 8002570:	0800af30 	.word	0x0800af30
 8002574:	0800af54 	.word	0x0800af54
 8002578:	0800af78 	.word	0x0800af78
 800257c:	0800af9c 	.word	0x0800af9c
 8002580:	0800afc0 	.word	0x0800afc0
 8002584:	0800afe4 	.word	0x0800afe4
 8002588:	08001f65 	.word	0x08001f65
 800258c:	200003f8 	.word	0x200003f8
 8002590:	08001f51 	.word	0x08001f51
 8002594:	200003bc 	.word	0x200003bc
 8002598:	080023ad 	.word	0x080023ad
 800259c:	200003a4 	.word	0x200003a4
 80025a0:	08001f05 	.word	0x08001f05
 80025a4:	200003d4 	.word	0x200003d4
 80025a8:	0800b060 	.word	0x0800b060
 80025ac:	0800235d 	.word	0x0800235d
 80025b0:	200003ec 	.word	0x200003ec
 80025b4:	0800b0a8 	.word	0x0800b0a8
 80025b8:	08002195 	.word	0x08002195
 80025bc:	200003f4 	.word	0x200003f4
 80025c0:	0800b084 	.word	0x0800b084
 80025c4:	08002149 	.word	0x08002149
 80025c8:	200003f0 	.word	0x200003f0
 80025cc:	01030000 	.word	0x01030000
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000058 	.word	0x20000058
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000410 	.word	0x20000410
 80025e0:	08001d3d 	.word	0x08001d3d
 80025e4:	20000070 	.word	0x20000070

080025e8 <HAL_GPIO_EXTI_Callback>:
{
 80025e8:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 80025ea:	2802      	cmp	r0, #2
 80025ec:	d002      	beq.n	80025f4 <HAL_GPIO_EXTI_Callback+0xc>
 80025ee:	2840      	cmp	r0, #64	; 0x40
 80025f0:	d006      	beq.n	8002600 <HAL_GPIO_EXTI_Callback+0x18>
}
 80025f2:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 80025f4:	2101      	movs	r1, #1
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_GPIO_EXTI_Callback+0x24>)
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	f005 f825 	bl	8007648 <osThreadFlagsSet>
      break;
 80025fe:	e7f8      	b.n	80025f2 <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002600:	2101      	movs	r1, #1
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_GPIO_EXTI_Callback+0x28>)
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	f005 f81f 	bl	8007648 <osThreadFlagsSet>
}
 800260a:	e7f2      	b.n	80025f2 <HAL_GPIO_EXTI_Callback+0xa>
 800260c:	200003f0 	.word	0x200003f0
 8002610:	200003f4 	.word	0x200003f4

08002614 <LmHandlerInit>:

  /* USER CODE END LmHandlerInit_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  if (handlerCallbacks == NULL)
 8002614:	2800      	cmp	r0, #0
 8002616:	d02c      	beq.n	8002672 <LmHandlerInit+0x5e>
{
 8002618:	b510      	push	{r4, lr}
  {
    return LORAMAC_HANDLER_ERROR;
  }

  callback_mbwrapper.GetBatteryLevel = handlerCallbacks->GetBatteryLevel;
 800261a:	6801      	ldr	r1, [r0, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <LmHandlerInit+0x64>)
 800261e:	6011      	str	r1, [r2, #0]
  callback_mbwrapper.GetTemperature = handlerCallbacks->GetTemperature;
 8002620:	6841      	ldr	r1, [r0, #4]
 8002622:	6051      	str	r1, [r2, #4]
  callback_mbwrapper.OnRestoreContextRequest = handlerCallbacks->OnRestoreContextRequest;
 8002624:	6901      	ldr	r1, [r0, #16]
 8002626:	6111      	str	r1, [r2, #16]
  callback_mbwrapper.OnStoreContextRequest = handlerCallbacks->OnStoreContextRequest;
 8002628:	6941      	ldr	r1, [r0, #20]
 800262a:	6151      	str	r1, [r2, #20]
  callback_mbwrapper.OnNvmDataChange = handlerCallbacks->OnNvmDataChange;
 800262c:	69c1      	ldr	r1, [r0, #28]
 800262e:	61d1      	str	r1, [r2, #28]
  callback_mbwrapper.OnNetworkParametersChange = handlerCallbacks->OnNetworkParametersChange;
 8002630:	6a01      	ldr	r1, [r0, #32]
 8002632:	6211      	str	r1, [r2, #32]
  callback_mbwrapper.OnJoinRequest = handlerCallbacks->OnJoinRequest;
 8002634:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002636:	6251      	str	r1, [r2, #36]	; 0x24
  callback_mbwrapper.OnTxData = handlerCallbacks->OnTxData;
 8002638:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800263a:	6291      	str	r1, [r2, #40]	; 0x28
  callback_mbwrapper.OnRxData = handlerCallbacks->OnRxData;
 800263c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800263e:	62d1      	str	r1, [r2, #44]	; 0x2c
  callback_mbwrapper.OnClassChange = handlerCallbacks->OnClassChange;
 8002640:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002642:	6311      	str	r1, [r2, #48]	; 0x30
  callback_mbwrapper.OnBeaconStatusChange = handlerCallbacks->OnBeaconStatusChange;
 8002644:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002646:	6351      	str	r1, [r2, #52]	; 0x34
  callback_mbwrapper.OnSysTimeUpdate = handlerCallbacks->OnSysTimeUpdate;
 8002648:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800264a:	6391      	str	r1, [r2, #56]	; 0x38
  callback_mbwrapper.OnTxPeriodicityChanged = handlerCallbacks->OnTxPeriodicityChanged;
 800264c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800264e:	63d1      	str	r1, [r2, #60]	; 0x3c
  callback_mbwrapper.OnTxFrameCtrlChanged = handlerCallbacks->OnTxFrameCtrlChanged;
 8002650:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002652:	6411      	str	r1, [r2, #64]	; 0x40
  callback_mbwrapper.OnPingSlotPeriodicityChanged = handlerCallbacks->OnPingSlotPeriodicityChanged;
 8002654:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002656:	6451      	str	r1, [r2, #68]	; 0x44
  callback_mbwrapper.OnSystemReset = handlerCallbacks->OnSystemReset;
 8002658:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800265a:	6493      	str	r3, [r2, #72]	; 0x48

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 800265c:	f000 fb96 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002660:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_INIT_ID;
 8002662:	2300      	movs	r3, #0
 8002664:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 8002666:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 8002668:	f000 fb9c 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 800266c:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerInit_2 */

  /* USER CODE END LmHandlerInit_2 */
}
 8002670:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 8002672:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002676:	4770      	bx	lr
 8002678:	20000428 	.word	0x20000428

0800267c <LmHandlerConfigure>:
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer;
  uint16_t i = 0;
  uint32_t ret;

  if (handlerParams == NULL)
 800267c:	b1a0      	cbz	r0, 80026a8 <LmHandlerConfigure+0x2c>
{
 800267e:	b538      	push	{r3, r4, r5, lr}
 8002680:	4601      	mov	r1, r0
  {
    return LORAMAC_HANDLER_ERROR;
  }

  /* copy data from Cm4 stack memory to shared memory */
  UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, handlerParams, sizeof(LmHandlerParams_t));
 8002682:	4d0b      	ldr	r5, [pc, #44]	; (80026b0 <LmHandlerConfigure+0x34>)
 8002684:	2218      	movs	r2, #24
 8002686:	4628      	mov	r0, r5
 8002688:	f007 fe1c 	bl	800a2c4 <UTIL_MEM_cpy_8>

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 800268c:	f000 fb7e 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002690:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_CONFIGURE_ID;
 8002692:	2302      	movs	r3, #2
 8002694:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 8002696:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 8002698:	601d      	str	r5, [r3, #0]
  com_obj->ParamCnt = i;
 800269a:	2301      	movs	r3, #1
 800269c:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 800269e:	f000 fb81 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 80026a2:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerConfigure_2 */

  /* USER CODE END LmHandlerConfigure_2 */
}
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
    return LORAMAC_HANDLER_ERROR;
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20008140 	.word	0x20008140

080026b4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 80026b4:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerJoinStatus_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80026b6:	f000 fb69 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 80026ba:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_JOIN_STATUS_ID;
 80026bc:	2303      	movs	r3, #3
 80026be:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80026c4:	f000 fb6e 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerFlagStatus_t) ret;
  /* USER CODE BEGIN LmHandlerJoinStatus_2 */

  /* USER CODE END LmHandlerJoinStatus_2 */
}
 80026c8:	7d20      	ldrb	r0, [r4, #20]
 80026ca:	bd10      	pop	{r4, pc}

080026cc <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode, bool forceRejoin)
{
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4605      	mov	r5, r0
 80026d0:	460c      	mov	r4, r1
  /* USER CODE END LmHandlerJoin_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer;
  uint16_t i = 0;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80026d2:	f000 fb5b 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
  com_obj->MsgId = LMHANDLER_JOIN_ID;
 80026d6:	2304      	movs	r3, #4
 80026d8:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80026da:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) mode;
 80026dc:	601d      	str	r5, [r3, #0]
  com_buffer[i++] = (uint32_t) forceRejoin;
 80026de:	605c      	str	r4, [r3, #4]
  com_obj->ParamCnt = i;
 80026e0:	2302      	movs	r3, #2
 80026e2:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80026e4:	f000 fb5e 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* once event is received and semaphore released: */
  return;
  /* USER CODE BEGIN LmHandlerJoin_2 */

  /* USER CODE END LmHandlerJoin_2 */
}
 80026e8:	bd38      	pop	{r3, r4, r5, pc}

080026ea <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80026ea:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerStop_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80026ec:	f000 fb4e 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 80026f0:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_STOP_ID;
 80026f2:	2305      	movs	r3, #5
 80026f4:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80026fa:	f000 fb53 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
  /* USER CODE BEGIN LmHandlerStop_2 */

  /* USER CODE END LmHandlerStop_2 */
}
 80026fe:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8002702:	bd10      	pop	{r4, pc}

08002704 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8002704:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerHalt_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 8002706:	f000 fb41 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 800270a:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_HALT_ID;
 800270c:	2306      	movs	r3, #6
 800270e:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 8002714:	f000 fb46 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
  /* USER CODE BEGIN LmHandlerHalt_2 */

  /* USER CODE END LmHandlerHalt_2 */
}
 8002718:	f994 0014 	ldrsb.w	r0, [r4, #20]
 800271c:	bd10      	pop	{r4, pc}

0800271e <LmHandlerIsBusy>:

bool LmHandlerIsBusy(void)
{
 800271e:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerIsBusy_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 8002720:	f000 fb34 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002724:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_IS_BUSY_ID;
 8002726:	2307      	movs	r3, #7
 8002728:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 800272e:	f000 fb39 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */

  ret = com_obj->ReturnVal;
 8002732:	6960      	ldr	r0, [r4, #20]
  return (bool) ret;
  /* USER CODE BEGIN LmHandlerIsBusy_2 */

  /* USER CODE END LmHandlerIsBusy_2 */
}
 8002734:	3800      	subs	r0, #0
 8002736:	bf18      	it	ne
 8002738:	2001      	movne	r0, #1
 800273a:	bd10      	pop	{r4, pc}

0800273c <LmHandlerSend>:
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer;
  uint16_t i = 0;
  uint32_t ret;

  if ((appData == NULL) || (appData->Buffer == NULL))
 800273c:	b300      	cbz	r0, 8002780 <LmHandlerSend+0x44>
{
 800273e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002740:	460e      	mov	r6, r1
 8002742:	4617      	mov	r7, r2
 8002744:	4605      	mov	r5, r0
  if ((appData == NULL) || (appData->Buffer == NULL))
 8002746:	6841      	ldr	r1, [r0, #4]
 8002748:	b1e9      	cbz	r1, 8002786 <LmHandlerSend+0x4a>
  {
    return LORAMAC_HANDLER_ERROR;
  }

  /* copy data from Cm4 stack memory to shared memory */
  if (appData->BufferSize > 0)
 800274a:	7842      	ldrb	r2, [r0, #1]
 800274c:	b9a2      	cbnz	r2, 8002778 <LmHandlerSend+0x3c>
  {
    UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, appData->Buffer, appData->BufferSize);
    /* need to 8-align the next address */
  }

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 800274e:	f000 fb1d 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002752:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_SEND_ID;
 8002754:	2308      	movs	r3, #8
 8002756:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 8002758:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) appData->Port;
 800275a:	782a      	ldrb	r2, [r5, #0]
 800275c:	601a      	str	r2, [r3, #0]
  com_buffer[i++] = (uint32_t) appData->BufferSize;
 800275e:	786a      	ldrb	r2, [r5, #1]
 8002760:	605a      	str	r2, [r3, #4]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <LmHandlerSend+0x50>)
 8002764:	609a      	str	r2, [r3, #8]
  com_buffer[i++] = (uint32_t) isTxConfirmed;
 8002766:	60de      	str	r6, [r3, #12]
  com_buffer[i++] = (uint32_t) allowDelayedTx;
 8002768:	611f      	str	r7, [r3, #16]
  com_obj->ParamCnt = i;
 800276a:	2305      	movs	r3, #5
 800276c:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 800276e:	f000 fb19 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */

  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 8002772:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerSend_2 */

  /* USER CODE END LmHandlerSend_2 */
}
 8002776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, appData->Buffer, appData->BufferSize);
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <LmHandlerSend+0x50>)
 800277a:	f007 fda3 	bl	800a2c4 <UTIL_MEM_cpy_8>
 800277e:	e7e6      	b.n	800274e <LmHandlerSend+0x12>
    return LORAMAC_HANDLER_ERROR;
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002784:	4770      	bx	lr
    return LORAMAC_HANDLER_ERROR;
 8002786:	f04f 30ff 	mov.w	r0, #4294967295
 800278a:	e7f4      	b.n	8002776 <LmHandlerSend+0x3a>
 800278c:	20008140 	.word	0x20008140

08002790 <LmHandlerGetDutyCycleWaitTime>:

  /* USER CODE END LmHandlerProcess_2 */
}

TimerTime_t LmHandlerGetDutyCycleWaitTime(void)
{
 8002790:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerGetDutyCycleWaitTime_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 8002792:	f000 fafb 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002796:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_GET_DUTY_CYCLE_TIME_ID;
 8002798:	230a      	movs	r3, #10
 800279a:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80027a0:	f000 fb00 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (TimerTime_t) ret;
  /* USER CODE BEGIN LmHandlerGetDutyCycleWaitTime_2 */

  /* USER CODE END LmHandlerGetDutyCycleWaitTime_2 */
}
 80027a4:	6960      	ldr	r0, [r4, #20]
 80027a6:	bd10      	pop	{r4, pc}

080027a8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4605      	mov	r5, r0
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer;
  uint16_t i = 0;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80027ac:	f000 faee 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 80027b0:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_REQUEST_CLASS_ID;
 80027b2:	230b      	movs	r3, #11
 80027b4:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80027b6:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) newClass;
 80027b8:	601d      	str	r5, [r3, #0]
  com_obj->ParamCnt = i;
 80027ba:	2301      	movs	r3, #1
 80027bc:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80027be:	f000 faf1 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
  /* USER CODE BEGIN LmHandlerRequestClass_2 */

  /* USER CODE END LmHandlerRequestClass_2 */
}
 80027c2:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80027c6:	bd38      	pop	{r3, r4, r5, pc}

080027c8 <LmHandlerGetVersion>:
  MBMUX_ComParam_t *com_obj;
  uint32_t *com_buffer;
  uint16_t i = 0;
  uint32_t ret;

  if (featureVersion == NULL)
 80027c8:	b1d9      	cbz	r1, 8002802 <LmHandlerGetVersion+0x3a>
{
 80027ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027cc:	4605      	mov	r5, r0
 80027ce:	460f      	mov	r7, r1
  {
    return LORAMAC_HANDLER_ERROR;
  }

  /* copy data from Cm4 stack memory to shared memory */
  UTIL_MEM_cpy_8(aLoraMbWrapShareBuffer, featureVersion, sizeof(uint32_t));
 80027d0:	4e0d      	ldr	r6, [pc, #52]	; (8002808 <LmHandlerGetVersion+0x40>)
 80027d2:	2204      	movs	r2, #4
 80027d4:	4630      	mov	r0, r6
 80027d6:	f007 fd75 	bl	800a2c4 <UTIL_MEM_cpy_8>

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 80027da:	f000 fad7 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 80027de:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_GET_VERSION_ID;
 80027e0:	2330      	movs	r3, #48	; 0x30
 80027e2:	6003      	str	r3, [r0, #0]
  com_buffer = com_obj->ParamBuf;
 80027e4:	6903      	ldr	r3, [r0, #16]
  com_buffer[i++] = (uint32_t) lmhType;
 80027e6:	601d      	str	r5, [r3, #0]
  com_buffer[i++] = (uint32_t) aLoraMbWrapShareBuffer;
 80027e8:	605e      	str	r6, [r3, #4]
  com_obj->ParamCnt = i;
 80027ea:	2302      	movs	r3, #2
 80027ec:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 80027ee:	f000 fad9 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  /* waiting for event */
  /* once event is received and semaphore released: */
  UTIL_MEM_cpy_8(featureVersion, aLoraMbWrapShareBuffer, sizeof(uint32_t));
 80027f2:	2204      	movs	r2, #4
 80027f4:	4631      	mov	r1, r6
 80027f6:	4638      	mov	r0, r7
 80027f8:	f007 fd64 	bl	800a2c4 <UTIL_MEM_cpy_8>

  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
 80027fc:	f994 0014 	ldrsb.w	r0, [r4, #20]
  /* USER CODE BEGIN LmHandlerGetVersion_2 */

  /* USER CODE END LmHandlerGetVersion_2 */
}
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LORAMAC_HANDLER_ERROR;
 8002802:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002806:	4770      	bx	lr
 8002808:	20008140 	.word	0x20008140

0800280c <LmHandlerNvmDataStore>:

LmHandlerErrorStatus_t LmHandlerNvmDataStore(void)
{
 800280c:	b510      	push	{r4, lr}

  /* USER CODE END LmHandlerNvmDataStore_1 */
  MBMUX_ComParam_t *com_obj;
  uint32_t ret;

  com_obj = MBMUXIF_GetLoraFeatureCmdComPtr();
 800280e:	f000 fabd 	bl	8002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>
 8002812:	4604      	mov	r4, r0
  com_obj->MsgId = LMHANDLER_NVM_DATA_STORE_ID;
 8002814:	2331      	movs	r3, #49	; 0x31
 8002816:	6003      	str	r3, [r0, #0]
  com_obj->ParamCnt = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	81c3      	strh	r3, [r0, #14]

  MBMUXIF_LoraSendCmd();
 800281c:	f000 fac2 	bl	8002da4 <MBMUXIF_LoraSendCmd>
  ret = com_obj->ReturnVal;
  return (LmHandlerErrorStatus_t) ret;
  /* USER CODE BEGIN LmHandlerNvmDataStore_2 */

  /* USER CODE END LmHandlerNvmDataStore_2 */
}
 8002820:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8002824:	bd10      	pop	{r4, pc}
	...

08002828 <Process_Lora_Notif>:

  /* USER CODE END LoraInfo_GetPtr_2 */
}

void Process_Lora_Notif(MBMUX_ComParam_t *ComObj)
{
 8002828:	b538      	push	{r3, r4, r5, lr}
 800282a:	4604      	mov	r4, r0
  /* USER CODE BEGIN Process_Lora_Notif_1 */

  /* USER CODE END Process_Lora_Notif_1 */
  uint32_t *com_buffer = ComObj->ParamBuf;
 800282c:	6905      	ldr	r5, [r0, #16]
  uint32_t cb_ret = 0;

  /* Lora Notif received */
  APP_LOG(TS_ON, VLEVEL_H, "CM4<(LoRa)\r\n");
 800282e:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <Process_Lora_Notif+0x18c>)
 8002830:	2201      	movs	r2, #1
 8002832:	2100      	movs	r1, #0
 8002834:	2003      	movs	r0, #3
 8002836:	f007 fc03 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>

  /* process Command */
  switch (ComObj->MsgId)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	3b33      	subs	r3, #51	; 0x33
 800283e:	2b0f      	cmp	r3, #15
 8002840:	d818      	bhi.n	8002874 <Process_Lora_Notif+0x4c>
 8002842:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002846:	0010      	.short	0x0010
 8002848:	00310025 	.word	0x00310025
 800284c:	004b003e 	.word	0x004b003e
 8002850:	005d0054 	.word	0x005d0054
 8002854:	006f0066 	.word	0x006f0066
 8002858:	00820079 	.word	0x00820079
 800285c:	0093008b 	.word	0x0093008b
 8002860:	00a5009c 	.word	0x00a5009c
 8002864:	00ae      	.short	0x00ae
  {
    /* callbacks */
    case LMHANDLER_GET_BATTERY_LEVEL_CB_ID:
      if (callback_mbwrapper.GetBatteryLevel != NULL)
 8002866:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b16b      	cbz	r3, 8002888 <Process_Lora_Notif+0x60>
      {
        cb_ret = (uint32_t) callback_mbwrapper.GetBatteryLevel();
 800286c:	4798      	blx	r3
      else
      {
        Error_Handler();
      }
      /* prepare response buffer */
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 800286e:	2300      	movs	r3, #0
 8002870:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 8002872:	6160      	str	r0, [r4, #20]
    default:
      break;
  }

  /* Lora sending ack */
  APP_LOG(TS_ON, VLEVEL_H, "CM4>(LoRa)\r\n");
 8002874:	4b51      	ldr	r3, [pc, #324]	; (80029bc <Process_Lora_Notif+0x194>)
 8002876:	2201      	movs	r2, #1
 8002878:	2100      	movs	r1, #0
 800287a:	2003      	movs	r0, #3
 800287c:	f007 fbe0 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
  MBMUX_AcknowledgeSnd(FEAT_INFO_LORAWAN_ID);
 8002880:	2008      	movs	r0, #8
 8002882:	f000 f9fd 	bl	8002c80 <MBMUX_AcknowledgeSnd>
  /* USER CODE BEGIN Process_Lora_Notif_2 */

  /* USER CODE END Process_Lora_Notif_2 */
}
 8002886:	bd38      	pop	{r3, r4, r5, pc}
        Error_Handler();
 8002888:	f7fe fd58 	bl	800133c <Error_Handler>
  uint32_t cb_ret = 0;
 800288c:	2000      	movs	r0, #0
 800288e:	e7ee      	b.n	800286e <Process_Lora_Notif+0x46>
      if (callback_mbwrapper.GetTemperature != NULL)
 8002890:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	b123      	cbz	r3, 80028a0 <Process_Lora_Notif+0x78>
        cb_ret = (int16_t) callback_mbwrapper.GetTemperature();
 8002896:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002898:	2300      	movs	r3, #0
 800289a:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 800289c:	6160      	str	r0, [r4, #20]
      break;
 800289e:	e7e9      	b.n	8002874 <Process_Lora_Notif+0x4c>
        Error_Handler();
 80028a0:	f7fe fd4c 	bl	800133c <Error_Handler>
  uint32_t cb_ret = 0;
 80028a4:	2000      	movs	r0, #0
 80028a6:	e7f7      	b.n	8002898 <Process_Lora_Notif+0x70>
      if (callback_mbwrapper.OnRestoreContextRequest != NULL)
 80028a8:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <Process_Lora_Notif+0x190>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	b133      	cbz	r3, 80028bc <Process_Lora_Notif+0x94>
        callback_mbwrapper.OnRestoreContextRequest((void *) com_buffer[0], com_buffer[1]);
 80028ae:	6869      	ldr	r1, [r5, #4]
 80028b0:	6828      	ldr	r0, [r5, #0]
 80028b2:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80028b4:	2300      	movs	r3, #0
 80028b6:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 80028b8:	6163      	str	r3, [r4, #20]
      break;
 80028ba:	e7db      	b.n	8002874 <Process_Lora_Notif+0x4c>
        Error_Handler();
 80028bc:	f7fe fd3e 	bl	800133c <Error_Handler>
 80028c0:	e7f8      	b.n	80028b4 <Process_Lora_Notif+0x8c>
      if (callback_mbwrapper.OnStoreContextRequest != NULL)
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <Process_Lora_Notif+0x190>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	b133      	cbz	r3, 80028d6 <Process_Lora_Notif+0xae>
        callback_mbwrapper.OnStoreContextRequest((void *) com_buffer[0], com_buffer[1]);
 80028c8:	6869      	ldr	r1, [r5, #4]
 80028ca:	6828      	ldr	r0, [r5, #0]
 80028cc:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80028ce:	2300      	movs	r3, #0
 80028d0:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  cb_ret; /* */
 80028d2:	6163      	str	r3, [r4, #20]
      break;
 80028d4:	e7ce      	b.n	8002874 <Process_Lora_Notif+0x4c>
        Error_Handler();
 80028d6:	f7fe fd31 	bl	800133c <Error_Handler>
 80028da:	e7f8      	b.n	80028ce <Process_Lora_Notif+0xa6>
      if (callback_mbwrapper.OnNvmDataChange != NULL)
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <Process_Lora_Notif+0x190>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	b10b      	cbz	r3, 80028e6 <Process_Lora_Notif+0xbe>
        callback_mbwrapper.OnNvmDataChange((LmHandlerNvmContextStates_t) com_buffer[0]);
 80028e2:	7828      	ldrb	r0, [r5, #0]
 80028e4:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80028e6:	2300      	movs	r3, #0
 80028e8:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 80028ea:	6163      	str	r3, [r4, #20]
      break;
 80028ec:	e7c2      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnNetworkParametersChange != NULL)
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <Process_Lora_Notif+0x190>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	b10b      	cbz	r3, 80028f8 <Process_Lora_Notif+0xd0>
        callback_mbwrapper.OnNetworkParametersChange((CommissioningParams_t *) com_buffer[0]);
 80028f4:	6828      	ldr	r0, [r5, #0]
 80028f6:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80028f8:	2300      	movs	r3, #0
 80028fa:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 80028fc:	6163      	str	r3, [r4, #20]
      break;
 80028fe:	e7b9      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnJoinRequest != NULL)
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b10b      	cbz	r3, 800290a <Process_Lora_Notif+0xe2>
        callback_mbwrapper.OnJoinRequest((LmHandlerJoinParams_t *) com_buffer[0]);
 8002906:	6828      	ldr	r0, [r5, #0]
 8002908:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 800290a:	2300      	movs	r3, #0
 800290c:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 800290e:	6163      	str	r3, [r4, #20]
      break;
 8002910:	e7b0      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnTxData != NULL)
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	b10b      	cbz	r3, 800291c <Process_Lora_Notif+0xf4>
        callback_mbwrapper.OnTxData((LmHandlerTxParams_t *) com_buffer[0]);
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 800291c:	2300      	movs	r3, #0
 800291e:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8002920:	6163      	str	r3, [r4, #20]
      break;
 8002922:	e7a7      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnRxData != NULL)
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	b113      	cbz	r3, 8002930 <Process_Lora_Notif+0x108>
        callback_mbwrapper.OnRxData((LmHandlerAppData_t *) com_buffer[0], (LmHandlerRxParams_t *) com_buffer[1]);
 800292a:	6869      	ldr	r1, [r5, #4]
 800292c:	6828      	ldr	r0, [r5, #0]
 800292e:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002930:	2300      	movs	r3, #0
 8002932:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8002934:	6163      	str	r3, [r4, #20]
      break;
 8002936:	e79d      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnClassChange != NULL)
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <Process_Lora_Notif+0x190>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	b10b      	cbz	r3, 8002942 <Process_Lora_Notif+0x11a>
        callback_mbwrapper.OnClassChange((DeviceClass_t) com_buffer[0]);
 800293e:	7828      	ldrb	r0, [r5, #0]
 8002940:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002942:	2300      	movs	r3, #0
 8002944:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8002946:	6163      	str	r3, [r4, #20]
      break;
 8002948:	e794      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnBeaconStatusChange != NULL)
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <Process_Lora_Notif+0x190>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	b10b      	cbz	r3, 8002954 <Process_Lora_Notif+0x12c>
        callback_mbwrapper.OnBeaconStatusChange((LmHandlerBeaconParams_t *) com_buffer[0]);
 8002950:	6828      	ldr	r0, [r5, #0]
 8002952:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002954:	2300      	movs	r3, #0
 8002956:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8002958:	6163      	str	r3, [r4, #20]
      break;
 800295a:	e78b      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnSysTimeUpdate != NULL)
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <Process_Lora_Notif+0x190>)
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	b103      	cbz	r3, 8002964 <Process_Lora_Notif+0x13c>
        callback_mbwrapper.OnSysTimeUpdate();
 8002962:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002964:	2300      	movs	r3, #0
 8002966:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 8002968:	6163      	str	r3, [r4, #20]
      break;
 800296a:	e783      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnTxPeriodicityChanged != NULL)
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <Process_Lora_Notif+0x190>)
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	b10b      	cbz	r3, 8002976 <Process_Lora_Notif+0x14e>
        callback_mbwrapper.OnTxPeriodicityChanged(com_buffer[0]);
 8002972:	6828      	ldr	r0, [r5, #0]
 8002974:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002976:	2300      	movs	r3, #0
 8002978:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 800297a:	6163      	str	r3, [r4, #20]
      break;
 800297c:	e77a      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnTxFrameCtrlChanged != NULL)
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	b10b      	cbz	r3, 8002988 <Process_Lora_Notif+0x160>
        callback_mbwrapper.OnTxFrameCtrlChanged((LmHandlerMsgTypes_t) com_buffer[0]);
 8002984:	7828      	ldrb	r0, [r5, #0]
 8002986:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 8002988:	2300      	movs	r3, #0
 800298a:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 800298c:	6163      	str	r3, [r4, #20]
      break;
 800298e:	e771      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnPingSlotPeriodicityChanged != NULL)
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <Process_Lora_Notif+0x190>)
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	b10b      	cbz	r3, 800299a <Process_Lora_Notif+0x172>
        callback_mbwrapper.OnPingSlotPeriodicityChanged((uint8_t) com_buffer[0]);
 8002996:	7828      	ldrb	r0, [r5, #0]
 8002998:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 800299a:	2300      	movs	r3, #0
 800299c:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 800299e:	6163      	str	r3, [r4, #20]
      break;
 80029a0:	e768      	b.n	8002874 <Process_Lora_Notif+0x4c>
      if (callback_mbwrapper.OnSystemReset != NULL)
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <Process_Lora_Notif+0x190>)
 80029a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a6:	b103      	cbz	r3, 80029aa <Process_Lora_Notif+0x182>
        callback_mbwrapper.OnSystemReset();
 80029a8:	4798      	blx	r3
      ComObj->ParamCnt = 0; /* reset ParamCnt */
 80029aa:	2300      	movs	r3, #0
 80029ac:	81e3      	strh	r3, [r4, #14]
      ComObj->ReturnVal =  0; /* */
 80029ae:	6163      	str	r3, [r4, #20]
      break;
 80029b0:	e760      	b.n	8002874 <Process_Lora_Notif+0x4c>
 80029b2:	bf00      	nop
 80029b4:	0800b0e4 	.word	0x0800b0e4
 80029b8:	20000428 	.word	0x20000428
 80029bc:	0800b0f4 	.word	0x0800b0f4

080029c0 <MBMUX_CheckIfFeatureSupportedByCm0plus>:

/* USER CODE END EFD */

/* Private functions ---------------------------------------------------------*/
static uint8_t MBMUX_CheckIfFeatureSupportedByCm0plus(FEAT_INFO_IdTypeDef e_featID)
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	b084      	sub	sp, #16
  FEAT_INFO_Param_t  i_feature;
  /* USER CODE BEGIN MBMUX_CheckIfFeatureSupportedByCm0plus_1 */

  /* USER CODE END MBMUX_CheckIfFeatureSupportedByCm0plus_1 */

  if (p_MBMUX_Cm0plusFeatureList != NULL)
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x44>)
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	b1c4      	cbz	r4, 80029fc <MBMUX_CheckIfFeatureSupportedByCm0plus+0x3c>
 80029ca:	4686      	mov	lr, r0
  {
    cm0plus_nr_of_supported_features = p_MBMUX_Cm0plusFeatureList->Feat_Info_Cnt;
 80029cc:	7825      	ldrb	r5, [r4, #0]

    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 80029ce:	f04f 0c00 	mov.w	ip, #0
 80029d2:	45ac      	cmp	ip, r5
 80029d4:	d20f      	bcs.n	80029f6 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x36>
    {
      i_feature = *(i + p_MBMUX_Cm0plusFeatureList->Feat_Info_TableAddress);
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 80029dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029de:	ae04      	add	r6, sp, #16
 80029e0:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
      if (i_feature.Feat_Info_Feature_Id == e_featID)
 80029e4:	f89d 3000 	ldrb.w	r3, [sp]
 80029e8:	4573      	cmp	r3, lr
 80029ea:	d009      	beq.n	8002a00 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x40>
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 80029ec:	f10c 0c01 	add.w	ip, ip, #1
 80029f0:	fa5f fc8c 	uxtb.w	ip, ip
 80029f4:	e7ed      	b.n	80029d2 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x12>
  int8_t ret = 0;
 80029f6:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN MBMUX_CheckIfFeatureSupportedByCm0plus_Last */

  /* USER CODE END MBMUX_CheckIfFeatureSupportedByCm0plus_Last */
  return ret;
}
 80029f8:	b004      	add	sp, #16
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = 0;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e7fb      	b.n	80029f8 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x38>
        ret = 1;
 8002a00:	2001      	movs	r0, #1
 8002a02:	e7f9      	b.n	80029f8 <MBMUX_CheckIfFeatureSupportedByCm0plus+0x38>
 8002a04:	20000474 	.word	0x20000474

08002a08 <MBMUX_IsrResponseRcvCb>:

static void MBMUX_IsrResponseRcvCb(uint32_t channelIdx)
{
 8002a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrResponseRcvCb_1 */

  /* USER CODE END MBMUX_IsrResponseRcvCb_1 */
  /* retrieve pointer to com params */
  void *com_obj = (void *) &p_MBMUX_ComTable->MBCmdRespParam[channelIdx];
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <MBMUX_IsrResponseRcvCb+0x18>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
  /* call registered callback */
  p_MBMUX_ComTable->MBCmdRespParam[channelIdx].MsgCm4Cb(com_obj);
 8002a12:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8002a1c:	4798      	blx	r3
  /* USER CODE BEGIN MBMUX_IsrResponseRcvCb_Last */

  /* USER CODE END MBMUX_IsrResponseRcvCb_Last */
  return;
}
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	20000478 	.word	0x20000478

08002a24 <MBMUX_IsrNotificationRcvCb>:

static void MBMUX_IsrNotificationRcvCb(uint32_t channelIdx)
{
 8002a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrNotificationRcvCb_1 */

  /* USER CODE END MBMUX_IsrNotificationRcvCb_1 */
  /* retrieve pointer to com params */
  void *com_obj = (void *) &p_MBMUX_ComTable->MBNotifAckParam[channelIdx];
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <MBMUX_IsrNotificationRcvCb+0x20>)
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	3290      	adds	r2, #144	; 0x90
  /* call registered callback */
  p_MBMUX_ComTable->MBNotifAckParam[channelIdx].MsgCm4Cb(com_obj);
 8002a32:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002a36:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	1888      	adds	r0, r1, r2
 8002a40:	4798      	blx	r3
  /* USER CODE BEGIN MBMUX_IsrNotificationRcvCb_Last */

  /* USER CODE END MBMUX_IsrNotificationRcvCb_Last */
  return;
}
 8002a42:	bd08      	pop	{r3, pc}
 8002a44:	20000478 	.word	0x20000478

08002a48 <MBMUX_FindChStillUnregistered>:
  uint8_t feat_id;
  uint8_t ch;
  uint8_t already_used;

  /* First two channels are reserved to SYSTEM, TRACE and SKS */
  if (ComType == MBMUX_CMD_RESP)
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d036      	beq.n	8002aba <MBMUX_FindChStillUnregistered+0x72>
      }
    }
  }
  else  /* RX */
  {
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	2805      	cmp	r0, #5
 8002a50:	d82b      	bhi.n	8002aaa <MBMUX_FindChStillUnregistered+0x62>
    {
      already_used = 0;
 8002a52:	2100      	movs	r1, #0
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8002a54:	460b      	mov	r3, r1
 8002a56:	e01b      	b.n	8002a90 <MBMUX_FindChStillUnregistered+0x48>
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b0a      	cmp	r3, #10
 8002a5e:	d809      	bhi.n	8002a74 <MBMUX_FindChStillUnregistered+0x2c>
        if (p_MBMUX_ComTable->MBMUXMapping[feat_id][MBMUX_CMD_RESP] == ch)
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <MBMUX_FindChStillUnregistered+0x84>)
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8002a68:	f812 2011 	ldrb.w	r2, [r2, r1, lsl #1]
 8002a6c:	4282      	cmp	r2, r0
 8002a6e:	d1f3      	bne.n	8002a58 <MBMUX_FindChStillUnregistered+0x10>
          already_used = 1;
 8002a70:	2401      	movs	r4, #1
 8002a72:	e7f1      	b.n	8002a58 <MBMUX_FindChStillUnregistered+0x10>
      if (already_used == 0)
 8002a74:	b91c      	cbnz	r4, 8002a7e <MBMUX_FindChStillUnregistered+0x36>
        break;
      }
    }
  }

  if (ch == MBMUX_CHANNEL_NUMBER)
 8002a76:	2806      	cmp	r0, #6
 8002a78:	d01d      	beq.n	8002ab6 <MBMUX_FindChStillUnregistered+0x6e>
    return (ch);
  }
  /* USER CODE BEGIN MBMUX_FindChStillUnregistered_Last */

  /* USER CODE END MBMUX_FindChStillUnregistered_Last */
}
 8002a7a:	bc10      	pop	{r4}
 8002a7c:	4770      	bx	lr
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8002a7e:	3001      	adds	r0, #1
 8002a80:	b2c0      	uxtb	r0, r0
 8002a82:	2805      	cmp	r0, #5
 8002a84:	d8f7      	bhi.n	8002a76 <MBMUX_FindChStillUnregistered+0x2e>
      already_used = 0;
 8002a86:	4664      	mov	r4, ip
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8002a88:	4663      	mov	r3, ip
 8002a8a:	e7e7      	b.n	8002a5c <MBMUX_FindChStillUnregistered+0x14>
      for (feat_id = 0; feat_id < FEAT_INFO_CNT; feat_id++)
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b0a      	cmp	r3, #10
 8002a92:	d809      	bhi.n	8002aa8 <MBMUX_FindChStillUnregistered+0x60>
        if (p_MBMUX_ComTable->MBMUXMapping[feat_id][MBMUX_NOTIF_ACK] == ch)
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <MBMUX_FindChStillUnregistered+0x84>)
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002a9c:	f892 2121 	ldrb.w	r2, [r2, #289]	; 0x121
 8002aa0:	4282      	cmp	r2, r0
 8002aa2:	d1f3      	bne.n	8002a8c <MBMUX_FindChStillUnregistered+0x44>
          already_used = 1;
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	e7f1      	b.n	8002a8c <MBMUX_FindChStillUnregistered+0x44>
      if (already_used == 0)
 8002aa8:	b911      	cbnz	r1, 8002ab0 <MBMUX_FindChStillUnregistered+0x68>
  if (ch == MBMUX_CHANNEL_NUMBER)
 8002aaa:	2806      	cmp	r0, #6
 8002aac:	d00b      	beq.n	8002ac6 <MBMUX_FindChStillUnregistered+0x7e>
}
 8002aae:	4770      	bx	lr
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	b2c0      	uxtb	r0, r0
 8002ab4:	e7cb      	b.n	8002a4e <MBMUX_FindChStillUnregistered+0x6>
    return MB_CHANNEL_NOT_REGISTERED;
 8002ab6:	20ff      	movs	r0, #255	; 0xff
 8002ab8:	e7df      	b.n	8002a7a <MBMUX_FindChStillUnregistered+0x32>
 8002aba:	4684      	mov	ip, r0
    for (ch = 1; ch < MBMUX_CHANNEL_NUMBER; ch++)
 8002abc:	2001      	movs	r0, #1
 8002abe:	2805      	cmp	r0, #5
 8002ac0:	d8f3      	bhi.n	8002aaa <MBMUX_FindChStillUnregistered+0x62>
{
 8002ac2:	b410      	push	{r4}
 8002ac4:	e7df      	b.n	8002a86 <MBMUX_FindChStillUnregistered+0x3e>
    return MB_CHANNEL_NOT_REGISTERED;
 8002ac6:	20ff      	movs	r0, #255	; 0xff
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000478 	.word	0x20000478

08002ad0 <MBMUX_GetFeatureChIdx>:
static uint8_t MBMUX_GetFeatureChIdx(FEAT_INFO_IdTypeDef e_featID, MBMUX_ComType_t ComType)
{
  /* USER CODE BEGIN MBMUX_GetFeatureChIdx_1 */

  /* USER CODE END MBMUX_GetFeatureChIdx_1 */
  return p_MBMUX_ComTable->MBMUXMapping[e_featID][ComType];
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <MBMUX_GetFeatureChIdx+0x10>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002ad8:	440b      	add	r3, r1
  /* USER CODE BEGIN MBMUX_GetFeatureChIdx_Last */

  /* USER CODE END MBMUX_GetFeatureChIdx_Last */
}
 8002ada:	f893 0120 	ldrb.w	r0, [r3, #288]	; 0x120
 8002ade:	4770      	bx	lr
 8002ae0:	20000478 	.word	0x20000478

08002ae4 <MBMUX_IsrNotRegistered>:

static void MBMUX_IsrNotRegistered(void *ComObj)
{
 8002ae4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUX_IsrNotRegistered_1 */

  /* USER CODE END MBMUX_IsrNotRegistered_1 */
  Error_Handler();
 8002ae6:	f7fe fc29 	bl	800133c <Error_Handler>
  /* USER CODE BEGIN MBMUX_IsrNotRegistered_Last */

  /* USER CODE END MBMUX_IsrNotRegistered_Last */
}
 8002aea:	bd08      	pop	{r3, pc}

08002aec <MBMUX_Init>:
{
 8002aec:	b510      	push	{r4, lr}
 8002aee:	4604      	mov	r4, r0
  IPCC_IF_Init(MBMUX_IsrResponseRcvCb, MBMUX_IsrNotificationRcvCb);
 8002af0:	4919      	ldr	r1, [pc, #100]	; (8002b58 <MBMUX_Init+0x6c>)
 8002af2:	481a      	ldr	r0, [pc, #104]	; (8002b5c <MBMUX_Init+0x70>)
 8002af4:	f7fe fbd2 	bl	800129c <IPCC_IF_Init>
  p_MBMUX_ComTable = pMBMUX_ComTable;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MBMUX_Init+0x74>)
 8002afa:	601c      	str	r4, [r3, #0]
  for (i = 0; i < FEAT_INFO_CNT; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	e00a      	b.n	8002b16 <MBMUX_Init+0x2a>
    p_MBMUX_ComTable->MBMUXMapping[i][MBMUX_CMD_RESP] = MB_CHANNEL_NOT_REGISTERED;
 8002b00:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8002b04:	22ff      	movs	r2, #255	; 0xff
 8002b06:	f804 2011 	strb.w	r2, [r4, r1, lsl #1]
    p_MBMUX_ComTable->MBMUXMapping[i][MBMUX_NOTIF_ACK] = MB_CHANNEL_NOT_REGISTERED;
 8002b0a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8002b0e:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
  for (i = 0; i < FEAT_INFO_CNT; i++)
 8002b12:	3301      	adds	r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d9f2      	bls.n	8002b00 <MBMUX_Init+0x14>
  for (i = 0; i < MBMUX_CHANNEL_NUMBER; i++)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2a05      	cmp	r2, #5
 8002b1e:	d819      	bhi.n	8002b54 <MBMUX_Init+0x68>
    p_MBMUX_ComTable->MBCmdRespParam[i].MsgId = 0;
 8002b20:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002b24:	00d8      	lsls	r0, r3, #3
 8002b26:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5021      	str	r1, [r4, r0]
    p_MBMUX_ComTable->MBCmdRespParam[i].MsgCm4Cb = MBMUX_IsrNotRegistered;
 8002b2e:	480d      	ldr	r0, [pc, #52]	; (8002b64 <MBMUX_Init+0x78>)
 8002b30:	6058      	str	r0, [r3, #4]
    p_MBMUX_ComTable->MBCmdRespParam[i].ParamCnt = 0;
 8002b32:	81d9      	strh	r1, [r3, #14]
    p_MBMUX_ComTable->MBCmdRespParam[i].ParamBuf = NULL;
 8002b34:	6119      	str	r1, [r3, #16]
    p_MBMUX_ComTable->MBNotifAckParam[i].MsgId = 0;
 8002b36:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    p_MBMUX_ComTable->MBNotifAckParam[i].MsgCm4Cb = MBMUX_IsrNotRegistered;
 8002b3a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    p_MBMUX_ComTable->MBNotifAckParam[i].ParamCnt = 0;
 8002b3e:	f8a3 109e 	strh.w	r1, [r3, #158]	; 0x9e
    p_MBMUX_ComTable->MBNotifAckParam[i].ParamBuf = NULL;
 8002b42:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002b46:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002b4a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  for (i = 0; i < MBMUX_CHANNEL_NUMBER; i++)
 8002b4e:	3201      	adds	r2, #1
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	e7e3      	b.n	8002b1c <MBMUX_Init+0x30>
}
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	bf00      	nop
 8002b58:	08002a25 	.word	0x08002a25
 8002b5c:	08002a09 	.word	0x08002a09
 8002b60:	20000478 	.word	0x20000478
 8002b64:	08002ae5 	.word	0x08002ae5

08002b68 <MBMUX_SetCm0plusFeatureListPtr>:
  p_MBMUX_Cm0plusFeatureList = pCM0PLUS_FeatureList;
 8002b68:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <MBMUX_SetCm0plusFeatureListPtr+0x8>)
 8002b6a:	6018      	str	r0, [r3, #0]
}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000474 	.word	0x20000474

08002b74 <MBMUX_RegisterFeature>:
{
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	460d      	mov	r5, r1
 8002b7a:	4617      	mov	r7, r2
 8002b7c:	461e      	mov	r6, r3
 8002b7e:	f8bd 8018 	ldrh.w	r8, [sp, #24]
  if (e_featID == FEAT_INFO_SYSTEM_ID)
 8002b82:	4604      	mov	r4, r0
 8002b84:	b120      	cbz	r0, 8002b90 <MBMUX_RegisterFeature+0x1c>
    check_if_feature_provided_by_cm0plus = MBMUX_CheckIfFeatureSupportedByCm0plus(e_featID);
 8002b86:	f7ff ff1b 	bl	80029c0 <MBMUX_CheckIfFeatureSupportedByCm0plus>
 8002b8a:	b240      	sxtb	r0, r0
  if (check_if_feature_provided_by_cm0plus == 1)
 8002b8c:	2801      	cmp	r0, #1
 8002b8e:	d13d      	bne.n	8002c0c <MBMUX_RegisterFeature+0x98>
    check_existing_feature_registration = MBMUX_GetFeatureChIdx(e_featID, ComType);
 8002b90:	4629      	mov	r1, r5
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff ff9c 	bl	8002ad0 <MBMUX_GetFeatureChIdx>
    if (check_existing_feature_registration == MB_CHANNEL_NOT_REGISTERED)
 8002b98:	28ff      	cmp	r0, #255	; 0xff
 8002b9a:	d018      	beq.n	8002bce <MBMUX_RegisterFeature+0x5a>
  if (channel_idx != MB_CHANNEL_NOT_REGISTERED)
 8002b9c:	28ff      	cmp	r0, #255	; 0xff
 8002b9e:	d038      	beq.n	8002c12 <MBMUX_RegisterFeature+0x9e>
    if (ComType == MBMUX_CMD_RESP)
 8002ba0:	b9e5      	cbnz	r5, 8002bdc <MBMUX_RegisterFeature+0x68>
      p_MBMUX_ComTable->MBMUXMapping[e_featID][MBMUX_CMD_RESP] = channel_idx;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <MBMUX_RegisterFeature+0xa4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3490      	adds	r4, #144	; 0x90
 8002ba8:	f803 0014 	strb.w	r0, [r3, r4, lsl #1]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].MsgCm4Cb = MsgCb;
 8002bac:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002bb0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002bb4:	6057      	str	r7, [r2, #4]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].BufSize = ComBufSize;
 8002bb6:	f8a2 800c 	strh.w	r8, [r2, #12]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].ParamBuf = ComBuffer;
 8002bba:	6116      	str	r6, [r2, #16]
      p_MBMUX_ComTable->MBCmdRespParam[channel_idx].ReturnVal = 0;
 8002bbc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
    ret = channel_idx;
 8002bc8:	b240      	sxtb	r0, r0
}
 8002bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (e_featID == FEAT_INFO_SYSTEM_ID)
 8002bce:	b11c      	cbz	r4, 8002bd8 <MBMUX_RegisterFeature+0x64>
        channel_idx = MBMUX_FindChStillUnregistered(ComType);
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f7ff ff39 	bl	8002a48 <MBMUX_FindChStillUnregistered>
 8002bd6:	e7e1      	b.n	8002b9c <MBMUX_RegisterFeature+0x28>
        channel_idx = 0;
 8002bd8:	4620      	mov	r0, r4
 8002bda:	e7e1      	b.n	8002ba0 <MBMUX_RegisterFeature+0x2c>
      p_MBMUX_ComTable->MBMUXMapping[e_featID][MBMUX_NOTIF_ACK] = channel_idx;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MBMUX_RegisterFeature+0xa4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8002be4:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].MsgCm4Cb = MsgCb;
 8002be8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002bec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8002bf0:	f8c2 7094 	str.w	r7, [r2, #148]	; 0x94
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].BufSize = ComBufSize;
 8002bf4:	f8a2 809c 	strh.w	r8, [r2, #156]	; 0x9c
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].ParamBuf = ComBuffer;
 8002bf8:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
      p_MBMUX_ComTable->MBNotifAckParam[channel_idx].ReturnVal = 0;
 8002bfc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002c0a:	e7dd      	b.n	8002bc8 <MBMUX_RegisterFeature+0x54>
    ret = -2; /* feature not provided by CM0PLUS */
 8002c0c:	f06f 0001 	mvn.w	r0, #1
 8002c10:	e7db      	b.n	8002bca <MBMUX_RegisterFeature+0x56>
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295
 8002c16:	e7d8      	b.n	8002bca <MBMUX_RegisterFeature+0x56>
 8002c18:	20000478 	.word	0x20000478

08002c1c <MBMUX_GetFeatureComPtr>:
{
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	460c      	mov	r4, r1
  channel_idx = MBMUX_GetFeatureChIdx(e_featID, ComType);
 8002c20:	f7ff ff56 	bl	8002ad0 <MBMUX_GetFeatureChIdx>
  if (channel_idx < MBMUX_CHANNEL_NUMBER)
 8002c24:	2805      	cmp	r0, #5
 8002c26:	d80f      	bhi.n	8002c48 <MBMUX_GetFeatureComPtr+0x2c>
    if (ComType == MBMUX_CMD_RESP)  /* TX */
 8002c28:	b934      	cbnz	r4, 8002c38 <MBMUX_GetFeatureComPtr+0x1c>
      com_param_ptr = (MBMUX_ComParam_t *) &p_MBMUX_ComTable->MBCmdRespParam[channel_idx];
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MBMUX_GetFeatureComPtr+0x30>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c32:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 8002c36:	bd10      	pop	{r4, pc}
      com_param_ptr = (MBMUX_ComParam_t *) &p_MBMUX_ComTable->MBNotifAckParam[channel_idx];
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <MBMUX_GetFeatureComPtr+0x30>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c40:	00c0      	lsls	r0, r0, #3
 8002c42:	3090      	adds	r0, #144	; 0x90
 8002c44:	4418      	add	r0, r3
 8002c46:	e7f6      	b.n	8002c36 <MBMUX_GetFeatureComPtr+0x1a>
  MBMUX_ComParam_t *com_param_ptr = NULL;
 8002c48:	2000      	movs	r0, #0
  return com_param_ptr;
 8002c4a:	e7f4      	b.n	8002c36 <MBMUX_GetFeatureComPtr+0x1a>
 8002c4c:	20000478 	.word	0x20000478

08002c50 <MBMUX_CommandSnd>:
{
 8002c50:	b510      	push	{r4, lr}
  mb_ch = MBMUX_GetFeatureChIdx(e_featID, MBMUX_CMD_RESP);
 8002c52:	2100      	movs	r1, #0
 8002c54:	f7ff ff3c 	bl	8002ad0 <MBMUX_GetFeatureChIdx>
 8002c58:	4604      	mov	r4, r0
  if (p_MBMUX_ComTable->MBCmdRespParam[mb_ch].ParamCnt > p_MBMUX_ComTable->MBCmdRespParam[mb_ch].BufSize)
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MBMUX_CommandSnd+0x2c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8002c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c66:	89da      	ldrh	r2, [r3, #14]
 8002c68:	899b      	ldrh	r3, [r3, #12]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d803      	bhi.n	8002c76 <MBMUX_CommandSnd+0x26>
  return IPCC_IF_CommandSnd(mb_ch);
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7fe fb48 	bl	8001304 <IPCC_IF_CommandSnd>
}
 8002c74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c76:	f7fe fb61 	bl	800133c <Error_Handler>
 8002c7a:	e7f8      	b.n	8002c6e <MBMUX_CommandSnd+0x1e>
 8002c7c:	20000478 	.word	0x20000478

08002c80 <MBMUX_AcknowledgeSnd>:
{
 8002c80:	b508      	push	{r3, lr}
  mb_ch = MBMUX_GetFeatureChIdx(e_featID, MBMUX_NOTIF_ACK);
 8002c82:	2101      	movs	r1, #1
 8002c84:	f7ff ff24 	bl	8002ad0 <MBMUX_GetFeatureChIdx>
  return IPCC_IF_AcknowledgeSnd(mb_ch);
 8002c88:	f7fe fb4a 	bl	8001320 <IPCC_IF_AcknowledgeSnd>
}
 8002c8c:	bd08      	pop	{r3, pc}
	...

08002c90 <MBMUXIF_TaskLoraNotifRcv>:

  /* USER CODE END MBMUXIF_IsrLoraNotifRcvCb_Last */
}

static void MBMUXIF_TaskLoraNotifRcv(void)
{
 8002c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUXIF_TaskLoraNotifRcv_1 */

  /* USER CODE END MBMUXIF_TaskLoraNotifRcv_1 */
  Process_Lora_Notif(LoraComObj);
 8002c92:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <MBMUXIF_TaskLoraNotifRcv+0xc>)
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	f7ff fdc7 	bl	8002828 <Process_Lora_Notif>
  /* USER CODE BEGIN MBMUXIF_TaskLoraNotifRcv_Last */

  /* USER CODE END MBMUXIF_TaskLoraNotifRcv_Last */
}
 8002c9a:	bd08      	pop	{r3, pc}
 8002c9c:	2000047c 	.word	0x2000047c

08002ca0 <Thd_LoraNotifRcvProcess>:

static void Thd_LoraNotifRcvProcess(void *argument)
{
 8002ca0:	b508      	push	{r3, lr}

  /* USER CODE END Thd_LoraNotifRcvProcess_1 */
  UNUSED(argument);
  for (;;)
  {
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f004 fd15 	bl	80076d8 <osThreadFlagsWait>
    MBMUXIF_TaskLoraNotifRcv();  /*what you want to do*/
 8002cae:	f7ff ffef 	bl	8002c90 <MBMUXIF_TaskLoraNotifRcv>
  for (;;)
 8002cb2:	e7f6      	b.n	8002ca2 <Thd_LoraNotifRcvProcess+0x2>

08002cb4 <MBMUXIF_IsrLoraNotifRcvCb>:
{
 8002cb4:	b508      	push	{r3, lr}
  LoraComObj = (MBMUX_ComParam_t *) ComObj;
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <MBMUXIF_IsrLoraNotifRcvCb+0x14>)
 8002cb8:	6018      	str	r0, [r3, #0]
  osThreadFlagsSet(Thd_LoraNotifRcvProcessId, 1);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <MBMUXIF_IsrLoraNotifRcvCb+0x18>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f004 fcc2 	bl	8007648 <osThreadFlagsSet>
}
 8002cc4:	bd08      	pop	{r3, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000047c 	.word	0x2000047c
 8002ccc:	20000484 	.word	0x20000484

08002cd0 <MBMUXIF_IsrLoraRespRcvCb>:
{
 8002cd0:	b508      	push	{r3, lr}
  osSemaphoreRelease(Sem_MbLoRaRespRcv);
 8002cd2:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <MBMUXIF_IsrLoraRespRcvCb+0xc>)
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	f004 fe11 	bl	80078fc <osSemaphoreRelease>
}
 8002cda:	bd08      	pop	{r3, pc}
 8002cdc:	20000480 	.word	0x20000480

08002ce0 <MBMUXIF_LoraInit>:
{
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	b082      	sub	sp, #8
  p_cm0plus_system_info = MBMUXIF_SystemGetFeatCapabInfoPtr(FEAT_INFO_SYSTEM_ID);
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f000 f9cb 	bl	8003080 <MBMUXIF_SystemGetFeatCapabInfoPtr>
  cm0_vers = p_cm0plus_system_info->Feat_Info_Feature_Version >> APP_VERSION_SUB2_SHIFT;
 8002cea:	6842      	ldr	r2, [r0, #4]
  if (cm0_vers < (LAST_COMPATIBLE_CM0_RELEASE >> APP_VERSION_SUB2_SHIFT))
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MBMUXIF_LoraInit+0x88>)
 8002cee:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8002cf2:	d314      	bcc.n	8002d1e <MBMUXIF_LoraInit+0x3e>
    ret = -4; /* version incompatibility */
 8002cf4:	f06f 0403 	mvn.w	r4, #3
  if (ret >= 0)
 8002cf8:	2c00      	cmp	r4, #0
 8002cfa:	da1a      	bge.n	8002d32 <MBMUXIF_LoraInit+0x52>
  if (ret >= 0)
 8002cfc:	2c00      	cmp	r4, #0
 8002cfe:	da22      	bge.n	8002d46 <MBMUXIF_LoraInit+0x66>
  if (ret >= 0)
 8002d00:	2c00      	cmp	r4, #0
 8002d02:	da28      	bge.n	8002d56 <MBMUXIF_LoraInit+0x76>
  Sem_MbLoRaRespRcv = osSemaphoreNew(1, 0, NULL);   /*< Create the semaphore and make it busy at initialization */
 8002d04:	2200      	movs	r2, #0
 8002d06:	4611      	mov	r1, r2
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f004 fd4b 	bl	80077a4 <osSemaphoreNew>
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <MBMUXIF_LoraInit+0x8c>)
 8002d10:	6018      	str	r0, [r3, #0]
  if (ret >= 0)
 8002d12:	2c00      	cmp	r4, #0
 8002d14:	db00      	blt.n	8002d18 <MBMUXIF_LoraInit+0x38>
    ret = 0;
 8002d16:	2400      	movs	r4, #0
}
 8002d18:	4620      	mov	r0, r4
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd10      	pop	{r4, pc}
    ret = MBMUX_RegisterFeature(FEAT_INFO_LORAWAN_ID, MBMUX_CMD_RESP,
 8002d1e:	233c      	movs	r3, #60	; 0x3c
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <MBMUXIF_LoraInit+0x90>)
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <MBMUXIF_LoraInit+0x94>)
 8002d26:	2100      	movs	r1, #0
 8002d28:	2008      	movs	r0, #8
 8002d2a:	f7ff ff23 	bl	8002b74 <MBMUX_RegisterFeature>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	e7e2      	b.n	8002cf8 <MBMUXIF_LoraInit+0x18>
    ret = MBMUX_RegisterFeature(FEAT_INFO_LORAWAN_ID, MBMUX_NOTIF_ACK,
 8002d32:	2314      	movs	r3, #20
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MBMUXIF_LoraInit+0x98>)
 8002d38:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <MBMUXIF_LoraInit+0x9c>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2008      	movs	r0, #8
 8002d3e:	f7ff ff19 	bl	8002b74 <MBMUX_RegisterFeature>
 8002d42:	4604      	mov	r4, r0
 8002d44:	e7da      	b.n	8002cfc <MBMUXIF_LoraInit+0x1c>
    Thd_LoraNotifRcvProcessId = osThreadNew(Thd_LoraNotifRcvProcess, NULL, &Thd_LoraNotifRcvProcess_attr);
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <MBMUXIF_LoraInit+0xa0>)
 8002d48:	2100      	movs	r1, #0
 8002d4a:	480e      	ldr	r0, [pc, #56]	; (8002d84 <MBMUXIF_LoraInit+0xa4>)
 8002d4c:	f004 fc10 	bl	8007570 <osThreadNew>
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <MBMUXIF_LoraInit+0xa8>)
 8002d52:	6018      	str	r0, [r3, #0]
 8002d54:	e7d4      	b.n	8002d00 <MBMUXIF_LoraInit+0x20>
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(FEAT_INFO_LORAWAN_ID);
 8002d56:	2008      	movs	r0, #8
 8002d58:	f000 f9b2 	bl	80030c0 <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 8002d5c:	1e04      	subs	r4, r0, #0
 8002d5e:	dad1      	bge.n	8002d04 <MBMUXIF_LoraInit+0x24>
      ret = -3;
 8002d60:	f06f 0402 	mvn.w	r4, #2
 8002d64:	e7ce      	b.n	8002d04 <MBMUXIF_LoraInit+0x24>
 8002d66:	bf00      	nop
 8002d68:	000102ff 	.word	0x000102ff
 8002d6c:	20000480 	.word	0x20000480
 8002d70:	20008244 	.word	0x20008244
 8002d74:	08002cd1 	.word	0x08002cd1
 8002d78:	20008280 	.word	0x20008280
 8002d7c:	08002cb5 	.word	0x08002cb5
 8002d80:	0800b114 	.word	0x0800b114
 8002d84:	08002ca1 	.word	0x08002ca1
 8002d88:	20000484 	.word	0x20000484

08002d8c <MBMUXIF_GetLoraFeatureCmdComPtr>:
{
 8002d8c:	b510      	push	{r4, lr}
  MBMUX_ComParam_t *com_param_ptr = MBMUX_GetFeatureComPtr(FEAT_INFO_LORAWAN_ID, MBMUX_CMD_RESP);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2008      	movs	r0, #8
 8002d92:	f7ff ff43 	bl	8002c1c <MBMUX_GetFeatureComPtr>
  if (com_param_ptr == NULL)
 8002d96:	4604      	mov	r4, r0
 8002d98:	b108      	cbz	r0, 8002d9e <MBMUXIF_GetLoraFeatureCmdComPtr+0x12>
}
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	bd10      	pop	{r4, pc}
    Error_Handler(); /* feature isn't registered */
 8002d9e:	f7fe facd 	bl	800133c <Error_Handler>
  return com_param_ptr;
 8002da2:	e7fa      	b.n	8002d9a <MBMUXIF_GetLoraFeatureCmdComPtr+0xe>

08002da4 <MBMUXIF_LoraSendCmd>:
{
 8002da4:	b508      	push	{r3, lr}
  if (MBMUX_CommandSnd(FEAT_INFO_LORAWAN_ID) == 0)
 8002da6:	2008      	movs	r0, #8
 8002da8:	f7ff ff52 	bl	8002c50 <MBMUX_CommandSnd>
 8002dac:	b930      	cbnz	r0, 8002dbc <MBMUXIF_LoraSendCmd+0x18>
    osSemaphoreAcquire(Sem_MbLoRaRespRcv, osWaitForever);
 8002dae:	f04f 31ff 	mov.w	r1, #4294967295
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <MBMUXIF_LoraSendCmd+0x20>)
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	f004 fd5d 	bl	8007874 <osSemaphoreAcquire>
}
 8002dba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002dbc:	f7fe fabe 	bl	800133c <Error_Handler>
}
 8002dc0:	e7fb      	b.n	8002dba <MBMUXIF_LoraSendCmd+0x16>
 8002dc2:	bf00      	nop
 8002dc4:	20000480 	.word	0x20000480

08002dc8 <MBMUXIF_IsrSystemPrioARespRcvCb>:
static void MBMUXIF_IsrSystemPrioARespRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioARespRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioARespRcvCb */
}
 8002dc8:	4770      	bx	lr

08002dca <MBMUXIF_IsrSystemPrioBRespRcvCb>:
static void MBMUXIF_IsrSystemPrioBRespRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioBRespRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioBRespRcvCb */
}
 8002dca:	4770      	bx	lr

08002dcc <MBMUXIF_IsrSystemPrioBNotifRcvCb>:
static void MBMUXIF_IsrSystemPrioBNotifRcvCb(void *ComObj)
{
  /* USER CODE BEGIN MBMUXIF_IsrSystemPrioBNotifRcvCb */

  /* USER CODE END MBMUXIF_IsrSystemPrioBNotifRcvCb */
}
 8002dcc:	4770      	bx	lr
	...

08002dd0 <MBMUXIF_TaskSystemNotifRcv>:
{
 8002dd0:	b508      	push	{r3, lr}
  Process_Sys_Notif(SystemComObj);
 8002dd2:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <MBMUXIF_TaskSystemNotifRcv+0xc>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f7fe fc2b 	bl	8001630 <Process_Sys_Notif>
}
 8002dda:	bd08      	pop	{r3, pc}
 8002ddc:	200004e8 	.word	0x200004e8

08002de0 <Thd_SysNotifRcvProcess>:
{
 8002de0:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	2100      	movs	r1, #0
 8002de8:	2001      	movs	r0, #1
 8002dea:	f004 fc75 	bl	80076d8 <osThreadFlagsWait>
    MBMUXIF_TaskSystemNotifRcv();  /*what you want to do*/
 8002dee:	f7ff ffef 	bl	8002dd0 <MBMUXIF_TaskSystemNotifRcv>
  for (;;)
 8002df2:	e7f6      	b.n	8002de2 <Thd_SysNotifRcvProcess+0x2>

08002df4 <MBMUXIF_IsrSystemNotifRcvCb>:
{
 8002df4:	b508      	push	{r3, lr}
  SystemComObj = (MBMUX_ComParam_t *) ComObj;
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <MBMUXIF_IsrSystemNotifRcvCb+0x14>)
 8002df8:	6018      	str	r0, [r3, #0]
  osThreadFlagsSet(Thd_SysNotifRcvProcessId, 1);
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <MBMUXIF_IsrSystemNotifRcvCb+0x18>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	f004 fc22 	bl	8007648 <osThreadFlagsSet>
}
 8002e04:	bd08      	pop	{r3, pc}
 8002e06:	bf00      	nop
 8002e08:	200004e8 	.word	0x200004e8
 8002e0c:	200004ec 	.word	0x200004ec

08002e10 <MBMUXIF_IsrSystemRespRcvCb>:
{
 8002e10:	b508      	push	{r3, lr}
  MbSystemRespRcvFlag = 1;
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <MBMUXIF_IsrSystemRespRcvCb+0x1c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
  if (AllowSequencerForSysCmd) /* To avoid using Sequencer during Init sequence */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <MBMUXIF_IsrSystemRespRcvCb+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b903      	cbnz	r3, 8002e20 <MBMUXIF_IsrSystemRespRcvCb+0x10>
}
 8002e1e:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(Sem_MbSystemRespRcv);
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <MBMUXIF_IsrSystemRespRcvCb+0x24>)
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	f004 fd6a 	bl	80078fc <osSemaphoreRelease>
}
 8002e28:	e7f9      	b.n	8002e1e <MBMUXIF_IsrSystemRespRcvCb+0xe>
 8002e2a:	bf00      	nop
 8002e2c:	20000489 	.word	0x20000489
 8002e30:	20000488 	.word	0x20000488
 8002e34:	200004e4 	.word	0x200004e4

08002e38 <MBMUXIF_SetCpusSynchroFlag>:
  pMb_RefTable->SynchronizeCpusAtBoot = flag;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <MBMUXIF_SetCpusSynchroFlag+0xc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8a3 0136 	strh.w	r0, [r3, #310]	; 0x136
}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000074 	.word	0x20000074

08002e48 <MBMUXIF_SystemInit>:
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4c:	2248      	movs	r2, #72	; 0x48
 8002e4e:	2100      	movs	r1, #0
 8002e50:	a802      	add	r0, sp, #8
 8002e52:	f007 fd89 	bl	800a968 <memset>
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <MBMUXIF_SystemInit+0x148>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
  MBSYS_RefTable.ChipRevId = LL_DBGMCU_GetRevisionID();
 8002e5c:	4a4d      	ldr	r2, [pc, #308]	; (8002f94 <MBMUXIF_SystemInit+0x14c>)
 8002e5e:	f8a2 3138 	strh.w	r3, [r2, #312]	; 0x138
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 8002e62:	4c4d      	ldr	r4, [pc, #308]	; (8002f98 <MBMUXIF_SystemInit+0x150>)
 8002e64:	4620      	mov	r0, r4
 8002e66:	f001 fd93 	bl	8004990 <HAL_FLASHEx_OBGetConfig>
  if (OptionsBytesStruct.IPCCdataBufAddr != (uint32_t) pMb_RefTable)
 8002e6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <MBMUXIF_SystemInit+0x154>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d048      	beq.n	8002f06 <MBMUXIF_SystemInit+0xbe>
    APP_PPRINTF("There is a difference between the MAPPING_TABLE placement in memory: 0x%X \r\n",
 8002e74:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <MBMUXIF_SystemInit+0x154>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <MBMUXIF_SystemInit+0x158>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4610      	mov	r0, r2
 8002e82:	f007 f8dd 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1f4      	bne.n	8002e74 <MBMUXIF_SystemInit+0x2c>
    APP_PPRINTF("and the address calculated according to the IPCCDBA option byte: 0x%X \r\n",
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <MBMUXIF_SystemInit+0x150>)
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4b44      	ldr	r3, [pc, #272]	; (8002fa4 <MBMUXIF_SystemInit+0x15c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	4611      	mov	r1, r2
 8002e96:	4610      	mov	r0, r2
 8002e98:	f007 f8d2 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d1f4      	bne.n	8002e8a <MBMUXIF_SystemInit+0x42>
    APP_PPRINTF("IPCCDBA is automatically updated\n\rSystem restarting...\r\n\r\n");
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <MBMUXIF_SystemInit+0x160>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f007 f8ca 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d1f7      	bne.n	8002ea0 <MBMUXIF_SystemInit+0x58>
    APP_PPRINTF("Please check the CM4\\MbMux\\mbmuxif_sys.c for more info \r\n\r\n");
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <MBMUXIF_SystemInit+0x164>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f007 f8c2 	bl	800a040 <UTIL_ADV_TRACE_COND_FSend>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d1f7      	bne.n	8002eb0 <MBMUXIF_SystemInit+0x68>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8002ec0:	f007 f858 	bl	8009f74 <UTIL_ADV_TRACE_IsBufferEmpty>
 8002ec4:	2801      	cmp	r0, #1
 8002ec6:	d1fb      	bne.n	8002ec0 <MBMUXIF_SystemInit+0x78>
    if (MBSYS_RefTable.ChipRevId == 0x1001)
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <MBMUXIF_SystemInit+0x14c>)
 8002eca:	f8b3 2138 	ldrh.w	r2, [r3, #312]	; 0x138
 8002ece:	f241 0301 	movw	r3, #4097	; 0x1001
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d035      	beq.n	8002f42 <MBMUXIF_SystemInit+0xfa>
    HAL_FLASH_Unlock();
 8002ed6:	f001 f9f3 	bl	80042c0 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002eda:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <MBMUXIF_SystemInit+0x168>)
 8002edc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ee0:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 8002ee2:	f001 fa13 	bl	800430c <HAL_FLASH_OB_Unlock>
    OptionsBytesStruct.OptionType = OPTIONBYTE_IPCC_BUF_ADDR;
 8002ee6:	482c      	ldr	r0, [pc, #176]	; (8002f98 <MBMUXIF_SystemInit+0x150>)
 8002ee8:	2310      	movs	r3, #16
 8002eea:	6003      	str	r3, [r0, #0]
    OptionsBytesStruct.IPCCdataBufAddr = (uint32_t) pMb_RefTable;
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <MBMUXIF_SystemInit+0x154>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6543      	str	r3, [r0, #84]	; 0x54
    if (HAL_FLASHEx_OBProgram(&OptionsBytesStruct) != HAL_OK)
 8002ef2:	f001 fce3 	bl	80048bc <HAL_FLASHEx_OBProgram>
 8002ef6:	bb88      	cbnz	r0, 8002f5c <MBMUXIF_SystemInit+0x114>
    if (HAL_FLASH_OB_Launch() != HAL_OK)
 8002ef8:	f001 fa32 	bl	8004360 <HAL_FLASH_OB_Launch>
 8002efc:	bb88      	cbnz	r0, 8002f62 <MBMUXIF_SystemInit+0x11a>
    (void) HAL_FLASH_OB_Lock();
 8002efe:	f001 fa1f 	bl	8004340 <HAL_FLASH_OB_Lock>
    (void) HAL_FLASH_Lock();
 8002f02:	f001 f9f5 	bl	80042f0 <HAL_FLASH_Lock>
  Sem_MbSystemRespRcv = osSemaphoreNew(1, 0, NULL);   /*< Create the semaphore and make it busy at initialization */
 8002f06:	2200      	movs	r2, #0
 8002f08:	4611      	mov	r1, r2
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f004 fc4a 	bl	80077a4 <osSemaphoreNew>
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <MBMUXIF_SystemInit+0x16c>)
 8002f12:	6018      	str	r0, [r3, #0]
    MBMUX_Init(pMb_RefTable);
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <MBMUXIF_SystemInit+0x154>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	f7ff fde8 	bl	8002aec <MBMUX_Init>
    ret = MBMUX_RegisterFeature(FEAT_INFO_SYSTEM_ID, MBMUX_CMD_RESP,
 8002f1c:	231c      	movs	r3, #28
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <MBMUXIF_SystemInit+0x170>)
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <MBMUXIF_SystemInit+0x174>)
 8002f24:	2100      	movs	r1, #0
 8002f26:	4608      	mov	r0, r1
 8002f28:	f7ff fe24 	bl	8002b74 <MBMUX_RegisterFeature>
  if (ret >= 0)
 8002f2c:	1e04      	subs	r4, r0, #0
 8002f2e:	da1b      	bge.n	8002f68 <MBMUXIF_SystemInit+0x120>
  if (ret >= 0)
 8002f30:	2c00      	cmp	r4, #0
 8002f32:	da23      	bge.n	8002f7c <MBMUXIF_SystemInit+0x134>
  MBMUXIF_SetCpusSynchroFlag(CPUS_BOOT_SYNC_PREVENT_CPU2_TO_START);
 8002f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f38:	f7ff ff7e 	bl	8002e38 <MBMUXIF_SetCpusSynchroFlag>
}
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	b014      	add	sp, #80	; 0x50
 8002f40:	bd10      	pop	{r4, pc}
      HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 8002f42:	a802      	add	r0, sp, #8
 8002f44:	f002 fe68 	bl	8005c18 <HAL_RCC_GetOscConfig>
      RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	930c      	str	r3, [sp, #48]	; 0x30
      if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4c:	a802      	add	r0, sp, #8
 8002f4e:	f002 f9dd 	bl	800530c <HAL_RCC_OscConfig>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d0bf      	beq.n	8002ed6 <MBMUXIF_SystemInit+0x8e>
        Error_Handler();
 8002f56:	f7fe f9f1 	bl	800133c <Error_Handler>
 8002f5a:	e7bc      	b.n	8002ed6 <MBMUXIF_SystemInit+0x8e>
      Error_Handler();
 8002f5c:	f7fe f9ee 	bl	800133c <Error_Handler>
 8002f60:	e7ca      	b.n	8002ef8 <MBMUXIF_SystemInit+0xb0>
      Error_Handler();
 8002f62:	f7fe f9eb 	bl	800133c <Error_Handler>
 8002f66:	e7ca      	b.n	8002efe <MBMUXIF_SystemInit+0xb6>
    ret = MBMUX_RegisterFeature(FEAT_INFO_SYSTEM_ID, MBMUX_NOTIF_ACK,
 8002f68:	2314      	movs	r3, #20
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MBMUXIF_SystemInit+0x178>)
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <MBMUXIF_SystemInit+0x17c>)
 8002f70:	2101      	movs	r1, #1
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7ff fdfe 	bl	8002b74 <MBMUX_RegisterFeature>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	e7d9      	b.n	8002f30 <MBMUXIF_SystemInit+0xe8>
    Thd_SysNotifRcvProcessId = osThreadNew(Thd_SysNotifRcvProcess, NULL, &Thd_SysNotifRcvProcess_attr);
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <MBMUXIF_SystemInit+0x180>)
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4812      	ldr	r0, [pc, #72]	; (8002fcc <MBMUXIF_SystemInit+0x184>)
 8002f82:	f004 faf5 	bl	8007570 <osThreadNew>
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <MBMUXIF_SystemInit+0x188>)
 8002f88:	6018      	str	r0, [r3, #0]
    ret = 0;
 8002f8a:	2400      	movs	r4, #0
 8002f8c:	e7d2      	b.n	8002f34 <MBMUXIF_SystemInit+0xec>
 8002f8e:	bf00      	nop
 8002f90:	e0042000 	.word	0xe0042000
 8002f94:	20008000 	.word	0x20008000
 8002f98:	2000048c 	.word	0x2000048c
 8002f9c:	20000074 	.word	0x20000074
 8002fa0:	0800b138 	.word	0x0800b138
 8002fa4:	0800b188 	.word	0x0800b188
 8002fa8:	0800b1d4 	.word	0x0800b1d4
 8002fac:	0800b210 	.word	0x0800b210
 8002fb0:	58004000 	.word	0x58004000
 8002fb4:	200004e4 	.word	0x200004e4
 8002fb8:	20008294 	.word	0x20008294
 8002fbc:	08002e11 	.word	0x08002e11
 8002fc0:	200082b0 	.word	0x200082b0
 8002fc4:	08002df5 	.word	0x08002df5
 8002fc8:	0800b25c 	.word	0x0800b25c
 8002fcc:	08002de1 	.word	0x08002de1
 8002fd0:	200004ec 	.word	0x200004ec

08002fd4 <MBMUXIF_WaitCm0MbmuxIsInitialized>:
  while (pMb_RefTable->SynchronizeCpusAtBoot != CPUS_BOOT_SYNC_CPU2_INIT_COMPLETED)
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <MBMUXIF_WaitCm0MbmuxIsInitialized+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3136 	ldrh.w	r3, [r3, #310]	; 0x136
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d1f6      	bne.n	8002fd4 <MBMUXIF_WaitCm0MbmuxIsInitialized>
}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000074 	.word	0x20000074

08002fec <MBMUXIF_GetSystemFeatureCmdComPtr>:
{
 8002fec:	b510      	push	{r4, lr}
  MBMUX_ComParam_t *com_param_ptr = MBMUX_GetFeatureComPtr(SystemPrioFeat, MBMUX_CMD_RESP);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f7ff fe14 	bl	8002c1c <MBMUX_GetFeatureComPtr>
  if (com_param_ptr == NULL)
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	b108      	cbz	r0, 8002ffc <MBMUXIF_GetSystemFeatureCmdComPtr+0x10>
}
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	bd10      	pop	{r4, pc}
    Error_Handler(); /* feature isn't registered */
 8002ffc:	f7fe f99e 	bl	800133c <Error_Handler>
  return com_param_ptr;
 8003000:	e7fa      	b.n	8002ff8 <MBMUXIF_GetSystemFeatureCmdComPtr+0xc>
	...

08003004 <MBMUXIF_SystemSendCmd>:
  if (SystemPrioFeat == FEAT_INFO_SYSTEM_ID)
 8003004:	b100      	cbz	r0, 8003008 <MBMUXIF_SystemSendCmd+0x4>
 8003006:	4770      	bx	lr
{
 8003008:	b508      	push	{r3, lr}
    MbSystemRespRcvFlag = 0;  /* To avoid using Sequencer during Init sequence for SysCmd  */
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <MBMUXIF_SystemSendCmd+0x34>)
 800300c:	7018      	strb	r0, [r3, #0]
    if (MBMUX_CommandSnd(FEAT_INFO_SYSTEM_ID) == 0)
 800300e:	f7ff fe1f 	bl	8002c50 <MBMUX_CommandSnd>
 8003012:	b970      	cbnz	r0, 8003032 <MBMUXIF_SystemSendCmd+0x2e>
      if (AllowSequencerForSysCmd)
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <MBMUXIF_SystemSendCmd+0x38>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b923      	cbnz	r3, 8003024 <MBMUXIF_SystemSendCmd+0x20>
        while (!MbSystemRespRcvFlag) {}
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <MBMUXIF_SystemSendCmd+0x34>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0fb      	beq.n	800301a <MBMUXIF_SystemSendCmd+0x16>
}
 8003022:	bd08      	pop	{r3, pc}
        osSemaphoreAcquire(Sem_MbSystemRespRcv, osWaitForever);
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <MBMUXIF_SystemSendCmd+0x3c>)
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	f004 fc22 	bl	8007874 <osSemaphoreAcquire>
 8003030:	e7f7      	b.n	8003022 <MBMUXIF_SystemSendCmd+0x1e>
      Error_Handler();
 8003032:	f7fe f983 	bl	800133c <Error_Handler>
}
 8003036:	e7f4      	b.n	8003022 <MBMUXIF_SystemSendCmd+0x1e>
 8003038:	20000489 	.word	0x20000489
 800303c:	20000488 	.word	0x20000488
 8003040:	200004e4 	.word	0x200004e4

08003044 <MBMUXIF_SystemSendAck>:
{
 8003044:	b508      	push	{r3, lr}
  if (MBMUX_AcknowledgeSnd(SystemPrioFeat) != 0)
 8003046:	f7ff fe1b 	bl	8002c80 <MBMUX_AcknowledgeSnd>
 800304a:	b900      	cbnz	r0, 800304e <MBMUXIF_SystemSendAck+0xa>
}
 800304c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800304e:	f7fe f975 	bl	800133c <Error_Handler>
}
 8003052:	e7fb      	b.n	800304c <MBMUXIF_SystemSendAck+0x8>

08003054 <MBMUXIF_IsrSystemPrioANotifRcvCb>:
{
 8003054:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_Handler();
 8003056:	f007 faaf 	bl	800a5b8 <UTIL_TIMER_IRQ_Handler>
  MBMUXIF_SystemSendAck(FEAT_INFO_SYSTEM_NOTIF_PRIO_A_ID);
 800305a:	2002      	movs	r0, #2
 800305c:	f7ff fff2 	bl	8003044 <MBMUXIF_SystemSendAck>
}
 8003060:	bd08      	pop	{r3, pc}

08003062 <MBMUXIF_SystemSendCm0plusInfoListReq>:
{
 8003062:	b510      	push	{r4, lr}
  com_obj = MBMUXIF_GetSystemFeatureCmdComPtr(FEAT_INFO_SYSTEM_ID);
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff ffc1 	bl	8002fec <MBMUXIF_GetSystemFeatureCmdComPtr>
  if (com_obj != NULL)
 800306a:	b138      	cbz	r0, 800307c <MBMUXIF_SystemSendCm0plusInfoListReq+0x1a>
 800306c:	4604      	mov	r4, r0
    com_obj->MsgId = SYS_GET_INFO_LIST_MSG_ID;
 800306e:	2000      	movs	r0, #0
 8003070:	6020      	str	r0, [r4, #0]
    com_obj->ParamCnt = 0;
 8003072:	81e0      	strh	r0, [r4, #14]
    MBMUXIF_SystemSendCmd(FEAT_INFO_SYSTEM_ID);
 8003074:	f7ff ffc6 	bl	8003004 <MBMUXIF_SystemSendCmd>
    ret = com_obj->ReturnVal;
 8003078:	6960      	ldr	r0, [r4, #20]
}
 800307a:	bd10      	pop	{r4, pc}
  uint32_t ret = 0;
 800307c:	2000      	movs	r0, #0
 800307e:	e7fc      	b.n	800307a <MBMUXIF_SystemSendCm0plusInfoListReq+0x18>

08003080 <MBMUXIF_SystemGetFeatCapabInfoPtr>:
{
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4604      	mov	r4, r0
  p_cm0plus_supported_features_list = MBMUXIF_SystemSendCm0plusInfoListReq();
 8003084:	f7ff ffed 	bl	8003062 <MBMUXIF_SystemSendCm0plusInfoListReq>
  if (p_cm0plus_supported_features_list != NULL)
 8003088:	4684      	mov	ip, r0
 800308a:	b1b8      	cbz	r0, 80030bc <MBMUXIF_SystemGetFeatCapabInfoPtr+0x3c>
    cm0plus_nr_of_supported_features = p_cm0plus_supported_features_list->Feat_Info_Cnt;
 800308c:	7800      	ldrb	r0, [r0, #0]
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 800308e:	2300      	movs	r3, #0
  FEAT_INFO_Param_t  *p_feature = NULL;
 8003090:	461d      	mov	r5, r3
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 8003092:	4283      	cmp	r3, r0
 8003094:	d20a      	bcs.n	80030ac <MBMUXIF_SystemGetFeatCapabInfoPtr+0x2c>
      p_feature = i + p_cm0plus_supported_features_list->Feat_Info_TableAddress;
 8003096:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800309a:	011a      	lsls	r2, r3, #4
 800309c:	eb01 1503 	add.w	r5, r1, r3, lsl #4
      if (p_feature->Feat_Info_Feature_Id == e_featID)
 80030a0:	5c8a      	ldrb	r2, [r1, r2]
 80030a2:	42a2      	cmp	r2, r4
 80030a4:	d008      	beq.n	80030b8 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x38>
    for (i = 0; i < cm0plus_nr_of_supported_features;  i++)
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e7f2      	b.n	8003092 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x12>
  uint8_t found = 0;
 80030ac:	2300      	movs	r3, #0
  if (!found)
 80030ae:	b90b      	cbnz	r3, 80030b4 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x34>
    Error_Handler();
 80030b0:	f7fe f944 	bl	800133c <Error_Handler>
}
 80030b4:	4628      	mov	r0, r5
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
        found = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e7f8      	b.n	80030ae <MBMUXIF_SystemGetFeatCapabInfoPtr+0x2e>
  FEAT_INFO_Param_t  *p_feature = NULL;
 80030bc:	4605      	mov	r5, r0
 80030be:	e7f7      	b.n	80030b0 <MBMUXIF_SystemGetFeatCapabInfoPtr+0x30>

080030c0 <MBMUXIF_SystemSendCm0plusRegistrationCmd>:
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4604      	mov	r4, r0
  com_obj = MBMUXIF_GetSystemFeatureCmdComPtr(FEAT_INFO_SYSTEM_ID);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7ff ff91 	bl	8002fec <MBMUXIF_GetSystemFeatureCmdComPtr>
  if (com_obj != NULL)
 80030ca:	b158      	cbz	r0, 80030e4 <MBMUXIF_SystemSendCm0plusRegistrationCmd+0x24>
 80030cc:	4605      	mov	r5, r0
    com_obj->MsgId = SYS_REGISTER_FEATURE_MSG_ID;
 80030ce:	2301      	movs	r3, #1
 80030d0:	6003      	str	r3, [r0, #0]
    com_buffer = com_obj->ParamBuf;
 80030d2:	6902      	ldr	r2, [r0, #16]
    com_buffer[i++] = (uint32_t) e_featID;
 80030d4:	6014      	str	r4, [r2, #0]
    com_obj->ParamCnt = i;
 80030d6:	81c3      	strh	r3, [r0, #14]
    MBMUXIF_SystemSendCmd(FEAT_INFO_SYSTEM_ID);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff ff93 	bl	8003004 <MBMUXIF_SystemSendCmd>
    ret = com_obj->ReturnVal;
 80030de:	6968      	ldr	r0, [r5, #20]
}
 80030e0:	b240      	sxtb	r0, r0
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 80030e4:	2000      	movs	r0, #0
 80030e6:	e7fb      	b.n	80030e0 <MBMUXIF_SystemSendCm0plusRegistrationCmd+0x20>

080030e8 <MBMUXIF_SystemPrio_Add>:
{
 80030e8:	b510      	push	{r4, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	4604      	mov	r4, r0
  switch (SystemPrioFeat)
 80030ee:	1e43      	subs	r3, r0, #1
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d80c      	bhi.n	800310e <MBMUXIF_SystemPrio_Add+0x26>
 80030f4:	e8df f003 	tbb	[pc, r3]
 80030f8:	221a1202 	.word	0x221a1202
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_CMD_RESP,
 80030fc:	2304      	movs	r3, #4
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <MBMUXIF_SystemPrio_Add+0x6c>)
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <MBMUXIF_SystemPrio_Add+0x70>)
 8003104:	2100      	movs	r1, #0
 8003106:	f7ff fd35 	bl	8002b74 <MBMUX_RegisterFeature>
  if (ret >= 0)
 800310a:	2800      	cmp	r0, #0
 800310c:	db04      	blt.n	8003118 <MBMUXIF_SystemPrio_Add+0x30>
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(SystemPrioFeat);
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff ffd6 	bl	80030c0 <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 8003114:	2800      	cmp	r0, #0
 8003116:	db19      	blt.n	800314c <MBMUXIF_SystemPrio_Add+0x64>
}
 8003118:	b002      	add	sp, #8
 800311a:	bd10      	pop	{r4, pc}
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_NOTIF_ACK,
 800311c:	2304      	movs	r3, #4
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <MBMUXIF_SystemPrio_Add+0x74>)
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <MBMUXIF_SystemPrio_Add+0x78>)
 8003124:	2101      	movs	r1, #1
 8003126:	f7ff fd25 	bl	8002b74 <MBMUX_RegisterFeature>
      break;
 800312a:	e7ee      	b.n	800310a <MBMUXIF_SystemPrio_Add+0x22>
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_CMD_RESP,
 800312c:	2304      	movs	r3, #4
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <MBMUXIF_SystemPrio_Add+0x7c>)
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <MBMUXIF_SystemPrio_Add+0x80>)
 8003134:	2100      	movs	r1, #0
 8003136:	f7ff fd1d 	bl	8002b74 <MBMUX_RegisterFeature>
      break;
 800313a:	e7e6      	b.n	800310a <MBMUXIF_SystemPrio_Add+0x22>
      ret = MBMUX_RegisterFeature(SystemPrioFeat, MBMUX_NOTIF_ACK,
 800313c:	2304      	movs	r3, #4
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <MBMUXIF_SystemPrio_Add+0x84>)
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <MBMUXIF_SystemPrio_Add+0x88>)
 8003144:	2101      	movs	r1, #1
 8003146:	f7ff fd15 	bl	8002b74 <MBMUX_RegisterFeature>
      break;
 800314a:	e7de      	b.n	800310a <MBMUXIF_SystemPrio_Add+0x22>
      ret = -3;
 800314c:	f06f 0002 	mvn.w	r0, #2
 8003150:	e7e2      	b.n	8003118 <MBMUXIF_SystemPrio_Add+0x30>
 8003152:	bf00      	nop
 8003154:	200082c4 	.word	0x200082c4
 8003158:	08002dc9 	.word	0x08002dc9
 800315c:	200082c8 	.word	0x200082c8
 8003160:	08003055 	.word	0x08003055
 8003164:	200082cc 	.word	0x200082cc
 8003168:	08002dcb 	.word	0x08002dcb
 800316c:	200082d0 	.word	0x200082d0
 8003170:	08002dcd 	.word	0x08002dcd

08003174 <MBMUXIF_TraceInit>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int8_t MBMUXIF_TraceInit(void)
{
 8003174:	b500      	push	{lr}
 8003176:	b083      	sub	sp, #12
  int8_t ret;
  /* USER CODE BEGIN MBMUXIF_TraceInit_1 */

  /* USER CODE END MBMUXIF_TraceInit_1 */

  ret = MBMUX_RegisterFeature(FEAT_INFO_TRACE_ID, MBMUX_NOTIF_ACK,
 8003178:	232c      	movs	r3, #44	; 0x2c
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MBMUXIF_TraceInit+0x30>)
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <MBMUXIF_TraceInit+0x34>)
 8003180:	2101      	movs	r1, #1
 8003182:	2006      	movs	r0, #6
 8003184:	f7ff fcf6 	bl	8002b74 <MBMUX_RegisterFeature>
                              MBMUXIF_IsrTraceNotifRcvCb,
                              aTraceNotifAckBuff, sizeof(aTraceNotifAckBuff));
  if (ret >= 0)
 8003188:	2800      	cmp	r0, #0
 800318a:	da02      	bge.n	8003192 <MBMUXIF_TraceInit+0x1e>

  /* USER CODE BEGIN MBMUXIF_TraceInit_Last */

  /* USER CODE END MBMUXIF_TraceInit_Last */
  return ret;
}
 800318c:	b003      	add	sp, #12
 800318e:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = MBMUXIF_SystemSendCm0plusRegistrationCmd(FEAT_INFO_TRACE_ID);
 8003192:	2006      	movs	r0, #6
 8003194:	f7ff ff94 	bl	80030c0 <MBMUXIF_SystemSendCm0plusRegistrationCmd>
    if (ret < 0)
 8003198:	2800      	cmp	r0, #0
 800319a:	daf7      	bge.n	800318c <MBMUXIF_TraceInit+0x18>
      ret = -3;
 800319c:	f06f 0002 	mvn.w	r0, #2
 80031a0:	e7f4      	b.n	800318c <MBMUXIF_TraceInit+0x18>
 80031a2:	bf00      	nop
 80031a4:	200082d4 	.word	0x200082d4
 80031a8:	080031bf 	.word	0x080031bf

080031ac <MBMUXIF_TraceSendAck>:

void MBMUXIF_TraceSendAck(void)
{
 80031ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MBMUXIF_TraceSendAck_1 */

  /* USER CODE END MBMUXIF_TraceSendAck_1 */
  if (MBMUX_AcknowledgeSnd(FEAT_INFO_TRACE_ID) != 0)
 80031ae:	2006      	movs	r0, #6
 80031b0:	f7ff fd66 	bl	8002c80 <MBMUX_AcknowledgeSnd>
 80031b4:	b900      	cbnz	r0, 80031b8 <MBMUXIF_TraceSendAck+0xc>
    Error_Handler();
  }
  /* USER CODE BEGIN MBMUXIF_TraceSendAck_Last */

  /* USER CODE END MBMUXIF_TraceSendAck_Last */
}
 80031b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80031b8:	f7fe f8c0 	bl	800133c <Error_Handler>
}
 80031bc:	e7fb      	b.n	80031b6 <MBMUXIF_TraceSendAck+0xa>

080031be <MBMUXIF_IsrTraceNotifRcvCb>:

/* USER CODE END EFD */

/* Private functions ---------------------------------------------------------*/
static void MBMUXIF_IsrTraceNotifRcvCb(void *ComObj)
{
 80031be:	b510      	push	{r4, lr}
  uint16_t bufsize;
  UTIL_ADV_TRACE_Status_t ret;

  TraceComObj = (MBMUX_ComParam_t *) ComObj;

  notif_ack_id = TraceComObj->MsgId;
 80031c0:	6803      	ldr	r3, [r0, #0]

  switch (notif_ack_id)
 80031c2:	b113      	cbz	r3, 80031ca <MBMUXIF_IsrTraceNotifRcvCb+0xc>
    default:
      break;
  }

  /* Send ack */
  MBMUXIF_TraceSendAck();
 80031c4:	f7ff fff2 	bl	80031ac <MBMUXIF_TraceSendAck>
  /* USER CODE BEGIN MBMUXIF_IsrTraceNotifRcvCb_Last */

  /* USER CODE END MBMUXIF_IsrTraceNotifRcvCb_Last */
}
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	4604      	mov	r4, r0
      buffer = (uint8_t *) TraceComObj->ParamBuf[0];
 80031cc:	6903      	ldr	r3, [r0, #16]
      ret = UTIL_ADV_TRACE_Send(buffer, bufsize);
 80031ce:	8899      	ldrh	r1, [r3, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	f006 ff9b 	bl	800a10c <UTIL_ADV_TRACE_Send>
      TraceComObj->ParamCnt = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	81e3      	strh	r3, [r4, #14]
      TraceComObj->ReturnVal = (uint32_t)ret;
 80031da:	6160      	str	r0, [r4, #20]
      break;
 80031dc:	e7f2      	b.n	80031c4 <MBMUXIF_IsrTraceNotifRcvCb+0x6>

080031de <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80031de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e2:	3304      	adds	r3, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e6:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80031e8:	d3f9      	bcc.n	80031de <CopyDataInit>
  bx lr
 80031ea:	4770      	bx	lr

080031ec <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80031ec:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80031ee:	3004      	adds	r0, #4

080031f0 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80031f0:	4288      	cmp	r0, r1
  bcc FillZerobss
 80031f2:	d3fb      	bcc.n	80031ec <FillZerobss>
  bx lr
 80031f4:	4770      	bx	lr
	...

080031f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031f8:	480e      	ldr	r0, [pc, #56]	; (8003234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031fa:	4685      	mov	sp, r0

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80031fc:	480e      	ldr	r0, [pc, #56]	; (8003238 <LoopForever+0x6>)
 80031fe:	490f      	ldr	r1, [pc, #60]	; (800323c <LoopForever+0xa>)
 8003200:	2300      	movs	r3, #0
 8003202:	f7ff fff5 	bl	80031f0 <LoopFillZerobss>

/* Zero fill the MB_MEM1 segments. */
  INIT_BSS _sMB_MEM1, _eMB_MEM1
 8003206:	480e      	ldr	r0, [pc, #56]	; (8003240 <LoopForever+0xe>)
 8003208:	490e      	ldr	r1, [pc, #56]	; (8003244 <LoopForever+0x12>)
 800320a:	2300      	movs	r3, #0
 800320c:	f7ff fff0 	bl	80031f0 <LoopFillZerobss>

/* Zero fill the MAPPING_TABLE segments. */
  INIT_BSS _sMAPPING_TABLE, _eMAPPING_TABLE
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <LoopForever+0x16>)
 8003212:	490e      	ldr	r1, [pc, #56]	; (800324c <LoopForever+0x1a>)
 8003214:	2300      	movs	r3, #0
 8003216:	f7ff ffeb 	bl	80031f0 <LoopFillZerobss>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <LoopForever+0x1e>)
 800321c:	490d      	ldr	r1, [pc, #52]	; (8003254 <LoopForever+0x22>)
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <LoopForever+0x26>)
 8003220:	2300      	movs	r3, #0
 8003222:	f7ff ffdf 	bl	80031e4 <LoopCopyDataInit>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003226:	f000 f81a 	bl	800325e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800322a:	f007 fb6b 	bl	800a904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800322e:	f7fe f8cf 	bl	80013d0 <main>

08003232 <LoopForever>:

LoopForever:
    b LoopForever
 8003232:	e7fe      	b.n	8003232 <LoopForever>
  ldr   r0, =_estack
 8003234:	20008000 	.word	0x20008000
  INIT_BSS _sbss, _ebss
 8003238:	20000088 	.word	0x20000088
 800323c:	20004080 	.word	0x20004080
  INIT_BSS _sMB_MEM1, _eMB_MEM1
 8003240:	20008140 	.word	0x20008140
 8003244:	20008300 	.word	0x20008300
  INIT_BSS _sMAPPING_TABLE, _eMAPPING_TABLE
 8003248:	20008000 	.word	0x20008000
 800324c:	20008140 	.word	0x20008140
  INIT_DATA _sdata, _edata, _sidata
 8003250:	20000000 	.word	0x20000000
 8003254:	20000088 	.word	0x20000088
 8003258:	0800b3d0 	.word	0x0800b3d0

0800325c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC_IRQHandler>

0800325e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800325e:	4770      	bx	lr

08003260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003260:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003262:	2003      	movs	r0, #3
 8003264:	f000 fd12 	bl	8003c8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003268:	f002 f840 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_Init+0x28>)
 800326e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003270:	200f      	movs	r0, #15
 8003272:	f7fe fa2f 	bl	80016d4 <HAL_InitTick>
 8003276:	b110      	cbz	r0, 800327e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003278:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800327a:	4620      	mov	r0, r4
 800327c:	bd10      	pop	{r4, pc}
 800327e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003280:	f7fe f8dc 	bl	800143c <HAL_MspInit>
 8003284:	e7f9      	b.n	800327a <HAL_Init+0x1a>
 8003286:	bf00      	nop
 8003288:	20000078 	.word	0x20000078

0800328c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800328c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003290:	6913      	ldr	r3, [r2, #16]
 8003292:	f023 0302 	bic.w	r3, r3, #2
 8003296:	6113      	str	r3, [r2, #16]
}
 8003298:	4770      	bx	lr

0800329a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800329a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800329e:	6913      	ldr	r3, [r2, #16]
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6113      	str	r3, [r2, #16]
}
 80032a6:	4770      	bx	lr

080032a8 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80032aa:	6853      	ldr	r3, [r2, #4]
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80032b2:	4770      	bx	lr
 80032b4:	e0042000 	.word	0xe0042000

080032b8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80032b8:	4a02      	ldr	r2, [pc, #8]	; (80032c4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80032ba:	6853      	ldr	r3, [r2, #4]
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80032c2:	4770      	bx	lr
 80032c4:	e0042000 	.word	0xe0042000

080032c8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80032ca:	6853      	ldr	r3, [r2, #4]
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 80032d2:	4770      	bx	lr
 80032d4:	e0042000 	.word	0xe0042000

080032d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d8:	b530      	push	{r4, r5, lr}
 80032da:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80032e0:	2800      	cmp	r0, #0
 80032e2:	f000 8106 	beq.w	80034f2 <HAL_ADC_Init+0x21a>
 80032e6:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032ea:	b1bb      	cbz	r3, 800331c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ec:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ee:	6893      	ldr	r3, [r2, #8]
 80032f0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80032f4:	d11f      	bne.n	8003336 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80032f6:	6893      	ldr	r3, [r2, #8]
 80032f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032fc:	f023 0317 	bic.w	r3, r3, #23
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003306:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_ADC_Init+0x220>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_ADC_Init+0x224>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	3301      	adds	r3, #1
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800331a:	e009      	b.n	8003330 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 800331c:	f7fd fbd6 	bl	8000acc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003320:	2300      	movs	r3, #0
 8003322:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003324:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003328:	e7e0      	b.n	80032ec <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800332a:	9b01      	ldr	r3, [sp, #4]
 800332c:	3b01      	subs	r3, #1
 800332e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003330:	9b01      	ldr	r3, [sp, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003336:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003338:	6893      	ldr	r3, [r2, #8]
 800333a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800333e:	f040 809a 	bne.w	8003476 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003344:	f043 0310 	orr.w	r3, r3, #16
 8003348:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003352:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003354:	6893      	ldr	r3, [r2, #8]
 8003356:	f013 0304 	ands.w	r3, r3, #4
 800335a:	d000      	beq.n	800335e <HAL_ADC_Init+0x86>
 800335c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800335e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003360:	f011 0f10 	tst.w	r1, #16
 8003364:	f040 80be 	bne.w	80034e4 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 80bb 	bne.w	80034e4 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003370:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800337a:	6893      	ldr	r3, [r2, #8]
 800337c:	f013 0f01 	tst.w	r3, #1
 8003380:	d14f      	bne.n	8003422 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003382:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003384:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003386:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800338a:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800338c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003390:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003392:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003396:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003398:	b109      	cbz	r1, 800339e <HAL_ADC_Init+0xc6>
 800339a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800339e:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80033a0:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033a2:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033a4:	6921      	ldr	r1, [r4, #16]
 80033a6:	2900      	cmp	r1, #0
 80033a8:	db67      	blt.n	800347a <HAL_ADC_Init+0x1a2>
 80033aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80033ae:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033b0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033b8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80033bc:	2901      	cmp	r1, #1
 80033be:	d05f      	beq.n	8003480 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033c2:	b121      	cbz	r1, 80033ce <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033c4:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80033c8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033ca:	4329      	orrs	r1, r5
 80033cc:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033ce:	68d1      	ldr	r1, [r2, #12]
 80033d0:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80033d4:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80033d8:	430b      	orrs	r3, r1
 80033da:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033dc:	6863      	ldr	r3, [r4, #4]
 80033de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80033e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033e4:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80033e6:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80033ea:	2901      	cmp	r1, #1
 80033ec:	d055      	beq.n	800349a <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80033ee:	6821      	ldr	r1, [r4, #0]
 80033f0:	690d      	ldr	r5, [r1, #16]
 80033f2:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_ADC_Init+0x228>)
 80033f4:	402b      	ands	r3, r5
 80033f6:	4313      	orrs	r3, r2
 80033f8:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003400:	d00f      	beq.n	8003422 <HAL_ADC_Init+0x14a>
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00c      	beq.n	8003422 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340c:	d009      	beq.n	8003422 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800340e:	493d      	ldr	r1, [pc, #244]	; (8003504 <HAL_ADC_Init+0x22c>)
 8003410:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003414:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8003418:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003422:	6821      	ldr	r1, [r4, #0]
 8003424:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8003426:	694a      	ldr	r2, [r1, #20]
 8003428:	f022 0207 	bic.w	r2, r2, #7
 800342c:	4313      	orrs	r3, r2
 800342e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003434:	6953      	ldr	r3, [r2, #20]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800343e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003440:	6923      	ldr	r3, [r4, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d133      	bne.n	80034ae <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800344a:	f063 030f 	orn	r3, r3, #15
 800344e:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003450:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003458:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800345a:	429a      	cmp	r2, r3
 800345c:	d039      	beq.n	80034d2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800345e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003460:	f023 0312 	bic.w	r3, r3, #18
 8003464:	f043 0310 	orr.w	r3, r3, #16
 8003468:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003472:	2001      	movs	r0, #1
 8003474:	e03b      	b.n	80034ee <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003476:	2000      	movs	r0, #0
 8003478:	e76c      	b.n	8003354 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800347a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800347e:	e796      	b.n	80033ae <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003480:	b915      	cbnz	r5, 8003488 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	e79b      	b.n	80033c0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800348a:	f041 0120 	orr.w	r1, r1, #32
 800348e:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003490:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003492:	f041 0101 	orr.w	r1, r1, #1
 8003496:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003498:	e792      	b.n	80033c0 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 800349a:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800349c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 800349e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80034a0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80034a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80034a4:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	e79f      	b.n	80033ee <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d1cd      	bne.n	8003450 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80034b4:	6821      	ldr	r1, [r4, #0]
 80034b6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80034b8:	69e3      	ldr	r3, [r4, #28]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f003 031c 	and.w	r3, r3, #28
 80034c2:	f06f 020f 	mvn.w	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80034cc:	4313      	orrs	r3, r2
 80034ce:	628b      	str	r3, [r1, #40]	; 0x28
 80034d0:	e7be      	b.n	8003450 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80034d2:	2300      	movs	r3, #0
 80034d4:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80034d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034d8:	f023 0303 	bic.w	r3, r3, #3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80034e2:	e004      	b.n	80034ee <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034e6:	f043 0310 	orr.w	r3, r3, #16
 80034ea:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034ec:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80034ee:	b003      	add	sp, #12
 80034f0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80034f2:	2001      	movs	r0, #1
 80034f4:	e7fb      	b.n	80034ee <HAL_ADC_Init+0x216>
 80034f6:	bf00      	nop
 80034f8:	20000078 	.word	0x20000078
 80034fc:	053e2d63 	.word	0x053e2d63
 8003500:	1ffffc02 	.word	0x1ffffc02
 8003504:	40012000 	.word	0x40012000

08003508 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800350e:	6946      	ldr	r6, [r0, #20]
 8003510:	2e08      	cmp	r6, #8
 8003512:	d005      	beq.n	8003520 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f013 0f01 	tst.w	r3, #1
 800351c:	d11e      	bne.n	800355c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800351e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003520:	f7fe f8da 	bl	80016d8 <HAL_GetTick>
 8003524:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4232      	tst	r2, r6
 800352c:	d11c      	bne.n	8003568 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003532:	d0f8      	beq.n	8003526 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003534:	f7fe f8d0 	bl	80016d8 <HAL_GetTick>
 8003538:	1bc3      	subs	r3, r0, r7
 800353a:	42ab      	cmp	r3, r5
 800353c:	d801      	bhi.n	8003542 <HAL_ADC_PollForConversion+0x3a>
 800353e:	2d00      	cmp	r5, #0
 8003540:	d1f1      	bne.n	8003526 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4233      	tst	r3, r6
 8003548:	d1ed      	bne.n	8003526 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800354a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003552:	2300      	movs	r3, #0
 8003554:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003558:	2003      	movs	r0, #3
 800355a:	e028      	b.n	80035ae <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e022      	b.n	80035ae <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003568:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8003576:	d115      	bne.n	80035a4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003578:	7ea2      	ldrb	r2, [r4, #26]
 800357a:	b99a      	cbnz	r2, 80035a4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	f012 0f08 	tst.w	r2, #8
 8003582:	d00f      	beq.n	80035a4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	f012 0f04 	tst.w	r2, #4
 800358a:	d111      	bne.n	80035b0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	f022 020c 	bic.w	r2, r2, #12
 8003592:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035a4:	7e20      	ldrb	r0, [r4, #24]
 80035a6:	b960      	cbnz	r0, 80035c2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80035ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035b2:	f043 0320 	orr.w	r3, r3, #32
 80035b6:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	65e3      	str	r3, [r4, #92]	; 0x5c
 80035c0:	e7f0      	b.n	80035a4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80035c2:	2000      	movs	r0, #0
 80035c4:	e7f3      	b.n	80035ae <HAL_ADC_PollForConversion+0xa6>

080035c6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80035ca:	4770      	bx	lr

080035cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80035cc:	b470      	push	{r4, r5, r6}
 80035ce:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035d0:	2200      	movs	r2, #0
 80035d2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035d4:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80035d6:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80035da:	2a01      	cmp	r2, #1
 80035dc:	f000 8105 	beq.w	80037ea <HAL_ADC_ConfigChannel+0x21e>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2201      	movs	r2, #1
 80035e4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e8:	6802      	ldr	r2, [r0, #0]
 80035ea:	6890      	ldr	r0, [r2, #8]
 80035ec:	f010 0f04 	tst.w	r0, #4
 80035f0:	d00a      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035fa:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003602:	b003      	add	sp, #12
 8003604:	bc70      	pop	{r4, r5, r6}
 8003606:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003608:	6848      	ldr	r0, [r1, #4]
 800360a:	2802      	cmp	r0, #2
 800360c:	f000 809e 	beq.w	800374c <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003610:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003614:	d029      	beq.n	800366a <HAL_ADC_ConfigChannel+0x9e>
 8003616:	4d76      	ldr	r5, [pc, #472]	; (80037f0 <HAL_ADC_ConfigChannel+0x224>)
 8003618:	42ac      	cmp	r4, r5
 800361a:	d026      	beq.n	800366a <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800361c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800361e:	f000 001f 	and.w	r0, r0, #31
 8003622:	250f      	movs	r5, #15
 8003624:	4085      	lsls	r5, r0
 8003626:	ea24 0505 	bic.w	r5, r4, r5
 800362a:	680c      	ldr	r4, [r1, #0]
 800362c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003630:	2e00      	cmp	r6, #0
 8003632:	d133      	bne.n	800369c <HAL_ADC_ConfigChannel+0xd0>
 8003634:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003638:	fa04 f000 	lsl.w	r0, r4, r0
 800363c:	4328      	orrs	r0, r5
 800363e:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003640:	684c      	ldr	r4, [r1, #4]
 8003642:	08a0      	lsrs	r0, r4, #2
 8003644:	3001      	adds	r0, #1
 8003646:	69dd      	ldr	r5, [r3, #28]
 8003648:	42a8      	cmp	r0, r5
 800364a:	d814      	bhi.n	8003676 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800364c:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800364e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003650:	f004 041f 	and.w	r4, r4, #31
 8003654:	260f      	movs	r6, #15
 8003656:	40a6      	lsls	r6, r4
 8003658:	ea20 0006 	bic.w	r0, r0, r6
 800365c:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003660:	fa05 f404 	lsl.w	r4, r5, r4
 8003664:	4304      	orrs	r4, r0
 8003666:	6294      	str	r4, [r2, #40]	; 0x28
}
 8003668:	e005      	b.n	8003676 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800366a:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800366c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800366e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003672:	4320      	orrs	r0, r4
 8003674:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003676:	681c      	ldr	r4, [r3, #0]
 8003678:	680d      	ldr	r5, [r1, #0]
 800367a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 800367c:	6960      	ldr	r0, [r4, #20]
 800367e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003682:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003686:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800368a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368e:	4302      	orrs	r2, r0
 8003690:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003692:	680a      	ldr	r2, [r1, #0]
 8003694:	2a00      	cmp	r2, #0
 8003696:	db09      	blt.n	80036ac <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003698:	2000      	movs	r0, #0
 800369a:	e7af      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036a0:	b114      	cbz	r4, 80036a8 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80036a2:	fab4 f484 	clz	r4, r4
 80036a6:	e7c7      	b.n	8003638 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80036a8:	2420      	movs	r4, #32
 80036aa:	e7c5      	b.n	8003638 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036ac:	4951      	ldr	r1, [pc, #324]	; (80037f4 <HAL_ADC_ConfigChannel+0x228>)
 80036ae:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80036b2:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036b6:	4c50      	ldr	r4, [pc, #320]	; (80037f8 <HAL_ADC_ConfigChannel+0x22c>)
 80036b8:	42a2      	cmp	r2, r4
 80036ba:	d007      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036bc:	4c4f      	ldr	r4, [pc, #316]	; (80037fc <HAL_ADC_ConfigChannel+0x230>)
 80036be:	42a2      	cmp	r2, r4
 80036c0:	d026      	beq.n	8003710 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80036c2:	4c4f      	ldr	r4, [pc, #316]	; (8003800 <HAL_ADC_ConfigChannel+0x234>)
 80036c4:	42a2      	cmp	r2, r4
 80036c6:	d032      	beq.n	800372e <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c8:	2000      	movs	r0, #0
 80036ca:	e797      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80036d0:	d1f4      	bne.n	80036bc <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036d6:	4847      	ldr	r0, [pc, #284]	; (80037f4 <HAL_ADC_ConfigChannel+0x228>)
 80036d8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80036dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80036e0:	4311      	orrs	r1, r2
 80036e2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <HAL_ADC_ConfigChannel+0x238>)
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	0992      	lsrs	r2, r2, #6
 80036ec:	4946      	ldr	r1, [pc, #280]	; (8003808 <HAL_ADC_ConfigChannel+0x23c>)
 80036ee:	fba1 1202 	umull	r1, r2, r1, r2
 80036f2:	0992      	lsrs	r2, r2, #6
 80036f4:	3201      	adds	r2, #1
 80036f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80036fe:	e002      	b.n	8003706 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8003700:	9a01      	ldr	r2, [sp, #4]
 8003702:	3a01      	subs	r2, #1
 8003704:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003706:	9a01      	ldr	r2, [sp, #4]
 8003708:	2a00      	cmp	r2, #0
 800370a:	d1f9      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370c:	2000      	movs	r0, #0
 800370e:	e775      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003710:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003714:	d1d5      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003716:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800371a:	4836      	ldr	r0, [pc, #216]	; (80037f4 <HAL_ADC_ConfigChannel+0x228>)
 800371c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003720:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003724:	4311      	orrs	r1, r2
 8003726:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372a:	2000      	movs	r0, #0
}
 800372c:	e766      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800372e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003732:	d158      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003734:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003738:	482e      	ldr	r0, [pc, #184]	; (80037f4 <HAL_ADC_ConfigChannel+0x228>)
 800373a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800373e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003742:	430a      	orrs	r2, r1
 8003744:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003748:	2000      	movs	r0, #0
}
 800374a:	e757      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800374c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003750:	d002      	beq.n	8003758 <HAL_ADC_ConfigChannel+0x18c>
 8003752:	4827      	ldr	r0, [pc, #156]	; (80037f0 <HAL_ADC_ConfigChannel+0x224>)
 8003754:	4284      	cmp	r4, r0
 8003756:	d106      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003758:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800375a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800375c:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003760:	ea20 0004 	bic.w	r0, r0, r4
 8003764:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003766:	680a      	ldr	r2, [r1, #0]
 8003768:	2a00      	cmp	r2, #0
 800376a:	db01      	blt.n	8003770 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376c:	2000      	movs	r0, #0
 800376e:	e745      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003770:	4920      	ldr	r1, [pc, #128]	; (80037f4 <HAL_ADC_ConfigChannel+0x228>)
 8003772:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003776:	4820      	ldr	r0, [pc, #128]	; (80037f8 <HAL_ADC_ConfigChannel+0x22c>)
 8003778:	4282      	cmp	r2, r0
 800377a:	d007      	beq.n	800378c <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800377c:	481f      	ldr	r0, [pc, #124]	; (80037fc <HAL_ADC_ConfigChannel+0x230>)
 800377e:	4282      	cmp	r2, r0
 8003780:	d013      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003782:	481f      	ldr	r0, [pc, #124]	; (8003800 <HAL_ADC_ConfigChannel+0x234>)
 8003784:	4282      	cmp	r2, r0
 8003786:	d01f      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003788:	2000      	movs	r0, #0
 800378a:	e737      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378c:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003790:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003794:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003798:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800379c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80037a0:	4311      	orrs	r1, r2
 80037a2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a6:	2000      	movs	r0, #0
}
 80037a8:	e728      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037aa:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037ae:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80037b2:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80037b6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80037ba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80037be:	430a      	orrs	r2, r1
 80037c0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c4:	2000      	movs	r0, #0
}
 80037c6:	e719      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c8:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037cc:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80037d0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80037d4:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80037d8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80037dc:	430a      	orrs	r2, r1
 80037de:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e2:	2000      	movs	r0, #0
}
 80037e4:	e70a      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e708      	b.n	80035fc <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80037ea:	2002      	movs	r0, #2
 80037ec:	e709      	b.n	8003602 <HAL_ADC_ConfigChannel+0x36>
 80037ee:	bf00      	nop
 80037f0:	80000004 	.word	0x80000004
 80037f4:	40012000 	.word	0x40012000
 80037f8:	b0001000 	.word	0xb0001000
 80037fc:	b8004000 	.word	0xb8004000
 8003800:	b4002000 	.word	0xb4002000
 8003804:	20000078 	.word	0x20000078
 8003808:	053e2d63 	.word	0x053e2d63

0800380c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800380c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800380e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	f012 0f04 	tst.w	r2, #4
 8003816:	d02a      	beq.n	800386e <ADC_ConversionStop+0x62>
 8003818:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	f012 0f02 	tst.w	r2, #2
 8003820:	d107      	bne.n	8003832 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003828:	f022 0217 	bic.w	r2, r2, #23
 800382c:	f042 0210 	orr.w	r2, r2, #16
 8003830:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003832:	f7fd ff51 	bl	80016d8 <HAL_GetTick>
 8003836:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f013 0f04 	tst.w	r3, #4
 8003840:	d013      	beq.n	800386a <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003842:	f7fd ff49 	bl	80016d8 <HAL_GetTick>
 8003846:	1b43      	subs	r3, r0, r5
 8003848:	2b02      	cmp	r3, #2
 800384a:	d9f5      	bls.n	8003838 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f013 0f04 	tst.w	r3, #4
 8003854:	d0f0      	beq.n	8003838 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003858:	f043 0310 	orr.w	r3, r3, #16
 800385c:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800385e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003866:	2001      	movs	r0, #1
 8003868:	e002      	b.n	8003870 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800386a:	2000      	movs	r0, #0
 800386c:	e000      	b.n	8003870 <ADC_ConversionStop+0x64>
 800386e:	2000      	movs	r0, #0
}
 8003870:	bd38      	pop	{r3, r4, r5, pc}
	...

08003874 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003878:	2300      	movs	r3, #0
 800387a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	f012 0f01 	tst.w	r2, #1
 8003884:	d15b      	bne.n	800393e <ADC_Enable+0xca>
 8003886:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	4a2e      	ldr	r2, [pc, #184]	; (8003944 <ADC_Enable+0xd0>)
 800388c:	4211      	tst	r1, r2
 800388e:	d117      	bne.n	80038c0 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003896:	f022 0217 	bic.w	r2, r2, #23
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <ADC_Enable+0xd4>)
 80038a2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80038a6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80038aa:	d019      	beq.n	80038e0 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <ADC_Enable+0xd8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	4a27      	ldr	r2, [pc, #156]	; (8003950 <ADC_Enable+0xdc>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80038bc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80038be:	e00c      	b.n	80038da <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80038c2:	f043 0310 	orr.w	r3, r3, #16
 80038c6:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80038d0:	2001      	movs	r0, #1
 80038d2:	e035      	b.n	8003940 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80038da:	9b01      	ldr	r3, [sp, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80038e0:	7e63      	ldrb	r3, [r4, #25]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e6:	2000      	movs	r0, #0
 80038e8:	e02a      	b.n	8003940 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80038ea:	f7fd fef5 	bl	80016d8 <HAL_GetTick>
 80038ee:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	f012 0f01 	tst.w	r2, #1
 80038f8:	d11f      	bne.n	800393a <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	f012 0f01 	tst.w	r2, #1
 8003900:	d107      	bne.n	8003912 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003908:	f022 0217 	bic.w	r2, r2, #23
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003912:	f7fd fee1 	bl	80016d8 <HAL_GetTick>
 8003916:	1b40      	subs	r0, r0, r5
 8003918:	2802      	cmp	r0, #2
 800391a:	d9e9      	bls.n	80038f0 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f013 0f01 	tst.w	r3, #1
 8003924:	d1e4      	bne.n	80038f0 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003936:	2001      	movs	r0, #1
 8003938:	e002      	b.n	8003940 <ADC_Enable+0xcc>
  return HAL_OK;
 800393a:	2000      	movs	r0, #0
 800393c:	e000      	b.n	8003940 <ADC_Enable+0xcc>
 800393e:	2000      	movs	r0, #0
}
 8003940:	b003      	add	sp, #12
 8003942:	bd30      	pop	{r4, r5, pc}
 8003944:	80000017 	.word	0x80000017
 8003948:	40012000 	.word	0x40012000
 800394c:	20000078 	.word	0x20000078
 8003950:	053e2d63 	.word	0x053e2d63

08003954 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003954:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f013 0f04 	tst.w	r3, #4
 800395c:	d128      	bne.n	80039b0 <HAL_ADC_Start+0x5c>
{
 800395e:	b510      	push	{r4, lr}
 8003960:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003962:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003966:	2b01      	cmp	r3, #1
 8003968:	d024      	beq.n	80039b4 <HAL_ADC_Start+0x60>
 800396a:	2301      	movs	r3, #1
 800396c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003970:	f7ff ff80 	bl	8003874 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003974:	b9c0      	cbnz	r0, 80039a8 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003986:	2300      	movs	r3, #0
 8003988:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	211c      	movs	r1, #28
 800398e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003990:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003994:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003996:	6893      	ldr	r3, [r2, #8]
 8003998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800399c:	f023 0317 	bic.w	r3, r3, #23
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6093      	str	r3, [r2, #8]
}
 80039a6:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80039ae:	e7fa      	b.n	80039a6 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80039b0:	2002      	movs	r0, #2
}
 80039b2:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80039b4:	2002      	movs	r0, #2
 80039b6:	e7f6      	b.n	80039a6 <HAL_ADC_Start+0x52>

080039b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039bc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039be:	6893      	ldr	r3, [r2, #8]
 80039c0:	f013 0302 	ands.w	r3, r3, #2
 80039c4:	d000      	beq.n	80039c8 <ADC_Disable+0x10>
 80039c6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c8:	6891      	ldr	r1, [r2, #8]
 80039ca:	f011 0f01 	tst.w	r1, #1
 80039ce:	d039      	beq.n	8003a44 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d139      	bne.n	8003a48 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039d4:	6893      	ldr	r3, [r2, #8]
 80039d6:	f003 0305 	and.w	r3, r3, #5
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d009      	beq.n	80039f2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039e0:	f043 0310 	orr.w	r3, r3, #16
 80039e4:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80039ee:	2001      	movs	r0, #1
 80039f0:	e029      	b.n	8003a46 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80039f2:	6893      	ldr	r3, [r2, #8]
 80039f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f8:	f023 0317 	bic.w	r3, r3, #23
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	2203      	movs	r2, #3
 8003a06:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a08:	f7fd fe66 	bl	80016d8 <HAL_GetTick>
 8003a0c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f013 0f01 	tst.w	r3, #1
 8003a16:	d013      	beq.n	8003a40 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a18:	f7fd fe5e 	bl	80016d8 <HAL_GetTick>
 8003a1c:	1b40      	subs	r0, r0, r5
 8003a1e:	2802      	cmp	r0, #2
 8003a20:	d9f5      	bls.n	8003a0e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f013 0f01 	tst.w	r3, #1
 8003a2a:	d0f0      	beq.n	8003a0e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a2e:	f043 0310 	orr.w	r3, r3, #16
 8003a32:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	e002      	b.n	8003a46 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a40:	2000      	movs	r0, #0
 8003a42:	e000      	b.n	8003a46 <ADC_Disable+0x8e>
 8003a44:	2000      	movs	r0, #0
}
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e7fc      	b.n	8003a46 <ADC_Disable+0x8e>

08003a4c <HAL_ADC_DeInit>:
{
 8003a4c:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d056      	beq.n	8003b00 <HAL_ADC_DeInit+0xb4>
 8003a52:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003a54:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a5c:	f7ff fed6 	bl	800380c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003a60:	4606      	mov	r6, r0
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d03d      	beq.n	8003ae2 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003a66:	6822      	ldr	r2, [r4, #0]
 8003a68:	6853      	ldr	r3, [r2, #4]
 8003a6a:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003a6e:	f023 0303 	bic.w	r3, r3, #3
 8003a72:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f240 329f 	movw	r2, #927	; 0x39f
 8003a7a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	68d1      	ldr	r1, [r2, #12]
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_ADC_DeInit+0xb8>)
 8003a82:	400b      	ands	r3, r1
 8003a84:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	6913      	ldr	r3, [r2, #16]
 8003a8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a8e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	6953      	ldr	r3, [r2, #20]
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	6a13      	ldr	r3, [r2, #32]
 8003a9e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003aa2:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003aa8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003aac:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ab2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abc:	2500      	movs	r5, #0
 8003abe:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003ac0:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_ADC_DeInit+0xbc>)
 8003ac2:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003ac6:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003aca:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fd f812 	bl	8000af8 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003ad4:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003ad6:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003ad8:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003ada:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003ade:	4630      	mov	r0, r6
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff ff68 	bl	80039b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003ae8:	4606      	mov	r6, r0
 8003aea:	b908      	cbnz	r0, 8003af0 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003aec:	2301      	movs	r3, #1
 8003aee:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003af0:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003af2:	6893      	ldr	r3, [r2, #8]
 8003af4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003af8:	f023 0317 	bic.w	r3, r3, #23
 8003afc:	6093      	str	r3, [r2, #8]
}
 8003afe:	e7b2      	b.n	8003a66 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003b00:	2601      	movs	r6, #1
 8003b02:	e7ec      	b.n	8003ade <HAL_ADC_DeInit+0x92>
 8003b04:	833e0200 	.word	0x833e0200
 8003b08:	40012000 	.word	0x40012000

08003b0c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003b0c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d019      	beq.n	8003b48 <HAL_ADC_Stop+0x3c>
{
 8003b14:	b510      	push	{r4, lr}
 8003b16:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003b1e:	f7ff fe75 	bl	800380c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003b22:	b118      	cbz	r0, 8003b2c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003b24:	2300      	movs	r3, #0
 8003b26:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003b2a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff ff43 	bl	80039b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d1f6      	bne.n	8003b24 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003b36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b46:	e7ed      	b.n	8003b24 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003b48:	2002      	movs	r0, #2
}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b54:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f000 8094 	beq.w	8003c86 <HAL_ADCEx_Calibration_Start+0x13a>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	2301      	movs	r3, #1
 8003b62:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b66:	f7ff ff27 	bl	80039b8 <ADC_Disable>
 8003b6a:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b6c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	f012 0201 	ands.w	r2, r2, #1
 8003b74:	d009      	beq.n	8003b8a <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b78:	f043 0310 	orr.w	r3, r3, #16
 8003b7c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003b84:	4628      	mov	r0, r5
 8003b86:	b003      	add	sp, #12
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003b8c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003b90:	f041 0102 	orr.w	r1, r1, #2
 8003b94:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003b96:	68de      	ldr	r6, [r3, #12]
 8003b98:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003b9c:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003ba0:	0436      	lsls	r6, r6, #16
 8003ba2:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003baa:	f021 0103 	bic.w	r1, r1, #3
 8003bae:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003bb0:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003bb2:	e005      	b.n	8003bc0 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003bb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003bbc:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003bbe:	3201      	adds	r2, #1
 8003bc0:	2a07      	cmp	r2, #7
 8003bc2:	d81e      	bhi.n	8003c02 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003bc4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003bc6:	688b      	ldr	r3, [r1, #8]
 8003bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bcc:	f023 0317 	bic.w	r3, r3, #23
 8003bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bd6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	2900      	cmp	r1, #0
 8003bdc:	daea      	bge.n	8003bb4 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003bde:	9b01      	ldr	r3, [sp, #4]
 8003be0:	3301      	adds	r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003be4:	9b01      	ldr	r3, [sp, #4]
 8003be6:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003bea:	d3f4      	bcc.n	8003bd6 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003bec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bee:	f023 0312 	bic.w	r3, r3, #18
 8003bf2:	f043 0310 	orr.w	r3, r3, #16
 8003bf6:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003bfe:	2501      	movs	r5, #1
 8003c00:	e7c0      	b.n	8003b84 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003c02:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003c06:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003c08:	688b      	ldr	r3, [r1, #8]
 8003c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	f023 0317 	bic.w	r3, r3, #23
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003c18:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003c1a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003c1e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003c22:	4302      	orrs	r2, r0
 8003c24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003c28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003c2a:	6893      	ldr	r3, [r2, #8]
 8003c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c30:	f023 0317 	bic.w	r3, r3, #23
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003c3a:	f7fd fd4d 	bl	80016d8 <HAL_GetTick>
 8003c3e:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c40:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	f012 0f01 	tst.w	r2, #1
 8003c48:	d109      	bne.n	8003c5e <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4316      	orrs	r6, r2
 8003c4e:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c5c:	e78f      	b.n	8003b7e <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c5e:	f7fd fd3b 	bl	80016d8 <HAL_GetTick>
 8003c62:	1bc3      	subs	r3, r0, r7
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d9eb      	bls.n	8003c40 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f013 0f01 	tst.w	r3, #1
 8003c70:	d0e6      	beq.n	8003c40 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003c82:	2501      	movs	r5, #1
 8003c84:	e77e      	b.n	8003b84 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003c86:	2502      	movs	r5, #2
 8003c88:	e77c      	b.n	8003b84 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003c8c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c98:	0200      	lsls	r0, r0, #8
 8003c9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003ca8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003caa:	4770      	bx	lr
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_NVIC_SetPriority+0x68>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cba:	f1c3 0c07 	rsb	ip, r3, #7
 8003cbe:	f1bc 0f04 	cmp.w	ip, #4
 8003cc2:	bf28      	it	cs
 8003cc4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc8:	f103 0e04 	add.w	lr, r3, #4
 8003ccc:	f1be 0f06 	cmp.w	lr, #6
 8003cd0:	d918      	bls.n	8003d04 <HAL_NVIC_SetPriority+0x54>
 8003cd2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 3eff 	mov.w	lr, #4294967295
 8003cd8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003cdc:	ea21 010c 	bic.w	r1, r1, ip
 8003ce0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce2:	fa0e f303 	lsl.w	r3, lr, r3
 8003ce6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cea:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003cec:	2800      	cmp	r0, #0
 8003cee:	db0b      	blt.n	8003d08 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf0:	0109      	lsls	r1, r1, #4
 8003cf2:	b2c9      	uxtb	r1, r1
 8003cf4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003cf8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003cfc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d00:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d04:	2300      	movs	r3, #0
 8003d06:	e7e5      	b.n	8003cd4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	f000 000f 	and.w	r0, r0, #15
 8003d0c:	0109      	lsls	r1, r1, #4
 8003d0e:	b2c9      	uxtb	r1, r1
 8003d10:	4b02      	ldr	r3, [pc, #8]	; (8003d1c <HAL_NVIC_SetPriority+0x6c>)
 8003d12:	5419      	strb	r1, [r3, r0]
 8003d14:	e7f4      	b.n	8003d00 <HAL_NVIC_SetPriority+0x50>
 8003d16:	bf00      	nop
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	e000ed14 	.word	0xe000ed14

08003d20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d20:	2800      	cmp	r0, #0
 8003d22:	db07      	blt.n	8003d34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d24:	f000 021f 	and.w	r2, r0, #31
 8003d28:	0940      	lsrs	r0, r0, #5
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_NVIC_EnableIRQ+0x18>)
 8003d30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	db0c      	blt.n	8003d5a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d40:	f000 021f 	and.w	r2, r0, #31
 8003d44:	0940      	lsrs	r0, r0, #5
 8003d46:	2301      	movs	r3, #1
 8003d48:	4093      	lsls	r3, r2
 8003d4a:	3020      	adds	r0, #32
 8003d4c:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <HAL_NVIC_DisableIRQ+0x20>)
 8003d4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d56:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d60:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d62:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003d64:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003d68:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003d6c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003d6e:	b124      	cbz	r4, 8003d7a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d70:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003d72:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003d76:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d7c:	f004 0c1c 	and.w	ip, r4, #28
 8003d80:	2401      	movs	r4, #1
 8003d82:	fa04 f40c 	lsl.w	r4, r4, ip
 8003d86:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003d8a:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d8e:	6804      	ldr	r4, [r0, #0]
 8003d90:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d92:	6883      	ldr	r3, [r0, #8]
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d005      	beq.n	8003da4 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003d98:	6803      	ldr	r3, [r0, #0]
 8003d9a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003d9c:	6803      	ldr	r3, [r0, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
  }
}
 8003da0:	bc10      	pop	{r4}
 8003da2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003da4:	6803      	ldr	r3, [r0, #0]
 8003da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003da8:	6803      	ldr	r3, [r0, #0]
 8003daa:	60d9      	str	r1, [r3, #12]
 8003dac:	e7f8      	b.n	8003da0 <DMA_SetConfig+0x40>
	...

08003db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003db0:	6803      	ldr	r3, [r0, #0]
 8003db2:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d816      	bhi.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dba:	f022 0203 	bic.w	r2, r2, #3
 8003dbe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003dc2:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003dc6:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	3b08      	subs	r3, #8
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003dd6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2201      	movs	r2, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003de4:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003de6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003de8:	f022 0103 	bic.w	r1, r2, #3
 8003dec:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003dee:	440a      	add	r2, r1
 8003df0:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3b08      	subs	r3, #8
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	3307      	adds	r3, #7
 8003e00:	e7e8      	b.n	8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003e02:	bf00      	nop
 8003e04:	40020407 	.word	0x40020407
 8003e08:	cccccccd 	.word	0xcccccccd
 8003e0c:	40020880 	.word	0x40020880
 8003e10:	4002081c 	.word	0x4002081c

08003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e14:	6843      	ldr	r3, [r0, #4]
 8003e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003e1c:	441a      	add	r2, r3
 8003e1e:	0092      	lsls	r2, r2, #2
 8003e20:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e22:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003e24:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	1000823f 	.word	0x1000823f
 8003e3c:	40020940 	.word	0x40020940

08003e40 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d060      	beq.n	8003f06 <HAL_DMA_Init+0xc6>
{
 8003e44:	b510      	push	{r4, lr}
 8003e46:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e48:	6802      	ldr	r2, [r0, #0]
 8003e4a:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_DMA_Init+0xcc>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d842      	bhi.n	8003ed6 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <HAL_DMA_Init+0xd0>)
 8003e52:	4413      	add	r3, r2
 8003e54:	492f      	ldr	r1, [pc, #188]	; (8003f14 <HAL_DMA_Init+0xd4>)
 8003e56:	fba1 1303 	umull	r1, r3, r1, r3
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e60:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <HAL_DMA_Init+0xd8>)
 8003e62:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	680a      	ldr	r2, [r1, #0]
 8003e7a:	68a3      	ldr	r3, [r4, #8]
 8003e7c:	68e0      	ldr	r0, [r4, #12]
 8003e7e:	4303      	orrs	r3, r0
 8003e80:	6920      	ldr	r0, [r4, #16]
 8003e82:	4303      	orrs	r3, r0
 8003e84:	6960      	ldr	r0, [r4, #20]
 8003e86:	4303      	orrs	r3, r0
 8003e88:	69a0      	ldr	r0, [r4, #24]
 8003e8a:	4303      	orrs	r3, r0
 8003e8c:	69e0      	ldr	r0, [r4, #28]
 8003e8e:	4303      	orrs	r3, r0
 8003e90:	6a20      	ldr	r0, [r4, #32]
 8003e92:	4303      	orrs	r3, r0
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ff89 	bl	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ea6:	6863      	ldr	r3, [r4, #4]
 8003ea8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eae:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003eb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003eb4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d919      	bls.n	8003ef2 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003ec2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ec4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003ed0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003ed4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_DMA_Init+0xdc>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_DMA_Init+0xd4>)
 8003edc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <HAL_DMA_Init+0xe0>)
 8003ee8:	6403      	str	r3, [r0, #64]	; 0x40
 8003eea:	e7bb      	b.n	8003e64 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eec:	2300      	movs	r3, #0
 8003eee:	6063      	str	r3, [r4, #4]
 8003ef0:	e7d9      	b.n	8003ea6 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7ff ff8e 	bl	8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	e7df      	b.n	8003ec6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003f06:	2001      	movs	r0, #1
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40020407 	.word	0x40020407
 8003f10:	bffdfff8 	.word	0xbffdfff8
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	bffdfbf8 	.word	0xbffdfbf8
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d04b      	beq.n	8003fc0 <HAL_DMA_DeInit+0x9c>
{
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003f2c:	6802      	ldr	r2, [r0, #0]
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f36:	6802      	ldr	r2, [r0, #0]
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_DMA_DeInit+0xa0>)
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d82c      	bhi.n	8003f98 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_DMA_DeInit+0xa4>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4922      	ldr	r1, [pc, #136]	; (8003fcc <HAL_DMA_DeInit+0xa8>)
 8003f44:	fba1 1303 	umull	r1, r3, r1, r3
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_DMA_DeInit+0xac>)
 8003f50:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003f52:	2500      	movs	r5, #0
 8003f54:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f58:	f003 021c 	and.w	r2, r3, #28
 8003f5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4093      	lsls	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7ff ff23 	bl	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003f6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f6c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003f72:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f74:	6863      	ldr	r3, [r4, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d918      	bls.n	8003fae <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003f80:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f82:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003f84:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003f86:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003f88:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003f8a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003f8e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003f92:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_DMA_DeInit+0xb0>)
 8003f9a:	4413      	add	r3, r2
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_DMA_DeInit+0xa8>)
 8003f9e:	fba1 1303 	umull	r1, r3, r1, r3
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_DMA_DeInit+0xb4>)
 8003faa:	6403      	str	r3, [r0, #64]	; 0x40
 8003fac:	e7d1      	b.n	8003f52 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff ff30 	bl	8003e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fb6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	e7dd      	b.n	8003f7c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003fc0:	2001      	movs	r0, #1
}
 8003fc2:	4770      	bx	lr
 8003fc4:	40020407 	.word	0x40020407
 8003fc8:	bffdfff8 	.word	0xbffdfff8
 8003fcc:	cccccccd 	.word	0xcccccccd
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	bffdfbf8 	.word	0xbffdfbf8
 8003fd8:	40020400 	.word	0x40020400

08003fdc <HAL_DMA_Start_IT>:
{
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003fe0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003fe4:	2801      	cmp	r0, #1
 8003fe6:	d043      	beq.n	8004070 <HAL_DMA_Start_IT+0x94>
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003fee:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003ff2:	b2c0      	uxtb	r0, r0
 8003ff4:	2801      	cmp	r0, #1
 8003ff6:	d006      	beq.n	8004006 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004002:	2001      	movs	r0, #1
}
 8004004:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004006:	2002      	movs	r0, #2
 8004008:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	2000      	movs	r0, #0
 800400e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004010:	6825      	ldr	r5, [r4, #0]
 8004012:	6828      	ldr	r0, [r5, #0]
 8004014:	f020 0001 	bic.w	r0, r0, #1
 8004018:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401a:	4620      	mov	r0, r4
 800401c:	f7ff fea0 	bl	8003d60 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004022:	b1d3      	cbz	r3, 800405a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	f043 030e 	orr.w	r3, r3, #14
 800402c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800402e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004036:	d003      	beq.n	8004040 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004040:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004042:	b11b      	cbz	r3, 800404c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2000      	movs	r0, #0
 8004058:	e7d4      	b.n	8004004 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f043 030a 	orr.w	r3, r3, #10
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e7de      	b.n	800402e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004070:	2002      	movs	r0, #2
 8004072:	e7c7      	b.n	8004004 <HAL_DMA_Start_IT+0x28>

08004074 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004074:	4603      	mov	r3, r0
 8004076:	2800      	cmp	r0, #0
 8004078:	d034      	beq.n	80040e4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800407a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	2a02      	cmp	r2, #2
 8004082:	d006      	beq.n	8004092 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	2204      	movs	r2, #4
 8004086:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004088:	2200      	movs	r2, #0
 800408a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800408e:	2001      	movs	r0, #1
 8004090:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004092:	6801      	ldr	r1, [r0, #0]
 8004094:	680a      	ldr	r2, [r1, #0]
 8004096:	f022 020e 	bic.w	r2, r2, #14
 800409a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800409c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800409e:	680a      	ldr	r2, [r1, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040a4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80040a6:	6801      	ldr	r1, [r0, #0]
 80040a8:	680a      	ldr	r2, [r1, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040b2:	f002 011c 	and.w	r1, r2, #28
 80040b6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80040b8:	2201      	movs	r2, #1
 80040ba:	408a      	lsls	r2, r1
 80040bc:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80040c2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80040c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c6:	b132      	cbz	r2, 80040d6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80040ce:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80040d4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80040dc:	2000      	movs	r0, #0
 80040de:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 80040e2:	4770      	bx	lr
    return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
}
 80040e6:	4770      	bx	lr

080040e8 <HAL_DMA_Abort_IT>:
{
 80040e8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d003      	beq.n	80040fc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f4:	2304      	movs	r3, #4
 80040f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80040f8:	2001      	movs	r0, #1
}
 80040fa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040fc:	6802      	ldr	r2, [r0, #0]
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	f023 030e 	bic.w	r3, r3, #14
 8004104:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004106:	6802      	ldr	r2, [r0, #0]
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004110:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004112:	6813      	ldr	r3, [r2, #0]
 8004114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004118:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800411a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800411c:	f003 021c 	and.w	r2, r3, #28
 8004120:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004122:	2301      	movs	r3, #1
 8004124:	4093      	lsls	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004128:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800412a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800412c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 800412e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004130:	b133      	cbz	r3, 8004140 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004138:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800413a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800413c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800413e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004140:	2301      	movs	r3, #1
 8004142:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004146:	2300      	movs	r3, #0
 8004148:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800414c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800414e:	b113      	cbz	r3, 8004156 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004150:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2000      	movs	r0, #0
 8004154:	e7d1      	b.n	80040fa <HAL_DMA_Abort_IT+0x12>
 8004156:	2000      	movs	r0, #0
 8004158:	e7cf      	b.n	80040fa <HAL_DMA_Abort_IT+0x12>
	...

0800415c <HAL_DMA_IRQHandler>:
{
 800415c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800415e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004160:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004162:	6804      	ldr	r4, [r0, #0]
 8004164:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004166:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	2204      	movs	r2, #4
 800416e:	409a      	lsls	r2, r3
 8004170:	420a      	tst	r2, r1
 8004172:	d015      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x44>
 8004174:	f015 0f04 	tst.w	r5, #4
 8004178:	d012      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f013 0f20 	tst.w	r3, #32
 8004180:	d103      	bne.n	800418a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800418a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800418c:	f003 021c 	and.w	r2, r3, #28
 8004190:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004192:	2304      	movs	r3, #4
 8004194:	4093      	lsls	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004198:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800419a:	b103      	cbz	r3, 800419e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 800419c:	4798      	blx	r3
}
 800419e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041a0:	2202      	movs	r2, #2
 80041a2:	409a      	lsls	r2, r3
 80041a4:	420a      	tst	r2, r1
 80041a6:	d028      	beq.n	80041fa <HAL_DMA_IRQHandler+0x9e>
 80041a8:	f015 0f02 	tst.w	r5, #2
 80041ac:	d025      	beq.n	80041fa <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f013 0f20 	tst.w	r3, #32
 80041b4:	d106      	bne.n	80041c4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f023 030a 	bic.w	r3, r3, #10
 80041bc:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80041be:	2301      	movs	r3, #1
 80041c0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <HAL_DMA_IRQHandler+0xdc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d90e      	bls.n	80041ea <HAL_DMA_IRQHandler+0x8e>
 80041cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041ce:	f003 021c 	and.w	r2, r3, #28
 80041d2:	2302      	movs	r3, #2
 80041d4:	4093      	lsls	r3, r2
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_DMA_IRQHandler+0xe0>)
 80041d8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80041da:	2300      	movs	r3, #0
 80041dc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80041e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0db      	beq.n	800419e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80041e6:	4798      	blx	r3
 80041e8:	e7d9      	b.n	800419e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80041ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041ec:	f003 021c 	and.w	r2, r3, #28
 80041f0:	2302      	movs	r3, #2
 80041f2:	4093      	lsls	r3, r2
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_DMA_IRQHandler+0xe4>)
 80041f6:	6053      	str	r3, [r2, #4]
 80041f8:	e7ef      	b.n	80041da <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041fa:	2208      	movs	r2, #8
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	420b      	tst	r3, r1
 8004202:	d0cc      	beq.n	800419e <HAL_DMA_IRQHandler+0x42>
 8004204:	f015 0f08 	tst.w	r5, #8
 8004208:	d0c9      	beq.n	800419e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	f023 030e 	bic.w	r3, r3, #14
 8004210:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004212:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004214:	f003 031c 	and.w	r3, r3, #28
 8004218:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800421a:	2201      	movs	r2, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004222:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004224:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004228:	2300      	movs	r3, #0
 800422a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800422e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0b4      	beq.n	800419e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004234:	4798      	blx	r3
  return;
 8004236:	e7b2      	b.n	800419e <HAL_DMA_IRQHandler+0x42>
 8004238:	40020080 	.word	0x40020080
 800423c:	40020400 	.word	0x40020400
 8004240:	40020000 	.word	0x40020000

08004244 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004244:	b178      	cbz	r0, 8004266 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004246:	6803      	ldr	r3, [r0, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800424a:	f011 0f10 	tst.w	r1, #16
 800424e:	d004      	beq.n	800425a <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004254:	d004      	beq.n	8004260 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004256:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800425a:	601a      	str	r2, [r3, #0]
  return status;
 800425c:	2000      	movs	r0, #0
 800425e:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004260:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004264:	e7f9      	b.n	800425a <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004266:	2001      	movs	r0, #1
}
 8004268:	4770      	bx	lr
	...

0800426c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800426c:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800426e:	4c05      	ldr	r4, [pc, #20]	; (8004284 <FLASH_Program_DoubleWord+0x18>)
 8004270:	6961      	ldr	r1, [r4, #20]
 8004272:	f041 0101 	orr.w	r1, r1, #1
 8004276:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004278:	6002      	str	r2, [r0, #0]
 800427a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800427e:	6043      	str	r3, [r0, #4]
}
 8004280:	bc10      	pop	{r4}
 8004282:	4770      	bx	lr
 8004284:	58004000 	.word	0x58004000

08004288 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004288:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <FLASH_Program_Fast+0x34>)
 800428a:	6953      	ldr	r3, [r2, #20]
 800428c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004290:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004292:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004296:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004298:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800429a:	f851 2b04 	ldr.w	r2, [r1], #4
 800429e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80042a2:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80042a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80042a8:	d1f7      	bne.n	800429a <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <FLASH_Program_Fast+0x34>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80042b2:	d1fa      	bne.n	80042aa <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b4:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	58004000 	.word	0x58004000

080042c0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_FLASH_Unlock+0x28>)
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db01      	blt.n	80042cc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2000      	movs	r0, #0
 80042ca:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_FLASH_Unlock+0x28>)
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <HAL_FLASH_Unlock+0x2c>)
 80042d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042d2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80042d6:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db01      	blt.n	80042e2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2000      	movs	r0, #0
 80042e0:	4770      	bx	lr
      status = HAL_ERROR;
 80042e2:	2001      	movs	r0, #1
}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	58004000 	.word	0x58004000
 80042ec:	45670123 	.word	0x45670123

080042f0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_FLASH_Lock+0x18>)
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042f8:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db01      	blt.n	8004304 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004300:	2001      	movs	r0, #1
}
 8004302:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2000      	movs	r0, #0
 8004306:	4770      	bx	lr
 8004308:	58004000 	.word	0x58004000

0800430c <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_FLASH_OB_Unlock+0x2c>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004314:	d00b      	beq.n	800432e <HAL_FLASH_OB_Unlock+0x22>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_FLASH_OB_Unlock+0x2c>)
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <HAL_FLASH_OB_Unlock+0x30>)
 800431a:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800431c:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 8004320:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004328:	d003      	beq.n	8004332 <HAL_FLASH_OB_Unlock+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 800432a:	2001      	movs	r0, #1
 800432c:	4770      	bx	lr
 800432e:	2001      	movs	r0, #1
 8004330:	4770      	bx	lr
      status = HAL_OK;
 8004332:	2000      	movs	r0, #0
}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	58004000 	.word	0x58004000
 800433c:	08192a3b 	.word	0x08192a3b

08004340 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_FLASH_OB_Lock+0x1c>)
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004348:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004350:	d001      	beq.n	8004356 <HAL_FLASH_OB_Lock+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2000      	movs	r0, #0
 8004354:	4770      	bx	lr
    status = HAL_ERROR;
 8004356:	2001      	movs	r0, #1
}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	58004000 	.word	0x58004000

08004360 <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <HAL_FLASH_OB_Launch+0x10>)
 8004362:	6953      	ldr	r3, [r2, #20]
 8004364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004368:	6153      	str	r3, [r2, #20]
}
 800436a:	2001      	movs	r0, #1
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	58004000 	.word	0x58004000

08004374 <FLASH_WaitForLastOperation>:
{
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7fd f9ae 	bl	80016d8 <HAL_GetTick>
 800437c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <FLASH_WaitForLastOperation+0x64>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004386:	d006      	beq.n	8004396 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004388:	f7fd f9a6 	bl	80016d8 <HAL_GetTick>
 800438c:	1b00      	subs	r0, r0, r4
 800438e:	42a8      	cmp	r0, r5
 8004390:	d3f5      	bcc.n	800437e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004392:	2003      	movs	r0, #3
}
 8004394:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <FLASH_WaitForLastOperation+0x64>)
 8004398:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800439a:	f013 0f01 	tst.w	r3, #1
 800439e:	d002      	beq.n	80043a6 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043a0:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <FLASH_WaitForLastOperation+0x64>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 80043a6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 80043aa:	4013      	ands	r3, r2
 80043ac:	d001      	beq.n	80043b2 <FLASH_WaitForLastOperation+0x3e>
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <FLASH_WaitForLastOperation+0x64>)
 80043b0:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80043b2:	b95b      	cbnz	r3, 80043cc <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <FLASH_WaitForLastOperation+0x64>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80043bc:	d00a      	beq.n	80043d4 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80043be:	f7fd f98b 	bl	80016d8 <HAL_GetTick>
 80043c2:	1b00      	subs	r0, r0, r4
 80043c4:	42a8      	cmp	r0, r5
 80043c6:	d3f5      	bcc.n	80043b4 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80043c8:	2003      	movs	r0, #3
 80043ca:	e7e3      	b.n	8004394 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80043cc:	4a03      	ldr	r2, [pc, #12]	; (80043dc <FLASH_WaitForLastOperation+0x68>)
 80043ce:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e7df      	b.n	8004394 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80043d4:	2000      	movs	r0, #0
 80043d6:	e7dd      	b.n	8004394 <FLASH_WaitForLastOperation+0x20>
 80043d8:	58004000 	.word	0x58004000
 80043dc:	200004f0 	.word	0x200004f0

080043e0 <HAL_FLASH_Program>:
{
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80043e4:	4b15      	ldr	r3, [pc, #84]	; (800443c <HAL_FLASH_Program+0x5c>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d025      	beq.n	8004438 <HAL_FLASH_Program+0x58>
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	4616      	mov	r6, r2
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_FLASH_Program+0x5c>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004400:	f7ff ffb8 	bl	8004374 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004404:	b970      	cbnz	r0, 8004424 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004406:	2c01      	cmp	r4, #1
 8004408:	d010      	beq.n	800442c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800440a:	4631      	mov	r1, r6
 800440c:	4628      	mov	r0, r5
 800440e:	f7ff ff3b 	bl	8004288 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004416:	f7ff ffad 	bl	8004374 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <HAL_FLASH_Program+0x60>)
 800441c:	6953      	ldr	r3, [r2, #20]
 800441e:	ea23 0404 	bic.w	r4, r3, r4
 8004422:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_FLASH_Program+0x5c>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
}
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	4628      	mov	r0, r5
 8004432:	f7ff ff1b 	bl	800426c <FLASH_Program_DoubleWord>
 8004436:	e7ec      	b.n	8004412 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004438:	2002      	movs	r0, #2
 800443a:	e7f6      	b.n	800442a <HAL_FLASH_Program+0x4a>
 800443c:	200004f0 	.word	0x200004f0
 8004440:	58004000 	.word	0x58004000

08004444 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <FLASH_MassErase+0x10>)
 8004446:	6953      	ldr	r3, [r2, #20]
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	6153      	str	r3, [r2, #20]
#endif
}
 8004452:	4770      	bx	lr
 8004454:	58004000 	.word	0x58004000

08004458 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <FLASH_FlushCaches+0x64>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004460:	2b01      	cmp	r3, #1
 8004462:	d006      	beq.n	8004472 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <FLASH_FlushCaches+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b01      	cmp	r3, #1
 800446e:	d012      	beq.n	8004496 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004470:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <FLASH_FlushCaches+0x64>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e7e6      	b.n	8004464 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <FLASH_FlushCaches+0x64>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ae:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	e7da      	b.n	8004470 <FLASH_FlushCaches+0x18>
 80044ba:	bf00      	nop
 80044bc:	58004000 	.word	0x58004000

080044c0 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <FLASH_AcknowledgePageErase+0x10>)
 80044c2:	6953      	ldr	r3, [r2, #20]
 80044c4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	6153      	str	r3, [r2, #20]
#endif
}
 80044ce:	4770      	bx	lr
 80044d0:	58004000 	.word	0x58004000

080044d4 <FLASH_OB_WRPConfig>:
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80044d4:	b940      	cbnz	r0, 80044e8 <FLASH_OB_WRPConfig+0x14>
  {
    MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 80044d6:	4809      	ldr	r0, [pc, #36]	; (80044fc <FLASH_OB_WRPConfig+0x28>)
 80044d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80044da:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80044de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044e2:	4319      	orrs	r1, r3
 80044e4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80044e6:	4770      	bx	lr
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 80044e8:	4804      	ldr	r0, [pc, #16]	; (80044fc <FLASH_OB_WRPConfig+0x28>)
 80044ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044ec:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 80044f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044f4:	4319      	orrs	r1, r3
 80044f6:	6301      	str	r1, [r0, #48]	; 0x30
               (WRPStartOffset | (WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos)));
  }
}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	58004000 	.word	0x58004000

08004500 <FLASH_OB_OptrConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @retval None
  */
#endif
static void FLASH_OB_OptrConfig(uint32_t UserType, uint32_t UserConfig, uint32_t RDPLevel)
{
 8004500:	b410      	push	{r4}
  assert_param(IS_OB_USER_TYPE(UserType));
  assert_param(IS_OB_USER_CONFIG(UserType, UserConfig));
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  optr = FLASH->OPTR;
 8004502:	4c05      	ldr	r4, [pc, #20]	; (8004518 <FLASH_OB_OptrConfig+0x18>)
 8004504:	6a23      	ldr	r3, [r4, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8004506:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 800450a:	ea23 0300 	bic.w	r3, r3, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800450e:	430b      	orrs	r3, r1
 8004510:	4313      	orrs	r3, r2
 8004512:	6223      	str	r3, [r4, #32]
}
 8004514:	bc10      	pop	{r4}
 8004516:	4770      	bx	lr
 8004518:	58004000 	.word	0x58004000

0800451c <FLASH_OB_PCROP1AConfig>:
  assert_param(IS_OB_PCROP_CONFIG(PCROPConfig));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1AEndAddr));

  /* get pcrop 1A end register */
  pcrop1aend = FLASH->PCROP1AER;
 800451c:	4b10      	ldr	r3, [pc, #64]	; (8004560 <FLASH_OB_PCROP1AConfig+0x44>)
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28

  /* Configure the Proprietary code readout protection offset */
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0U)
 8004520:	f010 0f01 	tst.w	r0, #1
 8004524:	d014      	beq.n	8004550 <FLASH_OB_PCROP1AConfig+0x34>
{
 8004526:	b410      	push	{r4}
  {
    /* Compute offset depending on pcrop granularity */
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8004528:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800452c:	0a89      	lsrs	r1, r1, #10
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 800452e:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000

    /* Set Zone A start offset */
    WRITE_REG(FLASH->PCROP1ASR, startoffset);
 8004532:	4c0b      	ldr	r4, [pc, #44]	; (8004560 <FLASH_OB_PCROP1AConfig+0x44>)
 8004534:	6261      	str	r1, [r4, #36]	; 0x24

    /* Set Zone A end offset */
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 8004536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    pcrop1aend |= endoffset;
 800453a:	ea43 2392 	orr.w	r3, r3, r2, lsr #10
  }

  /* Set RDP erase protection if needed. This bit is only set & will be reset by mass erase */
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 800453e:	2800      	cmp	r0, #0
 8004540:	db03      	blt.n	800454a <FLASH_OB_PCROP1AConfig+0x2e>
  {
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
  }

  /* set 1A End register */
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <FLASH_OB_PCROP1AConfig+0x44>)
 8004544:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004546:	bc10      	pop	{r4}
 8004548:	4770      	bx	lr
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 800454a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800454e:	e7f8      	b.n	8004542 <FLASH_OB_PCROP1AConfig+0x26>
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0U)
 8004550:	2800      	cmp	r0, #0
 8004552:	db02      	blt.n	800455a <FLASH_OB_PCROP1AConfig+0x3e>
  WRITE_REG(FLASH->PCROP1AER, pcrop1aend);
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <FLASH_OB_PCROP1AConfig+0x44>)
 8004556:	6293      	str	r3, [r2, #40]	; 0x28
 8004558:	4770      	bx	lr
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 800455a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800455e:	e7f9      	b.n	8004554 <FLASH_OB_PCROP1AConfig+0x38>
 8004560:	58004000 	.word	0x58004000

08004564 <FLASH_OB_PCROP1BConfig>:
  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROP1BEndAddr));

  /* Compute offset depending on pcrop granularity */
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 8004564:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8004568:	0a80      	lsrs	r0, r0, #10
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET); /* 2K pages */
 800456a:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800456e:	0a89      	lsrs	r1, r1, #10

  /* Configure the Proprietary code readout protection start address */
  WRITE_REG(FLASH->PCROP1BSR, startoffset);
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <FLASH_OB_PCROP1BConfig+0x14>)
 8004572:	6358      	str	r0, [r3, #52]	; 0x34

  /* Configure the Proprietary code readout protection end address */
  WRITE_REG(FLASH->PCROP1BER, endoffset);
 8004574:	6399      	str	r1, [r3, #56]	; 0x38
}
 8004576:	4770      	bx	lr
 8004578:	58004000 	.word	0x58004000

0800457c <FLASH_OB_IPCCBufferAddrConfig>:
static void FLASH_OB_IPCCBufferAddrConfig(uint32_t IPCCDataBufAddr)
{
  assert_param(IS_OB_IPCC_BUF_ADDR(IPCCDataBufAddr));

  /* Configure the option bytes register */
  WRITE_REG(FLASH->IPCCBR, (uint32_t)((IPCCDataBufAddr - SRAM1_BASE) >> 4));
 800457c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004580:	0900      	lsrs	r0, r0, #4
 8004582:	4b01      	ldr	r3, [pc, #4]	; (8004588 <FLASH_OB_IPCCBufferAddrConfig+0xc>)
 8004584:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004586:	4770      	bx	lr
 8004588:	58004000 	.word	0x58004000

0800458c <FLASH_OB_GetWRP>:
{
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 800458c:	b948      	cbnz	r0, 80045a2 <FLASH_OB_GetWRP+0x16>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800458e:	480a      	ldr	r0, [pc, #40]	; (80045b8 <FLASH_OB_GetWRP+0x2c>)
 8004590:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	600b      	str	r3, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8004598:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800459a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4770      	bx	lr
  }
  else /* OB_WRPAREA_BANK1_AREAB */
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80045a2:	4805      	ldr	r0, [pc, #20]	; (80045b8 <FLASH_OB_GetWRP+0x2c>)
 80045a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80045a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045aa:	600b      	str	r3, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 80045ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80045ae:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80045b2:	6013      	str	r3, [r2, #0]
  }
}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58004000 	.word	0x58004000

080045bc <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <FLASH_OB_GetRDP+0x14>)
 80045be:	6a18      	ldr	r0, [r3, #32]
 80045c0:	b2c0      	uxtb	r0, r0

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 80045c2:	28aa      	cmp	r0, #170	; 0xaa
 80045c4:	d002      	beq.n	80045cc <FLASH_OB_GetRDP+0x10>
 80045c6:	28cc      	cmp	r0, #204	; 0xcc
 80045c8:	d000      	beq.n	80045cc <FLASH_OB_GetRDP+0x10>
  {
    return (OB_RDP_LEVEL_1);
 80045ca:	20bb      	movs	r0, #187	; 0xbb
  }
  else
  {
    return rdplvl;
  }
}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	58004000 	.word	0x58004000

080045d4 <FLASH_OB_GetUser>:
  *         @arg @ref OB_BOOT_LOCK_DISABLE or @ref OB_BOOT_LOCK_ENABLE
  */
#endif
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user_config = (READ_REG(FLASH->OPTR) & OB_USER_ALL);
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <FLASH_OB_GetUser+0xc>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
  CLEAR_BIT(user_config, (FLASH_OPTR_RDP | FLASH_OPTR_ESE));

  return user_config;
}
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <FLASH_OB_GetUser+0x10>)
 80045da:	4018      	ands	r0, r3
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	58004000 	.word	0x58004000
 80045e4:	cf8f7e00 	.word	0xcf8f7e00

080045e8 <FLASH_OB_GetPCROP>:
  * @param PCROP1BEndAddr [out] Specifies the address where to copied the end address of
  *                       the Zone 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr, uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 80045e8:	b430      	push	{r4, r5}
  uint32_t pcrop;

  pcrop             = (READ_BIT(FLASH->PCROP1BSR, FLASH_PCROP1BSR_PCROP1B_STRT));
 80045ea:	4c12      	ldr	r4, [pc, #72]	; (8004634 <FLASH_OB_GetPCROP+0x4c>)
 80045ec:	6b65      	ldr	r5, [r4, #52]	; 0x34
  *PCROP1BStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80045ee:	02ad      	lsls	r5, r5, #10
 80045f0:	f405 357f 	and.w	r5, r5, #261120	; 0x3fc00
 80045f4:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 80045f8:	601d      	str	r5, [r3, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1BER, FLASH_PCROP1BER_PCROP1B_END));
 80045fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  *PCROP1BEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 8004602:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004606:	9d02      	ldr	r5, [sp, #8]
 8004608:	602b      	str	r3, [r5, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1ASR, FLASH_PCROP1ASR_PCROP1A_STRT));
 800460a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  *PCROP1AStartAddr = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 8004612:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004616:	600b      	str	r3, [r1, #0]

  pcrop             = (READ_BIT(FLASH->PCROP1AER, FLASH_PCROP1AER_PCROP1A_END));
 8004618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *PCROP1AEndAddr   = ((pcrop << FLASH_PCROP_GRANULARITY_OFFSET) + FLASH_BASE);
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 8004620:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004624:	6013      	str	r3, [r2, #0]

  *PCROPConfig      = (READ_REG(FLASH->PCROP1AER) & FLASH_PCROP1AER_PCROP_RDP);
 8004626:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462c:	6003      	str	r3, [r0, #0]
}
 800462e:	bc30      	pop	{r4, r5}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	58004000 	.word	0x58004000

08004638 <FLASH_OB_GetIPCCBufferAddr>:
  *           This value correspond to the first double-word of the IPCC mailbox data buffer area
  *           in SRAM starting from 0x20000000 (SRAM1 start address to SRAM2 end address).
  */
static uint32_t FLASH_OB_GetIPCCBufferAddr(void)
{
  return (uint32_t)((READ_BIT(FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA) << 4) + SRAM1_BASE);
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <FLASH_OB_GetIPCCBufferAddr+0x10>)
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	4803      	ldr	r0, [pc, #12]	; (800464c <FLASH_OB_GetIPCCBufferAddr+0x14>)
 800463e:	ea00 1003 	and.w	r0, r0, r3, lsl #4
}
 8004642:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8004646:	4770      	bx	lr
 8004648:	58004000 	.word	0x58004000
 800464c:	0003fff0 	.word	0x0003fff0

08004650 <FLASH_OB_GetC2BootResetConfig>:
  * @param  C2BootResetRegion   Specifies the Secure Boot reset memory region
  * @retval None
  */
static void FLASH_OB_GetC2BootResetConfig(uint32_t *C2BootResetVectAddr, uint32_t *C2BootResetRegion)
{
  *C2BootResetRegion = (READ_BIT(FLASH->SRRVR, FLASH_SRRVR_C2OPT));
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <FLASH_OB_GetC2BootResetConfig+0x38>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800465a:	600b      	str	r3, [r1, #0]

  if (*C2BootResetRegion == OB_C2_BOOT_FROM_FLASH)
 800465c:	b94b      	cbnz	r3, 8004672 <FLASH_OB_GetC2BootResetConfig+0x22>
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
  }
  else
  {
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + SRAM1_BASE);
 800465e:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <FLASH_OB_GetC2BootResetConfig+0x38>)
 8004660:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <FLASH_OB_GetC2BootResetConfig+0x3c>)
 8004666:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800466a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800466e:	6003      	str	r3, [r0, #0]
  }
}
 8004670:	4770      	bx	lr
    *C2BootResetVectAddr = (uint32_t)((READ_BIT(FLASH->SRRVR, FLASH_SRRVR_SBRV) << 2) + FLASH_BASE);
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <FLASH_OB_GetC2BootResetConfig+0x38>)
 8004674:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <FLASH_OB_GetC2BootResetConfig+0x3c>)
 800467a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800467e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8004682:	6003      	str	r3, [r0, #0]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	58004000 	.word	0x58004000
 800468c:	0003fffc 	.word	0x0003fffc

08004690 <FLASH_OB_GetSUBGHZSPISecureAccess>:
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_DISABLE : Sub-GHz radio SPI Secure access disabled
  *           @arg @ref OB_SUBGHZSPI_SECURE_ACCESS_ENABLE : Sub-GHz radio SPI Secure access enabled
  */
static uint32_t FLASH_OB_GetSUBGHZSPISecureAccess(void)
{
  return (READ_BIT(FLASH->SFR, FLASH_SFR_SUBGHZSPISD));
 8004690:	4b02      	ldr	r3, [pc, #8]	; (800469c <FLASH_OB_GetSUBGHZSPISecureAccess+0xc>)
 8004692:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8004696:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800469a:	4770      	bx	lr
 800469c:	58004000 	.word	0x58004000

080046a0 <FLASH_OB_GetC2DebugAccessMode>:
  *           @arg @ref OB_C2_DEBUG_ACCESS_DISABLE : CPU2 debug access disabled
  *           @arg @ref OB_C2_DEBUG_ACCESS_ENABLE : CPU2 debug access enabled
  */
static uint32_t FLASH_OB_GetC2DebugAccessMode(void)
{
  return (READ_BIT(FLASH->SFR, FLASH_SFR_DDS));
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <FLASH_OB_GetC2DebugAccessMode+0xc>)
 80046a2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80046a6:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 80046aa:	4770      	bx	lr
 80046ac:	58004000 	.word	0x58004000

080046b0 <FLASH_OB_ConfigSecureMode>:
  * @retval None
  */
static void FLASH_OB_ConfigSecureMode(uint32_t SecureMode, uint32_t *Reg, uint32_t Bit, uint32_t ValueEnable)
{
  /* Check if SecureMode is requested */
  if ((SecureMode & ValueEnable) == ValueEnable)
 80046b0:	4383      	bics	r3, r0
 80046b2:	d003      	beq.n	80046bc <FLASH_OB_ConfigSecureMode+0xc>
  {
    CLEAR_BIT(*Reg, Bit);
  }
  else
  {
    SET_BIT(*Reg, Bit);
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	600a      	str	r2, [r1, #0]
  }
}
 80046ba:	4770      	bx	lr
    CLEAR_BIT(*Reg, Bit);
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	ea23 0202 	bic.w	r2, r3, r2
 80046c2:	600a      	str	r2, [r1, #0]
 80046c4:	4770      	bx	lr
	...

080046c8 <FLASH_OB_SecureConfig>:
{
 80046c8:	b510      	push	{r4, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	4604      	mov	r4, r0
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <FLASH_OB_SecureConfig+0x12c>)
 80046d0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80046d4:	9201      	str	r2, [sp, #4]
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 80046d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046da:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_SECURE_MODE) != 0U)
 80046dc:	6801      	ldr	r1, [r0, #0]
 80046de:	f411 7f00 	tst.w	r1, #512	; 0x200
 80046e2:	d032      	beq.n	800474a <FLASH_OB_SecureConfig+0x82>
    MODIFY_REG(sfr_reg_val, (FLASH_SFR_SFSA | FLASH_SFR_HDPSA), \
 80046e4:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 80046e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80046ea:	f101 4078 	add.w	r0, r1, #4160749568	; 0xf8000000
 80046ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80046f0:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80046f4:	0ac9      	lsrs	r1, r1, #11
 80046f6:	0409      	lsls	r1, r1, #16
 80046f8:	ea41 21d0 	orr.w	r1, r1, r0, lsr #11
 80046fc:	430a      	orrs	r2, r1
 80046fe:	9201      	str	r2, [sp, #4]
    MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRSA | FLASH_SRRVR_SNBRSA), \
 8004700:	f023 5379 	bic.w	r3, r3, #1044381696	; 0x3e400000
 8004704:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8004708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470a:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 800470e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8004712:	0a88      	lsrs	r0, r1, #10
 8004714:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004716:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 800471a:	0a89      	lsrs	r1, r1, #10
 800471c:	0649      	lsls	r1, r1, #25
 800471e:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 8004722:	430b      	orrs	r3, r1
 8004724:	9300      	str	r3, [sp, #0]
    if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_ENABLE)
 8004726:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004728:	280f      	cmp	r0, #15
 800472a:	d008      	beq.n	800473e <FLASH_OB_SecureConfig+0x76>
    else if (pOBParam->SecureMode == OB_SECURE_SYSTEM_AND_ALL_AREAS_DISABLE)
 800472c:	28f0      	cmp	r0, #240	; 0xf0
 800472e:	d13b      	bne.n	80047a8 <FLASH_OB_SecureConfig+0xe0>
      SET_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 8004730:	f042 1280 	orr.w	r2, r2, #8388736	; 0x800080
 8004734:	9201      	str	r2, [sp, #4]
      SET_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8004736:	f043 4381 	orr.w	r3, r3, #1082130432	; 0x40800000
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	e005      	b.n	800474a <FLASH_OB_SecureConfig+0x82>
      CLEAR_BIT(sfr_reg_val, (FLASH_SFR_FSD | FLASH_SFR_HDPAD));
 800473e:	f022 1280 	bic.w	r2, r2, #8388736	; 0x800080
 8004742:	9201      	str	r2, [sp, #4]
      CLEAR_BIT(srrvr_reg_val, (FLASH_SRRVR_BRSD | FLASH_SRRVR_NBRSD));
 8004744:	f023 4381 	bic.w	r3, r3, #1082130432	; 0x40800000
 8004748:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_C2_BOOT_VECT) != 0U)
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004750:	d00d      	beq.n	800476e <FLASH_OB_SecureConfig+0xa6>
    if (pOBParam->C2BootRegion == OB_C2_BOOT_FROM_FLASH)
 8004752:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004758:	d041      	beq.n	80047de <FLASH_OB_SecureConfig+0x116>
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - SRAM1_BASE) >> 2) | pOBParam->C2BootRegion));
 800475a:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <FLASH_OB_SecureConfig+0x130>)
 800475c:	9900      	ldr	r1, [sp, #0]
 800475e:	400a      	ands	r2, r1
 8004760:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004762:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 8004766:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 800476a:	4313      	orrs	r3, r2
 800476c:	9300      	str	r3, [sp, #0]
  if ((pOBParam->OptionType & OPTIONBYTE_C2_DEBUG_ACCESS) != 0U)
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004774:	d005      	beq.n	8004782 <FLASH_OB_SecureConfig+0xba>
    MODIFY_REG(sfr_reg_val, FLASH_SFR_DDS, (uint32_t)pOBParam->C2DebugAccessMode);
 8004776:	9b01      	ldr	r3, [sp, #4]
 8004778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800477c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800477e:	4313      	orrs	r3, r2
 8004780:	9301      	str	r3, [sp, #4]
  if ((pOBParam->OptionType & OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS) != 0U)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004788:	d005      	beq.n	8004796 <FLASH_OB_SecureConfig+0xce>
    MODIFY_REG(sfr_reg_val, FLASH_SFR_SUBGHZSPISD, (uint32_t)pOBParam->SUBGHZSPISecureAccess);
 800478a:	9b01      	ldr	r3, [sp, #4]
 800478c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004790:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004792:	4313      	orrs	r3, r2
 8004794:	9301      	str	r3, [sp, #4]
  WRITE_REG(FLASH->SFR, sfr_reg_val);
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <FLASH_OB_SecureConfig+0x12c>)
 8004798:	9a01      	ldr	r2, [sp, #4]
 800479a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  WRITE_REG(FLASH->SRRVR, srrvr_reg_val);
 800479e:	9a00      	ldr	r2, [sp, #0]
 80047a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80047a4:	b002      	add	sp, #8
 80047a6:	bd10      	pop	{r4, pc}
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE);
 80047a8:	2301      	movs	r3, #1
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	a901      	add	r1, sp, #4
 80047ae:	f7ff ff7f 	bl	80046b0 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE);
 80047b2:	2302      	movs	r3, #2
 80047b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047b8:	a901      	add	r1, sp, #4
 80047ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047bc:	f7ff ff78 	bl	80046b0 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE);
 80047c0:	2304      	movs	r3, #4
 80047c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047c6:	4669      	mov	r1, sp
 80047c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047ca:	f7ff ff71 	bl	80046b0 <FLASH_OB_ConfigSecureMode>
      FLASH_OB_ConfigSecureMode(pOBParam->SecureMode, &srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE);
 80047ce:	2308      	movs	r3, #8
 80047d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047d4:	4669      	mov	r1, sp
 80047d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047d8:	f7ff ff6a 	bl	80046b0 <FLASH_OB_ConfigSecureMode>
 80047dc:	e7b5      	b.n	800474a <FLASH_OB_SecureConfig+0x82>
      MODIFY_REG(srrvr_reg_val, (FLASH_SRRVR_SBRV | FLASH_SRRVR_C2OPT), (((pOBParam->C2SecureBootVectAddr - FLASH_BASE) >> 2) | pOBParam->C2BootRegion));
 80047de:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <FLASH_OB_SecureConfig+0x130>)
 80047e0:	9900      	ldr	r1, [sp, #0]
 80047e2:	400a      	ands	r2, r1
 80047e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80047e6:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80047ea:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
 80047ee:	4313      	orrs	r3, r2
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	e7bc      	b.n	800476e <FLASH_OB_SecureConfig+0xa6>
 80047f4:	58004000 	.word	0x58004000
 80047f8:	7fff0000 	.word	0x7fff0000

080047fc <FLASH_OB_GetSecureMode>:
  *                               Null
  */
static uint32_t FLASH_OB_GetSecureMode(uint32_t Reg, uint32_t Bit, uint32_t ValueEnable, uint32_t ValueDisable)
{
  /* Return status of bit (set as enable, set as disable) */
  if (READ_BIT(Reg, Bit) == 0U)
 80047fc:	4208      	tst	r0, r1
 80047fe:	d100      	bne.n	8004802 <FLASH_OB_GetSecureMode+0x6>
  {
    return ValueEnable;
 8004800:	4613      	mov	r3, r2
  }
  else
  {
    return ValueDisable;
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	4770      	bx	lr
	...

08004808 <FLASH_OB_GetSecureMemoryConfig>:
{
 8004808:	b570      	push	{r4, r5, r6, lr}
  uint32_t sfr_reg_val = READ_REG(FLASH->SFR);
 800480a:	4c21      	ldr	r4, [pc, #132]	; (8004890 <FLASH_OB_GetSecureMemoryConfig+0x88>)
 800480c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  uint32_t srrvr_reg_val = READ_REG(FLASH->SRRVR);
 8004810:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  uint32_t user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos);
 8004814:	f006 047f 	and.w	r4, r6, #127	; 0x7f
  *SecureFlashStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8004818:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800481c:	02e4      	lsls	r4, r4, #11
 800481e:	6004      	str	r4, [r0, #0]
  user_config = (READ_BIT(sfr_reg_val, FLASH_SFR_HDPSA) >> FLASH_SFR_HDPSA_Pos);
 8004820:	f3c6 4006 	ubfx	r0, r6, #16, #7
  *HideProtectionStartAddr = ((user_config * FLASH_PAGE_SIZE) + FLASH_BASE);
 8004824:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8004828:	02c0      	lsls	r0, r0, #11
 800482a:	6008      	str	r0, [r1, #0]
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SBRSA) >> FLASH_SRRVR_SBRSA_Pos);
 800482c:	0ca9      	lsrs	r1, r5, #18
  *SecureSRAM2StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM2_BASE);
 800482e:	0289      	lsls	r1, r1, #10
 8004830:	f401 41f8 	and.w	r1, r1, #31744	; 0x7c00
 8004834:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8004838:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 800483c:	6011      	str	r1, [r2, #0]
  user_config = (READ_BIT(srrvr_reg_val, FLASH_SRRVR_SNBRSA) >> FLASH_SRRVR_SNBRSA_Pos);
 800483e:	0e6a      	lsrs	r2, r5, #25
  *SecureSRAM1StartAddr = ((user_config << SRAM_SECURE_PAGE_GRANULARITY_OFFSET) + SRAM1_BASE);
 8004840:	0292      	lsls	r2, r2, #10
 8004842:	f402 42f8 	and.w	r2, r2, #31744	; 0x7c00
 8004846:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 800484a:	601a      	str	r2, [r3, #0]
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 800484c:	2310      	movs	r3, #16
 800484e:	2201      	movs	r2, #1
 8004850:	2180      	movs	r1, #128	; 0x80
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff ffd2 	bl	80047fc <FLASH_OB_GetSecureMode>
 8004858:	4604      	mov	r4, r0
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 800485a:	2320      	movs	r3, #32
 800485c:	2202      	movs	r2, #2
 800485e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff ffca 	bl	80047fc <FLASH_OB_GetSecureMode>
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 8004868:	4304      	orrs	r4, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	2204      	movs	r2, #4
 800486e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004872:	4628      	mov	r0, r5
 8004874:	f7ff ffc2 	bl	80047fc <FLASH_OB_GetSecureMode>
                 FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_HDPAD, OB_SECURE_HIDE_PROTECTION_ENABLE, OB_SECURE_HIDE_PROTECTION_DISABLE) | \
 8004878:	4304      	orrs	r4, r0
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_BRSD, OB_SECURE_SRAM2_ENABLE, OB_SECURE_SRAM2_DISABLE));
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	2208      	movs	r2, #8
 800487e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004882:	4628      	mov	r0, r5
 8004884:	f7ff ffba 	bl	80047fc <FLASH_OB_GetSecureMode>
                 FLASH_OB_GetSecureMode(srrvr_reg_val, FLASH_SRRVR_NBRSD, OB_SECURE_SRAM1_ENABLE, OB_SECURE_SRAM1_DISABLE)                 | \
 8004888:	4304      	orrs	r4, r0
  *SecureMode = (FLASH_OB_GetSecureMode(sfr_reg_val, FLASH_SFR_FSD, OB_SECURE_SYSTEM_AND_FLASH_ENABLE, OB_SECURE_SYSTEM_AND_FLASH_DISABLE) | \
 800488a:	9b04      	ldr	r3, [sp, #16]
 800488c:	601c      	str	r4, [r3, #0]
}
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	58004000 	.word	0x58004000

08004894 <FLASH_OB_ProceedWriteOperation>:
{
 8004894:	b508      	push	{r3, lr}
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800489a:	f7ff fd6b 	bl	8004374 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800489e:	b100      	cbz	r0, 80048a2 <FLASH_OB_ProceedWriteOperation+0xe>
}
 80048a0:	bd08      	pop	{r3, pc}
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <FLASH_OB_ProceedWriteOperation+0x24>)
 80048a4:	6953      	ldr	r3, [r2, #20]
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048aa:	6153      	str	r3, [r2, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b0:	f7ff fd60 	bl	8004374 <FLASH_WaitForLastOperation>
 80048b4:	e7f4      	b.n	80048a0 <FLASH_OB_ProceedWriteOperation+0xc>
 80048b6:	bf00      	nop
 80048b8:	58004000 	.word	0x58004000

080048bc <HAL_FLASHEx_OBProgram>:
  __HAL_LOCK(&pFlash);
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_FLASHEx_OBProgram+0xcc>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d05e      	beq.n	8004982 <HAL_FLASHEx_OBProgram+0xc6>
{
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 80048c8:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_FLASHEx_OBProgram+0xcc>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048ce:	2200      	movs	r2, #0
 80048d0:	605a      	str	r2, [r3, #4]
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80048d2:	6803      	ldr	r3, [r0, #0]
 80048d4:	f013 0f01 	tst.w	r3, #1
 80048d8:	d124      	bne.n	8004924 <HAL_FLASHEx_OBProgram+0x68>
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f003 0206 	and.w	r2, r3, #6
 80048e0:	2a06      	cmp	r2, #6
 80048e2:	d025      	beq.n	8004930 <HAL_FLASHEx_OBProgram+0x74>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80048e4:	f013 0f02 	tst.w	r3, #2
 80048e8:	d128      	bne.n	800493c <HAL_FLASHEx_OBProgram+0x80>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80048ea:	f013 0f04 	tst.w	r3, #4
 80048ee:	d12e      	bne.n	800494e <HAL_FLASHEx_OBProgram+0x92>
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f013 0f08 	tst.w	r3, #8
 80048f6:	d007      	beq.n	8004908 <HAL_FLASHEx_OBProgram+0x4c>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0U)
 80048f8:	69e0      	ldr	r0, [r4, #28]
 80048fa:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_FLASHEx_OBProgram+0xd0>)
 80048fc:	4218      	tst	r0, r3
 80048fe:	d12e      	bne.n	800495e <HAL_FLASHEx_OBProgram+0xa2>
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0U)
 8004900:	69e3      	ldr	r3, [r4, #28]
 8004902:	f013 0f02 	tst.w	r3, #2
 8004906:	d12f      	bne.n	8004968 <HAL_FLASHEx_OBProgram+0xac>
  if ((pOBInit->OptionType & (OPTIONBYTE_SECURE_MODE | OPTIONBYTE_C2_BOOT_VECT | OPTIONBYTE_C2_DEBUG_ACCESS | OPTIONBYTE_SUBGHZSPI_SECURE_ACCESS)) != 0U)
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	f413 6f70 	tst.w	r3, #3840	; 0xf00
 800490e:	d130      	bne.n	8004972 <HAL_FLASHEx_OBProgram+0xb6>
  if ((pOBInit->OptionType & OPTIONBYTE_IPCC_BUF_ADDR) != 0U)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f013 0f10 	tst.w	r3, #16
 8004916:	d130      	bne.n	800497a <HAL_FLASHEx_OBProgram+0xbe>
  status = FLASH_OB_ProceedWriteOperation();
 8004918:	f7ff ffbc 	bl	8004894 <FLASH_OB_ProceedWriteOperation>
  __HAL_UNLOCK(&pFlash);
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_FLASHEx_OBProgram+0xcc>)
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
}
 8004922:	bd10      	pop	{r4, pc}
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 8004924:	68c2      	ldr	r2, [r0, #12]
 8004926:	6881      	ldr	r1, [r0, #8]
 8004928:	6840      	ldr	r0, [r0, #4]
 800492a:	f7ff fdd3 	bl	80044d4 <FLASH_OB_WRPConfig>
 800492e:	e7d4      	b.n	80048da <HAL_FLASHEx_OBProgram+0x1e>
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, pOBInit->RDPLevel);
 8004930:	6922      	ldr	r2, [r4, #16]
 8004932:	69a1      	ldr	r1, [r4, #24]
 8004934:	6960      	ldr	r0, [r4, #20]
 8004936:	f7ff fde3 	bl	8004500 <FLASH_OB_OptrConfig>
 800493a:	e7d9      	b.n	80048f0 <HAL_FLASHEx_OBProgram+0x34>
    optr = FLASH_OB_GetUser();
 800493c:	f7ff fe4a 	bl	80045d4 <FLASH_OB_GetUser>
    optr &= ~OB_USER_BOR_LEV;
 8004940:	f420 6060 	bic.w	r0, r0, #3584	; 0xe00
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	4601      	mov	r1, r0
 8004948:	f7ff fdda 	bl	8004500 <FLASH_OB_OptrConfig>
 800494c:	e7d0      	b.n	80048f0 <HAL_FLASHEx_OBProgram+0x34>
    optr = FLASH_OB_GetRDP();
 800494e:	f7ff fe35 	bl	80045bc <FLASH_OB_GetRDP>
 8004952:	4602      	mov	r2, r0
    FLASH_OB_OptrConfig(pOBInit->UserType, pOBInit->UserConfig, optr);
 8004954:	69a1      	ldr	r1, [r4, #24]
 8004956:	6960      	ldr	r0, [r4, #20]
 8004958:	f7ff fdd2 	bl	8004500 <FLASH_OB_OptrConfig>
 800495c:	e7c8      	b.n	80048f0 <HAL_FLASHEx_OBProgram+0x34>
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 800495e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	f7ff fddb 	bl	800451c <FLASH_OB_PCROP1AConfig>
 8004966:	e7cb      	b.n	8004900 <HAL_FLASHEx_OBProgram+0x44>
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 8004968:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800496a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800496c:	f7ff fdfa 	bl	8004564 <FLASH_OB_PCROP1BConfig>
 8004970:	e7ca      	b.n	8004908 <HAL_FLASHEx_OBProgram+0x4c>
    FLASH_OB_SecureConfig(pOBInit);
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff fea8 	bl	80046c8 <FLASH_OB_SecureConfig>
 8004978:	e7ca      	b.n	8004910 <HAL_FLASHEx_OBProgram+0x54>
    FLASH_OB_IPCCBufferAddrConfig(pOBInit->IPCCdataBufAddr);
 800497a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800497c:	f7ff fdfe 	bl	800457c <FLASH_OB_IPCCBufferAddrConfig>
 8004980:	e7ca      	b.n	8004918 <HAL_FLASHEx_OBProgram+0x5c>
  __HAL_LOCK(&pFlash);
 8004982:	2002      	movs	r0, #2
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200004f0 	.word	0x200004f0
 800498c:	80000001 	.word	0x80000001

08004990 <HAL_FLASHEx_OBGetConfig>:
{
 8004990:	b510      	push	{r4, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	4604      	mov	r4, r0
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8004996:	f640 731f 	movw	r3, #3871	; 0xf1f
 800499a:	6003      	str	r3, [r0, #0]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
 800499c:	6840      	ldr	r0, [r0, #4]
 800499e:	2801      	cmp	r0, #1
 80049a0:	d936      	bls.n	8004a10 <HAL_FLASHEx_OBGetConfig+0x80>
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80049a2:	f7ff fe0b 	bl	80045bc <FLASH_OB_GetRDP>
 80049a6:	6120      	str	r0, [r4, #16]
  pOBInit->UserConfig = FLASH_OB_GetUser();
 80049a8:	f7ff fe14 	bl	80045d4 <FLASH_OB_GetUser>
 80049ac:	61a0      	str	r0, [r4, #24]
  pOBInit->UserType = OB_USER_ALL;
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <HAL_FLASHEx_OBGetConfig+0x90>)
 80049b0:	6163      	str	r3, [r4, #20]
  FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr), &(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 80049b2:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80049bc:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80049c0:	f104 0120 	add.w	r1, r4, #32
 80049c4:	f104 001c 	add.w	r0, r4, #28
 80049c8:	f7ff fe0e 	bl	80045e8 <FLASH_OB_GetPCROP>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 80049cc:	69e3      	ldr	r3, [r4, #28]
 80049ce:	f043 0303 	orr.w	r3, r3, #3
 80049d2:	61e3      	str	r3, [r4, #28]
  pOBInit->IPCCdataBufAddr = FLASH_OB_GetIPCCBufferAddr();
 80049d4:	f7ff fe30 	bl	8004638 <FLASH_OB_GetIPCCBufferAddr>
 80049d8:	6560      	str	r0, [r4, #84]	; 0x54
  FLASH_OB_GetSecureMemoryConfig(&(pOBInit->SecureFlashStartAddr), &(pOBInit->HideProtectionStartAddr), &(pOBInit->SecureSRAM2StartAddr), &(pOBInit->SecureSRAM1StartAddr), &(pOBInit->SecureMode));
 80049da:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80049e4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80049e8:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80049ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80049f0:	f7ff ff0a 	bl	8004808 <FLASH_OB_GetSecureMemoryConfig>
  FLASH_OB_GetC2BootResetConfig(&(pOBInit->C2SecureBootVectAddr), &(pOBInit->C2BootRegion));
 80049f4:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80049f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049fc:	f7ff fe28 	bl	8004650 <FLASH_OB_GetC2BootResetConfig>
  pOBInit->SUBGHZSPISecureAccess = FLASH_OB_GetSUBGHZSPISecureAccess();
 8004a00:	f7ff fe46 	bl	8004690 <FLASH_OB_GetSUBGHZSPISecureAccess>
 8004a04:	6460      	str	r0, [r4, #68]	; 0x44
  pOBInit->C2DebugAccessMode = FLASH_OB_GetC2DebugAccessMode();
 8004a06:	f7ff fe4b 	bl	80046a0 <FLASH_OB_GetC2DebugAccessMode>
 8004a0a:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd10      	pop	{r4, pc}
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8004a10:	f104 020c 	add.w	r2, r4, #12
 8004a14:	f104 0108 	add.w	r1, r4, #8
 8004a18:	f7ff fdb8 	bl	800458c <FLASH_OB_GetWRP>
 8004a1c:	e7c1      	b.n	80049a2 <HAL_FLASHEx_OBGetConfig+0x12>
 8004a1e:	bf00      	nop
 8004a20:	cf8f7e00 	.word	0xcf8f7e00

08004a24 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004a24:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <FLASH_PageErase+0x18>)
 8004a26:	6953      	ldr	r3, [r2, #20]
 8004a28:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004a2c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004a30:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004a34:	f040 0002 	orr.w	r0, r0, #2
 8004a38:	6150      	str	r0, [r2, #20]
}
 8004a3a:	4770      	bx	lr
 8004a3c:	58004000 	.word	0x58004000

08004a40 <HAL_FLASHEx_Erase>:
{
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_FLASHEx_Erase+0x7c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d035      	beq.n	8004ab6 <HAL_FLASHEx_Erase+0x76>
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_FLASHEx_Erase+0x7c>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a5c:	f7ff fc8a 	bl	8004374 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004a60:	4606      	mov	r6, r0
 8004a62:	bb18      	cbnz	r0, 8004aac <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d013      	beq.n	8004a92 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a70:	686c      	ldr	r4, [r5, #4]
 8004a72:	686b      	ldr	r3, [r5, #4]
 8004a74:	68aa      	ldr	r2, [r5, #8]
 8004a76:	4413      	add	r3, r2
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	d913      	bls.n	8004aa4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f7ff ffd1 	bl	8004a24 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a86:	f7ff fc75 	bl	8004374 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	b948      	cbnz	r0, 8004aa2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a8e:	3401      	adds	r4, #1
 8004a90:	e7ef      	b.n	8004a72 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004a92:	f7ff fcd7 	bl	8004444 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a9a:	f7ff fc6b 	bl	8004374 <FLASH_WaitForLastOperation>
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	e002      	b.n	8004aa8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004aa2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004aa4:	f7ff fd0c 	bl	80044c0 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004aa8:	f7ff fcd6 	bl	8004458 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_FLASHEx_Erase+0x7c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
}
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004ab6:	2602      	movs	r6, #2
 8004ab8:	e7fb      	b.n	8004ab2 <HAL_FLASHEx_Erase+0x72>
 8004aba:	bf00      	nop
 8004abc:	200004f0 	.word	0x200004f0

08004ac0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004ac2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac4:	e069      	b.n	8004b9a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ac8:	005e      	lsls	r6, r3, #1
 8004aca:	2403      	movs	r4, #3
 8004acc:	40b4      	lsls	r4, r6
 8004ace:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad2:	68cc      	ldr	r4, [r1, #12]
 8004ad4:	40b4      	lsls	r4, r6
 8004ad6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004ad8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ada:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004adc:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ae0:	684c      	ldr	r4, [r1, #4]
 8004ae2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004ae6:	409c      	lsls	r4, r3
 8004ae8:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004aec:	6044      	str	r4, [r0, #4]
 8004aee:	e065      	b.n	8004bbc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af0:	08dd      	lsrs	r5, r3, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004af8:	f003 0407 	and.w	r4, r3, #7
 8004afc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b00:	240f      	movs	r4, #15
 8004b02:	fa04 f40c 	lsl.w	r4, r4, ip
 8004b06:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b0a:	690c      	ldr	r4, [r1, #16]
 8004b0c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004b10:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004b14:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004b18:	e067      	b.n	8004bea <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b1a:	2402      	movs	r4, #2
 8004b1c:	e000      	b.n	8004b20 <HAL_GPIO_Init+0x60>
 8004b1e:	2400      	movs	r4, #0
 8004b20:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b24:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b26:	f10c 0c02 	add.w	ip, ip, #2
 8004b2a:	4d4b      	ldr	r5, [pc, #300]	; (8004c58 <HAL_GPIO_Init+0x198>)
 8004b2c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b30:	4c4a      	ldr	r4, [pc, #296]	; (8004c5c <HAL_GPIO_Init+0x19c>)
 8004b32:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004b34:	43d4      	mvns	r4, r2
 8004b36:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b3a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004b3e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004b42:	d001      	beq.n	8004b48 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004b44:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004b48:	4d44      	ldr	r5, [pc, #272]	; (8004c5c <HAL_GPIO_Init+0x19c>)
 8004b4a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004b4c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004b4e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b52:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004b56:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004b5a:	d001      	beq.n	8004b60 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004b5c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004b60:	4d3e      	ldr	r5, [pc, #248]	; (8004c5c <HAL_GPIO_Init+0x19c>)
 8004b62:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004b64:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b68:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b6c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004b70:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004b74:	d001      	beq.n	8004b7a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004b76:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b7a:	4d38      	ldr	r5, [pc, #224]	; (8004c5c <HAL_GPIO_Init+0x19c>)
 8004b7c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b80:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b84:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b86:	684e      	ldr	r6, [r1, #4]
 8004b88:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004b8c:	d001      	beq.n	8004b92 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004b8e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004b92:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <HAL_GPIO_Init+0x19c>)
 8004b94:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004b98:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b9a:	680a      	ldr	r2, [r1, #0]
 8004b9c:	fa32 f403 	lsrs.w	r4, r2, r3
 8004ba0:	d058      	beq.n	8004c54 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ba2:	f04f 0c01 	mov.w	ip, #1
 8004ba6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004baa:	ea1c 0202 	ands.w	r2, ip, r2
 8004bae:	d0f3      	beq.n	8004b98 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bb0:	684c      	ldr	r4, [r1, #4]
 8004bb2:	f004 0403 	and.w	r4, r4, #3
 8004bb6:	3c01      	subs	r4, #1
 8004bb8:	2c01      	cmp	r4, #1
 8004bba:	d984      	bls.n	8004ac6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bbc:	684c      	ldr	r4, [r1, #4]
 8004bbe:	f004 0403 	and.w	r4, r4, #3
 8004bc2:	2c03      	cmp	r4, #3
 8004bc4:	d00c      	beq.n	8004be0 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004bc6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bc8:	005d      	lsls	r5, r3, #1
 8004bca:	f04f 0c03 	mov.w	ip, #3
 8004bce:	fa0c fc05 	lsl.w	ip, ip, r5
 8004bd2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd6:	688c      	ldr	r4, [r1, #8]
 8004bd8:	40ac      	lsls	r4, r5
 8004bda:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004bde:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004be0:	684c      	ldr	r4, [r1, #4]
 8004be2:	f004 0403 	and.w	r4, r4, #3
 8004be6:	2c02      	cmp	r4, #2
 8004be8:	d082      	beq.n	8004af0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004bea:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bec:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004bf0:	f04f 0c03 	mov.w	ip, #3
 8004bf4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004bf8:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfc:	684c      	ldr	r4, [r1, #4]
 8004bfe:	f004 0403 	and.w	r4, r4, #3
 8004c02:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c06:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004c0a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c0c:	684c      	ldr	r4, [r1, #4]
 8004c0e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004c12:	d0c1      	beq.n	8004b98 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c14:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004c18:	f10c 0502 	add.w	r5, ip, #2
 8004c1c:	4c0e      	ldr	r4, [pc, #56]	; (8004c58 <HAL_GPIO_Init+0x198>)
 8004c1e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c22:	f003 0403 	and.w	r4, r3, #3
 8004c26:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004c2a:	2407      	movs	r4, #7
 8004c2c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004c30:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c34:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004c38:	f43f af71 	beq.w	8004b1e <HAL_GPIO_Init+0x5e>
 8004c3c:	4c08      	ldr	r4, [pc, #32]	; (8004c60 <HAL_GPIO_Init+0x1a0>)
 8004c3e:	42a0      	cmp	r0, r4
 8004c40:	d006      	beq.n	8004c50 <HAL_GPIO_Init+0x190>
 8004c42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c46:	42a0      	cmp	r0, r4
 8004c48:	f43f af67 	beq.w	8004b1a <HAL_GPIO_Init+0x5a>
 8004c4c:	2407      	movs	r4, #7
 8004c4e:	e767      	b.n	8004b20 <HAL_GPIO_Init+0x60>
 8004c50:	2401      	movs	r4, #1
 8004c52:	e765      	b.n	8004b20 <HAL_GPIO_Init+0x60>
  }
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	58000800 	.word	0x58000800
 8004c60:	48000400 	.word	0x48000400

08004c64 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004c64:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004c66:	fa31 f203 	lsrs.w	r2, r1, r3
 8004c6a:	d071      	beq.n	8004d50 <HAL_GPIO_DeInit+0xec>
{
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	e02e      	b.n	8004cce <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c70:	2502      	movs	r5, #2
 8004c72:	e000      	b.n	8004c76 <HAL_GPIO_DeInit+0x12>
 8004c74:	2500      	movs	r5, #0
 8004c76:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004c7a:	45a4      	cmp	ip, r4
 8004c7c:	d049      	beq.n	8004d12 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004c7e:	6804      	ldr	r4, [r0, #0]
 8004c80:	005d      	lsls	r5, r3, #1
 8004c82:	f04f 0c03 	mov.w	ip, #3
 8004c86:	fa0c fc05 	lsl.w	ip, ip, r5
 8004c8a:	ea44 040c 	orr.w	r4, r4, ip
 8004c8e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c90:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004c94:	f10e 0e08 	add.w	lr, lr, #8
 8004c98:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004c9c:	f003 0507 	and.w	r5, r3, #7
 8004ca0:	00ae      	lsls	r6, r5, #2
 8004ca2:	250f      	movs	r5, #15
 8004ca4:	40b5      	lsls	r5, r6
 8004ca6:	ea24 0405 	bic.w	r4, r4, r5
 8004caa:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cae:	6884      	ldr	r4, [r0, #8]
 8004cb0:	ea24 040c 	bic.w	r4, r4, ip
 8004cb4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb6:	6844      	ldr	r4, [r0, #4]
 8004cb8:	ea24 0202 	bic.w	r2, r4, r2
 8004cbc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cbe:	68c2      	ldr	r2, [r0, #12]
 8004cc0:	ea22 020c 	bic.w	r2, r2, ip
 8004cc4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004cc6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004cc8:	fa31 f203 	lsrs.w	r2, r1, r3
 8004ccc:	d03f      	beq.n	8004d4e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cce:	2201      	movs	r2, #1
 8004cd0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004cd2:	ea12 0701 	ands.w	r7, r2, r1
 8004cd6:	d0f6      	beq.n	8004cc6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004cd8:	089e      	lsrs	r6, r3, #2
 8004cda:	1cb5      	adds	r5, r6, #2
 8004cdc:	4c1d      	ldr	r4, [pc, #116]	; (8004d54 <HAL_GPIO_DeInit+0xf0>)
 8004cde:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004ce2:	f003 0c03 	and.w	ip, r3, #3
 8004ce6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004cea:	f04f 0e07 	mov.w	lr, #7
 8004cee:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004cf2:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cf6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004cfa:	d0bb      	beq.n	8004c74 <HAL_GPIO_DeInit+0x10>
 8004cfc:	4d16      	ldr	r5, [pc, #88]	; (8004d58 <HAL_GPIO_DeInit+0xf4>)
 8004cfe:	42a8      	cmp	r0, r5
 8004d00:	d005      	beq.n	8004d0e <HAL_GPIO_DeInit+0xaa>
 8004d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d06:	42a8      	cmp	r0, r5
 8004d08:	d0b2      	beq.n	8004c70 <HAL_GPIO_DeInit+0xc>
 8004d0a:	2507      	movs	r5, #7
 8004d0c:	e7b3      	b.n	8004c76 <HAL_GPIO_DeInit+0x12>
 8004d0e:	2501      	movs	r5, #1
 8004d10:	e7b1      	b.n	8004c76 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004d12:	4c12      	ldr	r4, [pc, #72]	; (8004d5c <HAL_GPIO_DeInit+0xf8>)
 8004d14:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004d18:	ea25 0507 	bic.w	r5, r5, r7
 8004d1c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d20:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004d24:	ea25 0507 	bic.w	r5, r5, r7
 8004d28:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004d2c:	6825      	ldr	r5, [r4, #0]
 8004d2e:	ea25 0507 	bic.w	r5, r5, r7
 8004d32:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d34:	6865      	ldr	r5, [r4, #4]
 8004d36:	ea25 0707 	bic.w	r7, r5, r7
 8004d3a:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d3c:	4d05      	ldr	r5, [pc, #20]	; (8004d54 <HAL_GPIO_DeInit+0xf0>)
 8004d3e:	3602      	adds	r6, #2
 8004d40:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004d44:	ea24 040e 	bic.w	r4, r4, lr
 8004d48:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004d4c:	e797      	b.n	8004c7e <HAL_GPIO_DeInit+0x1a>
  }
}
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	48000400 	.word	0x48000400
 8004d5c:	58000800 	.word	0x58000800

08004d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d60:	b10a      	cbz	r2, 8004d66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d62:	6181      	str	r1, [r0, #24]
 8004d64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d66:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004d68:	4770      	bx	lr

08004d6a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d6a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d6c:	ea01 0203 	and.w	r2, r1, r3
 8004d70:	ea21 0103 	bic.w	r1, r1, r3
 8004d74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d78:	6181      	str	r1, [r0, #24]
}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d7c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	4203      	tst	r3, r0
 8004d84:	d100      	bne.n	8004d88 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004d86:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d88:	4b02      	ldr	r3, [pc, #8]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004d8a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d8c:	f7fd fc2c 	bl	80025e8 <HAL_GPIO_EXTI_Callback>
}
 8004d90:	e7f9      	b.n	8004d86 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004d92:	bf00      	nop
 8004d94:	58000800 	.word	0x58000800

08004d98 <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004d98:	4770      	bx	lr

08004d9a <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004d9a:	4770      	bx	lr

08004d9c <HAL_IPCC_TX_IRQHandler>:
{
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	4607      	mov	r7, r0
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_IPCC_TX_IRQHandler+0x50>)
 8004da2:	685d      	ldr	r5, [r3, #4]
 8004da4:	43ed      	mvns	r5, r5
 8004da6:	f405 157c 	and.w	r5, r5, #4128768	; 0x3f0000
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	ea25 4503 	bic.w	r5, r5, r3, lsl #16
  uint32_t ch_count = 0U;
 8004db0:	2600      	movs	r6, #0
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004db2:	e006      	b.n	8004dc2 <HAL_IPCC_TX_IRQHandler+0x26>
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8004db4:	2200      	movs	r2, #0
 8004db6:	4631      	mov	r1, r6
 8004db8:	4638      	mov	r0, r7
 8004dba:	4798      	blx	r3
      irqmask =  irqmask & ~(bit_pos);
 8004dbc:	ea25 0504 	bic.w	r5, r5, r4
    ch_count++;
 8004dc0:	3601      	adds	r6, #1
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004dc2:	b195      	cbz	r5, 8004dea <HAL_IPCC_TX_IRQHandler+0x4e>
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8004dc4:	f006 040f 	and.w	r4, r6, #15
 8004dc8:	f104 0310 	add.w	r3, r4, #16
 8004dcc:	2401      	movs	r4, #1
 8004dce:	409c      	lsls	r4, r3
    if ((irqmask & bit_pos) != 0U)
 8004dd0:	4225      	tst	r5, r4
 8004dd2:	d0f5      	beq.n	8004dc0 <HAL_IPCC_TX_IRQHandler+0x24>
      currentInstance->MR |= bit_pos;
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <HAL_IPCC_TX_IRQHandler+0x50>)
 8004dd6:	6853      	ldr	r3, [r2, #4]
 8004dd8:	4323      	orrs	r3, r4
 8004dda:	6053      	str	r3, [r2, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8004ddc:	1db3      	adds	r3, r6, #6
 8004dde:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <HAL_IPCC_TX_IRQHandler+0x18>
 8004de8:	e7e8      	b.n	8004dbc <HAL_IPCC_TX_IRQHandler+0x20>
}
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dec:	58000c00 	.word	0x58000c00

08004df0 <HAL_IPCC_RX_IRQHandler>:
{
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	4607      	mov	r7, r0
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8004df4:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <HAL_IPCC_RX_IRQHandler+0x48>)
 8004df6:	6856      	ldr	r6, [r2, #4]
 8004df8:	43f6      	mvns	r6, r6
 8004dfa:	f006 033f 	and.w	r3, r6, #63	; 0x3f
  irqmask = irqmask & otherInstance->SR;
 8004dfe:	69d6      	ldr	r6, [r2, #28]
 8004e00:	401e      	ands	r6, r3
  uint32_t ch_count = 0U;
 8004e02:	2500      	movs	r5, #0
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004e04:	e006      	b.n	8004e14 <HAL_IPCC_RX_IRQHandler+0x24>
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8004e06:	2201      	movs	r2, #1
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	4798      	blx	r3
      irqmask = irqmask & ~(bit_pos);
 8004e0e:	ea26 0604 	bic.w	r6, r6, r4
    ch_count++;
 8004e12:	3501      	adds	r5, #1
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8004e14:	b17e      	cbz	r6, 8004e36 <HAL_IPCC_RX_IRQHandler+0x46>
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8004e16:	f005 030f 	and.w	r3, r5, #15
 8004e1a:	2401      	movs	r4, #1
 8004e1c:	409c      	lsls	r4, r3
    if ((irqmask & bit_pos) != 0U)
 8004e1e:	4226      	tst	r6, r4
 8004e20:	d0f7      	beq.n	8004e12 <HAL_IPCC_RX_IRQHandler+0x22>
      currentInstance->MR |= bit_pos;
 8004e22:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <HAL_IPCC_RX_IRQHandler+0x48>)
 8004e24:	6853      	ldr	r3, [r2, #4]
 8004e26:	4323      	orrs	r3, r4
 8004e28:	6053      	str	r3, [r2, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8004e2a:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e8      	bne.n	8004e06 <HAL_IPCC_RX_IRQHandler+0x16>
 8004e34:	e7eb      	b.n	8004e0e <HAL_IPCC_RX_IRQHandler+0x1e>
}
 8004e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e38:	58000c00 	.word	0x58000c00

08004e3c <IPCC_UnmaskInterrupt>:
#if defined(CORE_CM0PLUS)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
 8004e3c:	b959      	cbnz	r1, 8004e56 <IPCC_UnmaskInterrupt+0x1a>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8004e3e:	490b      	ldr	r1, [pc, #44]	; (8004e6c <IPCC_UnmaskInterrupt+0x30>)
 8004e40:	684b      	ldr	r3, [r1, #4]
 8004e42:	f000 000f 	and.w	r0, r0, #15
 8004e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e4a:	fa02 f000 	lsl.w	r0, r2, r0
 8004e4e:	ea23 0000 	bic.w	r0, r3, r0
 8004e52:	6048      	str	r0, [r1, #4]
 8004e54:	4770      	bx	lr
  }
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8004e56:	4905      	ldr	r1, [pc, #20]	; (8004e6c <IPCC_UnmaskInterrupt+0x30>)
 8004e58:	684b      	ldr	r3, [r1, #4]
 8004e5a:	f000 000f 	and.w	r0, r0, #15
 8004e5e:	2201      	movs	r2, #1
 8004e60:	fa02 f000 	lsl.w	r0, r2, r0
 8004e64:	ea23 0000 	bic.w	r0, r3, r0
 8004e68:	6048      	str	r0, [r1, #4]
  }
}
 8004e6a:	4770      	bx	lr
 8004e6c:	58000c00 	.word	0x58000c00

08004e70 <HAL_IPCC_ActivateNotification>:
  if (hipcc != NULL)
 8004e70:	b378      	cbz	r0, 8004ed2 <HAL_IPCC_ActivateNotification+0x62>
{
 8004e72:	b510      	push	{r4, lr}
 8004e74:	460c      	mov	r4, r1
 8004e76:	4686      	mov	lr, r0
    if (hipcc->State == HAL_IPCC_STATE_READY)
 8004e78:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8004e7c:	fa5f fc8c 	uxtb.w	ip, ip
 8004e80:	f1bc 0f01 	cmp.w	ip, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_IPCC_ActivateNotification+0x1a>
      err = HAL_ERROR;
 8004e86:	2001      	movs	r0, #1
}
 8004e88:	bd10      	pop	{r4, pc}
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
 8004e8a:	b982      	cbnz	r2, 8004eae <HAL_IPCC_ActivateNotification+0x3e>
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
 8004e8c:	3106      	adds	r1, #6
 8004e8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004e92:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8004e94:	f004 010f 	and.w	r1, r4, #15
 8004e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e9c:	fa03 f101 	lsl.w	r1, r3, r1
 8004ea0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	6343      	str	r3, [r0, #52]	; 0x34
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
 8004ea6:	2a01      	cmp	r2, #1
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_IPCC_ActivateNotification+0x56>
  HAL_StatusTypeDef err = HAL_OK;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e7ec      	b.n	8004e88 <HAL_IPCC_ActivateNotification+0x18>
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
 8004eae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004eb2:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
 8004eb4:	f004 010f 	and.w	r1, r4, #15
 8004eb8:	2301      	movs	r3, #1
 8004eba:	fa03 f101 	lsl.w	r1, r3, r1
 8004ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6343      	str	r3, [r0, #52]	; 0x34
 8004ec4:	e7ef      	b.n	8004ea6 <HAL_IPCC_ActivateNotification+0x36>
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffb7 	bl	8004e3c <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e7da      	b.n	8004e88 <HAL_IPCC_ActivateNotification+0x18>
    err = HAL_ERROR;
 8004ed2:	2001      	movs	r0, #1
}
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_IPCC_NotifyCPU>:
  if (hipcc->State == HAL_IPCC_STATE_READY)
 8004ed8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <HAL_IPCC_NotifyCPU+0xe>
    err = HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
}
 8004ee4:	4770      	bx	lr
{
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	468c      	mov	ip, r1
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_IPCC_NotifyCPU+0x44>)
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	b962      	cbnz	r2, 8004f0a <HAL_IPCC_NotifyCPU+0x32>
 8004ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ef4:	f00c 040f 	and.w	r4, ip, #15
 8004ef8:	40a3      	lsls	r3, r4
 8004efa:	4319      	orrs	r1, r3
 8004efc:	4c07      	ldr	r4, [pc, #28]	; (8004f1c <HAL_IPCC_NotifyCPU+0x44>)
 8004efe:	60a1      	str	r1, [r4, #8]
    if ((hipcc->callbackRequest & mask) == mask)
 8004f00:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f02:	438b      	bics	r3, r1
 8004f04:	d003      	beq.n	8004f0e <HAL_IPCC_NotifyCPU+0x36>
  HAL_StatusTypeDef err = HAL_OK;
 8004f06:	2000      	movs	r0, #0
}
 8004f08:	bd10      	pop	{r4, pc}
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7f2      	b.n	8004ef4 <HAL_IPCC_NotifyCPU+0x1c>
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4660      	mov	r0, ip
 8004f12:	f7ff ff93 	bl	8004e3c <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
 8004f16:	2000      	movs	r0, #0
 8004f18:	e7f6      	b.n	8004f08 <HAL_IPCC_NotifyCPU+0x30>
 8004f1a:	bf00      	nop
 8004f1c:	58000c00 	.word	0x58000c00

08004f20 <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	e009      	b.n	8004f38 <IPCC_SetDefaultCallbacks+0x18>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004f24:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8004f28:	4905      	ldr	r1, [pc, #20]	; (8004f40 <IPCC_SetDefaultCallbacks+0x20>)
 8004f2a:	6051      	str	r1, [r2, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004f2c:	1d9a      	adds	r2, r3, #6
 8004f2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f32:	4904      	ldr	r1, [pc, #16]	; (8004f44 <IPCC_SetDefaultCallbacks+0x24>)
 8004f34:	6051      	str	r1, [r2, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f36:	3301      	adds	r3, #1
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d9f3      	bls.n	8004f24 <IPCC_SetDefaultCallbacks+0x4>
  }
}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	08004d99 	.word	0x08004d99
 8004f44:	08004d9b 	.word	0x08004d9b

08004f48 <IPCC_Reset_Register>:
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6003      	str	r3, [r0, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004f4c:	f04f 133f 	mov.w	r3, #4128831	; 0x3f003f
 8004f50:	6043      	str	r3, [r0, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004f52:	233f      	movs	r3, #63	; 0x3f
 8004f54:	6083      	str	r3, [r0, #8]
}
 8004f56:	4770      	bx	lr

08004f58 <HAL_IPCC_Init>:
  if (hipcc != NULL)
 8004f58:	b1c0      	cbz	r0, 8004f8c <HAL_IPCC_Init+0x34>
{
 8004f5a:	b538      	push	{r3, r4, r5, lr}
 8004f5c:	4604      	mov	r4, r0
    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004f5e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004f62:	b183      	cbz	r3, 8004f86 <HAL_IPCC_Init+0x2e>
    IPCC_Reset_Register(currentInstance);
 8004f64:	4d0a      	ldr	r5, [pc, #40]	; (8004f90 <HAL_IPCC_Init+0x38>)
 8004f66:	4628      	mov	r0, r5
 8004f68:	f7ff ffee 	bl	8004f48 <IPCC_Reset_Register>
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f72:	602b      	str	r3, [r5, #0]
    IPCC_SetDefaultCallbacks(hipcc);
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff ffd3 	bl	8004f20 <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	6360      	str	r0, [r4, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
      HAL_IPCC_MspInit(hipcc);
 8004f86:	f7fc f951 	bl	800122c <HAL_IPCC_MspInit>
 8004f8a:	e7eb      	b.n	8004f64 <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
 8004f8c:	2001      	movs	r0, #1
}
 8004f8e:	4770      	bx	lr
 8004f90:	58000c00 	.word	0x58000c00

08004f94 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f94:	4a02      	ldr	r2, [pc, #8]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9c:	6013      	str	r3, [r2, #0]
}
 8004f9e:	4770      	bx	lr
 8004fa0:	58000400 	.word	0x58000400

08004fa4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004fa8:	b9a0      	cbnz	r0, 8004fd4 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fb2:	d10a      	bne.n	8004fca <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <HAL_PWR_EnterSLEEPMode+0x48>)
 8004fb6:	6913      	ldr	r3, [r2, #16]
 8004fb8:	f023 0304 	bic.w	r3, r3, #4
 8004fbc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004fbe:	2c01      	cmp	r4, #1
 8004fc0:	d010      	beq.n	8004fe4 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004fc2:	bf40      	sev
    __WFE();
 8004fc4:	bf20      	wfe
    __WFE();
 8004fc6:	bf20      	wfe
  }
}
 8004fc8:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004fca:	f000 f843 	bl	8005054 <HAL_PWREx_DisableLowPowerRunMode>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_PWR_EnterSLEEPMode+0x10>
 8004fd2:	e7f9      	b.n	8004fc8 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004fdc:	d1ea      	bne.n	8004fb4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004fde:	f000 f831 	bl	8005044 <HAL_PWREx_EnableLowPowerRunMode>
 8004fe2:	e7e7      	b.n	8004fb4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004fe4:	bf30      	wfi
 8004fe6:	e7ef      	b.n	8004fc8 <HAL_PWR_EnterSLEEPMode+0x24>
 8004fe8:	58000400 	.word	0x58000400
 8004fec:	e000ed00 	.word	0xe000ed00

08004ff0 <HAL_PWR_EnterSTANDBYMode>:
#ifdef CORE_CM0PLUS
  /* Set Stand-by mode */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
#else
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004ff0:	4a06      	ldr	r2, [pc, #24]	; (800500c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	f023 0307 	bic.w	r3, r3, #7
 8004ff8:	f043 0303 	orr.w	r3, r3, #3
 8004ffc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8005000:	6913      	ldr	r3, [r2, #16]
 8005002:	f043 0304 	orr.w	r3, r3, #4
 8005006:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif

  /* Request Wait For Interrupt */
  __WFI();
 8005008:	bf30      	wfi
           - If system was in Standby mode (other CPU in Standby or Shutdown),
             then at wake-up program restarts at reset state
           - If system was in Run or Stop mode (other CPU in Run, Sleep, Stop),
             then at wake-up program continues from this point
  */
}
 800500a:	4770      	bx	lr
 800500c:	58000400 	.word	0x58000400
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <HAL_PWREx_GetVoltageRange+0xc>)
 8005016:	6818      	ldr	r0, [r3, #0]
}
 8005018:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	58000400 	.word	0x58000400

08005024 <HAL_PWREx_ReleaseCore>:
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8005024:	4a02      	ldr	r2, [pc, #8]	; (8005030 <HAL_PWREx_ReleaseCore+0xc>)
 8005026:	68d3      	ldr	r3, [r2, #12]
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	60d3      	str	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
}
 800502e:	4770      	bx	lr
 8005030:	58000400 	.word	0x58000400

08005034 <HAL_PWREx_EnableSRAMRetention>:
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8005034:	4a02      	ldr	r2, [pc, #8]	; (8005040 <HAL_PWREx_EnableSRAMRetention+0xc>)
 8005036:	6893      	ldr	r3, [r2, #8]
 8005038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503c:	6093      	str	r3, [r2, #8]
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
  LL_PWR_EnableSRAM2Retention();
}
 800503e:	4770      	bx	lr
 8005040:	58000400 	.word	0x58000400

08005044 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005044:	4a02      	ldr	r2, [pc, #8]	; (8005050 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	4770      	bx	lr
 8005050:	58000400 	.word	0x58000400

08005054 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005054:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800505e:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2232      	movs	r2, #50	; 0x32
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	4a0c      	ldr	r2, [pc, #48]	; (800509c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005070:	e000      	b.n	8005074 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005072:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005074:	4a07      	ldr	r2, [pc, #28]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005076:	6952      	ldr	r2, [r2, #20]
 8005078:	f412 7f00 	tst.w	r2, #512	; 0x200
 800507c:	d001      	beq.n	8005082 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f7      	bne.n	8005072 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f413 7f00 	tst.w	r3, #512	; 0x200
 800508a:	d101      	bne.n	8005090 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800508c:	2000      	movs	r0, #0
 800508e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005090:	2003      	movs	r0, #3
}
 8005092:	4770      	bx	lr
 8005094:	58000400 	.word	0x58000400
 8005098:	20000078 	.word	0x20000078
 800509c:	431bde83 	.word	0x431bde83

080050a0 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80050a0:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80050b0:	6913      	ldr	r3, [r2, #16]
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80050b8:	2801      	cmp	r0, #1
 80050ba:	d008      	beq.n	80050ce <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80050bc:	bf40      	sev
    __WFE();
 80050be:	bf20      	wfe
    __WFE();
 80050c0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80050c4:	6913      	ldr	r3, [r2, #16]
 80050c6:	f023 0304 	bic.w	r3, r3, #4
 80050ca:	6113      	str	r3, [r2, #16]
}
 80050cc:	4770      	bx	lr
    __WFI();
 80050ce:	bf30      	wfi
 80050d0:	e7f7      	b.n	80050c2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80050d2:	bf00      	nop
 80050d4:	58000400 	.word	0x58000400
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80050dc:	b530      	push	{r4, r5, lr}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	4604      	mov	r4, r0
 80050e2:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <RCC_SetFlashLatency+0xb4>)
 80050e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80050f0:	f103 0208 	add.w	r2, r3, #8
 80050f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050f8:	9004      	str	r0, [sp, #16]
 80050fa:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80050fe:	ad01      	add	r5, sp, #4
 8005100:	3310      	adds	r3, #16
 8005102:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005106:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800510e:	d007      	beq.n	8005120 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005110:	2300      	movs	r3, #0
 8005112:	e014      	b.n	800513e <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005114:	aa08      	add	r2, sp, #32
 8005116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800511a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800511e:	e01e      	b.n	800515e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005120:	2300      	movs	r3, #0
 8005122:	2b02      	cmp	r3, #2
 8005124:	d808      	bhi.n	8005138 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005126:	aa08      	add	r2, sp, #32
 8005128:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800512c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005130:	42a2      	cmp	r2, r4
 8005132:	d2ef      	bcs.n	8005114 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005134:	3301      	adds	r3, #1
 8005136:	e7f4      	b.n	8005122 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005138:	2500      	movs	r5, #0
 800513a:	e010      	b.n	800515e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800513c:	3301      	adds	r3, #1
 800513e:	2b02      	cmp	r3, #2
 8005140:	d80c      	bhi.n	800515c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005142:	aa08      	add	r2, sp, #32
 8005144:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005148:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800514c:	42a2      	cmp	r2, r4
 800514e:	d3f5      	bcc.n	800513c <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005150:	aa08      	add	r2, sp, #32
 8005152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005156:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800515a:	e000      	b.n	800515e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800515c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800515e:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <RCC_SetFlashLatency+0xb8>)
 8005160:	6813      	ldr	r3, [r2, #0]
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	432b      	orrs	r3, r5
 8005168:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800516a:	f7fc fab5 	bl	80016d8 <HAL_GetTick>
 800516e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <RCC_SetFlashLatency+0xb8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	42ab      	cmp	r3, r5
 800517a:	d006      	beq.n	800518a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800517c:	f7fc faac 	bl	80016d8 <HAL_GetTick>
 8005180:	1b00      	subs	r0, r0, r4
 8005182:	2802      	cmp	r0, #2
 8005184:	d9f4      	bls.n	8005170 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005186:	2003      	movs	r0, #3
 8005188:	e000      	b.n	800518c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800518a:	2000      	movs	r0, #0
}
 800518c:	b009      	add	sp, #36	; 0x24
 800518e:	bd30      	pop	{r4, r5, pc}
 8005190:	0800a990 	.word	0x0800a990
 8005194:	58004000 	.word	0x58004000

08005198 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005198:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800519a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80051a0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80051b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051b6:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80051ba:	f7ff ff2b 	bl	8005014 <HAL_PWREx_GetVoltageRange>
 80051be:	4601      	mov	r1, r0
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80051c2:	fba0 3004 	umull	r3, r0, r0, r4
 80051c6:	0c80      	lsrs	r0, r0, #18
 80051c8:	f7ff ff88 	bl	80050dc <RCC_SetFlashLatency>
}
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	0800b2e0 	.word	0x0800b2e0
 80051d4:	0800b280 	.word	0x0800b280
 80051d8:	431bde83 	.word	0x431bde83

080051dc <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051e8:	f011 010c 	ands.w	r1, r1, #12
 80051ec:	d00a      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x28>
 80051ee:	290c      	cmp	r1, #12
 80051f0:	d006      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f2:	2904      	cmp	r1, #4
 80051f4:	d047      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f6:	2908      	cmp	r1, #8
 80051f8:	d03b      	beq.n	8005272 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80051fa:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80051fc:	4610      	mov	r0, r2
 80051fe:	e026      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005200:	2b01      	cmp	r3, #1
 8005202:	d1f6      	bne.n	80051f2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f013 0308 	ands.w	r3, r3, #8
 800520e:	d00d      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x50>
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f013 0308 	ands.w	r3, r3, #8
 800521a:	d124      	bne.n	8005266 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800521c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005220:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005224:	4a2e      	ldr	r2, [pc, #184]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800522a:	e00e      	b.n	800524a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800522c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	f012 0f08 	tst.w	r2, #8
 8005236:	d112      	bne.n	800525e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005240:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800524a:	b1d1      	cbz	r1, 8005282 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800524c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d01a      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800525c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800525e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	e7ee      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x68>
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800526c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005270:	e7d8      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 800527c:	d106      	bne.n	800528c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800527e:	4819      	ldr	r0, [pc, #100]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005280:	e7e5      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005282:	4610      	mov	r0, r2
 8005284:	e7e3      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005286:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005288:	4817      	ldr	r0, [pc, #92]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800528a:	e7e0      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800528c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800528e:	4816      	ldr	r0, [pc, #88]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005290:	e7dd      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800529c:	2b02      	cmp	r3, #2
 800529e:	d009      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0xd8>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d108      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80052a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80052ae:	d115      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80052b0:	4a0c      	ldr	r2, [pc, #48]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b2:	e000      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80052b4:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	68d8      	ldr	r0, [r3, #12]
 80052bc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80052c0:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80052c4:	68d8      	ldr	r0, [r3, #12]
 80052c6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80052ca:	3001      	adds	r0, #1
 80052cc:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052d0:	68d8      	ldr	r0, [r3, #12]
 80052d2:	0f40      	lsrs	r0, r0, #29
 80052d4:	3001      	adds	r0, #1
 80052d6:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80052da:	e7bf      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80052dc:	4a02      	ldr	r2, [pc, #8]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052de:	e7ea      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0xda>
 80052e0:	0800b2e0 	.word	0x0800b2e0
 80052e4:	01e84800 	.word	0x01e84800
 80052e8:	00f42400 	.word	0x00f42400

080052ec <HAL_RCC_GetHCLKFreq>:
{
 80052ec:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80052ee:	f7ff ff75 	bl	80051dc <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80052fc:	4a02      	ldr	r2, [pc, #8]	; (8005308 <HAL_RCC_GetHCLKFreq+0x1c>)
 80052fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005302:	fbb0 f0f3 	udiv	r0, r0, r3
 8005306:	bd08      	pop	{r3, pc}
 8005308:	0800b280 	.word	0x0800b280

0800530c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800530c:	2800      	cmp	r0, #0
 800530e:	f000 8311 	beq.w	8005934 <HAL_RCC_OscConfig+0x628>
{
 8005312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005314:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531a:	689d      	ldr	r5, [r3, #8]
 800531c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005320:	68de      	ldr	r6, [r3, #12]
 8005322:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	f013 0f20 	tst.w	r3, #32
 800532c:	d02a      	beq.n	8005384 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800532e:	2d00      	cmp	r5, #0
 8005330:	d065      	beq.n	80053fe <HAL_RCC_OscConfig+0xf2>
 8005332:	2d0c      	cmp	r5, #12
 8005334:	d061      	beq.n	80053fa <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005336:	6a23      	ldr	r3, [r4, #32]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80bf 	beq.w	80054bc <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800533e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800534a:	f7fc f9c5 	bl	80016d8 <HAL_GetTick>
 800534e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f013 0f02 	tst.w	r3, #2
 800535a:	f000 80a7 	beq.w	80054ac <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f042 0208 	orr.w	r2, r2, #8
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005370:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005376:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800537e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005382:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f013 0f01 	tst.w	r3, #1
 800538a:	f000 80b5 	beq.w	80054f8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800538e:	2d08      	cmp	r5, #8
 8005390:	f000 80ae 	beq.w	80054f0 <HAL_RCC_OscConfig+0x1e4>
 8005394:	2d0c      	cmp	r5, #12
 8005396:	f000 80a8 	beq.w	80054ea <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800539a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053a4:	68a1      	ldr	r1, [r4, #8]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053aa:	6863      	ldr	r3, [r4, #4]
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	f000 80c4 	beq.w	800553c <HAL_RCC_OscConfig+0x230>
 80053b4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80053b8:	f000 80c5 	beq.w	8005546 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80053ce:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80c2 	beq.w	800555c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 80053d8:	f7fc f97e 	bl	80016d8 <HAL_GetTick>
 80053dc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80053de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80053e8:	f040 8086 	bne.w	80054f8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fc f974 	bl	80016d8 <HAL_GetTick>
 80053f0:	1bc0      	subs	r0, r0, r7
 80053f2:	2864      	cmp	r0, #100	; 0x64
 80053f4:	d9f3      	bls.n	80053de <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80053f6:	2003      	movs	r0, #3
 80053f8:	e2a9      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053fa:	2e01      	cmp	r6, #1
 80053fc:	d19b      	bne.n	8005336 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053fe:	6a23      	ldr	r3, [r4, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8299 	beq.w	8005938 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005406:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f013 0f08 	tst.w	r3, #8
 8005412:	d029      	beq.n	8005468 <HAL_RCC_OscConfig+0x15c>
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541e:	4298      	cmp	r0, r3
 8005420:	d92a      	bls.n	8005478 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005422:	f7ff feb9 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 8005426:	2800      	cmp	r0, #0
 8005428:	f040 8288 	bne.w	800593c <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	f042 0208 	orr.w	r2, r2, #8
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800543e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005444:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800544c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005450:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005452:	f7ff ff4b 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005456:	4bba      	ldr	r3, [pc, #744]	; (8005740 <HAL_RCC_OscConfig+0x434>)
 8005458:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800545a:	4bba      	ldr	r3, [pc, #744]	; (8005744 <HAL_RCC_OscConfig+0x438>)
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f7fc f939 	bl	80016d4 <HAL_InitTick>
        if (status != HAL_OK)
 8005462:	2800      	cmp	r0, #0
 8005464:	d08e      	beq.n	8005384 <HAL_RCC_OscConfig+0x78>
 8005466:	e272      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005476:	e7d2      	b.n	800541e <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800548a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005490:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005498:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800549c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800549e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80054a0:	f7ff fe7a 	bl	8005198 <RCC_SetFlashLatencyFromMSIRange>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d0d4      	beq.n	8005452 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80054a8:	2001      	movs	r0, #1
 80054aa:	e250      	b.n	800594e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ac:	f7fc f914 	bl	80016d8 <HAL_GetTick>
 80054b0:	1bc0      	subs	r0, r0, r7
 80054b2:	2802      	cmp	r0, #2
 80054b4:	f67f af4c 	bls.w	8005350 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80054b8:	2003      	movs	r0, #3
 80054ba:	e248      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80054bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c0:	6813      	ldr	r3, [r2, #0]
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80054c8:	f7fc f906 	bl	80016d8 <HAL_GetTick>
 80054cc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f013 0f02 	tst.w	r3, #2
 80054d8:	f43f af54 	beq.w	8005384 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054dc:	f7fc f8fc 	bl	80016d8 <HAL_GetTick>
 80054e0:	1bc0      	subs	r0, r0, r7
 80054e2:	2802      	cmp	r0, #2
 80054e4:	d9f3      	bls.n	80054ce <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 80054e6:	2003      	movs	r0, #3
 80054e8:	e231      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054ea:	2e03      	cmp	r6, #3
 80054ec:	f47f af55 	bne.w	800539a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8224 	beq.w	8005940 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f013 0f02 	tst.w	r3, #2
 80054fe:	d056      	beq.n	80055ae <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005500:	2d04      	cmp	r5, #4
 8005502:	d03d      	beq.n	8005580 <HAL_RCC_OscConfig+0x274>
 8005504:	2d0c      	cmp	r5, #12
 8005506:	d039      	beq.n	800557c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 808a 	beq.w	8005624 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800551c:	f7fc f8dc 	bl	80016d8 <HAL_GetTick>
 8005520:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800552c:	d136      	bne.n	800559c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552e:	f7fc f8d3 	bl	80016d8 <HAL_GetTick>
 8005532:	1b80      	subs	r0, r0, r6
 8005534:	2802      	cmp	r0, #2
 8005536:	d9f4      	bls.n	8005522 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005538:	2003      	movs	r0, #3
 800553a:	e208      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800553c:	6813      	ldr	r3, [r2, #0]
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	e744      	b.n	80053d0 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005550:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	e739      	b.n	80053d0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800555c:	f7fc f8bc 	bl	80016d8 <HAL_GetTick>
 8005560:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800556c:	d0c4      	beq.n	80054f8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556e:	f7fc f8b3 	bl	80016d8 <HAL_GetTick>
 8005572:	1bc0      	subs	r0, r0, r7
 8005574:	2864      	cmp	r0, #100	; 0x64
 8005576:	d9f4      	bls.n	8005562 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005578:	2003      	movs	r0, #3
 800557a:	e1e8      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800557c:	2e02      	cmp	r6, #2
 800557e:	d1c3      	bne.n	8005508 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 81de 	beq.w	8005944 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800558a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558e:	6853      	ldr	r3, [r2, #4]
 8005590:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005594:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005598:	6053      	str	r3, [r2, #4]
}
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800559e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a2:	6853      	ldr	r3, [r2, #4]
 80055a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80055ac:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f013 0f08 	tst.w	r3, #8
 80055b4:	d07e      	beq.n	80056b4 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d062      	beq.n	8005682 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80055c4:	69e1      	ldr	r1, [r4, #28]
 80055c6:	f003 0210 	and.w	r2, r3, #16
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d011      	beq.n	80055f2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055ce:	f003 0203 	and.w	r2, r3, #3
 80055d2:	2a02      	cmp	r2, #2
 80055d4:	f000 81b8 	beq.w	8005948 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80055d8:	f013 0f01 	tst.w	r3, #1
 80055dc:	d138      	bne.n	8005650 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80055de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	69e1      	ldr	r1, [r4, #28]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80055f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005602:	f7fc f869 	bl	80016d8 <HAL_GetTick>
 8005606:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005610:	f013 0f02 	tst.w	r3, #2
 8005614:	d14e      	bne.n	80056b4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005616:	f7fc f85f 	bl	80016d8 <HAL_GetTick>
 800561a:	1b80      	subs	r0, r0, r6
 800561c:	2811      	cmp	r0, #17
 800561e:	d9f3      	bls.n	8005608 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005620:	2003      	movs	r0, #3
 8005622:	e194      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005628:	6813      	ldr	r3, [r2, #0]
 800562a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005630:	f7fc f852 	bl	80016d8 <HAL_GetTick>
 8005634:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005640:	d0b5      	beq.n	80055ae <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005642:	f7fc f849 	bl	80016d8 <HAL_GetTick>
 8005646:	1b80      	subs	r0, r0, r6
 8005648:	2802      	cmp	r0, #2
 800564a:	d9f4      	bls.n	8005636 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800564c:	2003      	movs	r0, #3
 800564e:	e17e      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005654:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005660:	f7fc f83a 	bl	80016d8 <HAL_GetTick>
 8005664:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566e:	f013 0f02 	tst.w	r3, #2
 8005672:	d0b4      	beq.n	80055de <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005674:	f7fc f830 	bl	80016d8 <HAL_GetTick>
 8005678:	1b80      	subs	r0, r0, r6
 800567a:	2811      	cmp	r0, #17
 800567c:	d9f3      	bls.n	8005666 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800567e:	2003      	movs	r0, #3
 8005680:	e165      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005686:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005692:	f7fc f821 	bl	80016d8 <HAL_GetTick>
 8005696:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056a0:	f013 0f02 	tst.w	r3, #2
 80056a4:	d006      	beq.n	80056b4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a6:	f7fc f817 	bl	80016d8 <HAL_GetTick>
 80056aa:	1b80      	subs	r0, r0, r6
 80056ac:	2811      	cmp	r0, #17
 80056ae:	d9f3      	bls.n	8005698 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80056b0:	2003      	movs	r0, #3
 80056b2:	e14c      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f013 0f04 	tst.w	r3, #4
 80056ba:	f000 80b8 	beq.w	800582e <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80056be:	4b22      	ldr	r3, [pc, #136]	; (8005748 <HAL_RCC_OscConfig+0x43c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80056c6:	d110      	bne.n	80056ea <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80056c8:	f7ff fc64 	bl	8004f94 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80056cc:	f7fc f804 	bl	80016d8 <HAL_GetTick>
 80056d0:	4606      	mov	r6, r0
 80056d2:	4b1d      	ldr	r3, [pc, #116]	; (8005748 <HAL_RCC_OscConfig+0x43c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80056da:	d106      	bne.n	80056ea <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056dc:	f7fb fffc 	bl	80016d8 <HAL_GetTick>
 80056e0:	1b80      	subs	r0, r0, r6
 80056e2:	2802      	cmp	r0, #2
 80056e4:	d9f5      	bls.n	80056d2 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80056e6:	2003      	movs	r0, #3
 80056e8:	e131      	b.n	800594e <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d068      	beq.n	80057c2 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80056f0:	2b85      	cmp	r3, #133	; 0x85
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d107      	bne.n	8005708 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005700:	f043 0304 	orr.w	r3, r3, #4
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005708:	f7fb ffe6 	bl	80016d8 <HAL_GetTick>
 800570c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f013 0f02 	tst.w	r3, #2
 800572a:	d10f      	bne.n	800574c <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fb ffd4 	bl	80016d8 <HAL_GetTick>
 8005730:	1b80      	subs	r0, r0, r6
 8005732:	f241 3388 	movw	r3, #5000	; 0x1388
 8005736:	4298      	cmp	r0, r3
 8005738:	d9f1      	bls.n	800571e <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800573a:	2003      	movs	r0, #3
 800573c:	e107      	b.n	800594e <HAL_RCC_OscConfig+0x642>
 800573e:	bf00      	nop
 8005740:	20000078 	.word	0x20000078
 8005744:	2000007c 	.word	0x2000007c
 8005748:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800574c:	68e3      	ldr	r3, [r4, #12]
 800574e:	2b81      	cmp	r3, #129	; 0x81
 8005750:	d001      	beq.n	8005756 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005752:	2b85      	cmp	r3, #133	; 0x85
 8005754:	d11a      	bne.n	800578c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005756:	f7fb ffbf 	bl	80016d8 <HAL_GetTick>
 800575a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800575c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005760:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005778:	d159      	bne.n	800582e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fb ffad 	bl	80016d8 <HAL_GetTick>
 800577e:	1b80      	subs	r0, r0, r6
 8005780:	f241 3388 	movw	r3, #5000	; 0x1388
 8005784:	4298      	cmp	r0, r3
 8005786:	d9f1      	bls.n	800576c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005788:	2003      	movs	r0, #3
 800578a:	e0e0      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800578c:	f7fb ffa4 	bl	80016d8 <HAL_GetTick>
 8005790:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005796:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800579a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80057ae:	d03e      	beq.n	800582e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b0:	f7fb ff92 	bl	80016d8 <HAL_GetTick>
 80057b4:	1b80      	subs	r0, r0, r6
 80057b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80057ba:	4298      	cmp	r0, r3
 80057bc:	d9f1      	bls.n	80057a2 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80057be:	2003      	movs	r0, #3
 80057c0:	e0c5      	b.n	800594e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80057c2:	f7fb ff89 	bl	80016d8 <HAL_GetTick>
 80057c6:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80057e4:	d008      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fb ff77 	bl	80016d8 <HAL_GetTick>
 80057ea:	1b80      	subs	r0, r0, r6
 80057ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80057f0:	4298      	cmp	r0, r3
 80057f2:	d9f1      	bls.n	80057d8 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80057f4:	2003      	movs	r0, #3
 80057f6:	e0aa      	b.n	800594e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80057f8:	f7fb ff6e 	bl	80016d8 <HAL_GetTick>
 80057fc:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005802:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	f013 0f02 	tst.w	r3, #2
 800581a:	d008      	beq.n	800582e <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fb ff5c 	bl	80016d8 <HAL_GetTick>
 8005820:	1b80      	subs	r0, r0, r6
 8005822:	f241 3388 	movw	r3, #5000	; 0x1388
 8005826:	4298      	cmp	r0, r3
 8005828:	d9f1      	bls.n	800580e <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800582a:	2003      	movs	r0, #3
 800582c:	e08f      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800582e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 808b 	beq.w	800594c <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005836:	2d0c      	cmp	r5, #12
 8005838:	d060      	beq.n	80058fc <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800583a:	2b02      	cmp	r3, #2
 800583c:	d016      	beq.n	800586c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800583e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005848:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800584a:	f7fb ff45 	bl	80016d8 <HAL_GetTick>
 800584e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800585a:	d148      	bne.n	80058ee <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800585c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005860:	68d1      	ldr	r1, [r2, #12]
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <HAL_RCC_OscConfig+0x65c>)
 8005864:	400b      	ands	r3, r1
 8005866:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005868:	2000      	movs	r0, #0
 800586a:	e070      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800586c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005876:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005878:	f7fb ff2e 	bl	80016d8 <HAL_GetTick>
 800587c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005888:	d12a      	bne.n	80058e0 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588e:	68d3      	ldr	r3, [r2, #12]
 8005890:	4936      	ldr	r1, [pc, #216]	; (800596c <HAL_RCC_OscConfig+0x660>)
 8005892:	4019      	ands	r1, r3
 8005894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005896:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005898:	4303      	orrs	r3, r0
 800589a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800589c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80058a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058a2:	4303      	orrs	r3, r0
 80058a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80058a6:	4303      	orrs	r3, r0
 80058a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80058aa:	4303      	orrs	r3, r0
 80058ac:	430b      	orrs	r3, r1
 80058ae:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	68d3      	ldr	r3, [r2, #12]
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80058c0:	f7fb ff0a 	bl	80016d8 <HAL_GetTick>
 80058c4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80058d0:	d13e      	bne.n	8005950 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fb ff01 	bl	80016d8 <HAL_GetTick>
 80058d6:	1b00      	subs	r0, r0, r4
 80058d8:	280a      	cmp	r0, #10
 80058da:	d9f4      	bls.n	80058c6 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 80058dc:	2003      	movs	r0, #3
 80058de:	e036      	b.n	800594e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fb fefa 	bl	80016d8 <HAL_GetTick>
 80058e4:	1b40      	subs	r0, r0, r5
 80058e6:	280a      	cmp	r0, #10
 80058e8:	d9c9      	bls.n	800587e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80058ea:	2003      	movs	r0, #3
 80058ec:	e02f      	b.n	800594e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fb fef3 	bl	80016d8 <HAL_GetTick>
 80058f2:	1b00      	subs	r0, r0, r4
 80058f4:	280a      	cmp	r0, #10
 80058f6:	d9ab      	bls.n	8005850 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80058f8:	2003      	movs	r0, #3
 80058fa:	e028      	b.n	800594e <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d029      	beq.n	8005954 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005904:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005906:	f003 0103 	and.w	r1, r3, #3
 800590a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800590c:	4291      	cmp	r1, r2
 800590e:	d123      	bne.n	8005958 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005910:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005916:	428a      	cmp	r2, r1
 8005918:	d120      	bne.n	800595c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800591a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800591e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005920:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005924:	d11c      	bne.n	8005960 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005926:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800592a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800592c:	4293      	cmp	r3, r2
 800592e:	d119      	bne.n	8005964 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005930:	2000      	movs	r0, #0
 8005932:	e00c      	b.n	800594e <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005934:	2001      	movs	r0, #1
}
 8005936:	4770      	bx	lr
        return HAL_ERROR;
 8005938:	2001      	movs	r0, #1
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
 800593e:	e006      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005940:	2001      	movs	r0, #1
 8005942:	e004      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005944:	2001      	movs	r0, #1
 8005946:	e002      	b.n	800594e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005948:	2001      	movs	r0, #1
 800594a:	e000      	b.n	800594e <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 800594c:	2000      	movs	r0, #0
}
 800594e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005950:	2000      	movs	r0, #0
 8005952:	e7fc      	b.n	800594e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005954:	2001      	movs	r0, #1
 8005956:	e7fa      	b.n	800594e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005958:	2001      	movs	r0, #1
 800595a:	e7f8      	b.n	800594e <HAL_RCC_OscConfig+0x642>
 800595c:	2001      	movs	r0, #1
 800595e:	e7f6      	b.n	800594e <HAL_RCC_OscConfig+0x642>
 8005960:	2001      	movs	r0, #1
 8005962:	e7f4      	b.n	800594e <HAL_RCC_OscConfig+0x642>
 8005964:	2001      	movs	r0, #1
 8005966:	e7f2      	b.n	800594e <HAL_RCC_OscConfig+0x642>
 8005968:	eefefffc 	.word	0xeefefffc
 800596c:	11c1808c 	.word	0x11c1808c

08005970 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005970:	2800      	cmp	r0, #0
 8005972:	f000 8127 	beq.w	8005bc4 <HAL_RCC_ClockConfig+0x254>
{
 8005976:	b570      	push	{r4, r5, r6, lr}
 8005978:	460c      	mov	r4, r1
 800597a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800597c:	4b93      	ldr	r3, [pc, #588]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	428b      	cmp	r3, r1
 8005986:	d32d      	bcc.n	80059e4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	f013 0f02 	tst.w	r3, #2
 800598e:	d13f      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	f013 0f20 	tst.w	r3, #32
 8005996:	d153      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800599e:	d16a      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	f013 0f04 	tst.w	r3, #4
 80059a6:	f040 8083 	bne.w	8005ab0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	682b      	ldr	r3, [r5, #0]
 80059ac:	f013 0f08 	tst.w	r3, #8
 80059b0:	f040 8097 	bne.w	8005ae2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	f013 0f01 	tst.w	r3, #1
 80059ba:	f000 80de 	beq.w	8005b7a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059be:	686b      	ldr	r3, [r5, #4]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f000 80a8 	beq.w	8005b16 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	f000 80ad 	beq.w	8005b26 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 80b2 	bne.w	8005b36 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80059d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	f012 0f02 	tst.w	r2, #2
 80059dc:	f040 80b1 	bne.w	8005b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80059e0:	2001      	movs	r0, #1
 80059e2:	e0ee      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e4:	4a79      	ldr	r2, [pc, #484]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	f023 0307 	bic.w	r3, r3, #7
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80059f0:	f7fb fe72 	bl	80016d8 <HAL_GetTick>
 80059f4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b75      	ldr	r3, [pc, #468]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d0c2      	beq.n	8005988 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a02:	f7fb fe69 	bl	80016d8 <HAL_GetTick>
 8005a06:	1b80      	subs	r0, r0, r6
 8005a08:	2802      	cmp	r0, #2
 8005a0a:	d9f4      	bls.n	80059f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	e0d8      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a10:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a16:	688a      	ldr	r2, [r1, #8]
 8005a18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005a20:	f7fb fe5a 	bl	80016d8 <HAL_GetTick>
 8005a24:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005a30:	d1ae      	bne.n	8005990 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a32:	f7fb fe51 	bl	80016d8 <HAL_GetTick>
 8005a36:	1b80      	subs	r0, r0, r6
 8005a38:	2802      	cmp	r0, #2
 8005a3a:	d9f4      	bls.n	8005a26 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005a3c:	2003      	movs	r0, #3
 8005a3e:	e0c0      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a40:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a46:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005a4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005a54:	f7fb fe40 	bl	80016d8 <HAL_GetTick>
 8005a58:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a66:	d197      	bne.n	8005998 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a68:	f7fb fe36 	bl	80016d8 <HAL_GetTick>
 8005a6c:	1b80      	subs	r0, r0, r6
 8005a6e:	2802      	cmp	r0, #2
 8005a70:	d9f3      	bls.n	8005a5a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8005a72:	2003      	movs	r0, #3
 8005a74:	e0a5      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005a76:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8005a80:	f023 030f 	bic.w	r3, r3, #15
 8005a84:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005a88:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005a8c:	f7fb fe24 	bl	80016d8 <HAL_GetTick>
 8005a90:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005a9e:	f47f af7f 	bne.w	80059a0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aa2:	f7fb fe19 	bl	80016d8 <HAL_GetTick>
 8005aa6:	1b80      	subs	r0, r0, r6
 8005aa8:	2802      	cmp	r0, #2
 8005aaa:	d9f2      	bls.n	8005a92 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8005aac:	2003      	movs	r0, #3
 8005aae:	e088      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab6:	688a      	ldr	r2, [r1, #8]
 8005ab8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005ac0:	f7fb fe0a 	bl	80016d8 <HAL_GetTick>
 8005ac4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ad0:	f47f af6b 	bne.w	80059aa <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ad4:	f7fb fe00 	bl	80016d8 <HAL_GetTick>
 8005ad8:	1b80      	subs	r0, r0, r6
 8005ada:	2802      	cmp	r0, #2
 8005adc:	d9f3      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8005ade:	2003      	movs	r0, #3
 8005ae0:	e06f      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ae2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae8:	6893      	ldr	r3, [r2, #8]
 8005aea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005aee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005af2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005af4:	f7fb fdf0 	bl	80016d8 <HAL_GetTick>
 8005af8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005b04:	f47f af56 	bne.w	80059b4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b08:	f7fb fde6 	bl	80016d8 <HAL_GetTick>
 8005b0c:	1b80      	subs	r0, r0, r6
 8005b0e:	2802      	cmp	r0, #2
 8005b10:	d9f3      	bls.n	8005afa <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005b12:	2003      	movs	r0, #3
 8005b14:	e055      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005b20:	d10f      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005b22:	2001      	movs	r0, #1
 8005b24:	e04d      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005b32:	2001      	movs	r0, #1
 8005b34:	e045      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005b40:	d042      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b46:	688a      	ldr	r2, [r1, #8]
 8005b48:	f022 0203 	bic.w	r2, r2, #3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b50:	f7fb fdc2 	bl	80016d8 <HAL_GetTick>
 8005b54:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b60:	686a      	ldr	r2, [r5, #4]
 8005b62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b66:	d008      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fb fdb6 	bl	80016d8 <HAL_GetTick>
 8005b6c:	1b80      	subs	r0, r0, r6
 8005b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b72:	4298      	cmp	r0, r3
 8005b74:	d9ef      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005b76:	2003      	movs	r0, #3
 8005b78:	e023      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	d915      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 8005b88:	6813      	ldr	r3, [r2, #0]
 8005b8a:	f023 0307 	bic.w	r3, r3, #7
 8005b8e:	4323      	orrs	r3, r4
 8005b90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005b92:	f7fb fda1 	bl	80016d8 <HAL_GetTick>
 8005b96:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_RCC_ClockConfig+0x25c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d006      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ba4:	f7fb fd98 	bl	80016d8 <HAL_GetTick>
 8005ba8:	1b40      	subs	r0, r0, r5
 8005baa:	2802      	cmp	r0, #2
 8005bac:	d9f4      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8005bae:	2003      	movs	r0, #3
 8005bb0:	e007      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005bb2:	f7ff fb9b 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCC_ClockConfig+0x260>)
 8005bb8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_RCC_ClockConfig+0x264>)
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f7fb fd89 	bl	80016d4 <HAL_InitTick>
}
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
}
 8005bc6:	4770      	bx	lr
        return HAL_ERROR;
 8005bc8:	2001      	movs	r0, #1
 8005bca:	e7fa      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x252>
 8005bcc:	58004000 	.word	0x58004000
 8005bd0:	20000078 	.word	0x20000078
 8005bd4:	2000007c 	.word	0x2000007c

08005bd8 <HAL_RCC_GetPCLK1Freq>:
{
 8005bd8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bda:	f7ff fb87 	bl	80052ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005be8:	4a02      	ldr	r2, [pc, #8]	; (8005bf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005bee:	40d8      	lsrs	r0, r3
 8005bf0:	bd08      	pop	{r3, pc}
 8005bf2:	bf00      	nop
 8005bf4:	0800b2c0 	.word	0x0800b2c0

08005bf8 <HAL_RCC_GetPCLK2Freq>:
{
 8005bf8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005bfa:	f7ff fb77 	bl	80052ec <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005c08:	4a02      	ldr	r2, [pc, #8]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005c0e:	40d8      	lsrs	r0, r3
 8005c10:	bd08      	pop	{r3, pc}
 8005c12:	bf00      	nop
 8005c14:	0800b2c0 	.word	0x0800b2c0

08005c18 <HAL_RCC_GetOscConfig>:
  if (RCC_OscInitStruct != NULL)
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d042      	beq.n	8005ca2 <HAL_RCC_GetOscConfig+0x8a>
{
 8005c1c:	b430      	push	{r4, r5}
 8005c1e:	4603      	mov	r3, r0
    RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8005c20:	222f      	movs	r2, #47	; 0x2f
 8005c22:	6002      	str	r2, [r0, #0]
    regvalue = RCC->CR; /* Control register */
 8005c24:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005c28:	6802      	ldr	r2, [r0, #0]
    regICSRvalue = RCC->ICSCR; /* Get Internal Clock Sources Calibration register */
 8005c2a:	6844      	ldr	r4, [r0, #4]
    regPLLCFGRvalue = RCC->PLLCFGR; /* Get PLL Configuration register */
 8005c2c:	68c1      	ldr	r1, [r0, #12]
    RCC_OscInitStruct->HSEState = (regvalue & RCC_HSE_BYPASS_PWR);
 8005c2e:	f402 1504 	and.w	r5, r2, #2162688	; 0x210000
 8005c32:	605d      	str	r5, [r3, #4]
    RCC_OscInitStruct->HSEDiv   = (regvalue & RCC_CR_HSEPRE);
 8005c34:	f402 1580 	and.w	r5, r2, #1048576	; 0x100000
 8005c38:	609d      	str	r5, [r3, #8]
    RCC_OscInitStruct->MSIState            = (regvalue & RCC_CR_MSION);
 8005c3a:	f002 0501 	and.w	r5, r2, #1
 8005c3e:	621d      	str	r5, [r3, #32]
    RCC_OscInitStruct->MSICalibrationValue = ((regICSRvalue & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 8005c40:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8005c44:	625d      	str	r5, [r3, #36]	; 0x24
    RCC_OscInitStruct->MSIClockRange       = (regvalue & RCC_CR_MSIRANGE);
 8005c46:	f002 05f0 	and.w	r5, r2, #240	; 0xf0
 8005c4a:	629d      	str	r5, [r3, #40]	; 0x28
    RCC_OscInitStruct->HSIState            = (regvalue & RCC_CR_HSION);
 8005c4c:	f402 7580 	and.w	r5, r2, #256	; 0x100
 8005c50:	611d      	str	r5, [r3, #16]
    RCC_OscInitStruct->HSICalibrationValue = ((regICSRvalue & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 8005c52:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8005c56:	615c      	str	r4, [r3, #20]
    RCC_OscInitStruct->PLL.PLLState  = ((regvalue & RCC_CR_PLLON) >> RCC_CR_PLLON_Pos) + 1U;
 8005c58:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8005c5c:	3201      	adds	r2, #1
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    RCC_OscInitStruct->PLL.PLLSource = (regPLLCFGRvalue & RCC_PLLCFGR_PLLSRC);
 8005c60:	f001 0203 	and.w	r2, r1, #3
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
    RCC_OscInitStruct->PLL.PLLM      = (regPLLCFGRvalue & RCC_PLLCFGR_PLLM);
 8005c66:	f001 0270 	and.w	r2, r1, #112	; 0x70
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34
    RCC_OscInitStruct->PLL.PLLN      = ((regPLLCFGRvalue & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6c:	f3c1 2206 	ubfx	r2, r1, #8, #7
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
    RCC_OscInitStruct->PLL.PLLP      = (regPLLCFGRvalue & RCC_PLLCFGR_PLLP);
 8005c72:	f401 1278 	and.w	r2, r1, #4063232	; 0x3e0000
 8005c76:	63da      	str	r2, [r3, #60]	; 0x3c
    RCC_OscInitStruct->PLL.PLLQ      = (regPLLCFGRvalue & RCC_PLLCFGR_PLLQ);
 8005c78:	f001 6260 	and.w	r2, r1, #234881024	; 0xe000000
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
    RCC_OscInitStruct->PLL.PLLR      = (regPLLCFGRvalue & RCC_PLLCFGR_PLLR);
 8005c7e:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
 8005c82:	6459      	str	r1, [r3, #68]	; 0x44
    regvalue = RCC->BDCR;
 8005c84:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    RCC_OscInitStruct->LSEState = (regvalue & RCC_LSE_BYPASS);
 8005c88:	f002 0285 	and.w	r2, r2, #133	; 0x85
 8005c8c:	60da      	str	r2, [r3, #12]
    regvalue = RCC->CSR;
 8005c8e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    RCC_OscInitStruct->LSIState = (regvalue & RCC_LSI_ON);
 8005c92:	f002 0101 	and.w	r1, r2, #1
 8005c96:	6199      	str	r1, [r3, #24]
    RCC_OscInitStruct->LSIDiv = (regvalue & RCC_CSR_LSIPRE);
 8005c98:	f002 0210 	and.w	r2, r2, #16
 8005c9c:	61da      	str	r2, [r3, #28]
}
 8005c9e:	bc30      	pop	{r4, r5}
 8005ca0:	4770      	bx	lr
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ca8:	6803      	ldr	r3, [r0, #0]
 8005caa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005cae:	f040 80ab 	bne.w	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005cb2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	f013 0f01 	tst.w	r3, #1
 8005cba:	d00a      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cbc:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005cc6:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	f013 0f02 	tst.w	r3, #2
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cda:	68a2      	ldr	r2, [r4, #8]
 8005cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005ce4:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005ce8:	b292      	uxth	r2, r2
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f013 0f20 	tst.w	r3, #32
 8005cf6:	d009      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cf8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005d02:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005d12:	d00c      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d14:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005d1e:	0c02      	lsrs	r2, r0, #16
 8005d20:	0412      	lsls	r2, r2, #16
 8005d22:	ea23 0302 	bic.w	r3, r3, r2
 8005d26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005d34:	d00c      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005d40:	0c02      	lsrs	r2, r0, #16
 8005d42:	0412      	lsls	r2, r2, #16
 8005d44:	ea23 0302 	bic.w	r3, r3, r2
 8005d48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005d56:	d00c      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005d58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005d62:	0c02      	lsrs	r2, r0, #16
 8005d64:	0412      	lsls	r2, r2, #16
 8005d66:	ea23 0302 	bic.w	r3, r3, r2
 8005d6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d78:	f040 809e 	bne.w	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d82:	f040 80aa 	bne.w	8005eda <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d8c:	f040 80b6 	bne.w	8005efc <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	f013 0f10 	tst.w	r3, #16
 8005d96:	d00e      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005d98:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005da2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005dac:	68e3      	ldr	r3, [r4, #12]
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db2:	f000 80b4 	beq.w	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005dbc:	d00f      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dc4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005dc8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dd4:	b91b      	cbnz	r3, 8005dde <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005dd6:	68cb      	ldr	r3, [r1, #12]
 8005dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ddc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005de4:	d00e      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005de6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	f000 8092 	beq.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8005e04:	4628      	mov	r0, r5
 8005e06:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8005e08:	f7ff f8c4 	bl	8004f94 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8005e0c:	f7fb fc64 	bl	80016d8 <HAL_GetTick>
 8005e10:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e12:	4b48      	ldr	r3, [pc, #288]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1c:	f7fb fc5c 	bl	80016d8 <HAL_GetTick>
 8005e20:	1b40      	subs	r0, r0, r5
 8005e22:	2802      	cmp	r0, #2
 8005e24:	d9f5      	bls.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8005e26:	2503      	movs	r5, #3
 8005e28:	e000      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005e2a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	f47f af41 	bne.w	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005e3e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d024      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e50:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005e54:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005e58:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e5c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005e60:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005e64:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005e6c:	f012 0f02 	tst.w	r2, #2
 8005e70:	d10f      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005e72:	2d00      	cmp	r5, #0
 8005e74:	f47f af1e 	bne.w	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005e82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005e8c:	e712      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005e8e:	2200      	movs	r2, #0
 8005e90:	e7ec      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005e92:	f7fb fc21 	bl	80016d8 <HAL_GetTick>
 8005e96:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f013 0f02 	tst.w	r3, #2
 8005ea4:	d1e5      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fb fc17 	bl	80016d8 <HAL_GetTick>
 8005eaa:	1b80      	subs	r0, r0, r6
 8005eac:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	d9f1      	bls.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8005eb4:	2503      	movs	r5, #3
 8005eb6:	e7dc      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005eba:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005ebe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ec2:	0919      	lsrs	r1, r3, #4
 8005ec4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005ec8:	ea22 0201 	bic.w	r2, r2, r1
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005ed8:	e750      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eda:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005edc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005ee0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005ee4:	0919      	lsrs	r1, r3, #4
 8005ee6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005eea:	ea22 0201 	bic.w	r2, r2, r1
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005efa:	e744      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005efc:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005efe:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005f02:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005f06:	0919      	lsrs	r1, r3, #4
 8005f08:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005f0c:	ea22 0201 	bic.w	r2, r2, r1
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005f1c:	e738      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005f1e:	68cb      	ldr	r3, [r1, #12]
 8005f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f24:	60cb      	str	r3, [r1, #12]
 8005f26:	e746      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f28:	68cb      	ldr	r3, [r1, #12]
 8005f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f2e:	60cb      	str	r3, [r1, #12]
 8005f30:	e768      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f32:	bf00      	nop
 8005f34:	58000400 	.word	0x58000400

08005f38 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f38:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d036      	beq.n	8005fae <HAL_RTC_DeactivateAlarm+0x76>
 8005f40:	2301      	movs	r3, #1
 8005f42:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f46:	2302      	movs	r3, #2
 8005f48:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005f4e:	22ca      	movs	r2, #202	; 0xca
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24
 8005f52:	2253      	movs	r2, #83	; 0x53
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005f56:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005f5a:	d019      	beq.n	8005f90 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005f5c:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005f64:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005f6e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005f70:	f022 0202 	bic.w	r2, r2, #2
 8005f74:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005f76:	2202      	movs	r2, #2
 8005f78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f7a:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005f7c:	22ff      	movs	r2, #255	; 0xff
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f86:	2300      	movs	r3, #0
 8005f88:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005f96:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005fa0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005fa8:	2201      	movs	r2, #1
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fac:	e7e5      	b.n	8005f7a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8005fae:	2002      	movs	r0, #2
}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40002800 	.word	0x40002800

08005fb8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005fb8:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8005fba:	e002      	b.n	8005fc2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005fbc:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005fbe:	380a      	subs	r0, #10
 8005fc0:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005fc2:	2809      	cmp	r0, #9
 8005fc4:	d8fa      	bhi.n	8005fbc <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	b2db      	uxtb	r3, r3
}
 8005fca:	4318      	orrs	r0, r3
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005fd0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f000 80b0 	beq.w	800613a <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005fee:	4b54      	ldr	r3, [pc, #336]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 8005ff0:	68de      	ldr	r6, [r3, #12]
 8005ff2:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005ff6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005ffa:	d043      	beq.n	8006084 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005ffc:	bb12      	cbnz	r2, 8006044 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006004:	d101      	bne.n	800600a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006006:	2300      	movs	r3, #0
 8006008:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800600a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800600e:	7820      	ldrb	r0, [r4, #0]
 8006010:	f7ff ffd2 	bl	8005fb8 <RTC_ByteToBcd2>
 8006014:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006016:	7860      	ldrb	r0, [r4, #1]
 8006018:	f7ff ffce 	bl	8005fb8 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800601c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006020:	78a0      	ldrb	r0, [r4, #2]
 8006022:	f7ff ffc9 	bl	8005fb8 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006026:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006028:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800602a:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800602e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006032:	f7ff ffc1 	bl	8005fb8 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006036:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800603a:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800603c:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800603e:	ea48 0000 	orr.w	r0, r8, r0
 8006042:	e020      	b.n	8006086 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006044:	6948      	ldr	r0, [r1, #20]
 8006046:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800604a:	d009      	beq.n	8006060 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800604c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006050:	d006      	beq.n	8006060 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f013 0f40 	tst.w	r3, #64	; 0x40
 800605a:	d101      	bne.n	8006060 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800605c:	2300      	movs	r3, #0
 800605e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006060:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006062:	7863      	ldrb	r3, [r4, #1]
 8006064:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006066:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800606a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800606c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800606e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006070:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006074:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006078:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800607c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800607e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006080:	4318      	orrs	r0, r3
 8006082:	e000      	b.n	8006086 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006084:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006086:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 8006088:	22ca      	movs	r2, #202	; 0xca
 800608a:	625a      	str	r2, [r3, #36]	; 0x24
 800608c:	2253      	movs	r2, #83	; 0x53
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006096:	d02a      	beq.n	80060ee <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80060a0:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80060a2:	2202      	movs	r2, #2
 80060a4:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80060a6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80060aa:	d040      	beq.n	800612e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80060ac:	4b24      	ldr	r3, [pc, #144]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 80060ae:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80060b0:	69a2      	ldr	r2, [r4, #24]
 80060b2:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80060b4:	6862      	ldr	r2, [r4, #4]
 80060b6:	4b22      	ldr	r3, [pc, #136]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 80060b8:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80060ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80060bc:	f042 0202 	orr.w	r2, r2, #2
 80060c0:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80060c8:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80060ca:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <HAL_RTC_SetAlarm_IT+0x174>)
 80060cc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80060de:	2301      	movs	r3, #1
 80060e0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80060e4:	2000      	movs	r0, #0
 80060e6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80060ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80060ee:	4b14      	ldr	r3, [pc, #80]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80060f6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80060f8:	2201      	movs	r2, #1
 80060fa:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80060fc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006100:	d00f      	beq.n	8006122 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 8006104:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006106:	69a2      	ldr	r2, [r4, #24]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 800610e:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006110:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800611e:	619a      	str	r2, [r3, #24]
 8006120:	e7d3      	b.n	80060ca <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006122:	69a3      	ldr	r3, [r4, #24]
 8006124:	69e2      	ldr	r2, [r4, #28]
 8006126:	4313      	orrs	r3, r2
 8006128:	4a05      	ldr	r2, [pc, #20]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 800612a:	6453      	str	r3, [r2, #68]	; 0x44
 800612c:	e7ed      	b.n	800610a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800612e:	69a3      	ldr	r3, [r4, #24]
 8006130:	69e2      	ldr	r2, [r4, #28]
 8006132:	4313      	orrs	r3, r2
 8006134:	4a02      	ldr	r2, [pc, #8]	; (8006140 <HAL_RTC_SetAlarm_IT+0x170>)
 8006136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006138:	e7bc      	b.n	80060b4 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800613a:	2002      	movs	r0, #2
}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40002800 	.word	0x40002800
 8006144:	58000800 	.word	0x58000800

08006148 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006148:	0089      	lsls	r1, r1, #2
 800614a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800614e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006152:	600a      	str	r2, [r1, #0]
}
 8006154:	4770      	bx	lr

08006156 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006156:	0089      	lsls	r1, r1, #2
 8006158:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800615c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006160:	6808      	ldr	r0, [r1, #0]
}
 8006162:	4770      	bx	lr

08006164 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006164:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	e852 3f00 	ldrex	r3, [r2]
 800616a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	e842 3100 	strex	r1, r3, [r2]
 8006172:	2900      	cmp	r1, #0
 8006174:	d1f6      	bne.n	8006164 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006176:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	f102 0308 	add.w	r3, r2, #8
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	3208      	adds	r2, #8
 8006186:	e842 3100 	strex	r1, r3, [r2]
 800618a:	2900      	cmp	r1, #0
 800618c:	d1f3      	bne.n	8006176 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800618e:	2320      	movs	r3, #32
 8006190:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006194:	4770      	bx	lr

08006196 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006196:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	e852 3f00 	ldrex	r3, [r2]
 800619c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	e842 3100 	strex	r1, r3, [r2]
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d1f6      	bne.n	8006196 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	f102 0308 	add.w	r3, r2, #8
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	3208      	adds	r2, #8
 80061bc:	e842 3100 	strex	r1, r3, [r2]
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d1f1      	bne.n	80061a8 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d006      	beq.n	80061d8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ca:	2320      	movs	r3, #32
 80061cc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	2300      	movs	r3, #0
 80061d2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061d4:	6743      	str	r3, [r0, #116]	; 0x74
}
 80061d6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	e852 3f00 	ldrex	r3, [r2]
 80061de:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	e842 3100 	strex	r1, r3, [r2]
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d1f6      	bne.n	80061d8 <UART_EndRxTransfer+0x42>
 80061ea:	e7ee      	b.n	80061ca <UART_EndRxTransfer+0x34>

080061ec <HAL_UART_Transmit_DMA>:
{
 80061ec:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80061ee:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80061f2:	2a20      	cmp	r2, #32
 80061f4:	d13d      	bne.n	8006272 <HAL_UART_Transmit_DMA+0x86>
{
 80061f6:	b510      	push	{r4, lr}
 80061f8:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80061fa:	2900      	cmp	r1, #0
 80061fc:	d03b      	beq.n	8006276 <HAL_UART_Transmit_DMA+0x8a>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d03b      	beq.n	800627a <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8006202:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006204:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006208:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	2200      	movs	r2, #0
 800620e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006212:	2221      	movs	r2, #33	; 0x21
 8006214:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8006218:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800621a:	b1ca      	cbz	r2, 8006250 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800621c:	4918      	ldr	r1, [pc, #96]	; (8006280 <HAL_UART_Transmit_DMA+0x94>)
 800621e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006220:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006222:	4918      	ldr	r1, [pc, #96]	; (8006284 <HAL_UART_Transmit_DMA+0x98>)
 8006224:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006226:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006228:	4917      	ldr	r1, [pc, #92]	; (8006288 <HAL_UART_Transmit_DMA+0x9c>)
 800622a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800622c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800622e:	2100      	movs	r1, #0
 8006230:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006232:	6802      	ldr	r2, [r0, #0]
 8006234:	3228      	adds	r2, #40	; 0x28
 8006236:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006238:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800623a:	f7fd fecf 	bl	8003fdc <HAL_DMA_Start_IT>
 800623e:	b138      	cbz	r0, 8006250 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006240:	2310      	movs	r3, #16
 8006242:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8006246:	2320      	movs	r3, #32
 8006248:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 800624c:	2001      	movs	r0, #1
 800624e:	e00f      	b.n	8006270 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006256:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	f102 0308 	add.w	r3, r2, #8
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	3208      	adds	r2, #8
 8006266:	e842 3100 	strex	r1, r3, [r2]
 800626a:	2900      	cmp	r1, #0
 800626c:	d1f3      	bne.n	8006256 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800626e:	2000      	movs	r0, #0
}
 8006270:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006272:	2002      	movs	r0, #2
}
 8006274:	4770      	bx	lr
      return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
 8006278:	e7fa      	b.n	8006270 <HAL_UART_Transmit_DMA+0x84>
 800627a:	2001      	movs	r0, #1
 800627c:	e7f8      	b.n	8006270 <HAL_UART_Transmit_DMA+0x84>
 800627e:	bf00      	nop
 8006280:	0800628d 	.word	0x0800628d
 8006284:	080062fb 	.word	0x080062fb
 8006288:	08006307 	.word	0x08006307

0800628c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800628c:	b508      	push	{r3, lr}
 800628e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006290:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f013 0f20 	tst.w	r3, #32
 800629a:	d118      	bne.n	80062ce <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	f102 0308 	add.w	r3, r2, #8
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	3208      	adds	r2, #8
 80062b2:	e842 3100 	strex	r1, r3, [r2]
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d1f3      	bne.n	80062a2 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	e852 3f00 	ldrex	r3, [r2]
 80062c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	e842 3100 	strex	r1, r3, [r2]
 80062c8:	2900      	cmp	r1, #0
 80062ca:	d1f6      	bne.n	80062ba <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062cc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80062ce:	f7fb fc83 	bl	8001bd8 <HAL_UART_TxCpltCallback>
}
 80062d2:	e7fb      	b.n	80062cc <UART_DMATransmitCplt+0x40>

080062d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	e852 3f00 	ldrex	r3, [r2]
 80062dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	e842 3100 	strex	r1, r3, [r2]
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d1f6      	bne.n	80062d6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	2320      	movs	r3, #32
 80062ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f2:	f7fb fc71 	bl	8001bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f6:	bd08      	pop	{r3, pc}

080062f8 <HAL_UART_TxHalfCpltCallback>:
}
 80062f8:	4770      	bx	lr

080062fa <UART_DMATxHalfCplt>:
{
 80062fa:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80062fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80062fe:	f7ff fffb 	bl	80062f8 <HAL_UART_TxHalfCpltCallback>
}
 8006302:	bd08      	pop	{r3, pc}

08006304 <HAL_UART_ErrorCallback>:
}
 8006304:	4770      	bx	lr

08006306 <UART_DMAError>:
{
 8006306:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006308:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800630a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800630e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f013 0f80 	tst.w	r3, #128	; 0x80
 800631a:	d001      	beq.n	8006320 <UART_DMAError+0x1a>
 800631c:	2a21      	cmp	r2, #33	; 0x21
 800631e:	d010      	beq.n	8006342 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006328:	d001      	beq.n	800632e <UART_DMAError+0x28>
 800632a:	2d22      	cmp	r5, #34	; 0x22
 800632c:	d010      	beq.n	8006350 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800632e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006332:	f043 0310 	orr.w	r3, r3, #16
 8006336:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff ffe2 	bl	8006304 <HAL_UART_ErrorCallback>
}
 8006340:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff ff0b 	bl	8006164 <UART_EndTxTransfer>
 800634e:	e7e7      	b.n	8006320 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff ff1d 	bl	8006196 <UART_EndRxTransfer>
 800635c:	e7e7      	b.n	800632e <UART_DMAError+0x28>

0800635e <UART_DMAAbortOnError>:
{
 800635e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006360:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006368:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800636c:	f7ff ffca 	bl	8006304 <HAL_UART_ErrorCallback>
}
 8006370:	bd08      	pop	{r3, pc}

08006372 <HAL_UARTEx_RxEventCallback>:
}
 8006372:	4770      	bx	lr

08006374 <HAL_UART_IRQHandler>:
{
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800637c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800637e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006380:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006384:	401a      	ands	r2, r3
 8006386:	d108      	bne.n	800639a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006388:	f013 0f20 	tst.w	r3, #32
 800638c:	d005      	beq.n	800639a <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800638e:	f010 0f20 	tst.w	r0, #32
 8006392:	d134      	bne.n	80063fe <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006394:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006398:	d131      	bne.n	80063fe <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800639a:	b12a      	cbz	r2, 80063a8 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800639c:	4a99      	ldr	r2, [pc, #612]	; (8006604 <HAL_UART_IRQHandler+0x290>)
 800639e:	402a      	ands	r2, r5
 80063a0:	d133      	bne.n	800640a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80063a2:	4e99      	ldr	r6, [pc, #612]	; (8006608 <HAL_UART_IRQHandler+0x294>)
 80063a4:	4230      	tst	r0, r6
 80063a6:	d130      	bne.n	800640a <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80063aa:	2a01      	cmp	r2, #1
 80063ac:	f000 80c6 	beq.w	800653c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80063b4:	d003      	beq.n	80063be <HAL_UART_IRQHandler+0x4a>
 80063b6:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80063ba:	f040 8165 	bne.w	8006688 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063c2:	d007      	beq.n	80063d4 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063c8:	f040 8165 	bne.w	8006696 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80063cc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 80063d0:	f040 8161 	bne.w	8006696 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063d8:	d003      	beq.n	80063e2 <HAL_UART_IRQHandler+0x6e>
 80063da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063de:	f040 8161 	bne.w	80066a4 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063e2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80063e6:	d003      	beq.n	80063f0 <HAL_UART_IRQHandler+0x7c>
 80063e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063ec:	f040 815e 	bne.w	80066ac <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80063f4:	d002      	beq.n	80063fc <HAL_UART_IRQHandler+0x88>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f2c0 815c 	blt.w	80066b4 <HAL_UART_IRQHandler+0x340>
}
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 80063fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0fb      	beq.n	80063fc <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006404:	4620      	mov	r0, r4
 8006406:	4798      	blx	r3
      return;
 8006408:	e7f8      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800640a:	f013 0f01 	tst.w	r3, #1
 800640e:	d009      	beq.n	8006424 <HAL_UART_IRQHandler+0xb0>
 8006410:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006414:	d006      	beq.n	8006424 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006416:	2601      	movs	r6, #1
 8006418:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800641a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800641e:	4331      	orrs	r1, r6
 8006420:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006424:	f013 0f02 	tst.w	r3, #2
 8006428:	d00b      	beq.n	8006442 <HAL_UART_IRQHandler+0xce>
 800642a:	f015 0f01 	tst.w	r5, #1
 800642e:	d008      	beq.n	8006442 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006430:	6821      	ldr	r1, [r4, #0]
 8006432:	2602      	movs	r6, #2
 8006434:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006436:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800643a:	f041 0104 	orr.w	r1, r1, #4
 800643e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006442:	f013 0f04 	tst.w	r3, #4
 8006446:	d00b      	beq.n	8006460 <HAL_UART_IRQHandler+0xec>
 8006448:	f015 0f01 	tst.w	r5, #1
 800644c:	d008      	beq.n	8006460 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800644e:	6821      	ldr	r1, [r4, #0]
 8006450:	2604      	movs	r6, #4
 8006452:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006454:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006458:	f041 0102 	orr.w	r1, r1, #2
 800645c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006460:	f013 0f08 	tst.w	r3, #8
 8006464:	d00b      	beq.n	800647e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006466:	f010 0f20 	tst.w	r0, #32
 800646a:	d100      	bne.n	800646e <HAL_UART_IRQHandler+0xfa>
 800646c:	b13a      	cbz	r2, 800647e <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800646e:	6822      	ldr	r2, [r4, #0]
 8006470:	2108      	movs	r1, #8
 8006472:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006474:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006478:	430a      	orrs	r2, r1
 800647a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800647e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006482:	d00c      	beq.n	800649e <HAL_UART_IRQHandler+0x12a>
 8006484:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006488:	d009      	beq.n	800649e <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006490:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006492:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006496:	f042 0220 	orr.w	r2, r2, #32
 800649a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800649e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	d0aa      	beq.n	80063fc <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064a6:	f013 0f20 	tst.w	r3, #32
 80064aa:	d009      	beq.n	80064c0 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064ac:	f010 0f20 	tst.w	r0, #32
 80064b0:	d102      	bne.n	80064b8 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064b2:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80064b6:	d003      	beq.n	80064c0 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80064b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80064ba:	b10b      	cbz	r3, 80064c0 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80064bc:	4620      	mov	r0, r4
 80064be:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80064c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064cc:	d102      	bne.n	80064d4 <HAL_UART_IRQHandler+0x160>
 80064ce:	f012 0f28 	tst.w	r2, #40	; 0x28
 80064d2:	d02c      	beq.n	800652e <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fe5e 	bl	8006196 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064e2:	d020      	beq.n	8006526 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	f102 0308 	add.w	r3, r2, #8
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	3208      	adds	r2, #8
 80064f4:	e842 3100 	strex	r1, r3, [r2]
 80064f8:	2900      	cmp	r1, #0
 80064fa:	d1f3      	bne.n	80064e4 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 80064fc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006500:	b16b      	cbz	r3, 800651e <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006502:	4a42      	ldr	r2, [pc, #264]	; (800660c <HAL_UART_IRQHandler+0x298>)
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006506:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800650a:	f7fd fded 	bl	80040e8 <HAL_DMA_Abort_IT>
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f af74 	beq.w	80063fc <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006514:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006518:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800651a:	4798      	blx	r3
 800651c:	e76e      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800651e:	4620      	mov	r0, r4
 8006520:	f7ff fef0 	bl	8006304 <HAL_UART_ErrorCallback>
 8006524:	e76a      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff feec 	bl	8006304 <HAL_UART_ErrorCallback>
 800652c:	e766      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff fee8 	bl	8006304 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	2300      	movs	r3, #0
 8006536:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800653a:	e75f      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800653c:	f013 0f10 	tst.w	r3, #16
 8006540:	f43f af36 	beq.w	80063b0 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006544:	f010 0f10 	tst.w	r0, #16
 8006548:	f43f af32 	beq.w	80063b0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654c:	2310      	movs	r3, #16
 800654e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006558:	d05a      	beq.n	8006610 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800655a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006564:	2b00      	cmp	r3, #0
 8006566:	f43f af49 	beq.w	80063fc <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800656a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800656e:	4299      	cmp	r1, r3
 8006570:	f67f af44 	bls.w	80063fc <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8006574:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006578:	6813      	ldr	r3, [r2, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f013 0f20 	tst.w	r3, #32
 8006580:	d132      	bne.n	80065e8 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006582:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	e852 3f00 	ldrex	r3, [r2]
 8006588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	e842 3100 	strex	r1, r3, [r2]
 8006590:	2900      	cmp	r1, #0
 8006592:	d1f6      	bne.n	8006582 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006594:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	f102 0308 	add.w	r3, r2, #8
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	3208      	adds	r2, #8
 80065a4:	e842 3100 	strex	r1, r3, [r2]
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d1f3      	bne.n	8006594 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	f102 0308 	add.w	r3, r2, #8
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	3208      	adds	r2, #8
 80065bc:	e842 3100 	strex	r1, r3, [r2]
 80065c0:	2900      	cmp	r1, #0
 80065c2:	d1f3      	bne.n	80065ac <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 80065c4:	2320      	movs	r3, #32
 80065c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	2300      	movs	r3, #0
 80065cc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	e852 3f00 	ldrex	r3, [r2]
 80065d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	e842 3100 	strex	r1, r3, [r2]
 80065dc:	2900      	cmp	r1, #0
 80065de:	d1f6      	bne.n	80065ce <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80065e4:	f7fd fd46 	bl	8004074 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065e8:	2302      	movs	r3, #2
 80065ea:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80065f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	1ac9      	subs	r1, r1, r3
 80065f8:	b289      	uxth	r1, r1
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff feb9 	bl	8006372 <HAL_UARTEx_RxEventCallback>
      return;
 8006600:	e6fc      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
 8006602:	bf00      	nop
 8006604:	10000001 	.word	0x10000001
 8006608:	04000120 	.word	0x04000120
 800660c:	0800635f 	.word	0x0800635f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006610:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006614:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006618:	b29b      	uxth	r3, r3
 800661a:	1ac9      	subs	r1, r1, r3
 800661c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800661e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	f43f aee9 	beq.w	80063fc <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800662a:	2900      	cmp	r1, #0
 800662c:	f43f aee6 	beq.w	80063fc <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006630:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	e852 3f00 	ldrex	r3, [r2]
 8006636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	e842 3000 	strex	r0, r3, [r2]
 800663e:	2800      	cmp	r0, #0
 8006640:	d1f6      	bne.n	8006630 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006642:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f102 0308 	add.w	r3, r2, #8
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006650:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	3208      	adds	r2, #8
 8006656:	e842 3000 	strex	r0, r3, [r2]
 800665a:	2800      	cmp	r0, #0
 800665c:	d1f1      	bne.n	8006642 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 800665e:	2320      	movs	r3, #32
 8006660:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006664:	2300      	movs	r3, #0
 8006666:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006668:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	e852 3f00 	ldrex	r3, [r2]
 8006670:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	e842 3000 	strex	r0, r3, [r2]
 8006678:	2800      	cmp	r0, #0
 800667a:	d1f6      	bne.n	800666a <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800667c:	2302      	movs	r3, #2
 800667e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff fe76 	bl	8006372 <HAL_UARTEx_RxEventCallback>
      return;
 8006686:	e6b9      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006688:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800668c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fe62 	bl	8007358 <HAL_UARTEx_WakeupCallback>
    return;
 8006694:	e6b2      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8006696:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006698:	2b00      	cmp	r3, #0
 800669a:	f43f aeaf 	beq.w	80063fc <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800669e:	4620      	mov	r0, r4
 80066a0:	4798      	blx	r3
    return;
 80066a2:	e6ab      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff fe15 	bl	80062d4 <UART_EndTransmit_IT>
    return;
 80066aa:	e6a7      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fe55 	bl	800735c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80066b2:	e6a3      	b.n	80063fc <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 fe50 	bl	800735a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80066ba:	e69f      	b.n	80063fc <HAL_UART_IRQHandler+0x88>

080066bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066bc:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80066be:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80066c6:	2a22      	cmp	r2, #34	; 0x22
 80066c8:	d005      	beq.n	80066d6 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ca:	6802      	ldr	r2, [r0, #0]
 80066cc:	6993      	ldr	r3, [r2, #24]
 80066ce:	f043 0308 	orr.w	r3, r3, #8
 80066d2:	6193      	str	r3, [r2, #24]
  }
}
 80066d4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d6:	6802      	ldr	r2, [r0, #0]
 80066d8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80066de:	400b      	ands	r3, r1
 80066e0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80066e2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80066e4:	3301      	adds	r3, #1
 80066e6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80066e8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80066f6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e9      	bne.n	80066d4 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006700:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	e852 3f00 	ldrex	r3, [r2]
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	e842 3100 	strex	r1, r3, [r2]
 800670e:	2900      	cmp	r1, #0
 8006710:	d1f6      	bne.n	8006700 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	f102 0308 	add.w	r3, r2, #8
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	3208      	adds	r2, #8
 8006722:	e842 3100 	strex	r1, r3, [r2]
 8006726:	2900      	cmp	r1, #0
 8006728:	d1f3      	bne.n	8006712 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800672a:	2320      	movs	r3, #32
 800672c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006734:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006736:	6803      	ldr	r3, [r0, #0]
 8006738:	4a16      	ldr	r2, [pc, #88]	; (8006794 <UART_RxISR_8BIT+0xd8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00c      	beq.n	8006758 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006744:	d008      	beq.n	8006758 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006746:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	e852 3f00 	ldrex	r3, [r2]
 800674c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	e842 3100 	strex	r1, r3, [r2]
 8006754:	2900      	cmp	r1, #0
 8006756:	d1f6      	bne.n	8006746 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d116      	bne.n	800678c <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675e:	2300      	movs	r3, #0
 8006760:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006762:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	e852 3f00 	ldrex	r3, [r2]
 8006768:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	e842 3100 	strex	r1, r3, [r2]
 8006770:	2900      	cmp	r1, #0
 8006772:	d1f6      	bne.n	8006762 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006774:	6803      	ldr	r3, [r0, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	f012 0f10 	tst.w	r2, #16
 800677c:	d001      	beq.n	8006782 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006782:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006786:	f7ff fdf4 	bl	8006372 <HAL_UARTEx_RxEventCallback>
 800678a:	e7a3      	b.n	80066d4 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800678c:	f7fb fa34 	bl	8001bf8 <HAL_UART_RxCpltCallback>
 8006790:	e7a0      	b.n	80066d4 <UART_RxISR_8BIT+0x18>
 8006792:	bf00      	nop
 8006794:	40008000 	.word	0x40008000

08006798 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006798:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800679a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80067a2:	2b22      	cmp	r3, #34	; 0x22
 80067a4:	d005      	beq.n	80067b2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067a6:	6802      	ldr	r2, [r0, #0]
 80067a8:	6993      	ldr	r3, [r2, #24]
 80067aa:	f043 0308 	orr.w	r3, r3, #8
 80067ae:	6193      	str	r3, [r2, #24]
  }
}
 80067b0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067b2:	6803      	ldr	r3, [r0, #0]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067b6:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80067b8:	4013      	ands	r3, r2
 80067ba:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80067bc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80067be:	3302      	adds	r3, #2
 80067c0:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80067c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80067d0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1ea      	bne.n	80067b0 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067da:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	e852 3f00 	ldrex	r3, [r2]
 80067e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	e842 3100 	strex	r1, r3, [r2]
 80067e8:	2900      	cmp	r1, #0
 80067ea:	d1f6      	bne.n	80067da <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	f102 0308 	add.w	r3, r2, #8
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	3208      	adds	r2, #8
 80067fc:	e842 3100 	strex	r1, r3, [r2]
 8006800:	2900      	cmp	r1, #0
 8006802:	d1f3      	bne.n	80067ec <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006804:	2320      	movs	r3, #32
 8006806:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800680e:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006810:	6803      	ldr	r3, [r0, #0]
 8006812:	4a16      	ldr	r2, [pc, #88]	; (800686c <UART_RxISR_16BIT+0xd4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00c      	beq.n	8006832 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800681e:	d008      	beq.n	8006832 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006820:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	e852 3f00 	ldrex	r3, [r2]
 8006826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	e842 3100 	strex	r1, r3, [r2]
 800682e:	2900      	cmp	r1, #0
 8006830:	d1f6      	bne.n	8006820 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006832:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d116      	bne.n	8006866 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	2300      	movs	r3, #0
 800683a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	e852 3f00 	ldrex	r3, [r2]
 8006842:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	e842 3100 	strex	r1, r3, [r2]
 800684a:	2900      	cmp	r1, #0
 800684c:	d1f6      	bne.n	800683c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800684e:	6803      	ldr	r3, [r0, #0]
 8006850:	69da      	ldr	r2, [r3, #28]
 8006852:	f012 0f10 	tst.w	r2, #16
 8006856:	d001      	beq.n	800685c <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006858:	2210      	movs	r2, #16
 800685a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800685c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006860:	f7ff fd87 	bl	8006372 <HAL_UARTEx_RxEventCallback>
 8006864:	e7a4      	b.n	80067b0 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006866:	f7fb f9c7 	bl	8001bf8 <HAL_UART_RxCpltCallback>
 800686a:	e7a1      	b.n	80067b0 <UART_RxISR_16BIT+0x18>
 800686c:	40008000 	.word	0x40008000

08006870 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006874:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800687c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006880:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006884:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006888:	2a22      	cmp	r2, #34	; 0x22
 800688a:	d005      	beq.n	8006898 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	f042 0208 	orr.w	r2, r2, #8
 8006892:	619a      	str	r2, [r3, #24]
  }
}
 8006894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006898:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800689a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800689e:	e008      	b.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d14c      	bne.n	8006942 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80068a8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04e      	beq.n	8006950 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068b2:	2f00      	cmp	r7, #0
 80068b4:	f000 809a 	beq.w	80069ec <UART_RxISR_8BIT_FIFOEN+0x17c>
 80068b8:	f015 0f20 	tst.w	r5, #32
 80068bc:	f000 8096 	beq.w	80069ec <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068c4:	b2f3      	uxtb	r3, r6
 80068c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80068c8:	400b      	ands	r3, r1
 80068ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80068cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068ce:	3301      	adds	r3, #1
 80068d0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80068d2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068e4:	f015 0f07 	tst.w	r5, #7
 80068e8:	d0de      	beq.n	80068a8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068ea:	f015 0f01 	tst.w	r5, #1
 80068ee:	d009      	beq.n	8006904 <UART_RxISR_8BIT_FIFOEN+0x94>
 80068f0:	f419 7f80 	tst.w	r9, #256	; 0x100
 80068f4:	d006      	beq.n	8006904 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068f6:	2201      	movs	r2, #1
 80068f8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006904:	f015 0f02 	tst.w	r5, #2
 8006908:	d00b      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800690a:	f018 0f01 	tst.w	r8, #1
 800690e:	d008      	beq.n	8006922 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	2202      	movs	r2, #2
 8006914:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006916:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006922:	f015 0f04 	tst.w	r5, #4
 8006926:	d0bb      	beq.n	80068a0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8006928:	f018 0f01 	tst.w	r8, #1
 800692c:	d0b8      	beq.n	80068a0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	2204      	movs	r2, #4
 8006932:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006934:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006940:	e7ae      	b.n	80068a0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006942:	4620      	mov	r0, r4
 8006944:	f7ff fcde 	bl	8006304 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	2300      	movs	r3, #0
 800694a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800694e:	e7ab      	b.n	80068a8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006950:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	e852 3f00 	ldrex	r3, [r2]
 8006956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	e842 3100 	strex	r1, r3, [r2]
 800695e:	2900      	cmp	r1, #0
 8006960:	d1f6      	bne.n	8006950 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006962:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	f102 0308 	add.w	r3, r2, #8
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006970:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	3208      	adds	r2, #8
 8006976:	e842 3100 	strex	r1, r3, [r2]
 800697a:	2900      	cmp	r1, #0
 800697c:	d1f1      	bne.n	8006962 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800697e:	2320      	movs	r3, #32
 8006980:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006988:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006998:	d106      	bne.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800699a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d00d      	beq.n	80069bc <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fb f929 	bl	8001bf8 <HAL_UART_RxCpltCallback>
 80069a6:	e784      	b.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	e852 3f00 	ldrex	r3, [r2]
 80069ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	e842 3100 	strex	r1, r3, [r2]
 80069b6:	2900      	cmp	r1, #0
 80069b8:	d1f6      	bne.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80069ba:	e7ee      	b.n	800699a <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	2300      	movs	r3, #0
 80069be:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	e852 3f00 	ldrex	r3, [r2]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	e842 3100 	strex	r1, r3, [r2]
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d1f6      	bne.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	69da      	ldr	r2, [r3, #28]
 80069d6:	f012 0f10 	tst.w	r2, #16
 80069da:	d001      	beq.n	80069e0 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069dc:	2210      	movs	r2, #16
 80069de:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7ff fcc4 	bl	8006372 <HAL_UARTEx_RxEventCallback>
 80069ea:	e762      	b.n	80068b2 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80069ec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80069f0:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f43f af4e 	beq.w	8006894 <UART_RxISR_8BIT_FIFOEN+0x24>
 80069f8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80069fc:	429a      	cmp	r2, r3
 80069fe:	f67f af49 	bls.w	8006894 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	f102 0308 	add.w	r3, r2, #8
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	3208      	adds	r2, #8
 8006a12:	e842 3100 	strex	r1, r3, [r2]
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d1f3      	bne.n	8006a02 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006a1c:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	e852 3f00 	ldrex	r3, [r2]
 8006a24:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	e842 3100 	strex	r1, r3, [r2]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d1f6      	bne.n	8006a1e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006a30:	e730      	b.n	8006894 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006a32:	bf00      	nop
 8006a34:	40008000 	.word	0x40008000
 8006a38:	080066bd 	.word	0x080066bd

08006a3c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a40:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a44:	6803      	ldr	r3, [r0, #0]
 8006a46:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a48:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a4c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a50:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006a54:	2a22      	cmp	r2, #34	; 0x22
 8006a56:	d005      	beq.n	8006a64 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	619a      	str	r2, [r3, #24]
  }
}
 8006a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a64:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006a66:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a6a:	e008      	b.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d14b      	bne.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006a74:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d04d      	beq.n	8006b1a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a7e:	2f00      	cmp	r7, #0
 8006a80:	f000 8099 	beq.w	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8006a84:	f015 0f20 	tst.w	r5, #32
 8006a88:	f000 8095 	beq.w	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a90:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006a92:	4033      	ands	r3, r6
 8006a94:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a98:	3302      	adds	r3, #2
 8006a9a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006a9c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006aae:	f015 0f07 	tst.w	r5, #7
 8006ab2:	d0df      	beq.n	8006a74 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ab4:	f015 0f01 	tst.w	r5, #1
 8006ab8:	d009      	beq.n	8006ace <UART_RxISR_16BIT_FIFOEN+0x92>
 8006aba:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006abe:	d006      	beq.n	8006ace <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ace:	f015 0f02 	tst.w	r5, #2
 8006ad2:	d00b      	beq.n	8006aec <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006ad4:	f018 0f01 	tst.w	r8, #1
 8006ad8:	d008      	beq.n	8006aec <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	2202      	movs	r2, #2
 8006ade:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aec:	f015 0f04 	tst.w	r5, #4
 8006af0:	d0bc      	beq.n	8006a6c <UART_RxISR_16BIT_FIFOEN+0x30>
 8006af2:	f018 0f01 	tst.w	r8, #1
 8006af6:	d0b9      	beq.n	8006a6c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	2204      	movs	r2, #4
 8006afc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006b0a:	e7af      	b.n	8006a6c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7ff fbf9 	bl	8006304 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006b18:	e7ac      	b.n	8006a74 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	e852 3f00 	ldrex	r3, [r2]
 8006b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	e842 3100 	strex	r1, r3, [r2]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	d1f6      	bne.n	8006b1a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	f102 0308 	add.w	r3, r2, #8
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	3208      	adds	r2, #8
 8006b40:	e842 3100 	strex	r1, r3, [r2]
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d1f1      	bne.n	8006b2c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006b48:	2320      	movs	r3, #32
 8006b4a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b52:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	4a29      	ldr	r2, [pc, #164]	; (8006bfc <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b62:	d106      	bne.n	8006b72 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d00d      	beq.n	8006b86 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7fb f844 	bl	8001bf8 <HAL_UART_RxCpltCallback>
 8006b70:	e785      	b.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	e852 3f00 	ldrex	r3, [r2]
 8006b78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	e842 3100 	strex	r1, r3, [r2]
 8006b80:	2900      	cmp	r1, #0
 8006b82:	d1f6      	bne.n	8006b72 <UART_RxISR_16BIT_FIFOEN+0x136>
 8006b84:	e7ee      	b.n	8006b64 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	2300      	movs	r3, #0
 8006b88:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	e852 3f00 	ldrex	r3, [r2]
 8006b90:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	e842 3100 	strex	r1, r3, [r2]
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	d1f6      	bne.n	8006b8a <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	f012 0f10 	tst.w	r2, #16
 8006ba4:	d001      	beq.n	8006baa <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006baa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff fbdf 	bl	8006372 <HAL_UARTEx_RxEventCallback>
 8006bb4:	e763      	b.n	8006a7e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006bb6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006bba:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f43f af4f 	beq.w	8006a60 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006bc2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	f67f af4a 	bls.w	8006a60 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bcc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	f102 0308 	add.w	r3, r2, #8
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	3208      	adds	r2, #8
 8006bdc:	e842 3100 	strex	r1, r3, [r2]
 8006be0:	2900      	cmp	r1, #0
 8006be2:	d1f3      	bne.n	8006bcc <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8006be6:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006be8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	e852 3f00 	ldrex	r3, [r2]
 8006bee:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	e842 3100 	strex	r1, r3, [r2]
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d1f6      	bne.n	8006be8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8006bfa:	e731      	b.n	8006a60 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	08006799 	.word	0x08006799

08006c04 <UART_SetConfig>:
{
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c08:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c0a:	6883      	ldr	r3, [r0, #8]
 8006c0c:	6902      	ldr	r2, [r0, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	6942      	ldr	r2, [r0, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	69c2      	ldr	r2, [r0, #28]
 8006c16:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c18:	6808      	ldr	r0, [r1, #0]
 8006c1a:	4a9d      	ldr	r2, [pc, #628]	; (8006e90 <UART_SetConfig+0x28c>)
 8006c1c:	4002      	ands	r2, r0
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6853      	ldr	r3, [r2, #4]
 8006c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c2a:	68e1      	ldr	r1, [r4, #12]
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c30:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	4b97      	ldr	r3, [pc, #604]	; (8006e94 <UART_SetConfig+0x290>)
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d001      	beq.n	8006c3e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006c3a:	6a23      	ldr	r3, [r4, #32]
 8006c3c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c3e:	6893      	ldr	r3, [r2, #8]
 8006c40:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c44:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006c50:	f023 030f 	bic.w	r3, r3, #15
 8006c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c56:	430b      	orrs	r3, r1
 8006c58:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4a8e      	ldr	r2, [pc, #568]	; (8006e98 <UART_SetConfig+0x294>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01c      	beq.n	8006c9c <UART_SetConfig+0x98>
 8006c62:	4a8e      	ldr	r2, [pc, #568]	; (8006e9c <UART_SetConfig+0x298>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d031      	beq.n	8006ccc <UART_SetConfig+0xc8>
 8006c68:	4a8a      	ldr	r2, [pc, #552]	; (8006e94 <UART_SetConfig+0x290>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d04b      	beq.n	8006d06 <UART_SetConfig+0x102>
 8006c6e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c70:	4988      	ldr	r1, [pc, #544]	; (8006e94 <UART_SetConfig+0x290>)
 8006c72:	428b      	cmp	r3, r1
 8006c74:	d068      	beq.n	8006d48 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c76:	69e0      	ldr	r0, [r4, #28]
 8006c78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c7c:	f000 80a5 	beq.w	8006dca <UART_SetConfig+0x1c6>
    switch (clocksource)
 8006c80:	2a08      	cmp	r2, #8
 8006c82:	f200 811f 	bhi.w	8006ec4 <UART_SetConfig+0x2c0>
 8006c86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006c8a:	00d3      	.short	0x00d3
 8006c8c:	00d100f5 	.word	0x00d100f5
 8006c90:	00f8011d 	.word	0x00f8011d
 8006c94:	011d011d 	.word	0x011d011d
 8006c98:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006ca4:	f002 0203 	and.w	r2, r2, #3
 8006ca8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cac:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006cb0:	2a03      	cmp	r2, #3
 8006cb2:	d809      	bhi.n	8006cc8 <UART_SetConfig+0xc4>
 8006cb4:	e8df f002 	tbb	[pc, r2]
 8006cb8:	063c0402 	.word	0x063c0402
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	e7d7      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	e7d5      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	e7d3      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006cc8:	2210      	movs	r2, #16
 8006cca:	e7d1      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cd0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006cd4:	f002 020c 	and.w	r2, r2, #12
 8006cd8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8006cdc:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006ce0:	2a0c      	cmp	r2, #12
 8006ce2:	d80e      	bhi.n	8006d02 <UART_SetConfig+0xfe>
 8006ce4:	e8df f002 	tbb	[pc, r2]
 8006ce8:	0d0d0d07 	.word	0x0d0d0d07
 8006cec:	0d0d0d09 	.word	0x0d0d0d09
 8006cf0:	0d0d0d26 	.word	0x0d0d0d26
 8006cf4:	0b          	.byte	0x0b
 8006cf5:	00          	.byte	0x00
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	e7ba      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	e7b8      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006cfe:	2208      	movs	r2, #8
 8006d00:	e7b6      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d02:	2210      	movs	r2, #16
 8006d04:	e7b4      	b.n	8006c70 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d0a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006d0e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006d12:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006d16:	d00f      	beq.n	8006d38 <UART_SetConfig+0x134>
 8006d18:	d805      	bhi.n	8006d26 <UART_SetConfig+0x122>
 8006d1a:	b17a      	cbz	r2, 8006d3c <UART_SetConfig+0x138>
 8006d1c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d20:	d10e      	bne.n	8006d40 <UART_SetConfig+0x13c>
 8006d22:	2204      	movs	r2, #4
 8006d24:	e7a4      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d26:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006d2a:	d10b      	bne.n	8006d44 <UART_SetConfig+0x140>
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	e79f      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d30:	2202      	movs	r2, #2
 8006d32:	e79d      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d34:	2202      	movs	r2, #2
 8006d36:	e79b      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d38:	2202      	movs	r2, #2
 8006d3a:	e799      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	e797      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d40:	2210      	movs	r2, #16
 8006d42:	e795      	b.n	8006c70 <UART_SetConfig+0x6c>
 8006d44:	2210      	movs	r2, #16
 8006d46:	e793      	b.n	8006c70 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006d48:	2a08      	cmp	r2, #8
 8006d4a:	f200 809c 	bhi.w	8006e86 <UART_SetConfig+0x282>
 8006d4e:	e8df f002 	tbb	[pc, r2]
 8006d52:	9a08      	.short	0x9a08
 8006d54:	9a379a3a 	.word	0x9a379a3a
 8006d58:	9a9a      	.short	0x9a9a
 8006d5a:	05          	.byte	0x05
 8006d5b:	00          	.byte	0x00
 8006d5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006d60:	e004      	b.n	8006d6c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d62:	f7fe ff39 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f000 808f 	beq.w	8006e8a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006d6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ea0 <UART_SetConfig+0x29c>)
 8006d70:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006d74:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d78:	6865      	ldr	r5, [r4, #4]
 8006d7a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	f200 8094 	bhi.w	8006eac <UART_SetConfig+0x2a8>
 8006d84:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006d88:	f200 8092 	bhi.w	8006eb0 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	4633      	mov	r3, r6
 8006d90:	4631      	mov	r1, r6
 8006d92:	f7f9 fca1 	bl	80006d8 <__aeabi_uldivmod>
 8006d96:	0209      	lsls	r1, r1, #8
 8006d98:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006d9c:	0200      	lsls	r0, r0, #8
 8006d9e:	086b      	lsrs	r3, r5, #1
 8006da0:	18c0      	adds	r0, r0, r3
 8006da2:	462a      	mov	r2, r5
 8006da4:	4633      	mov	r3, r6
 8006da6:	f141 0100 	adc.w	r1, r1, #0
 8006daa:	f7f9 fc95 	bl	80006d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dae:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006db2:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <UART_SetConfig+0x2a0>)
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d87d      	bhi.n	8006eb4 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	60d8      	str	r0, [r3, #12]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	e050      	b.n	8006e62 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc0:	f7fe fa0c 	bl	80051dc <HAL_RCC_GetSysClockFreq>
        break;
 8006dc4:	e7cf      	b.n	8006d66 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006dc6:	4838      	ldr	r0, [pc, #224]	; (8006ea8 <UART_SetConfig+0x2a4>)
 8006dc8:	e7d0      	b.n	8006d6c <UART_SetConfig+0x168>
    switch (clocksource)
 8006dca:	2a08      	cmp	r2, #8
 8006dcc:	d874      	bhi.n	8006eb8 <UART_SetConfig+0x2b4>
 8006dce:	e8df f002 	tbb	[pc, r2]
 8006dd2:	2707      	.short	0x2707
 8006dd4:	732a7305 	.word	0x732a7305
 8006dd8:	7373      	.short	0x7373
 8006dda:	0b          	.byte	0x0b
 8006ddb:	00          	.byte	0x00
 8006ddc:	4832      	ldr	r0, [pc, #200]	; (8006ea8 <UART_SetConfig+0x2a4>)
 8006dde:	e003      	b.n	8006de8 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de0:	f7fe fefa 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d069      	beq.n	8006ebc <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006dea:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <UART_SetConfig+0x29c>)
 8006dec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006df0:	fbb0 f0f3 	udiv	r0, r0, r3
 8006df4:	6862      	ldr	r2, [r4, #4]
 8006df6:	0853      	lsrs	r3, r2, #1
 8006df8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006dfc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	f1a0 0210 	sub.w	r2, r0, #16
 8006e04:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d859      	bhi.n	8006ec0 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e0c:	b283      	uxth	r3, r0
 8006e0e:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e12:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006e16:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	60d8      	str	r0, [r3, #12]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e020      	b.n	8006e62 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fe feea 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e24:	e7de      	b.n	8006de4 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fe f9d9 	bl	80051dc <HAL_RCC_GetSysClockFreq>
        break;
 8006e2a:	e7db      	b.n	8006de4 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006e2c:	481e      	ldr	r0, [pc, #120]	; (8006ea8 <UART_SetConfig+0x2a4>)
 8006e2e:	e003      	b.n	8006e38 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e30:	f7fe fed2 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d047      	beq.n	8006ec8 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <UART_SetConfig+0x29c>)
 8006e3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e40:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006e4a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4e:	f1a0 0210 	sub.w	r2, r0, #16
 8006e52:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d838      	bhi.n	8006ecc <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	b280      	uxth	r0, r0
 8006e5e:	60d8      	str	r0, [r3, #12]
 8006e60:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e68:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8006e70:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe fec0 	bl	8005bf8 <HAL_RCC_GetPCLK2Freq>
        break;
 8006e78:	e7dc      	b.n	8006e34 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe f9af 	bl	80051dc <HAL_RCC_GetSysClockFreq>
        break;
 8006e7e:	e7d9      	b.n	8006e34 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006e80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e84:	e7d8      	b.n	8006e38 <UART_SetConfig+0x234>
    switch (clocksource)
 8006e86:	2001      	movs	r0, #1
 8006e88:	e7eb      	b.n	8006e62 <UART_SetConfig+0x25e>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	e7e9      	b.n	8006e62 <UART_SetConfig+0x25e>
 8006e8e:	bf00      	nop
 8006e90:	cfff69f3 	.word	0xcfff69f3
 8006e94:	40008000 	.word	0x40008000
 8006e98:	40013800 	.word	0x40013800
 8006e9c:	40004400 	.word	0x40004400
 8006ea0:	0800b320 	.word	0x0800b320
 8006ea4:	000ffcff 	.word	0x000ffcff
 8006ea8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7d8      	b.n	8006e62 <UART_SetConfig+0x25e>
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e7d6      	b.n	8006e62 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	e7d4      	b.n	8006e62 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006eb8:	2001      	movs	r0, #1
 8006eba:	e7d2      	b.n	8006e62 <UART_SetConfig+0x25e>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e7d0      	b.n	8006e62 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	e7ce      	b.n	8006e62 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e7cc      	b.n	8006e62 <UART_SetConfig+0x25e>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7ca      	b.n	8006e62 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006ecc:	2001      	movs	r0, #1
 8006ece:	e7c8      	b.n	8006e62 <UART_SetConfig+0x25e>

08006ed0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ed2:	f013 0f01 	tst.w	r3, #1
 8006ed6:	d006      	beq.n	8006ee6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed8:	6802      	ldr	r2, [r0, #0]
 8006eda:	6853      	ldr	r3, [r2, #4]
 8006edc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ee0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ee8:	f013 0f02 	tst.w	r3, #2
 8006eec:	d006      	beq.n	8006efc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eee:	6802      	ldr	r2, [r0, #0]
 8006ef0:	6853      	ldr	r3, [r2, #4]
 8006ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006efc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006efe:	f013 0f04 	tst.w	r3, #4
 8006f02:	d006      	beq.n	8006f12 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f04:	6802      	ldr	r2, [r0, #0]
 8006f06:	6853      	ldr	r3, [r2, #4]
 8006f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f0c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f14:	f013 0f08 	tst.w	r3, #8
 8006f18:	d006      	beq.n	8006f28 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f1a:	6802      	ldr	r2, [r0, #0]
 8006f1c:	6853      	ldr	r3, [r2, #4]
 8006f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f22:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f2a:	f013 0f10 	tst.w	r3, #16
 8006f2e:	d006      	beq.n	8006f3e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f30:	6802      	ldr	r2, [r0, #0]
 8006f32:	6893      	ldr	r3, [r2, #8]
 8006f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f40:	f013 0f20 	tst.w	r3, #32
 8006f44:	d006      	beq.n	8006f54 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f46:	6802      	ldr	r2, [r0, #0]
 8006f48:	6893      	ldr	r3, [r2, #8]
 8006f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f5c:	6802      	ldr	r2, [r0, #0]
 8006f5e:	6853      	ldr	r3, [r2, #4]
 8006f60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f64:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f70:	d00b      	beq.n	8006f8a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f78:	d006      	beq.n	8006f88 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7a:	6802      	ldr	r2, [r0, #0]
 8006f7c:	6853      	ldr	r3, [r2, #4]
 8006f7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006f82:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006f84:	430b      	orrs	r3, r1
 8006f86:	6053      	str	r3, [r2, #4]
}
 8006f88:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f8a:	6802      	ldr	r2, [r0, #0]
 8006f8c:	6853      	ldr	r3, [r2, #4]
 8006f8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006f92:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6053      	str	r3, [r2, #4]
 8006f98:	e7eb      	b.n	8006f72 <UART_AdvFeatureConfig+0xa2>

08006f9a <UART_WaitOnFlagUntilTimeout>:
{
 8006f9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	4699      	mov	r9, r3
 8006fa6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006faa:	682c      	ldr	r4, [r5, #0]
 8006fac:	69e4      	ldr	r4, [r4, #28]
 8006fae:	ea37 0304 	bics.w	r3, r7, r4
 8006fb2:	bf0c      	ite	eq
 8006fb4:	f04f 0c01 	moveq.w	ip, #1
 8006fb8:	f04f 0c00 	movne.w	ip, #0
 8006fbc:	45b4      	cmp	ip, r6
 8006fbe:	d157      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006fc4:	d0f1      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fa fb87 	bl	80016d8 <HAL_GetTick>
 8006fca:	eba0 0009 	sub.w	r0, r0, r9
 8006fce:	4540      	cmp	r0, r8
 8006fd0:	d82f      	bhi.n	8007032 <UART_WaitOnFlagUntilTimeout+0x98>
 8006fd2:	f1b8 0f00 	cmp.w	r8, #0
 8006fd6:	d02c      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	f012 0f04 	tst.w	r2, #4
 8006fe0:	d0e3      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006fe8:	d0df      	beq.n	8006faa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fee:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ff0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	e852 3f00 	ldrex	r3, [r2]
 8006ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	e842 3100 	strex	r1, r3, [r2]
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d1f6      	bne.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	f102 0308 	add.w	r3, r2, #8
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	3208      	adds	r2, #8
 8007012:	e842 3100 	strex	r1, r3, [r2]
 8007016:	2900      	cmp	r1, #0
 8007018:	d1f3      	bne.n	8007002 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800701a:	2320      	movs	r3, #32
 800701c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007020:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007024:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007028:	2300      	movs	r3, #0
 800702a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800702e:	2003      	movs	r0, #3
 8007030:	e01f      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007032:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	e852 3f00 	ldrex	r3, [r2]
 8007038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	e842 3100 	strex	r1, r3, [r2]
 8007040:	2900      	cmp	r1, #0
 8007042:	d1f6      	bne.n	8007032 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	f102 0308 	add.w	r3, r2, #8
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	3208      	adds	r2, #8
 8007054:	e842 3100 	strex	r1, r3, [r2]
 8007058:	2900      	cmp	r1, #0
 800705a:	d1f3      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800705c:	2320      	movs	r3, #32
 800705e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007062:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007066:	2300      	movs	r3, #0
 8007068:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 800706c:	2003      	movs	r0, #3
 800706e:	e000      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8007070:	2000      	movs	r0, #0
}
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007076 <UART_CheckIdleState>:
{
 8007076:	b530      	push	{r4, r5, lr}
 8007078:	b083      	sub	sp, #12
 800707a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	2300      	movs	r3, #0
 800707e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007082:	f7fa fb29 	bl	80016d8 <HAL_GetTick>
 8007086:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f012 0f08 	tst.w	r2, #8
 8007090:	d110      	bne.n	80070b4 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f013 0f04 	tst.w	r3, #4
 800709a:	d119      	bne.n	80070d0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800709c:	2320      	movs	r3, #32
 800709e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a6:	2000      	movs	r0, #0
 80070a8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070aa:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80070ac:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	2200      	movs	r2, #0
 80070be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7ff ff69 	bl	8006f9a <UART_WaitOnFlagUntilTimeout>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d0e2      	beq.n	8007092 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80070cc:	2003      	movs	r0, #3
 80070ce:	e7ef      	b.n	80070b0 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	462b      	mov	r3, r5
 80070d8:	2200      	movs	r2, #0
 80070da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ff5b 	bl	8006f9a <UART_WaitOnFlagUntilTimeout>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d0d9      	beq.n	800709c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80070e8:	2003      	movs	r0, #3
 80070ea:	e7e1      	b.n	80070b0 <UART_CheckIdleState+0x3a>

080070ec <HAL_UART_Init>:
  if (huart == NULL)
 80070ec:	b378      	cbz	r0, 800714e <HAL_UART_Init+0x62>
{
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80070f2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80070f6:	b30b      	cbz	r3, 800713c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80070f8:	2324      	movs	r3, #36	; 0x24
 80070fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	f023 0301 	bic.w	r3, r3, #1
 8007106:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff fd7b 	bl	8006c04 <UART_SetConfig>
 800710e:	2801      	cmp	r0, #1
 8007110:	d013      	beq.n	800713a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007114:	b9bb      	cbnz	r3, 8007146 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	6853      	ldr	r3, [r2, #4]
 800711a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800711e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007120:	6822      	ldr	r2, [r4, #0]
 8007122:	6893      	ldr	r3, [r2, #8]
 8007124:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007128:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	6813      	ldr	r3, [r2, #0]
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff ff9e 	bl	8007076 <UART_CheckIdleState>
}
 800713a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800713c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8007140:	f7fa fc46 	bl	80019d0 <HAL_UART_MspInit>
 8007144:	e7d8      	b.n	80070f8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007146:	4620      	mov	r0, r4
 8007148:	f7ff fec2 	bl	8006ed0 <UART_AdvFeatureConfig>
 800714c:	e7e3      	b.n	8007116 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800714e:	2001      	movs	r0, #1
}
 8007150:	4770      	bx	lr
	...

08007154 <UART_Start_Receive_IT>:
{
 8007154:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007156:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007158:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800715c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8007164:	6883      	ldr	r3, [r0, #8]
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	d006      	beq.n	800717a <UART_Start_Receive_IT+0x26>
 800716c:	b9a3      	cbnz	r3, 8007198 <UART_Start_Receive_IT+0x44>
 800716e:	6903      	ldr	r3, [r0, #16]
 8007170:	b973      	cbnz	r3, 8007190 <UART_Start_Receive_IT+0x3c>
 8007172:	23ff      	movs	r3, #255	; 0xff
 8007174:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007178:	e014      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	b923      	cbnz	r3, 8007188 <UART_Start_Receive_IT+0x34>
 800717e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007182:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007186:	e00d      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
 8007188:	23ff      	movs	r3, #255	; 0xff
 800718a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800718e:	e009      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
 8007190:	237f      	movs	r3, #127	; 0x7f
 8007192:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007196:	e005      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
 8007198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800719c:	d02d      	beq.n	80071fa <UART_Start_Receive_IT+0xa6>
 800719e:	2300      	movs	r3, #0
 80071a0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071aa:	2322      	movs	r3, #34	; 0x22
 80071ac:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	f101 0308 	add.w	r3, r1, #8
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	3108      	adds	r1, #8
 80071c0:	e841 3400 	strex	r4, r3, [r1]
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	d1f3      	bne.n	80071b0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80071ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ce:	d01e      	beq.n	800720e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d0:	6883      	ldr	r3, [r0, #8]
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d6:	d042      	beq.n	800725e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80071d8:	4b29      	ldr	r3, [pc, #164]	; (8007280 <UART_Start_Receive_IT+0x12c>)
 80071da:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071dc:	6903      	ldr	r3, [r0, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d043      	beq.n	800726a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80071e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	e852 3f00 	ldrex	r3, [r2]
 80071e8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	e842 3100 	strex	r1, r3, [r2]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d1f6      	bne.n	80071e2 <UART_Start_Receive_IT+0x8e>
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	bc10      	pop	{r4}
 80071f8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80071fa:	6903      	ldr	r3, [r0, #16]
 80071fc:	b91b      	cbnz	r3, 8007206 <UART_Start_Receive_IT+0xb2>
 80071fe:	237f      	movs	r3, #127	; 0x7f
 8007200:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007204:	e7ce      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
 8007206:	233f      	movs	r3, #63	; 0x3f
 8007208:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800720c:	e7ca      	b.n	80071a4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800720e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007212:	4293      	cmp	r3, r2
 8007214:	d8dc      	bhi.n	80071d0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007216:	6883      	ldr	r3, [r0, #8]
 8007218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721c:	d019      	beq.n	8007252 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800721e:	4b19      	ldr	r3, [pc, #100]	; (8007284 <UART_Start_Receive_IT+0x130>)
 8007220:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007222:	6903      	ldr	r3, [r0, #16]
 8007224:	b143      	cbz	r3, 8007238 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007226:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	e852 3f00 	ldrex	r3, [r2]
 800722c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	e842 3100 	strex	r1, r3, [r2]
 8007234:	2900      	cmp	r1, #0
 8007236:	d1f6      	bne.n	8007226 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007238:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	f102 0308 	add.w	r3, r2, #8
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	3208      	adds	r2, #8
 8007248:	e842 3100 	strex	r1, r3, [r2]
 800724c:	2900      	cmp	r1, #0
 800724e:	d1f3      	bne.n	8007238 <UART_Start_Receive_IT+0xe4>
 8007250:	e7d0      	b.n	80071f4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	6903      	ldr	r3, [r0, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e2      	bne.n	800721e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007258:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <UART_Start_Receive_IT+0x134>)
 800725a:	6743      	str	r3, [r0, #116]	; 0x74
 800725c:	e7e1      	b.n	8007222 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800725e:	6903      	ldr	r3, [r0, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1b9      	bne.n	80071d8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007264:	4b09      	ldr	r3, [pc, #36]	; (800728c <UART_Start_Receive_IT+0x138>)
 8007266:	6743      	str	r3, [r0, #116]	; 0x74
 8007268:	e7b8      	b.n	80071dc <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800726a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	e852 3f00 	ldrex	r3, [r2]
 8007270:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	e842 3100 	strex	r1, r3, [r2]
 8007278:	2900      	cmp	r1, #0
 800727a:	d1f6      	bne.n	800726a <UART_Start_Receive_IT+0x116>
 800727c:	e7ba      	b.n	80071f4 <UART_Start_Receive_IT+0xa0>
 800727e:	bf00      	nop
 8007280:	080066bd 	.word	0x080066bd
 8007284:	08006871 	.word	0x08006871
 8007288:	08006a3d 	.word	0x08006a3d
 800728c:	08006799 	.word	0x08006799

08007290 <HAL_UART_Receive_IT>:
{
 8007290:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007292:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007296:	2b20      	cmp	r3, #32
 8007298:	d117      	bne.n	80072ca <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800729a:	b1c1      	cbz	r1, 80072ce <HAL_UART_Receive_IT+0x3e>
 800729c:	b1ca      	cbz	r2, 80072d2 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	2300      	movs	r3, #0
 80072a0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072a2:	6803      	ldr	r3, [r0, #0]
 80072a4:	4c0c      	ldr	r4, [pc, #48]	; (80072d8 <HAL_UART_Receive_IT+0x48>)
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	d00c      	beq.n	80072c4 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80072b0:	d008      	beq.n	80072c4 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b2:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	e854 3f00 	ldrex	r3, [r4]
 80072b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	e844 3500 	strex	r5, r3, [r4]
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	d1f6      	bne.n	80072b2 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80072c4:	f7ff ff46 	bl	8007154 <UART_Start_Receive_IT>
 80072c8:	e000      	b.n	80072cc <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80072ca:	2002      	movs	r0, #2
}
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80072ce:	2001      	movs	r0, #1
 80072d0:	e7fc      	b.n	80072cc <HAL_UART_Receive_IT+0x3c>
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7fa      	b.n	80072cc <HAL_UART_Receive_IT+0x3c>
 80072d6:	bf00      	nop
 80072d8:	40008000 	.word	0x40008000

080072dc <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80072dc:	b082      	sub	sp, #8
 80072de:	ab02      	add	r3, sp, #8
 80072e0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80072e4:	6802      	ldr	r2, [r0, #0]
 80072e6:	6853      	ldr	r3, [r2, #4]
 80072e8:	f023 0310 	bic.w	r3, r3, #16
 80072ec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80072f4:	6802      	ldr	r2, [r0, #0]
 80072f6:	6853      	ldr	r3, [r2, #4]
 80072f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072fc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007300:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007304:	6053      	str	r3, [r2, #4]
}
 8007306:	b002      	add	sp, #8
 8007308:	4770      	bx	lr
	...

0800730c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800730c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800730e:	b92b      	cbnz	r3, 800731c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007310:	2301      	movs	r3, #1
 8007312:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007316:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800731a:	4770      	bx	lr
{
 800731c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800731e:	6803      	ldr	r3, [r0, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007326:	6899      	ldr	r1, [r3, #8]
 8007328:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800732a:	4d09      	ldr	r5, [pc, #36]	; (8007350 <UARTEx_SetNbDataToProcess+0x44>)
 800732c:	5c6b      	ldrb	r3, [r5, r1]
 800732e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007330:	4c08      	ldr	r4, [pc, #32]	; (8007354 <UARTEx_SetNbDataToProcess+0x48>)
 8007332:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007334:	fb93 f3f1 	sdiv	r3, r3, r1
 8007338:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800733c:	5cab      	ldrb	r3, [r5, r2]
 800733e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007340:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007342:	fb93 f3f2 	sdiv	r3, r3, r2
 8007346:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800734a:	bc30      	pop	{r4, r5}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	0800b340 	.word	0x0800b340
 8007354:	0800b338 	.word	0x0800b338

08007358 <HAL_UARTEx_WakeupCallback>:
}
 8007358:	4770      	bx	lr

0800735a <HAL_UARTEx_RxFifoFullCallback>:
}
 800735a:	4770      	bx	lr

0800735c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800735c:	4770      	bx	lr

0800735e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800735e:	b510      	push	{r4, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	ab04      	add	r3, sp, #16
 8007364:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007368:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800736c:	2b01      	cmp	r3, #1
 800736e:	d035      	beq.n	80073dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007370:	4604      	mov	r4, r0
 8007372:	2301      	movs	r3, #1
 8007374:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	2324      	movs	r3, #36	; 0x24
 800737a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800737e:	6802      	ldr	r2, [r0, #0]
 8007380:	6813      	ldr	r3, [r2, #0]
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007388:	6801      	ldr	r1, [r0, #0]
 800738a:	688b      	ldr	r3, [r1, #8]
 800738c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007390:	9a02      	ldr	r2, [sp, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007396:	b1aa      	cbz	r2, 80073c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	6813      	ldr	r3, [r2, #0]
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80073a2:	f7fa f999 	bl	80016d8 <HAL_GetTick>
 80073a6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80073ac:	9200      	str	r2, [sp, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073b4:	4620      	mov	r0, r4
 80073b6:	f7ff fdf0 	bl	8006f9a <UART_WaitOnFlagUntilTimeout>
 80073ba:	b948      	cbnz	r0, 80073d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80073bc:	2320      	movs	r3, #32
 80073be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80073c2:	e006      	b.n	80073d2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80073c4:	ab04      	add	r3, sp, #16
 80073c6:	e913 0006 	ldmdb	r3, {r1, r2}
 80073ca:	f7ff ff87 	bl	80072dc <UARTEx_Wakeup_AddressConfig>
 80073ce:	e7e3      	b.n	8007398 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80073d0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80073d2:	2300      	movs	r3, #0
 80073d4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 80073d8:	b004      	add	sp, #16
 80073da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80073dc:	2002      	movs	r0, #2
 80073de:	e7fb      	b.n	80073d8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080073e0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80073e0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d010      	beq.n	800740a <HAL_UARTEx_EnableStopMode+0x2a>
 80073e8:	2301      	movs	r3, #1
 80073ea:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80073ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	e852 3f00 	ldrex	r3, [r2]
 80073f4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	e842 3100 	strex	r1, r3, [r2]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d1f6      	bne.n	80073ee <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007400:	2300      	movs	r3, #0
 8007402:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8007406:	4618      	mov	r0, r3
 8007408:	4770      	bx	lr
  __HAL_LOCK(huart);
 800740a:	2002      	movs	r0, #2
}
 800740c:	4770      	bx	lr

0800740e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800740e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007412:	2b01      	cmp	r3, #1
 8007414:	d01d      	beq.n	8007452 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007416:	b510      	push	{r4, lr}
 8007418:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800741a:	2301      	movs	r3, #1
 800741c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007420:	2324      	movs	r3, #36	; 0x24
 8007422:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007426:	6802      	ldr	r2, [r0, #0]
 8007428:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800742a:	6811      	ldr	r1, [r2, #0]
 800742c:	f021 0101 	bic.w	r1, r1, #1
 8007430:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007436:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800743a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800743c:	6802      	ldr	r2, [r0, #0]
 800743e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007440:	f7ff ff64 	bl	800730c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007444:	2320      	movs	r3, #32
 8007446:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800744a:	2000      	movs	r0, #0
 800744c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007450:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007452:	2002      	movs	r0, #2
}
 8007454:	4770      	bx	lr

08007456 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007456:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007458:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800745c:	2b01      	cmp	r3, #1
 800745e:	d01d      	beq.n	800749c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007460:	4604      	mov	r4, r0
 8007462:	2301      	movs	r3, #1
 8007464:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007468:	2324      	movs	r3, #36	; 0x24
 800746a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800746e:	6803      	ldr	r3, [r0, #0]
 8007470:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800747a:	6802      	ldr	r2, [r0, #0]
 800747c:	6893      	ldr	r3, [r2, #8]
 800747e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007482:	4319      	orrs	r1, r3
 8007484:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007486:	f7ff ff41 	bl	800730c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800748e:	2320      	movs	r3, #32
 8007490:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007494:	2000      	movs	r0, #0
 8007496:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800749a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800749c:	2002      	movs	r0, #2
 800749e:	e7fc      	b.n	800749a <HAL_UARTEx_SetTxFifoThreshold+0x44>

080074a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80074a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80074a2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d01d      	beq.n	80074e6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80074aa:	4604      	mov	r4, r0
 80074ac:	2301      	movs	r3, #1
 80074ae:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80074b2:	2324      	movs	r3, #36	; 0x24
 80074b4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074b8:	6803      	ldr	r3, [r0, #0]
 80074ba:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	f022 0201 	bic.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074c4:	6802      	ldr	r2, [r0, #0]
 80074c6:	6893      	ldr	r3, [r2, #8]
 80074c8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80074cc:	4319      	orrs	r1, r3
 80074ce:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80074d0:	f7ff ff1c 	bl	800730c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80074d8:	2320      	movs	r3, #32
 80074da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80074de:	2000      	movs	r0, #0
 80074e0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80074e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80074e6:	2002      	movs	r0, #2
 80074e8:	e7fc      	b.n	80074e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

080074ec <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80074f0:	b97b      	cbnz	r3, 8007512 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f2:	f3ef 8310 	mrs	r3, PRIMASK
 80074f6:	b913      	cbnz	r3, 80074fe <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074f8:	f3ef 8311 	mrs	r3, BASEPRI
 80074fc:	b11b      	cbz	r3, 8007506 <osKernelInitialize+0x1a>
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <osKernelInitialize+0x38>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d008      	beq.n	8007518 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <osKernelInitialize+0x38>)
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	b940      	cbnz	r0, 800751e <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800750c:	2201      	movs	r2, #1
 800750e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007510:	4770      	bx	lr
    stat = osErrorISR;
 8007512:	f06f 0005 	mvn.w	r0, #5
 8007516:	4770      	bx	lr
 8007518:	f06f 0005 	mvn.w	r0, #5
 800751c:	4770      	bx	lr
    } else {
      stat = osError;
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007522:	4770      	bx	lr
 8007524:	20000764 	.word	0x20000764

08007528 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007528:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800752e:	b9a3      	cbnz	r3, 800755a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007530:	f3ef 8310 	mrs	r3, PRIMASK
 8007534:	b913      	cbnz	r3, 800753c <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007536:	f3ef 8311 	mrs	r3, BASEPRI
 800753a:	b11b      	cbz	r3, 8007544 <osKernelStart+0x1c>
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <osKernelStart+0x44>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d00d      	beq.n	8007560 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007544:	4b09      	ldr	r3, [pc, #36]	; (800756c <osKernelStart+0x44>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10c      	bne.n	8007566 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <osKernelStart+0x44>)
 800754e:	2202      	movs	r2, #2
 8007550:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007552:	f001 fd0f 	bl	8008f74 <vTaskStartScheduler>
      stat = osOK;
 8007556:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8007558:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800755a:	f06f 0005 	mvn.w	r0, #5
 800755e:	e7fb      	b.n	8007558 <osKernelStart+0x30>
 8007560:	f06f 0005 	mvn.w	r0, #5
 8007564:	e7f8      	b.n	8007558 <osKernelStart+0x30>
      stat = osError;
 8007566:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800756a:	e7f5      	b.n	8007558 <osKernelStart+0x30>
 800756c:	20000764 	.word	0x20000764

08007570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007574:	2400      	movs	r4, #0
 8007576:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007578:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800757c:	2c00      	cmp	r4, #0
 800757e:	d138      	bne.n	80075f2 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007580:	f3ef 8310 	mrs	r3, PRIMASK
 8007584:	b913      	cbnz	r3, 800758c <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007586:	f3ef 8311 	mrs	r3, BASEPRI
 800758a:	b11b      	cbz	r3, 8007594 <osThreadNew+0x24>
 800758c:	4b2d      	ldr	r3, [pc, #180]	; (8007644 <osThreadNew+0xd4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d02e      	beq.n	80075f2 <osThreadNew+0x82>
 8007594:	b368      	cbz	r0, 80075f2 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007596:	b322      	cbz	r2, 80075e2 <osThreadNew+0x72>
      if (attr->name != NULL) {
 8007598:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800759a:	6993      	ldr	r3, [r2, #24]
 800759c:	b903      	cbnz	r3, 80075a0 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800759e:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075a0:	1e5c      	subs	r4, r3, #1
 80075a2:	2c37      	cmp	r4, #55	; 0x37
 80075a4:	d849      	bhi.n	800763a <osThreadNew+0xca>
 80075a6:	6854      	ldr	r4, [r2, #4]
 80075a8:	f014 0f01 	tst.w	r4, #1
 80075ac:	d147      	bne.n	800763e <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80075ae:	6956      	ldr	r6, [r2, #20]
 80075b0:	b16e      	cbz	r6, 80075ce <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075b2:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075b6:	6894      	ldr	r4, [r2, #8]
 80075b8:	b12c      	cbz	r4, 80075c6 <osThreadNew+0x56>
 80075ba:	68d7      	ldr	r7, [r2, #12]
 80075bc:	2f5b      	cmp	r7, #91	; 0x5b
 80075be:	d902      	bls.n	80075c6 <osThreadNew+0x56>
 80075c0:	6917      	ldr	r7, [r2, #16]
 80075c2:	b107      	cbz	r7, 80075c6 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075c4:	b9c6      	cbnz	r6, 80075f8 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075c6:	b12c      	cbz	r4, 80075d4 <osThreadNew+0x64>
    mem  = -1;
 80075c8:	f04f 34ff 	mov.w	r4, #4294967295
 80075cc:	e00e      	b.n	80075ec <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 80075ce:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80075d2:	e7f0      	b.n	80075b6 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075d4:	68d4      	ldr	r4, [r2, #12]
 80075d6:	b98c      	cbnz	r4, 80075fc <osThreadNew+0x8c>
 80075d8:	6914      	ldr	r4, [r2, #16]
 80075da:	b194      	cbz	r4, 8007602 <osThreadNew+0x92>
    mem  = -1;
 80075dc:	f04f 34ff 	mov.w	r4, #4294967295
 80075e0:	e004      	b.n	80075ec <osThreadNew+0x7c>
    name = NULL;
 80075e2:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80075e4:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80075e6:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80075e8:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 80075ec:	2c01      	cmp	r4, #1
 80075ee:	d00a      	beq.n	8007606 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80075f0:	b1ac      	cbz	r4, 800761e <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075f2:	9805      	ldr	r0, [sp, #20]
}
 80075f4:	b007      	add	sp, #28
 80075f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80075f8:	2401      	movs	r4, #1
 80075fa:	e7f7      	b.n	80075ec <osThreadNew+0x7c>
    mem  = -1;
 80075fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007600:	e7f4      	b.n	80075ec <osThreadNew+0x7c>
          mem = 0;
 8007602:	2400      	movs	r4, #0
 8007604:	e7f2      	b.n	80075ec <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007606:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007608:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800760a:	9202      	str	r2, [sp, #8]
 800760c:	9401      	str	r4, [sp, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	460b      	mov	r3, r1
 8007612:	4662      	mov	r2, ip
 8007614:	4629      	mov	r1, r5
 8007616:	f001 fc3d 	bl	8008e94 <xTaskCreateStatic>
 800761a:	9005      	str	r0, [sp, #20]
 800761c:	e7e9      	b.n	80075f2 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800761e:	aa05      	add	r2, sp, #20
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	460b      	mov	r3, r1
 8007626:	fa1f f28c 	uxth.w	r2, ip
 800762a:	4629      	mov	r1, r5
 800762c:	f001 fc6d 	bl	8008f0a <xTaskCreate>
 8007630:	2801      	cmp	r0, #1
 8007632:	d0de      	beq.n	80075f2 <osThreadNew+0x82>
          hTask = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	e7db      	b.n	80075f2 <osThreadNew+0x82>
        return (NULL);
 800763a:	2000      	movs	r0, #0
 800763c:	e7da      	b.n	80075f4 <osThreadNew+0x84>
 800763e:	2000      	movs	r0, #0
 8007640:	e7d8      	b.n	80075f4 <osThreadNew+0x84>
 8007642:	bf00      	nop
 8007644:	20000764 	.word	0x20000764

08007648 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007648:	b530      	push	{r4, r5, lr}
 800764a:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800764c:	b1f0      	cbz	r0, 800768c <osThreadFlagsSet+0x44>
 800764e:	4604      	mov	r4, r0
 8007650:	2900      	cmp	r1, #0
 8007652:	db1b      	blt.n	800768c <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765a:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 800765e:	b9db      	cbnz	r3, 8007698 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007660:	f3ef 8310 	mrs	r3, PRIMASK
 8007664:	b913      	cbnz	r3, 800766c <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007666:	f3ef 8311 	mrs	r3, BASEPRI
 800766a:	b11b      	cbz	r3, 8007674 <osThreadFlagsSet+0x2c>
 800766c:	4b19      	ldr	r3, [pc, #100]	; (80076d4 <osThreadFlagsSet+0x8c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d011      	beq.n	8007698 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007674:	2300      	movs	r3, #0
 8007676:	2201      	movs	r2, #1
 8007678:	4620      	mov	r0, r4
 800767a:	f002 f8b7 	bl	80097ec <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800767e:	ab03      	add	r3, sp, #12
 8007680:	2200      	movs	r2, #0
 8007682:	4611      	mov	r1, r2
 8007684:	4620      	mov	r0, r4
 8007686:	f002 f8b1 	bl	80097ec <xTaskGenericNotify>
 800768a:	e002      	b.n	8007692 <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800768c:	f06f 0303 	mvn.w	r3, #3
 8007690:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8007692:	9803      	ldr	r0, [sp, #12]
 8007694:	b005      	add	sp, #20
 8007696:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 8007698:	2500      	movs	r5, #0
 800769a:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800769c:	ab02      	add	r3, sp, #8
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	462b      	mov	r3, r5
 80076a2:	2201      	movs	r2, #1
 80076a4:	4620      	mov	r0, r4
 80076a6:	f002 f923 	bl	80098f0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80076aa:	9500      	str	r5, [sp, #0]
 80076ac:	ab03      	add	r3, sp, #12
 80076ae:	462a      	mov	r2, r5
 80076b0:	4629      	mov	r1, r5
 80076b2:	4620      	mov	r0, r4
 80076b4:	f002 f91c 	bl	80098f0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 80076b8:	9b02      	ldr	r3, [sp, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0e9      	beq.n	8007692 <osThreadFlagsSet+0x4a>
 80076be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	e7de      	b.n	8007692 <osThreadFlagsSet+0x4a>
 80076d4:	20000764 	.word	0x20000764

080076d8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d14c      	bne.n	8007782 <osThreadFlagsWait+0xaa>
 80076e8:	4681      	mov	r9, r0
 80076ea:	468a      	mov	sl, r1
 80076ec:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ee:	f3ef 8310 	mrs	r3, PRIMASK
 80076f2:	b913      	cbnz	r3, 80076fa <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076f4:	f3ef 8311 	mrs	r3, BASEPRI
 80076f8:	b11b      	cbz	r3, 8007702 <osThreadFlagsWait+0x2a>
 80076fa:	4b29      	ldr	r3, [pc, #164]	; (80077a0 <osThreadFlagsWait+0xc8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d045      	beq.n	800778e <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007702:	f1b9 0f00 	cmp.w	r9, #0
 8007706:	db45      	blt.n	8007794 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007708:	f01a 0f02 	tst.w	sl, #2
 800770c:	d007      	beq.n	800771e <osThreadFlagsWait+0x46>
      clear = 0U;
 800770e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8007712:	f001 fc85 	bl	8009020 <xTaskGetTickCount>
 8007716:	4683      	mov	fp, r0
    tout   = timeout;
 8007718:	463e      	mov	r6, r7
    rflags = 0U;
 800771a:	9d01      	ldr	r5, [sp, #4]
 800771c:	e023      	b.n	8007766 <osThreadFlagsWait+0x8e>
      clear = flags;
 800771e:	46c8      	mov	r8, r9
 8007720:	e7f7      	b.n	8007712 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8007722:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800772a:	f01a 0f01 	tst.w	sl, #1
 800772e:	d00d      	beq.n	800774c <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8007730:	ea39 0305 	bics.w	r3, r9, r5
 8007734:	d027      	beq.n	8007786 <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8007736:	b387      	cbz	r7, 800779a <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007738:	f001 fc72 	bl	8009020 <xTaskGetTickCount>
 800773c:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8007740:	429e      	cmp	r6, r3
 8007742:	d30b      	bcc.n	800775c <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8007744:	ebab 0000 	sub.w	r0, fp, r0
 8007748:	4406      	add	r6, r0
 800774a:	e00b      	b.n	8007764 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 800774c:	ea19 0f05 	tst.w	r9, r5
 8007750:	d119      	bne.n	8007786 <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8007752:	2f00      	cmp	r7, #0
 8007754:	d1f0      	bne.n	8007738 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 8007756:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800775a:	e014      	b.n	8007786 <osThreadFlagsWait+0xae>
          tout  = 0;
 800775c:	9e01      	ldr	r6, [sp, #4]
 800775e:	e001      	b.n	8007764 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8007760:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8007764:	b17c      	cbz	r4, 8007786 <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007766:	4633      	mov	r3, r6
 8007768:	aa03      	add	r2, sp, #12
 800776a:	4641      	mov	r1, r8
 800776c:	2000      	movs	r0, #0
 800776e:	f001 fff1 	bl	8009754 <xTaskNotifyWait>
 8007772:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8007774:	2801      	cmp	r0, #1
 8007776:	d0d4      	beq.n	8007722 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 8007778:	2f00      	cmp	r7, #0
 800777a:	d1f1      	bne.n	8007760 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 800777c:	f06f 0502 	mvn.w	r5, #2
 8007780:	e7f0      	b.n	8007764 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8007782:	f06f 0505 	mvn.w	r5, #5
}
 8007786:	4628      	mov	r0, r5
 8007788:	b005      	add	sp, #20
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 800778e:	f06f 0505 	mvn.w	r5, #5
 8007792:	e7f8      	b.n	8007786 <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8007794:	f06f 0503 	mvn.w	r5, #3
 8007798:	e7f5      	b.n	8007786 <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 800779a:	f06f 0502 	mvn.w	r5, #2
 800779e:	e7f2      	b.n	8007786 <osThreadFlagsWait+0xae>
 80077a0:	20000764 	.word	0x20000764

080077a4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d153      	bne.n	8007858 <osSemaphoreNew+0xb4>
 80077b0:	460e      	mov	r6, r1
 80077b2:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b4:	f3ef 8310 	mrs	r3, PRIMASK
 80077b8:	b913      	cbnz	r3, 80077c0 <osSemaphoreNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077ba:	f3ef 8311 	mrs	r3, BASEPRI
 80077be:	b11b      	cbz	r3, 80077c8 <osSemaphoreNew+0x24>
 80077c0:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <osSemaphoreNew+0xcc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d04b      	beq.n	8007860 <osSemaphoreNew+0xbc>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d04b      	beq.n	8007864 <osSemaphoreNew+0xc0>
 80077cc:	42b0      	cmp	r0, r6
 80077ce:	d34b      	bcc.n	8007868 <osSemaphoreNew+0xc4>
    mem = -1;

    if (attr != NULL) {
 80077d0:	b14d      	cbz	r5, 80077e6 <osSemaphoreNew+0x42>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80077d2:	68ac      	ldr	r4, [r5, #8]
 80077d4:	b114      	cbz	r4, 80077dc <osSemaphoreNew+0x38>
 80077d6:	68eb      	ldr	r3, [r5, #12]
 80077d8:	2b4f      	cmp	r3, #79	; 0x4f
 80077da:	d814      	bhi.n	8007806 <osSemaphoreNew+0x62>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077dc:	2c00      	cmp	r4, #0
 80077de:	d145      	bne.n	800786c <osSemaphoreNew+0xc8>
 80077e0:	68eb      	ldr	r3, [r5, #12]
 80077e2:	b10b      	cbz	r3, 80077e8 <osSemaphoreNew+0x44>
 80077e4:	e039      	b.n	800785a <osSemaphoreNew+0xb6>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80077e6:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80077e8:	2801      	cmp	r0, #1
 80077ea:	d00e      	beq.n	800780a <osSemaphoreNew+0x66>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80077ec:	bb73      	cbnz	r3, 800784c <osSemaphoreNew+0xa8>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80077ee:	4631      	mov	r1, r6
 80077f0:	f000 fddb 	bl	80083aa <xQueueCreateCountingSemaphore>
 80077f4:	4604      	mov	r4, r0
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80077f6:	b384      	cbz	r4, 800785a <osSemaphoreNew+0xb6>
        if (attr != NULL) {
 80077f8:	b105      	cbz	r5, 80077fc <osSemaphoreNew+0x58>
          name = attr->name;
 80077fa:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80077fc:	4629      	mov	r1, r5
 80077fe:	4620      	mov	r0, r4
 8007800:	f001 f94a 	bl	8008a98 <vQueueAddToRegistry>
 8007804:	e029      	b.n	800785a <osSemaphoreNew+0xb6>
        mem = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	e7ee      	b.n	80077e8 <osSemaphoreNew+0x44>
        if (mem == 1) {
 800780a:	b9b3      	cbnz	r3, 800783a <osSemaphoreNew+0x96>
          hSemaphore = xSemaphoreCreateBinary();
 800780c:	2203      	movs	r2, #3
 800780e:	2100      	movs	r1, #0
 8007810:	2001      	movs	r0, #1
 8007812:	f000 fd80 	bl	8008316 <xQueueGenericCreate>
 8007816:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007818:	2c00      	cmp	r4, #0
 800781a:	d0ec      	beq.n	80077f6 <osSemaphoreNew+0x52>
 800781c:	2e00      	cmp	r6, #0
 800781e:	d0ea      	beq.n	80077f6 <osSemaphoreNew+0x52>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007820:	2300      	movs	r3, #0
 8007822:	461a      	mov	r2, r3
 8007824:	4619      	mov	r1, r3
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fddd 	bl	80083e6 <xQueueGenericSend>
 800782c:	2801      	cmp	r0, #1
 800782e:	d0e2      	beq.n	80077f6 <osSemaphoreNew+0x52>
            vSemaphoreDelete (hSemaphore);
 8007830:	4620      	mov	r0, r4
 8007832:	f001 f95b 	bl	8008aec <vQueueDelete>
            hSemaphore = NULL;
 8007836:	2400      	movs	r4, #0
 8007838:	e00f      	b.n	800785a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800783a:	68ab      	ldr	r3, [r5, #8]
 800783c:	2203      	movs	r2, #3
 800783e:	9200      	str	r2, [sp, #0]
 8007840:	2200      	movs	r2, #0
 8007842:	4611      	mov	r1, r2
 8007844:	f000 fd1d 	bl	8008282 <xQueueGenericCreateStatic>
 8007848:	4604      	mov	r4, r0
 800784a:	e7e5      	b.n	8007818 <osSemaphoreNew+0x74>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800784c:	68aa      	ldr	r2, [r5, #8]
 800784e:	4631      	mov	r1, r6
 8007850:	f000 fd88 	bl	8008364 <xQueueCreateCountingSemaphoreStatic>
 8007854:	4604      	mov	r4, r0
 8007856:	e7ce      	b.n	80077f6 <osSemaphoreNew+0x52>
  hSemaphore = NULL;
 8007858:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800785a:	4620      	mov	r0, r4
 800785c:	b002      	add	sp, #8
 800785e:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8007860:	2400      	movs	r4, #0
 8007862:	e7fa      	b.n	800785a <osSemaphoreNew+0xb6>
 8007864:	2400      	movs	r4, #0
 8007866:	e7f8      	b.n	800785a <osSemaphoreNew+0xb6>
 8007868:	2400      	movs	r4, #0
 800786a:	e7f6      	b.n	800785a <osSemaphoreNew+0xb6>
 800786c:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 800786e:	e7f4      	b.n	800785a <osSemaphoreNew+0xb6>
 8007870:	20000764 	.word	0x20000764

08007874 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007874:	b390      	cbz	r0, 80078dc <osSemaphoreAcquire+0x68>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007876:	b510      	push	{r4, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	460c      	mov	r4, r1
 800787c:	4684      	mov	ip, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007882:	b99b      	cbnz	r3, 80078ac <osSemaphoreAcquire+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007884:	f3ef 8310 	mrs	r3, PRIMASK
 8007888:	b913      	cbnz	r3, 8007890 <osSemaphoreAcquire+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800788a:	f3ef 8311 	mrs	r3, BASEPRI
 800788e:	b11b      	cbz	r3, 8007898 <osSemaphoreAcquire+0x24>
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <osSemaphoreAcquire+0x84>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d009      	beq.n	80078ac <osSemaphoreAcquire+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007898:	4621      	mov	r1, r4
 800789a:	4660      	mov	r0, ip
 800789c:	f000 ffd5 	bl	800884a <xQueueSemaphoreTake>
 80078a0:	2801      	cmp	r0, #1
 80078a2:	d024      	beq.n	80078ee <osSemaphoreAcquire+0x7a>
      if (timeout != 0U) {
 80078a4:	b32c      	cbz	r4, 80078f2 <osSemaphoreAcquire+0x7e>
        stat = osErrorTimeout;
 80078a6:	f06f 0001 	mvn.w	r0, #1
 80078aa:	e015      	b.n	80078d8 <osSemaphoreAcquire+0x64>
    if (timeout != 0U) {
 80078ac:	b9cc      	cbnz	r4, 80078e2 <osSemaphoreAcquire+0x6e>
      yield = pdFALSE;
 80078ae:	2100      	movs	r1, #0
 80078b0:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80078b2:	aa01      	add	r2, sp, #4
 80078b4:	4660      	mov	r0, ip
 80078b6:	f001 f89b 	bl	80089f0 <xQueueReceiveFromISR>
 80078ba:	2801      	cmp	r0, #1
 80078bc:	d114      	bne.n	80078e8 <osSemaphoreAcquire+0x74>
        portYIELD_FROM_ISR (yield);
 80078be:	9801      	ldr	r0, [sp, #4]
 80078c0:	b150      	cbz	r0, 80078d8 <osSemaphoreAcquire+0x64>
 80078c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80078d6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80078d8:	b002      	add	sp, #8
 80078da:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80078dc:	f06f 0003 	mvn.w	r0, #3
}
 80078e0:	4770      	bx	lr
      stat = osErrorParameter;
 80078e2:	f06f 0003 	mvn.w	r0, #3
 80078e6:	e7f7      	b.n	80078d8 <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 80078e8:	f06f 0002 	mvn.w	r0, #2
 80078ec:	e7f4      	b.n	80078d8 <osSemaphoreAcquire+0x64>
  stat = osOK;
 80078ee:	2000      	movs	r0, #0
 80078f0:	e7f2      	b.n	80078d8 <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 80078f2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80078f6:	e7ef      	b.n	80078d8 <osSemaphoreAcquire+0x64>
 80078f8:	20000764 	.word	0x20000764

080078fc <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80078fc:	b390      	cbz	r0, 8007964 <osSemaphoreRelease+0x68>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80078fe:	b500      	push	{lr}
 8007900:	b083      	sub	sp, #12
 8007902:	4684      	mov	ip, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007904:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007908:	b9ab      	cbnz	r3, 8007936 <osSemaphoreRelease+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790a:	f3ef 8310 	mrs	r3, PRIMASK
 800790e:	b913      	cbnz	r3, 8007916 <osSemaphoreRelease+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007910:	f3ef 8311 	mrs	r3, BASEPRI
 8007914:	b11b      	cbz	r3, 800791e <osSemaphoreRelease+0x22>
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <osSemaphoreRelease+0x7c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d00b      	beq.n	8007936 <osSemaphoreRelease+0x3a>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800791e:	2300      	movs	r3, #0
 8007920:	461a      	mov	r2, r3
 8007922:	4619      	mov	r1, r3
 8007924:	4660      	mov	r0, ip
 8007926:	f000 fd5e 	bl	80083e6 <xQueueGenericSend>
 800792a:	2801      	cmp	r0, #1
 800792c:	d120      	bne.n	8007970 <osSemaphoreRelease+0x74>
  stat = osOK;
 800792e:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8007930:	b003      	add	sp, #12
 8007932:	f85d fb04 	ldr.w	pc, [sp], #4
    yield = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800793a:	a901      	add	r1, sp, #4
 800793c:	4660      	mov	r0, ip
 800793e:	f000 fe7c 	bl	800863a <xQueueGiveFromISR>
 8007942:	2801      	cmp	r0, #1
 8007944:	d111      	bne.n	800796a <osSemaphoreRelease+0x6e>
      portYIELD_FROM_ISR (yield);
 8007946:	9801      	ldr	r0, [sp, #4]
 8007948:	2800      	cmp	r0, #0
 800794a:	d0f1      	beq.n	8007930 <osSemaphoreRelease+0x34>
 800794c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007954:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007960:	2000      	movs	r0, #0
 8007962:	e7e5      	b.n	8007930 <osSemaphoreRelease+0x34>
    stat = osErrorParameter;
 8007964:	f06f 0003 	mvn.w	r0, #3
}
 8007968:	4770      	bx	lr
      stat = osErrorResource;
 800796a:	f06f 0002 	mvn.w	r0, #2
 800796e:	e7df      	b.n	8007930 <osSemaphoreRelease+0x34>
      stat = osErrorResource;
 8007970:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8007974:	e7dc      	b.n	8007930 <osSemaphoreRelease+0x34>
 8007976:	bf00      	nop
 8007978:	20000764 	.word	0x20000764

0800797c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800797c:	4b03      	ldr	r3, [pc, #12]	; (800798c <vApplicationGetIdleTaskMemory+0x10>)
 800797e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007980:	4b03      	ldr	r3, [pc, #12]	; (8007990 <vApplicationGetIdleTaskMemory+0x14>)
 8007982:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	6013      	str	r3, [r2, #0]
}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000708 	.word	0x20000708
 8007990:	20000508 	.word	0x20000508

08007994 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007994:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <vApplicationGetTimerTaskMemory+0x10>)
 8007996:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007998:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <vApplicationGetTimerTaskMemory+0x14>)
 800799a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800799c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	4770      	bx	lr
 80079a4:	20000b68 	.word	0x20000b68
 80079a8:	20000768 	.word	0x20000768

080079ac <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079ac:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079ae:	f012 0f07 	tst.w	r2, #7
 80079b2:	d01e      	beq.n	80079f2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079b4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079ba:	f5c1 5320 	rsb	r3, r1, #10240	; 0x2800
 80079be:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079c2:	480e      	ldr	r0, [pc, #56]	; (80079fc <prvHeapInit+0x50>)
 80079c4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079c6:	2100      	movs	r1, #0
 80079c8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079ca:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80079cc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079ce:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80079d2:	480b      	ldr	r0, [pc, #44]	; (8007a00 <prvHeapInit+0x54>)
 80079d4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80079d6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079d8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079da:	1a99      	subs	r1, r3, r2
 80079dc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079de:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e0:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <prvHeapInit+0x58>)
 80079e2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <prvHeapInit+0x5c>)
 80079e6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079e8:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <prvHeapInit+0x60>)
 80079ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079ee:	601a      	str	r2, [r3, #0]
}
 80079f0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80079f6:	e7e4      	b.n	80079c2 <prvHeapInit+0x16>
 80079f8:	20000bc8 	.word	0x20000bc8
 80079fc:	200033d4 	.word	0x200033d4
 8007a00:	20000bc4 	.word	0x20000bc4
 8007a04:	200033d0 	.word	0x200033d0
 8007a08:	200033cc 	.word	0x200033cc
 8007a0c:	200033c8 	.word	0x200033c8

08007a10 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a10:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <prvInsertBlockIntoFreeList+0x58>)
 8007a12:	461a      	mov	r2, r3
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4283      	cmp	r3, r0
 8007a18:	d3fb      	bcc.n	8007a12 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a1a:	6851      	ldr	r1, [r2, #4]
 8007a1c:	eb02 0c01 	add.w	ip, r2, r1
 8007a20:	4584      	cmp	ip, r0
 8007a22:	d009      	beq.n	8007a38 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a24:	6841      	ldr	r1, [r0, #4]
 8007a26:	eb00 0c01 	add.w	ip, r0, r1
 8007a2a:	4563      	cmp	r3, ip
 8007a2c:	d009      	beq.n	8007a42 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a2e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a30:	4290      	cmp	r0, r2
 8007a32:	d018      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a34:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8007a36:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a38:	6840      	ldr	r0, [r0, #4]
 8007a3a:	4401      	add	r1, r0
 8007a3c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007a3e:	4610      	mov	r0, r2
 8007a40:	e7f0      	b.n	8007a24 <prvInsertBlockIntoFreeList+0x14>
{
 8007a42:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a44:	4c09      	ldr	r4, [pc, #36]	; (8007a6c <prvInsertBlockIntoFreeList+0x5c>)
 8007a46:	6824      	ldr	r4, [r4, #0]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d00a      	beq.n	8007a62 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4419      	add	r1, r3
 8007a50:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a52:	6813      	ldr	r3, [r2, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007a58:	4290      	cmp	r0, r2
 8007a5a:	d000      	beq.n	8007a5e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a5c:	6010      	str	r0, [r2, #0]
	}
}
 8007a5e:	bc10      	pop	{r4}
 8007a60:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a62:	6004      	str	r4, [r0, #0]
 8007a64:	e7f8      	b.n	8007a58 <prvInsertBlockIntoFreeList+0x48>
 8007a66:	4770      	bx	lr
 8007a68:	200033d4 	.word	0x200033d4
 8007a6c:	20000bc4 	.word	0x20000bc4

08007a70 <pvPortMalloc>:
{
 8007a70:	b570      	push	{r4, r5, r6, lr}
 8007a72:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8007a74:	f001 facc 	bl	8009010 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a78:	4b34      	ldr	r3, [pc, #208]	; (8007b4c <pvPortMalloc+0xdc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	b1a3      	cbz	r3, 8007aa8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a7e:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <pvPortMalloc+0xe0>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	421d      	tst	r5, r3
 8007a84:	d14a      	bne.n	8007b1c <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 8007a86:	b135      	cbz	r5, 8007a96 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8007a88:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a8a:	f015 0f07 	tst.w	r5, #7
 8007a8e:	d002      	beq.n	8007a96 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a90:	f025 0507 	bic.w	r5, r5, #7
 8007a94:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	d042      	beq.n	8007b20 <pvPortMalloc+0xb0>
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	; (8007b54 <pvPortMalloc+0xe4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	d34d      	bcc.n	8007b3e <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8007aa2:	4a2d      	ldr	r2, [pc, #180]	; (8007b58 <pvPortMalloc+0xe8>)
 8007aa4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aa6:	e004      	b.n	8007ab2 <pvPortMalloc+0x42>
			prvHeapInit();
 8007aa8:	f7ff ff80 	bl	80079ac <prvHeapInit>
 8007aac:	e7e7      	b.n	8007a7e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8007aae:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ab0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ab2:	6863      	ldr	r3, [r4, #4]
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	d202      	bcs.n	8007abe <pvPortMalloc+0x4e>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f7      	bne.n	8007aae <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8007abe:	4b23      	ldr	r3, [pc, #140]	; (8007b4c <pvPortMalloc+0xdc>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	d03d      	beq.n	8007b42 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ac6:	6816      	ldr	r6, [r2, #0]
 8007ac8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	1b5b      	subs	r3, r3, r5
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d910      	bls.n	8007af8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ad6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad8:	f010 0f07 	tst.w	r0, #7
 8007adc:	d008      	beq.n	8007af0 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	e7fe      	b.n	8007aee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007af0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007af2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007af4:	f7ff ff8c 	bl	8007a10 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007af8:	6862      	ldr	r2, [r4, #4]
 8007afa:	4916      	ldr	r1, [pc, #88]	; (8007b54 <pvPortMalloc+0xe4>)
 8007afc:	680b      	ldr	r3, [r1, #0]
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b02:	4916      	ldr	r1, [pc, #88]	; (8007b5c <pvPortMalloc+0xec>)
 8007b04:	6809      	ldr	r1, [r1, #0]
 8007b06:	428b      	cmp	r3, r1
 8007b08:	d201      	bcs.n	8007b0e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b0a:	4914      	ldr	r1, [pc, #80]	; (8007b5c <pvPortMalloc+0xec>)
 8007b0c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <pvPortMalloc+0xe0>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	e002      	b.n	8007b22 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8007b1c:	2600      	movs	r6, #0
 8007b1e:	e000      	b.n	8007b22 <pvPortMalloc+0xb2>
 8007b20:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8007b22:	f001 fb29 	bl	8009178 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b26:	f016 0f07 	tst.w	r6, #7
 8007b2a:	d00c      	beq.n	8007b46 <pvPortMalloc+0xd6>
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	e7fe      	b.n	8007b3c <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8007b3e:	2600      	movs	r6, #0
 8007b40:	e7ef      	b.n	8007b22 <pvPortMalloc+0xb2>
 8007b42:	2600      	movs	r6, #0
 8007b44:	e7ed      	b.n	8007b22 <pvPortMalloc+0xb2>
}
 8007b46:	4630      	mov	r0, r6
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000bc4 	.word	0x20000bc4
 8007b50:	200033c8 	.word	0x200033c8
 8007b54:	200033cc 	.word	0x200033cc
 8007b58:	200033d4 	.word	0x200033d4
 8007b5c:	200033d0 	.word	0x200033d0

08007b60 <vPortFree>:
	if( pv != NULL )
 8007b60:	b380      	cbz	r0, 8007bc4 <vPortFree+0x64>
{
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007b66:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b6e:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <vPortFree+0x68>)
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	4213      	tst	r3, r2
 8007b74:	d108      	bne.n	8007b88 <vPortFree+0x28>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	e7fe      	b.n	8007b86 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b88:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007b8c:	b141      	cbz	r1, 8007ba0 <vPortFree+0x40>
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	e7fe      	b.n	8007b9e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ba0:	ea23 0302 	bic.w	r3, r3, r2
 8007ba4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007ba8:	f001 fa32 	bl	8009010 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bac:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007bb0:	4a06      	ldr	r2, [pc, #24]	; (8007bcc <vPortFree+0x6c>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	440b      	add	r3, r1
 8007bb6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f7ff ff29 	bl	8007a10 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007bbe:	f001 fadb 	bl	8009178 <xTaskResumeAll>
}
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	200033c8 	.word	0x200033c8
 8007bcc:	200033cc 	.word	0x200033cc

08007bd0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd0:	f100 0308 	add.w	r3, r0, #8
 8007bd4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bdc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bde:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007be4:	4770      	bx	lr

08007be6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bea:	4770      	bx	lr

08007bec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bf4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bf6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bf8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007bfa:	6803      	ldr	r3, [r0, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	6003      	str	r3, [r0, #0]
}
 8007c00:	4770      	bx	lr

08007c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c02:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c04:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c06:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007c0a:	d011      	beq.n	8007c30 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c0c:	f100 0308 	add.w	r3, r0, #8
 8007c10:	461c      	mov	r4, r3
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	42aa      	cmp	r2, r5
 8007c18:	d9fa      	bls.n	8007c10 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c1e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c20:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c22:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c24:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007c26:	6803      	ldr	r3, [r0, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	6003      	str	r3, [r0, #0]
}
 8007c2c:	bc30      	pop	{r4, r5}
 8007c2e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c30:	6904      	ldr	r4, [r0, #16]
 8007c32:	e7f2      	b.n	8007c1a <vListInsert+0x18>

08007c34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c36:	6841      	ldr	r1, [r0, #4]
 8007c38:	6882      	ldr	r2, [r0, #8]
 8007c3a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c3c:	6841      	ldr	r1, [r0, #4]
 8007c3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	4282      	cmp	r2, r0
 8007c44:	d006      	beq.n	8007c54 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c46:	2200      	movs	r2, #0
 8007c48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c50:	6818      	ldr	r0, [r3, #0]
}
 8007c52:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c54:	6882      	ldr	r2, [r0, #8]
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	e7f5      	b.n	8007c46 <uxListRemove+0x12>
	...

08007c5c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c5c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <prvTaskExitError+0x3c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d008      	beq.n	8007c7e <prvTaskExitError+0x22>
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	e7fe      	b.n	8007c7c <prvTaskExitError+0x20>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0fc      	beq.n	8007c8e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c94:	b002      	add	sp, #8
 8007c96:	4770      	bx	lr
 8007c98:	20000080 	.word	0x20000080

08007c9c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c9c:	4806      	ldr	r0, [pc, #24]	; (8007cb8 <prvPortStartFirstTask+0x1c>)
 8007c9e:	6800      	ldr	r0, [r0, #0]
 8007ca0:	6800      	ldr	r0, [r0, #0]
 8007ca2:	f380 8808 	msr	MSP, r0
 8007ca6:	b662      	cpsie	i
 8007ca8:	b661      	cpsie	f
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	df00      	svc	0
 8007cb4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cb6:	0000      	.short	0x0000
 8007cb8:	e000ed08 	.word	0xe000ed08

08007cbc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cc0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cc4:	f021 0101 	bic.w	r1, r1, #1
 8007cc8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <pxPortInitialiseStack+0x20>)
 8007cce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cd2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007cd6:	3840      	subs	r0, #64	; 0x40
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	08007c5d 	.word	0x08007c5d

08007ce0 <SVC_Handler>:
	__asm volatile (
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <pxCurrentTCBConst2>)
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cea:	f380 8809 	msr	PSP, r0
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007cfe:	4770      	bx	lr

08007d00 <pxCurrentTCBConst2>:
 8007d00:	20003430 	.word	0x20003430

08007d04 <vPortEnterCritical>:
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d14:	4a0b      	ldr	r2, [pc, #44]	; (8007d44 <vPortEnterCritical+0x40>)
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d000      	beq.n	8007d22 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007d20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007d2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d2e:	d0f7      	beq.n	8007d20 <vPortEnterCritical+0x1c>
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	e7fe      	b.n	8007d40 <vPortEnterCritical+0x3c>
 8007d42:	bf00      	nop
 8007d44:	20000080 	.word	0x20000080

08007d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <vPortExitCritical+0x28>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	b943      	cbnz	r3, 8007d60 <vPortExitCritical+0x18>
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	e7fe      	b.n	8007d5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007d60:	3b01      	subs	r3, #1
 8007d62:	4a03      	ldr	r2, [pc, #12]	; (8007d70 <vPortExitCritical+0x28>)
 8007d64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d66:	b90b      	cbnz	r3, 8007d6c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007d68:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000080 	.word	0x20000080
	...

08007d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d80:	f3ef 8009 	mrs	r0, PSP
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <pxCurrentTCBConst>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d90:	6010      	str	r0, [r2, #0]
 8007d92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d9a:	f380 8811 	msr	BASEPRI, r0
 8007d9e:	f001 fa9f 	bl	80092e0 <vTaskSwitchContext>
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007dae:	6819      	ldr	r1, [r3, #0]
 8007db0:	6808      	ldr	r0, [r1, #0]
 8007db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007db6:	f380 8809 	msr	PSP, r0
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	4770      	bx	lr

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20003430 	.word	0x20003430

08007dc4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc4:	b508      	push	{r3, lr}
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dd6:	f001 f943 	bl	8009060 <xTaskIncrementTick>
 8007dda:	b128      	cbz	r0, 8007de8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007de8:	2300      	movs	r3, #0
 8007dea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dee:	bd08      	pop	{r3, pc}

08007df0 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8007df0:	b510      	push	{r4, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007df6:	4b46      	ldr	r3, [pc, #280]	; (8007f10 <vPortSuppressTicksAndSleep+0x120>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4298      	cmp	r0, r3
 8007dfc:	d900      	bls.n	8007e00 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8007dfe:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007e00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007e0c:	699c      	ldr	r4, [r3, #24]
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	4a40      	ldr	r2, [pc, #256]	; (8007f14 <vPortSuppressTicksAndSleep+0x124>)
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007e1a:	4b3f      	ldr	r3, [pc, #252]	; (8007f18 <vPortSuppressTicksAndSleep+0x128>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	d200      	bcs.n	8007e24 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8007e22:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8007e24:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8007e26:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8007e2a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8007e2e:	f001 fb71 	bl	8009514 <eTaskConfirmSleepModeStatus>
 8007e32:	b970      	cbnz	r0, 8007e52 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007e34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007e3c:	691a      	ldr	r2, [r3, #16]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007e44:	4a33      	ldr	r2, [pc, #204]	; (8007f14 <vPortSuppressTicksAndSleep+0x124>)
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	3a01      	subs	r2, #1
 8007e4a:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8007e4c:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8007e4e:	b004      	add	sp, #16
 8007e50:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8007e52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e56:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e58:	2200      	movs	r2, #0
 8007e5a:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8007e68:	a803      	add	r0, sp, #12
 8007e6a:	f7f8 ff19 	bl	8000ca0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	b123      	cbz	r3, 8007e7c <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8007e72:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8007e76:	bf30      	wfi
				__asm volatile( "isb" );
 8007e78:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8007e7c:	a801      	add	r0, sp, #4
 8007e7e:	f7f8 ff2f 	bl	8000ce0 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8007e82:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8007e84:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007e88:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007e8c:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007e8e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007e92:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8007e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e9a:	2206      	movs	r2, #6
 8007e9c:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007ea4:	d023      	beq.n	8007eee <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	; (8007f14 <vPortSuppressTicksAndSleep+0x124>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	1b1c      	subs	r4, r3, r4
 8007eb2:	4414      	add	r4, r2
 8007eb4:	3c01      	subs	r4, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <vPortSuppressTicksAndSleep+0x128>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	d801      	bhi.n	8007ec2 <vPortSuppressTicksAndSleep+0xd2>
 8007ebe:	42a2      	cmp	r2, r4
 8007ec0:	d200      	bcs.n	8007ec4 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007ec2:	1e54      	subs	r4, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8007ec4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ec8:	615c      	str	r4, [r3, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007eca:	9801      	ldr	r0, [sp, #4]
 8007ecc:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ece:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 8007ede:	f001 f8a5 	bl	800902c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <vPortSuppressTicksAndSleep+0x124>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 8007eea:	b662      	cpsie	i
	}
 8007eec:	e7af      	b.n	8007e4e <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <vPortSuppressTicksAndSleep+0x124>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	fb03 f102 	mul.w	r1, r3, r2
 8007ef8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8007efc:	69a3      	ldr	r3, [r4, #24]
 8007efe:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8007f00:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8007f04:	fb00 2202 	mla	r2, r0, r2, r2
 8007f08:	1a5b      	subs	r3, r3, r1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	6163      	str	r3, [r4, #20]
 8007f0e:	e7de      	b.n	8007ece <vPortSuppressTicksAndSleep+0xde>
 8007f10:	200033ec 	.word	0x200033ec
 8007f14:	200033e8 	.word	0x200033e8
 8007f18:	200033e4 	.word	0x200033e4

08007f1c <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8007f1c:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <vPortSetupTimerInterrupt+0x40>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	480f      	ldr	r0, [pc, #60]	; (8007f60 <vPortSetupTimerInterrupt+0x44>)
 8007f22:	fba0 1202 	umull	r1, r2, r0, r2
 8007f26:	0992      	lsrs	r2, r2, #6
 8007f28:	490e      	ldr	r1, [pc, #56]	; (8007f64 <vPortSetupTimerInterrupt+0x48>)
 8007f2a:	600a      	str	r2, [r1, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8007f2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f30:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f34:	490c      	ldr	r1, [pc, #48]	; (8007f68 <vPortSetupTimerInterrupt+0x4c>)
 8007f36:	600a      	str	r2, [r1, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <vPortSetupTimerInterrupt+0x50>)
 8007f3a:	212d      	movs	r1, #45	; 0x2d
 8007f3c:	6011      	str	r1, [r2, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007f42:	2100      	movs	r1, #0
 8007f44:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f46:	6191      	str	r1, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	fba0 1303 	umull	r1, r3, r0, r3
 8007f4e:	099b      	lsrs	r3, r3, #6
 8007f50:	3b01      	subs	r3, #1
 8007f52:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f54:	2307      	movs	r3, #7
 8007f56:	6113      	str	r3, [r2, #16]
}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000078 	.word	0x20000078
 8007f60:	10624dd3 	.word	0x10624dd3
 8007f64:	200033e8 	.word	0x200033e8
 8007f68:	200033ec 	.word	0x200033ec
 8007f6c:	200033e4 	.word	0x200033e4

08007f70 <xPortStartScheduler>:
{
 8007f70:	b510      	push	{r4, lr}
 8007f72:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f74:	4b2a      	ldr	r3, [pc, #168]	; (8008020 <xPortStartScheduler+0xb0>)
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f88:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f90:	4a24      	ldr	r2, [pc, #144]	; (8008024 <xPortStartScheduler+0xb4>)
 8007f92:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f94:	4b24      	ldr	r3, [pc, #144]	; (8008028 <xPortStartScheduler+0xb8>)
 8007f96:	2207      	movs	r2, #7
 8007f98:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9a:	e009      	b.n	8007fb0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007f9c:	4a22      	ldr	r2, [pc, #136]	; (8008028 <xPortStartScheduler+0xb8>)
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fb8:	d1f0      	bne.n	8007f9c <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <xPortStartScheduler+0xb8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d008      	beq.n	8007fd4 <xPortStartScheduler+0x64>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	e7fe      	b.n	8007fd2 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	4a14      	ldr	r2, [pc, #80]	; (8008028 <xPortStartScheduler+0xb8>)
 8007fd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fde:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <xPortStartScheduler+0xb0>)
 8007fe6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fe8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fec:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007ff0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007ff4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007ffc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008000:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008004:	f7ff ff8a 	bl	8007f1c <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008008:	2400      	movs	r4, #0
 800800a:	4b08      	ldr	r3, [pc, #32]	; (800802c <xPortStartScheduler+0xbc>)
 800800c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800800e:	f7ff fe45 	bl	8007c9c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008012:	f001 f965 	bl	80092e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008016:	f7ff fe21 	bl	8007c5c <prvTaskExitError>
}
 800801a:	4620      	mov	r0, r4
 800801c:	b002      	add	sp, #8
 800801e:	bd10      	pop	{r4, pc}
 8008020:	e000e400 	.word	0xe000e400
 8008024:	200033dc 	.word	0x200033dc
 8008028:	200033e0 	.word	0x200033e0
 800802c:	20000080 	.word	0x20000080

08008030 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008030:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d90f      	bls.n	8008058 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008038:	4a11      	ldr	r2, [pc, #68]	; (8008080 <vPortValidateInterruptPriority+0x50>)
 800803a:	5c9b      	ldrb	r3, [r3, r2]
 800803c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <vPortValidateInterruptPriority+0x54>)
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d908      	bls.n	8008058 <vPortValidateInterruptPriority+0x28>
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	e7fe      	b.n	8008056 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800805c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008064:	4a08      	ldr	r2, [pc, #32]	; (8008088 <vPortValidateInterruptPriority+0x58>)
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	4293      	cmp	r3, r2
 800806a:	d908      	bls.n	800807e <vPortValidateInterruptPriority+0x4e>
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	e7fe      	b.n	800807c <vPortValidateInterruptPriority+0x4c>
	}
 800807e:	4770      	bx	lr
 8008080:	e000e3f0 	.word	0xe000e3f0
 8008084:	200033dc 	.word	0x200033dc
 8008088:	200033e0 	.word	0x200033e0

0800808c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800808c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800808e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008090:	b118      	cbz	r0, 800809a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800809a:	4770      	bx	lr

0800809c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800809c:	b510      	push	{r4, lr}
 800809e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080a0:	f7ff fe30 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d004      	beq.n	80080b6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80080ac:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80080ae:	f7ff fe4b 	bl	8007d48 <vPortExitCritical>

	return xReturn;
}
 80080b2:	4620      	mov	r0, r4
 80080b4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80080b6:	2401      	movs	r4, #1
 80080b8:	e7f9      	b.n	80080ae <prvIsQueueFull+0x12>

080080ba <prvIsQueueEmpty>:
{
 80080ba:	b510      	push	{r4, lr}
 80080bc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80080be:	f7ff fe21 	bl	8007d04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80080c4:	b923      	cbnz	r3, 80080d0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80080c6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80080c8:	f7ff fe3e 	bl	8007d48 <vPortExitCritical>
}
 80080cc:	4620      	mov	r0, r4
 80080ce:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80080d0:	2400      	movs	r4, #0
 80080d2:	e7f9      	b.n	80080c8 <prvIsQueueEmpty+0xe>

080080d4 <prvCopyDataToQueue>:
{
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080da:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80080de:	b95a      	cbnz	r2, 80080f8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080e0:	6803      	ldr	r3, [r0, #0]
 80080e2:	b11b      	cbz	r3, 80080ec <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80080e4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080e6:	3601      	adds	r6, #1
 80080e8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ec:	6880      	ldr	r0, [r0, #8]
 80080ee:	f001 fa8b 	bl	8009608 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	e7f6      	b.n	80080e6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80080f8:	b96d      	cbnz	r5, 8008116 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080fa:	6840      	ldr	r0, [r0, #4]
 80080fc:	f002 fc26 	bl	800a94c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008100:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	4413      	add	r3, r2
 8008106:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008108:	68a2      	ldr	r2, [r4, #8]
 800810a:	4293      	cmp	r3, r2
 800810c:	d319      	bcc.n	8008142 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008112:	4628      	mov	r0, r5
 8008114:	e7e7      	b.n	80080e6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008116:	68c0      	ldr	r0, [r0, #12]
 8008118:	f002 fc18 	bl	800a94c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800811c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800811e:	4251      	negs	r1, r2
 8008120:	68e3      	ldr	r3, [r4, #12]
 8008122:	1a9b      	subs	r3, r3, r2
 8008124:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	4293      	cmp	r3, r2
 800812a:	d202      	bcs.n	8008132 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800812c:	68a3      	ldr	r3, [r4, #8]
 800812e:	440b      	add	r3, r1
 8008130:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008132:	2d02      	cmp	r5, #2
 8008134:	d001      	beq.n	800813a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008136:	2000      	movs	r0, #0
 8008138:	e7d5      	b.n	80080e6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800813a:	b126      	cbz	r6, 8008146 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800813c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800813e:	2000      	movs	r0, #0
 8008140:	e7d1      	b.n	80080e6 <prvCopyDataToQueue+0x12>
 8008142:	4628      	mov	r0, r5
 8008144:	e7cf      	b.n	80080e6 <prvCopyDataToQueue+0x12>
 8008146:	2000      	movs	r0, #0
 8008148:	e7cd      	b.n	80080e6 <prvCopyDataToQueue+0x12>

0800814a <prvCopyDataFromQueue>:
{
 800814a:	b508      	push	{r3, lr}
 800814c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800814e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008150:	b162      	cbz	r2, 800816c <prvCopyDataFromQueue+0x22>
 8008152:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	4411      	add	r1, r2
 8008158:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800815a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800815e:	4561      	cmp	r1, ip
 8008160:	d301      	bcc.n	8008166 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008166:	68d9      	ldr	r1, [r3, #12]
 8008168:	f002 fbf0 	bl	800a94c <memcpy>
}
 800816c:	bd08      	pop	{r3, pc}

0800816e <prvUnlockQueue>:
{
 800816e:	b538      	push	{r3, r4, r5, lr}
 8008170:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008172:	f7ff fdc7 	bl	8007d04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008176:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800817a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817c:	e001      	b.n	8008182 <prvUnlockQueue+0x14>
			--cTxLock;
 800817e:	3c01      	subs	r4, #1
 8008180:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008182:	2c00      	cmp	r4, #0
 8008184:	dd0a      	ble.n	800819c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008188:	b143      	cbz	r3, 800819c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800818e:	f001 f925 	bl	80093dc <xTaskRemoveFromEventList>
 8008192:	2800      	cmp	r0, #0
 8008194:	d0f3      	beq.n	800817e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008196:	f001 f9b7 	bl	8009508 <vTaskMissedYield>
 800819a:	e7f0      	b.n	800817e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800819c:	23ff      	movs	r3, #255	; 0xff
 800819e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80081a2:	f7ff fdd1 	bl	8007d48 <vPortExitCritical>
	taskENTER_CRITICAL();
 80081a6:	f7ff fdad 	bl	8007d04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80081aa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80081ae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b0:	e001      	b.n	80081b6 <prvUnlockQueue+0x48>
				--cRxLock;
 80081b2:	3c01      	subs	r4, #1
 80081b4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	dd0a      	ble.n	80081d0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ba:	692b      	ldr	r3, [r5, #16]
 80081bc:	b143      	cbz	r3, 80081d0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081be:	f105 0010 	add.w	r0, r5, #16
 80081c2:	f001 f90b 	bl	80093dc <xTaskRemoveFromEventList>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d0f3      	beq.n	80081b2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80081ca:	f001 f99d 	bl	8009508 <vTaskMissedYield>
 80081ce:	e7f0      	b.n	80081b2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80081d0:	23ff      	movs	r3, #255	; 0xff
 80081d2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80081d6:	f7ff fdb7 	bl	8007d48 <vPortExitCritical>
}
 80081da:	bd38      	pop	{r3, r4, r5, pc}

080081dc <xQueueGenericReset>:
{
 80081dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80081de:	b1e0      	cbz	r0, 800821a <xQueueGenericReset+0x3e>
 80081e0:	460d      	mov	r5, r1
 80081e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80081e4:	f7ff fd8e 	bl	8007d04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80081ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80081ee:	fb01 3002 	mla	r0, r1, r2, r3
 80081f2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081f4:	2000      	movs	r0, #0
 80081f6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081fa:	3a01      	subs	r2, #1
 80081fc:	fb02 3301 	mla	r3, r2, r1, r3
 8008200:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008202:	23ff      	movs	r3, #255	; 0xff
 8008204:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800820c:	b9fd      	cbnz	r5, 800824e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	b963      	cbnz	r3, 800822c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008212:	f7ff fd99 	bl	8007d48 <vPortExitCritical>
}
 8008216:	2001      	movs	r0, #1
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800822a:	e7fe      	b.n	800822a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822c:	f104 0010 	add.w	r0, r4, #16
 8008230:	f001 f8d4 	bl	80093dc <xTaskRemoveFromEventList>
 8008234:	2800      	cmp	r0, #0
 8008236:	d0ec      	beq.n	8008212 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008238:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800823c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008240:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	e7e1      	b.n	8008212 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800824e:	f104 0010 	add.w	r0, r4, #16
 8008252:	f7ff fcbd 	bl	8007bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008256:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800825a:	f7ff fcb9 	bl	8007bd0 <vListInitialise>
 800825e:	e7d8      	b.n	8008212 <xQueueGenericReset+0x36>

08008260 <prvInitialiseNewQueue>:
{
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	461d      	mov	r5, r3
 8008264:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008266:	460b      	mov	r3, r1
 8008268:	b949      	cbnz	r1, 800827e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800826a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800826c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800826e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008270:	2101      	movs	r1, #1
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff ffb2 	bl	80081dc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008278:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800827c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800827e:	6022      	str	r2, [r4, #0]
 8008280:	e7f4      	b.n	800826c <prvInitialiseNewQueue+0xc>

08008282 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008282:	b940      	cbnz	r0, 8008296 <xQueueGenericCreateStatic+0x14>
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	e7fe      	b.n	8008294 <xQueueGenericCreateStatic+0x12>
	{
 8008296:	b510      	push	{r4, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	461c      	mov	r4, r3
 800829c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800829e:	b153      	cbz	r3, 80082b6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082a0:	b192      	cbz	r2, 80082c8 <xQueueGenericCreateStatic+0x46>
 80082a2:	b989      	cbnz	r1, 80082c8 <xQueueGenericCreateStatic+0x46>
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericCreateStatic+0x32>
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80082c6:	e7fe      	b.n	80082c6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082c8:	b16a      	cbz	r2, 80082e6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082ca:	2350      	movs	r3, #80	; 0x50
 80082cc:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b50      	cmp	r3, #80	; 0x50
 80082d2:	d013      	beq.n	80082fc <xQueueGenericCreateStatic+0x7a>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082e6:	2900      	cmp	r1, #0
 80082e8:	d0ef      	beq.n	80082ca <xQueueGenericCreateStatic+0x48>
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	e7fe      	b.n	80082fa <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082fc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082fe:	2301      	movs	r3, #1
 8008300:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008304:	9400      	str	r4, [sp, #0]
 8008306:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800830a:	4660      	mov	r0, ip
 800830c:	f7ff ffa8 	bl	8008260 <prvInitialiseNewQueue>
	}
 8008310:	4620      	mov	r0, r4
 8008312:	b004      	add	sp, #16
 8008314:	bd10      	pop	{r4, pc}

08008316 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008316:	b940      	cbnz	r0, 800832a <xQueueGenericCreate+0x14>
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	e7fe      	b.n	8008328 <xQueueGenericCreate+0x12>
	{
 800832a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800832c:	b083      	sub	sp, #12
 800832e:	460c      	mov	r4, r1
 8008330:	4615      	mov	r5, r2
 8008332:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008334:	b1a1      	cbz	r1, 8008360 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008336:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800833a:	3050      	adds	r0, #80	; 0x50
 800833c:	f7ff fb98 	bl	8007a70 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008340:	4606      	mov	r6, r0
 8008342:	b150      	cbz	r0, 800835a <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800834a:	9000      	str	r0, [sp, #0]
 800834c:	462b      	mov	r3, r5
 800834e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8008352:	4621      	mov	r1, r4
 8008354:	4638      	mov	r0, r7
 8008356:	f7ff ff83 	bl	8008260 <prvInitialiseNewQueue>
	}
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8008360:	4608      	mov	r0, r1
 8008362:	e7ea      	b.n	800833a <xQueueGenericCreate+0x24>

08008364 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8008364:	b940      	cbnz	r0, 8008378 <xQueueCreateCountingSemaphoreStatic+0x14>
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	e7fe      	b.n	8008376 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8008378:	b510      	push	{r4, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800837e:	4288      	cmp	r0, r1
 8008380:	d208      	bcs.n	8008394 <xQueueCreateCountingSemaphoreStatic+0x30>
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	e7fe      	b.n	8008392 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008394:	2302      	movs	r3, #2
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	4613      	mov	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	4611      	mov	r1, r2
 800839e:	f7ff ff70 	bl	8008282 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80083a2:	b100      	cbz	r0, 80083a6 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80083a4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80083a6:	b002      	add	sp, #8
 80083a8:	bd10      	pop	{r4, pc}

080083aa <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80083aa:	b940      	cbnz	r0, 80083be <xQueueCreateCountingSemaphore+0x14>
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	e7fe      	b.n	80083bc <xQueueCreateCountingSemaphore+0x12>
	{
 80083be:	b510      	push	{r4, lr}
 80083c0:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80083c2:	4288      	cmp	r0, r1
 80083c4:	d208      	bcs.n	80083d8 <xQueueCreateCountingSemaphore+0x2e>
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	e7fe      	b.n	80083d6 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80083d8:	2202      	movs	r2, #2
 80083da:	2100      	movs	r1, #0
 80083dc:	f7ff ff9b 	bl	8008316 <xQueueGenericCreate>
		if( xHandle != NULL )
 80083e0:	b100      	cbz	r0, 80083e4 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80083e2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80083e4:	bd10      	pop	{r4, pc}

080083e6 <xQueueGenericSend>:
{
 80083e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e8:	b085      	sub	sp, #20
 80083ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80083ec:	b188      	cbz	r0, 8008412 <xQueueGenericSend+0x2c>
 80083ee:	460f      	mov	r7, r1
 80083f0:	461d      	mov	r5, r3
 80083f2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f4:	b1b1      	cbz	r1, 8008424 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083f6:	2d02      	cmp	r5, #2
 80083f8:	d120      	bne.n	800843c <xQueueGenericSend+0x56>
 80083fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d01d      	beq.n	800843c <xQueueGenericSend+0x56>
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	e7fe      	b.n	8008410 <xQueueGenericSend+0x2a>
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008422:	e7fe      	b.n	8008422 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008424:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0e5      	beq.n	80083f6 <xQueueGenericSend+0x10>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	e7fe      	b.n	800843a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800843c:	f001 f888 	bl	8009550 <xTaskGetSchedulerState>
 8008440:	4606      	mov	r6, r0
 8008442:	b958      	cbnz	r0, 800845c <xQueueGenericSend+0x76>
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d048      	beq.n	80084dc <xQueueGenericSend+0xf6>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	e7fe      	b.n	800845a <xQueueGenericSend+0x74>
 800845c:	2600      	movs	r6, #0
 800845e:	e03d      	b.n	80084dc <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008460:	462a      	mov	r2, r5
 8008462:	4639      	mov	r1, r7
 8008464:	4620      	mov	r0, r4
 8008466:	f7ff fe35 	bl	80080d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800846a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846c:	b97b      	cbnz	r3, 800848e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800846e:	b148      	cbz	r0, 8008484 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008470:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008478:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008484:	f7ff fc60 	bl	8007d48 <vPortExitCritical>
				return pdPASS;
 8008488:	2001      	movs	r0, #1
}
 800848a:	b005      	add	sp, #20
 800848c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800848e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008492:	f000 ffa3 	bl	80093dc <xTaskRemoveFromEventList>
 8008496:	2800      	cmp	r0, #0
 8008498:	d0f4      	beq.n	8008484 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800849a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	e7e9      	b.n	8008484 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80084b0:	f7ff fc4a 	bl	8007d48 <vPortExitCritical>
					return errQUEUE_FULL;
 80084b4:	2000      	movs	r0, #0
 80084b6:	e7e8      	b.n	800848a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b8:	a802      	add	r0, sp, #8
 80084ba:	f000 ffd7 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084be:	2601      	movs	r6, #1
 80084c0:	e019      	b.n	80084f6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80084c2:	2300      	movs	r3, #0
 80084c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80084c8:	e021      	b.n	800850e <xQueueGenericSend+0x128>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084d0:	e023      	b.n	800851a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7ff fe4b 	bl	800816e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d8:	f000 fe4e 	bl	8009178 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80084dc:	f7ff fc12 	bl	8007d04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80084e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3bb      	bcc.n	8008460 <xQueueGenericSend+0x7a>
 80084e8:	2d02      	cmp	r5, #2
 80084ea:	d0b9      	beq.n	8008460 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0de      	beq.n	80084b0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d0e0      	beq.n	80084b8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80084f6:	f7ff fc27 	bl	8007d48 <vPortExitCritical>
		vTaskSuspendAll();
 80084fa:	f000 fd89 	bl	8009010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084fe:	f7ff fc01 	bl	8007d04 <vPortEnterCritical>
 8008502:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8008506:	b252      	sxtb	r2, r2
 8008508:	f1b2 3fff 	cmp.w	r2, #4294967295
 800850c:	d0d9      	beq.n	80084c2 <xQueueGenericSend+0xdc>
 800850e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008512:	b252      	sxtb	r2, r2
 8008514:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008518:	d0d7      	beq.n	80084ca <xQueueGenericSend+0xe4>
 800851a:	f7ff fc15 	bl	8007d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800851e:	a901      	add	r1, sp, #4
 8008520:	a802      	add	r0, sp, #8
 8008522:	f000 ffaf 	bl	8009484 <xTaskCheckForTimeOut>
 8008526:	b9d8      	cbnz	r0, 8008560 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008528:	4620      	mov	r0, r4
 800852a:	f7ff fdb7 	bl	800809c <prvIsQueueFull>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0cf      	beq.n	80084d2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008532:	9901      	ldr	r1, [sp, #4]
 8008534:	f104 0010 	add.w	r0, r4, #16
 8008538:	f000 ff1c 	bl	8009374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800853c:	4620      	mov	r0, r4
 800853e:	f7ff fe16 	bl	800816e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008542:	f000 fe19 	bl	8009178 <xTaskResumeAll>
 8008546:	2800      	cmp	r0, #0
 8008548:	d1c8      	bne.n	80084dc <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800854a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	e7bd      	b.n	80084dc <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8008560:	4620      	mov	r0, r4
 8008562:	f7ff fe04 	bl	800816e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008566:	f000 fe07 	bl	8009178 <xTaskResumeAll>
			return errQUEUE_FULL;
 800856a:	2000      	movs	r0, #0
 800856c:	e78d      	b.n	800848a <xQueueGenericSend+0xa4>

0800856e <xQueueGenericSendFromISR>:
{
 800856e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008572:	b190      	cbz	r0, 800859a <xQueueGenericSendFromISR+0x2c>
 8008574:	460f      	mov	r7, r1
 8008576:	4616      	mov	r6, r2
 8008578:	461c      	mov	r4, r3
 800857a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857c:	b1b1      	cbz	r1, 80085ac <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800857e:	2c02      	cmp	r4, #2
 8008580:	d120      	bne.n	80085c4 <xQueueGenericSendFromISR+0x56>
 8008582:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008584:	2b01      	cmp	r3, #1
 8008586:	d01d      	beq.n	80085c4 <xQueueGenericSendFromISR+0x56>
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	e7fe      	b.n	8008598 <xQueueGenericSendFromISR+0x2a>
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80085aa:	e7fe      	b.n	80085aa <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0e5      	beq.n	800857e <xQueueGenericSendFromISR+0x10>
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	e7fe      	b.n	80085c2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085c4:	f7ff fd34 	bl	8008030 <vPortValidateInterruptPriority>
	__asm volatile
 80085c8:	f3ef 8911 	mrs	r9, BASEPRI
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80085de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d306      	bcc.n	80085f2 <xQueueGenericSendFromISR+0x84>
 80085e4:	2c02      	cmp	r4, #2
 80085e6:	d004      	beq.n	80085f2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80085e8:	2000      	movs	r0, #0
	__asm volatile
 80085ea:	f389 8811 	msr	BASEPRI, r9
}
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80085f2:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 80085f6:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085fa:	4622      	mov	r2, r4
 80085fc:	4639      	mov	r1, r7
 80085fe:	4628      	mov	r0, r5
 8008600:	f7ff fd68 	bl	80080d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008604:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008608:	d006      	beq.n	8008618 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800860a:	f108 0301 	add.w	r3, r8, #1
 800860e:	b25b      	sxtb	r3, r3
 8008610:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8008614:	2001      	movs	r0, #1
 8008616:	e7e8      	b.n	80085ea <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008618:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800861a:	b90b      	cbnz	r3, 8008620 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 800861c:	2001      	movs	r0, #1
 800861e:	e7e4      	b.n	80085ea <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008620:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008624:	f000 feda 	bl	80093dc <xTaskRemoveFromEventList>
 8008628:	b118      	cbz	r0, 8008632 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800862a:	b126      	cbz	r6, 8008636 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800862c:	2001      	movs	r0, #1
 800862e:	6030      	str	r0, [r6, #0]
 8008630:	e7db      	b.n	80085ea <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8008632:	2001      	movs	r0, #1
 8008634:	e7d9      	b.n	80085ea <xQueueGenericSendFromISR+0x7c>
 8008636:	2001      	movs	r0, #1
 8008638:	e7d7      	b.n	80085ea <xQueueGenericSendFromISR+0x7c>

0800863a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800863a:	b168      	cbz	r0, 8008658 <xQueueGiveFromISR+0x1e>
{
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	460c      	mov	r4, r1
 8008640:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008642:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008644:	b18b      	cbz	r3, 800866a <xQueueGiveFromISR+0x30>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	e7fe      	b.n	8008656 <xQueueGiveFromISR+0x1c>
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008668:	e7fe      	b.n	8008668 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800866a:	6803      	ldr	r3, [r0, #0]
 800866c:	b1eb      	cbz	r3, 80086aa <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800866e:	f7ff fcdf 	bl	8008030 <vPortValidateInterruptPriority>
	__asm volatile
 8008672:	f3ef 8611 	mrs	r6, BASEPRI
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008686:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008688:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800868a:	4293      	cmp	r3, r2
 800868c:	d926      	bls.n	80086dc <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800868e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8008692:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008694:	3201      	adds	r2, #1
 8008696:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d011      	beq.n	80086c2 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800869e:	3301      	adds	r3, #1
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80086a6:	2001      	movs	r0, #1
 80086a8:	e019      	b.n	80086de <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80086aa:	6883      	ldr	r3, [r0, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0de      	beq.n	800866e <xQueueGiveFromISR+0x34>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	e7fe      	b.n	80086c0 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086c4:	b90b      	cbnz	r3, 80086ca <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80086c6:	2001      	movs	r0, #1
 80086c8:	e009      	b.n	80086de <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80086ce:	f000 fe85 	bl	80093dc <xTaskRemoveFromEventList>
 80086d2:	b138      	cbz	r0, 80086e4 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80086d4:	b144      	cbz	r4, 80086e8 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086d6:	2001      	movs	r0, #1
 80086d8:	6020      	str	r0, [r4, #0]
 80086da:	e000      	b.n	80086de <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80086dc:	2000      	movs	r0, #0
	__asm volatile
 80086de:	f386 8811 	msr	BASEPRI, r6
}
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80086e4:	2001      	movs	r0, #1
 80086e6:	e7fa      	b.n	80086de <xQueueGiveFromISR+0xa4>
 80086e8:	2001      	movs	r0, #1
 80086ea:	e7f8      	b.n	80086de <xQueueGiveFromISR+0xa4>

080086ec <xQueueReceive>:
{
 80086ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ee:	b085      	sub	sp, #20
 80086f0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086f2:	b190      	cbz	r0, 800871a <xQueueReceive+0x2e>
 80086f4:	460f      	mov	r7, r1
 80086f6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f8:	b1c1      	cbz	r1, 800872c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086fa:	f000 ff29 	bl	8009550 <xTaskGetSchedulerState>
 80086fe:	4606      	mov	r6, r0
 8008700:	bb00      	cbnz	r0, 8008744 <xQueueReceive+0x58>
 8008702:	9b01      	ldr	r3, [sp, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d05e      	beq.n	80087c6 <xQueueReceive+0xda>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	e7fe      	b.n	8008718 <xQueueReceive+0x2c>
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800872a:	e7fe      	b.n	800872a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800872c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0e3      	beq.n	80086fa <xQueueReceive+0xe>
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	e7fe      	b.n	8008742 <xQueueReceive+0x56>
 8008744:	2600      	movs	r6, #0
 8008746:	e03e      	b.n	80087c6 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008748:	4639      	mov	r1, r7
 800874a:	4620      	mov	r0, r4
 800874c:	f7ff fcfd 	bl	800814a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008750:	3d01      	subs	r5, #1
 8008752:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	b923      	cbnz	r3, 8008762 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8008758:	f7ff faf6 	bl	8007d48 <vPortExitCritical>
				return pdPASS;
 800875c:	2001      	movs	r0, #1
}
 800875e:	b005      	add	sp, #20
 8008760:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008762:	f104 0010 	add.w	r0, r4, #16
 8008766:	f000 fe39 	bl	80093dc <xTaskRemoveFromEventList>
 800876a:	2800      	cmp	r0, #0
 800876c:	d0f4      	beq.n	8008758 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800876e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	e7e9      	b.n	8008758 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8008784:	f7ff fae0 	bl	8007d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008788:	2000      	movs	r0, #0
 800878a:	e7e8      	b.n	800875e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800878c:	a802      	add	r0, sp, #8
 800878e:	f000 fe6d 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008792:	2601      	movs	r6, #1
 8008794:	e021      	b.n	80087da <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8008796:	2300      	movs	r3, #0
 8008798:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800879c:	e029      	b.n	80087f2 <xQueueReceive+0x106>
 800879e:	2300      	movs	r3, #0
 80087a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087a4:	e02b      	b.n	80087fe <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff fce1 	bl	800816e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ac:	f000 fce4 	bl	8009178 <xTaskResumeAll>
 80087b0:	e009      	b.n	80087c6 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7ff fcdb 	bl	800816e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b8:	f000 fcde 	bl	8009178 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087bc:	4620      	mov	r0, r4
 80087be:	f7ff fc7c 	bl	80080ba <prvIsQueueEmpty>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d13f      	bne.n	8008846 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80087c6:	f7ff fa9d 	bl	8007d04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d1bb      	bne.n	8008748 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0d6      	beq.n	8008784 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d0d8      	beq.n	800878c <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80087da:	f7ff fab5 	bl	8007d48 <vPortExitCritical>
		vTaskSuspendAll();
 80087de:	f000 fc17 	bl	8009010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087e2:	f7ff fa8f 	bl	8007d04 <vPortEnterCritical>
 80087e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d0d1      	beq.n	8008796 <xQueueReceive+0xaa>
 80087f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087f6:	b25b      	sxtb	r3, r3
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d0cf      	beq.n	800879e <xQueueReceive+0xb2>
 80087fe:	f7ff faa3 	bl	8007d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008802:	a901      	add	r1, sp, #4
 8008804:	a802      	add	r0, sp, #8
 8008806:	f000 fe3d 	bl	8009484 <xTaskCheckForTimeOut>
 800880a:	2800      	cmp	r0, #0
 800880c:	d1d1      	bne.n	80087b2 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff fc53 	bl	80080ba <prvIsQueueEmpty>
 8008814:	2800      	cmp	r0, #0
 8008816:	d0c6      	beq.n	80087a6 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008818:	9901      	ldr	r1, [sp, #4]
 800881a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800881e:	f000 fda9 	bl	8009374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff fca3 	bl	800816e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008828:	f000 fca6 	bl	8009178 <xTaskResumeAll>
 800882c:	2800      	cmp	r0, #0
 800882e:	d1ca      	bne.n	80087c6 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8008830:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008838:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	e7bf      	b.n	80087c6 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8008846:	2000      	movs	r0, #0
 8008848:	e789      	b.n	800875e <xQueueReceive+0x72>

0800884a <xQueueSemaphoreTake>:
{
 800884a:	b570      	push	{r4, r5, r6, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008850:	b158      	cbz	r0, 800886a <xQueueSemaphoreTake+0x20>
 8008852:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008854:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008856:	b18b      	cbz	r3, 800887c <xQueueSemaphoreTake+0x32>
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	e7fe      	b.n	8008868 <xQueueSemaphoreTake+0x1e>
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800887a:	e7fe      	b.n	800887a <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800887c:	f000 fe68 	bl	8009550 <xTaskGetSchedulerState>
 8008880:	4605      	mov	r5, r0
 8008882:	b950      	cbnz	r0, 800889a <xQueueSemaphoreTake+0x50>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	b15b      	cbz	r3, 80088a0 <xQueueSemaphoreTake+0x56>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	e7fe      	b.n	8008898 <xQueueSemaphoreTake+0x4e>
 800889a:	2600      	movs	r6, #0
 800889c:	4635      	mov	r5, r6
 800889e:	e055      	b.n	800894c <xQueueSemaphoreTake+0x102>
 80088a0:	4606      	mov	r6, r0
 80088a2:	e053      	b.n	800894c <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80088a4:	3b01      	subs	r3, #1
 80088a6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	b13b      	cbz	r3, 80088bc <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	b94b      	cbnz	r3, 80088c4 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80088b0:	f7ff fa4a 	bl	8007d48 <vPortExitCritical>
				return pdPASS;
 80088b4:	2601      	movs	r6, #1
}
 80088b6:	4630      	mov	r0, r6
 80088b8:	b004      	add	sp, #16
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80088bc:	f000 ff3c 	bl	8009738 <pvTaskIncrementMutexHeldCount>
 80088c0:	60a0      	str	r0, [r4, #8]
 80088c2:	e7f3      	b.n	80088ac <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c4:	f104 0010 	add.w	r0, r4, #16
 80088c8:	f000 fd88 	bl	80093dc <xTaskRemoveFromEventList>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0ef      	beq.n	80088b0 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 80088d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	e7e4      	b.n	80088b0 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088e6:	b146      	cbz	r6, 80088fa <xQueueSemaphoreTake+0xb0>
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	e7fe      	b.n	80088f8 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 80088fa:	f7ff fa25 	bl	8007d48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80088fe:	e7da      	b.n	80088b6 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008900:	a802      	add	r0, sp, #8
 8008902:	f000 fdb3 	bl	800946c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008906:	2501      	movs	r5, #1
 8008908:	e02a      	b.n	8008960 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800890a:	2300      	movs	r3, #0
 800890c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008910:	e032      	b.n	8008978 <xQueueSemaphoreTake+0x12e>
 8008912:	2300      	movs	r3, #0
 8008914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008918:	e034      	b.n	8008984 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800891a:	f7ff f9f3 	bl	8007d04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800891e:	68a0      	ldr	r0, [r4, #8]
 8008920:	f000 fe26 	bl	8009570 <xTaskPriorityInherit>
 8008924:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8008926:	f7ff fa0f 	bl	8007d48 <vPortExitCritical>
 800892a:	e03b      	b.n	80089a4 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff fc1e 	bl	800816e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008932:	f000 fc21 	bl	8009178 <xTaskResumeAll>
 8008936:	e009      	b.n	800894c <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fc18 	bl	800816e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800893e:	f000 fc1b 	bl	8009178 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008942:	4620      	mov	r0, r4
 8008944:	f7ff fbb9 	bl	80080ba <prvIsQueueEmpty>
 8008948:	2800      	cmp	r0, #0
 800894a:	d142      	bne.n	80089d2 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800894c:	f7ff f9da 	bl	8007d04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1a6      	bne.n	80088a4 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0c4      	beq.n	80088e6 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800895c:	2d00      	cmp	r5, #0
 800895e:	d0cf      	beq.n	8008900 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8008960:	f7ff f9f2 	bl	8007d48 <vPortExitCritical>
		vTaskSuspendAll();
 8008964:	f000 fb54 	bl	8009010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008968:	f7ff f9cc 	bl	8007d04 <vPortEnterCritical>
 800896c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008970:	b25b      	sxtb	r3, r3
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d0c8      	beq.n	800890a <xQueueSemaphoreTake+0xc0>
 8008978:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d0c6      	beq.n	8008912 <xQueueSemaphoreTake+0xc8>
 8008984:	f7ff f9e0 	bl	8007d48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008988:	a901      	add	r1, sp, #4
 800898a:	a802      	add	r0, sp, #8
 800898c:	f000 fd7a 	bl	8009484 <xTaskCheckForTimeOut>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1d1      	bne.n	8008938 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff fb90 	bl	80080ba <prvIsQueueEmpty>
 800899a:	2800      	cmp	r0, #0
 800899c:	d0c6      	beq.n	800892c <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d0ba      	beq.n	800891a <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089a4:	9901      	ldr	r1, [sp, #4]
 80089a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089aa:	f000 fce3 	bl	8009374 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089ae:	4620      	mov	r0, r4
 80089b0:	f7ff fbdd 	bl	800816e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089b4:	f000 fbe0 	bl	8009178 <xTaskResumeAll>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1c7      	bne.n	800894c <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80089bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e7bc      	b.n	800894c <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 80089d2:	b90e      	cbnz	r6, 80089d8 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 80089d4:	2600      	movs	r6, #0
 80089d6:	e76e      	b.n	80088b6 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 80089d8:	f7ff f994 	bl	8007d04 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089dc:	4620      	mov	r0, r4
 80089de:	f7ff fb55 	bl	800808c <prvGetDisinheritPriorityAfterTimeout>
 80089e2:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089e4:	68a0      	ldr	r0, [r4, #8]
 80089e6:	f000 fe57 	bl	8009698 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80089ea:	f7ff f9ad 	bl	8007d48 <vPortExitCritical>
 80089ee:	e7f1      	b.n	80089d4 <xQueueSemaphoreTake+0x18a>

080089f0 <xQueueReceiveFromISR>:
{
 80089f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80089f4:	b1b0      	cbz	r0, 8008a24 <xQueueReceiveFromISR+0x34>
 80089f6:	460d      	mov	r5, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fc:	b1d9      	cbz	r1, 8008a36 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089fe:	f7ff fb17 	bl	8008030 <vPortValidateInterruptPriority>
	__asm volatile
 8008a02:	f3ef 8811 	mrs	r8, BASEPRI
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a16:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a18:	b9cf      	cbnz	r7, 8008a4e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8008a1a:	2000      	movs	r0, #0
	__asm volatile
 8008a1c:	f388 8811 	msr	BASEPRI, r8
}
 8008a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008a34:	e7fe      	b.n	8008a34 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0e0      	beq.n	80089fe <xQueueReceiveFromISR+0xe>
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	e7fe      	b.n	8008a4c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a4e:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8008a52:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a56:	4629      	mov	r1, r5
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff fb76 	bl	800814a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008a62:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008a66:	d006      	beq.n	8008a76 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a68:	f109 0301 	add.w	r3, r9, #1
 8008a6c:	b25b      	sxtb	r3, r3
 8008a6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8008a72:	2001      	movs	r0, #1
 8008a74:	e7d2      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	b90b      	cbnz	r3, 8008a7e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	e7ce      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a7e:	f104 0010 	add.w	r0, r4, #16
 8008a82:	f000 fcab 	bl	80093dc <xTaskRemoveFromEventList>
 8008a86:	b118      	cbz	r0, 8008a90 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8008a88:	b126      	cbz	r6, 8008a94 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	e7c5      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8008a90:	2001      	movs	r0, #1
 8008a92:	e7c3      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>
 8008a94:	2001      	movs	r0, #1
 8008a96:	e7c1      	b.n	8008a1c <xQueueReceiveFromISR+0x2c>

08008a98 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2b07      	cmp	r3, #7
 8008a9c:	d80c      	bhi.n	8008ab8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a9e:	4a07      	ldr	r2, [pc, #28]	; (8008abc <vQueueAddToRegistry+0x24>)
 8008aa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008aa4:	b10a      	cbz	r2, 8008aaa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	e7f7      	b.n	8008a9a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <vQueueAddToRegistry+0x24>)
 8008aac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ab0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ab4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ab6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	200033f0 	.word	0x200033f0

08008ac0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	2b07      	cmp	r3, #7
 8008ac4:	d80f      	bhi.n	8008ae6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <vQueueUnregisterQueue+0x28>)
 8008ac8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008acc:	6852      	ldr	r2, [r2, #4]
 8008ace:	4282      	cmp	r2, r0
 8008ad0:	d001      	beq.n	8008ad6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	e7f5      	b.n	8008ac2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ad6:	4a04      	ldr	r2, [pc, #16]	; (8008ae8 <vQueueUnregisterQueue+0x28>)
 8008ad8:	2100      	movs	r1, #0
 8008ada:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ae2:	6059      	str	r1, [r3, #4]
				break;
 8008ae4:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ae6:	4770      	bx	lr
 8008ae8:	200033f0 	.word	0x200033f0

08008aec <vQueueDelete>:
	configASSERT( pxQueue );
 8008aec:	b138      	cbz	r0, 8008afe <vQueueDelete+0x12>
{
 8008aee:	b510      	push	{r4, lr}
 8008af0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8008af2:	f7ff ffe5 	bl	8008ac0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008af6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008afa:	b14b      	cbz	r3, 8008b10 <vQueueDelete+0x24>
}
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008b0e:	e7fe      	b.n	8008b0e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8008b10:	4620      	mov	r0, r4
 8008b12:	f7ff f825 	bl	8007b60 <vPortFree>
}
 8008b16:	e7f1      	b.n	8008afc <vQueueDelete+0x10>

08008b18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b20:	f7ff f8f0 	bl	8007d04 <vPortEnterCritical>
 8008b24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2e:	d00d      	beq.n	8008b4c <vQueueWaitForMessageRestricted+0x34>
 8008b30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b34:	b25b      	sxtb	r3, r3
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	d00b      	beq.n	8008b54 <vQueueWaitForMessageRestricted+0x3c>
 8008b3c:	f7ff f904 	bl	8007d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b42:	b15b      	cbz	r3, 8008b5c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7ff fb12 	bl	800816e <prvUnlockQueue>
	}
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008b52:	e7ed      	b.n	8008b30 <vQueueWaitForMessageRestricted+0x18>
 8008b54:	2300      	movs	r3, #0
 8008b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b5a:	e7ef      	b.n	8008b3c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b64:	f000 fc1e 	bl	80093a4 <vTaskPlaceOnEventListRestricted>
 8008b68:	e7ec      	b.n	8008b44 <vQueueWaitForMessageRestricted+0x2c>
	...

08008b6c <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <prvGetExpectedIdleTime+0x2c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b103      	cbz	r3, 8008b74 <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008b72:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008b74:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <prvGetExpectedIdleTime+0x30>)
 8008b76:	6812      	ldr	r2, [r2, #0]
 8008b78:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008b7a:	b950      	cbnz	r0, 8008b92 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008b7c:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <prvGetExpectedIdleTime+0x34>)
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	2a01      	cmp	r2, #1
 8008b82:	d807      	bhi.n	8008b94 <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008b84:	b933      	cbnz	r3, 8008b94 <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008b86:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <prvGetExpectedIdleTime+0x38>)
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <prvGetExpectedIdleTime+0x3c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	4770      	bx	lr
			xReturn = 0;
 8008b92:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	200038b0 	.word	0x200038b0
 8008b9c:	20003430 	.word	0x20003430
 8008ba0:	2000343c 	.word	0x2000343c
 8008ba4:	200038e0 	.word	0x200038e0
 8008ba8:	20003928 	.word	0x20003928

08008bac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <prvResetNextTaskUnblockTime+0x24>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	b923      	cbnz	r3, 8008bbe <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <prvResetNextTaskUnblockTime+0x28>)
 8008bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <prvResetNextTaskUnblockTime+0x24>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <prvResetNextTaskUnblockTime+0x28>)
 8008bca:	601a      	str	r2, [r3, #0]
	}
}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20003434 	.word	0x20003434
 8008bd4:	200038e0 	.word	0x200038e0

08008bd8 <prvInitialiseNewTask>:
{
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460d      	mov	r5, r1
 8008be0:	4617      	mov	r7, r2
 8008be2:	4699      	mov	r9, r3
 8008be4:	9e08      	ldr	r6, [sp, #32]
 8008be6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008bea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bec:	0092      	lsls	r2, r2, #2
 8008bee:	21a5      	movs	r1, #165	; 0xa5
 8008bf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008bf2:	f001 feb9 	bl	800a968 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008bf8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008bfc:	3a01      	subs	r2, #1
 8008bfe:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c02:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008c06:	b3b5      	cbz	r5, 8008c76 <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c08:	f04f 0c00 	mov.w	ip, #0
 8008c0c:	f1bc 0f0f 	cmp.w	ip, #15
 8008c10:	d80b      	bhi.n	8008c2a <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c12:	f815 200c 	ldrb.w	r2, [r5, ip]
 8008c16:	eb04 030c 	add.w	r3, r4, ip
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008c1e:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008c22:	b113      	cbz	r3, 8008c2a <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c24:	f10c 0c01 	add.w	ip, ip, #1
 8008c28:	e7f0      	b.n	8008c0c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c30:	2e37      	cmp	r6, #55	; 0x37
 8008c32:	d900      	bls.n	8008c36 <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c34:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008c36:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008c38:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c3e:	1d20      	adds	r0, r4, #4
 8008c40:	f7fe ffd1 	bl	8007be6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c44:	f104 0018 	add.w	r0, r4, #24
 8008c48:	f7fe ffcd 	bl	8007be6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c4c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c4e:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8008c52:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c54:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8008c56:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c58:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	4641      	mov	r1, r8
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff f82b 	bl	8007cbc <pxPortInitialiseStack>
 8008c66:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008c68:	f1ba 0f00 	cmp.w	sl, #0
 8008c6c:	d001      	beq.n	8008c72 <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c6e:	f8ca 4000 	str.w	r4, [sl]
}
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c76:	2300      	movs	r3, #0
 8008c78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008c7c:	e7d8      	b.n	8008c30 <prvInitialiseNewTask+0x58>
	...

08008c80 <prvInitialiseTaskLists>:
{
 8008c80:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c82:	2400      	movs	r4, #0
 8008c84:	e007      	b.n	8008c96 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c86:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008c8a:	0093      	lsls	r3, r2, #2
 8008c8c:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <prvInitialiseTaskLists+0x48>)
 8008c8e:	4418      	add	r0, r3
 8008c90:	f7fe ff9e 	bl	8007bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c94:	3401      	adds	r4, #1
 8008c96:	2c37      	cmp	r4, #55	; 0x37
 8008c98:	d9f5      	bls.n	8008c86 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008c9a:	4d0c      	ldr	r5, [pc, #48]	; (8008ccc <prvInitialiseTaskLists+0x4c>)
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7fe ff97 	bl	8007bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ca2:	4c0b      	ldr	r4, [pc, #44]	; (8008cd0 <prvInitialiseTaskLists+0x50>)
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f7fe ff93 	bl	8007bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008caa:	480a      	ldr	r0, [pc, #40]	; (8008cd4 <prvInitialiseTaskLists+0x54>)
 8008cac:	f7fe ff90 	bl	8007bd0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008cb0:	4809      	ldr	r0, [pc, #36]	; (8008cd8 <prvInitialiseTaskLists+0x58>)
 8008cb2:	f7fe ff8d 	bl	8007bd0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008cb6:	4809      	ldr	r0, [pc, #36]	; (8008cdc <prvInitialiseTaskLists+0x5c>)
 8008cb8:	f7fe ff8a 	bl	8007bd0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cbc:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <prvInitialiseTaskLists+0x60>)
 8008cbe:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cc0:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <prvInitialiseTaskLists+0x64>)
 8008cc2:	601c      	str	r4, [r3, #0]
}
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	bf00      	nop
 8008cc8:	2000343c 	.word	0x2000343c
 8008ccc:	200038b4 	.word	0x200038b4
 8008cd0:	200038c8 	.word	0x200038c8
 8008cd4:	200038e8 	.word	0x200038e8
 8008cd8:	20003914 	.word	0x20003914
 8008cdc:	20003900 	.word	0x20003900
 8008ce0:	20003434 	.word	0x20003434
 8008ce4:	20003438 	.word	0x20003438

08008ce8 <prvAddNewTaskToReadyList>:
{
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008cec:	f7ff f80a 	bl	8007d04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008cf0:	4a22      	ldr	r2, [pc, #136]	; (8008d7c <prvAddNewTaskToReadyList+0x94>)
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cf8:	4b21      	ldr	r3, [pc, #132]	; (8008d80 <prvAddNewTaskToReadyList+0x98>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	b15b      	cbz	r3, 8008d16 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008cfe:	4b21      	ldr	r3, [pc, #132]	; (8008d84 <prvAddNewTaskToReadyList+0x9c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	b96b      	cbnz	r3, 8008d20 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d04:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <prvAddNewTaskToReadyList+0x98>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d807      	bhi.n	8008d20 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008d10:	4b1b      	ldr	r3, [pc, #108]	; (8008d80 <prvAddNewTaskToReadyList+0x98>)
 8008d12:	601c      	str	r4, [r3, #0]
 8008d14:	e004      	b.n	8008d20 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8008d16:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <prvAddNewTaskToReadyList+0x98>)
 8008d18:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d029      	beq.n	8008d74 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <prvAddNewTaskToReadyList+0xa0>)
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d28:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008d2c:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <prvAddNewTaskToReadyList+0xa4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4298      	cmp	r0, r3
 8008d32:	d901      	bls.n	8008d38 <prvAddNewTaskToReadyList+0x50>
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <prvAddNewTaskToReadyList+0xa4>)
 8008d36:	6018      	str	r0, [r3, #0]
 8008d38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008d3c:	1d21      	adds	r1, r4, #4
 8008d3e:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <prvAddNewTaskToReadyList+0xa8>)
 8008d40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d44:	f7fe ff52 	bl	8007bec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008d48:	f7fe fffe 	bl	8007d48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <prvAddNewTaskToReadyList+0x9c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	b17b      	cbz	r3, 8008d72 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d52:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <prvAddNewTaskToReadyList+0x98>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d209      	bcs.n	8008d72 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8008d5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	f3bf 8f6f 	isb	sy
}
 8008d72:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8008d74:	f7ff ff84 	bl	8008c80 <prvInitialiseTaskLists>
 8008d78:	e7d2      	b.n	8008d20 <prvAddNewTaskToReadyList+0x38>
 8008d7a:	bf00      	nop
 8008d7c:	2000389c 	.word	0x2000389c
 8008d80:	20003430 	.word	0x20003430
 8008d84:	200038fc 	.word	0x200038fc
 8008d88:	200038ac 	.word	0x200038ac
 8008d8c:	200038b0 	.word	0x200038b0
 8008d90:	2000343c 	.word	0x2000343c

08008d94 <prvDeleteTCB>:
	{
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d98:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8008d9c:	b163      	cbz	r3, 8008db8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d011      	beq.n	8008dc6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d00e      	beq.n	8008dc4 <prvDeleteTCB+0x30>
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	e7fe      	b.n	8008db6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8008db8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008dba:	f7fe fed1 	bl	8007b60 <vPortFree>
				vPortFree( pxTCB );
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7fe fece 	bl	8007b60 <vPortFree>
	}
 8008dc4:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8008dc6:	f7fe fecb 	bl	8007b60 <vPortFree>
 8008dca:	e7fb      	b.n	8008dc4 <prvDeleteTCB+0x30>

08008dcc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvCheckTasksWaitingTermination+0x40>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	b1d3      	cbz	r3, 8008e08 <prvCheckTasksWaitingTermination+0x3c>
{
 8008dd2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8008dd4:	f7fe ff96 	bl	8007d04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd8:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <prvCheckTasksWaitingTermination+0x44>)
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dde:	1d20      	adds	r0, r4, #4
 8008de0:	f7fe ff28 	bl	8007c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008de4:	4a0b      	ldr	r2, [pc, #44]	; (8008e14 <prvCheckTasksWaitingTermination+0x48>)
 8008de6:	6813      	ldr	r3, [r2, #0]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dec:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <prvCheckTasksWaitingTermination+0x40>)
 8008dee:	6813      	ldr	r3, [r2, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8008df4:	f7fe ffa8 	bl	8007d48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f7ff ffcb 	bl	8008d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <prvCheckTasksWaitingTermination+0x40>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e6      	bne.n	8008dd4 <prvCheckTasksWaitingTermination+0x8>
}
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	200038a0 	.word	0x200038a0
 8008e10:	20003914 	.word	0x20003914
 8008e14:	2000389c 	.word	0x2000389c

08008e18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e1e:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <prvAddCurrentTaskToDelayedList+0x64>)
 8008e20:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e22:	4b17      	ldr	r3, [pc, #92]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e24:	6818      	ldr	r0, [r3, #0]
 8008e26:	3004      	adds	r0, #4
 8008e28:	f7fe ff04 	bl	8007c34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e2c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008e30:	d00d      	beq.n	8008e4e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e32:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e34:	4b12      	ldr	r3, [pc, #72]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d910      	bls.n	8008e60 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e3e:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e44:	6819      	ldr	r1, [r3, #0]
 8008e46:	3104      	adds	r1, #4
 8008e48:	f7fe fedb 	bl	8007c02 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	d0ef      	beq.n	8008e32 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e52:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e54:	6819      	ldr	r1, [r3, #0]
 8008e56:	3104      	adds	r1, #4
 8008e58:	480b      	ldr	r0, [pc, #44]	; (8008e88 <prvAddCurrentTaskToDelayedList+0x70>)
 8008e5a:	f7fe fec7 	bl	8007bec <vListInsertEnd>
 8008e5e:	e7f5      	b.n	8008e4c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <prvAddCurrentTaskToDelayedList+0x74>)
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e66:	6819      	ldr	r1, [r3, #0]
 8008e68:	3104      	adds	r1, #4
 8008e6a:	f7fe feca 	bl	8007c02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <prvAddCurrentTaskToDelayedList+0x78>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	42a3      	cmp	r3, r4
 8008e74:	d9ea      	bls.n	8008e4c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8008e76:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <prvAddCurrentTaskToDelayedList+0x78>)
 8008e78:	601c      	str	r4, [r3, #0]
}
 8008e7a:	e7e7      	b.n	8008e4c <prvAddCurrentTaskToDelayedList+0x34>
 8008e7c:	20003928 	.word	0x20003928
 8008e80:	20003430 	.word	0x20003430
 8008e84:	20003438 	.word	0x20003438
 8008e88:	20003900 	.word	0x20003900
 8008e8c:	20003434 	.word	0x20003434
 8008e90:	200038e0 	.word	0x200038e0

08008e94 <xTaskCreateStatic>:
	{
 8008e94:	b530      	push	{r4, r5, lr}
 8008e96:	b087      	sub	sp, #28
 8008e98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008e9a:	b17c      	cbz	r4, 8008ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e9e:	b1b5      	cbz	r5, 8008ece <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ea0:	255c      	movs	r5, #92	; 0x5c
 8008ea2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ea4:	9d04      	ldr	r5, [sp, #16]
 8008ea6:	2d5c      	cmp	r5, #92	; 0x5c
 8008ea8:	d01a      	beq.n	8008ee0 <xTaskCreateStatic+0x4c>
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	e7fe      	b.n	8008eba <xTaskCreateStatic+0x26>
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008ecc:	e7fe      	b.n	8008ecc <xTaskCreateStatic+0x38>
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8008ede:	e7fe      	b.n	8008ede <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ee0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ee4:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ee6:	2402      	movs	r4, #2
 8008ee8:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eec:	2400      	movs	r4, #0
 8008eee:	9403      	str	r4, [sp, #12]
 8008ef0:	9502      	str	r5, [sp, #8]
 8008ef2:	ac05      	add	r4, sp, #20
 8008ef4:	9401      	str	r4, [sp, #4]
 8008ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ef8:	9400      	str	r4, [sp, #0]
 8008efa:	f7ff fe6d 	bl	8008bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008efe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f00:	f7ff fef2 	bl	8008ce8 <prvAddNewTaskToReadyList>
	}
 8008f04:	9805      	ldr	r0, [sp, #20]
 8008f06:	b007      	add	sp, #28
 8008f08:	bd30      	pop	{r4, r5, pc}

08008f0a <xTaskCreate>:
	{
 8008f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	4607      	mov	r7, r0
 8008f12:	4688      	mov	r8, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f18:	0090      	lsls	r0, r2, #2
 8008f1a:	f7fe fda9 	bl	8007a70 <pvPortMalloc>
			if( pxStack != NULL )
 8008f1e:	b300      	cbz	r0, 8008f62 <xTaskCreate+0x58>
 8008f20:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f22:	205c      	movs	r0, #92	; 0x5c
 8008f24:	f7fe fda4 	bl	8007a70 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008f28:	4605      	mov	r5, r0
 8008f2a:	b1b0      	cbz	r0, 8008f5a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8008f2c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008f30:	b1e5      	cbz	r5, 8008f6c <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	9502      	str	r5, [sp, #8]
 8008f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	4633      	mov	r3, r6
 8008f46:	4622      	mov	r2, r4
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7ff fe44 	bl	8008bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f50:	4628      	mov	r0, r5
 8008f52:	f7ff fec9 	bl	8008ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f56:	2001      	movs	r0, #1
 8008f58:	e005      	b.n	8008f66 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8008f5a:	4648      	mov	r0, r9
 8008f5c:	f7fe fe00 	bl	8007b60 <vPortFree>
 8008f60:	e7e6      	b.n	8008f30 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008f66:	b005      	add	sp, #20
 8008f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008f70:	e7f9      	b.n	8008f66 <xTaskCreate+0x5c>
	...

08008f74 <vTaskStartScheduler>:
{
 8008f74:	b510      	push	{r4, lr}
 8008f76:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f78:	2400      	movs	r4, #0
 8008f7a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f7c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f7e:	aa07      	add	r2, sp, #28
 8008f80:	a906      	add	r1, sp, #24
 8008f82:	a805      	add	r0, sp, #20
 8008f84:	f7fe fcfa 	bl	800797c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f88:	9b05      	ldr	r3, [sp, #20]
 8008f8a:	9302      	str	r3, [sp, #8]
 8008f8c:	9b06      	ldr	r3, [sp, #24]
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	9400      	str	r4, [sp, #0]
 8008f92:	4623      	mov	r3, r4
 8008f94:	9a07      	ldr	r2, [sp, #28]
 8008f96:	4918      	ldr	r1, [pc, #96]	; (8008ff8 <vTaskStartScheduler+0x84>)
 8008f98:	4818      	ldr	r0, [pc, #96]	; (8008ffc <vTaskStartScheduler+0x88>)
 8008f9a:	f7ff ff7b 	bl	8008e94 <xTaskCreateStatic>
 8008f9e:	4b18      	ldr	r3, [pc, #96]	; (8009000 <vTaskStartScheduler+0x8c>)
 8008fa0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8008fa2:	b140      	cbz	r0, 8008fb6 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8008fa4:	f000 fdaa 	bl	8009afc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008fa8:	2801      	cmp	r0, #1
 8008faa:	d006      	beq.n	8008fba <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fb0:	d018      	beq.n	8008fe4 <vTaskStartScheduler+0x70>
}
 8008fb2:	b008      	add	sp, #32
 8008fb4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e7f6      	b.n	8008fa8 <vTaskStartScheduler+0x34>
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fca:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <vTaskStartScheduler+0x90>)
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <vTaskStartScheduler+0x94>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <vTaskStartScheduler+0x98>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008fde:	f7fe ffc7 	bl	8007f70 <xPortStartScheduler>
 8008fe2:	e7e6      	b.n	8008fb2 <vTaskStartScheduler+0x3e>
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ff4:	e7fe      	b.n	8008ff4 <vTaskStartScheduler+0x80>
 8008ff6:	bf00      	nop
 8008ff8:	0800b348 	.word	0x0800b348
 8008ffc:	08009271 	.word	0x08009271
 8009000:	200038dc 	.word	0x200038dc
 8009004:	200038e0 	.word	0x200038e0
 8009008:	200038fc 	.word	0x200038fc
 800900c:	20003928 	.word	0x20003928

08009010 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009010:	4a02      	ldr	r2, [pc, #8]	; (800901c <vTaskSuspendAll+0xc>)
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	6013      	str	r3, [r2, #0]
}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	200038a8 	.word	0x200038a8

08009020 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <xTaskGetTickCount+0x8>)
 8009022:	6818      	ldr	r0, [r3, #0]
}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	20003928 	.word	0x20003928

0800902c <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <vTaskStepTick+0x2c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4403      	add	r3, r0
 8009032:	4a0a      	ldr	r2, [pc, #40]	; (800905c <vTaskStepTick+0x30>)
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	4293      	cmp	r3, r2
 8009038:	d908      	bls.n	800904c <vTaskStepTick+0x20>
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	e7fe      	b.n	800904a <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800904c:	4a02      	ldr	r2, [pc, #8]	; (8009058 <vTaskStepTick+0x2c>)
 800904e:	6813      	ldr	r3, [r2, #0]
 8009050:	4418      	add	r0, r3
 8009052:	6010      	str	r0, [r2, #0]
	}
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	20003928 	.word	0x20003928
 800905c:	200038e0 	.word	0x200038e0

08009060 <xTaskIncrementTick>:
{
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009062:	4b3a      	ldr	r3, [pc, #232]	; (800914c <xTaskIncrementTick+0xec>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d164      	bne.n	8009134 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800906a:	4b39      	ldr	r3, [pc, #228]	; (8009150 <xTaskIncrementTick+0xf0>)
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009070:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009072:	b9c5      	cbnz	r5, 80090a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009074:	4b37      	ldr	r3, [pc, #220]	; (8009154 <xTaskIncrementTick+0xf4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	b143      	cbz	r3, 800908e <xTaskIncrementTick+0x2e>
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	e7fe      	b.n	800908c <xTaskIncrementTick+0x2c>
 800908e:	4a31      	ldr	r2, [pc, #196]	; (8009154 <xTaskIncrementTick+0xf4>)
 8009090:	6811      	ldr	r1, [r2, #0]
 8009092:	4b31      	ldr	r3, [pc, #196]	; (8009158 <xTaskIncrementTick+0xf8>)
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	6010      	str	r0, [r2, #0]
 8009098:	6019      	str	r1, [r3, #0]
 800909a:	4a30      	ldr	r2, [pc, #192]	; (800915c <xTaskIncrementTick+0xfc>)
 800909c:	6813      	ldr	r3, [r2, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	f7ff fd83 	bl	8008bac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a6:	4b2e      	ldr	r3, [pc, #184]	; (8009160 <xTaskIncrementTick+0x100>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	42ab      	cmp	r3, r5
 80090ac:	d938      	bls.n	8009120 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80090ae:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090b0:	4b2c      	ldr	r3, [pc, #176]	; (8009164 <xTaskIncrementTick+0x104>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090ba:	009a      	lsls	r2, r3, #2
 80090bc:	4b2a      	ldr	r3, [pc, #168]	; (8009168 <xTaskIncrementTick+0x108>)
 80090be:	589b      	ldr	r3, [r3, r2]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d93c      	bls.n	800913e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80090c4:	2701      	movs	r7, #1
 80090c6:	e03a      	b.n	800913e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80090c8:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ca:	4b22      	ldr	r3, [pc, #136]	; (8009154 <xTaskIncrementTick+0xf4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	b343      	cbz	r3, 8009124 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d2:	4b20      	ldr	r3, [pc, #128]	; (8009154 <xTaskIncrementTick+0xf4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090da:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80090dc:	429d      	cmp	r5, r3
 80090de:	d326      	bcc.n	800912e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e0:	1d26      	adds	r6, r4, #4
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7fe fda6 	bl	8007c34 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090ea:	b11b      	cbz	r3, 80090f4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ec:	f104 0018 	add.w	r0, r4, #24
 80090f0:	f7fe fda0 	bl	8007c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090f6:	4a1d      	ldr	r2, [pc, #116]	; (800916c <xTaskIncrementTick+0x10c>)
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <xTaskIncrementTick+0xa2>
 80090fe:	4a1b      	ldr	r2, [pc, #108]	; (800916c <xTaskIncrementTick+0x10c>)
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009106:	009a      	lsls	r2, r3, #2
 8009108:	4631      	mov	r1, r6
 800910a:	4817      	ldr	r0, [pc, #92]	; (8009168 <xTaskIncrementTick+0x108>)
 800910c:	4410      	add	r0, r2
 800910e:	f7fe fd6d 	bl	8007bec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009114:	4b13      	ldr	r3, [pc, #76]	; (8009164 <xTaskIncrementTick+0x104>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	429a      	cmp	r2, r3
 800911c:	d2d4      	bcs.n	80090c8 <xTaskIncrementTick+0x68>
 800911e:	e7d4      	b.n	80090ca <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009120:	2700      	movs	r7, #0
 8009122:	e7d2      	b.n	80090ca <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <xTaskIncrementTick+0x100>)
 8009126:	f04f 32ff 	mov.w	r2, #4294967295
 800912a:	601a      	str	r2, [r3, #0]
					break;
 800912c:	e7c0      	b.n	80090b0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800912e:	4a0c      	ldr	r2, [pc, #48]	; (8009160 <xTaskIncrementTick+0x100>)
 8009130:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009132:	e7bd      	b.n	80090b0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009134:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <xTaskIncrementTick+0x110>)
 8009136:	6813      	ldr	r3, [r2, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800913c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <xTaskIncrementTick+0x114>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	b103      	cbz	r3, 8009146 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009144:	2701      	movs	r7, #1
}
 8009146:	4638      	mov	r0, r7
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	bf00      	nop
 800914c:	200038a8 	.word	0x200038a8
 8009150:	20003928 	.word	0x20003928
 8009154:	20003434 	.word	0x20003434
 8009158:	20003438 	.word	0x20003438
 800915c:	200038e4 	.word	0x200038e4
 8009160:	200038e0 	.word	0x200038e0
 8009164:	20003430 	.word	0x20003430
 8009168:	2000343c 	.word	0x2000343c
 800916c:	200038b0 	.word	0x200038b0
 8009170:	200038a4 	.word	0x200038a4
 8009174:	2000392c 	.word	0x2000392c

08009178 <xTaskResumeAll>:
{
 8009178:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800917a:	4b35      	ldr	r3, [pc, #212]	; (8009250 <xTaskResumeAll+0xd8>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	b943      	cbnz	r3, 8009192 <xTaskResumeAll+0x1a>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	e7fe      	b.n	8009190 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009192:	f7fe fdb7 	bl	8007d04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009196:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <xTaskResumeAll+0xd8>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	3a01      	subs	r2, #1
 800919c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d14f      	bne.n	8009244 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091a4:	4b2b      	ldr	r3, [pc, #172]	; (8009254 <xTaskResumeAll+0xdc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	b90b      	cbnz	r3, 80091ae <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80091aa:	2400      	movs	r4, #0
 80091ac:	e04b      	b.n	8009246 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80091ae:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b0:	4b29      	ldr	r3, [pc, #164]	; (8009258 <xTaskResumeAll+0xe0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	b31b      	cbz	r3, 80091fe <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b6:	4b28      	ldr	r3, [pc, #160]	; (8009258 <xTaskResumeAll+0xe0>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091bc:	f104 0018 	add.w	r0, r4, #24
 80091c0:	f7fe fd38 	bl	8007c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091c4:	1d25      	adds	r5, r4, #4
 80091c6:	4628      	mov	r0, r5
 80091c8:	f7fe fd34 	bl	8007c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80091ce:	4b23      	ldr	r3, [pc, #140]	; (800925c <xTaskResumeAll+0xe4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4298      	cmp	r0, r3
 80091d4:	d901      	bls.n	80091da <xTaskResumeAll+0x62>
 80091d6:	4b21      	ldr	r3, [pc, #132]	; (800925c <xTaskResumeAll+0xe4>)
 80091d8:	6018      	str	r0, [r3, #0]
 80091da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091de:	4629      	mov	r1, r5
 80091e0:	4b1f      	ldr	r3, [pc, #124]	; (8009260 <xTaskResumeAll+0xe8>)
 80091e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80091e6:	f7fe fd01 	bl	8007bec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80091ec:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <xTaskResumeAll+0xec>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d3dc      	bcc.n	80091b0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <xTaskResumeAll+0xf0>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	e7d8      	b.n	80091b0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80091fe:	b10c      	cbz	r4, 8009204 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009200:	f7ff fcd4 	bl	8008bac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <xTaskResumeAll+0xf4>)
 8009206:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009208:	b984      	cbnz	r4, 800922c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800920a:	4b17      	ldr	r3, [pc, #92]	; (8009268 <xTaskResumeAll+0xf0>)
 800920c:	681c      	ldr	r4, [r3, #0]
 800920e:	b1d4      	cbz	r4, 8009246 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009210:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009218:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009224:	2401      	movs	r4, #1
 8009226:	e00e      	b.n	8009246 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009228:	3c01      	subs	r4, #1
 800922a:	d007      	beq.n	800923c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800922c:	f7ff ff18 	bl	8009060 <xTaskIncrementTick>
 8009230:	2800      	cmp	r0, #0
 8009232:	d0f9      	beq.n	8009228 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <xTaskResumeAll+0xf0>)
 8009236:	2201      	movs	r2, #1
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	e7f5      	b.n	8009228 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <xTaskResumeAll+0xf4>)
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	e7e2      	b.n	800920a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009244:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009246:	f7fe fd7f 	bl	8007d48 <vPortExitCritical>
}
 800924a:	4620      	mov	r0, r4
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	200038a8 	.word	0x200038a8
 8009254:	2000389c 	.word	0x2000389c
 8009258:	200038e8 	.word	0x200038e8
 800925c:	200038b0 	.word	0x200038b0
 8009260:	2000343c 	.word	0x2000343c
 8009264:	20003430 	.word	0x20003430
 8009268:	2000392c 	.word	0x2000392c
 800926c:	200038a4 	.word	0x200038a4

08009270 <prvIdleTask>:
{
 8009270:	b508      	push	{r3, lr}
 8009272:	e003      	b.n	800927c <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009274:	f7ff fc7a 	bl	8008b6c <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009278:	2801      	cmp	r0, #1
 800927a:	d810      	bhi.n	800929e <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 800927c:	f7ff fda6 	bl	8008dcc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <prvIdleTask+0x64>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d9f5      	bls.n	8009274 <prvIdleTask+0x4>
				taskYIELD();
 8009288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800928c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009290:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	e7ea      	b.n	8009274 <prvIdleTask+0x4>
				vTaskSuspendAll();
 800929e:	f7ff feb7 	bl	8009010 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <prvIdleTask+0x68>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <prvIdleTask+0x6c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d306      	bcc.n	80092bc <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80092ae:	f7ff fc5d 	bl	8008b6c <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80092b2:	2801      	cmp	r0, #1
 80092b4:	d80b      	bhi.n	80092ce <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 80092b6:	f7ff ff5f 	bl	8009178 <xTaskResumeAll>
 80092ba:	e7df      	b.n	800927c <prvIdleTask+0xc>
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80092cc:	e7fe      	b.n	80092cc <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80092ce:	f7fe fd8f 	bl	8007df0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 80092d2:	e7f0      	b.n	80092b6 <prvIdleTask+0x46>
 80092d4:	2000343c 	.word	0x2000343c
 80092d8:	200038e0 	.word	0x200038e0
 80092dc:	20003928 	.word	0x20003928

080092e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092e0:	4b1f      	ldr	r3, [pc, #124]	; (8009360 <vTaskSwitchContext+0x80>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	b11b      	cbz	r3, 80092ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80092e6:	4b1f      	ldr	r3, [pc, #124]	; (8009364 <vTaskSwitchContext+0x84>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <vTaskSwitchContext+0x84>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f4:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <vTaskSwitchContext+0x88>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80092fc:	008a      	lsls	r2, r1, #2
 80092fe:	491b      	ldr	r1, [pc, #108]	; (800936c <vTaskSwitchContext+0x8c>)
 8009300:	588a      	ldr	r2, [r1, r2]
 8009302:	b95a      	cbnz	r2, 800931c <vTaskSwitchContext+0x3c>
 8009304:	b10b      	cbz	r3, 800930a <vTaskSwitchContext+0x2a>
 8009306:	3b01      	subs	r3, #1
 8009308:	e7f6      	b.n	80092f8 <vTaskSwitchContext+0x18>
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	e7fe      	b.n	800931a <vTaskSwitchContext+0x3a>
 800931c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009320:	0082      	lsls	r2, r0, #2
 8009322:	440a      	add	r2, r1
 8009324:	6850      	ldr	r0, [r2, #4]
 8009326:	6840      	ldr	r0, [r0, #4]
 8009328:	6050      	str	r0, [r2, #4]
 800932a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800932e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8009332:	3208      	adds	r2, #8
 8009334:	4411      	add	r1, r2
 8009336:	4288      	cmp	r0, r1
 8009338:	d00b      	beq.n	8009352 <vTaskSwitchContext+0x72>
 800933a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800933e:	0091      	lsls	r1, r2, #2
 8009340:	4a0a      	ldr	r2, [pc, #40]	; (800936c <vTaskSwitchContext+0x8c>)
 8009342:	440a      	add	r2, r1
 8009344:	6852      	ldr	r2, [r2, #4]
 8009346:	68d1      	ldr	r1, [r2, #12]
 8009348:	4a09      	ldr	r2, [pc, #36]	; (8009370 <vTaskSwitchContext+0x90>)
 800934a:	6011      	str	r1, [r2, #0]
 800934c:	4a06      	ldr	r2, [pc, #24]	; (8009368 <vTaskSwitchContext+0x88>)
 800934e:	6013      	str	r3, [r2, #0]
}
 8009350:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009352:	6840      	ldr	r0, [r0, #4]
 8009354:	4662      	mov	r2, ip
 8009356:	0091      	lsls	r1, r2, #2
 8009358:	4a04      	ldr	r2, [pc, #16]	; (800936c <vTaskSwitchContext+0x8c>)
 800935a:	440a      	add	r2, r1
 800935c:	6050      	str	r0, [r2, #4]
 800935e:	e7ec      	b.n	800933a <vTaskSwitchContext+0x5a>
 8009360:	200038a8 	.word	0x200038a8
 8009364:	2000392c 	.word	0x2000392c
 8009368:	200038b0 	.word	0x200038b0
 800936c:	2000343c 	.word	0x2000343c
 8009370:	20003430 	.word	0x20003430

08009374 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009374:	b158      	cbz	r0, 800938e <vTaskPlaceOnEventList+0x1a>
{
 8009376:	b510      	push	{r4, lr}
 8009378:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800937a:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <vTaskPlaceOnEventList+0x2c>)
 800937c:	6811      	ldr	r1, [r2, #0]
 800937e:	3118      	adds	r1, #24
 8009380:	f7fe fc3f 	bl	8007c02 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009384:	2101      	movs	r1, #1
 8009386:	4620      	mov	r0, r4
 8009388:	f7ff fd46 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
}
 800938c:	bd10      	pop	{r4, pc}
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800939e:	e7fe      	b.n	800939e <vTaskPlaceOnEventList+0x2a>
 80093a0:	20003430 	.word	0x20003430

080093a4 <vTaskPlaceOnEventListRestricted>:
	{
 80093a4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80093a6:	b170      	cbz	r0, 80093c6 <vTaskPlaceOnEventListRestricted+0x22>
 80093a8:	460d      	mov	r5, r1
 80093aa:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ac:	4a0a      	ldr	r2, [pc, #40]	; (80093d8 <vTaskPlaceOnEventListRestricted+0x34>)
 80093ae:	6811      	ldr	r1, [r2, #0]
 80093b0:	3118      	adds	r1, #24
 80093b2:	f7fe fc1b 	bl	8007bec <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80093b6:	b10c      	cbz	r4, 80093bc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80093b8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093bc:	4621      	mov	r1, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff fd2a 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
	}
 80093c4:	bd38      	pop	{r3, r4, r5, pc}
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80093d6:	e7fe      	b.n	80093d6 <vTaskPlaceOnEventListRestricted+0x32>
 80093d8:	20003430 	.word	0x20003430

080093dc <xTaskRemoveFromEventList>:
{
 80093dc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093de:	68c3      	ldr	r3, [r0, #12]
 80093e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80093e2:	b334      	cbz	r4, 8009432 <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e4:	f104 0518 	add.w	r5, r4, #24
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7fe fc23 	bl	8007c34 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b19      	ldr	r3, [pc, #100]	; (8009454 <xTaskRemoveFromEventList+0x78>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	bb3b      	cbnz	r3, 8009444 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f4:	1d25      	adds	r5, r4, #4
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7fe fc1c 	bl	8007c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <xTaskRemoveFromEventList+0x7c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4298      	cmp	r0, r3
 8009404:	d901      	bls.n	800940a <xTaskRemoveFromEventList+0x2e>
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <xTaskRemoveFromEventList+0x7c>)
 8009408:	6018      	str	r0, [r3, #0]
 800940a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800940e:	4629      	mov	r1, r5
 8009410:	4b12      	ldr	r3, [pc, #72]	; (800945c <xTaskRemoveFromEventList+0x80>)
 8009412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009416:	f7fe fbe9 	bl	8007bec <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 800941a:	f7ff fbc7 	bl	8008bac <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800941e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <xTaskRemoveFromEventList+0x84>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	429a      	cmp	r2, r3
 8009428:	d911      	bls.n	800944e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800942a:	2001      	movs	r0, #1
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <xTaskRemoveFromEventList+0x88>)
 800942e:	6018      	str	r0, [r3, #0]
}
 8009430:	bd38      	pop	{r3, r4, r5, pc}
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009442:	e7fe      	b.n	8009442 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009444:	4629      	mov	r1, r5
 8009446:	4808      	ldr	r0, [pc, #32]	; (8009468 <xTaskRemoveFromEventList+0x8c>)
 8009448:	f7fe fbd0 	bl	8007bec <vListInsertEnd>
 800944c:	e7e7      	b.n	800941e <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 800944e:	2000      	movs	r0, #0
	return xReturn;
 8009450:	e7ee      	b.n	8009430 <xTaskRemoveFromEventList+0x54>
 8009452:	bf00      	nop
 8009454:	200038a8 	.word	0x200038a8
 8009458:	200038b0 	.word	0x200038b0
 800945c:	2000343c 	.word	0x2000343c
 8009460:	20003430 	.word	0x20003430
 8009464:	2000392c 	.word	0x2000392c
 8009468:	200038e8 	.word	0x200038e8

0800946c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800946c:	4b03      	ldr	r3, [pc, #12]	; (800947c <vTaskInternalSetTimeOutState+0x10>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009472:	4b03      	ldr	r3, [pc, #12]	; (8009480 <vTaskInternalSetTimeOutState+0x14>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6043      	str	r3, [r0, #4]
}
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	200038e4 	.word	0x200038e4
 8009480:	20003928 	.word	0x20003928

08009484 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8009484:	b1d8      	cbz	r0, 80094be <xTaskCheckForTimeOut+0x3a>
{
 8009486:	b570      	push	{r4, r5, r6, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800948c:	b301      	cbz	r1, 80094d0 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800948e:	f7fe fc39 	bl	8007d04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009492:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <xTaskCheckForTimeOut+0x7c>)
 8009494:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009496:	686b      	ldr	r3, [r5, #4]
 8009498:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800949a:	6822      	ldr	r2, [r4, #0]
 800949c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094a0:	d027      	beq.n	80094f2 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094a2:	4e18      	ldr	r6, [pc, #96]	; (8009504 <xTaskCheckForTimeOut+0x80>)
 80094a4:	6836      	ldr	r6, [r6, #0]
 80094a6:	f8d5 c000 	ldr.w	ip, [r5]
 80094aa:	45b4      	cmp	ip, r6
 80094ac:	d001      	beq.n	80094b2 <xTaskCheckForTimeOut+0x2e>
 80094ae:	428b      	cmp	r3, r1
 80094b0:	d924      	bls.n	80094fc <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094b2:	4282      	cmp	r2, r0
 80094b4:	d815      	bhi.n	80094e2 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 80094b6:	2300      	movs	r3, #0
 80094b8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80094ba:	2401      	movs	r4, #1
 80094bc:	e01a      	b.n	80094f4 <xTaskCheckForTimeOut+0x70>
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80094ce:	e7fe      	b.n	80094ce <xTaskCheckForTimeOut+0x4a>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80094e0:	e7fe      	b.n	80094e0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 80094e2:	1a5b      	subs	r3, r3, r1
 80094e4:	4413      	add	r3, r2
 80094e6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff ffbf 	bl	800946c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ee:	2400      	movs	r4, #0
 80094f0:	e000      	b.n	80094f4 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 80094f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80094f4:	f7fe fc28 	bl	8007d48 <vPortExitCritical>
}
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80094fc:	2401      	movs	r4, #1
 80094fe:	e7f9      	b.n	80094f4 <xTaskCheckForTimeOut+0x70>
 8009500:	20003928 	.word	0x20003928
 8009504:	200038e4 	.word	0x200038e4

08009508 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009508:	4b01      	ldr	r3, [pc, #4]	; (8009510 <vTaskMissedYield+0x8>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	4770      	bx	lr
 8009510:	2000392c 	.word	0x2000392c

08009514 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <eTaskConfirmSleepModeStatus+0x2c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	b95b      	cbnz	r3, 8009532 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <eTaskConfirmSleepModeStatus+0x30>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	b953      	cbnz	r3, 8009536 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009520:	4b09      	ldr	r3, [pc, #36]	; (8009548 <eTaskConfirmSleepModeStatus+0x34>)
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <eTaskConfirmSleepModeStatus+0x38>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3b01      	subs	r3, #1
 800952a:	429a      	cmp	r2, r3
 800952c:	d005      	beq.n	800953a <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800952e:	2001      	movs	r0, #1
 8009530:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009532:	2000      	movs	r0, #0
 8009534:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800953a:	2002      	movs	r0, #2
	}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200038e8 	.word	0x200038e8
 8009544:	2000392c 	.word	0x2000392c
 8009548:	20003900 	.word	0x20003900
 800954c:	2000389c 	.word	0x2000389c

08009550 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009550:	4b05      	ldr	r3, [pc, #20]	; (8009568 <xTaskGetSchedulerState+0x18>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b133      	cbz	r3, 8009564 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009556:	4b05      	ldr	r3, [pc, #20]	; (800956c <xTaskGetSchedulerState+0x1c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	b10b      	cbz	r3, 8009560 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800955c:	2000      	movs	r0, #0
	}
 800955e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009560:	2002      	movs	r0, #2
 8009562:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009564:	2001      	movs	r0, #1
 8009566:	4770      	bx	lr
 8009568:	200038fc 	.word	0x200038fc
 800956c:	200038a8 	.word	0x200038a8

08009570 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009570:	2800      	cmp	r0, #0
 8009572:	d03e      	beq.n	80095f2 <xTaskPriorityInherit+0x82>
	{
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009578:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800957a:	4a20      	ldr	r2, [pc, #128]	; (80095fc <xTaskPriorityInherit+0x8c>)
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009580:	4293      	cmp	r3, r2
 8009582:	d22e      	bcs.n	80095e2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009584:	6982      	ldr	r2, [r0, #24]
 8009586:	2a00      	cmp	r2, #0
 8009588:	db05      	blt.n	8009596 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958a:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <xTaskPriorityInherit+0x8c>)
 800958c:	6812      	ldr	r2, [r2, #0]
 800958e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009590:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009594:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009596:	6961      	ldr	r1, [r4, #20]
 8009598:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800959c:	4a18      	ldr	r2, [pc, #96]	; (8009600 <xTaskPriorityInherit+0x90>)
 800959e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095a2:	4299      	cmp	r1, r3
 80095a4:	d005      	beq.n	80095b2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095a6:	4b15      	ldr	r3, [pc, #84]	; (80095fc <xTaskPriorityInherit+0x8c>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80095ae:	2001      	movs	r0, #1
	}
 80095b0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b2:	1d25      	adds	r5, r4, #4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7fe fb3d 	bl	8007c34 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <xTaskPriorityInherit+0x8c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80095c0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095c2:	4b10      	ldr	r3, [pc, #64]	; (8009604 <xTaskPriorityInherit+0x94>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4298      	cmp	r0, r3
 80095c8:	d901      	bls.n	80095ce <xTaskPriorityInherit+0x5e>
 80095ca:	4b0e      	ldr	r3, [pc, #56]	; (8009604 <xTaskPriorityInherit+0x94>)
 80095cc:	6018      	str	r0, [r3, #0]
 80095ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80095d2:	4629      	mov	r1, r5
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <xTaskPriorityInherit+0x90>)
 80095d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095da:	f7fe fb07 	bl	8007bec <vListInsertEnd>
				xReturn = pdTRUE;
 80095de:	2001      	movs	r0, #1
 80095e0:	e7e6      	b.n	80095b0 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80095e2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <xTaskPriorityInherit+0x8c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d303      	bcc.n	80095f6 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80095ee:	2000      	movs	r0, #0
 80095f0:	e7de      	b.n	80095b0 <xTaskPriorityInherit+0x40>
 80095f2:	2000      	movs	r0, #0
	}
 80095f4:	4770      	bx	lr
					xReturn = pdTRUE;
 80095f6:	2001      	movs	r0, #1
		return xReturn;
 80095f8:	e7da      	b.n	80095b0 <xTaskPriorityInherit+0x40>
 80095fa:	bf00      	nop
 80095fc:	20003430 	.word	0x20003430
 8009600:	2000343c 	.word	0x2000343c
 8009604:	200038b0 	.word	0x200038b0

08009608 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009608:	2800      	cmp	r0, #0
 800960a:	d03b      	beq.n	8009684 <xTaskPriorityDisinherit+0x7c>
	{
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009610:	4b1e      	ldr	r3, [pc, #120]	; (800968c <xTaskPriorityDisinherit+0x84>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4283      	cmp	r3, r0
 8009616:	d008      	beq.n	800962a <xTaskPriorityDisinherit+0x22>
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	e7fe      	b.n	8009628 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800962a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800962c:	b943      	cbnz	r3, 8009640 <xTaskPriorityDisinherit+0x38>
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	e7fe      	b.n	800963e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009640:	3b01      	subs	r3, #1
 8009642:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009644:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009646:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009648:	4291      	cmp	r1, r2
 800964a:	d01d      	beq.n	8009688 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800964c:	b10b      	cbz	r3, 8009652 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800964e:	2000      	movs	r0, #0
	}
 8009650:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009652:	1d05      	adds	r5, r0, #4
 8009654:	4628      	mov	r0, r5
 8009656:	f7fe faed 	bl	8007c34 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800965a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800965c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800965e:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8009662:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <xTaskPriorityDisinherit+0x88>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4298      	cmp	r0, r3
 800966a:	d901      	bls.n	8009670 <xTaskPriorityDisinherit+0x68>
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <xTaskPriorityDisinherit+0x88>)
 800966e:	6018      	str	r0, [r3, #0]
 8009670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009674:	4629      	mov	r1, r5
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <xTaskPriorityDisinherit+0x8c>)
 8009678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800967c:	f7fe fab6 	bl	8007bec <vListInsertEnd>
					xReturn = pdTRUE;
 8009680:	2001      	movs	r0, #1
 8009682:	e7e5      	b.n	8009650 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009684:	2000      	movs	r0, #0
	}
 8009686:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009688:	2000      	movs	r0, #0
 800968a:	e7e1      	b.n	8009650 <xTaskPriorityDisinherit+0x48>
 800968c:	20003430 	.word	0x20003430
 8009690:	200038b0 	.word	0x200038b0
 8009694:	2000343c 	.word	0x2000343c

08009698 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009698:	2800      	cmp	r0, #0
 800969a:	d046      	beq.n	800972a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80096a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80096a2:	b943      	cbnz	r3, 80096b6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	e7fe      	b.n	80096b4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80096b8:	428a      	cmp	r2, r1
 80096ba:	d200      	bcs.n	80096be <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096bc:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80096c0:	4291      	cmp	r1, r2
 80096c2:	d001      	beq.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d000      	beq.n	80096ca <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80096c8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80096ca:	4b18      	ldr	r3, [pc, #96]	; (800972c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	d022      	beq.n	8009718 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80096d2:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096d4:	69a3      	ldr	r3, [r4, #24]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	db02      	blt.n	80096e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096da:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80096de:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096e0:	6962      	ldr	r2, [r4, #20]
 80096e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80096e6:	4b12      	ldr	r3, [pc, #72]	; (8009730 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80096e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80096ec:	428a      	cmp	r2, r1
 80096ee:	d1eb      	bne.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096f0:	1d25      	adds	r5, r4, #4
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7fe fa9e 	bl	8007c34 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80096f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80096fa:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4298      	cmp	r0, r3
 8009700:	d901      	bls.n	8009706 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8009702:	4b0c      	ldr	r3, [pc, #48]	; (8009734 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8009704:	6018      	str	r0, [r3, #0]
 8009706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800970a:	4629      	mov	r1, r5
 800970c:	4b08      	ldr	r3, [pc, #32]	; (8009730 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800970e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009712:	f7fe fa6b 	bl	8007bec <vListInsertEnd>
	}
 8009716:	e7d7      	b.n	80096c8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8009728:	e7fe      	b.n	8009728 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800972a:	4770      	bx	lr
 800972c:	20003430 	.word	0x20003430
 8009730:	2000343c 	.word	0x2000343c
 8009734:	200038b0 	.word	0x200038b0

08009738 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <pvTaskIncrementMutexHeldCount+0x18>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b123      	cbz	r3, 8009748 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <pvTaskIncrementMutexHeldCount+0x18>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009744:	3301      	adds	r3, #1
 8009746:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8009748:	4b01      	ldr	r3, [pc, #4]	; (8009750 <pvTaskIncrementMutexHeldCount+0x18>)
 800974a:	6818      	ldr	r0, [r3, #0]
	}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20003430 	.word	0x20003430

08009754 <xTaskNotifyWait>:
	{
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	4614      	mov	r4, r2
 800975c:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800975e:	f7fe fad1 	bl	8007d04 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009762:	4b21      	ldr	r3, [pc, #132]	; (80097e8 <xTaskNotifyWait+0x94>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	2a02      	cmp	r2, #2
 800976e:	d00a      	beq.n	8009786 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009770:	4b1d      	ldr	r3, [pc, #116]	; (80097e8 <xTaskNotifyWait+0x94>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009776:	ea20 0606 	bic.w	r6, r0, r6
 800977a:	6556      	str	r6, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8009784:	b9cd      	cbnz	r5, 80097ba <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009786:	f7fe fadf 	bl	8007d48 <vPortExitCritical>
		taskENTER_CRITICAL();
 800978a:	f7fe fabb 	bl	8007d04 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800978e:	b11c      	cbz	r4, 8009798 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009790:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <xTaskNotifyWait+0x94>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009796:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009798:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <xTaskNotifyWait+0x94>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d018      	beq.n	80097d8 <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 80097a6:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097a8:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <xTaskNotifyWait+0x94>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 80097b2:	f7fe fac9 	bl	8007d48 <vPortExitCritical>
	}
 80097b6:	4620      	mov	r0, r4
 80097b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ba:	4611      	mov	r1, r2
 80097bc:	4628      	mov	r0, r5
 80097be:	f7ff fb2b 	bl	8008e18 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80097c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	e7d6      	b.n	8009786 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80097d8:	4b03      	ldr	r3, [pc, #12]	; (80097e8 <xTaskNotifyWait+0x94>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097de:	ea21 0707 	bic.w	r7, r1, r7
 80097e2:	655f      	str	r7, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80097e4:	2401      	movs	r4, #1
 80097e6:	e7df      	b.n	80097a8 <xTaskNotifyWait+0x54>
 80097e8:	20003430 	.word	0x20003430

080097ec <xTaskGenericNotify>:
	{
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 80097ee:	b1a8      	cbz	r0, 800981c <xTaskGenericNotify+0x30>
 80097f0:	460f      	mov	r7, r1
 80097f2:	4614      	mov	r4, r2
 80097f4:	461d      	mov	r5, r3
 80097f6:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 80097f8:	f7fe fa84 	bl	8007d04 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80097fc:	b10d      	cbz	r5, 8009802 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80097fe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009800:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009802:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 8009806:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009808:	2202      	movs	r2, #2
 800980a:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 800980e:	2c04      	cmp	r4, #4
 8009810:	d81f      	bhi.n	8009852 <xTaskGenericNotify+0x66>
 8009812:	e8df f004 	tbb	[pc, r4]
 8009816:	0c2b      	.short	0x0c2b
 8009818:	1611      	.short	0x1611
 800981a:	19          	.byte	0x19
 800981b:	00          	.byte	0x00
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800982c:	e7fe      	b.n	800982c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800982e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009830:	4317      	orrs	r7, r2
 8009832:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009834:	2401      	movs	r4, #1
					break;
 8009836:	e01a      	b.n	800986e <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 8009838:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800983a:	3201      	adds	r2, #1
 800983c:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800983e:	2401      	movs	r4, #1
					break;
 8009840:	e015      	b.n	800986e <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 8009842:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009844:	2401      	movs	r4, #1
					break;
 8009846:	e012      	b.n	800986e <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009848:	2b02      	cmp	r3, #2
 800984a:	d016      	beq.n	800987a <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 800984c:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800984e:	2401      	movs	r4, #1
 8009850:	e00d      	b.n	800986e <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009852:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009854:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009858:	d011      	beq.n	800987e <xTaskGenericNotify+0x92>
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	e7fe      	b.n	800986a <xTaskGenericNotify+0x7e>
			switch( eAction )
 800986c:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800986e:	2b01      	cmp	r3, #1
 8009870:	d007      	beq.n	8009882 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 8009872:	f7fe fa69 	bl	8007d48 <vPortExitCritical>
	}
 8009876:	4620      	mov	r0, r4
 8009878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800987a:	2400      	movs	r4, #0
 800987c:	e7f7      	b.n	800986e <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 800987e:	2401      	movs	r4, #1
 8009880:	e7f5      	b.n	800986e <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009882:	1d35      	adds	r5, r6, #4
 8009884:	4628      	mov	r0, r5
 8009886:	f7fe f9d5 	bl	8007c34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800988a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800988c:	4b15      	ldr	r3, [pc, #84]	; (80098e4 <xTaskGenericNotify+0xf8>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4298      	cmp	r0, r3
 8009892:	d901      	bls.n	8009898 <xTaskGenericNotify+0xac>
 8009894:	4b13      	ldr	r3, [pc, #76]	; (80098e4 <xTaskGenericNotify+0xf8>)
 8009896:	6018      	str	r0, [r3, #0]
 8009898:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800989c:	4629      	mov	r1, r5
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <xTaskGenericNotify+0xfc>)
 80098a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098a4:	f7fe f9a2 	bl	8007bec <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80098a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80098aa:	b143      	cbz	r3, 80098be <xTaskGenericNotify+0xd2>
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	e7fe      	b.n	80098bc <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 80098be:	f7ff f975 	bl	8008bac <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098c2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <xTaskGenericNotify+0x100>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d9d1      	bls.n	8009872 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 80098ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80098d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	e7c6      	b.n	8009872 <xTaskGenericNotify+0x86>
 80098e4:	200038b0 	.word	0x200038b0
 80098e8:	2000343c 	.word	0x2000343c
 80098ec:	20003430 	.word	0x20003430

080098f0 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 80098f0:	b308      	cbz	r0, 8009936 <xTaskGenericNotifyFromISR+0x46>
	{
 80098f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	460e      	mov	r6, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	461d      	mov	r5, r3
 80098fc:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098fe:	f7fe fb97 	bl	8008030 <vPortValidateInterruptPriority>
	__asm volatile
 8009902:	f3ef 8811 	mrs	r8, BASEPRI
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009916:	b10d      	cbz	r5, 800991c <xTaskGenericNotifyFromISR+0x2c>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991a:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800991c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009920:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009922:	2202      	movs	r2, #2
 8009924:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 8009928:	2c04      	cmp	r4, #4
 800992a:	d81f      	bhi.n	800996c <xTaskGenericNotifyFromISR+0x7c>
 800992c:	e8df f004 	tbb	[pc, r4]
 8009930:	16110c2b 	.word	0x16110c2b
 8009934:	19          	.byte	0x19
 8009935:	00          	.byte	0x00
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8009946:	e7fe      	b.n	8009946 <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
 8009948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800994a:	4316      	orrs	r6, r2
 800994c:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800994e:	2401      	movs	r4, #1
					break;
 8009950:	e01a      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
					( pxTCB->ulNotifiedValue )++;
 8009952:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009954:	3201      	adds	r2, #1
 8009956:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009958:	2401      	movs	r4, #1
					break;
 800995a:	e015      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
					pxTCB->ulNotifiedValue = ulValue;
 800995c:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800995e:	2401      	movs	r4, #1
					break;
 8009960:	e012      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009962:	2b02      	cmp	r3, #2
 8009964:	d017      	beq.n	8009996 <xTaskGenericNotifyFromISR+0xa6>
						pxTCB->ulNotifiedValue = ulValue;
 8009966:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009968:	2401      	movs	r4, #1
 800996a:	e00d      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800996c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800996e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009972:	d012      	beq.n	800999a <xTaskGenericNotifyFromISR+0xaa>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	e7fe      	b.n	8009984 <xTaskGenericNotifyFromISR+0x94>
			switch( eAction )
 8009986:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009988:	2b01      	cmp	r3, #1
 800998a:	d008      	beq.n	800999e <xTaskGenericNotifyFromISR+0xae>
	__asm volatile
 800998c:	f388 8811 	msr	BASEPRI, r8
	}
 8009990:	4620      	mov	r0, r4
 8009992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 8009996:	2400      	movs	r4, #0
 8009998:	e7f6      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
	BaseType_t xReturn = pdPASS;
 800999a:	2401      	movs	r4, #1
 800999c:	e7f4      	b.n	8009988 <xTaskGenericNotifyFromISR+0x98>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	b143      	cbz	r3, 80099b4 <xTaskGenericNotifyFromISR+0xc4>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	e7fe      	b.n	80099b2 <xTaskGenericNotifyFromISR+0xc2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b4:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <xTaskGenericNotifyFromISR+0x11c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	bb0b      	cbnz	r3, 80099fe <xTaskGenericNotifyFromISR+0x10e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099ba:	1d3d      	adds	r5, r7, #4
 80099bc:	4628      	mov	r0, r5
 80099be:	f7fe f939 	bl	8007c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099c4:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <xTaskGenericNotifyFromISR+0x120>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4298      	cmp	r0, r3
 80099ca:	d901      	bls.n	80099d0 <xTaskGenericNotifyFromISR+0xe0>
 80099cc:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <xTaskGenericNotifyFromISR+0x120>)
 80099ce:	6018      	str	r0, [r3, #0]
 80099d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80099d4:	4629      	mov	r1, r5
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xTaskGenericNotifyFromISR+0x124>)
 80099d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80099dc:	f7fe f906 	bl	8007bec <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099e2:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <xTaskGenericNotifyFromISR+0x128>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d9cf      	bls.n	800998c <xTaskGenericNotifyFromISR+0x9c>
					if( pxHigherPriorityTaskWoken != NULL )
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	b113      	cbz	r3, 80099f6 <xTaskGenericNotifyFromISR+0x106>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80099f0:	2301      	movs	r3, #1
 80099f2:	9a06      	ldr	r2, [sp, #24]
 80099f4:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <xTaskGenericNotifyFromISR+0x12c>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	e7c6      	b.n	800998c <xTaskGenericNotifyFromISR+0x9c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80099fe:	f107 0118 	add.w	r1, r7, #24
 8009a02:	4807      	ldr	r0, [pc, #28]	; (8009a20 <xTaskGenericNotifyFromISR+0x130>)
 8009a04:	f7fe f8f2 	bl	8007bec <vListInsertEnd>
 8009a08:	e7ea      	b.n	80099e0 <xTaskGenericNotifyFromISR+0xf0>
 8009a0a:	bf00      	nop
 8009a0c:	200038a8 	.word	0x200038a8
 8009a10:	200038b0 	.word	0x200038b0
 8009a14:	2000343c 	.word	0x2000343c
 8009a18:	20003430 	.word	0x20003430
 8009a1c:	2000392c 	.word	0x2000392c
 8009a20:	200038e8 	.word	0x200038e8

08009a24 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a24:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <prvGetNextExpireTime+0x1c>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	b92b      	cbnz	r3, 8009a38 <prvGetNextExpireTime+0x14>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a30:	b923      	cbnz	r3, 8009a3c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a32:	68d3      	ldr	r3, [r2, #12]
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e7f8      	b.n	8009a2e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a3c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009a3e:	4770      	bx	lr
 8009a40:	20003930 	.word	0x20003930

08009a44 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a44:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a46:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a48:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	d80c      	bhi.n	8009a68 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4e:	1ad2      	subs	r2, r2, r3
 8009a50:	6983      	ldr	r3, [r0, #24]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d301      	bcc.n	8009a5a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a56:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8009a58:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a5a:	1d01      	adds	r1, r0, #4
 8009a5c:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <prvInsertTimerInActiveList+0x40>)
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	f7fe f8cf 	bl	8007c02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a64:	2000      	movs	r0, #0
 8009a66:	e7f7      	b.n	8009a58 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d201      	bcs.n	8009a70 <prvInsertTimerInActiveList+0x2c>
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d206      	bcs.n	8009a7e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a70:	1d01      	adds	r1, r0, #4
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <prvInsertTimerInActiveList+0x44>)
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	f7fe f8c4 	bl	8007c02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	e7ec      	b.n	8009a58 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8009a7e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009a80:	e7ea      	b.n	8009a58 <prvInsertTimerInActiveList+0x14>
 8009a82:	bf00      	nop
 8009a84:	20003934 	.word	0x20003934
 8009a88:	20003930 	.word	0x20003930

08009a8c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a8c:	b530      	push	{r4, r5, lr}
 8009a8e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a90:	f7fe f938 	bl	8007d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <prvCheckForValidListAndQueue+0x50>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	b11b      	cbz	r3, 8009aa2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a9a:	f7fe f955 	bl	8007d48 <vPortExitCritical>
}
 8009a9e:	b003      	add	sp, #12
 8009aa0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8009aa2:	4d0f      	ldr	r5, [pc, #60]	; (8009ae0 <prvCheckForValidListAndQueue+0x54>)
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f7fe f893 	bl	8007bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009aaa:	4c0e      	ldr	r4, [pc, #56]	; (8009ae4 <prvCheckForValidListAndQueue+0x58>)
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7fe f88f 	bl	8007bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <prvCheckForValidListAndQueue+0x5c>)
 8009ab4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	; (8009aec <prvCheckForValidListAndQueue+0x60>)
 8009ab8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009aba:	2300      	movs	r3, #0
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <prvCheckForValidListAndQueue+0x64>)
 8009ac0:	4a0c      	ldr	r2, [pc, #48]	; (8009af4 <prvCheckForValidListAndQueue+0x68>)
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	200a      	movs	r0, #10
 8009ac6:	f7fe fbdc 	bl	8008282 <xQueueGenericCreateStatic>
 8009aca:	4b04      	ldr	r3, [pc, #16]	; (8009adc <prvCheckForValidListAndQueue+0x50>)
 8009acc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0e3      	beq.n	8009a9a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ad2:	4909      	ldr	r1, [pc, #36]	; (8009af8 <prvCheckForValidListAndQueue+0x6c>)
 8009ad4:	f7fe ffe0 	bl	8008a98 <vQueueAddToRegistry>
 8009ad8:	e7df      	b.n	8009a9a <prvCheckForValidListAndQueue+0xe>
 8009ada:	bf00      	nop
 8009adc:	20003a54 	.word	0x20003a54
 8009ae0:	200039d8 	.word	0x200039d8
 8009ae4:	200039ec 	.word	0x200039ec
 8009ae8:	20003930 	.word	0x20003930
 8009aec:	20003934 	.word	0x20003934
 8009af0:	20003a04 	.word	0x20003a04
 8009af4:	20003938 	.word	0x20003938
 8009af8:	0800b350 	.word	0x0800b350

08009afc <xTimerCreateTimerTask>:
{
 8009afc:	b510      	push	{r4, lr}
 8009afe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009b00:	f7ff ffc4 	bl	8009a8c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009b04:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <xTimerCreateTimerTask+0x54>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b1cb      	cbz	r3, 8009b3e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b0a:	2400      	movs	r4, #0
 8009b0c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b0e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b10:	aa07      	add	r2, sp, #28
 8009b12:	a906      	add	r1, sp, #24
 8009b14:	a805      	add	r0, sp, #20
 8009b16:	f7fd ff3d 	bl	8007994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	9b06      	ldr	r3, [sp, #24]
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	2302      	movs	r3, #2
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4623      	mov	r3, r4
 8009b28:	9a07      	ldr	r2, [sp, #28]
 8009b2a:	490a      	ldr	r1, [pc, #40]	; (8009b54 <xTimerCreateTimerTask+0x58>)
 8009b2c:	480a      	ldr	r0, [pc, #40]	; (8009b58 <xTimerCreateTimerTask+0x5c>)
 8009b2e:	f7ff f9b1 	bl	8008e94 <xTaskCreateStatic>
 8009b32:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <xTimerCreateTimerTask+0x60>)
 8009b34:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009b36:	b110      	cbz	r0, 8009b3e <xTimerCreateTimerTask+0x42>
}
 8009b38:	2001      	movs	r0, #1
 8009b3a:	b008      	add	sp, #32
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009b4e:	e7fe      	b.n	8009b4e <xTimerCreateTimerTask+0x52>
 8009b50:	20003a54 	.word	0x20003a54
 8009b54:	0800b358 	.word	0x0800b358
 8009b58:	08009e61 	.word	0x08009e61
 8009b5c:	20003a58 	.word	0x20003a58

08009b60 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009b60:	b1b8      	cbz	r0, 8009b92 <xTimerGenericCommand+0x32>
 8009b62:	469c      	mov	ip, r3
 8009b64:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009b66:	4818      	ldr	r0, [pc, #96]	; (8009bc8 <xTimerGenericCommand+0x68>)
 8009b68:	6800      	ldr	r0, [r0, #0]
 8009b6a:	b358      	cbz	r0, 8009bc4 <xTimerGenericCommand+0x64>
{
 8009b6c:	b500      	push	{lr}
 8009b6e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009b70:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b72:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b74:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b76:	2905      	cmp	r1, #5
 8009b78:	dc1c      	bgt.n	8009bb4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b7a:	f7ff fce9 	bl	8009550 <xTaskGetSchedulerState>
 8009b7e:	2802      	cmp	r0, #2
 8009b80:	d010      	beq.n	8009ba4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b82:	2300      	movs	r3, #0
 8009b84:	461a      	mov	r2, r3
 8009b86:	4669      	mov	r1, sp
 8009b88:	480f      	ldr	r0, [pc, #60]	; (8009bc8 <xTimerGenericCommand+0x68>)
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	f7fe fc2b 	bl	80083e6 <xQueueGenericSend>
 8009b90:	e015      	b.n	8009bbe <xTimerGenericCommand+0x5e>
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009ba2:	e7fe      	b.n	8009ba2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9a06      	ldr	r2, [sp, #24]
 8009ba8:	4669      	mov	r1, sp
 8009baa:	4807      	ldr	r0, [pc, #28]	; (8009bc8 <xTimerGenericCommand+0x68>)
 8009bac:	6800      	ldr	r0, [r0, #0]
 8009bae:	f7fe fc1a 	bl	80083e6 <xQueueGenericSend>
 8009bb2:	e004      	b.n	8009bbe <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4662      	mov	r2, ip
 8009bb8:	4669      	mov	r1, sp
 8009bba:	f7fe fcd8 	bl	800856e <xQueueGenericSendFromISR>
}
 8009bbe:	b005      	add	sp, #20
 8009bc0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009bc4:	2000      	movs	r0, #0
}
 8009bc6:	4770      	bx	lr
 8009bc8:	20003a54 	.word	0x20003a54

08009bcc <prvSwitchTimerLists>:
{
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bd0:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <prvSwitchTimerLists+0x74>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	b362      	cbz	r2, 8009c32 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bdc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bde:	1d25      	adds	r5, r4, #4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f7fe f827 	bl	8007c34 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009be6:	6a23      	ldr	r3, [r4, #32]
 8009be8:	4620      	mov	r0, r4
 8009bea:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009bf0:	f013 0f04 	tst.w	r3, #4
 8009bf4:	d0ec      	beq.n	8009bd0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bf6:	69a3      	ldr	r3, [r4, #24]
 8009bf8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009bfa:	429e      	cmp	r6, r3
 8009bfc:	d207      	bcs.n	8009c0e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bfe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c00:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c02:	4629      	mov	r1, r5
 8009c04:	4b0e      	ldr	r3, [pc, #56]	; (8009c40 <prvSwitchTimerLists+0x74>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	f7fd fffb 	bl	8007c02 <vListInsert>
 8009c0c:	e7e0      	b.n	8009bd0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c0e:	2100      	movs	r1, #0
 8009c10:	9100      	str	r1, [sp, #0]
 8009c12:	460b      	mov	r3, r1
 8009c14:	4632      	mov	r2, r6
 8009c16:	4620      	mov	r0, r4
 8009c18:	f7ff ffa2 	bl	8009b60 <xTimerGenericCommand>
				configASSERT( xResult );
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1d7      	bne.n	8009bd0 <prvSwitchTimerLists+0x4>
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	e7fe      	b.n	8009c30 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009c32:	4a04      	ldr	r2, [pc, #16]	; (8009c44 <prvSwitchTimerLists+0x78>)
 8009c34:	6810      	ldr	r0, [r2, #0]
 8009c36:	4902      	ldr	r1, [pc, #8]	; (8009c40 <prvSwitchTimerLists+0x74>)
 8009c38:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009c3a:	6013      	str	r3, [r2, #0]
}
 8009c3c:	b002      	add	sp, #8
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	20003930 	.word	0x20003930
 8009c44:	20003934 	.word	0x20003934

08009c48 <prvSampleTimeNow>:
{
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009c4c:	f7ff f9e8 	bl	8009020 <xTaskGetTickCount>
 8009c50:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <prvSampleTimeNow+0x28>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4283      	cmp	r3, r0
 8009c58:	d805      	bhi.n	8009c66 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009c5e:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <prvSampleTimeNow+0x28>)
 8009c60:	601c      	str	r4, [r3, #0]
}
 8009c62:	4620      	mov	r0, r4
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009c66:	f7ff ffb1 	bl	8009bcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	e7f6      	b.n	8009c5e <prvSampleTimeNow+0x16>
 8009c70:	20003a00 	.word	0x20003a00

08009c74 <prvProcessExpiredTimer>:
{
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7c:	4917      	ldr	r1, [pc, #92]	; (8009cdc <prvProcessExpiredTimer+0x68>)
 8009c7e:	6809      	ldr	r1, [r1, #0]
 8009c80:	68c9      	ldr	r1, [r1, #12]
 8009c82:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c84:	1d20      	adds	r0, r4, #4
 8009c86:	f7fd ffd5 	bl	8007c34 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c8a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009c8e:	f01c 0f04 	tst.w	ip, #4
 8009c92:	d108      	bne.n	8009ca6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c94:	f02c 0c01 	bic.w	ip, ip, #1
 8009c98:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c9c:	6a23      	ldr	r3, [r4, #32]
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4798      	blx	r3
}
 8009ca2:	b002      	add	sp, #8
 8009ca4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ca6:	69a1      	ldr	r1, [r4, #24]
 8009ca8:	4633      	mov	r3, r6
 8009caa:	462a      	mov	r2, r5
 8009cac:	4431      	add	r1, r6
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fec8 	bl	8009a44 <prvInsertTimerInActiveList>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d0f1      	beq.n	8009c9c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cb8:	2100      	movs	r1, #0
 8009cba:	9100      	str	r1, [sp, #0]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f7ff ff4d 	bl	8009b60 <xTimerGenericCommand>
			configASSERT( xResult );
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1e8      	bne.n	8009c9c <prvProcessExpiredTimer+0x28>
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	e7fe      	b.n	8009cda <prvProcessExpiredTimer+0x66>
 8009cdc:	20003930 	.word	0x20003930

08009ce0 <prvProcessTimerOrBlockTask>:
{
 8009ce0:	b570      	push	{r4, r5, r6, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009ce8:	f7ff f992 	bl	8009010 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cec:	a801      	add	r0, sp, #4
 8009cee:	f7ff ffab 	bl	8009c48 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	bb33      	cbnz	r3, 8009d44 <prvProcessTimerOrBlockTask+0x64>
 8009cf6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cf8:	b90c      	cbnz	r4, 8009cfe <prvProcessTimerOrBlockTask+0x1e>
 8009cfa:	42b0      	cmp	r0, r6
 8009cfc:	d219      	bcs.n	8009d32 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009cfe:	b124      	cbz	r4, 8009d0a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d00:	4a12      	ldr	r2, [pc, #72]	; (8009d4c <prvProcessTimerOrBlockTask+0x6c>)
 8009d02:	6812      	ldr	r2, [r2, #0]
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	b9da      	cbnz	r2, 8009d40 <prvProcessTimerOrBlockTask+0x60>
 8009d08:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	1b71      	subs	r1, r6, r5
 8009d0e:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <prvProcessTimerOrBlockTask+0x70>)
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	f7fe ff01 	bl	8008b18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d16:	f7ff fa2f 	bl	8009178 <xTaskResumeAll>
 8009d1a:	b9a8      	cbnz	r0, 8009d48 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009d1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	e00a      	b.n	8009d48 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009d32:	f7ff fa21 	bl	8009178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d36:	4629      	mov	r1, r5
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7ff ff9b 	bl	8009c74 <prvProcessExpiredTimer>
 8009d3e:	e003      	b.n	8009d48 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d40:	461c      	mov	r4, r3
 8009d42:	e7e2      	b.n	8009d0a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009d44:	f7ff fa18 	bl	8009178 <xTaskResumeAll>
}
 8009d48:	b002      	add	sp, #8
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	20003934 	.word	0x20003934
 8009d50:	20003a54 	.word	0x20003a54

08009d54 <prvProcessReceivedCommands>:
{
 8009d54:	b510      	push	{r4, lr}
 8009d56:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d58:	e002      	b.n	8009d60 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da0f      	bge.n	8009d80 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d60:	2200      	movs	r2, #0
 8009d62:	a904      	add	r1, sp, #16
 8009d64:	4b3d      	ldr	r3, [pc, #244]	; (8009e5c <prvProcessReceivedCommands+0x108>)
 8009d66:	6818      	ldr	r0, [r3, #0]
 8009d68:	f7fe fcc0 	bl	80086ec <xQueueReceive>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d073      	beq.n	8009e58 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d70:	9b04      	ldr	r3, [sp, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	daf1      	bge.n	8009d5a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d76:	9907      	ldr	r1, [sp, #28]
 8009d78:	9806      	ldr	r0, [sp, #24]
 8009d7a:	9b05      	ldr	r3, [sp, #20]
 8009d7c:	4798      	blx	r3
 8009d7e:	e7ec      	b.n	8009d5a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d80:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d82:	6963      	ldr	r3, [r4, #20]
 8009d84:	b113      	cbz	r3, 8009d8c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d86:	1d20      	adds	r0, r4, #4
 8009d88:	f7fd ff54 	bl	8007c34 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d8c:	a803      	add	r0, sp, #12
 8009d8e:	f7ff ff5b 	bl	8009c48 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	2b09      	cmp	r3, #9
 8009d96:	d8e3      	bhi.n	8009d60 <prvProcessReceivedCommands+0xc>
 8009d98:	e8df f003 	tbb	[pc, r3]
 8009d9c:	30050505 	.word	0x30050505
 8009da0:	05055037 	.word	0x05055037
 8009da4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009da6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009db2:	9b05      	ldr	r3, [sp, #20]
 8009db4:	69a1      	ldr	r1, [r4, #24]
 8009db6:	4602      	mov	r2, r0
 8009db8:	4419      	add	r1, r3
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff fe42 	bl	8009a44 <prvInsertTimerInActiveList>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0cd      	beq.n	8009d60 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dc4:	6a23      	ldr	r3, [r4, #32]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009dce:	f013 0f04 	tst.w	r3, #4
 8009dd2:	d0c5      	beq.n	8009d60 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dd4:	69a2      	ldr	r2, [r4, #24]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	9100      	str	r1, [sp, #0]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	4402      	add	r2, r0
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7ff febd 	bl	8009b60 <xTimerGenericCommand>
							configASSERT( xResult );
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d1ba      	bne.n	8009d60 <prvProcessReceivedCommands+0xc>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	e7fe      	b.n	8009dfa <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dfc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e00:	f023 0301 	bic.w	r3, r3, #1
 8009e04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009e08:	e7aa      	b.n	8009d60 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e0e:	f043 0301 	orr.w	r3, r3, #1
 8009e12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e16:	9905      	ldr	r1, [sp, #20]
 8009e18:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e1a:	b131      	cbz	r1, 8009e2a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4401      	add	r1, r0
 8009e22:	4620      	mov	r0, r4
 8009e24:	f7ff fe0e 	bl	8009a44 <prvInsertTimerInActiveList>
					break;
 8009e28:	e79a      	b.n	8009d60 <prvProcessReceivedCommands+0xc>
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e3a:	e7fe      	b.n	8009e3a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009e40:	f013 0f02 	tst.w	r3, #2
 8009e44:	d004      	beq.n	8009e50 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e46:	f023 0301 	bic.w	r3, r3, #1
 8009e4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009e4e:	e787      	b.n	8009d60 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7fd fe85 	bl	8007b60 <vPortFree>
 8009e56:	e783      	b.n	8009d60 <prvProcessReceivedCommands+0xc>
}
 8009e58:	b008      	add	sp, #32
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	20003a54 	.word	0x20003a54

08009e60 <prvTimerTask>:
{
 8009e60:	b500      	push	{lr}
 8009e62:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e64:	a801      	add	r0, sp, #4
 8009e66:	f7ff fddd 	bl	8009a24 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e6a:	9901      	ldr	r1, [sp, #4]
 8009e6c:	f7ff ff38 	bl	8009ce0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009e70:	f7ff ff70 	bl	8009d54 <prvProcessReceivedCommands>
	for( ;; )
 8009e74:	e7f6      	b.n	8009e64 <prvTimerTask+0x4>
	...

08009e78 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8009e78:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e7a:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009e7e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8009e80:	4b1e      	ldr	r3, [pc, #120]	; (8009efc <TRACE_AllocateBufer+0x84>)
 8009e82:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8009e86:	8a1a      	ldrh	r2, [r3, #16]
 8009e88:	4594      	cmp	ip, r2
 8009e8a:	d011      	beq.n	8009eb0 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8009e8c:	4594      	cmp	ip, r2
 8009e8e:	d921      	bls.n	8009ed4 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8009e90:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8009e94:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8009e96:	4283      	cmp	r3, r0
 8009e98:	d81f      	bhi.n	8009eda <TRACE_AllocateBufer+0x62>
 8009e9a:	4282      	cmp	r2, r0
 8009e9c:	d91d      	bls.n	8009eda <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8009e9e:	4b17      	ldr	r3, [pc, #92]	; (8009efc <TRACE_AllocateBufer+0x84>)
 8009ea0:	2401      	movs	r4, #1
 8009ea2:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8009ea4:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8009ea8:	2400      	movs	r4, #0
 8009eaa:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8009eac:	4613      	mov	r3, r2
 8009eae:	e014      	b.n	8009eda <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8009eb0:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8009eb4:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8009eb6:	4298      	cmp	r0, r3
 8009eb8:	d30f      	bcc.n	8009eda <TRACE_AllocateBufer+0x62>
 8009eba:	4282      	cmp	r2, r0
 8009ebc:	d90d      	bls.n	8009eda <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <TRACE_AllocateBufer+0x84>)
 8009ec0:	2401      	movs	r4, #1
 8009ec2:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8009ec4:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8009ec8:	f04f 0c00 	mov.w	ip, #0
 8009ecc:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	e002      	b.n	8009eda <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8009ed4:	eba2 030c 	sub.w	r3, r2, ip
 8009ed8:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8009eda:	4283      	cmp	r3, r0
 8009edc:	d90a      	bls.n	8009ef4 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8009ede:	4a07      	ldr	r2, [pc, #28]	; (8009efc <TRACE_AllocateBufer+0x84>)
 8009ee0:	8a53      	ldrh	r3, [r2, #18]
 8009ee2:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8009ee4:	4403      	add	r3, r0
 8009ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eea:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8009eec:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eee:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8009ef2:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8009ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef8:	e7f9      	b.n	8009eee <TRACE_AllocateBufer+0x76>
 8009efa:	bf00      	nop
 8009efc:	20003e5c 	.word	0x20003e5c

08009f00 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f04:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8009f06:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <TRACE_Lock+0x14>)
 8009f08:	8ad3      	ldrh	r3, [r2, #22]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f0e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8009f12:	4770      	bx	lr
 8009f14:	20003e5c 	.word	0x20003e5c

08009f18 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f18:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009f1c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8009f1e:	4a03      	ldr	r2, [pc, #12]	; (8009f2c <TRACE_UnLock+0x14>)
 8009f20:	8ad3      	ldrh	r3, [r2, #22]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f26:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8009f2a:	4770      	bx	lr
 8009f2c:	20003e5c 	.word	0x20003e5c

08009f30 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <TRACE_IsLocked+0xc>)
 8009f32:	8ad8      	ldrh	r0, [r3, #22]
}
 8009f34:	3800      	subs	r0, #0
 8009f36:	bf18      	it	ne
 8009f38:	2001      	movne	r0, #1
 8009f3a:	4770      	bx	lr
 8009f3c:	20003e5c 	.word	0x20003e5c

08009f40 <UTIL_ADV_TRACE_Init>:
{
 8009f40:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8009f42:	2218      	movs	r2, #24
 8009f44:	2100      	movs	r1, #0
 8009f46:	4807      	ldr	r0, [pc, #28]	; (8009f64 <UTIL_ADV_TRACE_Init+0x24>)
 8009f48:	f000 f9c7 	bl	800a2da <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8009f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f50:	2100      	movs	r1, #0
 8009f52:	4805      	ldr	r0, [pc, #20]	; (8009f68 <UTIL_ADV_TRACE_Init+0x28>)
 8009f54:	f000 f9c1 	bl	800a2da <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <UTIL_ADV_TRACE_Init+0x2c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4804      	ldr	r0, [pc, #16]	; (8009f70 <UTIL_ADV_TRACE_Init+0x30>)
 8009f5e:	4798      	blx	r3
}
 8009f60:	bd08      	pop	{r3, pc}
 8009f62:	bf00      	nop
 8009f64:	20003e5c 	.word	0x20003e5c
 8009f68:	20003a5c 	.word	0x20003a5c
 8009f6c:	0800abb8 	.word	0x0800abb8
 8009f70:	0800a165 	.word	0x0800a165

08009f74 <UTIL_ADV_TRACE_IsBufferEmpty>:
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8009f74:	4b04      	ldr	r3, [pc, #16]	; (8009f88 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>)
 8009f76:	8a5a      	ldrh	r2, [r3, #18]
 8009f78:	8a1b      	ldrh	r3, [r3, #16]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d001      	beq.n	8009f82 <UTIL_ADV_TRACE_IsBufferEmpty+0xe>
  return 0;
 8009f7e:	2000      	movs	r0, #0
 8009f80:	4770      	bx	lr
    return 1;
 8009f82:	2001      	movs	r0, #1
}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20003e5c 	.word	0x20003e5c

08009f8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8009f8c:	4b01      	ldr	r3, [pc, #4]	; (8009f94 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8009f8e:	6058      	str	r0, [r3, #4]
}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20003e5c 	.word	0x20003e5c

08009f98 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8009f98:	4b01      	ldr	r3, [pc, #4]	; (8009fa0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8009f9a:	7218      	strb	r0, [r3, #8]
}
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	20003e5c 	.word	0x20003e5c

08009fa4 <TRACE_Send>:
{
 8009fa4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009faa:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8009fac:	f7ff ffc0 	bl	8009f30 <TRACE_IsLocked>
 8009fb0:	b118      	cbz	r0, 8009fba <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8009fb6:	2000      	movs	r0, #0
}
 8009fb8:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8009fba:	f7ff ffa1 	bl	8009f00 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <TRACE_Send+0x90>)
 8009fc0:	8a1a      	ldrh	r2, [r3, #16]
 8009fc2:	8a5b      	ldrh	r3, [r3, #18]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d02e      	beq.n	800a026 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8009fc8:	491a      	ldr	r1, [pc, #104]	; (800a034 <TRACE_Send+0x90>)
 8009fca:	7889      	ldrb	r1, [r1, #2]
 8009fcc:	2901      	cmp	r1, #1
 8009fce:	d017      	beq.n	800a000 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8009fd0:	4a18      	ldr	r2, [pc, #96]	; (800a034 <TRACE_Send+0x90>)
 8009fd2:	7892      	ldrb	r2, [r2, #2]
 8009fd4:	b932      	cbnz	r2, 8009fe4 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8009fd6:	4a17      	ldr	r2, [pc, #92]	; (800a034 <TRACE_Send+0x90>)
 8009fd8:	8a12      	ldrh	r2, [r2, #16]
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d91e      	bls.n	800a01c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8009fde:	1a9b      	subs	r3, r3, r2
 8009fe0:	4a14      	ldr	r2, [pc, #80]	; (800a034 <TRACE_Send+0x90>)
 8009fe2:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8009fe4:	4e13      	ldr	r6, [pc, #76]	; (800a034 <TRACE_Send+0x90>)
 8009fe6:	8a33      	ldrh	r3, [r6, #16]
 8009fe8:	4d13      	ldr	r5, [pc, #76]	; (800a038 <TRACE_Send+0x94>)
 8009fea:	441d      	add	r5, r3
 8009fec:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8009ff0:	f7f7 fb64 	bl	80016bc <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8009ff4:	4b11      	ldr	r3, [pc, #68]	; (800a03c <TRACE_Send+0x98>)
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	8ab1      	ldrh	r1, [r6, #20]
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	4798      	blx	r3
 8009ffe:	e7db      	b.n	8009fb8 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800a000:	480c      	ldr	r0, [pc, #48]	; (800a034 <TRACE_Send+0x90>)
 800a002:	8801      	ldrh	r1, [r0, #0]
 800a004:	1a8a      	subs	r2, r1, r2
 800a006:	b292      	uxth	r2, r2
 800a008:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a00a:	2102      	movs	r1, #2
 800a00c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a00e:	2100      	movs	r1, #0
 800a010:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a012:	2a00      	cmp	r2, #0
 800a014:	d1dc      	bne.n	8009fd0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a016:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a018:	8201      	strh	r1, [r0, #16]
 800a01a:	e7d9      	b.n	8009fd0 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a01c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 800a020:	4a04      	ldr	r2, [pc, #16]	; (800a034 <TRACE_Send+0x90>)
 800a022:	8293      	strh	r3, [r2, #20]
 800a024:	e7de      	b.n	8009fe4 <TRACE_Send+0x40>
      TRACE_UnLock();
 800a026:	f7ff ff77 	bl	8009f18 <TRACE_UnLock>
 800a02a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800a02e:	2000      	movs	r0, #0
}
 800a030:	e7c2      	b.n	8009fb8 <TRACE_Send+0x14>
 800a032:	bf00      	nop
 800a034:	20003e5c 	.word	0x20003e5c
 800a038:	20003a5c 	.word	0x20003a5c
 800a03c:	0800abb8 	.word	0x0800abb8

0800a040 <UTIL_ADV_TRACE_COND_FSend>:
{
 800a040:	b408      	push	{r3}
 800a042:	b530      	push	{r4, r5, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 800a048:	2300      	movs	r3, #0
 800a04a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800a04e:	4b2c      	ldr	r3, [pc, #176]	; (800a100 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800a050:	7a1b      	ldrb	r3, [r3, #8]
 800a052:	4283      	cmp	r3, r0
 800a054:	d34d      	bcc.n	800a0f2 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800a056:	4b2a      	ldr	r3, [pc, #168]	; (800a100 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	ea31 0303 	bics.w	r3, r1, r3
 800a05e:	d14b      	bne.n	800a0f8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800a060:	4b27      	ldr	r3, [pc, #156]	; (800a100 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	b123      	cbz	r3, 800a070 <UTIL_ADV_TRACE_COND_FSend+0x30>
 800a066:	b11a      	cbz	r2, 800a070 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800a068:	f10d 0102 	add.w	r1, sp, #2
 800a06c:	a801      	add	r0, sp, #4
 800a06e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800a070:	ab0a      	add	r3, sp, #40	; 0x28
 800a072:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a074:	4622      	mov	r2, r4
 800a076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a07a:	4822      	ldr	r0, [pc, #136]	; (800a104 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800a07c:	f000 fb7e 	bl	800a77c <tiny_vsnprintf_like>
 800a080:	b285      	uxth	r5, r0
  TRACE_Lock();
 800a082:	f7ff ff3d 	bl	8009f00 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800a086:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800a08a:	4428      	add	r0, r5
 800a08c:	4669      	mov	r1, sp
 800a08e:	b280      	uxth	r0, r0
 800a090:	f7ff fef2 	bl	8009e78 <TRACE_AllocateBufer>
 800a094:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a098:	d026      	beq.n	800a0e8 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 800a09a:	2300      	movs	r3, #0
 800a09c:	e00d      	b.n	800a0ba <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800a09e:	f8bd 2000 	ldrh.w	r2, [sp]
 800a0a2:	f103 0118 	add.w	r1, r3, #24
 800a0a6:	4469      	add	r1, sp
 800a0a8:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800a0ac:	4916      	ldr	r1, [pc, #88]	; (800a108 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800a0ae:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800a0b0:	3201      	adds	r2, #1
 800a0b2:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d8ed      	bhi.n	800a09e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a0c2:	f8bd 0000 	ldrh.w	r0, [sp]
 800a0c6:	9b05      	ldr	r3, [sp, #20]
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0ce:	4c0e      	ldr	r4, [pc, #56]	; (800a108 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800a0d0:	4420      	add	r0, r4
 800a0d2:	f000 fb53 	bl	800a77c <tiny_vsnprintf_like>
    TRACE_UnLock();
 800a0d6:	f7ff ff1f 	bl	8009f18 <TRACE_UnLock>
    return TRACE_Send();
 800a0da:	f7ff ff63 	bl	8009fa4 <TRACE_Send>
}
 800a0de:	b006      	add	sp, #24
 800a0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0e4:	b001      	add	sp, #4
 800a0e6:	4770      	bx	lr
  TRACE_UnLock();
 800a0e8:	f7ff ff16 	bl	8009f18 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800a0ec:	f06f 0002 	mvn.w	r0, #2
 800a0f0:	e7f5      	b.n	800a0de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 800a0f2:	f06f 0004 	mvn.w	r0, #4
 800a0f6:	e7f2      	b.n	800a0de <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800a0f8:	f06f 0005 	mvn.w	r0, #5
 800a0fc:	e7ef      	b.n	800a0de <UTIL_ADV_TRACE_COND_FSend+0x9e>
 800a0fe:	bf00      	nop
 800a100:	20003e5c 	.word	0x20003e5c
 800a104:	20003e74 	.word	0x20003e74
 800a108:	20003a5c 	.word	0x20003a5c

0800a10c <UTIL_ADV_TRACE_Send>:
{
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	4606      	mov	r6, r0
 800a112:	460d      	mov	r5, r1
  TRACE_Lock();
 800a114:	f7ff fef4 	bl	8009f00 <TRACE_Lock>
  if (TRACE_AllocateBufer(Length,&writepos) != -1)
 800a118:	f10d 0106 	add.w	r1, sp, #6
 800a11c:	4628      	mov	r0, r5
 800a11e:	f7ff feab 	bl	8009e78 <TRACE_AllocateBufer>
 800a122:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a126:	d016      	beq.n	800a156 <UTIL_ADV_TRACE_Send+0x4a>
    for (idx = 0u; idx < Length; idx++)
 800a128:	2200      	movs	r2, #0
 800a12a:	e00c      	b.n	800a146 <UTIL_ADV_TRACE_Send+0x3a>
      ADV_TRACE_Buffer[writepos] = pData[idx];
 800a12c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a130:	f816 c002 	ldrb.w	ip, [r6, r2]
 800a134:	4c0a      	ldr	r4, [pc, #40]	; (800a160 <UTIL_ADV_TRACE_Send+0x54>)
 800a136:	f804 c003 	strb.w	ip, [r4, r3]
      writepos = (uint16_t) ((writepos + 1u) % UTIL_ADV_TRACE_FIFO_SIZE);
 800a13a:	3301      	adds	r3, #1
 800a13c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a140:	f8ad 3006 	strh.w	r3, [sp, #6]
    for (idx = 0u; idx < Length; idx++)
 800a144:	3201      	adds	r2, #1
 800a146:	4295      	cmp	r5, r2
 800a148:	d8f0      	bhi.n	800a12c <UTIL_ADV_TRACE_Send+0x20>
    TRACE_UnLock();
 800a14a:	f7ff fee5 	bl	8009f18 <TRACE_UnLock>
    ret = TRACE_Send();
 800a14e:	f7ff ff29 	bl	8009fa4 <TRACE_Send>
}
 800a152:	b002      	add	sp, #8
 800a154:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_UnLock();
 800a156:	f7ff fedf 	bl	8009f18 <TRACE_UnLock>
    ret = UTIL_ADV_TRACE_MEM_FULL;
 800a15a:	f06f 0002 	mvn.w	r0, #2
 800a15e:	e7f8      	b.n	800a152 <UTIL_ADV_TRACE_Send+0x46>
 800a160:	20003a5c 	.word	0x20003a5c

0800a164 <TRACE_TxCpltCallback>:
{
 800a164:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a166:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a16a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800a16c:	4b25      	ldr	r3, [pc, #148]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a16e:	789b      	ldrb	r3, [r3, #2]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d016      	beq.n	800a1a2 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a174:	4a23      	ldr	r2, [pc, #140]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a176:	8a13      	ldrh	r3, [r2, #16]
 800a178:	8a90      	ldrh	r0, [r2, #20]
 800a17a:	4403      	add	r3, r0
 800a17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a180:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800a182:	4b20      	ldr	r3, [pc, #128]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a184:	8a1a      	ldrh	r2, [r3, #16]
 800a186:	8a5b      	ldrh	r3, [r3, #18]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d003      	beq.n	800a194 <TRACE_TxCpltCallback+0x30>
 800a18c:	481d      	ldr	r0, [pc, #116]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a18e:	8ac0      	ldrh	r0, [r0, #22]
 800a190:	2801      	cmp	r0, #1
 800a192:	d00b      	beq.n	800a1ac <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a194:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800a198:	f7f7 fa96 	bl	80016c8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800a19c:	f7ff febc 	bl	8009f18 <TRACE_UnLock>
}
 800a1a0:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a1a2:	4b18      	ldr	r3, [pc, #96]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a1a8:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800a1aa:	e7ea      	b.n	800a182 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800a1ac:	4815      	ldr	r0, [pc, #84]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1ae:	7880      	ldrb	r0, [r0, #2]
 800a1b0:	2801      	cmp	r0, #1
 800a1b2:	d014      	beq.n	800a1de <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a1b4:	4a13      	ldr	r2, [pc, #76]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1b6:	7892      	ldrb	r2, [r2, #2]
 800a1b8:	b932      	cbnz	r2, 800a1c8 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a1ba:	4a12      	ldr	r2, [pc, #72]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1bc:	8a12      	ldrh	r2, [r2, #16]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d91b      	bls.n	800a1fa <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	4a0f      	ldr	r2, [pc, #60]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1c6:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a1c8:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1ca:	8a1a      	ldrh	r2, [r3, #16]
 800a1cc:	480e      	ldr	r0, [pc, #56]	; (800a208 <TRACE_TxCpltCallback+0xa4>)
 800a1ce:	4410      	add	r0, r2
 800a1d0:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <TRACE_TxCpltCallback+0xa8>)
 800a1d6:	68d2      	ldr	r2, [r2, #12]
 800a1d8:	8a99      	ldrh	r1, [r3, #20]
 800a1da:	4790      	blx	r2
 800a1dc:	e7e0      	b.n	800a1a0 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800a1de:	4c09      	ldr	r4, [pc, #36]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a1e0:	8820      	ldrh	r0, [r4, #0]
 800a1e2:	1a82      	subs	r2, r0, r2
 800a1e4:	b292      	uxth	r2, r2
 800a1e6:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a1e8:	2002      	movs	r0, #2
 800a1ea:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d1df      	bne.n	800a1b4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a1f4:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a1f6:	8220      	strh	r0, [r4, #16]
 800a1f8:	e7dc      	b.n	800a1b4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a1fa:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 800a1fe:	4a01      	ldr	r2, [pc, #4]	; (800a204 <TRACE_TxCpltCallback+0xa0>)
 800a200:	8293      	strh	r3, [r2, #20]
 800a202:	e7e1      	b.n	800a1c8 <TRACE_TxCpltCallback+0x64>
 800a204:	20003e5c 	.word	0x20003e5c
 800a208:	20003a5c 	.word	0x20003a5c
 800a20c:	0800abb8 	.word	0x0800abb8

0800a210 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a210:	2300      	movs	r3, #0
 800a212:	4a02      	ldr	r2, [pc, #8]	; (800a21c <UTIL_LPM_Init+0xc>)
 800a214:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a216:	4a02      	ldr	r2, [pc, #8]	; (800a220 <UTIL_LPM_Init+0x10>)
 800a218:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a21a:	4770      	bx	lr
 800a21c:	20004078 	.word	0x20004078
 800a220:	20004074 	.word	0x20004074

0800a224 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a228:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800a22a:	b141      	cbz	r1, 800a23e <UTIL_LPM_SetStopMode+0x1a>
 800a22c:	2901      	cmp	r1, #1
 800a22e:	d103      	bne.n	800a238 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a230:	4906      	ldr	r1, [pc, #24]	; (800a24c <UTIL_LPM_SetStopMode+0x28>)
 800a232:	680a      	ldr	r2, [r1, #0]
 800a234:	4310      	orrs	r0, r2
 800a236:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a238:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a23c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800a23e:	4903      	ldr	r1, [pc, #12]	; (800a24c <UTIL_LPM_SetStopMode+0x28>)
 800a240:	680a      	ldr	r2, [r1, #0]
 800a242:	ea22 0000 	bic.w	r0, r2, r0
 800a246:	6008      	str	r0, [r1, #0]
      break;
 800a248:	e7f6      	b.n	800a238 <UTIL_LPM_SetStopMode+0x14>
 800a24a:	bf00      	nop
 800a24c:	20004078 	.word	0x20004078

0800a250 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a250:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a254:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800a256:	b141      	cbz	r1, 800a26a <UTIL_LPM_SetOffMode+0x1a>
 800a258:	2901      	cmp	r1, #1
 800a25a:	d103      	bne.n	800a264 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a25c:	4906      	ldr	r1, [pc, #24]	; (800a278 <UTIL_LPM_SetOffMode+0x28>)
 800a25e:	680a      	ldr	r2, [r1, #0]
 800a260:	4310      	orrs	r0, r2
 800a262:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a264:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a268:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800a26a:	4903      	ldr	r1, [pc, #12]	; (800a278 <UTIL_LPM_SetOffMode+0x28>)
 800a26c:	680a      	ldr	r2, [r1, #0]
 800a26e:	ea22 0000 	bic.w	r0, r2, r0
 800a272:	6008      	str	r0, [r1, #0]
      break;
 800a274:	e7f6      	b.n	800a264 <UTIL_LPM_SetOffMode+0x14>
 800a276:	bf00      	nop
 800a278:	20004074 	.word	0x20004074

0800a27c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a27c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a282:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <UTIL_LPM_EnterLowPower+0x3c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	b13b      	cbz	r3, 800a29a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a28a:	4d0c      	ldr	r5, [pc, #48]	; (800a2bc <UTIL_LPM_EnterLowPower+0x40>)
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a290:	686b      	ldr	r3, [r5, #4]
 800a292:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a294:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a298:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <UTIL_LPM_EnterLowPower+0x44>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	b12b      	cbz	r3, 800a2ac <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800a2a0:	4d06      	ldr	r5, [pc, #24]	; (800a2bc <UTIL_LPM_EnterLowPower+0x40>)
 800a2a2:	68ab      	ldr	r3, [r5, #8]
 800a2a4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a2a6:	68eb      	ldr	r3, [r5, #12]
 800a2a8:	4798      	blx	r3
 800a2aa:	e7f3      	b.n	800a294 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800a2ac:	4d03      	ldr	r5, [pc, #12]	; (800a2bc <UTIL_LPM_EnterLowPower+0x40>)
 800a2ae:	692b      	ldr	r3, [r5, #16]
 800a2b0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a2b2:	696b      	ldr	r3, [r5, #20]
 800a2b4:	4798      	blx	r3
 800a2b6:	e7ed      	b.n	800a294 <UTIL_LPM_EnterLowPower+0x18>
 800a2b8:	20004078 	.word	0x20004078
 800a2bc:	0800a9dc 	.word	0x0800a9dc
 800a2c0:	20004074 	.word	0x20004074

0800a2c4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800a2c4:	e004      	b.n	800a2d0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800a2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ca:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	1e53      	subs	r3, r2, #1
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	2a00      	cmp	r2, #0
 800a2d6:	d1f6      	bne.n	800a2c6 <UTIL_MEM_cpy_8+0x2>
    }
}
 800a2d8:	4770      	bx	lr

0800a2da <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800a2da:	e002      	b.n	800a2e2 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800a2dc:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	1e53      	subs	r3, r2, #1
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	d1f8      	bne.n	800a2dc <UTIL_MEM_set_8+0x2>
  }
}
 800a2ea:	4770      	bx	lr

0800a2ec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	f10d 0c08 	add.w	ip, sp, #8
 800a2f4:	e90c 0006 	stmdb	ip, {r1, r2}
 800a2f8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	6002      	str	r2, [r0, #0]
 800a2fe:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800a300:	440b      	add	r3, r1
 800a302:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a304:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800a308:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a30c:	440a      	add	r2, r1
 800a30e:	b291      	uxth	r1, r2
 800a310:	b212      	sxth	r2, r2
 800a312:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 800a314:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800a318:	db04      	blt.n	800a324 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800a31a:	3301      	adds	r3, #1
 800a31c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800a31e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800a322:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 800a324:	b002      	add	sp, #8
 800a326:	b002      	add	sp, #8
 800a328:	4770      	bx	lr
	...

0800a32c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a32c:	b530      	push	{r4, r5, lr}
 800a32e:	b087      	sub	sp, #28
 800a330:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a332:	2300      	movs	r3, #0
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800a33a:	6003      	str	r3, [r0, #0]
 800a33c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a33e:	4d0b      	ldr	r5, [pc, #44]	; (800a36c <SysTimeGet+0x40>)
 800a340:	692b      	ldr	r3, [r5, #16]
 800a342:	a805      	add	r0, sp, #20
 800a344:	4798      	blx	r3
 800a346:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a348:	68eb      	ldr	r3, [r5, #12]
 800a34a:	4798      	blx	r3
 800a34c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a350:	686b      	ldr	r3, [r5, #4]
 800a352:	4798      	blx	r3
 800a354:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	aa02      	add	r2, sp, #8
 800a35e:	ca06      	ldmia	r2, {r1, r2}
 800a360:	4620      	mov	r0, r4
 800a362:	f7ff ffc3 	bl	800a2ec <SysTimeAdd>

  return sysTime;
}
 800a366:	4620      	mov	r0, r4
 800a368:	b007      	add	sp, #28
 800a36a:	bd30      	pop	{r4, r5, pc}
 800a36c:	0800ab78 	.word	0x0800ab78

0800a370 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800a370:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <UTIL_TIMER_Init+0x10>)
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <UTIL_TIMER_Init+0x14>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4798      	blx	r3
}
 800a37e:	bd08      	pop	{r3, pc}
 800a380:	2000407c 	.word	0x2000407c
 800a384:	0800ab8c 	.word	0x0800ab8c

0800a388 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800a388:	b1a8      	cbz	r0, 800a3b6 <UTIL_TIMER_Create+0x2e>
{
 800a38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38c:	4617      	mov	r7, r2
 800a38e:	461e      	mov	r6, r3
 800a390:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800a392:	b193      	cbz	r3, 800a3ba <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800a394:	2500      	movs	r5, #0
 800a396:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800a398:	4b09      	ldr	r3, [pc, #36]	; (800a3c0 <UTIL_TIMER_Create+0x38>)
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	4608      	mov	r0, r1
 800a39e:	4798      	blx	r3
 800a3a0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800a3a2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800a3a4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800a3a6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800a3a8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800a3aa:	9b06      	ldr	r3, [sp, #24]
 800a3ac:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800a3ae:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800a3b0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800a3b2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800a3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800a3b6:	2001      	movs	r0, #1
}
 800a3b8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	e7fa      	b.n	800a3b4 <UTIL_TIMER_Create+0x2c>
 800a3be:	bf00      	nop
 800a3c0:	0800ab8c 	.word	0x0800ab8c

0800a3c4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800a3c4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800a3c6:	4c03      	ldr	r4, [pc, #12]	; (800a3d4 <UTIL_TIMER_GetCurrentTime+0x10>)
 800a3c8:	69e3      	ldr	r3, [r4, #28]
 800a3ca:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800a3cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3ce:	4798      	blx	r3
}
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800ab8c 	.word	0x0800ab8c

0800a3d8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800a3dc:	4d05      	ldr	r5, [pc, #20]	; (800a3f4 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800a3de:	69eb      	ldr	r3, [r5, #28]
 800a3e0:	4798      	blx	r3
 800a3e2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800a3e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800a3ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a3ec:	1a20      	subs	r0, r4, r0
 800a3ee:	4798      	blx	r3
}
 800a3f0:	bd70      	pop	{r4, r5, r6, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800ab8c 	.word	0x0800ab8c

0800a3f8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <TimerExists+0x18>)
 800a3fa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800a3fc:	e000      	b.n	800a400 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800a3fe:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800a400:	b11b      	cbz	r3, 800a40a <TimerExists+0x12>
    if( cur == TimerObject )
 800a402:	4283      	cmp	r3, r0
 800a404:	d1fb      	bne.n	800a3fe <TimerExists+0x6>
      return true;
 800a406:	2001      	movs	r0, #1
  }
  return false;
}
 800a408:	4770      	bx	lr
  return false;
 800a40a:	2000      	movs	r0, #0
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	2000407c 	.word	0x2000407c

0800a414 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800a418:	4e09      	ldr	r6, [pc, #36]	; (800a440 <TimerSetTimeout+0x2c>)
 800a41a:	6a33      	ldr	r3, [r6, #32]
 800a41c:	4798      	blx	r3
 800a41e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800a420:	2301      	movs	r3, #1
 800a422:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800a424:	6827      	ldr	r7, [r4, #0]
 800a426:	69b6      	ldr	r6, [r6, #24]
 800a428:	47b0      	blx	r6
 800a42a:	4428      	add	r0, r5
 800a42c:	4287      	cmp	r7, r0
 800a42e:	d202      	bcs.n	800a436 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800a430:	47b0      	blx	r6
 800a432:	4405      	add	r5, r0
 800a434:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800a436:	4b02      	ldr	r3, [pc, #8]	; (800a440 <TimerSetTimeout+0x2c>)
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	4798      	blx	r3
}
 800a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a440:	0800ab8c 	.word	0x0800ab8c

0800a444 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800a444:	b368      	cbz	r0, 800a4a2 <UTIL_TIMER_Stop+0x5e>
{
 800a446:	b510      	push	{r4, lr}
 800a448:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a44a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a44e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800a450:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <UTIL_TIMER_Stop+0x64>)
 800a452:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800a454:	2301      	movs	r3, #1
 800a456:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800a458:	b1e1      	cbz	r1, 800a494 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800a45a:	2300      	movs	r3, #0
 800a45c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800a45e:	4288      	cmp	r0, r1
 800a460:	d006      	beq.n	800a470 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800a462:	460b      	mov	r3, r1
        while( cur != NULL )
 800a464:	b1b3      	cbz	r3, 800a494 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800a466:	4293      	cmp	r3, r2
 800a468:	d011      	beq.n	800a48e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800a46a:	4619      	mov	r1, r3
            cur = cur->Next;
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	e7f9      	b.n	800a464 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 800a470:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800a472:	6948      	ldr	r0, [r1, #20]
 800a474:	b120      	cbz	r0, 800a480 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800a476:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <UTIL_TIMER_Stop+0x64>)
 800a478:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800a47a:	f7ff ffcb 	bl	800a414 <TimerSetTimeout>
 800a47e:	e009      	b.n	800a494 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <UTIL_TIMER_Stop+0x68>)
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	4798      	blx	r3
            TimerListHead = NULL;
 800a486:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <UTIL_TIMER_Stop+0x64>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	e002      	b.n	800a494 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	b123      	cbz	r3, 800a49c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800a492:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a494:	f384 8810 	msr	PRIMASK, r4
}
 800a498:	2000      	movs	r0, #0
}
 800a49a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800a49c:	2300      	movs	r3, #0
 800a49e:	614b      	str	r3, [r1, #20]
 800a4a0:	e7f8      	b.n	800a494 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800a4a2:	2001      	movs	r0, #1
}
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	2000407c 	.word	0x2000407c
 800a4ac:	0800ab8c 	.word	0x0800ab8c

0800a4b0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <TimerInsertTimer+0x28>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800a4b4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800a4b6:	e001      	b.n	800a4bc <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800a4b8:	461a      	mov	r2, r3
        next = next->Next;
 800a4ba:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800a4bc:	6951      	ldr	r1, [r2, #20]
 800a4be:	b139      	cbz	r1, 800a4d0 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	f8d0 c000 	ldr.w	ip, [r0]
 800a4c6:	458c      	cmp	ip, r1
 800a4c8:	d8f6      	bhi.n	800a4b8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800a4ca:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800a4cc:	6143      	str	r3, [r0, #20]
        return;
 800a4ce:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800a4d0:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6143      	str	r3, [r0, #20]
}
 800a4d6:	4770      	bx	lr
 800a4d8:	2000407c 	.word	0x2000407c

0800a4dc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800a4dc:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800a4de:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <TimerInsertNewHeadTimer+0x18>)
 800a4e0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800a4e2:	b10b      	cbz	r3, 800a4e8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800a4e8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800a4ea:	4b02      	ldr	r3, [pc, #8]	; (800a4f4 <TimerInsertNewHeadTimer+0x18>)
 800a4ec:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800a4ee:	f7ff ff91 	bl	800a414 <TimerSetTimeout>
}
 800a4f2:	bd08      	pop	{r3, pc}
 800a4f4:	2000407c 	.word	0x2000407c

0800a4f8 <UTIL_TIMER_Start>:
{
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d036      	beq.n	800a56c <UTIL_TIMER_Start+0x74>
 800a4fe:	4604      	mov	r4, r0
 800a500:	f7ff ff7a 	bl	800a3f8 <TimerExists>
 800a504:	2800      	cmp	r0, #0
 800a506:	d134      	bne.n	800a572 <UTIL_TIMER_Start+0x7a>
 800a508:	7a65      	ldrb	r5, [r4, #9]
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	d133      	bne.n	800a576 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a50e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a512:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 800a514:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800a516:	4b19      	ldr	r3, [pc, #100]	; (800a57c <UTIL_TIMER_Start+0x84>)
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	4798      	blx	r3
    if( ticks < minValue )
 800a51c:	4287      	cmp	r7, r0
 800a51e:	d300      	bcc.n	800a522 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800a520:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800a522:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800a528:	2201      	movs	r2, #1
 800a52a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800a52c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800a52e:	4b14      	ldr	r3, [pc, #80]	; (800a580 <UTIL_TIMER_Start+0x88>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	b183      	cbz	r3, 800a556 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800a534:	4b11      	ldr	r3, [pc, #68]	; (800a57c <UTIL_TIMER_Start+0x84>)
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	4418      	add	r0, r3
 800a53e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <UTIL_TIMER_Start+0x88>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4298      	cmp	r0, r3
 800a548:	d20c      	bcs.n	800a564 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff ffc6 	bl	800a4dc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a550:	f386 8810 	msr	PRIMASK, r6
}
 800a554:	e00b      	b.n	800a56e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <UTIL_TIMER_Start+0x84>)
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800a55c:	4620      	mov	r0, r4
 800a55e:	f7ff ffbd 	bl	800a4dc <TimerInsertNewHeadTimer>
 800a562:	e7f5      	b.n	800a550 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800a564:	4620      	mov	r0, r4
 800a566:	f7ff ffa3 	bl	800a4b0 <TimerInsertTimer>
 800a56a:	e7f1      	b.n	800a550 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a56c:	2501      	movs	r5, #1
}
 800a56e:	4628      	mov	r0, r5
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800a572:	2501      	movs	r5, #1
 800a574:	e7fb      	b.n	800a56e <UTIL_TIMER_Start+0x76>
 800a576:	2501      	movs	r5, #1
 800a578:	e7f9      	b.n	800a56e <UTIL_TIMER_Start+0x76>
 800a57a:	bf00      	nop
 800a57c:	0800ab8c 	.word	0x0800ab8c
 800a580:	2000407c 	.word	0x2000407c

0800a584 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800a584:	b198      	cbz	r0, 800a5ae <UTIL_TIMER_SetPeriod+0x2a>
{
 800a586:	b510      	push	{r4, lr}
 800a588:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800a58a:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <UTIL_TIMER_SetPeriod+0x30>)
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	4608      	mov	r0, r1
 800a590:	4798      	blx	r3
 800a592:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800a594:	4620      	mov	r0, r4
 800a596:	f7ff ff2f 	bl	800a3f8 <TimerExists>
 800a59a:	b908      	cbnz	r0, 800a5a0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800a59c:	2000      	movs	r0, #0
}
 800a59e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f7ff ff4f 	bl	800a444 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f7ff ffa6 	bl	800a4f8 <UTIL_TIMER_Start>
 800a5ac:	e7f7      	b.n	800a59e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800a5ae:	2001      	movs	r0, #1
}
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	0800ab8c 	.word	0x0800ab8c

0800a5b8 <UTIL_TIMER_IRQ_Handler>:
{
 800a5b8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a5be:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800a5c0:	4c1e      	ldr	r4, [pc, #120]	; (800a63c <UTIL_TIMER_IRQ_Handler+0x84>)
 800a5c2:	6963      	ldr	r3, [r4, #20]
 800a5c4:	4798      	blx	r3
 800a5c6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800a5c8:	6923      	ldr	r3, [r4, #16]
 800a5ca:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800a5cc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800a5ce:	4b1c      	ldr	r3, [pc, #112]	; (800a640 <UTIL_TIMER_IRQ_Handler+0x88>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	b923      	cbnz	r3, 800a5de <UTIL_TIMER_IRQ_Handler+0x26>
 800a5d4:	e018      	b.n	800a608 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800a5da:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800a5dc:	b1a3      	cbz	r3, 800a608 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	42a2      	cmp	r2, r4
 800a5e2:	d9f8      	bls.n	800a5d6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 800a5e4:	1a31      	subs	r1, r6, r0
 800a5e6:	440a      	add	r2, r1
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e7f6      	b.n	800a5da <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800a5ec:	4b14      	ldr	r3, [pc, #80]	; (800a640 <UTIL_TIMER_IRQ_Handler+0x88>)
 800a5ee:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 800a5f0:	6962      	ldr	r2, [r4, #20]
 800a5f2:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800a5f8:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800a5fa:	68e3      	ldr	r3, [r4, #12]
 800a5fc:	6920      	ldr	r0, [r4, #16]
 800a5fe:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800a600:	8963      	ldrh	r3, [r4, #10]
 800a602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a606:	d012      	beq.n	800a62e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800a608:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <UTIL_TIMER_IRQ_Handler+0x88>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	b13b      	cbz	r3, 800a61e <UTIL_TIMER_IRQ_Handler+0x66>
 800a60e:	681c      	ldr	r4, [r3, #0]
 800a610:	2c00      	cmp	r4, #0
 800a612:	d0eb      	beq.n	800a5ec <UTIL_TIMER_IRQ_Handler+0x34>
 800a614:	4b09      	ldr	r3, [pc, #36]	; (800a63c <UTIL_TIMER_IRQ_Handler+0x84>)
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	4798      	blx	r3
 800a61a:	4284      	cmp	r4, r0
 800a61c:	d3e6      	bcc.n	800a5ec <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800a61e:	4b08      	ldr	r3, [pc, #32]	; (800a640 <UTIL_TIMER_IRQ_Handler+0x88>)
 800a620:	6818      	ldr	r0, [r3, #0]
 800a622:	b108      	cbz	r0, 800a628 <UTIL_TIMER_IRQ_Handler+0x70>
 800a624:	7a03      	ldrb	r3, [r0, #8]
 800a626:	b133      	cbz	r3, 800a636 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a628:	f385 8810 	msr	PRIMASK, r5
}
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800a62e:	4620      	mov	r0, r4
 800a630:	f7ff ff62 	bl	800a4f8 <UTIL_TIMER_Start>
 800a634:	e7e8      	b.n	800a608 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 800a636:	f7ff feed 	bl	800a414 <TimerSetTimeout>
 800a63a:	e7f5      	b.n	800a628 <UTIL_TIMER_IRQ_Handler+0x70>
 800a63c:	0800ab8c 	.word	0x0800ab8c
 800a640:	2000407c 	.word	0x2000407c

0800a644 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800a644:	4601      	mov	r1, r0
  int i = 0;
 800a646:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a648:	e007      	b.n	800a65a <ee_skip_atoi+0x16>
 800a64a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a64e:	1c53      	adds	r3, r2, #1
 800a650:	600b      	str	r3, [r1, #0]
 800a652:	7813      	ldrb	r3, [r2, #0]
 800a654:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a658:	3830      	subs	r0, #48	; 0x30
 800a65a:	680a      	ldr	r2, [r1, #0]
 800a65c:	7813      	ldrb	r3, [r2, #0]
 800a65e:	3b30      	subs	r3, #48	; 0x30
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b09      	cmp	r3, #9
 800a664:	d9f1      	bls.n	800a64a <ee_skip_atoi+0x6>
  return i;
}
 800a666:	4770      	bx	lr

0800a668 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800a668:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800a66c:	b093      	sub	sp, #76	; 0x4c
 800a66e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a670:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800a672:	f016 0f40 	tst.w	r6, #64	; 0x40
 800a676:	d110      	bne.n	800a69a <ee_number+0x32>
  char *dig = lower_digits;
 800a678:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800a774 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800a67c:	1e9f      	subs	r7, r3, #2
 800a67e:	2f22      	cmp	r7, #34	; 0x22
 800a680:	d875      	bhi.n	800a76e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800a682:	f016 0401 	ands.w	r4, r6, #1
 800a686:	d00b      	beq.n	800a6a0 <ee_number+0x38>
 800a688:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 800a68c:	f016 0f02 	tst.w	r6, #2
 800a690:	d00f      	beq.n	800a6b2 <ee_number+0x4a>
  {
    if (num < 0)
 800a692:	2a00      	cmp	r2, #0
 800a694:	db07      	blt.n	800a6a6 <ee_number+0x3e>
  sign = 0;
 800a696:	2700      	movs	r7, #0
 800a698:	e00c      	b.n	800a6b4 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800a69a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800a778 <ee_number+0x110>
 800a69e:	e7ed      	b.n	800a67c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800a6a0:	f04f 0e20 	mov.w	lr, #32
 800a6a4:	e7f2      	b.n	800a68c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800a6a6:	4252      	negs	r2, r2
      size--;
 800a6a8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a6aa:	3e01      	subs	r6, #1
 800a6ac:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 800a6ae:	272d      	movs	r7, #45	; 0x2d
 800a6b0:	e000      	b.n	800a6b4 <ee_number+0x4c>
  sign = 0;
 800a6b2:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 800a6b4:	bb5a      	cbnz	r2, 800a70e <ee_number+0xa6>
    tmp[i++] = '0';
 800a6b6:	2330      	movs	r3, #48	; 0x30
 800a6b8:	f88d 3004 	strb.w	r3, [sp, #4]
 800a6bc:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800a6c0:	45ac      	cmp	ip, r5
 800a6c2:	dd00      	ble.n	800a6c6 <ee_number+0x5e>
 800a6c4:	4665      	mov	r5, ip
  size -= precision;
 800a6c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a6c8:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800a6ca:	b31c      	cbz	r4, 800a714 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 800a6cc:	b11f      	cbz	r7, 800a6d6 <ee_number+0x6e>
 800a6ce:	f800 7b01 	strb.w	r7, [r0], #1
 800a6d2:	3901      	subs	r1, #1
 800a6d4:	d007      	beq.n	800a6e6 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6dc:	dd24      	ble.n	800a728 <ee_number+0xc0>
 800a6de:	f800 eb01 	strb.w	lr, [r0], #1
 800a6e2:	3901      	subs	r1, #1
 800a6e4:	d1f7      	bne.n	800a6d6 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800a6e6:	b013      	add	sp, #76	; 0x4c
 800a6e8:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800a6ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6f0:	fb03 2216 	mls	r2, r3, r6, r2
 800a6f4:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800a6f8:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 800a6fc:	446a      	add	r2, sp
 800a6fe:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800a702:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800a704:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800a708:	2a00      	cmp	r2, #0
 800a70a:	d1ef      	bne.n	800a6ec <ee_number+0x84>
 800a70c:	e7d8      	b.n	800a6c0 <ee_number+0x58>
  i = 0;
 800a70e:	f04f 0c00 	mov.w	ip, #0
 800a712:	e7f9      	b.n	800a708 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800a714:	2b00      	cmp	r3, #0
 800a716:	f103 33ff 	add.w	r3, r3, #4294967295
 800a71a:	ddd7      	ble.n	800a6cc <ee_number+0x64>
 800a71c:	2220      	movs	r2, #32
 800a71e:	f800 2b01 	strb.w	r2, [r0], #1
 800a722:	3901      	subs	r1, #1
 800a724:	d1f6      	bne.n	800a714 <ee_number+0xac>
 800a726:	e7de      	b.n	800a6e6 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800a728:	4565      	cmp	r5, ip
 800a72a:	f105 35ff 	add.w	r5, r5, #4294967295
 800a72e:	dd05      	ble.n	800a73c <ee_number+0xd4>
 800a730:	2230      	movs	r2, #48	; 0x30
 800a732:	f800 2b01 	strb.w	r2, [r0], #1
 800a736:	3901      	subs	r1, #1
 800a738:	d1f6      	bne.n	800a728 <ee_number+0xc0>
 800a73a:	e7d4      	b.n	800a6e6 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800a73c:	4662      	mov	r2, ip
 800a73e:	2a00      	cmp	r2, #0
 800a740:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a744:	dd09      	ble.n	800a75a <ee_number+0xf2>
 800a746:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 800a74a:	446a      	add	r2, sp
 800a74c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800a750:	f800 2b01 	strb.w	r2, [r0], #1
 800a754:	3901      	subs	r1, #1
 800a756:	d1f1      	bne.n	800a73c <ee_number+0xd4>
 800a758:	e7c5      	b.n	800a6e6 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a760:	ddc1      	ble.n	800a6e6 <ee_number+0x7e>
 800a762:	2220      	movs	r2, #32
 800a764:	f800 2b01 	strb.w	r2, [r0], #1
 800a768:	3901      	subs	r1, #1
 800a76a:	d1f6      	bne.n	800a75a <ee_number+0xf2>
 800a76c:	e7bb      	b.n	800a6e6 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800a76e:	2000      	movs	r0, #0
 800a770:	e7b9      	b.n	800a6e6 <ee_number+0x7e>
 800a772:	bf00      	nop
 800a774:	0800b388 	.word	0x0800b388
 800a778:	0800b360 	.word	0x0800b360

0800a77c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800a77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a780:	b087      	sub	sp, #28
 800a782:	9205      	str	r2, [sp, #20]
 800a784:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800a786:	1e0f      	subs	r7, r1, #0
 800a788:	f340 80b8 	ble.w	800a8fc <tiny_vsnprintf_like+0x180>
 800a78c:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a78e:	4604      	mov	r4, r0
 800a790:	e004      	b.n	800a79c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800a792:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800a796:	9b05      	ldr	r3, [sp, #20]
 800a798:	3301      	adds	r3, #1
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	9905      	ldr	r1, [sp, #20]
 800a79e:	780a      	ldrb	r2, [r1, #0]
 800a7a0:	b922      	cbnz	r2, 800a7ac <tiny_vsnprintf_like+0x30>
 800a7a2:	1ba3      	subs	r3, r4, r6
 800a7a4:	1e78      	subs	r0, r7, #1
 800a7a6:	4283      	cmp	r3, r0
 800a7a8:	f2c0 80a2 	blt.w	800a8f0 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 800a7ac:	1ba3      	subs	r3, r4, r6
 800a7ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800a7b2:	4543      	cmp	r3, r8
 800a7b4:	f280 809c 	bge.w	800a8f0 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800a7b8:	2a25      	cmp	r2, #37	; 0x25
 800a7ba:	d1ea      	bne.n	800a792 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800a7bc:	1c4b      	adds	r3, r1, #1
 800a7be:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800a7c0:	784b      	ldrb	r3, [r1, #1]
 800a7c2:	2b30      	cmp	r3, #48	; 0x30
 800a7c4:	d020      	beq.n	800a808 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800a7c6:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800a7ca:	3b30      	subs	r3, #48	; 0x30
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d91d      	bls.n	800a80e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800a7d2:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	781a      	ldrb	r2, [r3, #0]
 800a7da:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 800a7de:	2b20      	cmp	r3, #32
 800a7e0:	d867      	bhi.n	800a8b2 <tiny_vsnprintf_like+0x136>
 800a7e2:	e8df f003 	tbb	[pc, r3]
 800a7e6:	664a      	.short	0x664a
 800a7e8:	66666666 	.word	0x66666666
 800a7ec:	66666666 	.word	0x66666666
 800a7f0:	66621e66 	.word	0x66621e66
 800a7f4:	62666666 	.word	0x62666666
 800a7f8:	66666666 	.word	0x66666666
 800a7fc:	66666666 	.word	0x66666666
 800a800:	19662866 	.word	0x19662866
 800a804:	6666      	.short	0x6666
 800a806:	7c          	.byte	0x7c
 800a807:	00          	.byte	0x00
      flags |= ZEROPAD;
 800a808:	f04f 0901 	mov.w	r9, #1
 800a80c:	e7dd      	b.n	800a7ca <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 800a80e:	a805      	add	r0, sp, #20
 800a810:	f7ff ff18 	bl	800a644 <ee_skip_atoi>
 800a814:	4605      	mov	r5, r0
 800a816:	e7de      	b.n	800a7d6 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800a818:	230a      	movs	r3, #10
 800a81a:	e031      	b.n	800a880 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800a81c:	2320      	movs	r3, #32
 800a81e:	f804 3b01 	strb.w	r3, [r4], #1
 800a822:	3d01      	subs	r5, #1
 800a824:	2d00      	cmp	r5, #0
 800a826:	dcf9      	bgt.n	800a81c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	1d1a      	adds	r2, r3, #4
 800a82c:	9204      	str	r2, [sp, #16]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800a834:	e7af      	b.n	800a796 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	9204      	str	r2, [sp, #16]
 800a83c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	d003      	beq.n	800a84e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 800a846:	4640      	mov	r0, r8
 800a848:	f7f5 fc9a 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800a84c:	e006      	b.n	800a85c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800a84e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800a900 <tiny_vsnprintf_like+0x184>
 800a852:	e7f8      	b.n	800a846 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 800a854:	2220      	movs	r2, #32
 800a856:	f804 2b01 	strb.w	r2, [r4], #1
 800a85a:	461d      	mov	r5, r3
 800a85c:	1e6b      	subs	r3, r5, #1
 800a85e:	4285      	cmp	r5, r0
 800a860:	dcf8      	bgt.n	800a854 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800a862:	2200      	movs	r2, #0
 800a864:	e006      	b.n	800a874 <tiny_vsnprintf_like+0xf8>
 800a866:	4643      	mov	r3, r8
 800a868:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a86c:	f804 1b01 	strb.w	r1, [r4], #1
 800a870:	3201      	adds	r2, #1
 800a872:	4698      	mov	r8, r3
 800a874:	4282      	cmp	r2, r0
 800a876:	dbf6      	blt.n	800a866 <tiny_vsnprintf_like+0xea>
 800a878:	e78d      	b.n	800a796 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800a87a:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 800a87e:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800a880:	f019 0f02 	tst.w	r9, #2
 800a884:	d02f      	beq.n	800a8e6 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 800a886:	9a04      	ldr	r2, [sp, #16]
 800a888:	1d11      	adds	r1, r2, #4
 800a88a:	9104      	str	r1, [sp, #16]
 800a88c:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800a88e:	1ba1      	subs	r1, r4, r6
 800a890:	f8cd 9008 	str.w	r9, [sp, #8]
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	9001      	str	r0, [sp, #4]
 800a89a:	9500      	str	r5, [sp, #0]
 800a89c:	eba8 0101 	sub.w	r1, r8, r1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7ff fee1 	bl	800a668 <ee_number>
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	e775      	b.n	800a796 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800a8aa:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	e7e6      	b.n	800a880 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800a8b2:	2a25      	cmp	r2, #37	; 0x25
 800a8b4:	d002      	beq.n	800a8bc <tiny_vsnprintf_like+0x140>
 800a8b6:	2325      	movs	r3, #37	; 0x25
 800a8b8:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800a8bc:	1ba3      	subs	r3, r4, r6
 800a8be:	4598      	cmp	r8, r3
 800a8c0:	dd0f      	ble.n	800a8e2 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	b13a      	cbz	r2, 800a8d8 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800a8c8:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800a8cc:	1ba3      	subs	r3, r4, r6
 800a8ce:	4598      	cmp	r8, r3
 800a8d0:	f73f af61 	bgt.w	800a796 <tiny_vsnprintf_like+0x1a>
    base = 10;
 800a8d4:	230a      	movs	r3, #10
    if (qualifier == 'l')
 800a8d6:	e7d3      	b.n	800a880 <tiny_vsnprintf_like+0x104>
          --fmt;
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	e7f6      	b.n	800a8cc <tiny_vsnprintf_like+0x150>
        base = 16;
 800a8de:	2310      	movs	r3, #16
 800a8e0:	e7ce      	b.n	800a880 <tiny_vsnprintf_like+0x104>
    base = 10;
 800a8e2:	230a      	movs	r3, #10
 800a8e4:	e7cc      	b.n	800a880 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800a8e6:	9a04      	ldr	r2, [sp, #16]
 800a8e8:	1d11      	adds	r1, r2, #4
 800a8ea:	9104      	str	r1, [sp, #16]
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	e7ce      	b.n	800a88e <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800a8f4:	1ba0      	subs	r0, r4, r6
}
 800a8f6:	b007      	add	sp, #28
 800a8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7fa      	b.n	800a8f6 <tiny_vsnprintf_like+0x17a>
 800a900:	0800b3b0 	.word	0x0800b3b0

0800a904 <__libc_init_array>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	4d0d      	ldr	r5, [pc, #52]	; (800a93c <__libc_init_array+0x38>)
 800a908:	4c0d      	ldr	r4, [pc, #52]	; (800a940 <__libc_init_array+0x3c>)
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	2600      	movs	r6, #0
 800a910:	42a6      	cmp	r6, r4
 800a912:	d109      	bne.n	800a928 <__libc_init_array+0x24>
 800a914:	4d0b      	ldr	r5, [pc, #44]	; (800a944 <__libc_init_array+0x40>)
 800a916:	4c0c      	ldr	r4, [pc, #48]	; (800a948 <__libc_init_array+0x44>)
 800a918:	f000 f82e 	bl	800a978 <_init>
 800a91c:	1b64      	subs	r4, r4, r5
 800a91e:	10a4      	asrs	r4, r4, #2
 800a920:	2600      	movs	r6, #0
 800a922:	42a6      	cmp	r6, r4
 800a924:	d105      	bne.n	800a932 <__libc_init_array+0x2e>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	f855 3b04 	ldr.w	r3, [r5], #4
 800a92c:	4798      	blx	r3
 800a92e:	3601      	adds	r6, #1
 800a930:	e7ee      	b.n	800a910 <__libc_init_array+0xc>
 800a932:	f855 3b04 	ldr.w	r3, [r5], #4
 800a936:	4798      	blx	r3
 800a938:	3601      	adds	r6, #1
 800a93a:	e7f2      	b.n	800a922 <__libc_init_array+0x1e>
 800a93c:	0800b3c0 	.word	0x0800b3c0
 800a940:	0800b3c0 	.word	0x0800b3c0
 800a944:	0800b3c0 	.word	0x0800b3c0
 800a948:	0800b3c4 	.word	0x0800b3c4

0800a94c <memcpy>:
 800a94c:	440a      	add	r2, r1
 800a94e:	4291      	cmp	r1, r2
 800a950:	f100 33ff 	add.w	r3, r0, #4294967295
 800a954:	d100      	bne.n	800a958 <memcpy+0xc>
 800a956:	4770      	bx	lr
 800a958:	b510      	push	{r4, lr}
 800a95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a962:	4291      	cmp	r1, r2
 800a964:	d1f9      	bne.n	800a95a <memcpy+0xe>
 800a966:	bd10      	pop	{r4, pc}

0800a968 <memset>:
 800a968:	4402      	add	r2, r0
 800a96a:	4603      	mov	r3, r0
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d100      	bne.n	800a972 <memset+0xa>
 800a970:	4770      	bx	lr
 800a972:	f803 1b01 	strb.w	r1, [r3], #1
 800a976:	e7f9      	b.n	800a96c <memset+0x4>

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
