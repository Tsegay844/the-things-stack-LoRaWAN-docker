
Monitoring_System_LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001148  080156e0  080156e0  000256e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016828  08016828  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08016828  08016828  00026828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016830  08016830  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016830  08016830  00026830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08016838  08016838  00026838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08016840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000ef0  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00004118  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20004230  20004230  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004230  20004230  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   0006aa82  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000db95  00000000  00000000  000a90c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001fcf1  00000000  00000000  000b6c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003740  00000000  00000000  000d6950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002d55  00000000  00000000  000da090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002ed54  00000000  00000000  000dcde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005dfa2  00000000  00000000  0010bb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000ee1c9  00000000  00000000  00169adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00009d90  00000000  00000000  00257ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000009b  00000000  00000000  00261a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	080156c8 	.word	0x080156c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	080156c8 	.word	0x080156c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2iz>:
 8000b24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30f      	bcc.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_f2iz+0x30>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	bf18      	it	ne
 8000b4a:	4240      	negne	r0, r0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2iz+0x3a>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d105      	bne.n	8000b6a <__aeabi_f2iz+0x46>
 8000b5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b62:	bf08      	it	eq
 8000b64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b84:	f000 b970 	b.w	8000e68 <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	9e08      	ldr	r6, [sp, #32]
 8000ba6:	460d      	mov	r5, r1
 8000ba8:	4604      	mov	r4, r0
 8000baa:	460f      	mov	r7, r1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14a      	bne.n	8000c46 <__udivmoddi4+0xa6>
 8000bb0:	428a      	cmp	r2, r1
 8000bb2:	4694      	mov	ip, r2
 8000bb4:	d965      	bls.n	8000c82 <__udivmoddi4+0xe2>
 8000bb6:	fab2 f382 	clz	r3, r2
 8000bba:	b143      	cbz	r3, 8000bce <__udivmoddi4+0x2e>
 8000bbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc0:	f1c3 0220 	rsb	r2, r3, #32
 8000bc4:	409f      	lsls	r7, r3
 8000bc6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bca:	4317      	orrs	r7, r2
 8000bcc:	409c      	lsls	r4, r3
 8000bce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bd2:	fa1f f58c 	uxth.w	r5, ip
 8000bd6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bda:	0c22      	lsrs	r2, r4, #16
 8000bdc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be4:	fb01 f005 	mul.w	r0, r1, r5
 8000be8:	4290      	cmp	r0, r2
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x62>
 8000bec:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bf4:	f080 811b 	bcs.w	8000e2e <__udivmoddi4+0x28e>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f240 8118 	bls.w	8000e2e <__udivmoddi4+0x28e>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4462      	add	r2, ip
 8000c02:	1a12      	subs	r2, r2, r0
 8000c04:	b2a4      	uxth	r4, r4
 8000c06:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c0a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c12:	fb00 f505 	mul.w	r5, r0, r5
 8000c16:	42a5      	cmp	r5, r4
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x90>
 8000c1a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c22:	f080 8106 	bcs.w	8000e32 <__udivmoddi4+0x292>
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	f240 8103 	bls.w	8000e32 <__udivmoddi4+0x292>
 8000c2c:	4464      	add	r4, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11e      	cbz	r6, 8000c42 <__udivmoddi4+0xa2>
 8000c3a:	40dc      	lsrs	r4, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0xbc>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	f000 80ec 	beq.w	8000e28 <__udivmoddi4+0x288>
 8000c50:	2100      	movs	r1, #0
 8000c52:	e9c6 0500 	strd	r0, r5, [r6]
 8000c56:	4608      	mov	r0, r1
 8000c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5c:	fab3 f183 	clz	r1, r3
 8000c60:	2900      	cmp	r1, #0
 8000c62:	d149      	bne.n	8000cf8 <__udivmoddi4+0x158>
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	d302      	bcc.n	8000c6e <__udivmoddi4+0xce>
 8000c68:	4282      	cmp	r2, r0
 8000c6a:	f200 80f7 	bhi.w	8000e5c <__udivmoddi4+0x2bc>
 8000c6e:	1a84      	subs	r4, r0, r2
 8000c70:	eb65 0203 	sbc.w	r2, r5, r3
 8000c74:	2001      	movs	r0, #1
 8000c76:	4617      	mov	r7, r2
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d0e2      	beq.n	8000c42 <__udivmoddi4+0xa2>
 8000c7c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c80:	e7df      	b.n	8000c42 <__udivmoddi4+0xa2>
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xe6>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f382 	clz	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 808f 	bne.w	8000dae <__udivmoddi4+0x20e>
 8000c90:	1a8a      	subs	r2, r1, r2
 8000c92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca0:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca4:	0c22      	lsrs	r2, r4, #16
 8000ca6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000caa:	fb0e f005 	mul.w	r0, lr, r5
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x124>
 8000cb2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x122>
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	f200 80ca 	bhi.w	8000e56 <__udivmoddi4+0x2b6>
 8000cc2:	4645      	mov	r5, r8
 8000cc4:	1a12      	subs	r2, r2, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ccc:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd8:	45a6      	cmp	lr, r4
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x14e>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x14c>
 8000ce6:	45a6      	cmp	lr, r4
 8000ce8:	f200 80ba 	bhi.w	8000e60 <__udivmoddi4+0x2c0>
 8000cec:	4610      	mov	r0, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf6:	e79f      	b.n	8000c38 <__udivmoddi4+0x98>
 8000cf8:	f1c1 0720 	rsb	r7, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d06:	fa05 f401 	lsl.w	r4, r5, r1
 8000d0a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0e:	40fd      	lsrs	r5, r7
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fa00 f901 	lsl.w	r9, r0, r1
 8000d16:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d22:	0c1c      	lsrs	r4, r3, #16
 8000d24:	fb00 5518 	mls	r5, r0, r8, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d90b      	bls.n	8000d50 <__udivmoddi4+0x1b0>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d40:	f080 8087 	bcs.w	8000e52 <__udivmoddi4+0x2b2>
 8000d44:	42a5      	cmp	r5, r4
 8000d46:	f240 8084 	bls.w	8000e52 <__udivmoddi4+0x2b2>
 8000d4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4e:	4464      	add	r4, ip
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	b29d      	uxth	r5, r3
 8000d54:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d58:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d60:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x1da>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000d70:	d26b      	bcs.n	8000e4a <__udivmoddi4+0x2aa>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	d969      	bls.n	8000e4a <__udivmoddi4+0x2aa>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d7e:	fba0 8302 	umull	r8, r3, r0, r2
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	429c      	cmp	r4, r3
 8000d88:	46c6      	mov	lr, r8
 8000d8a:	461d      	mov	r5, r3
 8000d8c:	d355      	bcc.n	8000e3a <__udivmoddi4+0x29a>
 8000d8e:	d052      	beq.n	8000e36 <__udivmoddi4+0x296>
 8000d90:	b156      	cbz	r6, 8000da8 <__udivmoddi4+0x208>
 8000d92:	ebb9 030e 	subs.w	r3, r9, lr
 8000d96:	eb64 0405 	sbc.w	r4, r4, r5
 8000d9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	40cc      	lsrs	r4, r1
 8000da2:	431f      	orrs	r7, r3
 8000da4:	e9c6 7400 	strd	r7, r4, [r6]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c3 0120 	rsb	r1, r3, #32
 8000db2:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db6:	fa20 f201 	lsr.w	r2, r0, r1
 8000dba:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbe:	409d      	lsls	r5, r3
 8000dc0:	432a      	orrs	r2, r5
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dce:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd2:	0c11      	lsrs	r1, r2, #16
 8000dd4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd8:	fb00 f50e 	mul.w	r5, r0, lr
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	fa04 f403 	lsl.w	r4, r4, r3
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x256>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dec:	d22f      	bcs.n	8000e4e <__udivmoddi4+0x2ae>
 8000dee:	428d      	cmp	r5, r1
 8000df0:	d92d      	bls.n	8000e4e <__udivmoddi4+0x2ae>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	1b49      	subs	r1, r1, r5
 8000df8:	b292      	uxth	r2, r2
 8000dfa:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfe:	fb07 1115 	mls	r1, r7, r5, r1
 8000e02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e06:	fb05 f10e 	mul.w	r1, r5, lr
 8000e0a:	4291      	cmp	r1, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x280>
 8000e0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e12:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e16:	d216      	bcs.n	8000e46 <__udivmoddi4+0x2a6>
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d914      	bls.n	8000e46 <__udivmoddi4+0x2a6>
 8000e1c:	3d02      	subs	r5, #2
 8000e1e:	4462      	add	r2, ip
 8000e20:	1a52      	subs	r2, r2, r1
 8000e22:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e26:	e739      	b.n	8000c9c <__udivmoddi4+0xfc>
 8000e28:	4631      	mov	r1, r6
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e709      	b.n	8000c42 <__udivmoddi4+0xa2>
 8000e2e:	4639      	mov	r1, r7
 8000e30:	e6e7      	b.n	8000c02 <__udivmoddi4+0x62>
 8000e32:	4610      	mov	r0, r2
 8000e34:	e6fc      	b.n	8000c30 <__udivmoddi4+0x90>
 8000e36:	45c1      	cmp	r9, r8
 8000e38:	d2aa      	bcs.n	8000d90 <__udivmoddi4+0x1f0>
 8000e3a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3e:	eb63 050c 	sbc.w	r5, r3, ip
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7a4      	b.n	8000d90 <__udivmoddi4+0x1f0>
 8000e46:	4645      	mov	r5, r8
 8000e48:	e7ea      	b.n	8000e20 <__udivmoddi4+0x280>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e795      	b.n	8000d7a <__udivmoddi4+0x1da>
 8000e4e:	4640      	mov	r0, r8
 8000e50:	e7d1      	b.n	8000df6 <__udivmoddi4+0x256>
 8000e52:	46d0      	mov	r8, sl
 8000e54:	e77c      	b.n	8000d50 <__udivmoddi4+0x1b0>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	e733      	b.n	8000cc4 <__udivmoddi4+0x124>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xd8>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	e743      	b.n	8000cee <__udivmoddi4+0x14e>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e6c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e6e:	4813      	ldr	r0, [pc, #76]	; (8000ebc <MX_ADC_Init+0x50>)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_ADC_Init+0x54>)
 8000e72:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e78:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e80:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	2204      	movs	r2, #4
 8000e84:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e86:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e88:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e8a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e94:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e98:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ea6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ea8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eac:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eae:	f002 f915 	bl	80030dc <HAL_ADC_Init>
 8000eb2:	b900      	cbnz	r0, 8000eb6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000eb4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000eb6:	f000 fc29 	bl	800170c <Error_Handler>
}
 8000eba:	e7fb      	b.n	8000eb4 <MX_ADC_Init+0x48>
 8000ebc:	20000134 	.word	0x20000134
 8000ec0:	40012400 	.word	0x40012400

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ec4:	6802      	ldr	r2, [r0, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_ADC_MspInit+0x28>)
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d000      	beq.n	8000ece <HAL_ADC_MspInit+0xa>
 8000ecc:	4770      	bx	lr
{
 8000ece:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ee4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000ee6:	b002      	add	sp, #8
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40012400 	.word	0x40012400

08000ef0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ef0:	6802      	ldr	r2, [r0, #0]
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_ADC_MspDeInit+0x18>)
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d000      	beq.n	8000efa <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ef8:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efe:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f04:	6613      	str	r3, [r2, #96]	; 0x60
 8000f06:	e7f7      	b.n	8000ef8 <HAL_ADC_MspDeInit+0x8>
 8000f08:	40012400 	.word	0x40012400

08000f0c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f0c:	b530      	push	{r4, r5, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	2300      	movs	r3, #0
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f1a:	f7ff ffa7 	bl	8000e6c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f1e:	4816      	ldr	r0, [pc, #88]	; (8000f78 <ADC_ReadChannels+0x6c>)
 8000f20:	f002 fd14 	bl	800394c <HAL_ADCEx_Calibration_Start>
 8000f24:	b9f8      	cbnz	r0, 8000f66 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f26:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f2c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f2e:	a901      	add	r1, sp, #4
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <ADC_ReadChannels+0x6c>)
 8000f32:	f002 fa4d 	bl	80033d0 <HAL_ADC_ConfigChannel>
 8000f36:	b9c8      	cbnz	r0, 8000f6c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <ADC_ReadChannels+0x6c>)
 8000f3a:	f002 fc0b 	bl	8003754 <HAL_ADC_Start>
 8000f3e:	b9c0      	cbnz	r0, 8000f72 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f40:	4c0d      	ldr	r4, [pc, #52]	; (8000f78 <ADC_ReadChannels+0x6c>)
 8000f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f46:	4620      	mov	r0, r4
 8000f48:	f002 f9e0 	bl	800330c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f002 fcdd 	bl	800390c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f52:	4620      	mov	r0, r4
 8000f54:	f002 fa39 	bl	80033ca <HAL_ADC_GetValue>
 8000f58:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f002 fc76 	bl	800384c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f60:	4628      	mov	r0, r5
 8000f62:	b005      	add	sp, #20
 8000f64:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f66:	f000 fbd1 	bl	800170c <Error_Handler>
 8000f6a:	e7dc      	b.n	8000f26 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000f6c:	f000 fbce 	bl	800170c <Error_Handler>
 8000f70:	e7e2      	b.n	8000f38 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000f72:	f000 fbcb 	bl	800170c <Error_Handler>
 8000f76:	e7e3      	b.n	8000f40 <ADC_ReadChannels+0x34>
 8000f78:	20000134 	.word	0x20000134

08000f7c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <SYS_InitMeasurement+0x8>)
 8000f7e:	4a02      	ldr	r2, [pc, #8]	; (8000f88 <SYS_InitMeasurement+0xc>)
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	4770      	bx	lr
 8000f84:	20000134 	.word	0x20000134
 8000f88:	40012400 	.word	0x40012400

08000f8c <SYS_GetBatteryLevel>:
{
 8000f8c:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <SYS_GetBatteryLevel+0x38>)
 8000f90:	f7ff ffbc 	bl	8000f0c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f94:	b1a0      	cbz	r0, 8000fc0 <SYS_GetBatteryLevel+0x34>
 8000f96:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <SYS_GetBatteryLevel+0x3c>)
 8000f9a:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8000f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa2:	4290      	cmp	r0, r2
 8000fa4:	d007      	beq.n	8000fb6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fa6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000faa:	fb02 f000 	mul.w	r0, r2, r0
 8000fae:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb2:	b280      	uxth	r0, r0
 8000fb4:	e005      	b.n	8000fc2 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <SYS_GetBatteryLevel+0x40>)
 8000fb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fbc:	b280      	uxth	r0, r0
 8000fbe:	e000      	b.n	8000fc2 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000fc0:	2000      	movs	r0, #0
}
 8000fc2:	bd08      	pop	{r3, pc}
 8000fc4:	b4002000 	.word	0xb4002000
 8000fc8:	1fff7500 	.word	0x1fff7500
 8000fcc:	004c08d8 	.word	0x004c08d8

08000fd0 <SYS_GetTemperatureLevel>:
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fda:	f7ff ffd7 	bl	8000f8c <SYS_GetBatteryLevel>
 8000fde:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fe0:	4821      	ldr	r0, [pc, #132]	; (8001068 <SYS_GetTemperatureLevel+0x98>)
 8000fe2:	f7ff ff93 	bl	8000f0c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <SYS_GetTemperatureLevel+0x9c>)
 8000fe8:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8000fec:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	d01d      	beq.n	8001030 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000ff4:	fb00 f304 	mul.w	r3, r0, r4
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	481d      	ldr	r0, [pc, #116]	; (8001070 <SYS_GetTemperatureLevel+0xa0>)
 8000ffc:	fba0 0303 	umull	r0, r3, r0, r3
 8001000:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	fb00 f303 	mul.w	r3, r0, r3
 800100a:	1a52      	subs	r2, r2, r1
 800100c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001010:	331e      	adds	r3, #30
 8001012:	b21b      	sxth	r3, r3
 8001014:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001018:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800101c:	b21b      	sxth	r3, r3
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21b      	sxth	r3, r3
 8001022:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001026:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800102a:	b200      	sxth	r0, r0
 800102c:	b002      	add	sp, #8
 800102e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001030:	fb04 f000 	mul.w	r0, r4, r0
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <SYS_GetTemperatureLevel+0xa4>)
 8001036:	fba3 2300 	umull	r2, r3, r3, r0
 800103a:	1ac4      	subs	r4, r0, r3
 800103c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001040:	0adb      	lsrs	r3, r3, #11
 8001042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800104e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <SYS_GetTemperatureLevel+0xa8>)
 8001054:	fb82 1203 	smull	r1, r2, r2, r3
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800105e:	331e      	adds	r3, #30
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001066:	e7d7      	b.n	8001018 <SYS_GetTemperatureLevel+0x48>
 8001068:	b0001000 	.word	0xb0001000
 800106c:	1fff7500 	.word	0x1fff7500
 8001070:	09ee009f 	.word	0x09ee009f
 8001074:	00100101 	.word	0x00100101
 8001078:	68db8bad 	.word	0x68db8bad

0800107c <WakeUpTimer_Cb>:
/* USER CODE BEGIN Application */
static void WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
  UNUSED(context);
}
 800107c:	4770      	bx	lr

0800107e <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 800107e:	4770      	bx	lr

08001080 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 8001080:	4770      	bx	lr

08001082 <StartDefaultTask>:
{
 8001082:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 8001084:	f001 f8a4 	bl	80021d0 <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	2101      	movs	r1, #1
 800108e:	4608      	mov	r0, r1
 8001090:	f007 fad0 	bl	8008634 <osThreadFlagsWait>
  for(;;)
 8001094:	e7f8      	b.n	8001088 <StartDefaultTask+0x6>
	...

08001098 <PreSleepProcessing>:
{
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f7ff ffef 	bl	8001080 <app_freertos_tick_to_ms>
 80010a2:	4601      	mov	r1, r0
  UTIL_TIMER_SetPeriod(&WakeUpTimer, WakeUpTimer_timeOut_ms);
 80010a4:	4d0a      	ldr	r5, [pc, #40]	; (80010d0 <PreSleepProcessing+0x38>)
 80010a6:	4628      	mov	r0, r5
 80010a8:	f014 f892 	bl	80151d0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&WakeUpTimer);
 80010ac:	4628      	mov	r0, r5
 80010ae:	f014 f849 	bl	8015144 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 80010b2:	f013 ffad 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <PreSleepProcessing+0x3c>)
 80010b8:	6018      	str	r0, [r3, #0]
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80010ba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80010be:	6913      	ldr	r3, [r2, #16]
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6113      	str	r3, [r2, #16]
  UTIL_LPM_EnterLowPower();
 80010c6:	f013 fe5d 	bl	8014d84 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	6023      	str	r3, [r4, #0]
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	2000019c 	.word	0x2000019c
 80010d4:	20000198 	.word	0x20000198

080010d8 <PostSleepProcessing>:
{
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <PostSleepProcessing+0x58>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f013 ffa1 	bl	8015024 <UTIL_TIMER_GetElapsedTime>
 80010e2:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <PostSleepProcessing+0x5c>)
 80010e6:	f013 ffd3 	bl	8015090 <UTIL_TIMER_Stop>
  if (portNVIC_SYSTICK_CURRENT_VALUE_REG > (SleepDuration * CORE_TICK_RATE))
 80010ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010ee:	699a      	ldr	r2, [r3, #24]
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <PostSleepProcessing+0x60>)
 80010f2:	681c      	ldr	r4, [r3, #0]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <PostSleepProcessing+0x64>)
 80010f6:	fba3 3404 	umull	r3, r4, r3, r4
 80010fa:	09a4      	lsrs	r4, r4, #6
 80010fc:	fb05 f304 	mul.w	r3, r5, r4
 8001100:	429a      	cmp	r2, r3
 8001102:	d911      	bls.n	8001128 <PostSleepProcessing+0x50>
    portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG - (app_freertos_ms_to_tick(SleepDuration) * CORE_TICK_RATE);
 8001104:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
 8001108:	69be      	ldr	r6, [r7, #24]
 800110a:	4628      	mov	r0, r5
 800110c:	f7ff ffb7 	bl	800107e <app_freertos_ms_to_tick>
 8001110:	fb00 6614 	mls	r6, r0, r4, r6
 8001114:	617e      	str	r6, [r7, #20]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001116:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	f042 0201 	orr.w	r2, r2, #1
 8001124:	611a      	str	r2, [r3, #16]
}
 8001126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    portNVIC_SYSTICK_LOAD_REG = CORE_TICK_RATE;
 8001128:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800112c:	615c      	str	r4, [r3, #20]
 800112e:	e7f2      	b.n	8001116 <PostSleepProcessing+0x3e>
 8001130:	20000198 	.word	0x20000198
 8001134:	2000019c 	.word	0x2000019c
 8001138:	20000074 	.word	0x20000074
 800113c:	10624dd3 	.word	0x10624dd3

08001140 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001140:	b510      	push	{r4, lr}
 8001142:	b082      	sub	sp, #8
  UTIL_TIMER_Create(&WakeUpTimer, 0, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 8001144:	2400      	movs	r4, #0
 8001146:	9400      	str	r4, [sp, #0]
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_FREERTOS_Init+0x28>)
 800114a:	4622      	mov	r2, r4
 800114c:	4621      	mov	r1, r4
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_FREERTOS_Init+0x2c>)
 8001150:	f013 ff40 	bl	8014fd4 <UTIL_TIMER_Create>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <MX_FREERTOS_Init+0x30>)
 8001156:	4621      	mov	r1, r4
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_FREERTOS_Init+0x34>)
 800115a:	f007 f9b7 	bl	80084cc <osThreadNew>
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_FREERTOS_Init+0x38>)
 8001160:	6018      	str	r0, [r3, #0]
}
 8001162:	b002      	add	sp, #8
 8001164:	bd10      	pop	{r4, pc}
 8001166:	bf00      	nop
 8001168:	0800107d 	.word	0x0800107d
 800116c:	2000019c 	.word	0x2000019c
 8001170:	08015748 	.word	0x08015748
 8001174:	08001083 	.word	0x08001083
 8001178:	200001b4 	.word	0x200001b4

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800117c:	b500      	push	{lr}
 800117e:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001186:	f042 0204 	orr.w	r2, r2, #4
 800118a:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800118c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800118e:	f002 0204 	and.w	r2, r2, #4
 8001192:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001194:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800119e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011a6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2107      	movs	r1, #7
 80011ac:	200f      	movs	r0, #15
 80011ae:	f002 fc7f 	bl	8003ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f002 fcb4 	bl	8003b20 <HAL_NVIC_EnableIRQ>

}
 80011b8:	b003      	add	sp, #12
 80011ba:	f85d fb04 	ldr.w	pc, [sp], #4

080011be <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80011be:	2300      	movs	r3, #0
 80011c0:	e001      	b.n	80011c6 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80011c2:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 80011c4:	3308      	adds	r3, #8
 80011c6:	428b      	cmp	r3, r1
 80011c8:	d20a      	bcs.n	80011e0 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 80011ca:	6842      	ldr	r2, [r0, #4]
 80011cc:	f8d0 c000 	ldr.w	ip, [r0]
 80011d0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80011d4:	bf08      	it	eq
 80011d6:	f1bc 3fff 	cmpeq.w	ip, #4294967295	; 0xffffffff
 80011da:	d0f2      	beq.n	80011c2 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 80011dc:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 80011de:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 80011e0:	2000      	movs	r0, #0
 80011e2:	4770      	bx	lr

080011e4 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 80011e4:	b130      	cbz	r0, 80011f4 <FLASH_IF_INT_Read+0x10>
{
 80011e6:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 80011e8:	b139      	cbz	r1, 80011fa <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f013 fdee 	bl	8014dcc <UTIL_MEM_cpy_8>
  return ret_status;
 80011f0:	2000      	movs	r0, #0
}
 80011f2:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 80011f4:	f06f 0005 	mvn.w	r0, #5
}
 80011f8:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 80011fa:	f06f 0005 	mvn.w	r0, #5
 80011fe:	e7f8      	b.n	80011f2 <FLASH_IF_INT_Read+0xe>

08001200 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001200:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001202:	f002 ff5f 	bl	80040c4 <HAL_FLASH_Unlock>
 8001206:	b978      	cbnz	r0, 8001228 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <FLASH_IF_INT_Clear_Error+0x30>)
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001216:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001218:	f002 ff6c 	bl	80040f4 <HAL_FLASH_Lock>
 800121c:	b908      	cbnz	r0, 8001222 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800121e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001220:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001222:	f06f 0004 	mvn.w	r0, #4
 8001226:	e7fb      	b.n	8001220 <FLASH_IF_INT_Clear_Error+0x20>
 8001228:	f06f 0004 	mvn.w	r0, #4
 800122c:	e7f8      	b.n	8001220 <FLASH_IF_INT_Clear_Error+0x20>
 800122e:	bf00      	nop
 8001230:	58004000 	.word	0x58004000

08001234 <FLASH_IF_INT_Erase>:
{
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800123c:	2800      	cmp	r0, #0
 800123e:	d039      	beq.n	80012b4 <FLASH_IF_INT_Erase+0x80>
 8001240:	460e      	mov	r6, r1
 8001242:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001244:	f7ff ffdc 	bl	8001200 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001248:	4605      	mov	r5, r0
 800124a:	b110      	cbz	r0, 8001252 <FLASH_IF_INT_Erase+0x1e>
}
 800124c:	4628      	mov	r0, r5
 800124e:	b004      	add	sp, #16
 8001250:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001252:	f002 ff37 	bl	80040c4 <HAL_FLASH_Unlock>
 8001256:	bb80      	cbnz	r0, 80012ba <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001258:	2302      	movs	r3, #2
 800125a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800125c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001260:	4817      	ldr	r0, [pc, #92]	; (80012c0 <FLASH_IF_INT_Erase+0x8c>)
 8001262:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <FLASH_IF_INT_Erase+0x90>)
 8001268:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 800126c:	fbb3 fcf1 	udiv	ip, r3, r1
 8001270:	fb01 331c 	mls	r3, r1, ip, r3
 8001274:	0adb      	lsrs	r3, r3, #11
 8001276:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001278:	19a1      	adds	r1, r4, r6
 800127a:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800127e:	3901      	subs	r1, #1
 8001280:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001284:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001288:	fbb1 f0f2 	udiv	r0, r1, r2
 800128c:	fb02 1110 	mls	r1, r2, r0, r1
 8001290:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001294:	3301      	adds	r3, #1
 8001296:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001298:	a903      	add	r1, sp, #12
 800129a:	4668      	mov	r0, sp
 800129c:	f002 fff6 	bl	800428c <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80012a0:	b118      	cbz	r0, 80012aa <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012a2:	2802      	cmp	r0, #2
 80012a4:	d004      	beq.n	80012b0 <FLASH_IF_INT_Erase+0x7c>
 80012a6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80012aa:	f002 ff23 	bl	80040f4 <HAL_FLASH_Lock>
 80012ae:	e7cd      	b.n	800124c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012b0:	2501      	movs	r5, #1
 80012b2:	e7fa      	b.n	80012aa <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80012b4:	f06f 0505 	mvn.w	r5, #5
 80012b8:	e7c8      	b.n	800124c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80012ba:	f06f 0504 	mvn.w	r5, #4
 80012be:	e7c5      	b.n	800124c <FLASH_IF_INT_Erase+0x18>
 80012c0:	1fff7000 	.word	0x1fff7000
 80012c4:	03fffc00 	.word	0x03fffc00

080012c8 <FLASH_IF_INT_Write>:
{
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	b089      	sub	sp, #36	; 0x24
 80012ce:	9003      	str	r0, [sp, #12]
 80012d0:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 80012d2:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80012d4:	2800      	cmp	r0, #0
 80012d6:	f000 80a9 	beq.w	800142c <FLASH_IF_INT_Write+0x164>
 80012da:	4683      	mov	fp, r0
 80012dc:	2900      	cmp	r1, #0
 80012de:	f000 80a9 	beq.w	8001434 <FLASH_IF_INT_Write+0x16c>
 80012e2:	f012 0f07 	tst.w	r2, #7
 80012e6:	f040 80a9 	bne.w	800143c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80012ea:	f010 0307 	ands.w	r3, r0, #7
 80012ee:	9305      	str	r3, [sp, #20]
 80012f0:	f040 80a8 	bne.w	8001444 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 80012f4:	f7ff ff84 	bl	8001200 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80012f8:	9002      	str	r0, [sp, #8]
 80012fa:	b118      	cbz	r0, 8001304 <FLASH_IF_INT_Write+0x3c>
}
 80012fc:	9802      	ldr	r0, [sp, #8]
 80012fe:	b009      	add	sp, #36	; 0x24
 8001300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001304:	f002 fede 	bl	80040c4 <HAL_FLASH_Unlock>
 8001308:	2800      	cmp	r0, #0
 800130a:	f040 809f 	bne.w	800144c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800130e:	9c03      	ldr	r4, [sp, #12]
 8001310:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <FLASH_IF_INT_Write+0x18c>)
 8001316:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800131a:	494f      	ldr	r1, [pc, #316]	; (8001458 <FLASH_IF_INT_Write+0x190>)
 800131c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001320:	fbb2 f3f1 	udiv	r3, r2, r1
 8001324:	fb01 2213 	mls	r2, r1, r3, r2
 8001328:	0ad3      	lsrs	r3, r2, #11
 800132a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800132c:	9b04      	ldr	r3, [sp, #16]
 800132e:	18e3      	adds	r3, r4, r3
 8001330:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001334:	3b01      	subs	r3, #1
 8001336:	fbb3 f0f1 	udiv	r0, r3, r1
 800133a:	fb01 3310 	mls	r3, r1, r0, r3
 800133e:	0adb      	lsrs	r3, r3, #11
 8001340:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001344:	3301      	adds	r3, #1
 8001346:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001348:	2b01      	cmp	r3, #1
 800134a:	d906      	bls.n	800135a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800134c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001350:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001354:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001358:	e02f      	b.n	80013ba <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800135a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800135e:	e7f9      	b.n	8001354 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8001360:	46c8      	mov	r8, r9
          current_source = uSource;
 8001362:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001364:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001366:	9d05      	ldr	r5, [sp, #20]
 8001368:	4545      	cmp	r5, r8
 800136a:	d215      	bcs.n	8001398 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800136c:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 800136e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001372:	4621      	mov	r1, r4
 8001374:	2001      	movs	r0, #1
 8001376:	f002 ff01 	bl	800417c <HAL_FLASH_Program>
 800137a:	b950      	cbnz	r0, 8001392 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	6862      	ldr	r2, [r4, #4]
 8001380:	59e9      	ldr	r1, [r5, r7]
 8001382:	6873      	ldr	r3, [r6, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	bf08      	it	eq
 8001388:	4288      	cmpeq	r0, r1
 800138a:	d141      	bne.n	8001410 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 800138c:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800138e:	3508      	adds	r5, #8
 8001390:	e7ea      	b.n	8001368 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001392:	f06f 0303 	mvn.w	r3, #3
 8001396:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001398:	9b02      	ldr	r3, [sp, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d13f      	bne.n	800141e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 800139e:	44cb      	add	fp, r9
        uSource += length;
 80013a0:	9b01      	ldr	r3, [sp, #4]
 80013a2:	444b      	add	r3, r9
 80013a4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80013a6:	9b04      	ldr	r3, [sp, #16]
 80013a8:	eba3 0909 	sub.w	r9, r3, r9
 80013ac:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80013b0:	bf28      	it	cs
 80013b2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80013b6:	f10a 0a01 	add.w	sl, sl, #1
 80013ba:	9b06      	ldr	r3, [sp, #24]
 80013bc:	9a07      	ldr	r2, [sp, #28]
 80013be:	4413      	add	r3, r2
 80013c0:	4553      	cmp	r3, sl
 80013c2:	d92c      	bls.n	800141e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80013c4:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 80013c8:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80013ca:	4649      	mov	r1, r9
 80013cc:	9803      	ldr	r0, [sp, #12]
 80013ce:	f7ff fef6 	bl	80011be <FLASH_IF_INT_IsEmpty>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d0c4      	beq.n	8001360 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <FLASH_IF_INT_Write+0x194>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	b1e8      	cbz	r0, 8001418 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80013dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e0:	4621      	mov	r1, r4
 80013e2:	f7ff feff 	bl	80011e4 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <FLASH_IF_INT_Write+0x194>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f3cb 000a 	ubfx	r0, fp, #0, #11
 80013ee:	fa1f f289 	uxth.w	r2, r9
 80013f2:	9901      	ldr	r1, [sp, #4]
 80013f4:	4418      	add	r0, r3
 80013f6:	f013 fce9 	bl	8014dcc <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80013fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff ff18 	bl	8001234 <FLASH_IF_INT_Erase>
 8001404:	b970      	cbnz	r0, 8001424 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <FLASH_IF_INT_Write+0x194>)
 8001408:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800140a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800140e:	e7aa      	b.n	8001366 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001410:	f06f 0303 	mvn.w	r3, #3
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	e7bf      	b.n	8001398 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001418:	f06f 0305 	mvn.w	r3, #5
 800141c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800141e:	f002 fe69 	bl	80040f4 <HAL_FLASH_Lock>
 8001422:	e76b      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001424:	f06f 0301 	mvn.w	r3, #1
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	e7f8      	b.n	800141e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800142c:	f06f 0305 	mvn.w	r3, #5
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	e763      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
 8001434:	f06f 0305 	mvn.w	r3, #5
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	e75f      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
 800143c:	f06f 0305 	mvn.w	r3, #5
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	e75b      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
 8001444:	f06f 0305 	mvn.w	r3, #5
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	e757      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800144c:	f06f 0304 	mvn.w	r3, #4
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	e753      	b.n	80012fc <FLASH_IF_INT_Write+0x34>
 8001454:	1fff7000 	.word	0x1fff7000
 8001458:	03fffc00 	.word	0x03fffc00
 800145c:	200001b8 	.word	0x200001b8

08001460 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <FLASH_IF_Init+0x8>)
 8001462:	6018      	str	r0, [r3, #0]
}
 8001464:	2000      	movs	r0, #0
 8001466:	4770      	bx	lr
 8001468:	200001b8 	.word	0x200001b8

0800146c <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800146c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001470:	d30e      	bcc.n	8001490 <FLASH_IF_Write+0x24>
{
 8001472:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <FLASH_IF_Write+0x30>)
 8001476:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <FLASH_IF_Write+0x34>)
 800147c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001480:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001484:	3b01      	subs	r3, #1
 8001486:	4298      	cmp	r0, r3
 8001488:	d805      	bhi.n	8001496 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800148a:	f7ff ff1d 	bl	80012c8 <FLASH_IF_INT_Write>
}
 800148e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001494:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149a:	e7f8      	b.n	800148e <FLASH_IF_Write+0x22>
 800149c:	1fff7000 	.word	0x1fff7000
 80014a0:	03fffc00 	.word	0x03fffc00

080014a4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014a4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80014a8:	d30e      	bcc.n	80014c8 <FLASH_IF_Read+0x24>
{
 80014aa:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <FLASH_IF_Read+0x30>)
 80014ae:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <FLASH_IF_Read+0x34>)
 80014b4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014b8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014bc:	3b01      	subs	r3, #1
 80014be:	4299      	cmp	r1, r3
 80014c0:	d805      	bhi.n	80014ce <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80014c2:	f7ff fe8f 	bl	80011e4 <FLASH_IF_INT_Read>
}
 80014c6:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014cc:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d2:	e7f8      	b.n	80014c6 <FLASH_IF_Read+0x22>
 80014d4:	1fff7000 	.word	0x1fff7000
 80014d8:	03fffc00 	.word	0x03fffc00

080014dc <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014dc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80014e0:	d30e      	bcc.n	8001500 <FLASH_IF_Erase+0x24>
{
 80014e2:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <FLASH_IF_Erase+0x30>)
 80014e6:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <FLASH_IF_Erase+0x34>)
 80014ec:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80014f0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4298      	cmp	r0, r3
 80014f8:	d805      	bhi.n	8001506 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014fa:	f7ff fe9b 	bl	8001234 <FLASH_IF_INT_Erase>
}
 80014fe:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001504:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800150a:	e7f8      	b.n	80014fe <FLASH_IF_Erase+0x22>
 800150c:	1fff7000 	.word	0x1fff7000
 8001510:	03fffc00 	.word	0x03fffc00

08001514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001518:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	2400      	movs	r4, #0
 800151c:	9403      	str	r4, [sp, #12]
 800151e:	9404      	str	r4, [sp, #16]
 8001520:	9405      	str	r4, [sp, #20]
 8001522:	9406      	str	r4, [sp, #24]
 8001524:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152c:	f042 0202 	orr.w	r2, r2, #2
 8001530:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001534:	f002 0202 	and.w	r2, r2, #2
 8001538:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800153a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800153c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153e:	f042 0204 	orr.w	r2, r2, #4
 8001542:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001546:	f002 0204 	and.w	r2, r2, #4
 800154a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800154c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800154e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800155e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001560:	4e26      	ldr	r6, [pc, #152]	; (80015fc <MX_GPIO_Init+0xe8>)
 8001562:	4622      	mov	r2, r4
 8001564:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001568:	4630      	mov	r0, r6
 800156a:	f003 f81f 	bl	80045ac <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800156e:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001572:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2501      	movs	r5, #1
 8001576:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157a:	2302      	movs	r3, #2
 800157c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	a903      	add	r1, sp, #12
 8001580:	4630      	mov	r0, r6
 8001582:	f002 fec3 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001586:	f04f 0803 	mov.w	r8, #3
 800158a:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158e:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001592:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	a903      	add	r1, sp, #12
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f002 feb6 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	a903      	add	r1, sp, #12
 80015b0:	4630      	mov	r0, r6
 80015b2:	f002 feab 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ba:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015be:	a903      	add	r1, sp, #12
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <MX_GPIO_Init+0xec>)
 80015c2:	f002 fea3 	bl	800430c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80015c6:	4622      	mov	r2, r4
 80015c8:	2105      	movs	r1, #5
 80015ca:	2006      	movs	r0, #6
 80015cc:	f002 fa70 	bl	8003ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015d0:	2006      	movs	r0, #6
 80015d2:	f002 faa5 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80015d6:	4622      	mov	r2, r4
 80015d8:	2105      	movs	r1, #5
 80015da:	2007      	movs	r0, #7
 80015dc:	f002 fa68 	bl	8003ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015e0:	2007      	movs	r0, #7
 80015e2:	f002 fa9d 	bl	8003b20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015e6:	4622      	mov	r2, r4
 80015e8:	2105      	movs	r1, #5
 80015ea:	2016      	movs	r0, #22
 80015ec:	f002 fa60 	bl	8003ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015f0:	2016      	movs	r0, #22
 80015f2:	f002 fa95 	bl	8003b20 <HAL_NVIC_EnableIRQ>

}
 80015f6:	b008      	add	sp, #32
 80015f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fc:	48000400 	.word	0x48000400
 8001600:	48000800 	.word	0x48000800

08001604 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001604:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_I2C1_Init+0x4c>)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x50>)
 800160a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x54>)
 800160e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	2201      	movs	r2, #1
 8001616:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800161a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800161c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001620:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001622:	f003 f9e0 	bl	80049e6 <HAL_I2C_Init>
 8001626:	b950      	cbnz	r0, 800163e <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x4c>)
 800162c:	f003 ff9b 	bl	8005566 <HAL_I2CEx_ConfigAnalogFilter>
 8001630:	b940      	cbnz	r0, 8001644 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001632:	2100      	movs	r1, #0
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_I2C1_Init+0x4c>)
 8001636:	f003 ffc4 	bl	80055c2 <HAL_I2CEx_ConfigDigitalFilter>
 800163a:	b930      	cbnz	r0, 800164a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800163c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800163e:	f000 f865 	bl	800170c <Error_Handler>
 8001642:	e7f1      	b.n	8001628 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001644:	f000 f862 	bl	800170c <Error_Handler>
 8001648:	e7f3      	b.n	8001632 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800164a:	f000 f85f 	bl	800170c <Error_Handler>
}
 800164e:	e7f5      	b.n	800163c <MX_I2C1_Init+0x38>
 8001650:	200001bc 	.word	0x200001bc
 8001654:	40005400 	.word	0x40005400
 8001658:	20303e5d 	.word	0x20303e5d

0800165c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800165c:	b510      	push	{r4, lr}
 800165e:	b096      	sub	sp, #88	; 0x58
 8001660:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	2100      	movs	r1, #0
 8001664:	9111      	str	r1, [sp, #68]	; 0x44
 8001666:	9112      	str	r1, [sp, #72]	; 0x48
 8001668:	9113      	str	r1, [sp, #76]	; 0x4c
 800166a:	9114      	str	r1, [sp, #80]	; 0x50
 800166c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166e:	2238      	movs	r2, #56	; 0x38
 8001670:	a803      	add	r0, sp, #12
 8001672:	f013 ff6f 	bl	8015554 <memset>
  if(i2cHandle->Instance==I2C1)
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_I2C_MspInit+0xa8>)
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800167e:	b016      	add	sp, #88	; 0x58
 8001680:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001682:	2340      	movs	r3, #64	; 0x40
 8001684:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001686:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800168a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	a803      	add	r0, sp, #12
 800168e:	f004 fde5 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8001692:	2800      	cmp	r0, #0
 8001694:	d132      	bne.n	80016fc <HAL_I2C_MspInit+0xa0>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001696:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800169a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80016aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016b0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ba:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	a911      	add	r1, sp, #68	; 0x44
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <HAL_I2C_MspInit+0xac>)
 80016c4:	f002 fe22 	bl	800430c <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80016d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2105      	movs	r1, #5
 80016de:	201e      	movs	r0, #30
 80016e0:	f002 f9e6 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016e4:	201e      	movs	r0, #30
 80016e6:	f002 fa1b 	bl	8003b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2105      	movs	r1, #5
 80016ee:	201f      	movs	r0, #31
 80016f0:	f002 f9de 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016f4:	201f      	movs	r0, #31
 80016f6:	f002 fa13 	bl	8003b20 <HAL_NVIC_EnableIRQ>
}
 80016fa:	e7c0      	b.n	800167e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80016fc:	f000 f806 	bl	800170c <Error_Handler>
 8001700:	e7c9      	b.n	8001696 <HAL_I2C_MspInit+0x3a>
 8001702:	bf00      	nop
 8001704:	40005400 	.word	0x40005400
 8001708:	48000400 	.word	0x48000400

0800170c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170e:	e7fe      	b.n	800170e <Error_Handler+0x2>

08001710 <SystemClock_Config>:
{
 8001710:	b510      	push	{r4, lr}
 8001712:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001714:	2248      	movs	r2, #72	; 0x48
 8001716:	2100      	movs	r1, #0
 8001718:	a808      	add	r0, sp, #32
 800171a:	f013 ff1b 	bl	8015554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171e:	2400      	movs	r4, #0
 8001720:	9401      	str	r4, [sp, #4]
 8001722:	9402      	str	r4, [sp, #8]
 8001724:	9403      	str	r4, [sp, #12]
 8001726:	9404      	str	r4, [sp, #16]
 8001728:	9405      	str	r4, [sp, #20]
 800172a:	9406      	str	r4, [sp, #24]
 800172c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800172e:	f003 ff75 	bl	800561c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800173a:	f023 0318 	bic.w	r3, r3, #24
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800174c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800175c:	2324      	movs	r3, #36	; 0x24
 800175e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001760:	2381      	movs	r3, #129	; 0x81
 8001762:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001764:	2301      	movs	r3, #1
 8001766:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001768:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800176a:	23b0      	movs	r3, #176	; 0xb0
 800176c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800176e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	a808      	add	r0, sp, #32
 8001772:	f004 f8ed 	bl	8005950 <HAL_RCC_OscConfig>
 8001776:	b970      	cbnz	r0, 8001796 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001778:	234f      	movs	r3, #79	; 0x4f
 800177a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800177c:	2300      	movs	r3, #0
 800177e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001782:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001786:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001788:	2102      	movs	r1, #2
 800178a:	a801      	add	r0, sp, #4
 800178c:	f004 fc12 	bl	8005fb4 <HAL_RCC_ClockConfig>
 8001790:	b918      	cbnz	r0, 800179a <SystemClock_Config+0x8a>
}
 8001792:	b01a      	add	sp, #104	; 0x68
 8001794:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001796:	f7ff ffb9 	bl	800170c <Error_Handler>
    Error_Handler();
 800179a:	f7ff ffb7 	bl	800170c <Error_Handler>

0800179e <main>:
{
 800179e:	b508      	push	{r3, lr}
  HAL_Init();
 80017a0:	f001 fc4e 	bl	8003040 <HAL_Init>
  SystemClock_Config();
 80017a4:	f7ff ffb4 	bl	8001710 <SystemClock_Config>
  MX_GPIO_Init();
 80017a8:	f7ff feb4 	bl	8001514 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ac:	f7ff ff2a 	bl	8001604 <MX_I2C1_Init>
  osKernelInitialize();
 80017b0:	f006 fe4a 	bl	8008448 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017b4:	f7ff fcc4 	bl	8001140 <MX_FREERTOS_Init>
  osKernelStart();
 80017b8:	f006 fe64 	bl	8008484 <osKernelStart>
  while (1)
 80017bc:	e7fe      	b.n	80017bc <main+0x1e>
	...

080017c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017c0:	b500      	push	{lr}
 80017c2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80017c4:	222c      	movs	r2, #44	; 0x2c
 80017c6:	2100      	movs	r1, #0
 80017c8:	a801      	add	r0, sp, #4
 80017ca:	f013 fec3 	bl	8015554 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017ce:	4819      	ldr	r0, [pc, #100]	; (8001834 <MX_RTC_Init+0x74>)
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_RTC_Init+0x78>)
 80017d2:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80017d4:	231f      	movs	r3, #31
 80017d6:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017dc:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017de:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e4:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017e6:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80017e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ee:	f004 ff45 	bl	800667c <HAL_RTC_Init>
 80017f2:	b9a8      	cbnz	r0, 8001820 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80017f4:	480f      	ldr	r0, [pc, #60]	; (8001834 <MX_RTC_Init+0x74>)
 80017f6:	f005 f883 	bl	8006900 <HAL_RTCEx_SetSSRU_IT>
 80017fa:	b9a0      	cbnz	r0, 8001826 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80017fc:	2200      	movs	r2, #0
 80017fe:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001800:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001802:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001804:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001808:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800180a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800180e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001810:	a901      	add	r1, sp, #4
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_RTC_Init+0x74>)
 8001814:	f004 ff98 	bl	8006748 <HAL_RTC_SetAlarm_IT>
 8001818:	b940      	cbnz	r0, 800182c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800181a:	b00d      	add	sp, #52	; 0x34
 800181c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001820:	f7ff ff74 	bl	800170c <Error_Handler>
 8001824:	e7e6      	b.n	80017f4 <MX_RTC_Init+0x34>
    Error_Handler();
 8001826:	f7ff ff71 	bl	800170c <Error_Handler>
 800182a:	e7e7      	b.n	80017fc <MX_RTC_Init+0x3c>
    Error_Handler();
 800182c:	f7ff ff6e 	bl	800170c <Error_Handler>
}
 8001830:	e7f3      	b.n	800181a <MX_RTC_Init+0x5a>
 8001832:	bf00      	nop
 8001834:	20000210 	.word	0x20000210
 8001838:	40002800 	.word	0x40002800

0800183c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800183c:	b510      	push	{r4, lr}
 800183e:	b090      	sub	sp, #64	; 0x40
 8001840:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001842:	2238      	movs	r2, #56	; 0x38
 8001844:	2100      	movs	r1, #0
 8001846:	a802      	add	r0, sp, #8
 8001848:	f013 fe84 	bl	8015554 <memset>
  if(rtcHandle->Instance==RTC)
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_RTC_MspInit+0x7c>)
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001854:	b010      	add	sp, #64	; 0x40
 8001856:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800185e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001862:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	a802      	add	r0, sp, #8
 8001866:	f004 fcf9 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 800186a:	bb08      	cbnz	r0, 80018b0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001874:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800187c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001882:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800188c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2105      	movs	r1, #5
 8001892:	2002      	movs	r0, #2
 8001894:	f002 f90c 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001898:	2002      	movs	r0, #2
 800189a:	f002 f941 	bl	8003b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2105      	movs	r1, #5
 80018a2:	202a      	movs	r0, #42	; 0x2a
 80018a4:	f002 f904 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018a8:	202a      	movs	r0, #42	; 0x2a
 80018aa:	f002 f939 	bl	8003b20 <HAL_NVIC_EnableIRQ>
}
 80018ae:	e7d1      	b.n	8001854 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80018b0:	f7ff ff2c 	bl	800170c <Error_Handler>
 80018b4:	e7da      	b.n	800186c <HAL_RTC_MspInit+0x30>
 80018b6:	bf00      	nop
 80018b8:	40002800 	.word	0x40002800

080018bc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80018bc:	4770      	bx	lr

080018be <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80018be:	4770      	bx	lr

080018c0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80018c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80018c2:	f001 fbd3 	bl	800306c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80018c6:	2001      	movs	r0, #1
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <PWR_EnterStopMode+0x14>)
 80018ca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80018ce:	f003 ff09 	bl	80056e4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80018d2:	bd08      	pop	{r3, pc}
 80018d4:	58000400 	.word	0x58000400

080018d8 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80018d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80018da:	f001 fbce 	bl	800307a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80018de:	bd08      	pop	{r3, pc}

080018e0 <PWR_ExitStopMode>:
{
 80018e0:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80018e2:	f001 fbca 	bl	800307a <HAL_ResumeTick>
  vcom_Resume();
 80018e6:	f000 fc33 	bl	8002150 <vcom_Resume>
}
 80018ea:	bd08      	pop	{r3, pc}

080018ec <PWR_EnterSleepMode>:
{
 80018ec:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80018ee:	f001 fbbd 	bl	800306c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80018f2:	2101      	movs	r1, #1
 80018f4:	2000      	movs	r0, #0
 80018f6:	f003 fe99 	bl	800562c <HAL_PWR_EnterSLEEPMode>
}
 80018fa:	bd08      	pop	{r3, pc}

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	210f      	movs	r1, #15
 8001902:	f06f 0001 	mvn.w	r0, #1
 8001906:	f002 f8d3 	bl	8003ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bd08      	pop	{r3, pc}

0800190c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler>

0800190e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler>

08001910 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler>

08001912 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler>

08001914 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <UsageFault_Handler>

08001916 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	4770      	bx	lr

08001918 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 800191c:	f005 f81c 	bl	8006958 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001920:	bd08      	pop	{r3, pc}
 8001922:	bf00      	nop
 8001924:	20000210 	.word	0x20000210

08001928 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800192a:	2001      	movs	r0, #1
 800192c:	f002 fe4c 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001930:	bd08      	pop	{r3, pc}

08001932 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001932:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001934:	2002      	movs	r0, #2
 8001936:	f002 fe47 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800193a:	bd08      	pop	{r3, pc}

0800193c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800193c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800193e:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA1_Channel5_IRQHandler+0xc>)
 8001940:	f002 fb0c 	bl	8003f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop
 8001948:	2000025c 	.word	0x2000025c

0800194c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800194c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800194e:	2040      	movs	r0, #64	; 0x40
 8001950:	f002 fe3a 	bl	80045c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001954:	bd08      	pop	{r3, pc}
	...

08001958 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800195a:	4802      	ldr	r0, [pc, #8]	; (8001964 <I2C1_EV_IRQHandler+0xc>)
 800195c:	f003 faf6 	bl	8004f4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001960:	bd08      	pop	{r3, pc}
 8001962:	bf00      	nop
 8001964:	200001bc 	.word	0x200001bc

08001968 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800196a:	4802      	ldr	r0, [pc, #8]	; (8001974 <I2C1_ER_IRQHandler+0xc>)
 800196c:	f003 fdb9 	bl	80054e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001970:	bd08      	pop	{r3, pc}
 8001972:	bf00      	nop
 8001974:	200001bc 	.word	0x200001bc

08001978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800197a:	4802      	ldr	r0, [pc, #8]	; (8001984 <USART2_IRQHandler+0xc>)
 800197c:	f005 fcaa 	bl	80072d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001980:	bd08      	pop	{r3, pc}
 8001982:	bf00      	nop
 8001984:	200002bc 	.word	0x200002bc

08001988 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001988:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800198a:	4802      	ldr	r0, [pc, #8]	; (8001994 <RTC_Alarm_IRQHandler+0xc>)
 800198c:	f004 fdf0 	bl	8006570 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001990:	bd08      	pop	{r3, pc}
 8001992:	bf00      	nop
 8001994:	20000210 	.word	0x20000210

08001998 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <SUBGHZ_Radio_IRQHandler+0xc>)
 800199c:	f005 fa90 	bl	8006ec0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop
 80019a4:	20000248 	.word	0x20000248

080019a8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019a8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_SUBGHZ_Init+0x18>)
 80019ac:	2308      	movs	r3, #8
 80019ae:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019b0:	f005 f808 	bl	80069c4 <HAL_SUBGHZ_Init>
 80019b4:	b900      	cbnz	r0, 80019b8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019b8:	f7ff fea8 	bl	800170c <Error_Handler>
}
 80019bc:	e7fb      	b.n	80019b6 <MX_SUBGHZ_Init+0xe>
 80019be:	bf00      	nop
 80019c0:	20000248 	.word	0x20000248

080019c4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019c4:	b500      	push	{lr}
 80019c6:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80019d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	2032      	movs	r0, #50	; 0x32
 80019e4:	f002 f864 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019e8:	2032      	movs	r0, #50	; 0x32
 80019ea:	f002 f899 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019ee:	b003      	add	sp, #12
 80019f0:	f85d fb04 	ldr.w	pc, [sp], #4

080019f4 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80019f4:	b40c      	push	{r2, r3}
 80019f6:	b500      	push	{lr}
 80019f8:	b083      	sub	sp, #12
 80019fa:	ab04      	add	r3, sp, #16
 80019fc:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a00:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a02:	f013 fce3 	bl	80153cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a06:	b003      	add	sp, #12
 8001a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a0c:	b002      	add	sp, #8
 8001a0e:	4770      	bx	lr

08001a10 <TimestampNow>:
{
 8001a10:	b530      	push	{r4, r5, lr}
 8001a12:	b085      	sub	sp, #20
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001a18:	a802      	add	r0, sp, #8
 8001a1a:	f013 fa4b 	bl	8014eb4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a1e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	9b02      	ldr	r3, [sp, #8]
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <TimestampNow+0x2c>)
 8001a28:	2110      	movs	r1, #16
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff ffe2 	bl	80019f4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fba5 	bl	8000180 <strlen>
 8001a36:	8028      	strh	r0, [r5, #0]
}
 8001a38:	b005      	add	sp, #20
 8001a3a:	bd30      	pop	{r4, r5, pc}
 8001a3c:	08015784 	.word	0x08015784

08001a40 <SystemApp_Init>:
{
 8001a40:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a4c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001a4e:	f013 fab5 	bl	8014fbc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a52:	2401      	movs	r4, #1
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <SystemApp_Init+0x4c>)
 8001a56:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001a58:	f000 f8b8 	bl	8001bcc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001a5c:	f013 f82c 	bl	8014ab8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <SystemApp_Init+0x50>)
 8001a62:	f013 f843 	bl	8014aec <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <SystemApp_Init+0x54>)
 8001a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a6c:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f013 f842 	bl	8014af8 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001a74:	f7ff fa82 	bl	8000f7c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001a78:	f000 f908 	bl	8001c8c <EnvSensors_Init>
  UTIL_LPM_Init();
 8001a7c:	f013 f94c 	bl	8014d18 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a80:	4621      	mov	r1, r4
 8001a82:	4620      	mov	r0, r4
 8001a84:	f013 f968 	bl	8014d58 <UTIL_LPM_SetOffMode>
}
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000254 	.word	0x20000254
 8001a90:	08001a11 	.word	0x08001a11
 8001a94:	58004000 	.word	0x58004000

08001a98 <GetBatteryLevel>:
{
 8001a98:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a9a:	f7ff fa77 	bl	8000f8c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001a9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001aa2:	4298      	cmp	r0, r3
 8001aa4:	d80d      	bhi.n	8001ac2 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001aa6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001aaa:	d30c      	bcc.n	8001ac6 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001aac:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001ab0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001ab4:	0040      	lsls	r0, r0, #1
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <GetBatteryLevel+0x34>)
 8001ab8:	fba3 3000 	umull	r3, r0, r3, r0
 8001abc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001ac0:	e000      	b.n	8001ac4 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001ac2:	20fe      	movs	r0, #254	; 0xfe
}
 8001ac4:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	e7fc      	b.n	8001ac4 <GetBatteryLevel+0x2c>
 8001aca:	bf00      	nop
 8001acc:	1b4e81b5 	.word	0x1b4e81b5

08001ad0 <GetTemperatureLevel>:
{
 8001ad0:	b500      	push	{lr}
 8001ad2:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001ad4:	4668      	mov	r0, sp
 8001ad6:	f000 f8bd 	bl	8001c54 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001ada:	9801      	ldr	r0, [sp, #4]
 8001adc:	f7ff f822 	bl	8000b24 <__aeabi_f2iz>
}
 8001ae0:	b200      	sxth	r0, r0
 8001ae2:	b007      	add	sp, #28
 8001ae4:	f85d fb04 	ldr.w	pc, [sp], #4

08001ae8 <GetUniqueId>:
{
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <GetUniqueId+0x68>)
 8001aee:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af6:	d013      	beq.n	8001b20 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001af8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001afa:	0a1a      	lsrs	r2, r3, #8
 8001afc:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001afe:	0c1a      	lsrs	r2, r3, #16
 8001b00:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b02:	0e1b      	lsrs	r3, r3, #24
 8001b04:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <GetUniqueId+0x68>)
 8001b08:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001b0c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b0e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001b12:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001b14:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001b16:	0c1a      	lsrs	r2, r3, #16
 8001b18:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	7003      	strb	r3, [r0, #0]
}
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b20:	f001 fab2 	bl	8003088 <HAL_GetUIDw0>
 8001b24:	4605      	mov	r5, r0
 8001b26:	f001 fabb 	bl	80030a0 <HAL_GetUIDw2>
 8001b2a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b2c:	f001 fab2 	bl	8003094 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001b30:	0e2b      	lsrs	r3, r5, #24
 8001b32:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001b34:	0c2b      	lsrs	r3, r5, #16
 8001b36:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001b38:	0a2b      	lsrs	r3, r5, #8
 8001b3a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001b3c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001b3e:	0e03      	lsrs	r3, r0, #24
 8001b40:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001b42:	0c03      	lsrs	r3, r0, #16
 8001b44:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001b46:	0a03      	lsrs	r3, r0, #8
 8001b48:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001b4a:	7020      	strb	r0, [r4, #0]
 8001b4c:	e7e7      	b.n	8001b1e <GetUniqueId+0x36>
 8001b4e:	bf00      	nop
 8001b50:	1fff7000 	.word	0x1fff7000

08001b54 <GetDevAddr>:
{
 8001b54:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <GetDevAddr+0x2c>)
 8001b58:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001b5c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b62:	d000      	beq.n	8001b66 <GetDevAddr+0x12>
}
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b68:	f001 fa8e 	bl	8003088 <HAL_GetUIDw0>
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	f001 fa91 	bl	8003094 <HAL_GetUIDw1>
 8001b72:	4045      	eors	r5, r0
 8001b74:	f001 fa94 	bl	80030a0 <HAL_GetUIDw2>
 8001b78:	4045      	eors	r5, r0
 8001b7a:	6025      	str	r5, [r4, #0]
}
 8001b7c:	e7f2      	b.n	8001b64 <GetDevAddr+0x10>
 8001b7e:	bf00      	nop
 8001b80:	1fff7000 	.word	0x1fff7000

08001b84 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001b84:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f013 f8cf 	bl	8014d2c <UTIL_LPM_SetStopMode>
}
 8001b8e:	bd08      	pop	{r3, pc}

08001b90 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001b90:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b92:	2100      	movs	r1, #0
 8001b94:	2002      	movs	r0, #2
 8001b96:	f013 f8c9 	bl	8014d2c <UTIL_LPM_SetStopMode>
}
 8001b9a:	bd08      	pop	{r3, pc}

08001b9c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ba0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b90b      	cbnz	r3, 8001bac <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001ba8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001baa:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001bac:	f000 f89a 	bl	8001ce4 <TIMER_IF_GetTimerValue>
 8001bb0:	e7fb      	b.n	8001baa <HAL_GetTick+0xa>
 8001bb2:	bf00      	nop
 8001bb4:	20000254 	.word	0x20000254

08001bb8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bb8:	b500      	push	{lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001bbe:	9801      	ldr	r0, [sp, #4]
 8001bc0:	f000 f976 	bl	8001eb0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001bc4:	b003      	add	sp, #12
 8001bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001bcc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001bd0:	f001 fa6c 	bl	80030ac <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001bd4:	f001 fa72 	bl	80030bc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001bd8:	f001 fa78 	bl	80030cc <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001bdc:	2400      	movs	r4, #0
 8001bde:	9403      	str	r4, [sp, #12]
 8001be0:	9404      	str	r4, [sp, #16]
 8001be2:	9405      	str	r4, [sp, #20]
 8001be4:	9406      	str	r4, [sp, #24]
 8001be6:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf6:	f042 0202 	orr.w	r2, r2, #2
 8001bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfe:	f002 0202 	and.w	r2, r2, #2
 8001c02:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c04:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c08:	f042 0202 	orr.w	r2, r2, #2
 8001c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c16:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001c18:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001c1c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001c1e:	4d0c      	ldr	r5, [pc, #48]	; (8001c50 <DBG_Init+0x84>)
 8001c20:	a903      	add	r1, sp, #12
 8001c22:	4628      	mov	r0, r5
 8001c24:	f002 fb72 	bl	800430c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001c28:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001c2c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001c2e:	a903      	add	r1, sp, #12
 8001c30:	4628      	mov	r0, r5
 8001c32:	f002 fb6b 	bl	800430c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001c36:	4622      	mov	r2, r4
 8001c38:	4639      	mov	r1, r7
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f002 fcb6 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001c40:	4622      	mov	r2, r4
 8001c42:	4631      	mov	r1, r6
 8001c44:	4628      	mov	r0, r5
 8001c46:	f002 fcb1 	bl	80045ac <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c4a:	b009      	add	sp, #36	; 0x24
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	48000400 	.word	0x48000400

08001c54 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c54:	b510      	push	{r4, lr}
 8001c56:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c58:	f7ff f9ba 	bl	8000fd0 <SYS_GetTemperatureLevel>
 8001c5c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001c60:	f7fe fdbc 	bl	80007dc <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <EnvSensors_Read+0x28>)
 8001c66:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c68:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <EnvSensors_Read+0x2c>)
 8001c6c:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <EnvSensors_Read+0x30>)
 8001c70:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <EnvSensors_Read+0x34>)
 8001c74:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001c76:	2000      	movs	r0, #0
 8001c78:	bd10      	pop	{r4, pc}
 8001c7a:	bf00      	nop
 8001c7c:	42480000 	.word	0x42480000
 8001c80:	447a0000 	.word	0x447a0000
 8001c84:	003e090d 	.word	0x003e090d
 8001c88:	000503ab 	.word	0x000503ab

08001c8c <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	4770      	bx	lr

08001c90 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <TIMER_IF_SetTimerContext+0x1c>)
 8001c92:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c94:	e001      	b.n	8001c9a <TIMER_IF_SetTimerContext+0xa>
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <TIMER_IF_SetTimerContext+0x1c>)
 8001c98:	6898      	ldr	r0, [r3, #8]
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <TIMER_IF_SetTimerContext+0x1c>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4283      	cmp	r3, r0
 8001ca0:	d1f9      	bne.n	8001c96 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001ca2:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <TIMER_IF_SetTimerContext+0x20>)
 8001ca6:	6018      	str	r0, [r3, #0]
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40002800 	.word	0x40002800
 8001cb0:	20000258 	.word	0x20000258

08001cb4 <TIMER_IF_GetTimerContext>:
}
 8001cb4:	4b01      	ldr	r3, [pc, #4]	; (8001cbc <TIMER_IF_GetTimerContext+0x8>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000258 	.word	0x20000258

08001cc0 <TIMER_IF_GetTimerElapsedTime>:
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001cc2:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cc4:	e001      	b.n	8001cca <TIMER_IF_GetTimerElapsedTime+0xa>
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001cc8:	6898      	ldr	r0, [r3, #8]
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4283      	cmp	r3, r0
 8001cd0:	d1f9      	bne.n	8001cc6 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001cd2:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	1ac0      	subs	r0, r0, r3
 8001cda:	4770      	bx	lr
 8001cdc:	40002800 	.word	0x40002800
 8001ce0:	20000258 	.word	0x20000258

08001ce4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <TIMER_IF_GetTimerValue+0x20>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b153      	cbz	r3, 8001d00 <TIMER_IF_GetTimerValue+0x1c>
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <TIMER_IF_GetTimerValue+0x24>)
 8001cec:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cee:	e001      	b.n	8001cf4 <TIMER_IF_GetTimerValue+0x10>
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <TIMER_IF_GetTimerValue+0x24>)
 8001cf2:	6898      	ldr	r0, [r3, #8]
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <TIMER_IF_GetTimerValue+0x24>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4283      	cmp	r3, r0
 8001cfa:	d1f9      	bne.n	8001cf0 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001cfc:	43c0      	mvns	r0, r0
 8001cfe:	4770      	bx	lr
  uint32_t ret = 0;
 8001d00:	2000      	movs	r0, #0
}
 8001d02:	4770      	bx	lr
 8001d04:	20000255 	.word	0x20000255
 8001d08:	40002800 	.word	0x40002800

08001d0c <TIMER_IF_GetMinimumTimeout>:
}
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	4770      	bx	lr

08001d10 <TIMER_IF_Convert_ms2Tick>:
{
 8001d10:	b508      	push	{r3, lr}
 8001d12:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001d14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d18:	2300      	movs	r3, #0
 8001d1a:	0280      	lsls	r0, r0, #10
 8001d1c:	0d89      	lsrs	r1, r1, #22
 8001d1e:	f7fe ff27 	bl	8000b70 <__aeabi_uldivmod>
}
 8001d22:	bd08      	pop	{r3, pc}

08001d24 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001d24:	0ec2      	lsrs	r2, r0, #27
 8001d26:	0143      	lsls	r3, r0, #5
 8001d28:	1a1b      	subs	r3, r3, r0
 8001d2a:	f162 0200 	sbc.w	r2, r2, #0
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	181b      	adds	r3, r3, r0
 8001d38:	f142 0000 	adc.w	r0, r2, #0
 8001d3c:	00c0      	lsls	r0, r0, #3
 8001d3e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001d42:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001d46:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001d4a:	4770      	bx	lr

08001d4c <TIMER_IF_StopTimer>:
{
 8001d4c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <TIMER_IF_StopTimer+0x20>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d54:	4c06      	ldr	r4, [pc, #24]	; (8001d70 <TIMER_IF_StopTimer+0x24>)
 8001d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f004 fbc8 	bl	80064f0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d64:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001d66:	2000      	movs	r0, #0
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40002800 	.word	0x40002800
 8001d70:	20000210 	.word	0x20000210

08001d74 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001d74:	b508      	push	{r3, lr}
 8001d76:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001d7c:	f004 fe01 	bl	8006982 <HAL_RTCEx_BKUPWrite>
}
 8001d80:	bd08      	pop	{r3, pc}
 8001d82:	bf00      	nop
 8001d84:	20000210 	.word	0x20000210

08001d88 <TIMER_IF_Init>:
{
 8001d88:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <TIMER_IF_Init+0x40>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b10b      	cbz	r3, 8001d94 <TIMER_IF_Init+0xc>
}
 8001d90:	2000      	movs	r0, #0
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d94:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <TIMER_IF_Init+0x44>)
 8001d96:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001d9a:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001d9c:	f7ff fd10 	bl	80017c0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001da0:	f7ff ffd4 	bl	8001d4c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da8:	4620      	mov	r0, r4
 8001daa:	f004 fba1 	bl	80064f0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dae:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001db0:	4620      	mov	r0, r4
 8001db2:	f004 fd85 	bl	80068c0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff ffdc 	bl	8001d74 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001dbc:	f7ff ff68 	bl	8001c90 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001dc0:	4b01      	ldr	r3, [pc, #4]	; (8001dc8 <TIMER_IF_Init+0x40>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e7e3      	b.n	8001d90 <TIMER_IF_Init+0x8>
 8001dc8:	20000255 	.word	0x20000255
 8001dcc:	20000210 	.word	0x20000210

08001dd0 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001dd0:	b508      	push	{r3, lr}
 8001dd2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001dd8:	f004 fdd3 	bl	8006982 <HAL_RTCEx_BKUPWrite>
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	20000210 	.word	0x20000210

08001de4 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001de4:	b508      	push	{r3, lr}
 8001de6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001dec:	f004 fdc9 	bl	8006982 <HAL_RTCEx_BKUPWrite>
}
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop
 8001df4:	20000210 	.word	0x20000210

08001df8 <TIMER_IF_StartTimer>:
{
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001dfe:	222c      	movs	r2, #44	; 0x2c
 8001e00:	2100      	movs	r1, #0
 8001e02:	a801      	add	r0, sp, #4
 8001e04:	f013 fba6 	bl	8015554 <memset>
  TIMER_IF_StopTimer();
 8001e08:	f7ff ffa0 	bl	8001d4c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <TIMER_IF_StartTimer+0x48>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e12:	2300      	movs	r3, #0
 8001e14:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001e16:	43e4      	mvns	r4, r4
 8001e18:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e1a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e20:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e26:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	a901      	add	r1, sp, #4
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <TIMER_IF_StartTimer+0x4c>)
 8001e2e:	f004 fc8b 	bl	8006748 <HAL_RTC_SetAlarm_IT>
 8001e32:	b910      	cbnz	r0, 8001e3a <TIMER_IF_StartTimer+0x42>
}
 8001e34:	2000      	movs	r0, #0
 8001e36:	b00c      	add	sp, #48	; 0x30
 8001e38:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e3a:	f7ff fc67 	bl	800170c <Error_Handler>
 8001e3e:	e7f9      	b.n	8001e34 <TIMER_IF_StartTimer+0x3c>
 8001e40:	20000258 	.word	0x20000258
 8001e44:	20000210 	.word	0x20000210

08001e48 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001e48:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4801      	ldr	r0, [pc, #4]	; (8001e54 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001e4e:	f004 fd9f 	bl	8006990 <HAL_RTCEx_BKUPRead>
}
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	20000210 	.word	0x20000210

08001e58 <TIMER_IF_GetTime>:
{
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <TIMER_IF_GetTime+0x34>)
 8001e5e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e60:	e001      	b.n	8001e66 <TIMER_IF_GetTime+0xe>
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <TIMER_IF_GetTime+0x34>)
 8001e64:	689c      	ldr	r4, [r3, #8]
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <TIMER_IF_GetTime+0x34>)
 8001e68:	6892      	ldr	r2, [r2, #8]
 8001e6a:	42a2      	cmp	r2, r4
 8001e6c:	d1f9      	bne.n	8001e62 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001e6e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001e70:	f7ff ffea 	bl	8001e48 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001e74:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001e76:	0aa4      	lsrs	r4, r4, #10
 8001e78:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001e7c:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001e80:	f7ff ff50 	bl	8001d24 <TIMER_IF_Convert_Tick2ms>
 8001e84:	8028      	strh	r0, [r5, #0]
}
 8001e86:	4620      	mov	r0, r4
 8001e88:	bd38      	pop	{r3, r4, r5, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40002800 	.word	0x40002800

08001e90 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001e90:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001e96:	f004 fd7b 	bl	8006990 <HAL_RTCEx_BKUPRead>
}
 8001e9a:	bd08      	pop	{r3, pc}
 8001e9c:	20000210 	.word	0x20000210

08001ea0 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001ea0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001ea6:	f004 fd73 	bl	8006990 <HAL_RTCEx_BKUPRead>
}
 8001eaa:	bd08      	pop	{r3, pc}
 8001eac:	20000210 	.word	0x20000210

08001eb0 <TIMER_IF_DelayMs>:
{
 8001eb0:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001eb2:	f7ff ff2d 	bl	8001d10 <TIMER_IF_Convert_ms2Tick>
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001eb8:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eba:	e001      	b.n	8001ec0 <TIMER_IF_DelayMs+0x10>
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001ec2:	6892      	ldr	r2, [r2, #8]
 8001ec4:	428a      	cmp	r2, r1
 8001ec6:	d1f9      	bne.n	8001ebc <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001ec8:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001eca:	e00a      	b.n	8001ee2 <TIMER_IF_DelayMs+0x32>
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001ed2:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1f9      	bne.n	8001ecc <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001ed8:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001eda:	1a5b      	subs	r3, r3, r1
 8001edc:	4283      	cmp	r3, r0
 8001ede:	d203      	bcs.n	8001ee8 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001ee0:	bf00      	nop
 8001ee2:	4b02      	ldr	r3, [pc, #8]	; (8001eec <TIMER_IF_DelayMs+0x3c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ee6:	e7f3      	b.n	8001ed0 <TIMER_IF_DelayMs+0x20>
}
 8001ee8:	bd08      	pop	{r3, pc}
 8001eea:	bf00      	nop
 8001eec:	40002800 	.word	0x40002800

08001ef0 <HAL_RTC_AlarmAEventCallback>:
{
 8001ef0:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001ef2:	f013 f987 	bl	8015204 <UTIL_TIMER_IRQ_Handler>
}
 8001ef6:	bd08      	pop	{r3, pc}

08001ef8 <HAL_RTCEx_SSRUEventCallback>:
{
 8001ef8:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001efa:	f7ff ffa5 	bl	8001e48 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001efe:	3001      	adds	r0, #1
 8001f00:	f7ff ff38 	bl	8001d74 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001f04:	bd08      	pop	{r3, pc}
	...

08001f08 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f08:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f0a:	4817      	ldr	r0, [pc, #92]	; (8001f68 <MX_USART2_UART_Init+0x60>)
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_USART2_UART_Init+0x64>)
 8001f0e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001f10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f14:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	2300      	movs	r3, #0
 8001f18:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f1a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f1c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f1e:	220c      	movs	r2, #12
 8001f20:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f28:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2c:	f006 f88c 	bl	8008048 <HAL_UART_Init>
 8001f30:	b970      	cbnz	r0, 8001f50 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <MX_USART2_UART_Init+0x60>)
 8001f36:	f006 fa3c 	bl	80083b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f3a:	b960      	cbnz	r0, 8001f56 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	480a      	ldr	r0, [pc, #40]	; (8001f68 <MX_USART2_UART_Init+0x60>)
 8001f40:	f006 fa5c 	bl	80083fc <HAL_UARTEx_SetRxFifoThreshold>
 8001f44:	b950      	cbnz	r0, 8001f5c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <MX_USART2_UART_Init+0x60>)
 8001f48:	f006 fa0f 	bl	800836a <HAL_UARTEx_EnableFifoMode>
 8001f4c:	b948      	cbnz	r0, 8001f62 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f50:	f7ff fbdc 	bl	800170c <Error_Handler>
 8001f54:	e7ed      	b.n	8001f32 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001f56:	f7ff fbd9 	bl	800170c <Error_Handler>
 8001f5a:	e7ef      	b.n	8001f3c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001f5c:	f7ff fbd6 	bl	800170c <Error_Handler>
 8001f60:	e7f1      	b.n	8001f46 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001f62:	f7ff fbd3 	bl	800170c <Error_Handler>
}
 8001f66:	e7f2      	b.n	8001f4e <MX_USART2_UART_Init+0x46>
 8001f68:	200002bc 	.word	0x200002bc
 8001f6c:	40004400 	.word	0x40004400

08001f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f70:	b530      	push	{r4, r5, lr}
 8001f72:	b097      	sub	sp, #92	; 0x5c
 8001f74:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	2100      	movs	r1, #0
 8001f78:	9111      	str	r1, [sp, #68]	; 0x44
 8001f7a:	9112      	str	r1, [sp, #72]	; 0x48
 8001f7c:	9113      	str	r1, [sp, #76]	; 0x4c
 8001f7e:	9114      	str	r1, [sp, #80]	; 0x50
 8001f80:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	a803      	add	r0, sp, #12
 8001f86:	f013 fae5 	bl	8015554 <memset>
  if(uartHandle->Instance==USART2)
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_UART_MspInit+0xd4>)
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f92:	b017      	add	sp, #92	; 0x5c
 8001f94:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_UART_MspInit+0xd8>)
 8001f9c:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9e:	a803      	add	r0, sp, #12
 8001fa0:	f004 f95c 	bl	800625c <HAL_RCCEx_PeriphCLKConfig>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d144      	bne.n	8002032 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fb6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001fba:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001fbc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001fce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2500      	movs	r5, #0
 8001fda:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	a911      	add	r1, sp, #68	; 0x44
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f002 f98f 	bl	800430c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001fee:	4817      	ldr	r0, [pc, #92]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_UART_MspInit+0xe0>)
 8001ff2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001ff4:	2314      	movs	r3, #20
 8001ff6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002002:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002004:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002006:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002008:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800200a:	f001 fe19 	bl	8003c40 <HAL_DMA_Init>
 800200e:	b998      	cbnz	r0, 8002038 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002010:	2110      	movs	r1, #16
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <HAL_UART_MspInit+0xdc>)
 8002014:	f002 f819 	bl	800404a <HAL_DMA_ConfigChannelAttributes>
 8002018:	b988      	cbnz	r0, 800203e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_UART_MspInit+0xdc>)
 800201c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800201e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2107      	movs	r1, #7
 8002024:	2025      	movs	r0, #37	; 0x25
 8002026:	f001 fd43 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800202a:	2025      	movs	r0, #37	; 0x25
 800202c:	f001 fd78 	bl	8003b20 <HAL_NVIC_EnableIRQ>
}
 8002030:	e7af      	b.n	8001f92 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002032:	f7ff fb6b 	bl	800170c <Error_Handler>
 8002036:	e7b7      	b.n	8001fa8 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002038:	f7ff fb68 	bl	800170c <Error_Handler>
 800203c:	e7e8      	b.n	8002010 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800203e:	f7ff fb65 	bl	800170c <Error_Handler>
 8002042:	e7ea      	b.n	800201a <HAL_UART_MspInit+0xaa>
 8002044:	40004400 	.word	0x40004400
 8002048:	000c0004 	.word	0x000c0004
 800204c:	2000025c 	.word	0x2000025c
 8002050:	40020058 	.word	0x40020058

08002054 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002054:	6802      	ldr	r2, [r0, #0]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_UART_MspDeInit+0x34>)
 8002058:	429a      	cmp	r2, r3
 800205a:	d000      	beq.n	800205e <HAL_UART_MspDeInit+0xa>
 800205c:	4770      	bx	lr
{
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002066:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800206c:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800206e:	210c      	movs	r1, #12
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f002 fa1c 	bl	80044b0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002078:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800207a:	f001 fe53 	bl	8003d24 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800207e:	2025      	movs	r0, #37	; 0x25
 8002080:	f001 fd5c 	bl	8003b3c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002084:	bd10      	pop	{r4, pc}
 8002086:	bf00      	nop
 8002088:	40004400 	.word	0x40004400

0800208c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800208c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <vcom_Init+0x20>)
 8002090:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002092:	f7ff f873 	bl	800117c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002096:	f7ff ff37 	bl	8001f08 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <vcom_Init+0x24>)
 800209c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80020a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80020a8:	2000      	movs	r0, #0
 80020aa:	bd08      	pop	{r3, pc}
 80020ac:	20000354 	.word	0x20000354
 80020b0:	58000800 	.word	0x58000800

080020b4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80020b4:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80020b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80020c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <vcom_DeInit+0x28>)
 80020cc:	f7ff ffc2 	bl	8002054 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80020d0:	200f      	movs	r0, #15
 80020d2:	f001 fd33 	bl	8003b3c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80020d6:	2000      	movs	r0, #0
 80020d8:	bd08      	pop	{r3, pc}
 80020da:	bf00      	nop
 80020dc:	200002bc 	.word	0x200002bc

080020e0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80020e0:	b508      	push	{r3, lr}
 80020e2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80020e4:	4601      	mov	r1, r0
 80020e6:	4802      	ldr	r0, [pc, #8]	; (80020f0 <vcom_Trace_DMA+0x10>)
 80020e8:	f005 f830 	bl	800714c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80020ec:	2000      	movs	r0, #0
 80020ee:	bd08      	pop	{r3, pc}
 80020f0:	200002bc 	.word	0x200002bc

080020f4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <vcom_ReceiveInit+0x50>)
 80020fa:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80020fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002100:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002102:	ab02      	add	r3, sp, #8
 8002104:	e913 0006 	ldmdb	r3, {r1, r2}
 8002108:	480f      	ldr	r0, [pc, #60]	; (8002148 <vcom_ReceiveInit+0x54>)
 800210a:	f006 f8d6 	bl	80082ba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <vcom_ReceiveInit+0x54>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002118:	d1f9      	bne.n	800210e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002120:	d0fb      	beq.n	800211a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002128:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800212a:	4c07      	ldr	r4, [pc, #28]	; (8002148 <vcom_ReceiveInit+0x54>)
 800212c:	4620      	mov	r0, r4
 800212e:	f006 f905 	bl	800833c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002132:	2201      	movs	r2, #1
 8002134:	4905      	ldr	r1, [pc, #20]	; (800214c <vcom_ReceiveInit+0x58>)
 8002136:	4620      	mov	r0, r4
 8002138:	f006 f858 	bl	80081ec <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800213c:	2000      	movs	r0, #0
 800213e:	b002      	add	sp, #8
 8002140:	bd10      	pop	{r4, pc}
 8002142:	bf00      	nop
 8002144:	20000350 	.word	0x20000350
 8002148:	200002bc 	.word	0x200002bc
 800214c:	20000358 	.word	0x20000358

08002150 <vcom_Resume>:

void vcom_Resume(void)
{
 8002150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <vcom_Resume+0x20>)
 8002154:	f005 ff78 	bl	8008048 <HAL_UART_Init>
 8002158:	b920      	cbnz	r0, 8002164 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <vcom_Resume+0x24>)
 800215c:	f001 fd70 	bl	8003c40 <HAL_DMA_Init>
 8002160:	b918      	cbnz	r0, 800216a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002162:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002164:	f7ff fad2 	bl	800170c <Error_Handler>
 8002168:	e7f7      	b.n	800215a <vcom_Resume+0xa>
    Error_Handler();
 800216a:	f7ff facf 	bl	800170c <Error_Handler>
}
 800216e:	e7f8      	b.n	8002162 <vcom_Resume+0x12>
 8002170:	200002bc 	.word	0x200002bc
 8002174:	2000025c 	.word	0x2000025c

08002178 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800217a:	6802      	ldr	r2, [r0, #0]
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_UART_TxCpltCallback+0x18>)
 800217e:	429a      	cmp	r2, r3
 8002180:	d000      	beq.n	8002184 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002182:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_UART_TxCpltCallback+0x1c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2000      	movs	r0, #0
 800218a:	4798      	blx	r3
}
 800218c:	e7f9      	b.n	8002182 <HAL_UART_TxCpltCallback+0xa>
 800218e:	bf00      	nop
 8002190:	40004400 	.word	0x40004400
 8002194:	20000354 	.word	0x20000354

08002198 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_UART_RxCpltCallback+0x2c>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d000      	beq.n	80021a2 <HAL_UART_RxCpltCallback+0xa>
 80021a0:	4770      	bx	lr
{
 80021a2:	b510      	push	{r4, lr}
 80021a4:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_UART_RxCpltCallback+0x30>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b12b      	cbz	r3, 80021b8 <HAL_UART_RxCpltCallback+0x20>
 80021ac:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80021b0:	b912      	cbnz	r2, 80021b8 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80021b2:	2101      	movs	r1, #1
 80021b4:	4805      	ldr	r0, [pc, #20]	; (80021cc <HAL_UART_RxCpltCallback+0x34>)
 80021b6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <HAL_UART_RxCpltCallback+0x34>)
 80021bc:	4620      	mov	r0, r4
 80021be:	f006 f815 	bl	80081ec <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80021c2:	bd10      	pop	{r4, pc}
 80021c4:	40004400 	.word	0x40004400
 80021c8:	20000350 	.word	0x20000350
 80021cc:	20000358 	.word	0x20000358

080021d0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80021d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80021d2:	f7ff fc35 	bl	8001a40 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80021d6:	f000 fbf5 	bl	80029c4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80021da:	bd08      	pop	{r3, pc}

080021dc <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80021dc:	4770      	bx	lr
	...

080021e0 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80021e0:	4b01      	ldr	r3, [pc, #4]	; (80021e8 <OnTxFrameCtrlChanged+0x8>)
 80021e2:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000058 	.word	0x20000058

080021ec <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <OnPingSlotPeriodicityChanged+0x8>)
 80021ee:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000058 	.word	0x20000058

080021f8 <OnBeaconStatusChange>:
  if (params != NULL)
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d03f      	beq.n	800227c <OnBeaconStatusChange+0x84>
{
 80021fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002200:	b08c      	sub	sp, #48	; 0x30
 8002202:	4603      	mov	r3, r0
    switch (params->State)
 8002204:	7842      	ldrb	r2, [r0, #1]
 8002206:	2a02      	cmp	r2, #2
 8002208:	d00a      	beq.n	8002220 <OnBeaconStatusChange+0x28>
 800220a:	2a03      	cmp	r2, #3
 800220c:	d02f      	beq.n	800226e <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <OnBeaconStatusChange+0x88>)
 8002210:	2200      	movs	r2, #0
 8002212:	4611      	mov	r1, r2
 8002214:	2002      	movs	r0, #2
 8002216:	f012 fcc3 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800221a:	b00c      	add	sp, #48	; 0x30
 800221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002220:	7c02      	ldrb	r2, [r0, #16]
 8002222:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002226:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800222a:	7d5c      	ldrb	r4, [r3, #21]
 800222c:	7d9d      	ldrb	r5, [r3, #22]
 800222e:	7dde      	ldrb	r6, [r3, #23]
 8002230:	7e1f      	ldrb	r7, [r3, #24]
 8002232:	f893 c019 	ldrb.w	ip, [r3, #25]
 8002236:	f893 e01a 	ldrb.w	lr, [r3, #26]
 800223a:	f893 801b 	ldrb.w	r8, [r3, #27]
 800223e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002242:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002246:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800224a:	9708      	str	r7, [sp, #32]
 800224c:	9607      	str	r6, [sp, #28]
 800224e:	9506      	str	r5, [sp, #24]
 8002250:	9405      	str	r4, [sp, #20]
 8002252:	685c      	ldr	r4, [r3, #4]
 8002254:	9404      	str	r4, [sp, #16]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	9303      	str	r3, [sp, #12]
 800225a:	9002      	str	r0, [sp, #8]
 800225c:	9101      	str	r1, [sp, #4]
 800225e:	9200      	str	r2, [sp, #0]
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <OnBeaconStatusChange+0x8c>)
 8002262:	2200      	movs	r2, #0
 8002264:	4611      	mov	r1, r2
 8002266:	2002      	movs	r0, #2
 8002268:	f012 fc9a 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800226c:	e7d5      	b.n	800221a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <OnBeaconStatusChange+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	4611      	mov	r1, r2
 8002274:	2002      	movs	r0, #2
 8002276:	f012 fc93 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800227a:	e7ce      	b.n	800221a <OnBeaconStatusChange+0x22>
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	080157e0 	.word	0x080157e0
 8002284:	080157f8 	.word	0x080157f8
 8002288:	0801586c 	.word	0x0801586c

0800228c <OnClassChange>:
{
 800228c:	b500      	push	{lr}
 800228e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <OnClassChange+0x1c>)
 8002292:	5c1b      	ldrb	r3, [r3, r0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <OnClassChange+0x20>)
 8002298:	2200      	movs	r2, #0
 800229a:	4611      	mov	r1, r2
 800229c:	2002      	movs	r0, #2
 800229e:	f012 fc7f 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 80022a2:	b003      	add	sp, #12
 80022a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a8:	080158a8 	.word	0x080158a8
 80022ac:	0801588c 	.word	0x0801588c

080022b0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80022b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80022b2:	2801      	cmp	r0, #1
 80022b4:	d006      	beq.n	80022c4 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <OnNvmDataChange+0x24>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	4611      	mov	r1, r2
 80022bc:	2002      	movs	r0, #2
 80022be:	f012 fc6f 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80022c2:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <OnNvmDataChange+0x28>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	4611      	mov	r1, r2
 80022ca:	2002      	movs	r0, #2
 80022cc:	f012 fc68 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 80022d0:	e7f7      	b.n	80022c2 <OnNvmDataChange+0x12>
 80022d2:	bf00      	nop
 80022d4:	080158c0 	.word	0x080158c0
 80022d8:	080158ac 	.word	0x080158ac

080022dc <OnTxTimerEvent>:
{
 80022dc:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 80022de:	2101      	movs	r1, #1
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <OnTxTimerEvent+0x14>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	f006 f95e 	bl	80085a4 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <OnTxTimerEvent+0x18>)
 80022ea:	f012 ff2b 	bl	8015144 <UTIL_TIMER_Start>
}
 80022ee:	bd08      	pop	{r3, pc}
 80022f0:	2000049c 	.word	0x2000049c
 80022f4:	200004c0 	.word	0x200004c0

080022f8 <OnMacProcessNotify>:
{
 80022f8:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 80022fa:	2101      	movs	r1, #1
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <OnMacProcessNotify+0x10>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	f006 f950 	bl	80085a4 <osThreadFlagsSet>
}
 8002304:	bd08      	pop	{r3, pc}
 8002306:	bf00      	nop
 8002308:	20000498 	.word	0x20000498

0800230c <OnSystemReset>:
{
 800230c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800230e:	f008 fe51 	bl	800afb4 <LmHandlerHalt>
 8002312:	b100      	cbz	r0, 8002316 <OnSystemReset+0xa>
}
 8002314:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002316:	f008 faab 	bl	800a870 <LmHandlerJoinStatus>
 800231a:	2801      	cmp	r0, #1
 800231c:	d1fa      	bne.n	8002314 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800231e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002322:	4905      	ldr	r1, [pc, #20]	; (8002338 <OnSystemReset+0x2c>)
 8002324:	68ca      	ldr	r2, [r1, #12]
 8002326:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <OnSystemReset+0x30>)
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
 8002330:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002334:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002336:	e7fd      	b.n	8002334 <OnSystemReset+0x28>
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	05fa0004 	.word	0x05fa0004

08002340 <OnTxPeriodicityChanged>:
{
 8002340:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <OnTxPeriodicityChanged+0x28>)
 8002344:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002346:	b910      	cbnz	r0, 800234e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002348:	f242 7210 	movw	r2, #10000	; 0x2710
 800234c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800234e:	4c07      	ldr	r4, [pc, #28]	; (800236c <OnTxPeriodicityChanged+0x2c>)
 8002350:	4620      	mov	r0, r4
 8002352:	f012 fe9d 	bl	8015090 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <OnTxPeriodicityChanged+0x28>)
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	4620      	mov	r0, r4
 800235c:	f012 ff38 	bl	80151d0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002360:	4620      	mov	r0, r4
 8002362:	f012 feef 	bl	8015144 <UTIL_TIMER_Start>
}
 8002366:	bd10      	pop	{r4, pc}
 8002368:	20000070 	.word	0x20000070
 800236c:	200004c0 	.word	0x200004c0

08002370 <OnTxData>:
  if ((params != NULL))
 8002370:	2800      	cmp	r0, #0
 8002372:	d042      	beq.n	80023fa <OnTxData+0x8a>
{
 8002374:	b510      	push	{r4, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800237a:	7803      	ldrb	r3, [r0, #0]
 800237c:	b90b      	cbnz	r3, 8002382 <OnTxData+0x12>
}
 800237e:	b004      	add	sp, #16
 8002380:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002388:	481c      	ldr	r0, [pc, #112]	; (80023fc <OnTxData+0x8c>)
 800238a:	f002 f90f 	bl	80045ac <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800238e:	481c      	ldr	r0, [pc, #112]	; (8002400 <OnTxData+0x90>)
 8002390:	f012 fed8 	bl	8015144 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <OnTxData+0x94>)
 8002396:	2200      	movs	r2, #0
 8002398:	4611      	mov	r1, r2
 800239a:	2002      	movs	r0, #2
 800239c:	f012 fc00 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80023a0:	7c23      	ldrb	r3, [r4, #16]
 80023a2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80023a6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80023aa:	9103      	str	r1, [sp, #12]
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	68e3      	ldr	r3, [r4, #12]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <OnTxData+0x98>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	4611      	mov	r1, r2
 80023ba:	2003      	movs	r0, #3
 80023bc:	f012 fbf0 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <OnTxData+0x9c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	4611      	mov	r1, r2
 80023c6:	2003      	movs	r0, #3
 80023c8:	f012 fbea 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80023cc:	7a23      	ldrb	r3, [r4, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10c      	bne.n	80023ec <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80023d2:	7a63      	ldrb	r3, [r4, #9]
 80023d4:	b143      	cbz	r3, 80023e8 <OnTxData+0x78>
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <OnTxData+0xa0>)
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <OnTxData+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	4611      	mov	r1, r2
 80023e0:	2003      	movs	r0, #3
 80023e2:	f012 fbdd 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 80023e6:	e7ca      	b.n	800237e <OnTxData+0xe>
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <OnTxData+0xa8>)
 80023ea:	e7f5      	b.n	80023d8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <OnTxData+0xac>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	4611      	mov	r1, r2
 80023f2:	2003      	movs	r0, #3
 80023f4:	f012 fbd4 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 80023f8:	e7c1      	b.n	800237e <OnTxData+0xe>
 80023fa:	4770      	bx	lr
 80023fc:	48000400 	.word	0x48000400
 8002400:	200004a8 	.word	0x200004a8
 8002404:	080158e0 	.word	0x080158e0
 8002408:	08015914 	.word	0x08015914
 800240c:	08015948 	.word	0x08015948
 8002410:	080158d4 	.word	0x080158d4
 8002414:	08015958 	.word	0x08015958
 8002418:	080158d8 	.word	0x080158d8
 800241c:	0801596c 	.word	0x0801596c

08002420 <OnJoinRequest>:
  if (joinParams != NULL)
 8002420:	2800      	cmp	r0, #0
 8002422:	d039      	beq.n	8002498 <OnJoinRequest+0x78>
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800242a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800242e:	b9fb      	cbnz	r3, 8002470 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002430:	481a      	ldr	r0, [pc, #104]	; (800249c <OnJoinRequest+0x7c>)
 8002432:	f012 fe2d 	bl	8015090 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243c:	4818      	ldr	r0, [pc, #96]	; (80024a0 <OnJoinRequest+0x80>)
 800243e:	f002 f8b5 	bl	80045ac <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <OnJoinRequest+0x84>)
 8002444:	2200      	movs	r2, #0
 8002446:	4611      	mov	r1, r2
 8002448:	2002      	movs	r0, #2
 800244a:	f012 fba9 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800244e:	79e3      	ldrb	r3, [r4, #7]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d006      	beq.n	8002462 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <OnJoinRequest+0x88>)
 8002456:	2200      	movs	r2, #0
 8002458:	4611      	mov	r1, r2
 800245a:	2002      	movs	r0, #2
 800245c:	f012 fba0 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 8002460:	e00c      	b.n	800247c <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <OnJoinRequest+0x8c>)
 8002464:	2200      	movs	r2, #0
 8002466:	4611      	mov	r1, r2
 8002468:	2002      	movs	r0, #2
 800246a:	f012 fb99 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 800246e:	e005      	b.n	800247c <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <OnJoinRequest+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	4611      	mov	r1, r2
 8002476:	2002      	movs	r0, #2
 8002478:	f012 fb92 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800247c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002480:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <OnJoinRequest+0x94>)
 800248a:	2200      	movs	r2, #0
 800248c:	4611      	mov	r1, r2
 800248e:	2003      	movs	r0, #3
 8002490:	f012 fb86 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002494:	b002      	add	sp, #8
 8002496:	bd10      	pop	{r4, pc}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000450 	.word	0x20000450
 80024a0:	48000400 	.word	0x48000400
 80024a4:	0801597c 	.word	0x0801597c
 80024a8:	080159b4 	.word	0x080159b4
 80024ac:	08015994 	.word	0x08015994
 80024b0:	080159d4 	.word	0x080159d4
 80024b4:	080159f0 	.word	0x080159f0

080024b8 <OnStopJoinTimerEvent>:
{
 80024b8:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <OnStopJoinTimerEvent+0x40>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d013      	beq.n	80024ea <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80024c2:	4c0e      	ldr	r4, [pc, #56]	; (80024fc <OnStopJoinTimerEvent+0x44>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ca:	4620      	mov	r0, r4
 80024cc:	f002 f86e 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80024d0:	2200      	movs	r2, #0
 80024d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d6:	4620      	mov	r0, r4
 80024d8:	f002 f868 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80024dc:	2200      	movs	r2, #0
 80024de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e2:	4620      	mov	r0, r4
 80024e4:	f002 f862 	bl	80045ac <HAL_GPIO_WritePin>
}
 80024e8:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <OnStopJoinTimerEvent+0x48>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f006 f858 	bl	80085a4 <osThreadFlagsSet>
 80024f4:	e7e5      	b.n	80024c2 <OnStopJoinTimerEvent+0xa>
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000
 80024fc:	48000400 	.word	0x48000400
 8002500:	200004a0 	.word	0x200004a0

08002504 <OnRxTimerLedEvent>:
{
 8002504:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250c:	4801      	ldr	r0, [pc, #4]	; (8002514 <OnRxTimerLedEvent+0x10>)
 800250e:	f002 f84d 	bl	80045ac <HAL_GPIO_WritePin>
}
 8002512:	bd08      	pop	{r3, pc}
 8002514:	48000400 	.word	0x48000400

08002518 <OnTxTimerLedEvent>:
{
 8002518:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002520:	4801      	ldr	r0, [pc, #4]	; (8002528 <OnTxTimerLedEvent+0x10>)
 8002522:	f002 f843 	bl	80045ac <HAL_GPIO_WritePin>
}
 8002526:	bd08      	pop	{r3, pc}
 8002528:	48000400 	.word	0x48000400

0800252c <OnRxData>:
  if (params != NULL)
 800252c:	2900      	cmp	r1, #0
 800252e:	d06e      	beq.n	800260e <OnRxData+0xe2>
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	4604      	mov	r4, r0
 8002536:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253e:	4834      	ldr	r0, [pc, #208]	; (8002610 <OnRxData+0xe4>)
 8002540:	f002 f834 	bl	80045ac <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002544:	4833      	ldr	r0, [pc, #204]	; (8002614 <OnRxData+0xe8>)
 8002546:	f012 fdfd 	bl	8015144 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800254a:	782e      	ldrb	r6, [r5, #0]
 800254c:	2e00      	cmp	r6, #0
 800254e:	d042      	beq.n	80025d6 <OnRxData+0xaa>
      if (appData != NULL)
 8002550:	2c00      	cmp	r4, #0
 8002552:	d03f      	beq.n	80025d4 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002554:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d03c      	beq.n	80025d6 <OnRxData+0xaa>
          switch (appData->Port)
 800255c:	2e02      	cmp	r6, #2
 800255e:	d016      	beq.n	800258e <OnRxData+0x62>
 8002560:	2e03      	cmp	r6, #3
 8002562:	d138      	bne.n	80025d6 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002564:	7862      	ldrb	r2, [r4, #1]
 8002566:	2a01      	cmp	r2, #1
 8002568:	d135      	bne.n	80025d6 <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d006      	beq.n	800257e <OnRxData+0x52>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d008      	beq.n	8002586 <OnRxData+0x5a>
 8002574:	bb7b      	cbnz	r3, 80025d6 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002576:	2000      	movs	r0, #0
 8002578:	f008 f98c 	bl	800a894 <LmHandlerRequestClass>
                    break;
 800257c:	e02b      	b.n	80025d6 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 800257e:	2001      	movs	r0, #1
 8002580:	f008 f988 	bl	800a894 <LmHandlerRequestClass>
                    break;
 8002584:	e027      	b.n	80025d6 <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002586:	2002      	movs	r0, #2
 8002588:	f008 f984 	bl	800a894 <LmHandlerRequestClass>
                    break;
 800258c:	e023      	b.n	80025d6 <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800258e:	7862      	ldrb	r2, [r4, #1]
 8002590:	2a01      	cmp	r2, #1
 8002592:	d120      	bne.n	80025d6 <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <OnRxData+0xec>)
 800259c:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 800259e:	b963      	cbnz	r3, 80025ba <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <OnRxData+0xf0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	4611      	mov	r1, r2
 80025a6:	2003      	movs	r0, #3
 80025a8:	f012 fafa 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b2:	4817      	ldr	r0, [pc, #92]	; (8002610 <OnRxData+0xe4>)
 80025b4:	f001 fffa 	bl	80045ac <HAL_GPIO_WritePin>
 80025b8:	e00d      	b.n	80025d6 <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <OnRxData+0xf4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	4611      	mov	r1, r2
 80025c0:	2003      	movs	r0, #3
 80025c2:	f012 faed 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025cc:	4810      	ldr	r0, [pc, #64]	; (8002610 <OnRxData+0xe4>)
 80025ce:	f001 ffed 	bl	80045ac <HAL_GPIO_WritePin>
 80025d2:	e000      	b.n	80025d6 <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80025d4:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80025d6:	7c2b      	ldrb	r3, [r5, #16]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d901      	bls.n	80025e0 <OnRxData+0xb4>
}
 80025dc:	b006      	add	sp, #24
 80025de:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80025e0:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80025e4:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80025e8:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80025ec:	9005      	str	r0, [sp, #20]
 80025ee:	9104      	str	r1, [sp, #16]
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <OnRxData+0xf8>)
 80025f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	9202      	str	r2, [sp, #8]
 80025fa:	9601      	str	r6, [sp, #4]
 80025fc:	68eb      	ldr	r3, [r5, #12]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <OnRxData+0xfc>)
 8002602:	2200      	movs	r2, #0
 8002604:	4611      	mov	r1, r2
 8002606:	2003      	movs	r0, #3
 8002608:	f012 faca 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800260c:	e7e6      	b.n	80025dc <OnRxData+0xb0>
 800260e:	4770      	bx	lr
 8002610:	48000400 	.word	0x48000400
 8002614:	20000468 	.word	0x20000468
 8002618:	2000044e 	.word	0x2000044e
 800261c:	08015a1c 	.word	0x08015a1c
 8002620:	08015a28 	.word	0x08015a28
 8002624:	08015d38 	.word	0x08015d38
 8002628:	08015a34 	.word	0x08015a34

0800262c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8002632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <OnStoreContextRequest+0x20>)
 8002638:	f7fe ff50 	bl	80014dc <FLASH_IF_Erase>
 800263c:	b100      	cbz	r0, 8002640 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800263e:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002640:	462a      	mov	r2, r5
 8002642:	4621      	mov	r1, r4
 8002644:	4801      	ldr	r0, [pc, #4]	; (800264c <OnStoreContextRequest+0x20>)
 8002646:	f7fe ff11 	bl	800146c <FLASH_IF_Write>
}
 800264a:	e7f8      	b.n	800263e <OnStoreContextRequest+0x12>
 800264c:	0803f000 	.word	0x0803f000

08002650 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002650:	b508      	push	{r3, lr}
 8002652:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002654:	4901      	ldr	r1, [pc, #4]	; (800265c <OnRestoreContextRequest+0xc>)
 8002656:	f7fe ff25 	bl	80014a4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800265a:	bd08      	pop	{r3, pc}
 800265c:	0803f000 	.word	0x0803f000

08002660 <StopJoin>:
{
 8002660:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002662:	4c1e      	ldr	r4, [pc, #120]	; (80026dc <StopJoin+0x7c>)
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800266a:	4620      	mov	r0, r4
 800266c:	f001 ff9e 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002676:	4620      	mov	r0, r4
 8002678:	f001 ff98 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002682:	4620      	mov	r0, r4
 8002684:	f001 ff92 	bl	80045ac <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002688:	4815      	ldr	r0, [pc, #84]	; (80026e0 <StopJoin+0x80>)
 800268a:	f012 fd01 	bl	8015090 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800268e:	f008 fc89 	bl	800afa4 <LmHandlerStop>
 8002692:	b148      	cbz	r0, 80026a8 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <StopJoin+0x84>)
 8002696:	2200      	movs	r2, #0
 8002698:	4611      	mov	r1, r2
 800269a:	2002      	movs	r0, #2
 800269c:	f012 fa80 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80026a0:	4811      	ldr	r0, [pc, #68]	; (80026e8 <StopJoin+0x88>)
 80026a2:	f012 fd4f 	bl	8015144 <UTIL_TIMER_Start>
}
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <StopJoin+0x8c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	4611      	mov	r1, r2
 80026ae:	2002      	movs	r0, #2
 80026b0:	f012 fa76 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80026b4:	4c0e      	ldr	r4, [pc, #56]	; (80026f0 <StopJoin+0x90>)
 80026b6:	2501      	movs	r5, #1
 80026b8:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <StopJoin+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	4611      	mov	r1, r2
 80026c0:	2002      	movs	r0, #2
 80026c2:	f012 fa6d 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80026c6:	480c      	ldr	r0, [pc, #48]	; (80026f8 <StopJoin+0x98>)
 80026c8:	f008 faf4 	bl	800acb4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80026cc:	4629      	mov	r1, r5
 80026ce:	7820      	ldrb	r0, [r4, #0]
 80026d0:	f008 f93a 	bl	800a948 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <StopJoin+0x80>)
 80026d6:	f012 fd35 	bl	8015144 <UTIL_TIMER_Start>
 80026da:	e7e1      	b.n	80026a0 <StopJoin+0x40>
 80026dc:	48000400 	.word	0x48000400
 80026e0:	200004c0 	.word	0x200004c0
 80026e4:	08015a7c 	.word	0x08015a7c
 80026e8:	20000480 	.word	0x20000480
 80026ec:	08015a9c 	.word	0x08015a9c
 80026f0:	20000000 	.word	0x20000000
 80026f4:	08015ab0 	.word	0x08015ab0
 80026f8:	20000058 	.word	0x20000058

080026fc <Thd_LoraStopJoin>:
{
 80026fc:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002702:	2100      	movs	r1, #0
 8002704:	2001      	movs	r0, #1
 8002706:	f005 ff95 	bl	8008634 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 800270a:	f7ff ffa9 	bl	8002660 <StopJoin>
  for (;;)
 800270e:	e7f6      	b.n	80026fe <Thd_LoraStopJoin+0x2>

08002710 <StoreContext>:
{
 8002710:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002712:	f008 fcd9 	bl	800b0c8 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002716:	f110 0f08 	cmn.w	r0, #8
 800271a:	d003      	beq.n	8002724 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 800271c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002720:	d007      	beq.n	8002732 <StoreContext+0x22>
}
 8002722:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <StoreContext+0x30>)
 8002726:	2200      	movs	r2, #0
 8002728:	4611      	mov	r1, r2
 800272a:	2002      	movs	r0, #2
 800272c:	f012 fa38 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 8002730:	e7f7      	b.n	8002722 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <StoreContext+0x34>)
 8002734:	2200      	movs	r2, #0
 8002736:	4611      	mov	r1, r2
 8002738:	2002      	movs	r0, #2
 800273a:	f012 fa31 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800273e:	e7f0      	b.n	8002722 <StoreContext+0x12>
 8002740:	08015ad0 	.word	0x08015ad0
 8002744:	08015ae8 	.word	0x08015ae8

08002748 <Thd_LoraStoreContext>:
{
 8002748:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274e:	2100      	movs	r1, #0
 8002750:	2001      	movs	r0, #1
 8002752:	f005 ff6f 	bl	8008634 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 8002756:	f7ff ffdb 	bl	8002710 <StoreContext>
  for (;;)
 800275a:	e7f6      	b.n	800274a <Thd_LoraStoreContext+0x2>

0800275c <SendTxData>:
{
 800275c:	b530      	push	{r4, r5, lr}
 800275e:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002760:	f7ff f99a 	bl	8001a98 <GetBatteryLevel>
 8002764:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 8002766:	f008 f969 	bl	800aa3c <LmHandlerIsBusy>
 800276a:	b188      	cbz	r0, 8002790 <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800276c:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 800276e:	4c4a      	ldr	r4, [pc, #296]	; (8002898 <SendTxData+0x13c>)
 8002770:	4620      	mov	r0, r4
 8002772:	f012 fc8d 	bl	8015090 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <SendTxData+0x140>)
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	42a9      	cmp	r1, r5
 800277c:	bf38      	it	cc
 800277e:	4629      	movcc	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f012 fd25 	bl	80151d0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002786:	4620      	mov	r0, r4
 8002788:	f012 fcdc 	bl	8015144 <UTIL_TIMER_Start>
}
 800278c:	b009      	add	sp, #36	; 0x24
 800278e:	bd30      	pop	{r4, r5, pc}
    EnvSensors_Read(&sensor_data);
 8002790:	a802      	add	r0, sp, #8
 8002792:	f7ff fa5f 	bl	8001c54 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002796:	9400      	str	r4, [sp, #0]
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <SendTxData+0x144>)
 800279a:	2201      	movs	r2, #1
 800279c:	2100      	movs	r1, #0
 800279e:	2002      	movs	r0, #2
 80027a0:	f012 f9fe 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80027a4:	9803      	ldr	r0, [sp, #12]
 80027a6:	f7fe f9bd 	bl	8000b24 <__aeabi_f2iz>
 80027aa:	b200      	sxth	r0, r0
 80027ac:	9000      	str	r0, [sp, #0]
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <SendTxData+0x148>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	2100      	movs	r1, #0
 80027b4:	2002      	movs	r0, #2
 80027b6:	f012 f9f3 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <SendTxData+0x14c>)
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0xc0;
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	21c0      	movs	r1, #192	; 0xc0
 80027c4:	7011      	strb	r1, [r2, #0]
    AppData.Buffer[i++] = 0xff;
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	21ff      	movs	r1, #255	; 0xff
 80027ca:	7051      	strb	r1, [r2, #1]
    AppData.Buffer[i++] = 0xee;
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	21ee      	movs	r1, #238	; 0xee
 80027d0:	7091      	strb	r1, [r2, #2]
    AppData.Buffer[i++] = int_temp_data;
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4935      	ldr	r1, [pc, #212]	; (80028ac <SendTxData+0x150>)
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	70d1      	strb	r1, [r2, #3]
    AppData.Buffer[i++] = decimal_temp_data;
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4934      	ldr	r1, [pc, #208]	; (80028b0 <SendTxData+0x154>)
 80027de:	6809      	ldr	r1, [r1, #0]
 80027e0:	7111      	strb	r1, [r2, #4]
    AppData.Buffer[i++] = int_hum_data;
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4933      	ldr	r1, [pc, #204]	; (80028b4 <SendTxData+0x158>)
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	7151      	strb	r1, [r2, #5]
    AppData.Buffer[i++] = decimal_hum_data;
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a32      	ldr	r2, [pc, #200]	; (80028b8 <SendTxData+0x15c>)
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	719a      	strb	r2, [r3, #6]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 80027f2:	4b32      	ldr	r3, [pc, #200]	; (80028bc <SendTxData+0x160>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d002      	beq.n	8002800 <SendTxData+0xa4>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d000      	beq.n	8002800 <SendTxData+0xa4>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 80027fe:	b9d3      	cbnz	r3, 8002836 <SendTxData+0xda>
      AppData.Buffer[i++] = 0;
 8002800:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <SendTxData+0x14c>)
 8002802:	6851      	ldr	r1, [r2, #4]
 8002804:	2300      	movs	r3, #0
 8002806:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 8002808:	6852      	ldr	r2, [r2, #4]
 800280a:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 800280c:	7253      	strb	r3, [r2, #9]
      AppData.Buffer[i++] = 0;
 800280e:	7293      	strb	r3, [r2, #10]
 8002810:	220b      	movs	r2, #11
    AppData.BufferSize = i;
 8002812:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <SendTxData+0x14c>)
 8002814:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <SendTxData+0x164>)
 8002818:	7a5b      	ldrb	r3, [r3, #9]
 800281a:	b99b      	cbnz	r3, 8002844 <SendTxData+0xe8>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800281c:	2200      	movs	r2, #0
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <SendTxData+0x160>)
 8002820:	78d9      	ldrb	r1, [r3, #3]
 8002822:	4821      	ldr	r0, [pc, #132]	; (80028a8 <SendTxData+0x14c>)
 8002824:	f008 f928 	bl	800aa78 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002828:	b1d0      	cbz	r0, 8002860 <SendTxData+0x104>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800282a:	f110 0f06 	cmn.w	r0, #6
 800282e:	d020      	beq.n	8002872 <SendTxData+0x116>
    nextTxIn = 60000; /** ADDED ADDITIONAL DELAY WHEN SEND SENSOR DATA**/
 8002830:	f64e 2560 	movw	r5, #60000	; 0xea60
 8002834:	e79b      	b.n	800276e <SendTxData+0x12>
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <SendTxData+0x14c>)
 8002838:	685c      	ldr	r4, [r3, #4]
 800283a:	f7ff f92d 	bl	8001a98 <GetBatteryLevel>
 800283e:	71e0      	strb	r0, [r4, #7]
 8002840:	2208      	movs	r2, #8
 8002842:	e7e6      	b.n	8002812 <SendTxData+0xb6>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002844:	f008 f814 	bl	800a870 <LmHandlerJoinStatus>
 8002848:	2801      	cmp	r0, #1
 800284a:	d1e7      	bne.n	800281c <SendTxData+0xc0>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800284c:	481c      	ldr	r0, [pc, #112]	; (80028c0 <SendTxData+0x164>)
 800284e:	f012 fc1f 	bl	8015090 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002852:	2200      	movs	r2, #0
 8002854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002858:	481a      	ldr	r0, [pc, #104]	; (80028c4 <SendTxData+0x168>)
 800285a:	f001 fea7 	bl	80045ac <HAL_GPIO_WritePin>
 800285e:	e7dd      	b.n	800281c <SendTxData+0xc0>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <SendTxData+0x16c>)
 8002862:	2201      	movs	r2, #1
 8002864:	2100      	movs	r1, #0
 8002866:	4610      	mov	r0, r2
 8002868:	f012 f99a 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    nextTxIn = 60000; /** ADDED ADDITIONAL DELAY WHEN SEND SENSOR DATA**/
 800286c:	f64e 2560 	movw	r5, #60000	; 0xea60
 8002870:	e77d      	b.n	800276e <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002872:	f007 fff7 	bl	800a864 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002876:	4605      	mov	r5, r0
 8002878:	2800      	cmp	r0, #0
 800287a:	f43f af78 	beq.w	800276e <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <SendTxData+0x170>)
 8002880:	fba3 2300 	umull	r2, r3, r3, r0
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <SendTxData+0x174>)
 800288a:	2201      	movs	r2, #1
 800288c:	2100      	movs	r1, #0
 800288e:	4610      	mov	r0, r2
 8002890:	f012 f986 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 8002894:	e76b      	b.n	800276e <SendTxData+0x12>
 8002896:	bf00      	nop
 8002898:	200004c0 	.word	0x200004c0
 800289c:	20000070 	.word	0x20000070
 80028a0:	08015b00 	.word	0x08015b00
 80028a4:	08015b0c 	.word	0x08015b0c
 80028a8:	20000004 	.word	0x20000004
 80028ac:	200004e4 	.word	0x200004e4
 80028b0:	200004dc 	.word	0x200004dc
 80028b4:	200004e0 	.word	0x200004e0
 80028b8:	200004d8 	.word	0x200004d8
 80028bc:	20000058 	.word	0x20000058
 80028c0:	20000450 	.word	0x20000450
 80028c4:	48000400 	.word	0x48000400
 80028c8:	08015b18 	.word	0x08015b18
 80028cc:	10624dd3 	.word	0x10624dd3
 80028d0:	08015b28 	.word	0x08015b28

080028d4 <Thd_LoraSendProcess>:
{
 80028d4:	b500      	push	{lr}
 80028d6:	b083      	sub	sp, #12
	MX_I2C1_Init();
 80028d8:	f7fe fe94 	bl	8001604 <MX_I2C1_Init>
	app_read_sensor_data(&sensor_data_buff);
 80028dc:	4c26      	ldr	r4, [pc, #152]	; (8002978 <Thd_LoraSendProcess+0xa4>)
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 fab2 	bl	8002e48 <app_read_sensor_data>
	int_temp_data = (int)sensor_data_buff.temp;
 80028e4:	6826      	ldr	r6, [r4, #0]
 80028e6:	4630      	mov	r0, r6
 80028e8:	f7fe f91c 	bl	8000b24 <__aeabi_f2iz>
 80028ec:	4605      	mov	r5, r0
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <Thd_LoraSendProcess+0xa8>)
 80028f0:	6018      	str	r0, [r3, #0]
	decimal_temp_data = (int)((sensor_data_buff.temp - int_temp_data) * 100);
 80028f2:	f7fd ff73 	bl	80007dc <__aeabi_i2f>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4630      	mov	r0, r6
 80028fa:	f7fd feb9 	bl	8000670 <__aeabi_fsub>
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <Thd_LoraSendProcess+0xac>)
 8002900:	f7fd ffc0 	bl	8000884 <__aeabi_fmul>
 8002904:	f7fe f90e 	bl	8000b24 <__aeabi_f2iz>
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <Thd_LoraSendProcess+0xb0>)
 800290a:	6018      	str	r0, [r3, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "***TEMP: %d.%02d \r\n", int_temp_data, decimal_temp_data);
 800290c:	9001      	str	r0, [sp, #4]
 800290e:	9500      	str	r5, [sp, #0]
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <Thd_LoraSendProcess+0xb4>)
 8002912:	2200      	movs	r2, #0
 8002914:	4611      	mov	r1, r2
 8002916:	2002      	movs	r0, #2
 8002918:	f012 f942 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
	int_hum_data = (int)sensor_data_buff.r_hum;
 800291c:	6866      	ldr	r6, [r4, #4]
 800291e:	4630      	mov	r0, r6
 8002920:	f7fe f900 	bl	8000b24 <__aeabi_f2iz>
 8002924:	4605      	mov	r5, r0
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <Thd_LoraSendProcess+0xb8>)
 8002928:	6018      	str	r0, [r3, #0]
	decimal_hum_data = (int)((sensor_data_buff.r_hum - int_hum_data) * 100);
 800292a:	f7fd ff57 	bl	80007dc <__aeabi_i2f>
 800292e:	4601      	mov	r1, r0
 8002930:	4630      	mov	r0, r6
 8002932:	f7fd fe9d 	bl	8000670 <__aeabi_fsub>
 8002936:	4912      	ldr	r1, [pc, #72]	; (8002980 <Thd_LoraSendProcess+0xac>)
 8002938:	f7fd ffa4 	bl	8000884 <__aeabi_fmul>
 800293c:	f7fe f8f2 	bl	8000b24 <__aeabi_f2iz>
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <Thd_LoraSendProcess+0xbc>)
 8002942:	6018      	str	r0, [r3, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "***HUM: %d.%02d \r\n", int_hum_data, decimal_hum_data);
 8002944:	9001      	str	r0, [sp, #4]
 8002946:	9500      	str	r5, [sp, #0]
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <Thd_LoraSendProcess+0xc0>)
 800294a:	2200      	movs	r2, #0
 800294c:	4611      	mov	r1, r2
 800294e:	2002      	movs	r0, #2
 8002950:	f012 f926 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "***STATUS REG: %04X \r\n", sensor_data_buff.status_reg);
 8002954:	8923      	ldrh	r3, [r4, #8]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <Thd_LoraSendProcess+0xc4>)
 800295a:	2200      	movs	r2, #0
 800295c:	4611      	mov	r1, r2
 800295e:	2002      	movs	r0, #2
 8002960:	f012 f91e 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
	osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002968:	2100      	movs	r1, #0
 800296a:	2001      	movs	r0, #1
 800296c:	f005 fe62 	bl	8008634 <osThreadFlagsWait>
	SendTxData();  /*what you want to do*/
 8002970:	f7ff fef4 	bl	800275c <SendTxData>
  for (;;)
 8002974:	e7b0      	b.n	80028d8 <Thd_LoraSendProcess+0x4>
 8002976:	bf00      	nop
 8002978:	200004e8 	.word	0x200004e8
 800297c:	200004e4 	.word	0x200004e4
 8002980:	42c80000 	.word	0x42c80000
 8002984:	200004dc 	.word	0x200004dc
 8002988:	08015b48 	.word	0x08015b48
 800298c:	200004e0 	.word	0x200004e0
 8002990:	200004d8 	.word	0x200004d8
 8002994:	08015b5c 	.word	0x08015b5c
 8002998:	08015b70 	.word	0x08015b70

0800299c <Thd_LmHandlerProcess>:
{
 800299c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 800299e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a2:	2100      	movs	r1, #0
 80029a4:	2001      	movs	r0, #1
 80029a6:	f005 fe45 	bl	8008634 <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 80029aa:	f007 ff53 	bl	800a854 <LmHandlerProcess>
  for (;;)
 80029ae:	e7f6      	b.n	800299e <Thd_LmHandlerProcess+0x2>

080029b0 <OnJoinTimerLedEvent>:
{
 80029b0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80029b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029b6:	4802      	ldr	r0, [pc, #8]	; (80029c0 <OnJoinTimerLedEvent+0x10>)
 80029b8:	f001 fdfd 	bl	80045b6 <HAL_GPIO_TogglePin>
}
 80029bc:	bd08      	pop	{r3, pc}
 80029be:	bf00      	nop
 80029c0:	48000400 	.word	0x48000400

080029c4 <LoRaWAN_Init>:
{
 80029c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c6:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 80029c8:	2400      	movs	r4, #0
 80029ca:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80029cc:	9402      	str	r4, [sp, #8]
 80029ce:	2703      	movs	r7, #3
 80029d0:	9701      	str	r7, [sp, #4]
 80029d2:	2601      	movs	r6, #1
 80029d4:	9600      	str	r6, [sp, #0]
 80029d6:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <LoRaWAN_Init+0x184>)
 80029d8:	4622      	mov	r2, r4
 80029da:	4621      	mov	r1, r4
 80029dc:	2002      	movs	r0, #2
 80029de:	f012 f8df 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80029e2:	9402      	str	r4, [sp, #8]
 80029e4:	2305      	movs	r3, #5
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2502      	movs	r5, #2
 80029ea:	9500      	str	r5, [sp, #0]
 80029ec:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <LoRaWAN_Init+0x188>)
 80029ee:	4622      	mov	r2, r4
 80029f0:	4621      	mov	r1, r4
 80029f2:	4628      	mov	r0, r5
 80029f4:	f012 f8d4 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80029f8:	9402      	str	r4, [sp, #8]
 80029fa:	9701      	str	r7, [sp, #4]
 80029fc:	9600      	str	r6, [sp, #0]
 80029fe:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <LoRaWAN_Init+0x18c>)
 8002a00:	4622      	mov	r2, r4
 8002a02:	4621      	mov	r1, r4
 8002a04:	4628      	mov	r0, r5
 8002a06:	f012 f8cb 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002a0a:	a905      	add	r1, sp, #20
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f008 fab3 	bl	800af78 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002a12:	9b05      	ldr	r3, [sp, #20]
 8002a14:	0e1a      	lsrs	r2, r3, #24
 8002a16:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002a1a:	9102      	str	r1, [sp, #8]
 8002a1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	9200      	str	r2, [sp, #0]
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <LoRaWAN_Init+0x190>)
 8002a26:	4622      	mov	r2, r4
 8002a28:	4621      	mov	r1, r4
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	f012 f8b8 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002a30:	a905      	add	r1, sp, #20
 8002a32:	4630      	mov	r0, r6
 8002a34:	f008 faa0 	bl	800af78 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002a38:	9b05      	ldr	r3, [sp, #20]
 8002a3a:	0e1a      	lsrs	r2, r3, #24
 8002a3c:	b2d9      	uxtb	r1, r3
 8002a3e:	9103      	str	r1, [sp, #12]
 8002a40:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002a44:	9102      	str	r1, [sp, #8]
 8002a46:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <LoRaWAN_Init+0x194>)
 8002a50:	4622      	mov	r2, r4
 8002a52:	4621      	mov	r1, r4
 8002a54:	4628      	mov	r0, r5
 8002a56:	f012 f8a3 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002a5a:	9400      	str	r4, [sp, #0]
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <LoRaWAN_Init+0x198>)
 8002a5e:	4622      	mov	r2, r4
 8002a60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a64:	483e      	ldr	r0, [pc, #248]	; (8002b60 <LoRaWAN_Init+0x19c>)
 8002a66:	f012 fab5 	bl	8014fd4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002a6a:	9400      	str	r4, [sp, #0]
 8002a6c:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <LoRaWAN_Init+0x1a0>)
 8002a6e:	4622      	mov	r2, r4
 8002a70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a74:	483c      	ldr	r0, [pc, #240]	; (8002b68 <LoRaWAN_Init+0x1a4>)
 8002a76:	f012 faad 	bl	8014fd4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002a7a:	9400      	str	r4, [sp, #0]
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <LoRaWAN_Init+0x1a8>)
 8002a7e:	4632      	mov	r2, r6
 8002a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a84:	483a      	ldr	r0, [pc, #232]	; (8002b70 <LoRaWAN_Init+0x1ac>)
 8002a86:	f012 faa5 	bl	8014fd4 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7fe fce8 	bl	8001460 <FLASH_IF_Init>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d149      	bne.n	8002b28 <LoRaWAN_Init+0x164>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002a94:	2400      	movs	r4, #0
 8002a96:	9400      	str	r4, [sp, #0]
 8002a98:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <LoRaWAN_Init+0x1b0>)
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002aa0:	4835      	ldr	r0, [pc, #212]	; (8002b78 <LoRaWAN_Init+0x1b4>)
 8002aa2:	f012 fa97 	bl	8014fd4 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8002aa6:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <LoRaWAN_Init+0x1b8>)
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	4835      	ldr	r0, [pc, #212]	; (8002b80 <LoRaWAN_Init+0x1bc>)
 8002aac:	f005 fd0e 	bl	80084cc <osThreadNew>
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <LoRaWAN_Init+0x1c0>)
 8002ab2:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d03a      	beq.n	8002b2e <LoRaWAN_Init+0x16a>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 8002ab8:	4a33      	ldr	r2, [pc, #204]	; (8002b88 <LoRaWAN_Init+0x1c4>)
 8002aba:	2100      	movs	r1, #0
 8002abc:	4833      	ldr	r0, [pc, #204]	; (8002b8c <LoRaWAN_Init+0x1c8>)
 8002abe:	f005 fd05 	bl	80084cc <osThreadNew>
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <LoRaWAN_Init+0x1cc>)
 8002ac4:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d034      	beq.n	8002b34 <LoRaWAN_Init+0x170>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 8002aca:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <LoRaWAN_Init+0x1d0>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	4832      	ldr	r0, [pc, #200]	; (8002b98 <LoRaWAN_Init+0x1d4>)
 8002ad0:	f005 fcfc 	bl	80084cc <osThreadNew>
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <LoRaWAN_Init+0x1d8>)
 8002ad6:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 8002ad8:	b378      	cbz	r0, 8002b3a <LoRaWAN_Init+0x176>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <LoRaWAN_Init+0x1dc>)
 8002adc:	2100      	movs	r1, #0
 8002ade:	4831      	ldr	r0, [pc, #196]	; (8002ba4 <LoRaWAN_Init+0x1e0>)
 8002ae0:	f005 fcf4 	bl	80084cc <osThreadNew>
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <LoRaWAN_Init+0x1e4>)
 8002ae6:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 8002ae8:	b350      	cbz	r0, 8002b40 <LoRaWAN_Init+0x17c>
  LoraInfo_Init();
 8002aea:	f000 f883 	bl	8002bf4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002aee:	492f      	ldr	r1, [pc, #188]	; (8002bac <LoRaWAN_Init+0x1e8>)
 8002af0:	482f      	ldr	r0, [pc, #188]	; (8002bb0 <LoRaWAN_Init+0x1ec>)
 8002af2:	f008 fa01 	bl	800aef8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002af6:	482f      	ldr	r0, [pc, #188]	; (8002bb4 <LoRaWAN_Init+0x1f0>)
 8002af8:	f008 f8dc 	bl	800acb4 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002afc:	481c      	ldr	r0, [pc, #112]	; (8002b70 <LoRaWAN_Init+0x1ac>)
 8002afe:	f012 fb21 	bl	8015144 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002b02:	2100      	movs	r1, #0
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <LoRaWAN_Init+0x1f4>)
 8002b06:	7818      	ldrb	r0, [r3, #0]
 8002b08:	f007 ff1e 	bl	800a948 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002b0c:	4c2b      	ldr	r4, [pc, #172]	; (8002bbc <LoRaWAN_Init+0x1f8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <LoRaWAN_Init+0x1fc>)
 8002b14:	492b      	ldr	r1, [pc, #172]	; (8002bc4 <LoRaWAN_Init+0x200>)
 8002b16:	6809      	ldr	r1, [r1, #0]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f012 fa5b 	bl	8014fd4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f012 fb10 	bl	8015144 <UTIL_TIMER_Start>
}
 8002b24:	b007      	add	sp, #28
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002b28:	f7fe fdf0 	bl	800170c <Error_Handler>
 8002b2c:	e7b2      	b.n	8002a94 <LoRaWAN_Init+0xd0>
    Error_Handler();
 8002b2e:	f7fe fded 	bl	800170c <Error_Handler>
 8002b32:	e7c1      	b.n	8002ab8 <LoRaWAN_Init+0xf4>
    Error_Handler();
 8002b34:	f7fe fdea 	bl	800170c <Error_Handler>
 8002b38:	e7c7      	b.n	8002aca <LoRaWAN_Init+0x106>
    Error_Handler();
 8002b3a:	f7fe fde7 	bl	800170c <Error_Handler>
 8002b3e:	e7cc      	b.n	8002ada <LoRaWAN_Init+0x116>
    Error_Handler();
 8002b40:	f7fe fde4 	bl	800170c <Error_Handler>
 8002b44:	e7d1      	b.n	8002aea <LoRaWAN_Init+0x126>
 8002b46:	bf00      	nop
 8002b48:	08015b88 	.word	0x08015b88
 8002b4c:	08015bac 	.word	0x08015bac
 8002b50:	08015bd0 	.word	0x08015bd0
 8002b54:	08015bf4 	.word	0x08015bf4
 8002b58:	08015c18 	.word	0x08015c18
 8002b5c:	08002519 	.word	0x08002519
 8002b60:	200004a8 	.word	0x200004a8
 8002b64:	08002505 	.word	0x08002505
 8002b68:	20000468 	.word	0x20000468
 8002b6c:	080029b1 	.word	0x080029b1
 8002b70:	20000450 	.word	0x20000450
 8002b74:	080024b9 	.word	0x080024b9
 8002b78:	20000480 	.word	0x20000480
 8002b7c:	08015ca8 	.word	0x08015ca8
 8002b80:	0800299d 	.word	0x0800299d
 8002b84:	20000498 	.word	0x20000498
 8002b88:	08015ccc 	.word	0x08015ccc
 8002b8c:	080028d5 	.word	0x080028d5
 8002b90:	2000049c 	.word	0x2000049c
 8002b94:	08015d14 	.word	0x08015d14
 8002b98:	08002749 	.word	0x08002749
 8002b9c:	200004a4 	.word	0x200004a4
 8002ba0:	08015cf0 	.word	0x08015cf0
 8002ba4:	080026fd 	.word	0x080026fd
 8002ba8:	200004a0 	.word	0x200004a0
 8002bac:	01030000 	.word	0x01030000
 8002bb0:	2000000c 	.word	0x2000000c
 8002bb4:	20000058 	.word	0x20000058
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	200004c0 	.word	0x200004c0
 8002bc0:	080022dd 	.word	0x080022dd
 8002bc4:	20000070 	.word	0x20000070

08002bc8 <HAL_GPIO_EXTI_Callback>:
{
 8002bc8:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	d002      	beq.n	8002bd4 <HAL_GPIO_EXTI_Callback+0xc>
 8002bce:	2840      	cmp	r0, #64	; 0x40
 8002bd0:	d006      	beq.n	8002be0 <HAL_GPIO_EXTI_Callback+0x18>
}
 8002bd2:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_GPIO_EXTI_Callback+0x24>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f005 fce3 	bl	80085a4 <osThreadFlagsSet>
      break;
 8002bde:	e7f8      	b.n	8002bd2 <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002be0:	2101      	movs	r1, #1
 8002be2:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x28>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	f005 fcdd 	bl	80085a4 <osThreadFlagsSet>
}
 8002bea:	e7f2      	b.n	8002bd2 <HAL_GPIO_EXTI_Callback+0xa>
 8002bec:	200004a0 	.word	0x200004a0
 8002bf0:	200004a4 	.word	0x200004a4

08002bf4 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <LoraInfo_Init+0x1c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002bfa:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002bfc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002bfe:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002c00:	2220      	movs	r2, #32
 8002c02:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002c04:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002c08:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002c0e:	4770      	bx	lr
 8002c10:	200004f4 	.word	0x200004f4

08002c14 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002c14:	4800      	ldr	r0, [pc, #0]	; (8002c18 <LoraInfo_GetPtr+0x4>)
 8002c16:	4770      	bx	lr
 8002c18:	200004f4 	.word	0x200004f4

08002c1c <sht30_uint8_to_uint16>:
/**
 * Converts two uint8_t vars into one uint16_t var
 */
static uint16_t sht30_uint8_to_uint16(uint8_t msb, uint8_t lsb){
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
}
 8002c1c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8002c20:	4770      	bx	lr
	...

08002c24 <sht30_calculate_crc>:
sensor_status_t sht30_calculate_crc(const uint8_t *data, size_t length){
 8002c24:	b508      	push	{r3, lr}
	for (size_t i = 0; i < length; i++) {
 8002c26:	f04f 0c00 	mov.w	ip, #0
	uint8_t crc = 0xff;
 8002c2a:	23ff      	movs	r3, #255	; 0xff
	for (size_t i = 0; i < length; i++) {
 8002c2c:	e00e      	b.n	8002c4c <sht30_calculate_crc+0x28>
				crc <<= 1u;
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < 8; j++) {
 8002c32:	3201      	adds	r2, #1
 8002c34:	2a07      	cmp	r2, #7
 8002c36:	d807      	bhi.n	8002c48 <sht30_calculate_crc+0x24>
			if ((crc & 0x80u) != 0) {
 8002c38:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c3c:	d0f7      	beq.n	8002c2e <sht30_calculate_crc+0xa>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002c46:	e7f4      	b.n	8002c32 <sht30_calculate_crc+0xe>
	for (size_t i = 0; i < length; i++) {
 8002c48:	f10c 0c01 	add.w	ip, ip, #1
 8002c4c:	458c      	cmp	ip, r1
 8002c4e:	d204      	bcs.n	8002c5a <sht30_calculate_crc+0x36>
		crc ^= data[i];
 8002c50:	f810 200c 	ldrb.w	r2, [r0, ip]
 8002c54:	4053      	eors	r3, r2
		for (size_t j = 0; j < 8; j++) {
 8002c56:	2200      	movs	r2, #0
 8002c58:	e7ec      	b.n	8002c34 <sht30_calculate_crc+0x10>
	if (crc != data[length]) {
 8002c5a:	5c42      	ldrb	r2, [r0, r1]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d101      	bne.n	8002c64 <sht30_calculate_crc+0x40>
		return SENSOR_STATUS_OK;
 8002c60:	2001      	movs	r0, #1
}
 8002c62:	bd08      	pop	{r3, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 CRC Check ERROR\r\n");
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <sht30_calculate_crc+0x50>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	4611      	mov	r1, r2
 8002c6a:	2002      	movs	r0, #2
 8002c6c:	f011 ff98 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002c70:	2002      	movs	r0, #2
 8002c72:	e7f6      	b.n	8002c62 <sht30_calculate_crc+0x3e>
 8002c74:	08015d50 	.word	0x08015d50

08002c78 <sht30_check_status_register>:
sensor_status_t sht30_check_status_register(struct sensor_data_t* data_buff){
 8002c78:	b530      	push	{r4, r5, lr}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	4605      	mov	r5, r0
	if (HAL_I2C_Mem_Read(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, SHT30_COMMAND_READ_STATUS, 2, (uint8_t*)&buff,
 8002c7e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	2303      	movs	r3, #3
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	ab05      	add	r3, sp, #20
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8002c92:	218a      	movs	r1, #138	; 0x8a
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <sht30_check_status_register+0x78>)
 8002c96:	f002 f881 	bl	8004d9c <HAL_I2C_Mem_Read>
 8002c9a:	b950      	cbnz	r0, 8002cb2 <sht30_check_status_register+0x3a>
	if(sht30_calculate_crc(buff, 2) == SENSOR_STATUS_OK){
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	a805      	add	r0, sp, #20
 8002ca0:	f7ff ffc0 	bl	8002c24 <sht30_calculate_crc>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	2801      	cmp	r0, #1
 8002ca8:	d00b      	beq.n	8002cc2 <sht30_check_status_register+0x4a>
		return SENSOR_STATUS_ERROR;
 8002caa:	2402      	movs	r4, #2
}
 8002cac:	4620      	mov	r0, r4
 8002cae:	b007      	add	sp, #28
 8002cb0:	bd30      	pop	{r4, r5, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Mem_Read ERROR\r\n");
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <sht30_check_status_register+0x7c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f011 ff71 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002cbe:	2402      	movs	r4, #2
 8002cc0:	e7f4      	b.n	8002cac <sht30_check_status_register+0x34>
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Status register and CRC: %02X %02X %02X\r\n", buff[0], buff[1], buff[2]);
 8002cc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002cc6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002cca:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002cce:	9102      	str	r1, [sp, #8]
 8002cd0:	9201      	str	r2, [sp, #4]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <sht30_check_status_register+0x80>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f011 ff60 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		data_buff->status_reg = sht30_uint8_to_uint16(buff[0], buff[1]);
 8002ce0:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8002ce4:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002ce8:	f7ff ff98 	bl	8002c1c <sht30_uint8_to_uint16>
 8002cec:	8128      	strh	r0, [r5, #8]
		return SENSOR_STATUS_OK;
 8002cee:	e7dd      	b.n	8002cac <sht30_check_status_register+0x34>
 8002cf0:	200001bc 	.word	0x200001bc
 8002cf4:	08015d68 	.word	0x08015d68
 8002cf8:	08015d88 	.word	0x08015d88

08002cfc <sht30_send_command>:
sensor_status_t sht30_send_command(sht30_command_t command){
 8002cfc:	b500      	push	{lr}
 8002cfe:	b085      	sub	sp, #20
	uint8_t command_buff[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8002d00:	0a03      	lsrs	r3, r0, #8
 8002d02:	f88d 300c 	strb.w	r3, [sp, #12]
 8002d06:	f88d 000d 	strb.w	r0, [sp, #13]
	if (HAL_I2C_Master_Transmit(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, command_buff, sizeof(command_buff),
 8002d0a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2302      	movs	r3, #2
 8002d12:	aa03      	add	r2, sp, #12
 8002d14:	218a      	movs	r1, #138	; 0x8a
 8002d16:	4808      	ldr	r0, [pc, #32]	; (8002d38 <sht30_send_command+0x3c>)
 8002d18:	f001 fec4 	bl	8004aa4 <HAL_I2C_Master_Transmit>
 8002d1c:	b918      	cbnz	r0, 8002d26 <sht30_send_command+0x2a>
		return SENSOR_STATUS_OK;
 8002d1e:	2001      	movs	r0, #1
}
 8002d20:	b005      	add	sp, #20
 8002d22:	f85d fb04 	ldr.w	pc, [sp], #4
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Master_Transmit ERROR\r\n");
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <sht30_send_command+0x40>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	2002      	movs	r0, #2
 8002d2e:	f011 ff37 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002d32:	2002      	movs	r0, #2
 8002d34:	e7f4      	b.n	8002d20 <sht30_send_command+0x24>
 8002d36:	bf00      	nop
 8002d38:	200001bc 	.word	0x200001bc
 8002d3c:	08015db8 	.word	0x08015db8

08002d40 <sht30_read_temperature_and_humidity>:
sensor_status_t sht30_read_temperature_and_humidity(struct sensor_data_t* data_buff){
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b087      	sub	sp, #28
 8002d44:	4604      	mov	r4, r0
	sht30_send_command(SHT30_COMMAND_MEASURE_SINGLE);
 8002d46:	f642 4006 	movw	r0, #11270	; 0x2c06
 8002d4a:	f7ff ffd7 	bl	8002cfc <sht30_send_command>
	HAL_Delay(1);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7fe ff32 	bl	8001bb8 <HAL_Delay>
	if (HAL_I2C_Master_Receive(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, buff, sizeof(buff), SHT30_I2C_TIMEOUT) != HAL_OK) {
 8002d54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	aa04      	add	r2, sp, #16
 8002d5e:	218a      	movs	r1, #138	; 0x8a
 8002d60:	4831      	ldr	r0, [pc, #196]	; (8002e28 <sht30_read_temperature_and_humidity+0xe8>)
 8002d62:	f001 ff5d 	bl	8004c20 <HAL_I2C_Master_Receive>
 8002d66:	b908      	cbnz	r0, 8002d6c <sht30_read_temperature_and_humidity+0x2c>
	for(int i=0; i<3; i++){
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e016      	b.n	8002d9a <sht30_read_temperature_and_humidity+0x5a>
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Master_Receive ERROR\r\n");
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <sht30_read_temperature_and_humidity+0xec>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4611      	mov	r1, r2
 8002d72:	2002      	movs	r0, #2
 8002d74:	f011 ff14 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002d78:	2502      	movs	r5, #2
 8002d7a:	e042      	b.n	8002e02 <sht30_read_temperature_and_humidity+0xc2>
		temp_buff[i] = buff[i];
 8002d7c:	f103 0218 	add.w	r2, r3, #24
 8002d80:	446a      	add	r2, sp
 8002d82:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8002d86:	f802 1c0c 	strb.w	r1, [r2, #-12]
		r_hum_buff[i] = buff[i+3];
 8002d8a:	f103 011b 	add.w	r1, r3, #27
 8002d8e:	4469      	add	r1, sp
 8002d90:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8002d94:	f802 1c10 	strb.w	r1, [r2, #-16]
	for(int i=0; i<3; i++){
 8002d98:	3301      	adds	r3, #1
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	ddee      	ble.n	8002d7c <sht30_read_temperature_and_humidity+0x3c>
	if (sht30_calculate_crc(temp_buff, 2) != SENSOR_STATUS_OK){
 8002d9e:	2102      	movs	r1, #2
 8002da0:	a803      	add	r0, sp, #12
 8002da2:	f7ff ff3f 	bl	8002c24 <sht30_calculate_crc>
 8002da6:	2801      	cmp	r0, #1
 8002da8:	d12e      	bne.n	8002e08 <sht30_read_temperature_and_humidity+0xc8>
		if (sht30_calculate_crc(r_hum_buff, 2) != SENSOR_STATUS_OK){
 8002daa:	2102      	movs	r1, #2
 8002dac:	a802      	add	r0, sp, #8
 8002dae:	f7ff ff39 	bl	8002c24 <sht30_calculate_crc>
 8002db2:	4605      	mov	r5, r0
 8002db4:	2801      	cmp	r0, #1
 8002db6:	d12f      	bne.n	8002e18 <sht30_read_temperature_and_humidity+0xd8>
			temperature_raw = sht30_uint8_to_uint16(buff[0], buff[1]);
 8002db8:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8002dbc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002dc0:	f7ff ff2c 	bl	8002c1c <sht30_uint8_to_uint16>
 8002dc4:	4607      	mov	r7, r0
			humidity_raw = sht30_uint8_to_uint16(buff[3], buff[4]);
 8002dc6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8002dca:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002dce:	f7ff ff25 	bl	8002c1c <sht30_uint8_to_uint16>
 8002dd2:	4606      	mov	r6, r0
			data_buff->temp = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	f7fd fcfd 	bl	80007d4 <__aeabi_ui2f>
 8002dda:	4915      	ldr	r1, [pc, #84]	; (8002e30 <sht30_read_temperature_and_humidity+0xf0>)
 8002ddc:	f7fd fd52 	bl	8000884 <__aeabi_fmul>
 8002de0:	4914      	ldr	r1, [pc, #80]	; (8002e34 <sht30_read_temperature_and_humidity+0xf4>)
 8002de2:	f7fd fe03 	bl	80009ec <__aeabi_fdiv>
 8002de6:	4914      	ldr	r1, [pc, #80]	; (8002e38 <sht30_read_temperature_and_humidity+0xf8>)
 8002de8:	f7fd fc42 	bl	8000670 <__aeabi_fsub>
 8002dec:	6020      	str	r0, [r4, #0]
			data_buff->r_hum = 100.0f * (float)humidity_raw / 65535.0f;
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7fd fcf0 	bl	80007d4 <__aeabi_ui2f>
 8002df4:	4911      	ldr	r1, [pc, #68]	; (8002e3c <sht30_read_temperature_and_humidity+0xfc>)
 8002df6:	f7fd fd45 	bl	8000884 <__aeabi_fmul>
 8002dfa:	490e      	ldr	r1, [pc, #56]	; (8002e34 <sht30_read_temperature_and_humidity+0xf4>)
 8002dfc:	f7fd fdf6 	bl	80009ec <__aeabi_fdiv>
 8002e00:	6060      	str	r0, [r4, #4]
}
 8002e02:	4628      	mov	r0, r5
 8002e04:	b007      	add	sp, #28
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Temperature data CRC ERROR\r\n");
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <sht30_read_temperature_and_humidity+0x100>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f011 fec6 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002e14:	2502      	movs	r5, #2
 8002e16:	e7f4      	b.n	8002e02 <sht30_read_temperature_and_humidity+0xc2>
			APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Humidity data CRC ERROR\r\n");
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <sht30_read_temperature_and_humidity+0x104>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f011 febe 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
			return SENSOR_STATUS_ERROR;
 8002e24:	2502      	movs	r5, #2
 8002e26:	e7ec      	b.n	8002e02 <sht30_read_temperature_and_humidity+0xc2>
 8002e28:	200001bc 	.word	0x200001bc
 8002e2c:	08015de0 	.word	0x08015de0
 8002e30:	432f0000 	.word	0x432f0000
 8002e34:	477fff00 	.word	0x477fff00
 8002e38:	42340000 	.word	0x42340000
 8002e3c:	42c80000 	.word	0x42c80000
 8002e40:	08015e08 	.word	0x08015e08
 8002e44:	08015e2c 	.word	0x08015e2c

08002e48 <app_read_sensor_data>:
sensor_status_t app_read_sensor_data(struct sensor_data_t* data_buff){
 8002e48:	b510      	push	{r4, lr}
	if (data_buff != NULL){
 8002e4a:	b1a8      	cbz	r0, 8002e78 <app_read_sensor_data+0x30>
 8002e4c:	4604      	mov	r4, r0
		if (sht30_status == SENSOR_STATUS_UNINITIALIZED){
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <app_read_sensor_data+0x38>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b133      	cbz	r3, 8002e62 <app_read_sensor_data+0x1a>
		if (sht30_status == SENSOR_STATUS_OK){
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <app_read_sensor_data+0x38>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <app_read_sensor_data+0x24>
}
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <app_read_sensor_data+0x38>)
 8002e5e:	7818      	ldrb	r0, [r3, #0]
 8002e60:	bd10      	pop	{r4, pc}
			sht30_status = sht30_check_status_register(data_buff);
 8002e62:	f7ff ff09 	bl	8002c78 <sht30_check_status_register>
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <app_read_sensor_data+0x38>)
 8002e68:	7018      	strb	r0, [r3, #0]
 8002e6a:	e7f3      	b.n	8002e54 <app_read_sensor_data+0xc>
			sht30_status = sht30_read_temperature_and_humidity(data_buff);
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ff67 	bl	8002d40 <sht30_read_temperature_and_humidity>
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <app_read_sensor_data+0x38>)
 8002e74:	7018      	strb	r0, [r3, #0]
 8002e76:	e7f1      	b.n	8002e5c <app_read_sensor_data+0x14>
		Error_Handler();
 8002e78:	f7fe fc48 	bl	800170c <Error_Handler>
 8002e7c:	e7ee      	b.n	8002e5c <app_read_sensor_data+0x14>
 8002e7e:	bf00      	nop
 8002e80:	20000504 	.word	0x20000504

08002e84 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002e84:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002e86:	f000 f83f 	bl	8002f08 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002e8a:	bd08      	pop	{r3, pc}

08002e8c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002e8c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002e8e:	f000 f87d 	bl	8002f8c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002e92:	bd08      	pop	{r3, pc}

08002e94 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002e94:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002e96:	f000 f8c7 	bl	8003028 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002e9a:	bd08      	pop	{r3, pc}

08002e9c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002e9c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002e9e:	f000 f8c5 	bl	800302c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002ea2:	bd08      	pop	{r3, pc}

08002ea4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002ea4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002ea6:	f000 f8c3 	bl	8003030 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002eaa:	bd08      	pop	{r3, pc}

08002eac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002eac:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002eae:	f000 f8c1 	bl	8003034 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002eb2:	bd08      	pop	{r3, pc}

08002eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb8:	f000 f8c1 	bl	800303e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	; (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ee2:	f012 fb3f 	bl	8015564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7fe fc5a 	bl	800179e <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   r0, =_estack
 8002eec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002ef8:	08016840 	.word	0x08016840
  ldr r2, =_sbss
 8002efc:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002f00:	20004230 	.word	0x20004230

08002f04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC_IRQHandler>
	...

08002f08 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002f0e:	2400      	movs	r4, #0
 8002f10:	9401      	str	r4, [sp, #4]
 8002f12:	9402      	str	r4, [sp, #8]
 8002f14:	9403      	str	r4, [sp, #12]
 8002f16:	9404      	str	r4, [sp, #16]
 8002f18:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f20:	f042 0204 	orr.w	r2, r2, #4
 8002f24:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002f2e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002f30:	2710      	movs	r7, #16
 8002f32:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002f3c:	4d12      	ldr	r5, [pc, #72]	; (8002f88 <BSP_RADIO_Init+0x80>)
 8002f3e:	a901      	add	r1, sp, #4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f001 f9e3 	bl	800430c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002f46:	f04f 0820 	mov.w	r8, #32
 8002f4a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002f4e:	a901      	add	r1, sp, #4
 8002f50:	4628      	mov	r0, r5
 8002f52:	f001 f9db 	bl	800430c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002f56:	2608      	movs	r6, #8
 8002f58:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002f5a:	a901      	add	r1, sp, #4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f001 f9d5 	bl	800430c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f62:	4622      	mov	r2, r4
 8002f64:	4641      	mov	r1, r8
 8002f66:	4628      	mov	r0, r5
 8002f68:	f001 fb20 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	4639      	mov	r1, r7
 8002f70:	4628      	mov	r0, r5
 8002f72:	f001 fb1b 	bl	80045ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002f76:	4622      	mov	r2, r4
 8002f78:	4631      	mov	r1, r6
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f001 fb16 	bl	80045ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002f80:	4620      	mov	r0, r4
 8002f82:	b006      	add	sp, #24
 8002f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f88:	48000800 	.word	0x48000800

08002f8c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002f8c:	b510      	push	{r4, lr}
  switch (Config)
 8002f8e:	2803      	cmp	r0, #3
 8002f90:	d813      	bhi.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002f92:	e8df f000 	tbb	[pc, r0]
 8002f96:	1402      	.short	0x1402
 8002f98:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002f9a:	4c22      	ldr	r4, [pc, #136]	; (8003024 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2108      	movs	r1, #8
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f001 fb03 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2110      	movs	r1, #16
 8002faa:	4620      	mov	r0, r4
 8002fac:	f001 fafe 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f001 faf9 	bl	80045ac <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002fba:	2000      	movs	r0, #0
 8002fbc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002fbe:	4c19      	ldr	r4, [pc, #100]	; (8003024 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2108      	movs	r1, #8
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f001 faf1 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2110      	movs	r1, #16
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f001 faec 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f001 fae7 	bl	80045ac <HAL_GPIO_WritePin>
      break;
 8002fde:	e7ec      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002fe0:	4c10      	ldr	r4, [pc, #64]	; (8003024 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2108      	movs	r1, #8
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f001 fae0 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002fec:	2201      	movs	r2, #1
 8002fee:	2110      	movs	r1, #16
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f001 fadb 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f001 fad6 	bl	80045ac <HAL_GPIO_WritePin>
      break;
 8003000:	e7db      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003002:	4c08      	ldr	r4, [pc, #32]	; (8003024 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003004:	2201      	movs	r2, #1
 8003006:	2108      	movs	r1, #8
 8003008:	4620      	mov	r0, r4
 800300a:	f001 facf 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800300e:	2200      	movs	r2, #0
 8003010:	2110      	movs	r1, #16
 8003012:	4620      	mov	r0, r4
 8003014:	f001 faca 	bl	80045ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003018:	2201      	movs	r2, #1
 800301a:	2120      	movs	r1, #32
 800301c:	4620      	mov	r0, r4
 800301e:	f001 fac5 	bl	80045ac <HAL_GPIO_WritePin>
      break;
 8003022:	e7ca      	b.n	8002fba <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003024:	48000800 	.word	0x48000800

08003028 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003028:	2000      	movs	r0, #0
 800302a:	4770      	bx	lr

0800302c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800302c:	2001      	movs	r0, #1
 800302e:	4770      	bx	lr

08003030 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003030:	2001      	movs	r0, #1
 8003032:	4770      	bx	lr

08003034 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003034:	b908      	cbnz	r0, 800303a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003036:	200f      	movs	r0, #15
 8003038:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800303a:	2016      	movs	r0, #22
  }

  return ret;
}
 800303c:	4770      	bx	lr

0800303e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800303e:	4770      	bx	lr

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003042:	2003      	movs	r0, #3
 8003044:	f000 fd22 	bl	8003a8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003048:	f002 fc72 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_Init+0x28>)
 800304e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003050:	200f      	movs	r0, #15
 8003052:	f7fe fda3 	bl	8001b9c <HAL_InitTick>
 8003056:	b110      	cbz	r0, 800305e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003058:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800305a:	4620      	mov	r0, r4
 800305c:	bd10      	pop	{r4, pc}
 800305e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003060:	f7fe fc4c 	bl	80018fc <HAL_MspInit>
 8003064:	e7f9      	b.n	800305a <HAL_Init+0x1a>
 8003066:	bf00      	nop
 8003068:	20000074 	.word	0x20000074

0800306c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800306c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003070:	6913      	ldr	r3, [r2, #16]
 8003072:	f023 0302 	bic.w	r3, r3, #2
 8003076:	6113      	str	r3, [r2, #16]
}
 8003078:	4770      	bx	lr

0800307a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800307a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800307e:	6913      	ldr	r3, [r2, #16]
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6113      	str	r3, [r2, #16]
}
 8003086:	4770      	bx	lr

08003088 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003088:	4b01      	ldr	r3, [pc, #4]	; (8003090 <HAL_GetUIDw0+0x8>)
 800308a:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 800308e:	4770      	bx	lr
 8003090:	1fff7000 	.word	0x1fff7000

08003094 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003094:	4b01      	ldr	r3, [pc, #4]	; (800309c <HAL_GetUIDw1+0x8>)
 8003096:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 800309a:	4770      	bx	lr
 800309c:	1fff7000 	.word	0x1fff7000

080030a0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80030a0:	4b01      	ldr	r3, [pc, #4]	; (80030a8 <HAL_GetUIDw2+0x8>)
 80030a2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80030a6:	4770      	bx	lr
 80030a8:	1fff7000 	.word	0x1fff7000

080030ac <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80030ac:	4a02      	ldr	r2, [pc, #8]	; (80030b8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80030ae:	6853      	ldr	r3, [r2, #4]
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80030b6:	4770      	bx	lr
 80030b8:	e0042000 	.word	0xe0042000

080030bc <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80030bc:	4a02      	ldr	r2, [pc, #8]	; (80030c8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80030be:	6853      	ldr	r3, [r2, #4]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 80030c6:	4770      	bx	lr
 80030c8:	e0042000 	.word	0xe0042000

080030cc <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80030cc:	4a02      	ldr	r2, [pc, #8]	; (80030d8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80030ce:	6853      	ldr	r3, [r2, #4]
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 80030d6:	4770      	bx	lr
 80030d8:	e0042000 	.word	0xe0042000

080030dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030dc:	b530      	push	{r4, r5, lr}
 80030de:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80030e4:	2800      	cmp	r0, #0
 80030e6:	f000 8106 	beq.w	80032f6 <HAL_ADC_Init+0x21a>
 80030ea:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80030ee:	b1bb      	cbz	r3, 8003120 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030f2:	6893      	ldr	r3, [r2, #8]
 80030f4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80030f8:	d11f      	bne.n	800313a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80030fa:	6893      	ldr	r3, [r2, #8]
 80030fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003100:	f023 0317 	bic.w	r3, r3, #23
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_ADC_Init+0x220>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <HAL_ADC_Init+0x224>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	3301      	adds	r3, #1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800311e:	e009      	b.n	8003134 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003120:	f7fd fed0 	bl	8000ec4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003124:	2300      	movs	r3, #0
 8003126:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003128:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800312c:	e7e0      	b.n	80030f0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800312e:	9b01      	ldr	r3, [sp, #4]
 8003130:	3b01      	subs	r3, #1
 8003132:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003134:	9b01      	ldr	r3, [sp, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f9      	bne.n	800312e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800313a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800313c:	6893      	ldr	r3, [r2, #8]
 800313e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003142:	f040 809a 	bne.w	800327a <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003156:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003158:	6893      	ldr	r3, [r2, #8]
 800315a:	f013 0304 	ands.w	r3, r3, #4
 800315e:	d000      	beq.n	8003162 <HAL_ADC_Init+0x86>
 8003160:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003164:	f011 0f10 	tst.w	r1, #16
 8003168:	f040 80be 	bne.w	80032e8 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 80bb 	bne.w	80032e8 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003174:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800317e:	6893      	ldr	r3, [r2, #8]
 8003180:	f013 0f01 	tst.w	r3, #1
 8003184:	d14f      	bne.n	8003226 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003186:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003188:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800318a:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800318e:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003190:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003194:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003196:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800319a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800319c:	b109      	cbz	r1, 80031a2 <HAL_ADC_Init+0xc6>
 800319e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80031a2:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80031a4:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80031a6:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031a8:	6921      	ldr	r1, [r4, #16]
 80031aa:	2900      	cmp	r1, #0
 80031ac:	db67      	blt.n	800327e <HAL_ADC_Init+0x1a2>
 80031ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80031b2:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031b4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031bc:	f894 1020 	ldrb.w	r1, [r4, #32]
 80031c0:	2901      	cmp	r1, #1
 80031c2:	d05f      	beq.n	8003284 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031c6:	b121      	cbz	r1, 80031d2 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031c8:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80031cc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031ce:	4329      	orrs	r1, r5
 80031d0:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031d2:	68d1      	ldr	r1, [r2, #12]
 80031d4:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80031d8:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80031dc:	4319      	orrs	r1, r3
 80031de:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80031e6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031e8:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80031ea:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80031ee:	2901      	cmp	r1, #1
 80031f0:	d055      	beq.n	800329e <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80031f2:	6821      	ldr	r1, [r4, #0]
 80031f4:	690d      	ldr	r5, [r1, #16]
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_ADC_Init+0x228>)
 80031f8:	402b      	ands	r3, r5
 80031fa:	4313      	orrs	r3, r2
 80031fc:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031fe:	6863      	ldr	r3, [r4, #4]
 8003200:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003204:	d00f      	beq.n	8003226 <HAL_ADC_Init+0x14a>
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d00c      	beq.n	8003226 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800320c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003210:	d009      	beq.n	8003226 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003212:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_ADC_Init+0x22c>)
 8003214:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003218:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 800321c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003226:	6821      	ldr	r1, [r4, #0]
 8003228:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800322a:	694a      	ldr	r2, [r1, #20]
 800322c:	f022 0207 	bic.w	r2, r2, #7
 8003230:	4313      	orrs	r3, r2
 8003232:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003238:	6953      	ldr	r3, [r2, #20]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003242:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d133      	bne.n	80032b2 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800324e:	f063 030f 	orn	r3, r3, #15
 8003252:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003254:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 800325c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800325e:	429a      	cmp	r2, r3
 8003260:	d039      	beq.n	80032d6 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003264:	f023 0312 	bic.w	r3, r3, #18
 8003268:	f043 0310 	orr.w	r3, r3, #16
 800326c:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003276:	2001      	movs	r0, #1
 8003278:	e03b      	b.n	80032f2 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327a:	2000      	movs	r0, #0
 800327c:	e76c      	b.n	8003158 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800327e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003282:	e796      	b.n	80031b2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003284:	b915      	cbnz	r5, 800328c <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328a:	e79b      	b.n	80031c4 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800328c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800328e:	f041 0120 	orr.w	r1, r1, #32
 8003292:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003296:	f041 0101 	orr.w	r1, r1, #1
 800329a:	65e1      	str	r1, [r4, #92]	; 0x5c
 800329c:	e792      	b.n	80031c4 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 800329e:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80032a0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80032a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80032a4:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80032a6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80032a8:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	e79f      	b.n	80031f2 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b6:	d1cd      	bne.n	8003254 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80032b8:	6821      	ldr	r1, [r4, #0]
 80032ba:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80032bc:	69e3      	ldr	r3, [r4, #28]
 80032be:	3b01      	subs	r3, #1
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	f003 031c 	and.w	r3, r3, #28
 80032c6:	f06f 020f 	mvn.w	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032d0:	4313      	orrs	r3, r2
 80032d2:	628b      	str	r3, [r1, #40]	; 0x28
 80032d4:	e7be      	b.n	8003254 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80032d6:	2300      	movs	r3, #0
 80032d8:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80032da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032dc:	f023 0303 	bic.w	r3, r3, #3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80032e6:	e004      	b.n	80032f2 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032ea:	f043 0310 	orr.w	r3, r3, #16
 80032ee:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032f0:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80032f2:	b003      	add	sp, #12
 80032f4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80032f6:	2001      	movs	r0, #1
 80032f8:	e7fb      	b.n	80032f2 <HAL_ADC_Init+0x216>
 80032fa:	bf00      	nop
 80032fc:	20000074 	.word	0x20000074
 8003300:	053e2d63 	.word	0x053e2d63
 8003304:	1ffffc02 	.word	0x1ffffc02
 8003308:	40012000 	.word	0x40012000

0800330c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003312:	6946      	ldr	r6, [r0, #20]
 8003314:	2e08      	cmp	r6, #8
 8003316:	d005      	beq.n	8003324 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003318:	6803      	ldr	r3, [r0, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f013 0f01 	tst.w	r3, #1
 8003320:	d11e      	bne.n	8003360 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003322:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003324:	f7fe fc3c 	bl	8001ba0 <HAL_GetTick>
 8003328:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4232      	tst	r2, r6
 8003330:	d11c      	bne.n	800336c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003336:	d0f8      	beq.n	800332a <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003338:	f7fe fc32 	bl	8001ba0 <HAL_GetTick>
 800333c:	1bc3      	subs	r3, r0, r7
 800333e:	42ab      	cmp	r3, r5
 8003340:	d801      	bhi.n	8003346 <HAL_ADC_PollForConversion+0x3a>
 8003342:	2d00      	cmp	r5, #0
 8003344:	d1f1      	bne.n	800332a <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4233      	tst	r3, r6
 800334c:	d1ed      	bne.n	800332a <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800334e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003356:	2300      	movs	r3, #0
 8003358:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 800335c:	2003      	movs	r0, #3
 800335e:	e028      	b.n	80033b2 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003360:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003362:	f043 0320 	orr.w	r3, r3, #32
 8003366:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003368:	2001      	movs	r0, #1
 800336a:	e022      	b.n	80033b2 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800337a:	d115      	bne.n	80033a8 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800337c:	7ea2      	ldrb	r2, [r4, #26]
 800337e:	b99a      	cbnz	r2, 80033a8 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f012 0f08 	tst.w	r2, #8
 8003386:	d00f      	beq.n	80033a8 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	f012 0f04 	tst.w	r2, #4
 800338e:	d111      	bne.n	80033b4 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	f022 020c 	bic.w	r2, r2, #12
 8003396:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800339a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80033a8:	7e20      	ldrb	r0, [r4, #24]
 80033aa:	b960      	cbnz	r0, 80033c6 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	220c      	movs	r2, #12
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80033b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b6:	f043 0320 	orr.w	r3, r3, #32
 80033ba:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80033c4:	e7f0      	b.n	80033a8 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80033c6:	2000      	movs	r0, #0
 80033c8:	e7f3      	b.n	80033b2 <HAL_ADC_PollForConversion+0xa6>

080033ca <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033ca:	6803      	ldr	r3, [r0, #0]
 80033cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80033ce:	4770      	bx	lr

080033d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033d0:	b470      	push	{r4, r5, r6}
 80033d2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033d4:	2200      	movs	r2, #0
 80033d6:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033d8:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033da:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80033de:	2a01      	cmp	r2, #1
 80033e0:	f000 8103 	beq.w	80035ea <HAL_ADC_ConfigChannel+0x21a>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2201      	movs	r2, #1
 80033e8:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ec:	6802      	ldr	r2, [r0, #0]
 80033ee:	6890      	ldr	r0, [r2, #8]
 80033f0:	f010 0f04 	tst.w	r0, #4
 80033f4:	d00a      	beq.n	800340c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033f8:	f042 0220 	orr.w	r2, r2, #32
 80033fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033fe:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003406:	b003      	add	sp, #12
 8003408:	bc70      	pop	{r4, r5, r6}
 800340a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 800340c:	6848      	ldr	r0, [r1, #4]
 800340e:	2802      	cmp	r0, #2
 8003410:	f000 809c 	beq.w	800354c <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003414:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003418:	d027      	beq.n	800346a <HAL_ADC_ConfigChannel+0x9a>
 800341a:	4d75      	ldr	r5, [pc, #468]	; (80035f0 <HAL_ADC_ConfigChannel+0x220>)
 800341c:	42ac      	cmp	r4, r5
 800341e:	d024      	beq.n	800346a <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003420:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003422:	f000 001f 	and.w	r0, r0, #31
 8003426:	250f      	movs	r5, #15
 8003428:	4085      	lsls	r5, r0
 800342a:	ea24 0505 	bic.w	r5, r4, r5
 800342e:	680c      	ldr	r4, [r1, #0]
 8003430:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003434:	2e00      	cmp	r6, #0
 8003436:	d131      	bne.n	800349c <HAL_ADC_ConfigChannel+0xcc>
 8003438:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800343c:	4084      	lsls	r4, r0
 800343e:	432c      	orrs	r4, r5
 8003440:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003442:	684c      	ldr	r4, [r1, #4]
 8003444:	08a0      	lsrs	r0, r4, #2
 8003446:	3001      	adds	r0, #1
 8003448:	69dd      	ldr	r5, [r3, #28]
 800344a:	42a8      	cmp	r0, r5
 800344c:	d813      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800344e:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003450:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003452:	f004 041f 	and.w	r4, r4, #31
 8003456:	260f      	movs	r6, #15
 8003458:	40a6      	lsls	r6, r4
 800345a:	ea20 0006 	bic.w	r0, r0, r6
 800345e:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003462:	40a5      	lsls	r5, r4
 8003464:	4328      	orrs	r0, r5
 8003466:	6290      	str	r0, [r2, #40]	; 0x28
}
 8003468:	e005      	b.n	8003476 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800346a:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800346c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800346e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003472:	4320      	orrs	r0, r4
 8003474:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003476:	681c      	ldr	r4, [r3, #0]
 8003478:	680d      	ldr	r5, [r1, #0]
 800347a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 800347c:	6960      	ldr	r0, [r4, #20]
 800347e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003482:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003486:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800348a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800348e:	4302      	orrs	r2, r0
 8003490:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003492:	680a      	ldr	r2, [r1, #0]
 8003494:	2a00      	cmp	r2, #0
 8003496:	db09      	blt.n	80034ac <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003498:	2000      	movs	r0, #0
 800349a:	e7b1      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034a0:	b114      	cbz	r4, 80034a8 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80034a2:	fab4 f484 	clz	r4, r4
 80034a6:	e7c9      	b.n	800343c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80034a8:	2420      	movs	r4, #32
 80034aa:	e7c7      	b.n	800343c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034ac:	4951      	ldr	r1, [pc, #324]	; (80035f4 <HAL_ADC_ConfigChannel+0x224>)
 80034ae:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80034b2:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034b6:	4c50      	ldr	r4, [pc, #320]	; (80035f8 <HAL_ADC_ConfigChannel+0x228>)
 80034b8:	42a2      	cmp	r2, r4
 80034ba:	d007      	beq.n	80034cc <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034bc:	4c4f      	ldr	r4, [pc, #316]	; (80035fc <HAL_ADC_ConfigChannel+0x22c>)
 80034be:	42a2      	cmp	r2, r4
 80034c0:	d026      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80034c2:	4c4f      	ldr	r4, [pc, #316]	; (8003600 <HAL_ADC_ConfigChannel+0x230>)
 80034c4:	42a2      	cmp	r2, r4
 80034c6:	d032      	beq.n	800352e <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c8:	2000      	movs	r0, #0
 80034ca:	e799      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80034d0:	d1f4      	bne.n	80034bc <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034d6:	4847      	ldr	r0, [pc, #284]	; (80035f4 <HAL_ADC_ConfigChannel+0x224>)
 80034d8:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80034dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80034e0:	4311      	orrs	r1, r2
 80034e2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e6:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_ADC_ConfigChannel+0x234>)
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	0992      	lsrs	r2, r2, #6
 80034ec:	4946      	ldr	r1, [pc, #280]	; (8003608 <HAL_ADC_ConfigChannel+0x238>)
 80034ee:	fba1 1202 	umull	r1, r2, r1, r2
 80034f2:	0992      	lsrs	r2, r2, #6
 80034f4:	3201      	adds	r2, #1
 80034f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80034fe:	e002      	b.n	8003506 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 8003500:	9a01      	ldr	r2, [sp, #4]
 8003502:	3a01      	subs	r2, #1
 8003504:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003506:	9a01      	ldr	r2, [sp, #4]
 8003508:	2a00      	cmp	r2, #0
 800350a:	d1f9      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350c:	2000      	movs	r0, #0
 800350e:	e777      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003510:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003514:	d1d5      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003516:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800351a:	4836      	ldr	r0, [pc, #216]	; (80035f4 <HAL_ADC_ConfigChannel+0x224>)
 800351c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003520:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003524:	4311      	orrs	r1, r2
 8003526:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352a:	2000      	movs	r0, #0
}
 800352c:	e768      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800352e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003532:	d158      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003534:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003538:	482e      	ldr	r0, [pc, #184]	; (80035f4 <HAL_ADC_ConfigChannel+0x224>)
 800353a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800353e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003542:	430a      	orrs	r2, r1
 8003544:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003548:	2000      	movs	r0, #0
}
 800354a:	e759      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800354c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003550:	d002      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x188>
 8003552:	4827      	ldr	r0, [pc, #156]	; (80035f0 <HAL_ADC_ConfigChannel+0x220>)
 8003554:	4284      	cmp	r4, r0
 8003556:	d106      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003558:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800355a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800355c:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003560:	ea20 0004 	bic.w	r0, r0, r4
 8003564:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003566:	680a      	ldr	r2, [r1, #0]
 8003568:	2a00      	cmp	r2, #0
 800356a:	db01      	blt.n	8003570 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356c:	2000      	movs	r0, #0
 800356e:	e747      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003570:	4920      	ldr	r1, [pc, #128]	; (80035f4 <HAL_ADC_ConfigChannel+0x224>)
 8003572:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003576:	4820      	ldr	r0, [pc, #128]	; (80035f8 <HAL_ADC_ConfigChannel+0x228>)
 8003578:	4282      	cmp	r2, r0
 800357a:	d007      	beq.n	800358c <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800357c:	481f      	ldr	r0, [pc, #124]	; (80035fc <HAL_ADC_ConfigChannel+0x22c>)
 800357e:	4282      	cmp	r2, r0
 8003580:	d013      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003582:	481f      	ldr	r0, [pc, #124]	; (8003600 <HAL_ADC_ConfigChannel+0x230>)
 8003584:	4282      	cmp	r2, r0
 8003586:	d01f      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2000      	movs	r0, #0
 800358a:	e739      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003590:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003594:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003598:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800359c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035a0:	4311      	orrs	r1, r2
 80035a2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a6:	2000      	movs	r0, #0
}
 80035a8:	e72a      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035aa:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035ae:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80035b2:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80035b6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80035ba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80035be:	430a      	orrs	r2, r1
 80035c0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c4:	2000      	movs	r0, #0
}
 80035c6:	e71b      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c8:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035cc:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80035d0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80035d4:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80035d8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80035dc:	430a      	orrs	r2, r1
 80035de:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e2:	2000      	movs	r0, #0
}
 80035e4:	e70c      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e70a      	b.n	8003400 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80035ea:	2002      	movs	r0, #2
 80035ec:	e70b      	b.n	8003406 <HAL_ADC_ConfigChannel+0x36>
 80035ee:	bf00      	nop
 80035f0:	80000004 	.word	0x80000004
 80035f4:	40012000 	.word	0x40012000
 80035f8:	b0001000 	.word	0xb0001000
 80035fc:	b8004000 	.word	0xb8004000
 8003600:	b4002000 	.word	0xb4002000
 8003604:	20000074 	.word	0x20000074
 8003608:	053e2d63 	.word	0x053e2d63

0800360c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800360c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800360e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	f012 0f04 	tst.w	r2, #4
 8003616:	d02a      	beq.n	800366e <ADC_ConversionStop+0x62>
 8003618:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	f012 0f02 	tst.w	r2, #2
 8003620:	d107      	bne.n	8003632 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003628:	f022 0217 	bic.w	r2, r2, #23
 800362c:	f042 0210 	orr.w	r2, r2, #16
 8003630:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003632:	f7fe fab5 	bl	8001ba0 <HAL_GetTick>
 8003636:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f013 0f04 	tst.w	r3, #4
 8003640:	d013      	beq.n	800366a <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003642:	f7fe faad 	bl	8001ba0 <HAL_GetTick>
 8003646:	1b43      	subs	r3, r0, r5
 8003648:	2b02      	cmp	r3, #2
 800364a:	d9f5      	bls.n	8003638 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f013 0f04 	tst.w	r3, #4
 8003654:	d0f0      	beq.n	8003638 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003666:	2001      	movs	r0, #1
 8003668:	e002      	b.n	8003670 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	e000      	b.n	8003670 <ADC_ConversionStop+0x64>
 800366e:	2000      	movs	r0, #0
}
 8003670:	bd38      	pop	{r3, r4, r5, pc}
	...

08003674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003674:	b530      	push	{r4, r5, lr}
 8003676:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003678:	2300      	movs	r3, #0
 800367a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800367c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f012 0f01 	tst.w	r2, #1
 8003684:	d15b      	bne.n	800373e <ADC_Enable+0xca>
 8003686:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003688:	6899      	ldr	r1, [r3, #8]
 800368a:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <ADC_Enable+0xd0>)
 800368c:	4211      	tst	r1, r2
 800368e:	d117      	bne.n	80036c0 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003696:	f022 0217 	bic.w	r2, r2, #23
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <ADC_Enable+0xd4>)
 80036a2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80036a6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80036aa:	d019      	beq.n	80036e0 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ac:	4b27      	ldr	r3, [pc, #156]	; (800374c <ADC_Enable+0xd8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <ADC_Enable+0xdc>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80036bc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80036be:	e00c      	b.n	80036da <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80036d0:	2001      	movs	r0, #1
 80036d2:	e035      	b.n	8003740 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80036d4:	9b01      	ldr	r3, [sp, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80036da:	9b01      	ldr	r3, [sp, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036e0:	7e63      	ldrb	r3, [r4, #25]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036e6:	2000      	movs	r0, #0
 80036e8:	e02a      	b.n	8003740 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80036ea:	f7fe fa59 	bl	8001ba0 <HAL_GetTick>
 80036ee:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	f012 0f01 	tst.w	r2, #1
 80036f8:	d11f      	bne.n	800373a <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	f012 0f01 	tst.w	r2, #1
 8003700:	d107      	bne.n	8003712 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003708:	f022 0217 	bic.w	r2, r2, #23
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003712:	f7fe fa45 	bl	8001ba0 <HAL_GetTick>
 8003716:	1b40      	subs	r0, r0, r5
 8003718:	2802      	cmp	r0, #2
 800371a:	d9e9      	bls.n	80036f0 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f013 0f01 	tst.w	r3, #1
 8003724:	d1e4      	bne.n	80036f0 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003736:	2001      	movs	r0, #1
 8003738:	e002      	b.n	8003740 <ADC_Enable+0xcc>
  return HAL_OK;
 800373a:	2000      	movs	r0, #0
 800373c:	e000      	b.n	8003740 <ADC_Enable+0xcc>
 800373e:	2000      	movs	r0, #0
}
 8003740:	b003      	add	sp, #12
 8003742:	bd30      	pop	{r4, r5, pc}
 8003744:	80000017 	.word	0x80000017
 8003748:	40012000 	.word	0x40012000
 800374c:	20000074 	.word	0x20000074
 8003750:	053e2d63 	.word	0x053e2d63

08003754 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003754:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f013 0f04 	tst.w	r3, #4
 800375c:	d128      	bne.n	80037b0 <HAL_ADC_Start+0x5c>
{
 800375e:	b510      	push	{r4, lr}
 8003760:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003762:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003766:	2b01      	cmp	r3, #1
 8003768:	d024      	beq.n	80037b4 <HAL_ADC_Start+0x60>
 800376a:	2301      	movs	r3, #1
 800376c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003770:	f7ff ff80 	bl	8003674 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003774:	b9c0      	cbnz	r0, 80037a8 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003786:	2300      	movs	r3, #0
 8003788:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	211c      	movs	r1, #28
 800378e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003790:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003794:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003796:	6893      	ldr	r3, [r2, #8]
 8003798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800379c:	f023 0317 	bic.w	r3, r3, #23
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6093      	str	r3, [r2, #8]
}
 80037a6:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80037a8:	2300      	movs	r3, #0
 80037aa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80037ae:	e7fa      	b.n	80037a6 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80037b0:	2002      	movs	r0, #2
}
 80037b2:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80037b4:	2002      	movs	r0, #2
 80037b6:	e7f6      	b.n	80037a6 <HAL_ADC_Start+0x52>

080037b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037bc:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037be:	6893      	ldr	r3, [r2, #8]
 80037c0:	f013 0302 	ands.w	r3, r3, #2
 80037c4:	d000      	beq.n	80037c8 <ADC_Disable+0x10>
 80037c6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c8:	6891      	ldr	r1, [r2, #8]
 80037ca:	f011 0f01 	tst.w	r1, #1
 80037ce:	d039      	beq.n	8003844 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d139      	bne.n	8003848 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037d4:	6893      	ldr	r3, [r2, #8]
 80037d6:	f003 0305 	and.w	r3, r3, #5
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d009      	beq.n	80037f2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037e0:	f043 0310 	orr.w	r3, r3, #16
 80037e4:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
 80037f0:	e029      	b.n	8003846 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80037f2:	6893      	ldr	r3, [r2, #8]
 80037f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037f8:	f023 0317 	bic.w	r3, r3, #23
 80037fc:	f043 0302 	orr.w	r3, r3, #2
 8003800:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	2203      	movs	r2, #3
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003808:	f7fe f9ca 	bl	8001ba0 <HAL_GetTick>
 800380c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f013 0f01 	tst.w	r3, #1
 8003816:	d013      	beq.n	8003840 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003818:	f7fe f9c2 	bl	8001ba0 <HAL_GetTick>
 800381c:	1b40      	subs	r0, r0, r5
 800381e:	2802      	cmp	r0, #2
 8003820:	d9f5      	bls.n	800380e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f013 0f01 	tst.w	r3, #1
 800382a:	d0f0      	beq.n	800380e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800382e:	f043 0310 	orr.w	r3, r3, #16
 8003832:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800383c:	2001      	movs	r0, #1
 800383e:	e002      	b.n	8003846 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003840:	2000      	movs	r0, #0
 8003842:	e000      	b.n	8003846 <ADC_Disable+0x8e>
 8003844:	2000      	movs	r0, #0
}
 8003846:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003848:	2000      	movs	r0, #0
 800384a:	e7fc      	b.n	8003846 <ADC_Disable+0x8e>

0800384c <HAL_ADC_DeInit>:
{
 800384c:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800384e:	2800      	cmp	r0, #0
 8003850:	d056      	beq.n	8003900 <HAL_ADC_DeInit+0xb4>
 8003852:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003854:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 800385c:	f7ff fed6 	bl	800360c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003860:	4606      	mov	r6, r0
 8003862:	2800      	cmp	r0, #0
 8003864:	d03d      	beq.n	80038e2 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	f240 329f 	movw	r2, #927	; 0x39f
 800387a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800387c:	6822      	ldr	r2, [r4, #0]
 800387e:	68d1      	ldr	r1, [r2, #12]
 8003880:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_ADC_DeInit+0xb8>)
 8003882:	400b      	ands	r3, r1
 8003884:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	6913      	ldr	r3, [r2, #16]
 800388a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800388e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	6953      	ldr	r3, [r2, #20]
 8003894:	f023 0307 	bic.w	r3, r3, #7
 8003898:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	6a13      	ldr	r3, [r2, #32]
 800389e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80038a2:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80038a8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80038ac:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80038ae:	6822      	ldr	r2, [r4, #0]
 80038b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038b2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80038b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038bc:	2500      	movs	r5, #0
 80038be:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80038c0:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_ADC_DeInit+0xbc>)
 80038c2:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80038c6:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80038ca:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7fd fb0e 	bl	8000ef0 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80038d4:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80038d6:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80038d8:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80038da:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80038de:	4630      	mov	r0, r6
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff ff68 	bl	80037b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80038e8:	4606      	mov	r6, r0
 80038ea:	b908      	cbnz	r0, 80038f0 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80038ec:	2301      	movs	r3, #1
 80038ee:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80038f0:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80038f2:	6893      	ldr	r3, [r2, #8]
 80038f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038f8:	f023 0317 	bic.w	r3, r3, #23
 80038fc:	6093      	str	r3, [r2, #8]
}
 80038fe:	e7b2      	b.n	8003866 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003900:	2601      	movs	r6, #1
 8003902:	e7ec      	b.n	80038de <HAL_ADC_DeInit+0x92>
 8003904:	833e0200 	.word	0x833e0200
 8003908:	40012000 	.word	0x40012000

0800390c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800390c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003910:	2b01      	cmp	r3, #1
 8003912:	d019      	beq.n	8003948 <HAL_ADC_Stop+0x3c>
{
 8003914:	b510      	push	{r4, lr}
 8003916:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003918:	2301      	movs	r3, #1
 800391a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800391e:	f7ff fe75 	bl	800360c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003922:	b118      	cbz	r0, 800392c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003924:	2300      	movs	r3, #0
 8003926:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 800392a:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff ff43 	bl	80037b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003932:	2800      	cmp	r0, #0
 8003934:	d1f6      	bne.n	8003924 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003936:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	65a3      	str	r3, [r4, #88]	; 0x58
 8003946:	e7ed      	b.n	8003924 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003948:	2002      	movs	r0, #2
}
 800394a:	4770      	bx	lr

0800394c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003950:	2300      	movs	r3, #0
 8003952:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003954:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003958:	2b01      	cmp	r3, #1
 800395a:	f000 8094 	beq.w	8003a86 <HAL_ADCEx_Calibration_Start+0x13a>
 800395e:	4604      	mov	r4, r0
 8003960:	2301      	movs	r3, #1
 8003962:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003966:	f7ff ff27 	bl	80037b8 <ADC_Disable>
 800396a:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800396c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	f012 0201 	ands.w	r2, r2, #1
 8003974:	d009      	beq.n	800398a <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003978:	f043 0310 	orr.w	r3, r3, #16
 800397c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800397e:	2300      	movs	r3, #0
 8003980:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003984:	4628      	mov	r0, r5
 8003986:	b003      	add	sp, #12
 8003988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800398a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800398c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003990:	f041 0102 	orr.w	r1, r1, #2
 8003994:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003996:	68de      	ldr	r6, [r3, #12]
 8003998:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 800399c:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80039a0:	0436      	lsls	r6, r6, #16
 80039a2:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80039aa:	f021 0103 	bic.w	r1, r1, #3
 80039ae:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80039b0:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80039b2:	e005      	b.n	80039c0 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80039b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80039bc:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80039be:	3201      	adds	r2, #1
 80039c0:	2a07      	cmp	r2, #7
 80039c2:	d81e      	bhi.n	8003a02 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80039c4:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80039c6:	688b      	ldr	r3, [r1, #8]
 80039c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039cc:	f023 0317 	bic.w	r3, r3, #23
 80039d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039d4:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80039d6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	2900      	cmp	r1, #0
 80039dc:	daea      	bge.n	80039b4 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80039de:	9b01      	ldr	r3, [sp, #4]
 80039e0:	3301      	adds	r3, #1
 80039e2:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80039e4:	9b01      	ldr	r3, [sp, #4]
 80039e6:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80039ea:	d3f4      	bcc.n	80039d6 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80039ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039ee:	f023 0312 	bic.w	r3, r3, #18
 80039f2:	f043 0310 	orr.w	r3, r3, #16
 80039f6:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80039fe:	2501      	movs	r5, #1
 8003a00:	e7c0      	b.n	8003984 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003a02:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003a06:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a08:	6893      	ldr	r3, [r2, #8]
 8003a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a0e:	f023 0317 	bic.w	r3, r3, #23
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003a18:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003a1a:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8003a1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a22:	4318      	orrs	r0, r3
 8003a24:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003a28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a2a:	6893      	ldr	r3, [r2, #8]
 8003a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a30:	f023 0317 	bic.w	r3, r3, #23
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003a3a:	f7fe f8b1 	bl	8001ba0 <HAL_GetTick>
 8003a3e:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a40:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f012 0f01 	tst.w	r2, #1
 8003a48:	d109      	bne.n	8003a5e <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	4332      	orrs	r2, r6
 8003a4e:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a5c:	e78f      	b.n	800397e <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a5e:	f7fe f89f 	bl	8001ba0 <HAL_GetTick>
 8003a62:	1bc3      	subs	r3, r0, r7
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d9eb      	bls.n	8003a40 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f013 0f01 	tst.w	r3, #1
 8003a70:	d0e6      	beq.n	8003a40 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a74:	f043 0310 	orr.w	r3, r3, #16
 8003a78:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003a82:	2501      	movs	r5, #1
 8003a84:	e77e      	b.n	8003984 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003a86:	2502      	movs	r5, #2
 8003a88:	e77c      	b.n	8003984 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003a8c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a98:	0200      	lsls	r0, r0, #8
 8003a9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003aa8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_NVIC_SetPriority+0x68>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aba:	f1c3 0c07 	rsb	ip, r3, #7
 8003abe:	f1bc 0f04 	cmp.w	ip, #4
 8003ac2:	bf28      	it	cs
 8003ac4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac8:	f103 0e04 	add.w	lr, r3, #4
 8003acc:	f1be 0f06 	cmp.w	lr, #6
 8003ad0:	d918      	bls.n	8003b04 <HAL_NVIC_SetPriority+0x54>
 8003ad2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003ad8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003adc:	ea21 010c 	bic.w	r1, r1, ip
 8003ae0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae2:	fa0e fe03 	lsl.w	lr, lr, r3
 8003ae6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aea:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003aec:	2800      	cmp	r0, #0
 8003aee:	db0b      	blt.n	8003b08 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003af8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003afc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b00:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b04:	2300      	movs	r3, #0
 8003b06:	e7e5      	b.n	8003ad4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	f000 000f 	and.w	r0, r0, #15
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <HAL_NVIC_SetPriority+0x6c>)
 8003b12:	541a      	strb	r2, [r3, r0]
 8003b14:	e7f4      	b.n	8003b00 <HAL_NVIC_SetPriority+0x50>
 8003b16:	bf00      	nop
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	e000ed14 	.word	0xe000ed14

08003b20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	db07      	blt.n	8003b34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b24:	f000 021f 	and.w	r2, r0, #31
 8003b28:	0940      	lsrs	r0, r0, #5
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4093      	lsls	r3, r2
 8003b2e:	4a02      	ldr	r2, [pc, #8]	; (8003b38 <HAL_NVIC_EnableIRQ+0x18>)
 8003b30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	db0c      	blt.n	8003b5a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b40:	f000 021f 	and.w	r2, r0, #31
 8003b44:	0940      	lsrs	r0, r0, #5
 8003b46:	2301      	movs	r3, #1
 8003b48:	4093      	lsls	r3, r2
 8003b4a:	3020      	adds	r0, #32
 8003b4c:	4a03      	ldr	r2, [pc, #12]	; (8003b5c <HAL_NVIC_DisableIRQ+0x20>)
 8003b4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b56:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b60:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b62:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003b64:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003b68:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003b6c:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003b6e:	b124      	cbz	r4, 8003b7a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b70:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003b72:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003b76:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003b7c:	f004 0c1c 	and.w	ip, r4, #28
 8003b80:	2401      	movs	r4, #1
 8003b82:	fa04 f40c 	lsl.w	r4, r4, ip
 8003b86:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003b8a:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b8e:	6804      	ldr	r4, [r0, #0]
 8003b90:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b92:	6883      	ldr	r3, [r0, #8]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d005      	beq.n	8003ba4 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b9c:	6803      	ldr	r3, [r0, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
  }
}
 8003ba0:	bc10      	pop	{r4}
 8003ba2:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	60d9      	str	r1, [r3, #12]
 8003bac:	e7f8      	b.n	8003ba0 <DMA_SetConfig+0x40>
	...

08003bb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d816      	bhi.n	8003be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bba:	f022 0203 	bic.w	r2, r2, #3
 8003bbe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003bc2:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003bc6:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3b08      	subs	r3, #8
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003bd6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003be4:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003be6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003be8:	f022 0103 	bic.w	r1, r2, #3
 8003bec:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003bee:	440a      	add	r2, r1
 8003bf0:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3b08      	subs	r3, #8
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	3307      	adds	r3, #7
 8003c00:	e7e8      	b.n	8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003c02:	bf00      	nop
 8003c04:	40020407 	.word	0x40020407
 8003c08:	cccccccd 	.word	0xcccccccd
 8003c0c:	40020880 	.word	0x40020880
 8003c10:	4002081c 	.word	0x4002081c

08003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c14:	6843      	ldr	r3, [r0, #4]
 8003c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003c1c:	441a      	add	r2, r3
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c22:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003c24:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c26:	3b01      	subs	r3, #1
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	1000823f 	.word	0x1000823f
 8003c3c:	40020940 	.word	0x40020940

08003c40 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d060      	beq.n	8003d06 <HAL_DMA_Init+0xc6>
{
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c48:	6802      	ldr	r2, [r0, #0]
 8003c4a:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <HAL_DMA_Init+0xcc>)
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d842      	bhi.n	8003cd6 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c50:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_DMA_Init+0xd0>)
 8003c52:	4413      	add	r3, r2
 8003c54:	492f      	ldr	r1, [pc, #188]	; (8003d14 <HAL_DMA_Init+0xd4>)
 8003c56:	fba1 1303 	umull	r1, r3, r1, r3
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_DMA_Init+0xd8>)
 8003c62:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c74:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	680a      	ldr	r2, [r1, #0]
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	68e0      	ldr	r0, [r4, #12]
 8003c7e:	4303      	orrs	r3, r0
 8003c80:	6920      	ldr	r0, [r4, #16]
 8003c82:	4303      	orrs	r3, r0
 8003c84:	6960      	ldr	r0, [r4, #20]
 8003c86:	4303      	orrs	r3, r0
 8003c88:	69a0      	ldr	r0, [r4, #24]
 8003c8a:	4303      	orrs	r3, r0
 8003c8c:	69e0      	ldr	r0, [r4, #28]
 8003c8e:	4303      	orrs	r3, r0
 8003c90:	6a20      	ldr	r0, [r4, #32]
 8003c92:	4303      	orrs	r3, r0
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff ff89 	bl	8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c9e:	68a3      	ldr	r3, [r4, #8]
 8003ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca4:	d022      	beq.n	8003cec <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cae:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003cb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003cb4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cb6:	6863      	ldr	r3, [r4, #4]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d919      	bls.n	8003cf2 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003cc2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cc4:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003cd0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003cd4:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_DMA_Init+0xdc>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	490e      	ldr	r1, [pc, #56]	; (8003d14 <HAL_DMA_Init+0xd4>)
 8003cdc:	fba1 1303 	umull	r1, r3, r1, r3
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_DMA_Init+0xe0>)
 8003ce8:	6403      	str	r3, [r0, #64]	; 0x40
 8003cea:	e7bb      	b.n	8003c64 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cec:	2300      	movs	r3, #0
 8003cee:	6063      	str	r3, [r4, #4]
 8003cf0:	e7d9      	b.n	8003ca6 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f7ff ff8e 	bl	8003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	e7df      	b.n	8003cc6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003d06:	2001      	movs	r0, #1
}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40020407 	.word	0x40020407
 8003d10:	bffdfff8 	.word	0xbffdfff8
 8003d14:	cccccccd 	.word	0xcccccccd
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	bffdfbf8 	.word	0xbffdfbf8
 8003d20:	40020400 	.word	0x40020400

08003d24 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d04b      	beq.n	8003dc0 <HAL_DMA_DeInit+0x9c>
{
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003d2c:	6802      	ldr	r2, [r0, #0]
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d36:	6802      	ldr	r2, [r0, #0]
 8003d38:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <HAL_DMA_DeInit+0xa0>)
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d82c      	bhi.n	8003d98 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_DMA_DeInit+0xa4>)
 8003d40:	4413      	add	r3, r2
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_DMA_DeInit+0xa8>)
 8003d44:	fba1 1303 	umull	r1, r3, r1, r3
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_DMA_DeInit+0xac>)
 8003d50:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003d52:	2500      	movs	r5, #0
 8003d54:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d58:	f003 021c 	and.w	r2, r3, #28
 8003d5c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4093      	lsls	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d64:	4620      	mov	r0, r4
 8003d66:	f7ff ff23 	bl	8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d6c:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d72:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d918      	bls.n	8003dae <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003d80:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d82:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003d84:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003d86:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003d88:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003d8a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003d8e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003d92:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_DMA_DeInit+0xb0>)
 8003d9a:	4413      	add	r3, r2
 8003d9c:	490b      	ldr	r1, [pc, #44]	; (8003dcc <HAL_DMA_DeInit+0xa8>)
 8003d9e:	fba1 1303 	umull	r1, r3, r1, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_DMA_DeInit+0xb4>)
 8003daa:	6403      	str	r3, [r0, #64]	; 0x40
 8003dac:	e7d1      	b.n	8003d52 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dae:	4620      	mov	r0, r4
 8003db0:	f7ff ff30 	bl	8003c14 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003db4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003db6:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e7dd      	b.n	8003d7c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003dc0:	2001      	movs	r0, #1
}
 8003dc2:	4770      	bx	lr
 8003dc4:	40020407 	.word	0x40020407
 8003dc8:	bffdfff8 	.word	0xbffdfff8
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	bffdfbf8 	.word	0xbffdfbf8
 8003dd8:	40020400 	.word	0x40020400

08003ddc <HAL_DMA_Start_IT>:
{
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003de0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003de4:	2801      	cmp	r0, #1
 8003de6:	d043      	beq.n	8003e70 <HAL_DMA_Start_IT+0x94>
 8003de8:	2001      	movs	r0, #1
 8003dea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003dee:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003df2:	b2c0      	uxtb	r0, r0
 8003df4:	2801      	cmp	r0, #1
 8003df6:	d006      	beq.n	8003e06 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003e02:	2001      	movs	r0, #1
}
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e06:	2002      	movs	r0, #2
 8003e08:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003e10:	6825      	ldr	r5, [r4, #0]
 8003e12:	6828      	ldr	r0, [r5, #0]
 8003e14:	f020 0001 	bic.w	r0, r0, #1
 8003e18:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7ff fea0 	bl	8003b60 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e22:	b1d3      	cbz	r3, 8003e5a <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	6813      	ldr	r3, [r2, #0]
 8003e28:	f043 030e 	orr.w	r3, r3, #14
 8003e2c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e42:	b11b      	cbz	r3, 8003e4c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e4a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2000      	movs	r0, #0
 8003e58:	e7d4      	b.n	8003e04 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	f043 030a 	orr.w	r3, r3, #10
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e7de      	b.n	8003e2e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003e70:	2002      	movs	r0, #2
 8003e72:	e7c7      	b.n	8003e04 <HAL_DMA_Start_IT+0x28>

08003e74 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003e74:	4603      	mov	r3, r0
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d034      	beq.n	8003ee4 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e7a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	2a02      	cmp	r2, #2
 8003e82:	d006      	beq.n	8003e92 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e84:	2204      	movs	r2, #4
 8003e86:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003e8e:	2001      	movs	r0, #1
 8003e90:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e92:	6801      	ldr	r1, [r0, #0]
 8003e94:	680a      	ldr	r2, [r1, #0]
 8003e96:	f022 020e 	bic.w	r2, r2, #14
 8003e9a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e9c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003e9e:	680a      	ldr	r2, [r1, #0]
 8003ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea4:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ea6:	6801      	ldr	r1, [r0, #0]
 8003ea8:	680a      	ldr	r2, [r1, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003eb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003eb2:	f002 011c 	and.w	r1, r2, #28
 8003eb6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003eb8:	2201      	movs	r2, #1
 8003eba:	408a      	lsls	r2, r1
 8003ebc:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ec0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ec2:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ec6:	b132      	cbz	r2, 8003ed6 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ec8:	6811      	ldr	r1, [r2, #0]
 8003eca:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003ece:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ed2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003ed4:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003ee2:	4770      	bx	lr
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_DMA_Abort_IT>:
{
 8003ee8:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003eea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
}
 8003efa:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efc:	6802      	ldr	r2, [r0, #0]
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	f023 030e 	bic.w	r3, r3, #14
 8003f04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f06:	6802      	ldr	r2, [r0, #0]
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f10:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f1c:	f003 021c 	and.w	r2, r3, #28
 8003f20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f22:	2301      	movs	r3, #1
 8003f24:	4093      	lsls	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f2a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003f2c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003f2e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f30:	b133      	cbz	r3, 8003f40 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003f3c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003f3e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003f46:	2300      	movs	r3, #0
 8003f48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003f4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f4e:	b113      	cbz	r3, 8003f56 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003f50:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2000      	movs	r0, #0
 8003f54:	e7d1      	b.n	8003efa <HAL_DMA_Abort_IT+0x12>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e7cf      	b.n	8003efa <HAL_DMA_Abort_IT+0x12>
	...

08003f5c <HAL_DMA_IRQHandler>:
{
 8003f5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f60:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003f62:	6804      	ldr	r4, [r0, #0]
 8003f64:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f66:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f68:	f003 031c 	and.w	r3, r3, #28
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	420a      	tst	r2, r1
 8003f72:	d015      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x44>
 8003f74:	f015 0f04 	tst.w	r5, #4
 8003f78:	d012      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f013 0f20 	tst.w	r3, #32
 8003f80:	d103      	bne.n	8003f8a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003f8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f8c:	f003 021c 	and.w	r2, r3, #28
 8003f90:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f92:	2304      	movs	r3, #4
 8003f94:	4093      	lsls	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003f98:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003f9a:	b103      	cbz	r3, 8003f9e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003f9c:	4798      	blx	r3
}
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	420a      	tst	r2, r1
 8003fa6:	d028      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x9e>
 8003fa8:	f015 0f02 	tst.w	r5, #2
 8003fac:	d025      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f013 0f20 	tst.w	r3, #32
 8003fb4:	d106      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003fc4:	6802      	ldr	r2, [r0, #0]
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <HAL_DMA_IRQHandler+0xdc>)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d90e      	bls.n	8003fea <HAL_DMA_IRQHandler+0x8e>
 8003fcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003fce:	f003 021c 	and.w	r2, r3, #28
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_DMA_IRQHandler+0xe0>)
 8003fd8:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003fe0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0db      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003fe6:	4798      	blx	r3
 8003fe8:	e7d9      	b.n	8003f9e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003fea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003fec:	f003 021c 	and.w	r2, r3, #28
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	4093      	lsls	r3, r2
 8003ff4:	4a12      	ldr	r2, [pc, #72]	; (8004040 <HAL_DMA_IRQHandler+0xe4>)
 8003ff6:	6053      	str	r3, [r2, #4]
 8003ff8:	e7ef      	b.n	8003fda <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	420b      	tst	r3, r1
 8004002:	d0cc      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x42>
 8004004:	f015 0f08 	tst.w	r5, #8
 8004008:	d0c9      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f023 030e 	bic.w	r3, r3, #14
 8004010:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004012:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004014:	f003 031c 	and.w	r3, r3, #28
 8004018:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004022:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004024:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004028:	2300      	movs	r3, #0
 800402a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800402e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0b4      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004034:	4798      	blx	r3
  return;
 8004036:	e7b2      	b.n	8003f9e <HAL_DMA_IRQHandler+0x42>
 8004038:	40020080 	.word	0x40020080
 800403c:	40020400 	.word	0x40020400
 8004040:	40020000 	.word	0x40020000

08004044 <HAL_DMA_GetState>:
  return hdma->State;
 8004044:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8004048:	4770      	bx	lr

0800404a <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 800404a:	b178      	cbz	r0, 800406c <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800404c:	6803      	ldr	r3, [r0, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004050:	f011 0f10 	tst.w	r1, #16
 8004054:	d004      	beq.n	8004060 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004056:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800405a:	d004      	beq.n	8004066 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800405c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004060:	601a      	str	r2, [r3, #0]
  return status;
 8004062:	2000      	movs	r0, #0
 8004064:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004066:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800406a:	e7f9      	b.n	8004060 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800406c:	2001      	movs	r0, #1
}
 800406e:	4770      	bx	lr

08004070 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004070:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004072:	4c05      	ldr	r4, [pc, #20]	; (8004088 <FLASH_Program_DoubleWord+0x18>)
 8004074:	6961      	ldr	r1, [r4, #20]
 8004076:	f041 0101 	orr.w	r1, r1, #1
 800407a:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800407c:	6002      	str	r2, [r0, #0]
 800407e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004082:	6043      	str	r3, [r0, #4]
}
 8004084:	bc10      	pop	{r4}
 8004086:	4770      	bx	lr
 8004088:	58004000 	.word	0x58004000

0800408c <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800408c:	4a0c      	ldr	r2, [pc, #48]	; (80040c0 <FLASH_Program_Fast+0x34>)
 800408e:	6953      	ldr	r3, [r2, #20]
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800409a:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800409c:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800409e:	f851 2b04 	ldr.w	r2, [r1], #4
 80040a2:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80040a6:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80040a8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80040ac:	d1f7      	bne.n	800409e <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <FLASH_Program_Fast+0x34>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80040b6:	d1fa      	bne.n	80040ae <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	58004000 	.word	0x58004000

080040c4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_FLASH_Unlock+0x28>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db01      	blt.n	80040d0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	2000      	movs	r0, #0
 80040ce:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_FLASH_Unlock+0x28>)
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <HAL_FLASH_Unlock+0x2c>)
 80040d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040d6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80040da:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	db01      	blt.n	80040e6 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80040e2:	2000      	movs	r0, #0
 80040e4:	4770      	bx	lr
      status = HAL_ERROR;
 80040e6:	2001      	movs	r0, #1
}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	58004000 	.word	0x58004000
 80040f0:	45670123 	.word	0x45670123

080040f4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_FLASH_Lock+0x18>)
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040fc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db01      	blt.n	8004108 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004104:	2001      	movs	r0, #1
}
 8004106:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2000      	movs	r0, #0
 800410a:	4770      	bx	lr
 800410c:	58004000 	.word	0x58004000

08004110 <FLASH_WaitForLastOperation>:
{
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004114:	f7fd fd44 	bl	8001ba0 <HAL_GetTick>
 8004118:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <FLASH_WaitForLastOperation+0x64>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004122:	d006      	beq.n	8004132 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004124:	f7fd fd3c 	bl	8001ba0 <HAL_GetTick>
 8004128:	1b00      	subs	r0, r0, r4
 800412a:	42a8      	cmp	r0, r5
 800412c:	d3f5      	bcc.n	800411a <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800412e:	2003      	movs	r0, #3
}
 8004130:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <FLASH_WaitForLastOperation+0x64>)
 8004134:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004136:	f013 0f01 	tst.w	r3, #1
 800413a:	d002      	beq.n	8004142 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800413c:	4a0d      	ldr	r2, [pc, #52]	; (8004174 <FLASH_WaitForLastOperation+0x64>)
 800413e:	2101      	movs	r1, #1
 8004140:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004142:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004146:	4013      	ands	r3, r2
 8004148:	d001      	beq.n	800414e <FLASH_WaitForLastOperation+0x3e>
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <FLASH_WaitForLastOperation+0x64>)
 800414c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800414e:	b95b      	cbnz	r3, 8004168 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <FLASH_WaitForLastOperation+0x64>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004158:	d00a      	beq.n	8004170 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800415a:	f7fd fd21 	bl	8001ba0 <HAL_GetTick>
 800415e:	1b00      	subs	r0, r0, r4
 8004160:	42a8      	cmp	r0, r5
 8004162:	d3f5      	bcc.n	8004150 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004164:	2003      	movs	r0, #3
 8004166:	e7e3      	b.n	8004130 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004168:	4a03      	ldr	r2, [pc, #12]	; (8004178 <FLASH_WaitForLastOperation+0x68>)
 800416a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 800416c:	2001      	movs	r0, #1
 800416e:	e7df      	b.n	8004130 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004170:	2000      	movs	r0, #0
 8004172:	e7dd      	b.n	8004130 <FLASH_WaitForLastOperation+0x20>
 8004174:	58004000 	.word	0x58004000
 8004178:	20000508 	.word	0x20000508

0800417c <HAL_FLASH_Program>:
{
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <HAL_FLASH_Program+0x5c>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d025      	beq.n	80041d4 <HAL_FLASH_Program+0x58>
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	4616      	mov	r6, r2
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_FLASH_Program+0x5c>)
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004194:	2200      	movs	r2, #0
 8004196:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800419c:	f7ff ffb8 	bl	8004110 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80041a0:	b970      	cbnz	r0, 80041c0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80041a2:	2c01      	cmp	r4, #1
 80041a4:	d010      	beq.n	80041c8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	f7ff ff6f 	bl	800408c <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041b2:	f7ff ffad 	bl	8004110 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <HAL_FLASH_Program+0x60>)
 80041b8:	6953      	ldr	r3, [r2, #20]
 80041ba:	ea23 0304 	bic.w	r3, r3, r4
 80041be:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_FLASH_Program+0x5c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
}
 80041c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80041c8:	4632      	mov	r2, r6
 80041ca:	463b      	mov	r3, r7
 80041cc:	4628      	mov	r0, r5
 80041ce:	f7ff ff4f 	bl	8004070 <FLASH_Program_DoubleWord>
 80041d2:	e7ec      	b.n	80041ae <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80041d4:	2002      	movs	r0, #2
 80041d6:	e7f6      	b.n	80041c6 <HAL_FLASH_Program+0x4a>
 80041d8:	20000508 	.word	0x20000508
 80041dc:	58004000 	.word	0x58004000

080041e0 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80041e0:	4a03      	ldr	r2, [pc, #12]	; (80041f0 <FLASH_MassErase+0x10>)
 80041e2:	6953      	ldr	r3, [r2, #20]
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6153      	str	r3, [r2, #20]
#endif
}
 80041ee:	4770      	bx	lr
 80041f0:	58004000 	.word	0x58004000

080041f4 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80041f4:	4b18      	ldr	r3, [pc, #96]	; (8004258 <FLASH_FlushCaches+0x64>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d006      	beq.n	800420e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <FLASH_FlushCaches+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	2b01      	cmp	r3, #1
 800420a:	d012      	beq.n	8004232 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800420c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <FLASH_FlushCaches+0x64>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004216:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004226:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e7e6      	b.n	8004200 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <FLASH_FlushCaches+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800424a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	e7da      	b.n	800420c <FLASH_FlushCaches+0x18>
 8004256:	bf00      	nop
 8004258:	58004000 	.word	0x58004000

0800425c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800425c:	4a03      	ldr	r2, [pc, #12]	; (800426c <FLASH_AcknowledgePageErase+0x10>)
 800425e:	6953      	ldr	r3, [r2, #20]
 8004260:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004264:	f023 0302 	bic.w	r3, r3, #2
 8004268:	6153      	str	r3, [r2, #20]
#endif
}
 800426a:	4770      	bx	lr
 800426c:	58004000 	.word	0x58004000

08004270 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004270:	4a05      	ldr	r2, [pc, #20]	; (8004288 <FLASH_PageErase+0x18>)
 8004272:	6953      	ldr	r3, [r2, #20]
 8004274:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004278:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 800427c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004280:	f040 0002 	orr.w	r0, r0, #2
 8004284:	6150      	str	r0, [r2, #20]
}
 8004286:	4770      	bx	lr
 8004288:	58004000 	.word	0x58004000

0800428c <HAL_FLASHEx_Erase>:
{
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_FLASHEx_Erase+0x7c>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d035      	beq.n	8004302 <HAL_FLASHEx_Erase+0x76>
 8004296:	4605      	mov	r5, r0
 8004298:	460f      	mov	r7, r1
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_FLASHEx_Erase+0x7c>)
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042a0:	2200      	movs	r2, #0
 80042a2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a8:	f7ff ff32 	bl	8004110 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80042ac:	4606      	mov	r6, r0
 80042ae:	bb18      	cbnz	r0, 80042f8 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d013      	beq.n	80042de <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ba:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80042bc:	686c      	ldr	r4, [r5, #4]
 80042be:	686b      	ldr	r3, [r5, #4]
 80042c0:	68aa      	ldr	r2, [r5, #8]
 80042c2:	4413      	add	r3, r2
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d913      	bls.n	80042f0 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80042c8:	4620      	mov	r0, r4
 80042ca:	f7ff ffd1 	bl	8004270 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042d2:	f7ff ff1d 	bl	8004110 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80042d6:	4606      	mov	r6, r0
 80042d8:	b948      	cbnz	r0, 80042ee <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80042da:	3401      	adds	r4, #1
 80042dc:	e7ef      	b.n	80042be <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80042de:	f7ff ff7f 	bl	80041e0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042e6:	f7ff ff13 	bl	8004110 <FLASH_WaitForLastOperation>
 80042ea:	4606      	mov	r6, r0
 80042ec:	e002      	b.n	80042f4 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80042ee:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80042f0:	f7ff ffb4 	bl	800425c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80042f4:	f7ff ff7e 	bl	80041f4 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_FLASHEx_Erase+0x7c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
}
 80042fe:	4630      	mov	r0, r6
 8004300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004302:	2602      	movs	r6, #2
 8004304:	e7fb      	b.n	80042fe <HAL_FLASHEx_Erase+0x72>
 8004306:	bf00      	nop
 8004308:	20000508 	.word	0x20000508

0800430c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800430e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004310:	e069      	b.n	80043e6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004312:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004314:	005e      	lsls	r6, r3, #1
 8004316:	2403      	movs	r4, #3
 8004318:	40b4      	lsls	r4, r6
 800431a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800431e:	68cc      	ldr	r4, [r1, #12]
 8004320:	40b4      	lsls	r4, r6
 8004322:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004324:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004326:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004328:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800432c:	684c      	ldr	r4, [r1, #4]
 800432e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004332:	409c      	lsls	r4, r3
 8004334:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004336:	6044      	str	r4, [r0, #4]
 8004338:	e066      	b.n	8004408 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433a:	08dd      	lsrs	r5, r3, #3
 800433c:	3508      	adds	r5, #8
 800433e:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004342:	f003 0c07 	and.w	ip, r3, #7
 8004346:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800434a:	f04f 0e0f 	mov.w	lr, #15
 800434e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004352:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004356:	690c      	ldr	r4, [r1, #16]
 8004358:	fa04 f40c 	lsl.w	r4, r4, ip
 800435c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004360:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004364:	e067      	b.n	8004436 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004366:	2402      	movs	r4, #2
 8004368:	e000      	b.n	800436c <HAL_GPIO_Init+0x60>
 800436a:	2400      	movs	r4, #0
 800436c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004370:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004372:	f10c 0c02 	add.w	ip, ip, #2
 8004376:	4d4b      	ldr	r5, [pc, #300]	; (80044a4 <HAL_GPIO_Init+0x198>)
 8004378:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800437c:	4c4a      	ldr	r4, [pc, #296]	; (80044a8 <HAL_GPIO_Init+0x19c>)
 800437e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004380:	43d4      	mvns	r4, r2
 8004382:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004386:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800438a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800438e:	d001      	beq.n	8004394 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004390:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004394:	4d44      	ldr	r5, [pc, #272]	; (80044a8 <HAL_GPIO_Init+0x19c>)
 8004396:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004398:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800439a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800439e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80043a2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80043a6:	d001      	beq.n	80043ac <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80043a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80043ac:	4d3e      	ldr	r5, [pc, #248]	; (80044a8 <HAL_GPIO_Init+0x19c>)
 80043ae:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80043b0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80043b4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043b8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80043bc:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80043c0:	d001      	beq.n	80043c6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80043c2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80043c6:	4d38      	ldr	r5, [pc, #224]	; (80044a8 <HAL_GPIO_Init+0x19c>)
 80043c8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80043cc:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80043d0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043d2:	684e      	ldr	r6, [r1, #4]
 80043d4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80043d8:	d001      	beq.n	80043de <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80043da:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80043de:	4a32      	ldr	r2, [pc, #200]	; (80044a8 <HAL_GPIO_Init+0x19c>)
 80043e0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80043e4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e6:	680a      	ldr	r2, [r1, #0]
 80043e8:	fa32 f403 	lsrs.w	r4, r2, r3
 80043ec:	d058      	beq.n	80044a0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043ee:	f04f 0c01 	mov.w	ip, #1
 80043f2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80043f6:	ea1c 0202 	ands.w	r2, ip, r2
 80043fa:	d0f3      	beq.n	80043e4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043fc:	684c      	ldr	r4, [r1, #4]
 80043fe:	f004 0403 	and.w	r4, r4, #3
 8004402:	3c01      	subs	r4, #1
 8004404:	2c01      	cmp	r4, #1
 8004406:	d984      	bls.n	8004312 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004408:	684c      	ldr	r4, [r1, #4]
 800440a:	f004 0403 	and.w	r4, r4, #3
 800440e:	2c03      	cmp	r4, #3
 8004410:	d00c      	beq.n	800442c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004412:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004414:	005d      	lsls	r5, r3, #1
 8004416:	f04f 0c03 	mov.w	ip, #3
 800441a:	fa0c fc05 	lsl.w	ip, ip, r5
 800441e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004422:	688c      	ldr	r4, [r1, #8]
 8004424:	40ac      	lsls	r4, r5
 8004426:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800442a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442c:	684c      	ldr	r4, [r1, #4]
 800442e:	f004 0403 	and.w	r4, r4, #3
 8004432:	2c02      	cmp	r4, #2
 8004434:	d081      	beq.n	800433a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004436:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004438:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800443c:	f04f 0c03 	mov.w	ip, #3
 8004440:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004444:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	684c      	ldr	r4, [r1, #4]
 800444a:	f004 0403 	and.w	r4, r4, #3
 800444e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004452:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004456:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004458:	684c      	ldr	r4, [r1, #4]
 800445a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800445e:	d0c1      	beq.n	80043e4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004460:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004464:	f10c 0502 	add.w	r5, ip, #2
 8004468:	4c0e      	ldr	r4, [pc, #56]	; (80044a4 <HAL_GPIO_Init+0x198>)
 800446a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800446e:	f003 0e03 	and.w	lr, r3, #3
 8004472:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004476:	2407      	movs	r4, #7
 8004478:	fa04 f40e 	lsl.w	r4, r4, lr
 800447c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004480:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004484:	f43f af71 	beq.w	800436a <HAL_GPIO_Init+0x5e>
 8004488:	4c08      	ldr	r4, [pc, #32]	; (80044ac <HAL_GPIO_Init+0x1a0>)
 800448a:	42a0      	cmp	r0, r4
 800448c:	d006      	beq.n	800449c <HAL_GPIO_Init+0x190>
 800448e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004492:	42a0      	cmp	r0, r4
 8004494:	f43f af67 	beq.w	8004366 <HAL_GPIO_Init+0x5a>
 8004498:	2407      	movs	r4, #7
 800449a:	e767      	b.n	800436c <HAL_GPIO_Init+0x60>
 800449c:	2401      	movs	r4, #1
 800449e:	e765      	b.n	800436c <HAL_GPIO_Init+0x60>
  }
}
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	58000800 	.word	0x58000800
 80044ac:	48000400 	.word	0x48000400

080044b0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80044b0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80044b2:	fa31 f203 	lsrs.w	r2, r1, r3
 80044b6:	d071      	beq.n	800459c <HAL_GPIO_DeInit+0xec>
{
 80044b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ba:	e02e      	b.n	800451a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044bc:	2502      	movs	r5, #2
 80044be:	e000      	b.n	80044c2 <HAL_GPIO_DeInit+0x12>
 80044c0:	2500      	movs	r5, #0
 80044c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80044c6:	42a5      	cmp	r5, r4
 80044c8:	d049      	beq.n	800455e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80044ca:	6804      	ldr	r4, [r0, #0]
 80044cc:	005d      	lsls	r5, r3, #1
 80044ce:	f04f 0c03 	mov.w	ip, #3
 80044d2:	fa0c fc05 	lsl.w	ip, ip, r5
 80044d6:	ea44 040c 	orr.w	r4, r4, ip
 80044da:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80044dc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80044e0:	f10e 0e08 	add.w	lr, lr, #8
 80044e4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80044e8:	f003 0607 	and.w	r6, r3, #7
 80044ec:	00b6      	lsls	r6, r6, #2
 80044ee:	250f      	movs	r5, #15
 80044f0:	40b5      	lsls	r5, r6
 80044f2:	ea24 0405 	bic.w	r4, r4, r5
 80044f6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044fa:	6884      	ldr	r4, [r0, #8]
 80044fc:	ea24 040c 	bic.w	r4, r4, ip
 8004500:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004502:	6844      	ldr	r4, [r0, #4]
 8004504:	ea24 0202 	bic.w	r2, r4, r2
 8004508:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800450a:	68c2      	ldr	r2, [r0, #12]
 800450c:	ea22 020c 	bic.w	r2, r2, ip
 8004510:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004512:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004514:	fa31 f203 	lsrs.w	r2, r1, r3
 8004518:	d03f      	beq.n	800459a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800451a:	2201      	movs	r2, #1
 800451c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800451e:	ea12 0701 	ands.w	r7, r2, r1
 8004522:	d0f6      	beq.n	8004512 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004524:	089e      	lsrs	r6, r3, #2
 8004526:	1cb5      	adds	r5, r6, #2
 8004528:	4c1d      	ldr	r4, [pc, #116]	; (80045a0 <HAL_GPIO_DeInit+0xf0>)
 800452a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800452e:	f003 0c03 	and.w	ip, r3, #3
 8004532:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004536:	f04f 0e07 	mov.w	lr, #7
 800453a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800453e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004542:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004546:	d0bb      	beq.n	80044c0 <HAL_GPIO_DeInit+0x10>
 8004548:	4d16      	ldr	r5, [pc, #88]	; (80045a4 <HAL_GPIO_DeInit+0xf4>)
 800454a:	42a8      	cmp	r0, r5
 800454c:	d005      	beq.n	800455a <HAL_GPIO_DeInit+0xaa>
 800454e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004552:	42a8      	cmp	r0, r5
 8004554:	d0b2      	beq.n	80044bc <HAL_GPIO_DeInit+0xc>
 8004556:	2507      	movs	r5, #7
 8004558:	e7b3      	b.n	80044c2 <HAL_GPIO_DeInit+0x12>
 800455a:	2501      	movs	r5, #1
 800455c:	e7b1      	b.n	80044c2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800455e:	4c12      	ldr	r4, [pc, #72]	; (80045a8 <HAL_GPIO_DeInit+0xf8>)
 8004560:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004564:	ea25 0507 	bic.w	r5, r5, r7
 8004568:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800456c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004570:	ea25 0507 	bic.w	r5, r5, r7
 8004574:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	ea25 0507 	bic.w	r5, r5, r7
 800457e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004580:	6865      	ldr	r5, [r4, #4]
 8004582:	ea25 0507 	bic.w	r5, r5, r7
 8004586:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004588:	4d05      	ldr	r5, [pc, #20]	; (80045a0 <HAL_GPIO_DeInit+0xf0>)
 800458a:	3602      	adds	r6, #2
 800458c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004590:	ea24 040e 	bic.w	r4, r4, lr
 8004594:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004598:	e797      	b.n	80044ca <HAL_GPIO_DeInit+0x1a>
  }
}
 800459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	48000400 	.word	0x48000400
 80045a8:	58000800 	.word	0x58000800

080045ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ac:	b10a      	cbz	r2, 80045b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045ae:	6181      	str	r1, [r0, #24]
 80045b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045b2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80045b4:	4770      	bx	lr

080045b6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045b8:	ea01 0203 	and.w	r2, r1, r3
 80045bc:	ea21 0103 	bic.w	r1, r1, r3
 80045c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045c4:	6181      	str	r1, [r0, #24]
}
 80045c6:	4770      	bx	lr

080045c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4203      	tst	r3, r0
 80045d0:	d100      	bne.n	80045d4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80045d2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80045d6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d8:	f7fe faf6 	bl	8002bc8 <HAL_GPIO_EXTI_Callback>
}
 80045dc:	e7f9      	b.n	80045d2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80045de:	bf00      	nop
 80045e0:	58000800 	.word	0x58000800

080045e4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045e4:	6803      	ldr	r3, [r0, #0]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	f012 0f02 	tst.w	r2, #2
 80045ec:	d001      	beq.n	80045f2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f2:	6803      	ldr	r3, [r0, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	f012 0f01 	tst.w	r2, #1
 80045fa:	d103      	bne.n	8004604 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	619a      	str	r2, [r3, #24]
  }
}
 8004604:	4770      	bx	lr

08004606 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004606:	b410      	push	{r4}
 8004608:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800460e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004612:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004614:	4321      	orrs	r1, r4
 8004616:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800461a:	6802      	ldr	r2, [r0, #0]
 800461c:	6853      	ldr	r3, [r2, #4]
 800461e:	0d64      	lsrs	r4, r4, #21
 8004620:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8004624:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8004628:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800462c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004630:	f044 0403 	orr.w	r4, r4, #3
 8004634:	ea23 0304 	bic.w	r3, r3, r4
 8004638:	430b      	orrs	r3, r1
 800463a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800463c:	bc10      	pop	{r4}
 800463e:	4770      	bx	lr

08004640 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004640:	f011 0f01 	tst.w	r1, #1
 8004644:	d009      	beq.n	800465a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004646:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800464a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800464e:	2b28      	cmp	r3, #40	; 0x28
 8004650:	d001      	beq.n	8004656 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004652:	23f2      	movs	r3, #242	; 0xf2
 8004654:	e002      	b.n	800465c <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004656:	2342      	movs	r3, #66	; 0x42
 8004658:	e000      	b.n	800465c <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800465a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800465c:	f011 0f02 	tst.w	r1, #2
 8004660:	d009      	beq.n	8004676 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004662:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004666:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800466a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800466e:	2a28      	cmp	r2, #40	; 0x28
 8004670:	d010      	beq.n	8004694 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004672:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004676:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800467a:	d10d      	bne.n	8004698 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800467c:	2910      	cmp	r1, #16
 800467e:	d00e      	beq.n	800469e <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004680:	2920      	cmp	r1, #32
 8004682:	d00f      	beq.n	80046a4 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004684:	2940      	cmp	r1, #64	; 0x40
 8004686:	d010      	beq.n	80046aa <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004688:	6801      	ldr	r1, [r0, #0]
 800468a:	680a      	ldr	r2, [r1, #0]
 800468c:	ea22 0303 	bic.w	r3, r2, r3
 8004690:	600b      	str	r3, [r1, #0]
}
 8004692:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004694:	4663      	mov	r3, ip
 8004696:	e7ee      	b.n	8004676 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004698:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800469c:	e7ee      	b.n	800467c <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800469e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80046a2:	e7ed      	b.n	8004680 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 80046a4:	f043 0320 	orr.w	r3, r3, #32
 80046a8:	e7ec      	b.n	8004684 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 80046aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ae:	e7eb      	b.n	8004688 <I2C_Disable_IRQ+0x48>

080046b0 <I2C_IsErrorOccurred>:
{
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046ba:	f016 0610 	ands.w	r6, r6, #16
 80046be:	d07c      	beq.n	80047ba <I2C_IsErrorOccurred+0x10a>
 80046c0:	460d      	mov	r5, r1
 80046c2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c4:	2210      	movs	r2, #16
 80046c6:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80046c8:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	6998      	ldr	r0, [r3, #24]
 80046d0:	f010 0f20 	tst.w	r0, #32
 80046d4:	d130      	bne.n	8004738 <I2C_IsErrorOccurred+0x88>
 80046d6:	bb7f      	cbnz	r7, 8004738 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 80046d8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80046dc:	d0f6      	beq.n	80046cc <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fd fa5f 	bl	8001ba0 <HAL_GetTick>
 80046e2:	eba0 0008 	sub.w	r0, r0, r8
 80046e6:	42a8      	cmp	r0, r5
 80046e8:	d801      	bhi.n	80046ee <I2C_IsErrorOccurred+0x3e>
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	d1ee      	bne.n	80046cc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046ee:	6821      	ldr	r1, [r4, #0]
 80046f0:	684b      	ldr	r3, [r1, #4]
 80046f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80046f6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80046fa:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046fc:	6988      	ldr	r0, [r1, #24]
 80046fe:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004702:	d002      	beq.n	800470a <I2C_IsErrorOccurred+0x5a>
 8004704:	b90b      	cbnz	r3, 800470a <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8004706:	2a20      	cmp	r2, #32
 8004708:	d10e      	bne.n	8004728 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f013 0f20 	tst.w	r3, #32
 8004712:	d1db      	bne.n	80046cc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004714:	f7fd fa44 	bl	8001ba0 <HAL_GetTick>
 8004718:	eba0 0008 	sub.w	r0, r0, r8
 800471c:	2819      	cmp	r0, #25
 800471e:	d9f4      	bls.n	800470a <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004720:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8004724:	2701      	movs	r7, #1
              break;
 8004726:	e7d1      	b.n	80046cc <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004728:	684b      	ldr	r3, [r1, #4]
 800472a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8004730:	f7fd fa36 	bl	8001ba0 <HAL_GetTick>
 8004734:	4680      	mov	r8, r0
 8004736:	e7e8      	b.n	800470a <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8004738:	b90f      	cbnz	r7, 800473e <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800473e:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004742:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004748:	f413 7f80 	tst.w	r3, #256	; 0x100
 800474c:	d005      	beq.n	800475a <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800474e:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004756:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004758:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800475a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800475e:	d006      	beq.n	800476e <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8004760:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004764:	6822      	ldr	r2, [r4, #0]
 8004766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800476a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800476c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800476e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004772:	d024      	beq.n	80047be <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004774:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477e:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8004780:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8004782:	4620      	mov	r0, r4
 8004784:	f7ff ff2e 	bl	80045e4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004788:	6822      	ldr	r2, [r4, #0]
 800478a:	6853      	ldr	r3, [r2, #4]
 800478c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004790:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004794:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800479e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047a0:	4333      	orrs	r3, r6
 80047a2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	2320      	movs	r3, #32
 80047a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80047b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80047b4:	4628      	mov	r0, r5
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2500      	movs	r5, #0
 80047bc:	e7c2      	b.n	8004744 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 80047be:	2d00      	cmp	r5, #0
 80047c0:	d0f8      	beq.n	80047b4 <I2C_IsErrorOccurred+0x104>
 80047c2:	e7de      	b.n	8004782 <I2C_IsErrorOccurred+0xd2>

080047c4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4604      	mov	r4, r0
 80047c8:	460d      	mov	r5, r1
 80047ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f013 0f02 	tst.w	r3, #2
 80047d4:	d11d      	bne.n	8004812 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d6:	4632      	mov	r2, r6
 80047d8:	4629      	mov	r1, r5
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff ff68 	bl	80046b0 <I2C_IsErrorOccurred>
 80047e0:	b9c8      	cbnz	r0, 8004816 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80047e6:	d0f1      	beq.n	80047cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7fd f9da 	bl	8001ba0 <HAL_GetTick>
 80047ec:	1b80      	subs	r0, r0, r6
 80047ee:	42a8      	cmp	r0, r5
 80047f0:	d801      	bhi.n	80047f6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	d1ea      	bne.n	80047cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047f8:	f043 0320 	orr.w	r3, r3, #32
 80047fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	2320      	movs	r3, #32
 8004800:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	2300      	movs	r3, #0
 8004806:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800480a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800480e:	2001      	movs	r0, #1
 8004810:	e000      	b.n	8004814 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8004812:	2000      	movs	r0, #0
}
 8004814:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004816:	2001      	movs	r0, #1
 8004818:	e7fc      	b.n	8004814 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800481a <I2C_WaitOnFlagUntilTimeout>:
{
 800481a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481e:	4606      	mov	r6, r0
 8004820:	4688      	mov	r8, r1
 8004822:	4617      	mov	r7, r2
 8004824:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004826:	6834      	ldr	r4, [r6, #0]
 8004828:	69a4      	ldr	r4, [r4, #24]
 800482a:	ea38 0404 	bics.w	r4, r8, r4
 800482e:	bf0c      	ite	eq
 8004830:	2401      	moveq	r4, #1
 8004832:	2400      	movne	r4, #0
 8004834:	42bc      	cmp	r4, r7
 8004836:	d118      	bne.n	800486a <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004838:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800483c:	d0f3      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fd f9af 	bl	8001ba0 <HAL_GetTick>
 8004842:	9b06      	ldr	r3, [sp, #24]
 8004844:	1ac0      	subs	r0, r0, r3
 8004846:	42a8      	cmp	r0, r5
 8004848:	d801      	bhi.n	800484e <I2C_WaitOnFlagUntilTimeout+0x34>
 800484a:	2d00      	cmp	r5, #0
 800484c:	d1eb      	bne.n	8004826 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004850:	f043 0320 	orr.w	r3, r3, #32
 8004854:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004856:	2320      	movs	r3, #32
 8004858:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	2300      	movs	r3, #0
 800485e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004862:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004866:	2001      	movs	r0, #1
 8004868:	e000      	b.n	800486c <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800486a:	2000      	movs	r0, #0
}
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004870 <I2C_RequestMemoryRead>:
{
 8004870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	4604      	mov	r4, r0
 8004878:	4690      	mov	r8, r2
 800487a:	461d      	mov	r5, r3
 800487c:	9e08      	ldr	r6, [sp, #32]
 800487e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004880:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <I2C_RequestMemoryRead+0x74>)
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	b2ea      	uxtb	r2, r5
 8004888:	f7ff febd 	bl	8004606 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800488c:	463a      	mov	r2, r7
 800488e:	4631      	mov	r1, r6
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff ff97 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004896:	b9f8      	cbnz	r0, 80048d8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004898:	2d01      	cmp	r5, #1
 800489a:	d10e      	bne.n	80048ba <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	fa5f f288 	uxtb.w	r2, r8
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048a4:	9700      	str	r7, [sp, #0]
 80048a6:	4633      	mov	r3, r6
 80048a8:	2200      	movs	r2, #0
 80048aa:	2140      	movs	r1, #64	; 0x40
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7ff ffb4 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 80048b2:	b9a8      	cbnz	r0, 80048e0 <I2C_RequestMemoryRead+0x70>
}
 80048b4:	b002      	add	sp, #8
 80048b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048c2:	463a      	mov	r2, r7
 80048c4:	4631      	mov	r1, r6
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7ff ff7c 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048cc:	b930      	cbnz	r0, 80048dc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	fa5f f288 	uxtb.w	r2, r8
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28
 80048d6:	e7e5      	b.n	80048a4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80048d8:	2001      	movs	r0, #1
 80048da:	e7eb      	b.n	80048b4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80048dc:	2001      	movs	r0, #1
 80048de:	e7e9      	b.n	80048b4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80048e0:	2001      	movs	r0, #1
 80048e2:	e7e7      	b.n	80048b4 <I2C_RequestMemoryRead+0x44>
 80048e4:	80002000 	.word	0x80002000

080048e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4605      	mov	r5, r0
 80048ec:	460c      	mov	r4, r1
 80048ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f013 0f20 	tst.w	r3, #32
 80048f8:	d11a      	bne.n	8004930 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fa:	4632      	mov	r2, r6
 80048fc:	4621      	mov	r1, r4
 80048fe:	4628      	mov	r0, r5
 8004900:	f7ff fed6 	bl	80046b0 <I2C_IsErrorOccurred>
 8004904:	b9b0      	cbnz	r0, 8004934 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fd f94b 	bl	8001ba0 <HAL_GetTick>
 800490a:	1b80      	subs	r0, r0, r6
 800490c:	42a0      	cmp	r0, r4
 800490e:	d801      	bhi.n	8004914 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004910:	2c00      	cmp	r4, #0
 8004912:	d1ed      	bne.n	80048f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004916:	f043 0320 	orr.w	r3, r3, #32
 800491a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800491c:	2320      	movs	r3, #32
 800491e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004922:	2300      	movs	r3, #0
 8004924:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004928:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
}
 800492e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004930:	2000      	movs	r0, #0
 8004932:	e7fc      	b.n	800492e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
 8004936:	e7fa      	b.n	800492e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004938 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	460d      	mov	r5, r1
 800493e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f013 0f04 	tst.w	r3, #4
 8004948:	d149      	bne.n	80049de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800494a:	4632      	mov	r2, r6
 800494c:	4629      	mov	r1, r5
 800494e:	4620      	mov	r0, r4
 8004950:	f7ff feae 	bl	80046b0 <I2C_IsErrorOccurred>
 8004954:	4601      	mov	r1, r0
 8004956:	2800      	cmp	r0, #0
 8004958:	d143      	bne.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	f012 0f20 	tst.w	r2, #32
 8004962:	d113      	bne.n	800498c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004964:	f7fd f91c 	bl	8001ba0 <HAL_GetTick>
 8004968:	1b80      	subs	r0, r0, r6
 800496a:	42a8      	cmp	r0, r5
 800496c:	d801      	bhi.n	8004972 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800496e:	2d00      	cmp	r5, #0
 8004970:	d1e6      	bne.n	8004940 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004974:	f043 0320 	orr.w	r3, r3, #32
 8004978:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800497a:	2320      	movs	r3, #32
 800497c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004986:	2101      	movs	r1, #1
}
 8004988:	4608      	mov	r0, r1
 800498a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	f012 0f04 	tst.w	r2, #4
 8004992:	d002      	beq.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004994:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004996:	2a00      	cmp	r2, #0
 8004998:	d1f6      	bne.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	f012 0f10 	tst.w	r2, #16
 80049a0:	d01a      	beq.n	80049d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	2210      	movs	r2, #16
 80049a4:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80049a6:	2304      	movs	r3, #4
 80049a8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	2220      	movs	r2, #32
 80049ae:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80049b0:	6821      	ldr	r1, [r4, #0]
 80049b2:	684b      	ldr	r3, [r1, #4]
 80049b4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80049b8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80049bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80049d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80049d4:	2101      	movs	r1, #1
 80049d6:	e7d7      	b.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d8:	2300      	movs	r3, #0
 80049da:	6463      	str	r3, [r4, #68]	; 0x44
 80049dc:	e7e5      	b.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 80049de:	2100      	movs	r1, #0
 80049e0:	e7d2      	b.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 80049e2:	2101      	movs	r1, #1
 80049e4:	e7d0      	b.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

080049e6 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d059      	beq.n	8004a9e <HAL_I2C_Init+0xb8>
{
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d043      	beq.n	8004a7e <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f6:	2324      	movs	r3, #36	; 0x24
 80049f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004a0e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	6893      	ldr	r3, [r2, #8]
 8004a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a18:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a1a:	68e3      	ldr	r3, [r4, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d033      	beq.n	8004a88 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a20:	68a3      	ldr	r3, [r4, #8]
 8004a22:	6822      	ldr	r2, [r4, #0]
 8004a24:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004a28:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a2a:	68e3      	ldr	r3, [r4, #12]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d031      	beq.n	8004a94 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	6853      	ldr	r3, [r2, #4]
 8004a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	68d3      	ldr	r3, [r2, #12]
 8004a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a46:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	6962      	ldr	r2, [r4, #20]
 8004a4c:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a4e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a56:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a58:	69e3      	ldr	r3, [r4, #28]
 8004a5a:	6a21      	ldr	r1, [r4, #32]
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	2320      	movs	r3, #32
 8004a72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a78:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004a7c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004a7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004a82:	f7fc fdeb 	bl	800165c <HAL_I2C_MspInit>
 8004a86:	e7b6      	b.n	80049f6 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a88:	68a3      	ldr	r3, [r4, #8]
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a90:	6093      	str	r3, [r2, #8]
 8004a92:	e7ca      	b.n	8004a2a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	e7c8      	b.n	8004a30 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004a9e:	2001      	movs	r0, #1
}
 8004aa0:	4770      	bx	lr
	...

08004aa4 <HAL_I2C_Master_Transmit>:
{
 8004aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	460f      	mov	r7, r1
 8004aac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aae:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004ab2:	b2c9      	uxtb	r1, r1
 8004ab4:	2920      	cmp	r1, #32
 8004ab6:	f040 80a3 	bne.w	8004c00 <HAL_I2C_Master_Transmit+0x15c>
 8004aba:	4604      	mov	r4, r0
 8004abc:	4690      	mov	r8, r2
 8004abe:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004ac0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f000 809f 	beq.w	8004c08 <HAL_I2C_Master_Transmit+0x164>
 8004aca:	f04f 0a01 	mov.w	sl, #1
 8004ace:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004ad2:	f7fd f865 	bl	8001ba0 <HAL_GetTick>
 8004ad6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ad8:	9000      	str	r0, [sp, #0]
 8004ada:	2319      	movs	r3, #25
 8004adc:	4652      	mov	r2, sl
 8004ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff fe99 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f040 808f 	bne.w	8004c0c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aee:	2321      	movs	r3, #33	; 0x21
 8004af0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004af4:	2310      	movs	r3, #16
 8004af6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004afe:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b02:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b06:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2bff      	cmp	r3, #255	; 0xff
 8004b0e:	d90a      	bls.n	8004b26 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b14:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_I2C_Master_Transmit+0x178>)
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7ff fd71 	bl	8004606 <I2C_TransferConfig>
 8004b24:	e018      	b.n	8004b58 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004b26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b28:	b292      	uxth	r2, r2
 8004b2a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_I2C_Master_Transmit+0x178>)
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4639      	mov	r1, r7
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff fd64 	bl	8004606 <I2C_TransferConfig>
 8004b3e:	e00b      	b.n	8004b58 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8004b40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b42:	b292      	uxth	r2, r2
 8004b44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b46:	2300      	movs	r3, #0
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	4639      	mov	r1, r7
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7ff fd57 	bl	8004606 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d033      	beq.n	8004bc8 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b60:	462a      	mov	r2, r5
 8004b62:	4631      	mov	r1, r6
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff fe2d 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d150      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b78:	3301      	adds	r3, #1
 8004b7a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004b7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004b86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004b90:	b292      	uxth	r2, r2
 8004b92:	2a00      	cmp	r2, #0
 8004b94:	d0e0      	beq.n	8004b58 <HAL_I2C_Master_Transmit+0xb4>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1de      	bne.n	8004b58 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b9a:	9500      	str	r5, [sp, #0]
 8004b9c:	4633      	mov	r3, r6
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff fe39 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	bba0      	cbnz	r0, 8004c14 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2bff      	cmp	r3, #255	; 0xff
 8004bb0:	d9c6      	bls.n	8004b40 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f7ff fd20 	bl	8004606 <I2C_TransferConfig>
 8004bc6:	e7c7      	b.n	8004b58 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc8:	462a      	mov	r2, r5
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff fe8b 	bl	80048e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bd2:	bb08      	cbnz	r0, 8004c18 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004bda:	6821      	ldr	r1, [r4, #0]
 8004bdc:	684b      	ldr	r3, [r1, #4]
 8004bde:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004be2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004be6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004bfa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004bfe:	e000      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8004c00:	2002      	movs	r0, #2
}
 8004c02:	b002      	add	sp, #8
 8004c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004c08:	2002      	movs	r0, #2
 8004c0a:	e7fa      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	e7f8      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7f6      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8004c14:	2001      	movs	r0, #1
 8004c16:	e7f4      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8004c18:	2001      	movs	r0, #1
 8004c1a:	e7f2      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x15e>
 8004c1c:	80002000 	.word	0x80002000

08004c20 <HAL_I2C_Master_Receive>:
{
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	460f      	mov	r7, r1
 8004c28:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004c2e:	b2c9      	uxtb	r1, r1
 8004c30:	2920      	cmp	r1, #32
 8004c32:	f040 80a2 	bne.w	8004d7a <HAL_I2C_Master_Receive+0x15a>
 8004c36:	4604      	mov	r4, r0
 8004c38:	4690      	mov	r8, r2
 8004c3a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004c3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	f000 809e 	beq.w	8004d82 <HAL_I2C_Master_Receive+0x162>
 8004c46:	f04f 0a01 	mov.w	sl, #1
 8004c4a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004c4e:	f7fc ffa7 	bl	8001ba0 <HAL_GetTick>
 8004c52:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c54:	9000      	str	r0, [sp, #0]
 8004c56:	2319      	movs	r3, #25
 8004c58:	4652      	mov	r2, sl
 8004c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff fddb 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	f040 808e 	bne.w	8004d86 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c6a:	2322      	movs	r3, #34	; 0x22
 8004c6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c70:	2310      	movs	r3, #16
 8004c72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004c7a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c7e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c82:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2bff      	cmp	r3, #255	; 0xff
 8004c8a:	d90a      	bls.n	8004ca2 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8c:	22ff      	movs	r2, #255	; 0xff
 8004c8e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c90:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_I2C_Master_Receive+0x178>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7ff fcb3 	bl	8004606 <I2C_TransferConfig>
 8004ca0:	e018      	b.n	8004cd4 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_I2C_Master_Receive+0x178>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff fca6 	bl	8004606 <I2C_TransferConfig>
 8004cba:	e00b      	b.n	8004cd4 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8004cbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	4639      	mov	r1, r7
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7ff fc99 	bl	8004606 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d032      	beq.n	8004d42 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f7ff fe29 	bl	8004938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d14f      	bne.n	8004d8a <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004cf8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004cfa:	3a01      	subs	r2, #1
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0e0      	beq.n	8004cd4 <HAL_I2C_Master_Receive+0xb4>
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	d1de      	bne.n	8004cd4 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d16:	9500      	str	r5, [sp, #0]
 8004d18:	4633      	mov	r3, r6
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff fd7c 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004d22:	bba0      	cbnz	r0, 8004d8e <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2bff      	cmp	r3, #255	; 0xff
 8004d2a:	d9c7      	bls.n	8004cbc <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2c:	22ff      	movs	r2, #255	; 0xff
 8004d2e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d30:	2300      	movs	r3, #0
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d38:	4639      	mov	r1, r7
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7ff fc63 	bl	8004606 <I2C_TransferConfig>
 8004d40:	e7c8      	b.n	8004cd4 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d42:	462a      	mov	r2, r5
 8004d44:	4631      	mov	r1, r6
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff fdce 	bl	80048e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d4c:	bb08      	cbnz	r0, 8004d92 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	684b      	ldr	r3, [r1, #4]
 8004d58:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004d5c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004d60:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004d64:	f023 0301 	bic.w	r3, r3, #1
 8004d68:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004d74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004d78:	e000      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8004d7a:	2002      	movs	r0, #2
}
 8004d7c:	b002      	add	sp, #8
 8004d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004d82:	2002      	movs	r0, #2
 8004d84:	e7fa      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004d86:	2001      	movs	r0, #1
 8004d88:	e7f8      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e7f6      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
 8004d90:	e7f4      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
 8004d94:	e7f2      	b.n	8004d7c <HAL_I2C_Master_Receive+0x15c>
 8004d96:	bf00      	nop
 8004d98:	80002400 	.word	0x80002400

08004d9c <HAL_I2C_Mem_Read>:
{
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	b083      	sub	sp, #12
 8004da2:	460e      	mov	r6, r1
 8004da4:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004da8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004daa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004dae:	b2c9      	uxtb	r1, r1
 8004db0:	2920      	cmp	r1, #32
 8004db2:	f040 80bc 	bne.w	8004f2e <HAL_I2C_Mem_Read+0x192>
 8004db6:	4604      	mov	r4, r0
 8004db8:	4690      	mov	r8, r2
 8004dba:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dbe:	b1cb      	cbz	r3, 8004df4 <HAL_I2C_Mem_Read+0x58>
 8004dc0:	f1ba 0f00 	cmp.w	sl, #0
 8004dc4:	d016      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004dc6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	f000 80b3 	beq.w	8004f36 <HAL_I2C_Mem_Read+0x19a>
 8004dd0:	f04f 0b01 	mov.w	fp, #1
 8004dd4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004dd8:	f7fc fee2 	bl	8001ba0 <HAL_GetTick>
 8004ddc:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dde:	9000      	str	r0, [sp, #0]
 8004de0:	2319      	movs	r3, #25
 8004de2:	465a      	mov	r2, fp
 8004de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff fd16 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004dee:	b130      	cbz	r0, 8004dfe <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004df0:	2001      	movs	r0, #1
 8004df2:	e09d      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df8:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	e098      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dfe:	2322      	movs	r3, #34	; 0x22
 8004e00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004e0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e10:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e12:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e16:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e18:	9701      	str	r7, [sp, #4]
 8004e1a:	9500      	str	r5, [sp, #0]
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	4642      	mov	r2, r8
 8004e20:	4631      	mov	r1, r6
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7ff fd24 	bl	8004870 <I2C_RequestMemoryRead>
 8004e28:	b970      	cbnz	r0, 8004e48 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2bff      	cmp	r3, #255	; 0xff
 8004e30:	d90f      	bls.n	8004e52 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e36:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <HAL_I2C_Mem_Read+0x1ac>)
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4620      	mov	r0, r4
 8004e42:	f7ff fbe0 	bl	8004606 <I2C_TransferConfig>
 8004e46:	e021      	b.n	8004e8c <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004e4e:	4658      	mov	r0, fp
 8004e50:	e06e      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004e52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004e54:	b292      	uxth	r2, r2
 8004e56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_I2C_Mem_Read+0x1ac>)
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	4631      	mov	r1, r6
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff fbce 	bl	8004606 <I2C_TransferConfig>
 8004e6a:	e00f      	b.n	8004e8c <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004e6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff fbc1 	bl	8004606 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d034      	beq.n	8004ef6 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e8c:	9700      	str	r7, [sp, #0]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	2200      	movs	r2, #0
 8004e92:	2104      	movs	r1, #4
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7ff fcc0 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d14d      	bne.n	8004f3a <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004eac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ebe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0de      	beq.n	8004e84 <HAL_I2C_Mem_Read+0xe8>
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	d1dc      	bne.n	8004e84 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eca:	9700      	str	r7, [sp, #0]
 8004ecc:	462b      	mov	r3, r5
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7ff fca2 	bl	800481a <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	bb90      	cbnz	r0, 8004f3e <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2bff      	cmp	r3, #255	; 0xff
 8004ede:	d9c5      	bls.n	8004e6c <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eec:	4631      	mov	r1, r6
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f7ff fb89 	bl	8004606 <I2C_TransferConfig>
 8004ef4:	e7c6      	b.n	8004e84 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef6:	463a      	mov	r2, r7
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7ff fcf4 	bl	80048e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f00:	b9f8      	cbnz	r0, 8004f42 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	2220      	movs	r2, #32
 8004f06:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004f08:	6821      	ldr	r1, [r4, #0]
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004f10:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004f14:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004f28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004f2c:	e000      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8004f2e:	2002      	movs	r0, #2
}
 8004f30:	b003      	add	sp, #12
 8004f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004f36:	2002      	movs	r0, #2
 8004f38:	e7fa      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	e7f8      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8004f3e:	2001      	movs	r0, #1
 8004f40:	e7f6      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8004f42:	2001      	movs	r0, #1
 8004f44:	e7f4      	b.n	8004f30 <HAL_I2C_Mem_Read+0x194>
 8004f46:	bf00      	nop
 8004f48:	80002400 	.word	0x80002400

08004f4c <HAL_I2C_EV_IRQHandler>:
{
 8004f4c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f4e:	6803      	ldr	r3, [r0, #0]
 8004f50:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f52:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004f54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f56:	b103      	cbz	r3, 8004f5a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f58:	4798      	blx	r3
}
 8004f5a:	bd08      	pop	{r3, pc}

08004f5c <HAL_I2C_SlaveTxCpltCallback>:
}
 8004f5c:	4770      	bx	lr

08004f5e <HAL_I2C_SlaveRxCpltCallback>:
}
 8004f5e:	4770      	bx	lr

08004f60 <I2C_ITSlaveSeqCplt>:
{
 8004f60:	b510      	push	{r4, lr}
 8004f62:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f64:	6803      	ldr	r3, [r0, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	2100      	movs	r1, #0
 8004f6a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f6e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004f72:	d00e      	beq.n	8004f92 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f7a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b29      	cmp	r3, #41	; 0x29
 8004f84:	d00d      	beq.n	8004fa2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8e:	d018      	beq.n	8004fc2 <I2C_ITSlaveSeqCplt+0x62>
}
 8004f90:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f92:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004f96:	d0f1      	beq.n	8004f7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e7ec      	b.n	8004f7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fa2:	2328      	movs	r3, #40	; 0x28
 8004fa4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fa8:	2321      	movs	r3, #33	; 0x21
 8004faa:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fac:	2101      	movs	r1, #1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7ff fb46 	bl	8004640 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff ffce 	bl	8004f5c <HAL_I2C_SlaveTxCpltCallback>
 8004fc0:	e7e6      	b.n	8004f90 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fc2:	2328      	movs	r3, #40	; 0x28
 8004fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fc8:	2322      	movs	r3, #34	; 0x22
 8004fca:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff fb36 	bl	8004640 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff ffbf 	bl	8004f5e <HAL_I2C_SlaveRxCpltCallback>
}
 8004fe0:	e7d6      	b.n	8004f90 <I2C_ITSlaveSeqCplt+0x30>

08004fe2 <HAL_I2C_AddrCallback>:
}
 8004fe2:	4770      	bx	lr

08004fe4 <I2C_ITAddrCplt>:
{
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fe8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ff0:	2b28      	cmp	r3, #40	; 0x28
 8004ff2:	d006      	beq.n	8005002 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8005000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	699e      	ldr	r6, [r3, #24]
 8005006:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	0c12      	lsrs	r2, r2, #16
 800500e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005018:	68df      	ldr	r7, [r3, #12]
 800501a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800501e:	68c1      	ldr	r1, [r0, #12]
 8005020:	2902      	cmp	r1, #2
 8005022:	d122      	bne.n	800506a <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005024:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8005028:	f015 0f06 	tst.w	r5, #6
 800502c:	d110      	bne.n	8005050 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800502e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005030:	3101      	adds	r1, #1
 8005032:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005034:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005036:	2902      	cmp	r1, #2
 8005038:	d1e2      	bne.n	8005000 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800503a:	2100      	movs	r1, #0
 800503c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800503e:	2008      	movs	r0, #8
 8005040:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005042:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005046:	4631      	mov	r1, r6
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff ffca 	bl	8004fe2 <HAL_I2C_AddrCallback>
 800504e:	e7d7      	b.n	8005000 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005054:	f7ff faf4 	bl	8004640 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005058:	2300      	movs	r3, #0
 800505a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800505e:	463a      	mov	r2, r7
 8005060:	4631      	mov	r1, r6
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff ffbd 	bl	8004fe2 <HAL_I2C_AddrCallback>
 8005068:	e7ca      	b.n	8005000 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800506a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800506e:	f7ff fae7 	bl	8004640 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005078:	462a      	mov	r2, r5
 800507a:	4631      	mov	r1, r6
 800507c:	4620      	mov	r0, r4
 800507e:	f7ff ffb0 	bl	8004fe2 <HAL_I2C_AddrCallback>
 8005082:	e7bd      	b.n	8005000 <I2C_ITAddrCplt+0x1c>

08005084 <HAL_I2C_ListenCpltCallback>:
}
 8005084:	4770      	bx	lr
	...

08005088 <I2C_ITListenCplt>:
{
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <I2C_ITListenCplt+0x64>)
 800508e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005090:	2300      	movs	r3, #0
 8005092:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005094:	2220      	movs	r2, #32
 8005096:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800509e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050a0:	f011 0f04 	tst.w	r1, #4
 80050a4:	d013      	beq.n	80050ce <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a6:	6803      	ldr	r3, [r0, #0]
 80050a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80050b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80050b6:	b153      	cbz	r3, 80050ce <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80050b8:	3b01      	subs	r3, #1
 80050ba:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80050bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80050c8:	f043 0304 	orr.w	r3, r3, #4
 80050cc:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050ce:	f248 0103 	movw	r1, #32771	; 0x8003
 80050d2:	4620      	mov	r0, r4
 80050d4:	f7ff fab4 	bl	8004640 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7ff ffcd 	bl	8005084 <HAL_I2C_ListenCpltCallback>
}
 80050ea:	bd10      	pop	{r4, pc}
 80050ec:	ffff0000 	.word	0xffff0000

080050f0 <HAL_I2C_ErrorCallback>:
}
 80050f0:	4770      	bx	lr

080050f2 <HAL_I2C_AbortCpltCallback>:
}
 80050f2:	4770      	bx	lr

080050f4 <I2C_TreatErrorCallback>:
{
 80050f4:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b60      	cmp	r3, #96	; 0x60
 80050fe:	d006      	beq.n	800510e <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005100:	2300      	movs	r3, #0
 8005102:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005104:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005108:	f7ff fff2 	bl	80050f0 <HAL_I2C_ErrorCallback>
}
 800510c:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800510e:	2320      	movs	r3, #32
 8005110:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005114:	2300      	movs	r3, #0
 8005116:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005118:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800511c:	f7ff ffe9 	bl	80050f2 <HAL_I2C_AbortCpltCallback>
 8005120:	e7f4      	b.n	800510c <I2C_TreatErrorCallback+0x18>
	...

08005124 <I2C_ITError>:
{
 8005124:	b510      	push	{r4, lr}
 8005126:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005128:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800512c:	2200      	movs	r2, #0
 800512e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005132:	483b      	ldr	r0, [pc, #236]	; (8005220 <I2C_ITError+0xfc>)
 8005134:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005136:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005138:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800513a:	430a      	orrs	r2, r1
 800513c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800513e:	3b28      	subs	r3, #40	; 0x28
 8005140:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005142:	2b02      	cmp	r3, #2
 8005144:	d819      	bhi.n	800517a <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005146:	2103      	movs	r1, #3
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fa79 	bl	8004640 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800514e:	2328      	movs	r3, #40	; 0x28
 8005150:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005154:	4b33      	ldr	r3, [pc, #204]	; (8005224 <I2C_ITError+0x100>)
 8005156:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8005158:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800515a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800515c:	b11a      	cbz	r2, 8005166 <I2C_ITError+0x42>
 800515e:	2b11      	cmp	r3, #17
 8005160:	d01b      	beq.n	800519a <I2C_ITError+0x76>
 8005162:	2b21      	cmp	r3, #33	; 0x21
 8005164:	d019      	beq.n	800519a <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005166:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005168:	b11a      	cbz	r2, 8005172 <I2C_ITError+0x4e>
 800516a:	2b12      	cmp	r3, #18
 800516c:	d036      	beq.n	80051dc <I2C_ITError+0xb8>
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	d034      	beq.n	80051dc <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8005172:	4620      	mov	r0, r4
 8005174:	f7ff ffbe 	bl	80050f4 <I2C_TreatErrorCallback>
}
 8005178:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800517a:	f248 0103 	movw	r1, #32771	; 0x8003
 800517e:	4620      	mov	r0, r4
 8005180:	f7ff fa5e 	bl	8004640 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005184:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b60      	cmp	r3, #96	; 0x60
 800518c:	d002      	beq.n	8005194 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 800518e:	2320      	movs	r3, #32
 8005190:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	6363      	str	r3, [r4, #52]	; 0x34
 8005198:	e7de      	b.n	8005158 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80051a2:	d003      	beq.n	80051ac <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051aa:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80051ae:	f7fe ff49 	bl	8004044 <HAL_DMA_GetState>
 80051b2:	2801      	cmp	r0, #1
 80051b4:	d00e      	beq.n	80051d4 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b8:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <I2C_ITError+0x104>)
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051c2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80051c4:	f7fe fe90 	bl	8003ee8 <HAL_DMA_Abort_IT>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d0d5      	beq.n	8005178 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80051ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051d0:	4798      	blx	r3
 80051d2:	e7d1      	b.n	8005178 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff ff8d 	bl	80050f4 <I2C_TreatErrorCallback>
 80051da:	e7cd      	b.n	8005178 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80051e4:	d003      	beq.n	80051ee <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ec:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80051f0:	f7fe ff28 	bl	8004044 <HAL_DMA_GetState>
 80051f4:	2801      	cmp	r0, #1
 80051f6:	d00e      	beq.n	8005216 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051fa:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <I2C_ITError+0x104>)
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80051fe:	2300      	movs	r3, #0
 8005200:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005204:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005206:	f7fe fe6f 	bl	8003ee8 <HAL_DMA_Abort_IT>
 800520a:	2800      	cmp	r0, #0
 800520c:	d0b4      	beq.n	8005178 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800520e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005210:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005212:	4798      	blx	r3
 8005214:	e7b0      	b.n	8005178 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff ff6c 	bl	80050f4 <I2C_TreatErrorCallback>
 800521c:	e7ac      	b.n	8005178 <I2C_ITError+0x54>
 800521e:	bf00      	nop
 8005220:	ffff0000 	.word	0xffff0000
 8005224:	08005395 	.word	0x08005395
 8005228:	0800554d 	.word	0x0800554d

0800522c <I2C_ITSlaveCplt>:
{
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005232:	6802      	ldr	r2, [r0, #0]
 8005234:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005236:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800523a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523c:	2120      	movs	r1, #32
 800523e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005240:	2b21      	cmp	r3, #33	; 0x21
 8005242:	d00d      	beq.n	8005260 <I2C_ITSlaveCplt+0x34>
 8005244:	2b29      	cmp	r3, #41	; 0x29
 8005246:	d00b      	beq.n	8005260 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005248:	2b22      	cmp	r3, #34	; 0x22
 800524a:	d001      	beq.n	8005250 <I2C_ITSlaveCplt+0x24>
 800524c:	2b2a      	cmp	r3, #42	; 0x2a
 800524e:	d10e      	bne.n	800526e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005250:	f248 0102 	movw	r1, #32770	; 0x8002
 8005254:	4620      	mov	r0, r4
 8005256:	f7ff f9f3 	bl	8004640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800525a:	2322      	movs	r3, #34	; 0x22
 800525c:	6323      	str	r3, [r4, #48]	; 0x30
 800525e:	e006      	b.n	800526e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005260:	f248 0101 	movw	r1, #32769	; 0x8001
 8005264:	4620      	mov	r0, r4
 8005266:	f7ff f9eb 	bl	8004640 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800526a:	2321      	movs	r3, #33	; 0x21
 800526c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	6853      	ldr	r3, [r2, #4]
 8005272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005276:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	6853      	ldr	r3, [r2, #4]
 800527c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005280:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005284:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800528e:	4620      	mov	r0, r4
 8005290:	f7ff f9a8 	bl	80045e4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005294:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005298:	d040      	beq.n	800531c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	6813      	ldr	r3, [r2, #0]
 800529e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80052a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052a6:	b11b      	cbz	r3, 80052b0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80052b0:	f015 0f04 	tst.w	r5, #4
 80052b4:	d011      	beq.n	80052da <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80052b6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052c4:	3301      	adds	r3, #1
 80052c6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80052c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052ca:	b133      	cbz	r3, 80052da <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80052cc:	3b01      	subs	r3, #1
 80052ce:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80052d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80052da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	b11b      	cbz	r3, 80052e8 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80052ee:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052f2:	bb1b      	cbnz	r3, 800533c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052fa:	d12d      	bne.n	8005358 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b22      	cmp	r3, #34	; 0x22
 8005304:	d038      	beq.n	8005378 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	2320      	movs	r3, #32
 8005308:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800530c:	2300      	movs	r3, #0
 800530e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005310:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005314:	4620      	mov	r0, r4
 8005316:	f7ff fe21 	bl	8004f5c <HAL_I2C_SlaveTxCpltCallback>
}
 800531a:	e02c      	b.n	8005376 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800531c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005320:	d0c6      	beq.n	80052b0 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	6813      	ldr	r3, [r2, #0]
 8005326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800532a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800532c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0be      	beq.n	80052b0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b29b      	uxth	r3, r3
 8005338:	8563      	strh	r3, [r4, #42]	; 0x2a
 800533a:	e7b9      	b.n	80052b0 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800533c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff fef0 	bl	8005124 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005344:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b28      	cmp	r3, #40	; 0x28
 800534c:	d113      	bne.n	8005376 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800534e:	4629      	mov	r1, r5
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff fe99 	bl	8005088 <I2C_ITListenCplt>
 8005356:	e00e      	b.n	8005376 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff fe01 	bl	8004f60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <I2C_ITSlaveCplt+0x164>)
 8005360:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	2320      	movs	r3, #32
 8005364:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005368:	2300      	movs	r3, #0
 800536a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800536c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fe87 	bl	8005084 <HAL_I2C_ListenCpltCallback>
}
 8005376:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	2320      	movs	r3, #32
 800537a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005382:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff fde9 	bl	8004f5e <HAL_I2C_SlaveRxCpltCallback>
 800538c:	e7f3      	b.n	8005376 <I2C_ITSlaveCplt+0x14a>
 800538e:	bf00      	nop
 8005390:	ffff0000 	.word	0xffff0000

08005394 <I2C_Slave_ISR_IT>:
{
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005396:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8005398:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800539c:	2b01      	cmp	r3, #1
 800539e:	f000 809e 	beq.w	80054de <I2C_Slave_ISR_IT+0x14a>
 80053a2:	4604      	mov	r4, r0
 80053a4:	460d      	mov	r5, r1
 80053a6:	4616      	mov	r6, r2
 80053a8:	2301      	movs	r3, #1
 80053aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053ae:	f011 0f20 	tst.w	r1, #32
 80053b2:	d002      	beq.n	80053ba <I2C_Slave_ISR_IT+0x26>
 80053b4:	f012 0f20 	tst.w	r2, #32
 80053b8:	d119      	bne.n	80053ee <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053ba:	f015 0f10 	tst.w	r5, #16
 80053be:	d03e      	beq.n	800543e <I2C_Slave_ISR_IT+0xaa>
 80053c0:	f016 0f10 	tst.w	r6, #16
 80053c4:	d03b      	beq.n	800543e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80053c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	bb43      	cbnz	r3, 800541e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b28      	cmp	r3, #40	; 0x28
 80053d4:	d00e      	beq.n	80053f4 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b29      	cmp	r3, #41	; 0x29
 80053de:	d011      	beq.n	8005404 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	2210      	movs	r2, #16
 80053e4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80053ee:	f7ff ff1d 	bl	800522c <I2C_ITSlaveCplt>
 80053f2:	e7e2      	b.n	80053ba <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053f4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80053f8:	d1ed      	bne.n	80053d6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053fa:	4629      	mov	r1, r5
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7ff fe43 	bl	8005088 <I2C_ITListenCplt>
 8005402:	e7f0      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005404:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005408:	d0ea      	beq.n	80053e0 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	2210      	movs	r2, #16
 800540e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff f8e7 	bl	80045e4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fda2 	bl	8004f60 <I2C_ITSlaveSeqCplt>
 800541c:	e7e3      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	2210      	movs	r2, #16
 8005422:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005426:	f043 0304 	orr.w	r3, r3, #4
 800542a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800542c:	b117      	cbz	r7, 8005434 <I2C_Slave_ISR_IT+0xa0>
 800542e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005432:	d1d8      	bne.n	80053e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005434:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff fe74 	bl	8005124 <I2C_ITError>
 800543c:	e7d3      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800543e:	f015 0f04 	tst.w	r5, #4
 8005442:	d01f      	beq.n	8005484 <I2C_Slave_ISR_IT+0xf0>
 8005444:	f016 0f04 	tst.w	r6, #4
 8005448:	d01c      	beq.n	8005484 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800544a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	b173      	cbz	r3, 800546e <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005456:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800545a:	3301      	adds	r3, #1
 800545c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800545e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005464:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29b      	uxth	r3, r3
 800546c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800546e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1b7      	bne.n	80053e6 <I2C_Slave_ISR_IT+0x52>
 8005476:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800547a:	d0b4      	beq.n	80053e6 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800547c:	4620      	mov	r0, r4
 800547e:	f7ff fd6f 	bl	8004f60 <I2C_ITSlaveSeqCplt>
 8005482:	e7b0      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005484:	f015 0f08 	tst.w	r5, #8
 8005488:	d002      	beq.n	8005490 <I2C_Slave_ISR_IT+0xfc>
 800548a:	f016 0f08 	tst.w	r6, #8
 800548e:	d118      	bne.n	80054c2 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005490:	f015 0f02 	tst.w	r5, #2
 8005494:	d0a7      	beq.n	80053e6 <I2C_Slave_ISR_IT+0x52>
 8005496:	f016 0f02 	tst.w	r6, #2
 800549a:	d0a4      	beq.n	80053e6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800549c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	b1a3      	cbz	r3, 80054cc <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	7812      	ldrb	r2, [r2, #0]
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80054aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ac:	3301      	adds	r3, #1
 80054ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80054b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80054ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	8523      	strh	r3, [r4, #40]	; 0x28
 80054c0:	e791      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054c2:	4629      	mov	r1, r5
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7ff fd8d 	bl	8004fe4 <I2C_ITAddrCplt>
 80054ca:	e78c      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80054cc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80054d0:	d001      	beq.n	80054d6 <I2C_Slave_ISR_IT+0x142>
 80054d2:	2f00      	cmp	r7, #0
 80054d4:	d187      	bne.n	80053e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7ff fd42 	bl	8004f60 <I2C_ITSlaveSeqCplt>
 80054dc:	e783      	b.n	80053e6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80054de:	2002      	movs	r0, #2
 80054e0:	e784      	b.n	80053ec <I2C_Slave_ISR_IT+0x58>

080054e2 <HAL_I2C_ER_IRQHandler>:
{
 80054e2:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80054e4:	6802      	ldr	r2, [r0, #0]
 80054e6:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80054e8:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80054ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054ee:	d009      	beq.n	8005504 <HAL_I2C_ER_IRQHandler+0x22>
 80054f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054f4:	d006      	beq.n	8005504 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80054f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80054f8:	f044 0401 	orr.w	r4, r4, #1
 80054fc:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054fe:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005502:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005504:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005508:	d00a      	beq.n	8005520 <HAL_I2C_ER_IRQHandler+0x3e>
 800550a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800550e:	d007      	beq.n	8005520 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005510:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005512:	f042 0208 	orr.w	r2, r2, #8
 8005516:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005518:	6802      	ldr	r2, [r0, #0]
 800551a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800551e:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005520:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005524:	d00a      	beq.n	800553c <HAL_I2C_ER_IRQHandler+0x5a>
 8005526:	f011 0f80 	tst.w	r1, #128	; 0x80
 800552a:	d007      	beq.n	800553c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800552c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005534:	6803      	ldr	r3, [r0, #0]
 8005536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800553a:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800553c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800553e:	f011 0f0b 	tst.w	r1, #11
 8005542:	d100      	bne.n	8005546 <HAL_I2C_ER_IRQHandler+0x64>
}
 8005544:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8005546:	f7ff fded 	bl	8005124 <I2C_ITError>
}
 800554a:	e7fb      	b.n	8005544 <HAL_I2C_ER_IRQHandler+0x62>

0800554c <I2C_DMAAbort>:
{
 800554c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800554e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005550:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005552:	b10b      	cbz	r3, 8005558 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005554:	2200      	movs	r2, #0
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8005558:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800555a:	b10b      	cbz	r3, 8005560 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800555c:	2200      	movs	r2, #0
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005560:	f7ff fdc8 	bl	80050f4 <I2C_TreatErrorCallback>
}
 8005564:	bd08      	pop	{r3, pc}

08005566 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005566:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005568:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	2a20      	cmp	r2, #32
 8005570:	d123      	bne.n	80055ba <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005572:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005576:	2a01      	cmp	r2, #1
 8005578:	d021      	beq.n	80055be <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800557a:	2201      	movs	r2, #1
 800557c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	2224      	movs	r2, #36	; 0x24
 8005582:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	6802      	ldr	r2, [r0, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	6802      	ldr	r2, [r0, #0]
 8005594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005598:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	6802      	ldr	r2, [r0, #0]
 800559e:	4311      	orrs	r1, r2
 80055a0:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	680a      	ldr	r2, [r1, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b2:	2000      	movs	r0, #0
 80055b4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80055b8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2002      	movs	r0, #2
 80055bc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80055be:	2002      	movs	r0, #2
  }
}
 80055c0:	4770      	bx	lr

080055c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055c2:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	2a20      	cmp	r2, #32
 80055cc:	d121      	bne.n	8005612 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80055d2:	2a01      	cmp	r2, #1
 80055d4:	d01f      	beq.n	8005616 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80055d6:	2201      	movs	r2, #1
 80055d8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055dc:	2224      	movs	r2, #36	; 0x24
 80055de:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	6802      	ldr	r2, [r0, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055f0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055f8:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	680a      	ldr	r2, [r1, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	2220      	movs	r2, #32
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560a:	2000      	movs	r0, #0
 800560c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005610:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005612:	2002      	movs	r0, #2
 8005614:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005616:	2002      	movs	r0, #2
  }
}
 8005618:	4770      	bx	lr
	...

0800561c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561c:	4a02      	ldr	r2, [pc, #8]	; (8005628 <HAL_PWR_EnableBkUpAccess+0xc>)
 800561e:	6813      	ldr	r3, [r2, #0]
 8005620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	4770      	bx	lr
 8005628:	58000400 	.word	0x58000400

0800562c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800562c:	b510      	push	{r4, lr}
 800562e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005630:	b9a0      	cbnz	r0, 800565c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f413 7f00 	tst.w	r3, #512	; 0x200
 800563a:	d10a      	bne.n	8005652 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800563c:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <HAL_PWR_EnterSLEEPMode+0x48>)
 800563e:	6913      	ldr	r3, [r2, #16]
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005646:	2c01      	cmp	r4, #1
 8005648:	d010      	beq.n	800566c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800564a:	bf40      	sev
    __WFE();
 800564c:	bf20      	wfe
    __WFE();
 800564e:	bf20      	wfe
  }
}
 8005650:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005652:	f000 f821 	bl	8005698 <HAL_PWREx_DisableLowPowerRunMode>
 8005656:	2800      	cmp	r0, #0
 8005658:	d0f0      	beq.n	800563c <HAL_PWR_EnterSLEEPMode+0x10>
 800565a:	e7f9      	b.n	8005650 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_PWR_EnterSLEEPMode+0x44>)
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005664:	d1ea      	bne.n	800563c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005666:	f000 f80f 	bl	8005688 <HAL_PWREx_EnableLowPowerRunMode>
 800566a:	e7e7      	b.n	800563c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800566c:	bf30      	wfi
 800566e:	e7ef      	b.n	8005650 <HAL_PWR_EnterSLEEPMode+0x24>
 8005670:	58000400 	.word	0x58000400
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <HAL_PWREx_GetVoltageRange+0xc>)
 800567a:	6818      	ldr	r0, [r3, #0]
}
 800567c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	58000400 	.word	0x58000400

08005688 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005688:	4a02      	ldr	r2, [pc, #8]	; (8005694 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005690:	6013      	str	r3, [r2, #0]
}
 8005692:	4770      	bx	lr
 8005694:	58000400 	.word	0x58000400

08005698 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005698:	4a0f      	ldr	r2, [pc, #60]	; (80056d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2232      	movs	r2, #50	; 0x32
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056b4:	e000      	b.n	80056b8 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80056b6:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80056b8:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80056ba:	6952      	ldr	r2, [r2, #20]
 80056bc:	f412 7f00 	tst.w	r2, #512	; 0x200
 80056c0:	d001      	beq.n	80056c6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f7      	bne.n	80056b6 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056c6:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80056ce:	d101      	bne.n	80056d4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80056d0:	2000      	movs	r0, #0
 80056d2:	4770      	bx	lr
    return HAL_TIMEOUT;
 80056d4:	2003      	movs	r0, #3
}
 80056d6:	4770      	bx	lr
 80056d8:	58000400 	.word	0x58000400
 80056dc:	20000074 	.word	0x20000074
 80056e0:	431bde83 	.word	0x431bde83

080056e4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80056f4:	6913      	ldr	r3, [r2, #16]
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80056fc:	2801      	cmp	r0, #1
 80056fe:	d008      	beq.n	8005712 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005700:	bf40      	sev
    __WFE();
 8005702:	bf20      	wfe
    __WFE();
 8005704:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005706:	4a05      	ldr	r2, [pc, #20]	; (800571c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005708:	6913      	ldr	r3, [r2, #16]
 800570a:	f023 0304 	bic.w	r3, r3, #4
 800570e:	6113      	str	r3, [r2, #16]
}
 8005710:	4770      	bx	lr
    __WFI();
 8005712:	bf30      	wfi
 8005714:	e7f7      	b.n	8005706 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005716:	bf00      	nop
 8005718:	58000400 	.word	0x58000400
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005720:	b530      	push	{r4, r5, lr}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	4604      	mov	r4, r0
 8005726:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005728:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <RCC_SetFlashLatency+0xb4>)
 800572a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800572e:	9006      	str	r0, [sp, #24]
 8005730:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005734:	f103 0208 	add.w	r2, r3, #8
 8005738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800573c:	9004      	str	r0, [sp, #16]
 800573e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005742:	ad01      	add	r5, sp, #4
 8005744:	3310      	adds	r3, #16
 8005746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800574a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800574e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005752:	d007      	beq.n	8005764 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005754:	2300      	movs	r3, #0
 8005756:	e014      	b.n	8005782 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005758:	aa08      	add	r2, sp, #32
 800575a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800575e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005762:	e01e      	b.n	80057a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005764:	2300      	movs	r3, #0
 8005766:	2b02      	cmp	r3, #2
 8005768:	d808      	bhi.n	800577c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800576a:	aa08      	add	r2, sp, #32
 800576c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005770:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005774:	42a2      	cmp	r2, r4
 8005776:	d2ef      	bcs.n	8005758 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005778:	3301      	adds	r3, #1
 800577a:	e7f4      	b.n	8005766 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800577c:	2500      	movs	r5, #0
 800577e:	e010      	b.n	80057a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005780:	3301      	adds	r3, #1
 8005782:	2b02      	cmp	r3, #2
 8005784:	d80c      	bhi.n	80057a0 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005786:	aa08      	add	r2, sp, #32
 8005788:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800578c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005790:	42a2      	cmp	r2, r4
 8005792:	d3f5      	bcc.n	8005780 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005794:	aa08      	add	r2, sp, #32
 8005796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800579a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800579e:	e000      	b.n	80057a2 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057a0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057a2:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <RCC_SetFlashLatency+0xb8>)
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	432b      	orrs	r3, r5
 80057ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ae:	f7fc f9f7 	bl	8001ba0 <HAL_GetTick>
 80057b2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <RCC_SetFlashLatency+0xb8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	42ab      	cmp	r3, r5
 80057be:	d006      	beq.n	80057ce <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057c0:	f7fc f9ee 	bl	8001ba0 <HAL_GetTick>
 80057c4:	1b00      	subs	r0, r0, r4
 80057c6:	2802      	cmp	r0, #2
 80057c8:	d9f4      	bls.n	80057b4 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80057ca:	2003      	movs	r0, #3
 80057cc:	e000      	b.n	80057d0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80057ce:	2000      	movs	r0, #0
}
 80057d0:	b009      	add	sp, #36	; 0x24
 80057d2:	bd30      	pop	{r4, r5, pc}
 80057d4:	080156e0 	.word	0x080156e0
 80057d8:	58004000 	.word	0x58004000

080057dc <RCC_SetFlashLatencyFromMSIRange>:
{
 80057dc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80057de:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80057e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80057e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	4a08      	ldr	r2, [pc, #32]	; (8005818 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80057f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fa:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057fe:	f7ff ff3b 	bl	8005678 <HAL_PWREx_GetVoltageRange>
 8005802:	4601      	mov	r1, r0
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005806:	fba3 3404 	umull	r3, r4, r3, r4
 800580a:	0ca0      	lsrs	r0, r4, #18
 800580c:	f7ff ff88 	bl	8005720 <RCC_SetFlashLatency>
}
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	08015eac 	.word	0x08015eac
 8005818:	08015e4c 	.word	0x08015e4c
 800581c:	431bde83 	.word	0x431bde83

08005820 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800582c:	f011 010c 	ands.w	r1, r1, #12
 8005830:	d00a      	beq.n	8005848 <HAL_RCC_GetSysClockFreq+0x28>
 8005832:	290c      	cmp	r1, #12
 8005834:	d006      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005836:	2904      	cmp	r1, #4
 8005838:	d047      	beq.n	80058ca <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800583a:	2908      	cmp	r1, #8
 800583c:	d03b      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800583e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005840:	4610      	mov	r0, r2
 8005842:	e026      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005844:	2b01      	cmp	r3, #1
 8005846:	d1f6      	bne.n	8005836 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f013 0308 	ands.w	r3, r3, #8
 8005852:	d00d      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x50>
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f013 0308 	ands.w	r3, r3, #8
 800585e:	d124      	bne.n	80058aa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005864:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005868:	4a2e      	ldr	r2, [pc, #184]	; (8005924 <HAL_RCC_GetSysClockFreq+0x104>)
 800586a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800586e:	e00e      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	f012 0f08 	tst.w	r2, #8
 800587a:	d112      	bne.n	80058a2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005888:	4a26      	ldr	r2, [pc, #152]	; (8005924 <HAL_RCC_GetSysClockFreq+0x104>)
 800588a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800588e:	b1d1      	cbz	r1, 80058c6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005890:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800589c:	2b0c      	cmp	r3, #12
 800589e:	d01a      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80058a0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80058a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	e7ee      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x68>
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80058b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058b4:	e7d8      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80058c0:	d106      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80058c2:	4819      	ldr	r0, [pc, #100]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c4:	e7e5      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80058c6:	4610      	mov	r0, r2
 80058c8:	e7e3      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80058ca:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80058cc:	4817      	ldr	r0, [pc, #92]	; (800592c <HAL_RCC_GetSysClockFreq+0x10c>)
 80058ce:	e7e0      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80058d0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80058d2:	4816      	ldr	r0, [pc, #88]	; (800592c <HAL_RCC_GetSysClockFreq+0x10c>)
 80058d4:	e7dd      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d009      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0xd8>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d108      	bne.n	80058fa <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80058f2:	d115      	bne.n	8005920 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80058f4:	4a0c      	ldr	r2, [pc, #48]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f6:	e000      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80058f8:	4a0c      	ldr	r2, [pc, #48]	; (800592c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058fe:	68cb      	ldr	r3, [r1, #12]
 8005900:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005904:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005908:	68cb      	ldr	r3, [r1, #12]
 800590a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800590e:	3301      	adds	r3, #1
 8005910:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005914:	68c8      	ldr	r0, [r1, #12]
 8005916:	0f40      	lsrs	r0, r0, #29
 8005918:	3001      	adds	r0, #1
 800591a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800591e:	e7bf      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005920:	4a02      	ldr	r2, [pc, #8]	; (800592c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005922:	e7ea      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xda>
 8005924:	08015eac 	.word	0x08015eac
 8005928:	01e84800 	.word	0x01e84800
 800592c:	00f42400 	.word	0x00f42400

08005930 <HAL_RCC_GetHCLKFreq>:
{
 8005930:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005932:	f7ff ff75 	bl	8005820 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005940:	4a02      	ldr	r2, [pc, #8]	; (800594c <HAL_RCC_GetHCLKFreq+0x1c>)
 8005942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005946:	fbb0 f0f3 	udiv	r0, r0, r3
 800594a:	bd08      	pop	{r3, pc}
 800594c:	08015e4c 	.word	0x08015e4c

08005950 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005950:	2800      	cmp	r0, #0
 8005952:	f000 8311 	beq.w	8005f78 <HAL_RCC_OscConfig+0x628>
{
 8005956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005958:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	689d      	ldr	r5, [r3, #8]
 8005960:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005964:	68de      	ldr	r6, [r3, #12]
 8005966:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800596a:	6803      	ldr	r3, [r0, #0]
 800596c:	f013 0f20 	tst.w	r3, #32
 8005970:	d02a      	beq.n	80059c8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005972:	2d00      	cmp	r5, #0
 8005974:	d065      	beq.n	8005a42 <HAL_RCC_OscConfig+0xf2>
 8005976:	2d0c      	cmp	r5, #12
 8005978:	d061      	beq.n	8005a3e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800597a:	6a23      	ldr	r3, [r4, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80bf 	beq.w	8005b00 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005986:	6813      	ldr	r3, [r2, #0]
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800598e:	f7fc f907 	bl	8001ba0 <HAL_GetTick>
 8005992:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f013 0f02 	tst.w	r3, #2
 800599e:	f000 80a7 	beq.w	8005af0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	f042 0208 	orr.w	r2, r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80059b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80059b6:	430a      	orrs	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80059c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80059c6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f013 0f01 	tst.w	r3, #1
 80059ce:	f000 80b5 	beq.w	8005b3c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80059d2:	2d08      	cmp	r5, #8
 80059d4:	f000 80ae 	beq.w	8005b34 <HAL_RCC_OscConfig+0x1e4>
 80059d8:	2d0c      	cmp	r5, #12
 80059da:	f000 80a8 	beq.w	8005b2e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80059de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e2:	6813      	ldr	r3, [r2, #0]
 80059e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059e8:	68a1      	ldr	r1, [r4, #8]
 80059ea:	430b      	orrs	r3, r1
 80059ec:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	f000 80c4 	beq.w	8005b80 <HAL_RCC_OscConfig+0x230>
 80059f8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80059fc:	f000 80c5 	beq.w	8005b8a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005a12:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80c2 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005a1c:	f7fc f8c0 	bl	8001ba0 <HAL_GetTick>
 8005a20:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a2c:	f040 8086 	bne.w	8005b3c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a30:	f7fc f8b6 	bl	8001ba0 <HAL_GetTick>
 8005a34:	1bc0      	subs	r0, r0, r7
 8005a36:	2864      	cmp	r0, #100	; 0x64
 8005a38:	d9f3      	bls.n	8005a22 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005a3a:	2003      	movs	r0, #3
 8005a3c:	e2a9      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a3e:	2e01      	cmp	r6, #1
 8005a40:	d19b      	bne.n	800597a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a42:	6a23      	ldr	r3, [r4, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8299 	beq.w	8005f7c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f013 0f08 	tst.w	r3, #8
 8005a56:	d029      	beq.n	8005aac <HAL_RCC_OscConfig+0x15c>
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a62:	4298      	cmp	r0, r3
 8005a64:	d92a      	bls.n	8005abc <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a66:	f7ff feb9 	bl	80057dc <RCC_SetFlashLatencyFromMSIRange>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	f040 8288 	bne.w	8005f80 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a84:	430a      	orrs	r2, r1
 8005a86:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005a90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a94:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005a96:	f7ff ff4b 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 8005a9a:	4bba      	ldr	r3, [pc, #744]	; (8005d84 <HAL_RCC_OscConfig+0x434>)
 8005a9c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005a9e:	4bba      	ldr	r3, [pc, #744]	; (8005d88 <HAL_RCC_OscConfig+0x438>)
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	f7fc f87b 	bl	8001b9c <HAL_InitTick>
        if (status != HAL_OK)
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d08e      	beq.n	80059c8 <HAL_RCC_OscConfig+0x78>
 8005aaa:	e272      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aba:	e7d2      	b.n	8005a62 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f042 0208 	orr.w	r2, r2, #8
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005adc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ae0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ae2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ae4:	f7ff fe7a 	bl	80057dc <RCC_SetFlashLatencyFromMSIRange>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d0d4      	beq.n	8005a96 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005aec:	2001      	movs	r0, #1
 8005aee:	e250      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af0:	f7fc f856 	bl	8001ba0 <HAL_GetTick>
 8005af4:	1bc0      	subs	r0, r0, r7
 8005af6:	2802      	cmp	r0, #2
 8005af8:	f67f af4c 	bls.w	8005994 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005afc:	2003      	movs	r0, #3
 8005afe:	e248      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b0c:	f7fc f848 	bl	8001ba0 <HAL_GetTick>
 8005b10:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f013 0f02 	tst.w	r3, #2
 8005b1c:	f43f af54 	beq.w	80059c8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b20:	f7fc f83e 	bl	8001ba0 <HAL_GetTick>
 8005b24:	1bc0      	subs	r0, r0, r7
 8005b26:	2802      	cmp	r0, #2
 8005b28:	d9f3      	bls.n	8005b12 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005b2a:	2003      	movs	r0, #3
 8005b2c:	e231      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b2e:	2e03      	cmp	r6, #3
 8005b30:	f47f af55 	bne.w	80059de <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8224 	beq.w	8005f84 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	f013 0f02 	tst.w	r3, #2
 8005b42:	d056      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b44:	2d04      	cmp	r5, #4
 8005b46:	d03d      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x274>
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	d039      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 808a 	beq.w	8005c68 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b58:	6813      	ldr	r3, [r2, #0]
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b60:	f7fc f81e 	bl	8001ba0 <HAL_GetTick>
 8005b64:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005b70:	d136      	bne.n	8005be0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b72:	f7fc f815 	bl	8001ba0 <HAL_GetTick>
 8005b76:	1b80      	subs	r0, r0, r6
 8005b78:	2802      	cmp	r0, #2
 8005b7a:	d9f4      	bls.n	8005b66 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	e208      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	e744      	b.n	8005a14 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005b94:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	e739      	b.n	8005a14 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005ba0:	f7fb fffe 	bl	8001ba0 <HAL_GetTick>
 8005ba4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005bb0:	d0c4      	beq.n	8005b3c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb2:	f7fb fff5 	bl	8001ba0 <HAL_GetTick>
 8005bb6:	1bc0      	subs	r0, r0, r7
 8005bb8:	2864      	cmp	r0, #100	; 0x64
 8005bba:	d9f4      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005bbc:	2003      	movs	r0, #3
 8005bbe:	e1e8      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005bc0:	2e02      	cmp	r6, #2
 8005bc2:	d1c3      	bne.n	8005b4c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 81de 	beq.w	8005f88 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bcc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd2:	6853      	ldr	r3, [r2, #4]
 8005bd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bd8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005bdc:	6053      	str	r3, [r2, #4]
}
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005be2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be6:	6853      	ldr	r3, [r2, #4]
 8005be8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005bec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005bf0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f013 0f08 	tst.w	r3, #8
 8005bf8:	d07e      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bfa:	69a3      	ldr	r3, [r4, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d062      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005c08:	69e1      	ldr	r1, [r4, #28]
 8005c0a:	f003 0210 	and.w	r2, r3, #16
 8005c0e:	4291      	cmp	r1, r2
 8005c10:	d011      	beq.n	8005c36 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c12:	f003 0203 	and.w	r2, r3, #3
 8005c16:	2a02      	cmp	r2, #2
 8005c18:	f000 81b8 	beq.w	8005f8c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005c1c:	f013 0f01 	tst.w	r3, #1
 8005c20:	d138      	bne.n	8005c94 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c26:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	69e1      	ldr	r1, [r4, #28]
 8005c30:	430b      	orrs	r3, r1
 8005c32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c3a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005c46:	f7fb ffab 	bl	8001ba0 <HAL_GetTick>
 8005c4a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c54:	f013 0f02 	tst.w	r3, #2
 8005c58:	d14e      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fb ffa1 	bl	8001ba0 <HAL_GetTick>
 8005c5e:	1b80      	subs	r0, r0, r6
 8005c60:	2811      	cmp	r0, #17
 8005c62:	d9f3      	bls.n	8005c4c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005c64:	2003      	movs	r0, #3
 8005c66:	e194      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c6c:	6813      	ldr	r3, [r2, #0]
 8005c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c72:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c74:	f7fb ff94 	bl	8001ba0 <HAL_GetTick>
 8005c78:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005c84:	d0b5      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c86:	f7fb ff8b 	bl	8001ba0 <HAL_GetTick>
 8005c8a:	1b80      	subs	r0, r0, r6
 8005c8c:	2802      	cmp	r0, #2
 8005c8e:	d9f4      	bls.n	8005c7a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005c90:	2003      	movs	r0, #3
 8005c92:	e17e      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c98:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005ca4:	f7fb ff7c 	bl	8001ba0 <HAL_GetTick>
 8005ca8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f013 0f02 	tst.w	r3, #2
 8005cb6:	d0b4      	beq.n	8005c22 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb8:	f7fb ff72 	bl	8001ba0 <HAL_GetTick>
 8005cbc:	1b80      	subs	r0, r0, r6
 8005cbe:	2811      	cmp	r0, #17
 8005cc0:	d9f3      	bls.n	8005caa <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005cc2:	2003      	movs	r0, #3
 8005cc4:	e165      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005cd6:	f7fb ff63 	bl	8001ba0 <HAL_GetTick>
 8005cda:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce4:	f013 0f02 	tst.w	r3, #2
 8005ce8:	d006      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cea:	f7fb ff59 	bl	8001ba0 <HAL_GetTick>
 8005cee:	1b80      	subs	r0, r0, r6
 8005cf0:	2811      	cmp	r0, #17
 8005cf2:	d9f3      	bls.n	8005cdc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005cf4:	2003      	movs	r0, #3
 8005cf6:	e14c      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	f013 0f04 	tst.w	r3, #4
 8005cfe:	f000 80b8 	beq.w	8005e72 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005d02:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <HAL_RCC_OscConfig+0x43c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d0a:	d110      	bne.n	8005d2e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005d0c:	f7ff fc86 	bl	800561c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005d10:	f7fb ff46 	bl	8001ba0 <HAL_GetTick>
 8005d14:	4606      	mov	r6, r0
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_OscConfig+0x43c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d20:	f7fb ff3e 	bl	8001ba0 <HAL_GetTick>
 8005d24:	1b80      	subs	r0, r0, r6
 8005d26:	2802      	cmp	r0, #2
 8005d28:	d9f5      	bls.n	8005d16 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005d2a:	2003      	movs	r0, #3
 8005d2c:	e131      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d068      	beq.n	8005e06 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005d34:	2b85      	cmp	r3, #133	; 0x85
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005d38:	2b05      	cmp	r3, #5
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d40:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005d4c:	f7fb ff28 	bl	8001ba0 <HAL_GetTick>
 8005d50:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f013 0f02 	tst.w	r3, #2
 8005d6e:	d10f      	bne.n	8005d90 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fb ff16 	bl	8001ba0 <HAL_GetTick>
 8005d74:	1b80      	subs	r0, r0, r6
 8005d76:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	d9f1      	bls.n	8005d62 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005d7e:	2003      	movs	r0, #3
 8005d80:	e107      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
 8005d82:	bf00      	nop
 8005d84:	20000074 	.word	0x20000074
 8005d88:	20000078 	.word	0x20000078
 8005d8c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d90:	68e3      	ldr	r3, [r4, #12]
 8005d92:	2b81      	cmp	r3, #129	; 0x81
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005d96:	2b85      	cmp	r3, #133	; 0x85
 8005d98:	d11a      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005d9a:	f7fb ff01 	bl	8001ba0 <HAL_GetTick>
 8005d9e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005dbc:	d159      	bne.n	8005e72 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fb feef 	bl	8001ba0 <HAL_GetTick>
 8005dc2:	1b80      	subs	r0, r0, r6
 8005dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dc8:	4298      	cmp	r0, r3
 8005dca:	d9f1      	bls.n	8005db0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005dcc:	2003      	movs	r0, #3
 8005dce:	e0e0      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005dd0:	f7fb fee6 	bl	8001ba0 <HAL_GetTick>
 8005dd4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005df2:	d03e      	beq.n	8005e72 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df4:	f7fb fed4 	bl	8001ba0 <HAL_GetTick>
 8005df8:	1b80      	subs	r0, r0, r6
 8005dfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dfe:	4298      	cmp	r0, r3
 8005e00:	d9f1      	bls.n	8005de6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005e02:	2003      	movs	r0, #3
 8005e04:	e0c5      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005e06:	f7fb fecb 	bl	8001ba0 <HAL_GetTick>
 8005e0a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e28:	d008      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2a:	f7fb feb9 	bl	8001ba0 <HAL_GetTick>
 8005e2e:	1b80      	subs	r0, r0, r6
 8005e30:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e34:	4298      	cmp	r0, r3
 8005e36:	d9f1      	bls.n	8005e1c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005e38:	2003      	movs	r0, #3
 8005e3a:	e0aa      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005e3c:	f7fb feb0 	bl	8001ba0 <HAL_GetTick>
 8005e40:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f013 0f02 	tst.w	r3, #2
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fb fe9e 	bl	8001ba0 <HAL_GetTick>
 8005e64:	1b80      	subs	r0, r0, r6
 8005e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	d9f1      	bls.n	8005e52 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005e6e:	2003      	movs	r0, #3
 8005e70:	e08f      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 808b 	beq.w	8005f90 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e7a:	2d0c      	cmp	r5, #12
 8005e7c:	d060      	beq.n	8005f40 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fe87 	bl	8001ba0 <HAL_GetTick>
 8005e92:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005e9e:	d148      	bne.n	8005f32 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea4:	68d1      	ldr	r1, [r2, #12]
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x65c>)
 8005ea8:	400b      	ands	r3, r1
 8005eaa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005eac:	2000      	movs	r0, #0
 8005eae:	e070      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005ebc:	f7fb fe70 	bl	8001ba0 <HAL_GetTick>
 8005ec0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ecc:	d12a      	bne.n	8005f24 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed2:	68d3      	ldr	r3, [r2, #12]
 8005ed4:	4936      	ldr	r1, [pc, #216]	; (8005fb0 <HAL_RCC_OscConfig+0x660>)
 8005ed6:	4019      	ands	r1, r3
 8005ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005eda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005edc:	4303      	orrs	r3, r0
 8005ede:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ee0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005ee4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005eea:	4303      	orrs	r3, r0
 8005eec:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005eee:	4303      	orrs	r3, r0
 8005ef0:	4319      	orrs	r1, r3
 8005ef2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005efc:	68d3      	ldr	r3, [r2, #12]
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005f04:	f7fb fe4c 	bl	8001ba0 <HAL_GetTick>
 8005f08:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f14:	d13e      	bne.n	8005f94 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fb fe43 	bl	8001ba0 <HAL_GetTick>
 8005f1a:	1b00      	subs	r0, r0, r4
 8005f1c:	280a      	cmp	r0, #10
 8005f1e:	d9f4      	bls.n	8005f0a <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005f20:	2003      	movs	r0, #3
 8005f22:	e036      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f24:	f7fb fe3c 	bl	8001ba0 <HAL_GetTick>
 8005f28:	1b40      	subs	r0, r0, r5
 8005f2a:	280a      	cmp	r0, #10
 8005f2c:	d9c9      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005f2e:	2003      	movs	r0, #3
 8005f30:	e02f      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fb fe35 	bl	8001ba0 <HAL_GetTick>
 8005f36:	1b00      	subs	r0, r0, r4
 8005f38:	280a      	cmp	r0, #10
 8005f3a:	d9ab      	bls.n	8005e94 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	e028      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d029      	beq.n	8005f98 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005f4a:	f003 0103 	and.w	r1, r3, #3
 8005f4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f50:	4291      	cmp	r1, r2
 8005f52:	d123      	bne.n	8005f9c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005f54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5a:	428a      	cmp	r2, r1
 8005f5c:	d120      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005f5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f64:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005f68:	d11c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005f6a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005f6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d119      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005f74:	2000      	movs	r0, #0
 8005f76:	e00c      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005f78:	2001      	movs	r0, #1
}
 8005f7a:	4770      	bx	lr
        return HAL_ERROR;
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005f80:	2001      	movs	r0, #1
 8005f82:	e006      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f84:	2001      	movs	r0, #1
 8005f86:	e004      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e002      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005f90:	2000      	movs	r0, #0
}
 8005f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7fc      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005f98:	2001      	movs	r0, #1
 8005f9a:	e7fa      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	e7f8      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	e7f6      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e7f4      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	e7f2      	b.n	8005f92 <HAL_RCC_OscConfig+0x642>
 8005fac:	eefefffc 	.word	0xeefefffc
 8005fb0:	11c1808c 	.word	0x11c1808c

08005fb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f000 8127 	beq.w	8006208 <HAL_RCC_ClockConfig+0x254>
{
 8005fba:	b570      	push	{r4, r5, r6, lr}
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b93      	ldr	r3, [pc, #588]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	d32d      	bcc.n	8006028 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	f013 0f02 	tst.w	r3, #2
 8005fd2:	d13f      	bne.n	8006054 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	f013 0f20 	tst.w	r3, #32
 8005fda:	d153      	bne.n	8006084 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005fe2:	d16a      	bne.n	80060ba <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	f013 0f04 	tst.w	r3, #4
 8005fea:	f040 8083 	bne.w	80060f4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fee:	682b      	ldr	r3, [r5, #0]
 8005ff0:	f013 0f08 	tst.w	r3, #8
 8005ff4:	f040 8097 	bne.w	8006126 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	f013 0f01 	tst.w	r3, #1
 8005ffe:	f000 80de 	beq.w	80061be <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006002:	686b      	ldr	r3, [r5, #4]
 8006004:	2b02      	cmp	r3, #2
 8006006:	f000 80a8 	beq.w	800615a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800600a:	2b03      	cmp	r3, #3
 800600c:	f000 80ad 	beq.w	800616a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 80b2 	bne.w	800617a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	f012 0f02 	tst.w	r2, #2
 8006020:	f040 80b1 	bne.w	8006186 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006024:	2001      	movs	r0, #1
 8006026:	e0ee      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006028:	4a79      	ldr	r2, [pc, #484]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	f023 0307 	bic.w	r3, r3, #7
 8006030:	430b      	orrs	r3, r1
 8006032:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006034:	f7fb fdb4 	bl	8001ba0 <HAL_GetTick>
 8006038:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603a:	4b75      	ldr	r3, [pc, #468]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	42a3      	cmp	r3, r4
 8006044:	d0c2      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006046:	f7fb fdab 	bl	8001ba0 <HAL_GetTick>
 800604a:	1b80      	subs	r0, r0, r6
 800604c:	2802      	cmp	r0, #2
 800604e:	d9f4      	bls.n	800603a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006050:	2003      	movs	r0, #3
 8006052:	e0d8      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	688a      	ldr	r2, [r1, #8]
 800605c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006060:	4313      	orrs	r3, r2
 8006062:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006064:	f7fb fd9c 	bl	8001ba0 <HAL_GetTick>
 8006068:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800606a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006074:	d1ae      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006076:	f7fb fd93 	bl	8001ba0 <HAL_GetTick>
 800607a:	1b80      	subs	r0, r0, r6
 800607c:	2802      	cmp	r0, #2
 800607e:	d9f4      	bls.n	800606a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006080:	2003      	movs	r0, #3
 8006082:	e0c0      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006084:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800608e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006098:	f7fb fd82 	bl	8001ba0 <HAL_GetTick>
 800609c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80060aa:	d197      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060ac:	f7fb fd78 	bl	8001ba0 <HAL_GetTick>
 80060b0:	1b80      	subs	r0, r0, r6
 80060b2:	2802      	cmp	r0, #2
 80060b4:	d9f3      	bls.n	800609e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80060b6:	2003      	movs	r0, #3
 80060b8:	e0a5      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80060ba:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80060bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80060c4:	f023 030f 	bic.w	r3, r3, #15
 80060c8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80060cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80060d0:	f7fb fd66 	bl	8001ba0 <HAL_GetTick>
 80060d4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80060d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80060e2:	f47f af7f 	bne.w	8005fe4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060e6:	f7fb fd5b 	bl	8001ba0 <HAL_GetTick>
 80060ea:	1b80      	subs	r0, r0, r6
 80060ec:	2802      	cmp	r0, #2
 80060ee:	d9f2      	bls.n	80060d6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80060f0:	2003      	movs	r0, #3
 80060f2:	e088      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80060f4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80060f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fa:	688a      	ldr	r2, [r1, #8]
 80060fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006100:	4313      	orrs	r3, r2
 8006102:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006104:	f7fb fd4c 	bl	8001ba0 <HAL_GetTick>
 8006108:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800610a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006114:	f47f af6b 	bne.w	8005fee <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006118:	f7fb fd42 	bl	8001ba0 <HAL_GetTick>
 800611c:	1b80      	subs	r0, r0, r6
 800611e:	2802      	cmp	r0, #2
 8006120:	d9f3      	bls.n	800610a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006122:	2003      	movs	r0, #3
 8006124:	e06f      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006126:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612c:	6893      	ldr	r3, [r2, #8]
 800612e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006132:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006136:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006138:	f7fb fd32 	bl	8001ba0 <HAL_GetTick>
 800613c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006148:	f47f af56 	bne.w	8005ff8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800614c:	f7fb fd28 	bl	8001ba0 <HAL_GetTick>
 8006150:	1b80      	subs	r0, r0, r6
 8006152:	2802      	cmp	r0, #2
 8006154:	d9f3      	bls.n	800613e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006156:	2003      	movs	r0, #3
 8006158:	e055      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006164:	d10f      	bne.n	8006186 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006166:	2001      	movs	r0, #1
 8006168:	e04d      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800616a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006176:	2001      	movs	r0, #1
 8006178:	e045      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800617a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006184:	d042      	beq.n	800620c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800618a:	688a      	ldr	r2, [r1, #8]
 800618c:	f022 0203 	bic.w	r2, r2, #3
 8006190:	4313      	orrs	r3, r2
 8006192:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006194:	f7fb fd04 	bl	8001ba0 <HAL_GetTick>
 8006198:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a4:	686a      	ldr	r2, [r5, #4]
 80061a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80061aa:	d008      	beq.n	80061be <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fb fcf8 	bl	8001ba0 <HAL_GetTick>
 80061b0:	1b80      	subs	r0, r0, r6
 80061b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80061b6:	4298      	cmp	r0, r3
 80061b8:	d9ef      	bls.n	800619a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80061ba:	2003      	movs	r0, #3
 80061bc:	e023      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	d915      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4a11      	ldr	r2, [pc, #68]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 80061cc:	6813      	ldr	r3, [r2, #0]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	4323      	orrs	r3, r4
 80061d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80061d6:	f7fb fce3 	bl	8001ba0 <HAL_GetTick>
 80061da:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <HAL_RCC_ClockConfig+0x25c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d006      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061e8:	f7fb fcda 	bl	8001ba0 <HAL_GetTick>
 80061ec:	1b40      	subs	r0, r0, r5
 80061ee:	2802      	cmp	r0, #2
 80061f0:	d9f4      	bls.n	80061dc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80061f2:	2003      	movs	r0, #3
 80061f4:	e007      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061f6:	f7ff fb9b 	bl	8005930 <HAL_RCC_GetHCLKFreq>
 80061fa:	4b06      	ldr	r3, [pc, #24]	; (8006214 <HAL_RCC_ClockConfig+0x260>)
 80061fc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_RCC_ClockConfig+0x264>)
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f7fb fccb 	bl	8001b9c <HAL_InitTick>
}
 8006206:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006208:	2001      	movs	r0, #1
}
 800620a:	4770      	bx	lr
        return HAL_ERROR;
 800620c:	2001      	movs	r0, #1
 800620e:	e7fa      	b.n	8006206 <HAL_RCC_ClockConfig+0x252>
 8006210:	58004000 	.word	0x58004000
 8006214:	20000074 	.word	0x20000074
 8006218:	20000078 	.word	0x20000078

0800621c <HAL_RCC_GetPCLK1Freq>:
{
 800621c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800621e:	f7ff fb87 	bl	8005930 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800622c:	4a02      	ldr	r2, [pc, #8]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006232:	40d8      	lsrs	r0, r3
 8006234:	bd08      	pop	{r3, pc}
 8006236:	bf00      	nop
 8006238:	08015e8c 	.word	0x08015e8c

0800623c <HAL_RCC_GetPCLK2Freq>:
{
 800623c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800623e:	f7ff fb77 	bl	8005930 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800624c:	4a02      	ldr	r2, [pc, #8]	; (8006258 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006252:	40d8      	lsrs	r0, r3
 8006254:	bd08      	pop	{r3, pc}
 8006256:	bf00      	nop
 8006258:	08015e8c 	.word	0x08015e8c

0800625c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006266:	f040 80ab 	bne.w	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800626a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	f013 0f01 	tst.w	r3, #1
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006274:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800627a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800627e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006282:	b292      	uxth	r2, r2
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	f013 0f02 	tst.w	r3, #2
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006292:	68a2      	ldr	r2, [r4, #8]
 8006294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006298:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800629c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80062a0:	b292      	uxth	r2, r2
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	f013 0f20 	tst.w	r3, #32
 80062ae:	d009      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062b0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80062ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80062ca:	d00c      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062cc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062d6:	0c02      	lsrs	r2, r0, #16
 80062d8:	0412      	lsls	r2, r2, #16
 80062da:	ea23 0302 	bic.w	r3, r3, r2
 80062de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80062ec:	d00c      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80062f8:	0c02      	lsrs	r2, r0, #16
 80062fa:	0412      	lsls	r2, r2, #16
 80062fc:	ea23 0302 	bic.w	r3, r3, r2
 8006300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800630e:	d00c      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006310:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006316:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800631a:	0c02      	lsrs	r2, r0, #16
 800631c:	0412      	lsls	r2, r2, #16
 800631e:	ea23 0302 	bic.w	r3, r3, r2
 8006322:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006330:	f040 809e 	bne.w	8006470 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	f013 0f80 	tst.w	r3, #128	; 0x80
 800633a:	f040 80aa 	bne.w	8006492 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006344:	f040 80b6 	bne.w	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	f013 0f10 	tst.w	r3, #16
 800634e:	d00e      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006350:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006356:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800635a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006364:	68e3      	ldr	r3, [r4, #12]
 8006366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636a:	f000 80b4 	beq.w	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006374:	d00f      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006376:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800637c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006380:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800638a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800638c:	b91b      	cbnz	r3, 8006396 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800638e:	68cb      	ldr	r3, [r1, #12]
 8006390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006394:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800639c:	d00e      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800639e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80063a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80063b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b8:	f000 8092 	beq.w	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80063bc:	4628      	mov	r0, r5
 80063be:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80063c0:	f7ff f92c 	bl	800561c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80063c4:	f7fb fbec 	bl	8001ba0 <HAL_GetTick>
 80063c8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063ca:	4b48      	ldr	r3, [pc, #288]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d4:	f7fb fbe4 	bl	8001ba0 <HAL_GetTick>
 80063d8:	1b40      	subs	r0, r0, r5
 80063da:	2802      	cmp	r0, #2
 80063dc:	d9f5      	bls.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80063de:	2503      	movs	r5, #3
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80063e2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80063e4:	2d00      	cmp	r5, #0
 80063e6:	f47f af41 	bne.w	800626c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80063ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80063f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d024      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006404:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006408:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800640c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006410:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006414:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006418:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800641c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006424:	f012 0f02 	tst.w	r2, #2
 8006428:	d10f      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800642a:	2d00      	cmp	r5, #0
 800642c:	f47f af1e 	bne.w	800626c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006430:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006436:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800643a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006444:	e712      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006446:	2200      	movs	r2, #0
 8006448:	e7ec      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800644a:	f7fb fba9 	bl	8001ba0 <HAL_GetTick>
 800644e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f013 0f02 	tst.w	r3, #2
 800645c:	d1e5      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7fb fb9f 	bl	8001ba0 <HAL_GetTick>
 8006462:	1b80      	subs	r0, r0, r6
 8006464:	f241 3388 	movw	r3, #5000	; 0x1388
 8006468:	4298      	cmp	r0, r3
 800646a:	d9f1      	bls.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800646c:	2503      	movs	r5, #3
 800646e:	e7dc      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006470:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006472:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006476:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800647a:	0919      	lsrs	r1, r3, #4
 800647c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006480:	ea22 0201 	bic.w	r2, r2, r1
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006490:	e750      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006492:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006494:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006498:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800649c:	0919      	lsrs	r1, r3, #4
 800649e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80064a2:	ea22 0201 	bic.w	r2, r2, r1
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80064b2:	e744      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064b4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80064b6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80064ba:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80064be:	0919      	lsrs	r1, r3, #4
 80064c0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80064c4:	ea22 0201 	bic.w	r2, r2, r1
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80064d4:	e738      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80064d6:	68cb      	ldr	r3, [r1, #12]
 80064d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064dc:	60cb      	str	r3, [r1, #12]
 80064de:	e746      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064e0:	68cb      	ldr	r3, [r1, #12]
 80064e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e6:	60cb      	str	r3, [r1, #12]
 80064e8:	e768      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064ea:	bf00      	nop
 80064ec:	58000400 	.word	0x58000400

080064f0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80064f0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064f2:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80064f6:	2a01      	cmp	r2, #1
 80064f8:	d035      	beq.n	8006566 <HAL_RTC_DeactivateAlarm+0x76>
 80064fa:	2201      	movs	r2, #1
 80064fc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006500:	2202      	movs	r2, #2
 8006502:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006506:	4a19      	ldr	r2, [pc, #100]	; (800656c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006508:	20ca      	movs	r0, #202	; 0xca
 800650a:	6250      	str	r0, [r2, #36]	; 0x24
 800650c:	2053      	movs	r0, #83	; 0x53
 800650e:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006510:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006514:	d018      	beq.n	8006548 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006518:	6991      	ldr	r1, [r2, #24]
 800651a:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 800651e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006520:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8006522:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006526:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006528:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800652a:	f021 0102 	bic.w	r1, r1, #2
 800652e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006530:	2102      	movs	r1, #2
 8006532:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006536:	21ff      	movs	r1, #255	; 0xff
 8006538:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800653a:	2201      	movs	r2, #1
 800653c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006540:	2000      	movs	r0, #0
 8006542:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8006546:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006548:	6991      	ldr	r1, [r2, #24]
 800654a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800654e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006550:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006552:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006556:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006558:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800655a:	f021 0101 	bic.w	r1, r1, #1
 800655e:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006560:	2101      	movs	r1, #1
 8006562:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006564:	e7e6      	b.n	8006534 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8006566:	2002      	movs	r0, #2
}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40002800 	.word	0x40002800

08006570 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006574:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006576:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006578:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800657a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800657c:	f015 0f01 	tst.w	r5, #1
 8006580:	d106      	bne.n	8006590 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006582:	f015 0f02 	tst.w	r5, #2
 8006586:	d109      	bne.n	800659c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006588:	2301      	movs	r3, #1
 800658a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800658e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006592:	2201      	movs	r2, #1
 8006594:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006596:	f7fb fcab 	bl	8001ef0 <HAL_RTC_AlarmAEventCallback>
 800659a:	e7f2      	b.n	8006582 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800659c:	4b03      	ldr	r3, [pc, #12]	; (80065ac <HAL_RTC_AlarmIRQHandler+0x3c>)
 800659e:	2202      	movs	r2, #2
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 f9ec 	bl	8006980 <HAL_RTCEx_AlarmBEventCallback>
 80065a8:	e7ee      	b.n	8006588 <HAL_RTC_AlarmIRQHandler+0x18>
 80065aa:	bf00      	nop
 80065ac:	40002800 	.word	0x40002800

080065b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065b0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80065b2:	4a0b      	ldr	r2, [pc, #44]	; (80065e0 <HAL_RTC_WaitForSynchro+0x30>)
 80065b4:	68d3      	ldr	r3, [r2, #12]
 80065b6:	f023 0320 	bic.w	r3, r3, #32
 80065ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80065bc:	f7fb faf0 	bl	8001ba0 <HAL_GetTick>
 80065c0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <HAL_RTC_WaitForSynchro+0x30>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f013 0f20 	tst.w	r3, #32
 80065ca:	d107      	bne.n	80065dc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065cc:	f7fb fae8 	bl	8001ba0 <HAL_GetTick>
 80065d0:	1b00      	subs	r0, r0, r4
 80065d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80065d6:	d9f4      	bls.n	80065c2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80065d8:	2003      	movs	r0, #3
 80065da:	e000      	b.n	80065de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80065dc:	2000      	movs	r0, #0
}
 80065de:	bd10      	pop	{r4, pc}
 80065e0:	40002800 	.word	0x40002800

080065e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <RTC_EnterInitMode+0x48>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065ee:	d002      	beq.n	80065f6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80065f0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80065f2:	4620      	mov	r0, r4
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80065f8:	4a0c      	ldr	r2, [pc, #48]	; (800662c <RTC_EnterInitMode+0x48>)
 80065fa:	68d3      	ldr	r3, [r2, #12]
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006602:	f7fb facd 	bl	8001ba0 <HAL_GetTick>
 8006606:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006608:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800660a:	4b08      	ldr	r3, [pc, #32]	; (800662c <RTC_EnterInitMode+0x48>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006612:	d1ee      	bne.n	80065f2 <RTC_EnterInitMode+0xe>
 8006614:	2c03      	cmp	r4, #3
 8006616:	d0ec      	beq.n	80065f2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006618:	f7fb fac2 	bl	8001ba0 <HAL_GetTick>
 800661c:	1b43      	subs	r3, r0, r5
 800661e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006622:	d9f2      	bls.n	800660a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006624:	2403      	movs	r4, #3
 8006626:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800662a:	e7ee      	b.n	800660a <RTC_EnterInitMode+0x26>
 800662c:	40002800 	.word	0x40002800

08006630 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006630:	b510      	push	{r4, lr}
 8006632:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006634:	4b10      	ldr	r3, [pc, #64]	; (8006678 <RTC_ExitInitMode+0x48>)
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f013 0f20 	tst.w	r3, #32
 8006644:	d106      	bne.n	8006654 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006646:	f7ff ffb3 	bl	80065b0 <HAL_RTC_WaitForSynchro>
 800664a:	b198      	cbz	r0, 8006674 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800664c:	2003      	movs	r0, #3
 800664e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006652:	e00f      	b.n	8006674 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <RTC_ExitInitMode+0x48>)
 8006656:	6993      	ldr	r3, [r2, #24]
 8006658:	f023 0320 	bic.w	r3, r3, #32
 800665c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800665e:	f7ff ffa7 	bl	80065b0 <HAL_RTC_WaitForSynchro>
 8006662:	b110      	cbz	r0, 800666a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006664:	2003      	movs	r0, #3
 8006666:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800666a:	4a03      	ldr	r2, [pc, #12]	; (8006678 <RTC_ExitInitMode+0x48>)
 800666c:	6993      	ldr	r3, [r2, #24]
 800666e:	f043 0320 	orr.w	r3, r3, #32
 8006672:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006674:	bd10      	pop	{r4, pc}
 8006676:	bf00      	nop
 8006678:	40002800 	.word	0x40002800

0800667c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800667c:	2800      	cmp	r0, #0
 800667e:	d052      	beq.n	8006726 <HAL_RTC_Init+0xaa>
{
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006684:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8006688:	b163      	cbz	r3, 80066a4 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800668a:	2302      	movs	r3, #2
 800668c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006690:	4b26      	ldr	r3, [pc, #152]	; (800672c <HAL_RTC_Init+0xb0>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f013 0f10 	tst.w	r3, #16
 8006698:	d009      	beq.n	80066ae <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800669a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800669c:	2301      	movs	r3, #1
 800669e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80066a4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80066a8:	f7fb f8c8 	bl	800183c <HAL_RTC_MspInit>
 80066ac:	e7ed      	b.n	800668a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066ae:	4b1f      	ldr	r3, [pc, #124]	; (800672c <HAL_RTC_Init+0xb0>)
 80066b0:	22ca      	movs	r2, #202	; 0xca
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
 80066b4:	2253      	movs	r2, #83	; 0x53
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7ff ff93 	bl	80065e4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80066be:	b128      	cbz	r0, 80066cc <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c0:	4b1a      	ldr	r3, [pc, #104]	; (800672c <HAL_RTC_Init+0xb0>)
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d1eb      	bne.n	80066a2 <HAL_RTC_Init+0x26>
 80066ca:	e7e7      	b.n	800669c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_RTC_Init+0xb0>)
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80066d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80066da:	6999      	ldr	r1, [r3, #24]
 80066dc:	6862      	ldr	r2, [r4, #4]
 80066de:	6920      	ldr	r0, [r4, #16]
 80066e0:	4302      	orrs	r2, r0
 80066e2:	69a0      	ldr	r0, [r4, #24]
 80066e4:	4302      	orrs	r2, r0
 80066e6:	430a      	orrs	r2, r1
 80066e8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80066ea:	68e2      	ldr	r2, [r4, #12]
 80066ec:	68a1      	ldr	r1, [r4, #8]
 80066ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80066fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80066fe:	4301      	orrs	r1, r0
 8006700:	430a      	orrs	r2, r1
 8006702:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006704:	4620      	mov	r0, r4
 8006706:	f7ff ff93 	bl	8006630 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800670a:	2800      	cmp	r0, #0
 800670c:	d1d8      	bne.n	80066c0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800670e:	4907      	ldr	r1, [pc, #28]	; (800672c <HAL_RTC_Init+0xb0>)
 8006710:	698b      	ldr	r3, [r1, #24]
 8006712:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006716:	6a22      	ldr	r2, [r4, #32]
 8006718:	69e5      	ldr	r5, [r4, #28]
 800671a:	432a      	orrs	r2, r5
 800671c:	6965      	ldr	r5, [r4, #20]
 800671e:	432a      	orrs	r2, r5
 8006720:	4313      	orrs	r3, r2
 8006722:	618b      	str	r3, [r1, #24]
 8006724:	e7cc      	b.n	80066c0 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006726:	2001      	movs	r0, #1
}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40002800 	.word	0x40002800

08006730 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006730:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006732:	e002      	b.n	800673a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006734:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006736:	380a      	subs	r0, #10
 8006738:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800673a:	2809      	cmp	r0, #9
 800673c:	d8fa      	bhi.n	8006734 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	b2db      	uxtb	r3, r3
}
 8006742:	4318      	orrs	r0, r3
 8006744:	4770      	bx	lr
	...

08006748 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006748:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800674c:	2b01      	cmp	r3, #1
 800674e:	f000 80b0 	beq.w	80068b2 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	4605      	mov	r5, r0
 8006758:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800675a:	2301      	movs	r3, #1
 800675c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006766:	4b54      	ldr	r3, [pc, #336]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006768:	68de      	ldr	r6, [r3, #12]
 800676a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800676e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006772:	d043      	beq.n	80067fc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006774:	bb12      	cbnz	r2, 80067bc <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f013 0f40 	tst.w	r3, #64	; 0x40
 800677c:	d101      	bne.n	8006782 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800677e:	2300      	movs	r3, #0
 8006780:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006782:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006786:	7820      	ldrb	r0, [r4, #0]
 8006788:	f7ff ffd2 	bl	8006730 <RTC_ByteToBcd2>
 800678c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800678e:	7860      	ldrb	r0, [r4, #1]
 8006790:	f7ff ffce 	bl	8006730 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006794:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006798:	78a0      	ldrb	r0, [r4, #2]
 800679a:	f7ff ffc9 	bl	8006730 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800679e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067a0:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067a2:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80067aa:	f7ff ffc1 	bl	8006730 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067ae:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067b2:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067b4:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067b6:	ea48 0000 	orr.w	r0, r8, r0
 80067ba:	e020      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80067bc:	6948      	ldr	r0, [r1, #20]
 80067be:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80067c2:	d009      	beq.n	80067d8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80067c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80067c8:	d006      	beq.n	80067d8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067ca:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067d2:	d101      	bne.n	80067d8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067d8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067da:	7863      	ldrb	r3, [r4, #1]
 80067dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067e2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067e4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067e6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067e8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067ec:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067f4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067f6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067f8:	4318      	orrs	r0, r3
 80067fa:	e000      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80067fc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067fe:	4b2e      	ldr	r3, [pc, #184]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006800:	22ca      	movs	r2, #202	; 0xca
 8006802:	625a      	str	r2, [r3, #36]	; 0x24
 8006804:	2253      	movs	r2, #83	; 0x53
 8006806:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800680a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680e:	d02a      	beq.n	8006866 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006810:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006818:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800681a:	2202      	movs	r2, #2
 800681c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800681e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006822:	d040      	beq.n	80068a6 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006824:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006826:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006828:	69a2      	ldr	r2, [r4, #24]
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800682c:	6862      	ldr	r2, [r4, #4]
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006830:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006832:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006834:	f042 0202 	orr.w	r2, r2, #2
 8006838:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006840:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_RTC_SetAlarm_IT+0x174>)
 8006844:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800684c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006850:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006852:	22ff      	movs	r2, #255	; 0xff
 8006854:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006856:	2301      	movs	r3, #1
 8006858:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800685c:	2000      	movs	r0, #0
 800685e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800686e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006870:	2201      	movs	r2, #1
 8006872:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006874:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006878:	d00f      	beq.n	800689a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800687a:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 800687c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800687e:	69a2      	ldr	r2, [r4, #24]
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006882:	6862      	ldr	r2, [r4, #4]
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8006886:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006888:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006896:	619a      	str	r2, [r3, #24]
 8006898:	e7d3      	b.n	8006842 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800689a:	69a3      	ldr	r3, [r4, #24]
 800689c:	69e2      	ldr	r2, [r4, #28]
 800689e:	4313      	orrs	r3, r2
 80068a0:	4a05      	ldr	r2, [pc, #20]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80068a2:	6453      	str	r3, [r2, #68]	; 0x44
 80068a4:	e7ed      	b.n	8006882 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80068a6:	69a3      	ldr	r3, [r4, #24]
 80068a8:	69e2      	ldr	r2, [r4, #28]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	4a02      	ldr	r2, [pc, #8]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80068ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068b0:	e7bc      	b.n	800682c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80068b2:	2002      	movs	r0, #2
}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40002800 	.word	0x40002800
 80068bc:	58000800 	.word	0x58000800

080068c0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d017      	beq.n	80068f8 <HAL_RTCEx_EnableBypassShadow+0x38>
 80068c8:	2101      	movs	r1, #1
 80068ca:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ce:	2302      	movs	r3, #2
 80068d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d4:	4b09      	ldr	r3, [pc, #36]	; (80068fc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80068d6:	22ca      	movs	r2, #202	; 0xca
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24
 80068da:	2253      	movs	r2, #83	; 0x53
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	f042 0220 	orr.w	r2, r2, #32
 80068e4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068ea:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068ee:	2300      	movs	r3, #0
 80068f0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80068f4:	4618      	mov	r0, r3
 80068f6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80068f8:	2002      	movs	r0, #2
}
 80068fa:	4770      	bx	lr
 80068fc:	40002800 	.word	0x40002800

08006900 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006900:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d020      	beq.n	800694a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006908:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800690a:	2101      	movs	r1, #1
 800690c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006910:	2302      	movs	r3, #2
 8006912:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006916:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006918:	22ca      	movs	r2, #202	; 0xca
 800691a:	625a      	str	r2, [r3, #36]	; 0x24
 800691c:	2253      	movs	r2, #83	; 0x53
 800691e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006926:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006928:	4c0a      	ldr	r4, [pc, #40]	; (8006954 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800692a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800692e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006932:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800693a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800693e:	2300      	movs	r3, #0
 8006940:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006944:	4618      	mov	r0, r3
}
 8006946:	bc10      	pop	{r4}
 8006948:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800694a:	2002      	movs	r0, #2
}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40002800 	.word	0x40002800
 8006954:	58000800 	.word	0x58000800

08006958 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006964:	d103      	bne.n	800696e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006966:	2301      	movs	r3, #1
 8006968:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800696c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006974:	f7fb fac0 	bl	8001ef8 <HAL_RTCEx_SSRUEventCallback>
 8006978:	e7f5      	b.n	8006966 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800697a:	bf00      	nop
 800697c:	40002800 	.word	0x40002800

08006980 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006980:	4770      	bx	lr

08006982 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006982:	0089      	lsls	r1, r1, #2
 8006984:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006988:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800698c:	600a      	str	r2, [r1, #0]
}
 800698e:	4770      	bx	lr

08006990 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006990:	0089      	lsls	r1, r1, #2
 8006992:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006996:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800699a:	6808      	ldr	r0, [r1, #0]
}
 800699c:	4770      	bx	lr
	...

080069a0 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <SUBGHZSPI_Init+0x20>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80069aa:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80069ae:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80069b0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80069b4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069bc:	601a      	str	r2, [r3, #0]
}
 80069be:	4770      	bx	lr
 80069c0:	58010000 	.word	0x58010000

080069c4 <HAL_SUBGHZ_Init>:
{
 80069c4:	b530      	push	{r4, r5, lr}
 80069c6:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d058      	beq.n	8006a7e <HAL_SUBGHZ_Init+0xba>
 80069cc:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80069ce:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80069d0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80069d4:	b10b      	cbz	r3, 80069da <HAL_SUBGHZ_Init+0x16>
 80069d6:	2d03      	cmp	r5, #3
 80069d8:	d10b      	bne.n	80069f2 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80069da:	2300      	movs	r3, #0
 80069dc:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80069de:	4620      	mov	r0, r4
 80069e0:	f7fa fff0 	bl	80019c4 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80069e4:	4a27      	ldr	r2, [pc, #156]	; (8006a84 <HAL_SUBGHZ_Init+0xc0>)
 80069e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80069ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80069f2:	b185      	cbz	r5, 8006a16 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <HAL_SUBGHZ_Init+0xc4>)
 80069f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069fa:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80069fc:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	f7ff ffce 	bl	80069a0 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	71a3      	strb	r3, [r4, #6]
}
 8006a10:	4628      	mov	r0, r5
 8006a12:	b003      	add	sp, #12
 8006a14:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006a16:	2302      	movs	r3, #2
 8006a18:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a1e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a2a:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <HAL_SUBGHZ_Init+0xc8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a32:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006a36:	2264      	movs	r2, #100	; 0x64
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	b1d3      	cbz	r3, 8006a78 <HAL_SUBGHZ_Init+0xb4>
      count--;
 8006a42:	9b01      	ldr	r3, [sp, #4]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a50:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006a54:	d1f3      	bne.n	8006a3e <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <HAL_SUBGHZ_Init+0xc4>)
 8006a58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a6a:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a70:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006a72:	2d00      	cmp	r5, #0
 8006a74:	d1ca      	bne.n	8006a0c <HAL_SUBGHZ_Init+0x48>
 8006a76:	e7c2      	b.n	80069fe <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006a78:	2501      	movs	r5, #1
 8006a7a:	60a5      	str	r5, [r4, #8]
        break;
 8006a7c:	e7eb      	b.n	8006a56 <HAL_SUBGHZ_Init+0x92>
    return status;
 8006a7e:	2501      	movs	r5, #1
 8006a80:	e7c6      	b.n	8006a10 <HAL_SUBGHZ_Init+0x4c>
 8006a82:	bf00      	nop
 8006a84:	58000800 	.word	0x58000800
 8006a88:	58000400 	.word	0x58000400
 8006a8c:	20000074 	.word	0x20000074

08006a90 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006a90:	b082      	sub	sp, #8
 8006a92:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <SUBGHZSPI_Transmit+0x70>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a9c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006aa0:	2064      	movs	r0, #100	; 0x64
 8006aa2:	fb00 f303 	mul.w	r3, r0, r3
 8006aa6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006aa8:	9b01      	ldr	r3, [sp, #4]
 8006aaa:	b14b      	cbz	r3, 8006ac0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006ab2:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <SUBGHZSPI_Transmit+0x74>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f013 0f02 	tst.w	r3, #2
 8006aba:	d0f5      	beq.n	8006aa8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2000      	movs	r0, #0
 8006abe:	e001      	b.n	8006ac4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <SUBGHZSPI_Transmit+0x74>)
 8006ac6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <SUBGHZSPI_Transmit+0x70>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ad0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ad4:	2164      	movs	r1, #100	; 0x64
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	b143      	cbz	r3, 8006af2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <SUBGHZSPI_Transmit+0x74>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f013 0f01 	tst.w	r3, #1
 8006aee:	d0f5      	beq.n	8006adc <SUBGHZSPI_Transmit+0x4c>
 8006af0:	e001      	b.n	8006af6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006af2:	2001      	movs	r0, #1
 8006af4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006af6:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <SUBGHZSPI_Transmit+0x74>)
 8006af8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006afa:	b002      	add	sp, #8
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000074 	.word	0x20000074
 8006b04:	58010000 	.word	0x58010000

08006b08 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006b08:	b082      	sub	sp, #8
 8006b0a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <SUBGHZSPI_Receive+0x78>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b14:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b18:	2064      	movs	r0, #100	; 0x64
 8006b1a:	fb00 f303 	mul.w	r3, r0, r3
 8006b1e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	b14b      	cbz	r3, 8006b38 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <SUBGHZSPI_Receive+0x7c>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f013 0f02 	tst.w	r3, #2
 8006b32:	d0f5      	beq.n	8006b20 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2000      	movs	r0, #0
 8006b36:	e001      	b.n	8006b3c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b38:	2001      	movs	r0, #1
 8006b3a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <SUBGHZSPI_Receive+0x7c>)
 8006b3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006b42:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <SUBGHZSPI_Receive+0x78>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b4e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b52:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006b56:	fb0c f303 	mul.w	r3, ip, r3
 8006b5a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	b143      	cbz	r3, 8006b72 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b60:	9b01      	ldr	r3, [sp, #4]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <SUBGHZSPI_Receive+0x7c>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f013 0f01 	tst.w	r3, #1
 8006b6e:	d0f5      	beq.n	8006b5c <SUBGHZSPI_Receive+0x54>
 8006b70:	e001      	b.n	8006b76 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b72:	2001      	movs	r0, #1
 8006b74:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <SUBGHZSPI_Receive+0x7c>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006b7c:	b002      	add	sp, #8
 8006b7e:	4770      	bx	lr
 8006b80:	20000074 	.word	0x20000074
 8006b84:	58010000 	.word	0x58010000

08006b88 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b88:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <SUBGHZ_WaitOnBusy+0x50>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b92:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006b96:	2264      	movs	r2, #100	; 0x64
 8006b98:	fb02 f303 	mul.w	r3, r2, r3
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	e006      	b.n	8006bae <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006ba4:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006ba6:	b002      	add	sp, #8
 8006ba8:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006baa:	4213      	tst	r3, r2
 8006bac:	d012      	beq.n	8006bd4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <SUBGHZ_WaitOnBusy+0x54>)
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f013 0304 	ands.w	r3, r3, #4
 8006bb6:	d000      	beq.n	8006bba <SUBGHZ_WaitOnBusy+0x32>
 8006bb8:	2301      	movs	r3, #1
    if (count == 0U)
 8006bba:	9a01      	ldr	r2, [sp, #4]
 8006bbc:	2a00      	cmp	r2, #0
 8006bbe:	d0ef      	beq.n	8006ba0 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006bc0:	9a01      	ldr	r2, [sp, #4]
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006bc6:	4a05      	ldr	r2, [pc, #20]	; (8006bdc <SUBGHZ_WaitOnBusy+0x54>)
 8006bc8:	6952      	ldr	r2, [r2, #20]
 8006bca:	f012 0202 	ands.w	r2, r2, #2
 8006bce:	d0ec      	beq.n	8006baa <SUBGHZ_WaitOnBusy+0x22>
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	e7ea      	b.n	8006baa <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7e6      	b.n	8006ba6 <SUBGHZ_WaitOnBusy+0x1e>
 8006bd8:	20000074 	.word	0x20000074
 8006bdc:	58000400 	.word	0x58000400

08006be0 <SUBGHZ_CheckDeviceReady>:
{
 8006be0:	b500      	push	{lr}
 8006be2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006be4:	7903      	ldrb	r3, [r0, #4]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d004      	beq.n	8006bf4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006bea:	f7ff ffcd 	bl	8006b88 <SUBGHZ_WaitOnBusy>
}
 8006bee:	b003      	add	sp, #12
 8006bf0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <SUBGHZ_CheckDeviceReady+0x4c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bfc:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006c00:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c02:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <SUBGHZ_CheckDeviceReady+0x50>)
 8006c04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f9      	bne.n	8006c10 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <SUBGHZ_CheckDeviceReady+0x50>)
 8006c1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c2a:	e7de      	b.n	8006bea <SUBGHZ_CheckDeviceReady+0xa>
 8006c2c:	20000074 	.word	0x20000074
 8006c30:	58000400 	.word	0x58000400

08006c34 <HAL_SUBGHZ_WriteRegisters>:
{
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c3a:	7980      	ldrb	r0, [r0, #6]
 8006c3c:	fa5f f880 	uxtb.w	r8, r0
 8006c40:	f1b8 0f01 	cmp.w	r8, #1
 8006c44:	d13e      	bne.n	8006cc4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006c46:	460c      	mov	r4, r1
 8006c48:	4617      	mov	r7, r2
 8006c4a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006c4c:	796b      	ldrb	r3, [r5, #5]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d03b      	beq.n	8006cca <HAL_SUBGHZ_WriteRegisters+0x96>
 8006c52:	2301      	movs	r3, #1
 8006c54:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f7ff ffc0 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c60:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006c62:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006c6e:	210d      	movs	r1, #13
 8006c70:	4628      	mov	r0, r5
 8006c72:	f7ff ff0d 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c76:	0a21      	lsrs	r1, r4, #8
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7ff ff09 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c7e:	b2e1      	uxtb	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f7ff ff05 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c86:	2400      	movs	r4, #0
 8006c88:	e005      	b.n	8006c96 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c8a:	5d39      	ldrb	r1, [r7, r4]
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f7ff feff 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c92:	3401      	adds	r4, #1
 8006c94:	b2a4      	uxth	r4, r4
 8006c96:	42b4      	cmp	r4, r6
 8006c98:	d3f7      	bcc.n	8006c8a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c9a:	4a0d      	ldr	r2, [pc, #52]	; (8006cd0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006c9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f7ff ff6d 	bl	8006b88 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006cae:	68ab      	ldr	r3, [r5, #8]
 8006cb0:	b90b      	cbnz	r3, 8006cb6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006cb2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	716b      	strb	r3, [r5, #5]
}
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006cc4:	f04f 0802 	mov.w	r8, #2
 8006cc8:	e7f9      	b.n	8006cbe <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006cca:	f04f 0802 	mov.w	r8, #2
 8006cce:	e7f6      	b.n	8006cbe <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006cd0:	58000400 	.word	0x58000400

08006cd4 <HAL_SUBGHZ_ReadRegisters>:
{
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cda:	7980      	ldrb	r0, [r0, #6]
 8006cdc:	fa5f f880 	uxtb.w	r8, r0
 8006ce0:	f1b8 0f01 	cmp.w	r8, #1
 8006ce4:	d141      	bne.n	8006d6a <HAL_SUBGHZ_ReadRegisters+0x96>
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	4615      	mov	r5, r2
 8006cea:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006cec:	7973      	ldrb	r3, [r6, #5]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d03e      	beq.n	8006d70 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ff72 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cfc:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006cfe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006d0a:	211d      	movs	r1, #29
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f7ff febf 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d12:	0a21      	lsrs	r1, r4, #8
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff febb 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d1a:	b2e1      	uxtb	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7ff feb7 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006d22:	2100      	movs	r1, #0
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff feb3 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	e006      	b.n	8006d3c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7ff fee9 	bl	8006b08 <SUBGHZSPI_Receive>
      pData++;
 8006d36:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006d38:	3401      	adds	r4, #1
 8006d3a:	b2a4      	uxth	r4, r4
 8006d3c:	42bc      	cmp	r4, r7
 8006d3e:	d3f6      	bcc.n	8006d2e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d40:	4a0d      	ldr	r2, [pc, #52]	; (8006d78 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006d42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff ff1a 	bl	8006b88 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d54:	68b3      	ldr	r3, [r6, #8]
 8006d56:	b90b      	cbnz	r3, 8006d5c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006d58:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006d60:	2300      	movs	r3, #0
 8006d62:	7173      	strb	r3, [r6, #5]
}
 8006d64:	4640      	mov	r0, r8
 8006d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d6a:	f04f 0802 	mov.w	r8, #2
 8006d6e:	e7f9      	b.n	8006d64 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006d70:	f04f 0802 	mov.w	r8, #2
 8006d74:	e7f6      	b.n	8006d64 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006d76:	bf00      	nop
 8006d78:	58000400 	.word	0x58000400

08006d7c <HAL_SUBGHZ_ExecSetCmd>:
{
 8006d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d80:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d82:	7980      	ldrb	r0, [r0, #6]
 8006d84:	fa5f f980 	uxtb.w	r9, r0
 8006d88:	f1b9 0f01 	cmp.w	r9, #1
 8006d8c:	d143      	bne.n	8006e16 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006d8e:	4688      	mov	r8, r1
 8006d90:	4617      	mov	r7, r2
 8006d92:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006d94:	796b      	ldrb	r3, [r5, #5]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d040      	beq.n	8006e1c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7ff ff1e 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006da4:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006da8:	d005      	beq.n	8006db6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006daa:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006dae:	d002      	beq.n	8006db6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	712b      	strb	r3, [r5, #4]
 8006db4:	e001      	b.n	8006dba <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006dbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006dc8:	4641      	mov	r1, r8
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7ff fe60 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006dd0:	2400      	movs	r4, #0
 8006dd2:	e005      	b.n	8006de0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006dd4:	5d39      	ldrb	r1, [r7, r4]
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f7ff fe5a 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ddc:	3401      	adds	r4, #1
 8006dde:	b2a4      	uxth	r4, r4
 8006de0:	42b4      	cmp	r4, r6
 8006de2:	d3f7      	bcc.n	8006dd4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006de4:	4a0f      	ldr	r2, [pc, #60]	; (8006e24 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006de6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006df2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006df6:	d10a      	bne.n	8006e0e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006df8:	68ab      	ldr	r3, [r5, #8]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006dfc:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e00:	2301      	movs	r3, #1
 8006e02:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006e04:	2300      	movs	r3, #0
 8006e06:	716b      	strb	r3, [r5, #5]
}
 8006e08:	4648      	mov	r0, r9
 8006e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f7ff feba 	bl	8006b88 <SUBGHZ_WaitOnBusy>
 8006e14:	e7f0      	b.n	8006df8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006e16:	f04f 0902 	mov.w	r9, #2
 8006e1a:	e7f5      	b.n	8006e08 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006e1c:	f04f 0902 	mov.w	r9, #2
 8006e20:	e7f2      	b.n	8006e08 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006e22:	bf00      	nop
 8006e24:	58000400 	.word	0x58000400

08006e28 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e2e:	7980      	ldrb	r0, [r0, #6]
 8006e30:	fa5f f880 	uxtb.w	r8, r0
 8006e34:	f1b8 0f01 	cmp.w	r8, #1
 8006e38:	d139      	bne.n	8006eae <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	4615      	mov	r5, r2
 8006e3e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006e40:	7973      	ldrb	r3, [r6, #5]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d036      	beq.n	8006eb4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006e46:	2301      	movs	r3, #1
 8006e48:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f7ff fec8 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e50:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006e52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff fe15 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006e66:	2100      	movs	r1, #0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff fe11 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e6e:	2400      	movs	r4, #0
 8006e70:	e006      	b.n	8006e80 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff fe47 	bl	8006b08 <SUBGHZSPI_Receive>
      pData++;
 8006e7a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006e7c:	3401      	adds	r4, #1
 8006e7e:	b2a4      	uxth	r4, r4
 8006e80:	42bc      	cmp	r4, r7
 8006e82:	d3f6      	bcc.n	8006e72 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e84:	4a0d      	ldr	r2, [pc, #52]	; (8006ebc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006e86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff fe78 	bl	8006b88 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e98:	68b3      	ldr	r3, [r6, #8]
 8006e9a:	b90b      	cbnz	r3, 8006ea0 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006e9c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	7173      	strb	r3, [r6, #5]
}
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006eae:	f04f 0802 	mov.w	r8, #2
 8006eb2:	e7f9      	b.n	8006ea8 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006eb4:	f04f 0802 	mov.w	r8, #2
 8006eb8:	e7f6      	b.n	8006ea8 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006eba:	bf00      	nop
 8006ebc:	58000400 	.word	0x58000400

08006ec0 <HAL_SUBGHZ_IRQHandler>:
{
 8006ec0:	b530      	push	{r4, r5, lr}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006ecc:	2302      	movs	r3, #2
 8006ece:	aa01      	add	r2, sp, #4
 8006ed0:	2112      	movs	r1, #18
 8006ed2:	f7ff ffa9 	bl	8006e28 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006ed6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006eda:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006ede:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	aa01      	add	r2, sp, #4
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff ff47 	bl	8006d7c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006eee:	f014 0f01 	tst.w	r4, #1
 8006ef2:	d123      	bne.n	8006f3c <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006ef4:	f014 0f02 	tst.w	r4, #2
 8006ef8:	d124      	bne.n	8006f44 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006efa:	f014 0f04 	tst.w	r4, #4
 8006efe:	d125      	bne.n	8006f4c <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006f00:	f014 0f08 	tst.w	r4, #8
 8006f04:	d126      	bne.n	8006f54 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006f06:	f014 0f10 	tst.w	r4, #16
 8006f0a:	d127      	bne.n	8006f5c <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006f0c:	f014 0f20 	tst.w	r4, #32
 8006f10:	d128      	bne.n	8006f64 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006f12:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006f16:	d129      	bne.n	8006f6c <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006f18:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006f1c:	d006      	beq.n	8006f2c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006f1e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006f22:	d027      	beq.n	8006f74 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006f24:	2101      	movs	r1, #1
 8006f26:	4628      	mov	r0, r5
 8006f28:	f00d fcaa 	bl	8014880 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006f2c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006f30:	d125      	bne.n	8006f7e <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006f32:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8006f36:	d126      	bne.n	8006f86 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8006f38:	b003      	add	sp, #12
 8006f3a:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f00d fc87 	bl	8014850 <HAL_SUBGHZ_TxCpltCallback>
 8006f42:	e7d7      	b.n	8006ef4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006f44:	4628      	mov	r0, r5
 8006f46:	f00d fc8b 	bl	8014860 <HAL_SUBGHZ_RxCpltCallback>
 8006f4a:	e7d6      	b.n	8006efa <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f00d fcbb 	bl	80148c8 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006f52:	e7d5      	b.n	8006f00 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006f54:	4628      	mov	r0, r5
 8006f56:	f00d fcbf 	bl	80148d8 <HAL_SUBGHZ_SyncWordValidCallback>
 8006f5a:	e7d4      	b.n	8006f06 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f00d fcc3 	bl	80148e8 <HAL_SUBGHZ_HeaderValidCallback>
 8006f62:	e7d3      	b.n	8006f0c <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006f64:	4628      	mov	r0, r5
 8006f66:	f00d fca7 	bl	80148b8 <HAL_SUBGHZ_HeaderErrorCallback>
 8006f6a:	e7d2      	b.n	8006f12 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f00d fc7f 	bl	8014870 <HAL_SUBGHZ_CRCErrorCallback>
 8006f72:	e7d1      	b.n	8006f18 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006f74:	2100      	movs	r1, #0
 8006f76:	4628      	mov	r0, r5
 8006f78:	f00d fc82 	bl	8014880 <HAL_SUBGHZ_CADStatusCallback>
 8006f7c:	e7d6      	b.n	8006f2c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f00d fc90 	bl	80148a4 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006f84:	e7d5      	b.n	8006f32 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006f86:	4628      	mov	r0, r5
 8006f88:	f00d fcb6 	bl	80148f8 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006f8c:	e7d4      	b.n	8006f38 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08006f90 <HAL_SUBGHZ_WriteBuffer>:
{
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f96:	7980      	ldrb	r0, [r0, #6]
 8006f98:	fa5f f880 	uxtb.w	r8, r0
 8006f9c:	f1b8 0f01 	cmp.w	r8, #1
 8006fa0:	d138      	bne.n	8007014 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4617      	mov	r7, r2
 8006fa6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006fa8:	796b      	ldrb	r3, [r5, #5]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d035      	beq.n	800701a <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7ff fe14 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fb8:	4a19      	ldr	r2, [pc, #100]	; (8007020 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006fba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006fc6:	210e      	movs	r1, #14
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7ff fd61 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f7ff fd5d 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	e005      	b.n	8006fe6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fda:	5d39      	ldrb	r1, [r7, r4]
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f7ff fd57 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fe2:	3401      	adds	r4, #1
 8006fe4:	b2a4      	uxth	r4, r4
 8006fe6:	42b4      	cmp	r4, r6
 8006fe8:	d3f7      	bcc.n	8006fda <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fea:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006fec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff fdc5 	bl	8006b88 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ffe:	68ab      	ldr	r3, [r5, #8]
 8007000:	b90b      	cbnz	r3, 8007006 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007002:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007006:	2301      	movs	r3, #1
 8007008:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800700a:	2300      	movs	r3, #0
 800700c:	716b      	strb	r3, [r5, #5]
}
 800700e:	4640      	mov	r0, r8
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007014:	f04f 0802 	mov.w	r8, #2
 8007018:	e7f9      	b.n	800700e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800701a:	f04f 0802 	mov.w	r8, #2
 800701e:	e7f6      	b.n	800700e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007020:	58000400 	.word	0x58000400

08007024 <HAL_SUBGHZ_ReadBuffer>:
{
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800702a:	7980      	ldrb	r0, [r0, #6]
 800702c:	fa5f f880 	uxtb.w	r8, r0
 8007030:	f1b8 0f01 	cmp.w	r8, #1
 8007034:	d13d      	bne.n	80070b2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007036:	460c      	mov	r4, r1
 8007038:	4615      	mov	r5, r2
 800703a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800703c:	7973      	ldrb	r3, [r6, #5]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d03a      	beq.n	80070b8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8007042:	2301      	movs	r3, #1
 8007044:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff fdca 	bl	8006be0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800704e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007052:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800705a:	211e      	movs	r1, #30
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff fd17 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007062:	4621      	mov	r1, r4
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff fd13 	bl	8006a90 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800706a:	2100      	movs	r1, #0
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff fd0f 	bl	8006a90 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007072:	2400      	movs	r4, #0
 8007074:	e006      	b.n	8007084 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	f7ff fd45 	bl	8006b08 <SUBGHZSPI_Receive>
      pData++;
 800707e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007080:	3401      	adds	r4, #1
 8007082:	b2a4      	uxth	r4, r4
 8007084:	42bc      	cmp	r4, r7
 8007086:	d3f6      	bcc.n	8007076 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007088:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800708a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800708e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff fd76 	bl	8006b88 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800709c:	68b3      	ldr	r3, [r6, #8]
 800709e:	b90b      	cbnz	r3, 80070a4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80070a0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070a4:	2301      	movs	r3, #1
 80070a6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80070a8:	2300      	movs	r3, #0
 80070aa:	7173      	strb	r3, [r6, #5]
}
 80070ac:	4640      	mov	r0, r8
 80070ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070b2:	f04f 0802 	mov.w	r8, #2
 80070b6:	e7f9      	b.n	80070ac <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80070b8:	f04f 0802 	mov.w	r8, #2
 80070bc:	e7f6      	b.n	80070ac <HAL_SUBGHZ_ReadBuffer+0x88>
 80070be:	bf00      	nop
 80070c0:	58000400 	.word	0x58000400

080070c4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80070c4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	e852 3f00 	ldrex	r3, [r2]
 80070ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	e842 3100 	strex	r1, r3, [r2]
 80070d2:	2900      	cmp	r1, #0
 80070d4:	d1f6      	bne.n	80070c4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80070d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	f102 0308 	add.w	r3, r2, #8
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	3208      	adds	r2, #8
 80070e6:	e842 3100 	strex	r1, r3, [r2]
 80070ea:	2900      	cmp	r1, #0
 80070ec:	d1f3      	bne.n	80070d6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ee:	2320      	movs	r3, #32
 80070f0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80070f4:	4770      	bx	lr

080070f6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	e852 3f00 	ldrex	r3, [r2]
 80070fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	e842 3100 	strex	r1, r3, [r2]
 8007104:	2900      	cmp	r1, #0
 8007106:	d1f6      	bne.n	80070f6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007108:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	f102 0308 	add.w	r3, r2, #8
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007116:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	3208      	adds	r2, #8
 800711c:	e842 3100 	strex	r1, r3, [r2]
 8007120:	2900      	cmp	r1, #0
 8007122:	d1f1      	bne.n	8007108 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007124:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d006      	beq.n	8007138 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800712a:	2320      	movs	r3, #32
 800712c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	2300      	movs	r3, #0
 8007132:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007134:	6743      	str	r3, [r0, #116]	; 0x74
}
 8007136:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007138:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	e852 3f00 	ldrex	r3, [r2]
 800713e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	e842 3100 	strex	r1, r3, [r2]
 8007146:	2900      	cmp	r1, #0
 8007148:	d1f6      	bne.n	8007138 <UART_EndRxTransfer+0x42>
 800714a:	e7ee      	b.n	800712a <UART_EndRxTransfer+0x34>

0800714c <HAL_UART_Transmit_DMA>:
{
 800714c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800714e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007152:	2a20      	cmp	r2, #32
 8007154:	d13d      	bne.n	80071d2 <HAL_UART_Transmit_DMA+0x86>
{
 8007156:	b510      	push	{r4, lr}
 8007158:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800715a:	2900      	cmp	r1, #0
 800715c:	d03b      	beq.n	80071d6 <HAL_UART_Transmit_DMA+0x8a>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d03b      	beq.n	80071da <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007162:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007164:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007168:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716c:	2200      	movs	r2, #0
 800716e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007172:	2221      	movs	r2, #33	; 0x21
 8007174:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8007178:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800717a:	b1ca      	cbz	r2, 80071b0 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800717c:	4918      	ldr	r1, [pc, #96]	; (80071e0 <HAL_UART_Transmit_DMA+0x94>)
 800717e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007180:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007182:	4918      	ldr	r1, [pc, #96]	; (80071e4 <HAL_UART_Transmit_DMA+0x98>)
 8007184:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007186:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007188:	4917      	ldr	r1, [pc, #92]	; (80071e8 <HAL_UART_Transmit_DMA+0x9c>)
 800718a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800718c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800718e:	2100      	movs	r1, #0
 8007190:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007192:	6802      	ldr	r2, [r0, #0]
 8007194:	3228      	adds	r2, #40	; 0x28
 8007196:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007198:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800719a:	f7fc fe1f 	bl	8003ddc <HAL_DMA_Start_IT>
 800719e:	b138      	cbz	r0, 80071b0 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071a0:	2310      	movs	r3, #16
 80071a2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 80071a6:	2320      	movs	r3, #32
 80071a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 80071ac:	2001      	movs	r0, #1
 80071ae:	e00f      	b.n	80071d0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	2240      	movs	r2, #64	; 0x40
 80071b4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	f102 0308 	add.w	r3, r2, #8
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	3208      	adds	r2, #8
 80071c6:	e842 3100 	strex	r1, r3, [r2]
 80071ca:	2900      	cmp	r1, #0
 80071cc:	d1f3      	bne.n	80071b6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80071ce:	2000      	movs	r0, #0
}
 80071d0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80071d2:	2002      	movs	r0, #2
}
 80071d4:	4770      	bx	lr
      return HAL_ERROR;
 80071d6:	2001      	movs	r0, #1
 80071d8:	e7fa      	b.n	80071d0 <HAL_UART_Transmit_DMA+0x84>
 80071da:	2001      	movs	r0, #1
 80071dc:	e7f8      	b.n	80071d0 <HAL_UART_Transmit_DMA+0x84>
 80071de:	bf00      	nop
 80071e0:	080071ed 	.word	0x080071ed
 80071e4:	0800725b 	.word	0x0800725b
 80071e8:	08007267 	.word	0x08007267

080071ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071ec:	b508      	push	{r3, lr}
 80071ee:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f013 0f20 	tst.w	r3, #32
 80071fa:	d118      	bne.n	800722e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007202:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	f102 0308 	add.w	r3, r2, #8
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	3208      	adds	r2, #8
 8007212:	e842 3100 	strex	r1, r3, [r2]
 8007216:	2900      	cmp	r1, #0
 8007218:	d1f3      	bne.n	8007202 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800721a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	e852 3f00 	ldrex	r3, [r2]
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	e842 3100 	strex	r1, r3, [r2]
 8007228:	2900      	cmp	r1, #0
 800722a:	d1f6      	bne.n	800721a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800722c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800722e:	f7fa ffa3 	bl	8002178 <HAL_UART_TxCpltCallback>
}
 8007232:	e7fb      	b.n	800722c <UART_DMATransmitCplt+0x40>

08007234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007234:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007236:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	e852 3f00 	ldrex	r3, [r2]
 800723c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	e842 3100 	strex	r1, r3, [r2]
 8007244:	2900      	cmp	r1, #0
 8007246:	d1f6      	bne.n	8007236 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007248:	2320      	movs	r3, #32
 800724a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007252:	f7fa ff91 	bl	8002178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007256:	bd08      	pop	{r3, pc}

08007258 <HAL_UART_TxHalfCpltCallback>:
}
 8007258:	4770      	bx	lr

0800725a <UART_DMATxHalfCplt>:
{
 800725a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800725c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800725e:	f7ff fffb 	bl	8007258 <HAL_UART_TxHalfCpltCallback>
}
 8007262:	bd08      	pop	{r3, pc}

08007264 <HAL_UART_ErrorCallback>:
}
 8007264:	4770      	bx	lr

08007266 <UART_DMAError>:
{
 8007266:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007268:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800726a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800726e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f013 0f80 	tst.w	r3, #128	; 0x80
 800727a:	d001      	beq.n	8007280 <UART_DMAError+0x1a>
 800727c:	2a21      	cmp	r2, #33	; 0x21
 800727e:	d010      	beq.n	80072a2 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007288:	d001      	beq.n	800728e <UART_DMAError+0x28>
 800728a:	2d22      	cmp	r5, #34	; 0x22
 800728c:	d010      	beq.n	80072b0 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800728e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007292:	f043 0310 	orr.w	r3, r3, #16
 8007296:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff ffe2 	bl	8007264 <HAL_UART_ErrorCallback>
}
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff ff0b 	bl	80070c4 <UART_EndTxTransfer>
 80072ae:	e7e7      	b.n	8007280 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff ff1d 	bl	80070f6 <UART_EndRxTransfer>
 80072bc:	e7e7      	b.n	800728e <UART_DMAError+0x28>

080072be <UART_DMAAbortOnError>:
{
 80072be:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80072c8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80072cc:	f7ff ffca 	bl	8007264 <HAL_UART_ErrorCallback>
}
 80072d0:	bd08      	pop	{r3, pc}

080072d2 <HAL_UARTEx_RxEventCallback>:
}
 80072d2:	4770      	bx	lr

080072d4 <HAL_UART_IRQHandler>:
{
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072dc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072de:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072e0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80072e4:	401a      	ands	r2, r3
 80072e6:	d108      	bne.n	80072fa <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e8:	f013 0f20 	tst.w	r3, #32
 80072ec:	d005      	beq.n	80072fa <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ee:	f010 0f20 	tst.w	r0, #32
 80072f2:	d134      	bne.n	800735e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072f4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80072f8:	d131      	bne.n	800735e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80072fa:	b12a      	cbz	r2, 8007308 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072fc:	4a99      	ldr	r2, [pc, #612]	; (8007564 <HAL_UART_IRQHandler+0x290>)
 80072fe:	402a      	ands	r2, r5
 8007300:	d133      	bne.n	800736a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007302:	4e99      	ldr	r6, [pc, #612]	; (8007568 <HAL_UART_IRQHandler+0x294>)
 8007304:	4230      	tst	r0, r6
 8007306:	d130      	bne.n	800736a <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007308:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800730a:	2a01      	cmp	r2, #1
 800730c:	f000 80c6 	beq.w	800749c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007310:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007314:	d003      	beq.n	800731e <HAL_UART_IRQHandler+0x4a>
 8007316:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800731a:	f040 8165 	bne.w	80075e8 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800731e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007322:	d007      	beq.n	8007334 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007324:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007328:	f040 8165 	bne.w	80075f6 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800732c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007330:	f040 8161 	bne.w	80075f6 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007334:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007338:	d003      	beq.n	8007342 <HAL_UART_IRQHandler+0x6e>
 800733a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800733e:	f040 8161 	bne.w	8007604 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007342:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007346:	d003      	beq.n	8007350 <HAL_UART_IRQHandler+0x7c>
 8007348:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800734c:	f040 815e 	bne.w	800760c <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007350:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007354:	d002      	beq.n	800735c <HAL_UART_IRQHandler+0x88>
 8007356:	2800      	cmp	r0, #0
 8007358:	f2c0 815c 	blt.w	8007614 <HAL_UART_IRQHandler+0x340>
}
 800735c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800735e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0fb      	beq.n	800735c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007364:	4620      	mov	r0, r4
 8007366:	4798      	blx	r3
      return;
 8007368:	e7f8      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800736a:	f013 0f01 	tst.w	r3, #1
 800736e:	d009      	beq.n	8007384 <HAL_UART_IRQHandler+0xb0>
 8007370:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007374:	d006      	beq.n	8007384 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007376:	2601      	movs	r6, #1
 8007378:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800737a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800737e:	4331      	orrs	r1, r6
 8007380:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007384:	f013 0f02 	tst.w	r3, #2
 8007388:	d00b      	beq.n	80073a2 <HAL_UART_IRQHandler+0xce>
 800738a:	f015 0f01 	tst.w	r5, #1
 800738e:	d008      	beq.n	80073a2 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007390:	6821      	ldr	r1, [r4, #0]
 8007392:	2602      	movs	r6, #2
 8007394:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007396:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800739a:	f041 0104 	orr.w	r1, r1, #4
 800739e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a2:	f013 0f04 	tst.w	r3, #4
 80073a6:	d00b      	beq.n	80073c0 <HAL_UART_IRQHandler+0xec>
 80073a8:	f015 0f01 	tst.w	r5, #1
 80073ac:	d008      	beq.n	80073c0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	2604      	movs	r6, #4
 80073b2:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80073b8:	f041 0102 	orr.w	r1, r1, #2
 80073bc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073c0:	f013 0f08 	tst.w	r3, #8
 80073c4:	d00b      	beq.n	80073de <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073c6:	f010 0f20 	tst.w	r0, #32
 80073ca:	d100      	bne.n	80073ce <HAL_UART_IRQHandler+0xfa>
 80073cc:	b13a      	cbz	r2, 80073de <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ce:	6822      	ldr	r2, [r4, #0]
 80073d0:	2108      	movs	r1, #8
 80073d2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073d4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80073d8:	430a      	orrs	r2, r1
 80073da:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80073e2:	d00c      	beq.n	80073fe <HAL_UART_IRQHandler+0x12a>
 80073e4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80073e8:	d009      	beq.n	80073fe <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ea:	6822      	ldr	r2, [r4, #0]
 80073ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073f0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073f2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80073f6:	f042 0220 	orr.w	r2, r2, #32
 80073fa:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073fe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007402:	2a00      	cmp	r2, #0
 8007404:	d0aa      	beq.n	800735c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007406:	f013 0f20 	tst.w	r3, #32
 800740a:	d009      	beq.n	8007420 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800740c:	f010 0f20 	tst.w	r0, #32
 8007410:	d102      	bne.n	8007418 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007412:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007416:	d003      	beq.n	8007420 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8007418:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800741a:	b10b      	cbz	r3, 8007420 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800741c:	4620      	mov	r0, r4
 800741e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007420:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f013 0f40 	tst.w	r3, #64	; 0x40
 800742c:	d102      	bne.n	8007434 <HAL_UART_IRQHandler+0x160>
 800742e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007432:	d02c      	beq.n	800748e <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff fe5e 	bl	80070f6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007442:	d020      	beq.n	8007486 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007444:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	f102 0308 	add.w	r3, r2, #8
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	3208      	adds	r2, #8
 8007454:	e842 3100 	strex	r1, r3, [r2]
 8007458:	2900      	cmp	r1, #0
 800745a:	d1f3      	bne.n	8007444 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800745c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007460:	b16b      	cbz	r3, 800747e <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007462:	4a42      	ldr	r2, [pc, #264]	; (800756c <HAL_UART_IRQHandler+0x298>)
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007466:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800746a:	f7fc fd3d 	bl	8003ee8 <HAL_DMA_Abort_IT>
 800746e:	2800      	cmp	r0, #0
 8007470:	f43f af74 	beq.w	800735c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007474:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007478:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800747a:	4798      	blx	r3
 800747c:	e76e      	b.n	800735c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff fef0 	bl	8007264 <HAL_UART_ErrorCallback>
 8007484:	e76a      	b.n	800735c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007486:	4620      	mov	r0, r4
 8007488:	f7ff feec 	bl	8007264 <HAL_UART_ErrorCallback>
 800748c:	e766      	b.n	800735c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800748e:	4620      	mov	r0, r4
 8007490:	f7ff fee8 	bl	8007264 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	2300      	movs	r3, #0
 8007496:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800749a:	e75f      	b.n	800735c <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800749c:	f013 0f10 	tst.w	r3, #16
 80074a0:	f43f af36 	beq.w	8007310 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074a4:	f010 0f10 	tst.w	r0, #16
 80074a8:	f43f af32 	beq.w	8007310 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ac:	2310      	movs	r3, #16
 80074ae:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074b8:	d05a      	beq.n	8007570 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f43f af49 	beq.w	800735c <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074ca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80074ce:	4299      	cmp	r1, r3
 80074d0:	f67f af44 	bls.w	800735c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80074d4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074d8:	6813      	ldr	r3, [r2, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f013 0f20 	tst.w	r3, #32
 80074e0:	d132      	bne.n	8007548 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	e852 3f00 	ldrex	r3, [r2]
 80074e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	e842 3100 	strex	r1, r3, [r2]
 80074f0:	2900      	cmp	r1, #0
 80074f2:	d1f6      	bne.n	80074e2 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	f102 0308 	add.w	r3, r2, #8
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	3208      	adds	r2, #8
 8007504:	e842 3100 	strex	r1, r3, [r2]
 8007508:	2900      	cmp	r1, #0
 800750a:	d1f3      	bne.n	80074f4 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	f102 0308 	add.w	r3, r2, #8
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	3208      	adds	r2, #8
 800751c:	e842 3100 	strex	r1, r3, [r2]
 8007520:	2900      	cmp	r1, #0
 8007522:	d1f3      	bne.n	800750c <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8007524:	2320      	movs	r3, #32
 8007526:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	2300      	movs	r3, #0
 800752c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	e852 3f00 	ldrex	r3, [r2]
 8007534:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	e842 3100 	strex	r1, r3, [r2]
 800753c:	2900      	cmp	r1, #0
 800753e:	d1f6      	bne.n	800752e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007540:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007544:	f7fc fc96 	bl	8003e74 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007548:	2302      	movs	r3, #2
 800754a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800754c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007550:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007554:	b29b      	uxth	r3, r3
 8007556:	1ac9      	subs	r1, r1, r3
 8007558:	b289      	uxth	r1, r1
 800755a:	4620      	mov	r0, r4
 800755c:	f7ff feb9 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
      return;
 8007560:	e6fc      	b.n	800735c <HAL_UART_IRQHandler+0x88>
 8007562:	bf00      	nop
 8007564:	10000001 	.word	0x10000001
 8007568:	04000120 	.word	0x04000120
 800756c:	080072bf 	.word	0x080072bf
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007570:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007574:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007578:	b29b      	uxth	r3, r3
 800757a:	1ac9      	subs	r1, r1, r3
 800757c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800757e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	f43f aee9 	beq.w	800735c <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800758a:	2900      	cmp	r1, #0
 800758c:	f43f aee6 	beq.w	800735c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007590:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	e852 3f00 	ldrex	r3, [r2]
 8007596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	e842 3000 	strex	r0, r3, [r2]
 800759e:	2800      	cmp	r0, #0
 80075a0:	d1f6      	bne.n	8007590 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	f102 0308 	add.w	r3, r2, #8
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	3208      	adds	r2, #8
 80075b6:	e842 3000 	strex	r0, r3, [r2]
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d1f1      	bne.n	80075a2 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 80075be:	2320      	movs	r3, #32
 80075c0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	2300      	movs	r3, #0
 80075c6:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80075c8:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	e852 3f00 	ldrex	r3, [r2]
 80075d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	e842 3000 	strex	r0, r3, [r2]
 80075d8:	2800      	cmp	r0, #0
 80075da:	d1f6      	bne.n	80075ca <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075dc:	2302      	movs	r3, #2
 80075de:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7ff fe76 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
      return;
 80075e6:	e6b9      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075ec:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fe60 	bl	80082b4 <HAL_UARTEx_WakeupCallback>
    return;
 80075f4:	e6b2      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80075f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f43f aeaf 	beq.w	800735c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80075fe:	4620      	mov	r0, r4
 8007600:	4798      	blx	r3
    return;
 8007602:	e6ab      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fe15 	bl	8007234 <UART_EndTransmit_IT>
    return;
 800760a:	e6a7      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fe53 	bl	80082b8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007612:	e6a3      	b.n	800735c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fe4e 	bl	80082b6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800761a:	e69f      	b.n	800735c <HAL_UART_IRQHandler+0x88>

0800761c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800761c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800761e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007622:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007626:	2a22      	cmp	r2, #34	; 0x22
 8007628:	d005      	beq.n	8007636 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800762a:	6802      	ldr	r2, [r0, #0]
 800762c:	6993      	ldr	r3, [r2, #24]
 800762e:	f043 0308 	orr.w	r3, r3, #8
 8007632:	6193      	str	r3, [r2, #24]
  }
}
 8007634:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007636:	6802      	ldr	r2, [r0, #0]
 8007638:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800763a:	b2db      	uxtb	r3, r3
 800763c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800763e:	400b      	ands	r3, r1
 8007640:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007642:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007644:	3301      	adds	r3, #1
 8007646:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007648:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007656:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e9      	bne.n	8007634 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007660:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	e852 3f00 	ldrex	r3, [r2]
 8007666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	e842 3100 	strex	r1, r3, [r2]
 800766e:	2900      	cmp	r1, #0
 8007670:	d1f6      	bne.n	8007660 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	f102 0308 	add.w	r3, r2, #8
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	3208      	adds	r2, #8
 8007682:	e842 3100 	strex	r1, r3, [r2]
 8007686:	2900      	cmp	r1, #0
 8007688:	d1f3      	bne.n	8007672 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800768a:	2320      	movs	r3, #32
 800768c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007694:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007696:	6803      	ldr	r3, [r0, #0]
 8007698:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <UART_RxISR_8BIT+0xd8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00c      	beq.n	80076b8 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80076a4:	d008      	beq.n	80076b8 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	e852 3f00 	ldrex	r3, [r2]
 80076ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	e842 3100 	strex	r1, r3, [r2]
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d1f6      	bne.n	80076a6 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d116      	bne.n	80076ec <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076be:	2300      	movs	r3, #0
 80076c0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	e852 3f00 	ldrex	r3, [r2]
 80076c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	e842 3100 	strex	r1, r3, [r2]
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d1f6      	bne.n	80076c2 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	f012 0f10 	tst.w	r2, #16
 80076dc:	d001      	beq.n	80076e2 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076de:	2210      	movs	r2, #16
 80076e0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80076e6:	f7ff fdf4 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
 80076ea:	e7a3      	b.n	8007634 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80076ec:	f7fa fd54 	bl	8002198 <HAL_UART_RxCpltCallback>
 80076f0:	e7a0      	b.n	8007634 <UART_RxISR_8BIT+0x18>
 80076f2:	bf00      	nop
 80076f4:	40008000 	.word	0x40008000

080076f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076f8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076fa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076fe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007702:	2b22      	cmp	r3, #34	; 0x22
 8007704:	d005      	beq.n	8007712 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007706:	6802      	ldr	r2, [r0, #0]
 8007708:	6993      	ldr	r3, [r2, #24]
 800770a:	f043 0308 	orr.w	r3, r3, #8
 800770e:	6193      	str	r3, [r2, #24]
  }
}
 8007710:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007712:	6803      	ldr	r3, [r0, #0]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007716:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8007718:	4013      	ands	r3, r2
 800771a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800771c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800771e:	3302      	adds	r3, #2
 8007720:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8007722:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29b      	uxth	r3, r3
 800772c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007730:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1ea      	bne.n	8007710 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800773a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	e852 3f00 	ldrex	r3, [r2]
 8007740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	e842 3100 	strex	r1, r3, [r2]
 8007748:	2900      	cmp	r1, #0
 800774a:	d1f6      	bne.n	800773a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	f102 0308 	add.w	r3, r2, #8
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	3208      	adds	r2, #8
 800775c:	e842 3100 	strex	r1, r3, [r2]
 8007760:	2900      	cmp	r1, #0
 8007762:	d1f3      	bne.n	800774c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007764:	2320      	movs	r3, #32
 8007766:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800776e:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007770:	6803      	ldr	r3, [r0, #0]
 8007772:	4a16      	ldr	r2, [pc, #88]	; (80077cc <UART_RxISR_16BIT+0xd4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00c      	beq.n	8007792 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800777e:	d008      	beq.n	8007792 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007780:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	e852 3f00 	ldrex	r3, [r2]
 8007786:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	e842 3100 	strex	r1, r3, [r2]
 800778e:	2900      	cmp	r1, #0
 8007790:	d1f6      	bne.n	8007780 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007792:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d116      	bne.n	80077c6 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007798:	2300      	movs	r3, #0
 800779a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	e852 3f00 	ldrex	r3, [r2]
 80077a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	e842 3100 	strex	r1, r3, [r2]
 80077aa:	2900      	cmp	r1, #0
 80077ac:	d1f6      	bne.n	800779c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077ae:	6803      	ldr	r3, [r0, #0]
 80077b0:	69da      	ldr	r2, [r3, #28]
 80077b2:	f012 0f10 	tst.w	r2, #16
 80077b6:	d001      	beq.n	80077bc <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b8:	2210      	movs	r2, #16
 80077ba:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077bc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80077c0:	f7ff fd87 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
 80077c4:	e7a4      	b.n	8007710 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80077c6:	f7fa fce7 	bl	8002198 <HAL_UART_RxCpltCallback>
 80077ca:	e7a1      	b.n	8007710 <UART_RxISR_16BIT+0x18>
 80077cc:	40008000 	.word	0x40008000

080077d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80077d4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077d8:	6803      	ldr	r3, [r0, #0]
 80077da:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077dc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077e0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80077e8:	2a22      	cmp	r2, #34	; 0x22
 80077ea:	d005      	beq.n	80077f8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	619a      	str	r2, [r3, #24]
  }
}
 80077f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80077fa:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077fe:	e008      	b.n	8007812 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007800:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007804:	2b00      	cmp	r3, #0
 8007806:	d14c      	bne.n	80078a2 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8007808:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04e      	beq.n	80078b0 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007812:	2f00      	cmp	r7, #0
 8007814:	f000 809a 	beq.w	800794c <UART_RxISR_8BIT_FIFOEN+0x17c>
 8007818:	f015 0f20 	tst.w	r5, #32
 800781c:	f000 8096 	beq.w	800794c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007824:	b2f3      	uxtb	r3, r6
 8007826:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007828:	400b      	ands	r3, r1
 800782a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800782c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800782e:	3301      	adds	r3, #1
 8007830:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007832:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007844:	f015 0f07 	tst.w	r5, #7
 8007848:	d0de      	beq.n	8007808 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800784a:	f015 0f01 	tst.w	r5, #1
 800784e:	d009      	beq.n	8007864 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007850:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007854:	d006      	beq.n	8007864 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007856:	2201      	movs	r2, #1
 8007858:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800785a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007864:	f015 0f02 	tst.w	r5, #2
 8007868:	d00b      	beq.n	8007882 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800786a:	f018 0f01 	tst.w	r8, #1
 800786e:	d008      	beq.n	8007882 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	2202      	movs	r2, #2
 8007874:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007876:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800787a:	f043 0304 	orr.w	r3, r3, #4
 800787e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007882:	f015 0f04 	tst.w	r5, #4
 8007886:	d0bb      	beq.n	8007800 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007888:	f018 0f01 	tst.w	r8, #1
 800788c:	d0b8      	beq.n	8007800 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	2204      	movs	r2, #4
 8007892:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007894:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80078a0:	e7ae      	b.n	8007800 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7ff fcde 	bl	8007264 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80078ae:	e7ab      	b.n	8007808 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	e852 3f00 	ldrex	r3, [r2]
 80078b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	e842 3100 	strex	r1, r3, [r2]
 80078be:	2900      	cmp	r1, #0
 80078c0:	d1f6      	bne.n	80078b0 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f102 0308 	add.w	r3, r2, #8
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	3208      	adds	r2, #8
 80078d6:	e842 3100 	strex	r1, r3, [r2]
 80078da:	2900      	cmp	r1, #0
 80078dc:	d1f1      	bne.n	80078c2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80078de:	2320      	movs	r3, #32
 80078e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80078f8:	d106      	bne.n	8007908 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d00d      	beq.n	800791c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8007900:	4620      	mov	r0, r4
 8007902:	f7fa fc49 	bl	8002198 <HAL_UART_RxCpltCallback>
 8007906:	e784      	b.n	8007812 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007908:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	e852 3f00 	ldrex	r3, [r2]
 800790e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	e842 3100 	strex	r1, r3, [r2]
 8007916:	2900      	cmp	r1, #0
 8007918:	d1f6      	bne.n	8007908 <UART_RxISR_8BIT_FIFOEN+0x138>
 800791a:	e7ee      	b.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791c:	2300      	movs	r3, #0
 800791e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	e852 3f00 	ldrex	r3, [r2]
 8007926:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	e842 3100 	strex	r1, r3, [r2]
 800792e:	2900      	cmp	r1, #0
 8007930:	d1f6      	bne.n	8007920 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	69da      	ldr	r2, [r3, #28]
 8007936:	f012 0f10 	tst.w	r2, #16
 800793a:	d001      	beq.n	8007940 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793c:	2210      	movs	r2, #16
 800793e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007940:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007944:	4620      	mov	r0, r4
 8007946:	f7ff fcc4 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
 800794a:	e762      	b.n	8007812 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800794c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007950:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007952:	2b00      	cmp	r3, #0
 8007954:	f43f af4e 	beq.w	80077f4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007958:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800795c:	429a      	cmp	r2, r3
 800795e:	f67f af49 	bls.w	80077f4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007962:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	f102 0308 	add.w	r3, r2, #8
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	3208      	adds	r2, #8
 8007972:	e842 3100 	strex	r1, r3, [r2]
 8007976:	2900      	cmp	r1, #0
 8007978:	d1f3      	bne.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800797c:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800797e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	e852 3f00 	ldrex	r3, [r2]
 8007984:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	e842 3100 	strex	r1, r3, [r2]
 800798c:	2900      	cmp	r1, #0
 800798e:	d1f6      	bne.n	800797e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007990:	e730      	b.n	80077f4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007992:	bf00      	nop
 8007994:	40008000 	.word	0x40008000
 8007998:	0800761d 	.word	0x0800761d

0800799c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80079a0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079a4:	6803      	ldr	r3, [r0, #0]
 80079a6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079a8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079ac:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079b0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80079b4:	2a22      	cmp	r2, #34	; 0x22
 80079b6:	d005      	beq.n	80079c4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	619a      	str	r2, [r3, #24]
  }
}
 80079c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80079c6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079ca:	e008      	b.n	80079de <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d14b      	bne.n	8007a6c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80079d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d04d      	beq.n	8007a7a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079de:	2f00      	cmp	r7, #0
 80079e0:	f000 8099 	beq.w	8007b16 <UART_RxISR_16BIT_FIFOEN+0x17a>
 80079e4:	f015 0f20 	tst.w	r5, #32
 80079e8:	f000 8095 	beq.w	8007b16 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80079f2:	4033      	ands	r3, r6
 80079f4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80079f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079f8:	3302      	adds	r3, #2
 80079fa:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80079fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a0e:	f015 0f07 	tst.w	r5, #7
 8007a12:	d0df      	beq.n	80079d4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a14:	f015 0f01 	tst.w	r5, #1
 8007a18:	d009      	beq.n	8007a2e <UART_RxISR_16BIT_FIFOEN+0x92>
 8007a1a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007a1e:	d006      	beq.n	8007a2e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a20:	2201      	movs	r2, #1
 8007a22:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a24:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a2e:	f015 0f02 	tst.w	r5, #2
 8007a32:	d00b      	beq.n	8007a4c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007a34:	f018 0f01 	tst.w	r8, #1
 8007a38:	d008      	beq.n	8007a4c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a40:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a4c:	f015 0f04 	tst.w	r5, #4
 8007a50:	d0bc      	beq.n	80079cc <UART_RxISR_16BIT_FIFOEN+0x30>
 8007a52:	f018 0f01 	tst.w	r8, #1
 8007a56:	d0b9      	beq.n	80079cc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007a62:	f043 0302 	orr.w	r3, r3, #2
 8007a66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007a6a:	e7af      	b.n	80079cc <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f7ff fbf9 	bl	8007264 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007a78:	e7ac      	b.n	80079d4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	e852 3f00 	ldrex	r3, [r2]
 8007a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	e842 3100 	strex	r1, r3, [r2]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d1f6      	bne.n	8007a7a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	f102 0308 	add.w	r3, r2, #8
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	3208      	adds	r2, #8
 8007aa0:	e842 3100 	strex	r1, r3, [r2]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d1f1      	bne.n	8007a8c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab2:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	4a29      	ldr	r2, [pc, #164]	; (8007b5c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007ac2:	d106      	bne.n	8007ad2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d00d      	beq.n	8007ae6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7fa fb64 	bl	8002198 <HAL_UART_RxCpltCallback>
 8007ad0:	e785      	b.n	80079de <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	e852 3f00 	ldrex	r3, [r2]
 8007ad8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	e842 3100 	strex	r1, r3, [r2]
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d1f6      	bne.n	8007ad2 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007ae4:	e7ee      	b.n	8007ac4 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	e852 3f00 	ldrex	r3, [r2]
 8007af0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	e842 3100 	strex	r1, r3, [r2]
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d1f6      	bne.n	8007aea <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	f012 0f10 	tst.w	r2, #16
 8007b04:	d001      	beq.n	8007b0a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b06:	2210      	movs	r2, #16
 8007b08:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b0a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f7ff fbdf 	bl	80072d2 <HAL_UARTEx_RxEventCallback>
 8007b14:	e763      	b.n	80079de <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007b16:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007b1a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f43f af4f 	beq.w	80079c0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007b22:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f67f af4a 	bls.w	80079c0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	f102 0308 	add.w	r3, r2, #8
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	3208      	adds	r2, #8
 8007b3c:	e842 3100 	strex	r1, r3, [r2]
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d1f3      	bne.n	8007b2c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007b44:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007b46:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	e852 3f00 	ldrex	r3, [r2]
 8007b4e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	e842 3100 	strex	r1, r3, [r2]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d1f6      	bne.n	8007b48 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007b5a:	e731      	b.n	80079c0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007b5c:	40008000 	.word	0x40008000
 8007b60:	080076f9 	.word	0x080076f9

08007b64 <UART_SetConfig>:
{
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b68:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b6a:	6883      	ldr	r3, [r0, #8]
 8007b6c:	6902      	ldr	r2, [r0, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	6942      	ldr	r2, [r0, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	69c2      	ldr	r2, [r0, #28]
 8007b76:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b78:	6808      	ldr	r0, [r1, #0]
 8007b7a:	4a9d      	ldr	r2, [pc, #628]	; (8007df0 <UART_SetConfig+0x28c>)
 8007b7c:	4002      	ands	r2, r0
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b82:	6822      	ldr	r2, [r4, #0]
 8007b84:	6853      	ldr	r3, [r2, #4]
 8007b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b8a:	68e1      	ldr	r1, [r4, #12]
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b90:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	4b97      	ldr	r3, [pc, #604]	; (8007df4 <UART_SetConfig+0x290>)
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d001      	beq.n	8007b9e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007b9a:	6a23      	ldr	r3, [r4, #32]
 8007b9c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9e:	6893      	ldr	r3, [r2, #8]
 8007ba0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ba4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007bb0:	f023 030f 	bic.w	r3, r3, #15
 8007bb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	4a8e      	ldr	r2, [pc, #568]	; (8007df8 <UART_SetConfig+0x294>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01c      	beq.n	8007bfc <UART_SetConfig+0x98>
 8007bc2:	4a8e      	ldr	r2, [pc, #568]	; (8007dfc <UART_SetConfig+0x298>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d031      	beq.n	8007c2c <UART_SetConfig+0xc8>
 8007bc8:	4a8a      	ldr	r2, [pc, #552]	; (8007df4 <UART_SetConfig+0x290>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d04b      	beq.n	8007c66 <UART_SetConfig+0x102>
 8007bce:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bd0:	4988      	ldr	r1, [pc, #544]	; (8007df4 <UART_SetConfig+0x290>)
 8007bd2:	428b      	cmp	r3, r1
 8007bd4:	d068      	beq.n	8007ca8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd6:	69e0      	ldr	r0, [r4, #28]
 8007bd8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007bdc:	f000 80a5 	beq.w	8007d2a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007be0:	2a08      	cmp	r2, #8
 8007be2:	f200 811f 	bhi.w	8007e24 <UART_SetConfig+0x2c0>
 8007be6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007bea:	00d3      	.short	0x00d3
 8007bec:	00d100f5 	.word	0x00d100f5
 8007bf0:	00f8011d 	.word	0x00f8011d
 8007bf4:	011d011d 	.word	0x011d011d
 8007bf8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c00:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c04:	f002 0203 	and.w	r2, r2, #3
 8007c08:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c0c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007c10:	2a03      	cmp	r2, #3
 8007c12:	d809      	bhi.n	8007c28 <UART_SetConfig+0xc4>
 8007c14:	e8df f002 	tbb	[pc, r2]
 8007c18:	063c0402 	.word	0x063c0402
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	e7d7      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c20:	2204      	movs	r2, #4
 8007c22:	e7d5      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c24:	2208      	movs	r2, #8
 8007c26:	e7d3      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c28:	2210      	movs	r2, #16
 8007c2a:	e7d1      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c30:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c34:	f002 020c 	and.w	r2, r2, #12
 8007c38:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007c3c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007c40:	2a0c      	cmp	r2, #12
 8007c42:	d80e      	bhi.n	8007c62 <UART_SetConfig+0xfe>
 8007c44:	e8df f002 	tbb	[pc, r2]
 8007c48:	0d0d0d07 	.word	0x0d0d0d07
 8007c4c:	0d0d0d09 	.word	0x0d0d0d09
 8007c50:	0d0d0d26 	.word	0x0d0d0d26
 8007c54:	0b          	.byte	0x0b
 8007c55:	00          	.byte	0x00
 8007c56:	2200      	movs	r2, #0
 8007c58:	e7ba      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	e7b8      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c5e:	2208      	movs	r2, #8
 8007c60:	e7b6      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c62:	2210      	movs	r2, #16
 8007c64:	e7b4      	b.n	8007bd0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c6a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007c6e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007c72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007c76:	d00f      	beq.n	8007c98 <UART_SetConfig+0x134>
 8007c78:	d805      	bhi.n	8007c86 <UART_SetConfig+0x122>
 8007c7a:	b17a      	cbz	r2, 8007c9c <UART_SetConfig+0x138>
 8007c7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007c80:	d10e      	bne.n	8007ca0 <UART_SetConfig+0x13c>
 8007c82:	2204      	movs	r2, #4
 8007c84:	e7a4      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c86:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007c8a:	d10b      	bne.n	8007ca4 <UART_SetConfig+0x140>
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	e79f      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c90:	2202      	movs	r2, #2
 8007c92:	e79d      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c94:	2202      	movs	r2, #2
 8007c96:	e79b      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c98:	2202      	movs	r2, #2
 8007c9a:	e799      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	e797      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	e795      	b.n	8007bd0 <UART_SetConfig+0x6c>
 8007ca4:	2210      	movs	r2, #16
 8007ca6:	e793      	b.n	8007bd0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007ca8:	2a08      	cmp	r2, #8
 8007caa:	f200 809c 	bhi.w	8007de6 <UART_SetConfig+0x282>
 8007cae:	e8df f002 	tbb	[pc, r2]
 8007cb2:	9a08      	.short	0x9a08
 8007cb4:	9a379a3a 	.word	0x9a379a3a
 8007cb8:	9a9a      	.short	0x9a9a
 8007cba:	05          	.byte	0x05
 8007cbb:	00          	.byte	0x00
 8007cbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007cc0:	e004      	b.n	8007ccc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fe faab 	bl	800621c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f000 808f 	beq.w	8007dea <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007cce:	4b4c      	ldr	r3, [pc, #304]	; (8007e00 <UART_SetConfig+0x29c>)
 8007cd0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007cd4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cd8:	6865      	ldr	r5, [r4, #4]
 8007cda:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	f200 8094 	bhi.w	8007e0c <UART_SetConfig+0x2a8>
 8007ce4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007ce8:	f200 8092 	bhi.w	8007e10 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cec:	2600      	movs	r6, #0
 8007cee:	4633      	mov	r3, r6
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	f7f8 ff3d 	bl	8000b70 <__aeabi_uldivmod>
 8007cf6:	0209      	lsls	r1, r1, #8
 8007cf8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007cfc:	0200      	lsls	r0, r0, #8
 8007cfe:	086b      	lsrs	r3, r5, #1
 8007d00:	18c0      	adds	r0, r0, r3
 8007d02:	462a      	mov	r2, r5
 8007d04:	4633      	mov	r3, r6
 8007d06:	f141 0100 	adc.w	r1, r1, #0
 8007d0a:	f7f8 ff31 	bl	8000b70 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d0e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007d12:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <UART_SetConfig+0x2a0>)
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d87d      	bhi.n	8007e14 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	60d8      	str	r0, [r3, #12]
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	e050      	b.n	8007dc2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d20:	f7fd fd7e 	bl	8005820 <HAL_RCC_GetSysClockFreq>
        break;
 8007d24:	e7cf      	b.n	8007cc6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007d26:	4838      	ldr	r0, [pc, #224]	; (8007e08 <UART_SetConfig+0x2a4>)
 8007d28:	e7d0      	b.n	8007ccc <UART_SetConfig+0x168>
    switch (clocksource)
 8007d2a:	2a08      	cmp	r2, #8
 8007d2c:	d874      	bhi.n	8007e18 <UART_SetConfig+0x2b4>
 8007d2e:	e8df f002 	tbb	[pc, r2]
 8007d32:	2707      	.short	0x2707
 8007d34:	732a7305 	.word	0x732a7305
 8007d38:	7373      	.short	0x7373
 8007d3a:	0b          	.byte	0x0b
 8007d3b:	00          	.byte	0x00
 8007d3c:	4832      	ldr	r0, [pc, #200]	; (8007e08 <UART_SetConfig+0x2a4>)
 8007d3e:	e003      	b.n	8007d48 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d40:	f7fe fa6c 	bl	800621c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d069      	beq.n	8007e1c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d4a:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <UART_SetConfig+0x29c>)
 8007d4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8007d54:	6862      	ldr	r2, [r4, #4]
 8007d56:	0853      	lsrs	r3, r2, #1
 8007d58:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007d5c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d60:	f1a3 0110 	sub.w	r1, r3, #16
 8007d64:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007d68:	4291      	cmp	r1, r2
 8007d6a:	d859      	bhi.n	8007e20 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d72:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007d76:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	60d3      	str	r3, [r2, #12]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e020      	b.n	8007dc2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d80:	f7fe fa5c 	bl	800623c <HAL_RCC_GetPCLK2Freq>
        break;
 8007d84:	e7de      	b.n	8007d44 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d86:	f7fd fd4b 	bl	8005820 <HAL_RCC_GetSysClockFreq>
        break;
 8007d8a:	e7db      	b.n	8007d44 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007d8c:	481e      	ldr	r0, [pc, #120]	; (8007e08 <UART_SetConfig+0x2a4>)
 8007d8e:	e003      	b.n	8007d98 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d90:	f7fe fa44 	bl	800621c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d047      	beq.n	8007e28 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007d9a:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <UART_SetConfig+0x29c>)
 8007d9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007da0:	fbb0 f0f3 	udiv	r0, r0, r3
 8007da4:	6863      	ldr	r3, [r4, #4]
 8007da6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007daa:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dae:	f1a0 0210 	sub.w	r2, r0, #16
 8007db2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d838      	bhi.n	8007e2c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	b280      	uxth	r0, r0
 8007dbe:	60d8      	str	r0, [r3, #12]
 8007dc0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dc8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007dd0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd4:	f7fe fa32 	bl	800623c <HAL_RCC_GetPCLK2Freq>
        break;
 8007dd8:	e7dc      	b.n	8007d94 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fd fd21 	bl	8005820 <HAL_RCC_GetSysClockFreq>
        break;
 8007dde:	e7d9      	b.n	8007d94 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007de0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007de4:	e7d8      	b.n	8007d98 <UART_SetConfig+0x234>
    switch (clocksource)
 8007de6:	2001      	movs	r0, #1
 8007de8:	e7eb      	b.n	8007dc2 <UART_SetConfig+0x25e>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e7e9      	b.n	8007dc2 <UART_SetConfig+0x25e>
 8007dee:	bf00      	nop
 8007df0:	cfff69f3 	.word	0xcfff69f3
 8007df4:	40008000 	.word	0x40008000
 8007df8:	40013800 	.word	0x40013800
 8007dfc:	40004400 	.word	0x40004400
 8007e00:	08015eec 	.word	0x08015eec
 8007e04:	000ffcff 	.word	0x000ffcff
 8007e08:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e7d8      	b.n	8007dc2 <UART_SetConfig+0x25e>
 8007e10:	2001      	movs	r0, #1
 8007e12:	e7d6      	b.n	8007dc2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007e14:	2001      	movs	r0, #1
 8007e16:	e7d4      	b.n	8007dc2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7d2      	b.n	8007dc2 <UART_SetConfig+0x25e>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7d0      	b.n	8007dc2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e20:	2001      	movs	r0, #1
 8007e22:	e7ce      	b.n	8007dc2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007e24:	2001      	movs	r0, #1
 8007e26:	e7cc      	b.n	8007dc2 <UART_SetConfig+0x25e>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e7ca      	b.n	8007dc2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7c8      	b.n	8007dc2 <UART_SetConfig+0x25e>

08007e30 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e32:	f013 0f01 	tst.w	r3, #1
 8007e36:	d006      	beq.n	8007e46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e38:	6802      	ldr	r2, [r0, #0]
 8007e3a:	6853      	ldr	r3, [r2, #4]
 8007e3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e48:	f013 0f02 	tst.w	r3, #2
 8007e4c:	d006      	beq.n	8007e5c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e4e:	6802      	ldr	r2, [r0, #0]
 8007e50:	6853      	ldr	r3, [r2, #4]
 8007e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e56:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e5e:	f013 0f04 	tst.w	r3, #4
 8007e62:	d006      	beq.n	8007e72 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e64:	6802      	ldr	r2, [r0, #0]
 8007e66:	6853      	ldr	r3, [r2, #4]
 8007e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e74:	f013 0f08 	tst.w	r3, #8
 8007e78:	d006      	beq.n	8007e88 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e7a:	6802      	ldr	r2, [r0, #0]
 8007e7c:	6853      	ldr	r3, [r2, #4]
 8007e7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e82:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007e84:	430b      	orrs	r3, r1
 8007e86:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e8a:	f013 0f10 	tst.w	r3, #16
 8007e8e:	d006      	beq.n	8007e9e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e90:	6802      	ldr	r2, [r0, #0]
 8007e92:	6893      	ldr	r3, [r2, #8]
 8007e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ea0:	f013 0f20 	tst.w	r3, #32
 8007ea4:	d006      	beq.n	8007eb4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ea6:	6802      	ldr	r2, [r0, #0]
 8007ea8:	6893      	ldr	r3, [r2, #8]
 8007eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007eb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007eba:	d00a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ebc:	6802      	ldr	r2, [r0, #0]
 8007ebe:	6853      	ldr	r3, [r2, #4]
 8007ec0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ec4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed0:	d00b      	beq.n	8007eea <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ed4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ed8:	d006      	beq.n	8007ee8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eda:	6802      	ldr	r2, [r0, #0]
 8007edc:	6853      	ldr	r3, [r2, #4]
 8007ede:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007ee2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6053      	str	r3, [r2, #4]
}
 8007ee8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eea:	6802      	ldr	r2, [r0, #0]
 8007eec:	6853      	ldr	r3, [r2, #4]
 8007eee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ef2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	6053      	str	r3, [r2, #4]
 8007ef8:	e7eb      	b.n	8007ed2 <UART_AdvFeatureConfig+0xa2>

08007efa <UART_WaitOnFlagUntilTimeout>:
{
 8007efa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efe:	4605      	mov	r5, r0
 8007f00:	460f      	mov	r7, r1
 8007f02:	4616      	mov	r6, r2
 8007f04:	4699      	mov	r9, r3
 8007f06:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	69dc      	ldr	r4, [r3, #28]
 8007f0e:	ea37 0404 	bics.w	r4, r7, r4
 8007f12:	bf0c      	ite	eq
 8007f14:	2401      	moveq	r4, #1
 8007f16:	2400      	movne	r4, #0
 8007f18:	42b4      	cmp	r4, r6
 8007f1a:	d157      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007f1c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007f20:	d0f3      	beq.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f22:	f7f9 fe3d 	bl	8001ba0 <HAL_GetTick>
 8007f26:	eba0 0009 	sub.w	r0, r0, r9
 8007f2a:	4540      	cmp	r0, r8
 8007f2c:	d82f      	bhi.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x94>
 8007f2e:	f1b8 0f00 	cmp.w	r8, #0
 8007f32:	d02c      	beq.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	f012 0f04 	tst.w	r2, #4
 8007f3c:	d0e5      	beq.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007f44:	d0e1      	beq.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f4a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f4c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	e852 3f00 	ldrex	r3, [r2]
 8007f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	e842 3100 	strex	r1, r3, [r2]
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d1f6      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	f102 0308 	add.w	r3, r2, #8
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	3208      	adds	r2, #8
 8007f6e:	e842 3100 	strex	r1, r3, [r2]
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d1f3      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007f76:	2320      	movs	r3, #32
 8007f78:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f80:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007f84:	2300      	movs	r3, #0
 8007f86:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8007f8a:	2003      	movs	r0, #3
 8007f8c:	e01f      	b.n	8007fce <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f8e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	e852 3f00 	ldrex	r3, [r2]
 8007f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	e842 3100 	strex	r1, r3, [r2]
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	d1f6      	bne.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	f102 0308 	add.w	r3, r2, #8
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	3208      	adds	r2, #8
 8007fb0:	e842 3100 	strex	r1, r3, [r2]
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	d1f3      	bne.n	8007fa0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007fb8:	2320      	movs	r3, #32
 8007fba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007fbe:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8007fc8:	2003      	movs	r0, #3
 8007fca:	e000      	b.n	8007fce <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007fcc:	2000      	movs	r0, #0
}
 8007fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007fd2 <UART_CheckIdleState>:
{
 8007fd2:	b530      	push	{r4, r5, lr}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007fde:	f7f9 fddf 	bl	8001ba0 <HAL_GetTick>
 8007fe2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	f012 0f08 	tst.w	r2, #8
 8007fec:	d110      	bne.n	8008010 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f013 0f04 	tst.w	r3, #4
 8007ff6:	d119      	bne.n	800802c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008002:	2000      	movs	r0, #0
 8008004:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008006:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8008008:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800800c:	b003      	add	sp, #12
 800800e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	4603      	mov	r3, r0
 8008018:	2200      	movs	r2, #0
 800801a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff ff6b 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0e2      	beq.n	8007fee <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008028:	2003      	movs	r0, #3
 800802a:	e7ef      	b.n	800800c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800802c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462b      	mov	r3, r5
 8008034:	2200      	movs	r2, #0
 8008036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800803a:	4620      	mov	r0, r4
 800803c:	f7ff ff5d 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8008040:	2800      	cmp	r0, #0
 8008042:	d0d9      	beq.n	8007ff8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008044:	2003      	movs	r0, #3
 8008046:	e7e1      	b.n	800800c <UART_CheckIdleState+0x3a>

08008048 <HAL_UART_Init>:
  if (huart == NULL)
 8008048:	b378      	cbz	r0, 80080aa <HAL_UART_Init+0x62>
{
 800804a:	b510      	push	{r4, lr}
 800804c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800804e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008052:	b30b      	cbz	r3, 8008098 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008054:	2324      	movs	r3, #36	; 0x24
 8008056:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	6813      	ldr	r3, [r2, #0]
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008064:	4620      	mov	r0, r4
 8008066:	f7ff fd7d 	bl	8007b64 <UART_SetConfig>
 800806a:	2801      	cmp	r0, #1
 800806c:	d013      	beq.n	8008096 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800806e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008070:	b9bb      	cbnz	r3, 80080a2 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	6853      	ldr	r3, [r2, #4]
 8008076:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800807a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	6893      	ldr	r3, [r2, #8]
 8008080:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008084:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008090:	4620      	mov	r0, r4
 8008092:	f7ff ff9e 	bl	8007fd2 <UART_CheckIdleState>
}
 8008096:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008098:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800809c:	f7f9 ff68 	bl	8001f70 <HAL_UART_MspInit>
 80080a0:	e7d8      	b.n	8008054 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7ff fec4 	bl	8007e30 <UART_AdvFeatureConfig>
 80080a8:	e7e3      	b.n	8008072 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80080aa:	2001      	movs	r0, #1
}
 80080ac:	4770      	bx	lr
	...

080080b0 <UART_Start_Receive_IT>:
{
 80080b0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80080b2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080b4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80080b8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 80080c0:	6883      	ldr	r3, [r0, #8]
 80080c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c6:	d006      	beq.n	80080d6 <UART_Start_Receive_IT+0x26>
 80080c8:	b9a3      	cbnz	r3, 80080f4 <UART_Start_Receive_IT+0x44>
 80080ca:	6903      	ldr	r3, [r0, #16]
 80080cc:	b973      	cbnz	r3, 80080ec <UART_Start_Receive_IT+0x3c>
 80080ce:	23ff      	movs	r3, #255	; 0xff
 80080d0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080d4:	e014      	b.n	8008100 <UART_Start_Receive_IT+0x50>
 80080d6:	6903      	ldr	r3, [r0, #16]
 80080d8:	b923      	cbnz	r3, 80080e4 <UART_Start_Receive_IT+0x34>
 80080da:	f240 13ff 	movw	r3, #511	; 0x1ff
 80080de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080e2:	e00d      	b.n	8008100 <UART_Start_Receive_IT+0x50>
 80080e4:	23ff      	movs	r3, #255	; 0xff
 80080e6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080ea:	e009      	b.n	8008100 <UART_Start_Receive_IT+0x50>
 80080ec:	237f      	movs	r3, #127	; 0x7f
 80080ee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80080f2:	e005      	b.n	8008100 <UART_Start_Receive_IT+0x50>
 80080f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f8:	d02d      	beq.n	8008156 <UART_Start_Receive_IT+0xa6>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	2300      	movs	r3, #0
 8008102:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008106:	2322      	movs	r3, #34	; 0x22
 8008108:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	f101 0308 	add.w	r3, r1, #8
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	3108      	adds	r1, #8
 800811c:	e841 3400 	strex	r4, r3, [r1]
 8008120:	2c00      	cmp	r4, #0
 8008122:	d1f3      	bne.n	800810c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008124:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812a:	d01e      	beq.n	800816a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812c:	6883      	ldr	r3, [r0, #8]
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008132:	d042      	beq.n	80081ba <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008134:	4b29      	ldr	r3, [pc, #164]	; (80081dc <UART_Start_Receive_IT+0x12c>)
 8008136:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008138:	6903      	ldr	r3, [r0, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d043      	beq.n	80081c6 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800813e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	e852 3f00 	ldrex	r3, [r2]
 8008144:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	e842 3100 	strex	r1, r3, [r2]
 800814c:	2900      	cmp	r1, #0
 800814e:	d1f6      	bne.n	800813e <UART_Start_Receive_IT+0x8e>
}
 8008150:	2000      	movs	r0, #0
 8008152:	bc10      	pop	{r4}
 8008154:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008156:	6903      	ldr	r3, [r0, #16]
 8008158:	b91b      	cbnz	r3, 8008162 <UART_Start_Receive_IT+0xb2>
 800815a:	237f      	movs	r3, #127	; 0x7f
 800815c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008160:	e7ce      	b.n	8008100 <UART_Start_Receive_IT+0x50>
 8008162:	233f      	movs	r3, #63	; 0x3f
 8008164:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008168:	e7ca      	b.n	8008100 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800816a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800816e:	4293      	cmp	r3, r2
 8008170:	d8dc      	bhi.n	800812c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008172:	6883      	ldr	r3, [r0, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008178:	d019      	beq.n	80081ae <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800817a:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <UART_Start_Receive_IT+0x130>)
 800817c:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800817e:	6903      	ldr	r3, [r0, #16]
 8008180:	b143      	cbz	r3, 8008194 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008182:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	e852 3f00 	ldrex	r3, [r2]
 8008188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	e842 3100 	strex	r1, r3, [r2]
 8008190:	2900      	cmp	r1, #0
 8008192:	d1f6      	bne.n	8008182 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008194:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	f102 0308 	add.w	r3, r2, #8
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	3208      	adds	r2, #8
 80081a4:	e842 3100 	strex	r1, r3, [r2]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d1f3      	bne.n	8008194 <UART_Start_Receive_IT+0xe4>
 80081ac:	e7d0      	b.n	8008150 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	6903      	ldr	r3, [r0, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e2      	bne.n	800817a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081b4:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <UART_Start_Receive_IT+0x134>)
 80081b6:	6743      	str	r3, [r0, #116]	; 0x74
 80081b8:	e7e1      	b.n	800817e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ba:	6903      	ldr	r3, [r0, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1b9      	bne.n	8008134 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <UART_Start_Receive_IT+0x138>)
 80081c2:	6743      	str	r3, [r0, #116]	; 0x74
 80081c4:	e7b8      	b.n	8008138 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	e852 3f00 	ldrex	r3, [r2]
 80081cc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	e842 3100 	strex	r1, r3, [r2]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d1f6      	bne.n	80081c6 <UART_Start_Receive_IT+0x116>
 80081d8:	e7ba      	b.n	8008150 <UART_Start_Receive_IT+0xa0>
 80081da:	bf00      	nop
 80081dc:	0800761d 	.word	0x0800761d
 80081e0:	080077d1 	.word	0x080077d1
 80081e4:	0800799d 	.word	0x0800799d
 80081e8:	080076f9 	.word	0x080076f9

080081ec <HAL_UART_Receive_IT>:
{
 80081ec:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80081ee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d117      	bne.n	8008226 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80081f6:	b1c1      	cbz	r1, 800822a <HAL_UART_Receive_IT+0x3e>
 80081f8:	b1ca      	cbz	r2, 800822e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	2300      	movs	r3, #0
 80081fc:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	4c0c      	ldr	r4, [pc, #48]	; (8008234 <HAL_UART_Receive_IT+0x48>)
 8008202:	42a3      	cmp	r3, r4
 8008204:	d00c      	beq.n	8008220 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800820c:	d008      	beq.n	8008220 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800820e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	e854 3f00 	ldrex	r3, [r4]
 8008214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	e844 3500 	strex	r5, r3, [r4]
 800821c:	2d00      	cmp	r5, #0
 800821e:	d1f6      	bne.n	800820e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008220:	f7ff ff46 	bl	80080b0 <UART_Start_Receive_IT>
 8008224:	e000      	b.n	8008228 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8008226:	2002      	movs	r0, #2
}
 8008228:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800822a:	2001      	movs	r0, #1
 800822c:	e7fc      	b.n	8008228 <HAL_UART_Receive_IT+0x3c>
 800822e:	2001      	movs	r0, #1
 8008230:	e7fa      	b.n	8008228 <HAL_UART_Receive_IT+0x3c>
 8008232:	bf00      	nop
 8008234:	40008000 	.word	0x40008000

08008238 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008238:	b082      	sub	sp, #8
 800823a:	ab02      	add	r3, sp, #8
 800823c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008240:	6802      	ldr	r2, [r0, #0]
 8008242:	6853      	ldr	r3, [r2, #4]
 8008244:	f023 0310 	bic.w	r3, r3, #16
 8008248:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800824c:	430b      	orrs	r3, r1
 800824e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008250:	6802      	ldr	r2, [r0, #0]
 8008252:	6853      	ldr	r3, [r2, #4]
 8008254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800825c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008260:	6053      	str	r3, [r2, #4]
}
 8008262:	b002      	add	sp, #8
 8008264:	4770      	bx	lr
	...

08008268 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008268:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800826a:	b92b      	cbnz	r3, 8008278 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800826c:	2301      	movs	r3, #1
 800826e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008272:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008276:	4770      	bx	lr
{
 8008278:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800827a:	6803      	ldr	r3, [r0, #0]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008282:	6899      	ldr	r1, [r3, #8]
 8008284:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008286:	4d09      	ldr	r5, [pc, #36]	; (80082ac <UARTEx_SetNbDataToProcess+0x44>)
 8008288:	5c6b      	ldrb	r3, [r5, r1]
 800828a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800828c:	4c08      	ldr	r4, [pc, #32]	; (80082b0 <UARTEx_SetNbDataToProcess+0x48>)
 800828e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008290:	fb93 f3f1 	sdiv	r3, r3, r1
 8008294:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008298:	5cab      	ldrb	r3, [r5, r2]
 800829a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800829c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800829e:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80082a6:	bc30      	pop	{r4, r5}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	08015f0c 	.word	0x08015f0c
 80082b0:	08015f04 	.word	0x08015f04

080082b4 <HAL_UARTEx_WakeupCallback>:
}
 80082b4:	4770      	bx	lr

080082b6 <HAL_UARTEx_RxFifoFullCallback>:
}
 80082b6:	4770      	bx	lr

080082b8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80082b8:	4770      	bx	lr

080082ba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80082ba:	b510      	push	{r4, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	ab04      	add	r3, sp, #16
 80082c0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80082c4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d035      	beq.n	8008338 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80082cc:	4604      	mov	r4, r0
 80082ce:	2301      	movs	r3, #1
 80082d0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80082d4:	2324      	movs	r3, #36	; 0x24
 80082d6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80082da:	6802      	ldr	r2, [r0, #0]
 80082dc:	6813      	ldr	r3, [r2, #0]
 80082de:	f023 0301 	bic.w	r3, r3, #1
 80082e2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80082e4:	6801      	ldr	r1, [r0, #0]
 80082e6:	688b      	ldr	r3, [r1, #8]
 80082e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80082ec:	9a02      	ldr	r2, [sp, #8]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80082f2:	b1aa      	cbz	r2, 8008320 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80082fe:	f7f9 fc4f 	bl	8001ba0 <HAL_GetTick>
 8008302:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008304:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008308:	9200      	str	r2, [sp, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008310:	4620      	mov	r0, r4
 8008312:	f7ff fdf2 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8008316:	b948      	cbnz	r0, 800832c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008318:	2320      	movs	r3, #32
 800831a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800831e:	e006      	b.n	800832e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008320:	ab04      	add	r3, sp, #16
 8008322:	e913 0006 	ldmdb	r3, {r1, r2}
 8008326:	f7ff ff87 	bl	8008238 <UARTEx_Wakeup_AddressConfig>
 800832a:	e7e3      	b.n	80082f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800832c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800832e:	2300      	movs	r3, #0
 8008330:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008334:	b004      	add	sp, #16
 8008336:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008338:	2002      	movs	r0, #2
 800833a:	e7fb      	b.n	8008334 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800833c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800833c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008340:	2b01      	cmp	r3, #1
 8008342:	d010      	beq.n	8008366 <HAL_UARTEx_EnableStopMode+0x2a>
 8008344:	2301      	movs	r3, #1
 8008346:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800834a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	e852 3f00 	ldrex	r3, [r2]
 8008350:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	e842 3100 	strex	r1, r3, [r2]
 8008358:	2900      	cmp	r1, #0
 800835a:	d1f6      	bne.n	800834a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800835c:	2300      	movs	r3, #0
 800835e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008362:	4618      	mov	r0, r3
 8008364:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008366:	2002      	movs	r0, #2
}
 8008368:	4770      	bx	lr

0800836a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800836a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800836e:	2b01      	cmp	r3, #1
 8008370:	d01d      	beq.n	80083ae <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008372:	b510      	push	{r4, lr}
 8008374:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008376:	2301      	movs	r3, #1
 8008378:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800837c:	2324      	movs	r3, #36	; 0x24
 800837e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008382:	6802      	ldr	r2, [r0, #0]
 8008384:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008386:	6811      	ldr	r1, [r2, #0]
 8008388:	f021 0101 	bic.w	r1, r1, #1
 800838c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800838e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008392:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008396:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008398:	6802      	ldr	r2, [r0, #0]
 800839a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800839c:	f7ff ff64 	bl	8008268 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80083a0:	2320      	movs	r3, #32
 80083a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80083a6:	2000      	movs	r0, #0
 80083a8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80083ae:	2002      	movs	r0, #2
}
 80083b0:	4770      	bx	lr

080083b2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80083b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80083b4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d01d      	beq.n	80083f8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80083bc:	4604      	mov	r4, r0
 80083be:	2301      	movs	r3, #1
 80083c0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083c4:	2324      	movs	r3, #36	; 0x24
 80083c6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ca:	6803      	ldr	r3, [r0, #0]
 80083cc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	f022 0201 	bic.w	r2, r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083d6:	6802      	ldr	r2, [r0, #0]
 80083d8:	6893      	ldr	r3, [r2, #8]
 80083da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80083de:	4319      	orrs	r1, r3
 80083e0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80083e2:	f7ff ff41 	bl	8008268 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80083ea:	2320      	movs	r3, #32
 80083ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80083f0:	2000      	movs	r0, #0
 80083f2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80083f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80083f8:	2002      	movs	r0, #2
 80083fa:	e7fc      	b.n	80083f6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080083fc <HAL_UARTEx_SetRxFifoThreshold>:
{
 80083fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80083fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008402:	2b01      	cmp	r3, #1
 8008404:	d01d      	beq.n	8008442 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008406:	4604      	mov	r4, r0
 8008408:	2301      	movs	r3, #1
 800840a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800840e:	2324      	movs	r3, #36	; 0x24
 8008410:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008414:	6803      	ldr	r3, [r0, #0]
 8008416:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	6893      	ldr	r3, [r2, #8]
 8008424:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008428:	4319      	orrs	r1, r3
 800842a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800842c:	f7ff ff1c 	bl	8008268 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008434:	2320      	movs	r3, #32
 8008436:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800843a:	2000      	movs	r0, #0
 800843c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008440:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008442:	2002      	movs	r0, #2
 8008444:	e7fc      	b.n	8008440 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008448 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008448:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800844c:	b97b      	cbnz	r3, 800846e <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844e:	f3ef 8310 	mrs	r3, PRIMASK
 8008452:	b913      	cbnz	r3, 800845a <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008454:	f3ef 8311 	mrs	r3, BASEPRI
 8008458:	b11b      	cbz	r3, 8008462 <osKernelInitialize+0x1a>
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <osKernelInitialize+0x38>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d008      	beq.n	8008474 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008462:	4b07      	ldr	r3, [pc, #28]	; (8008480 <osKernelInitialize+0x38>)
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	b940      	cbnz	r0, 800847a <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008468:	2201      	movs	r2, #1
 800846a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800846c:	4770      	bx	lr
    stat = osErrorISR;
 800846e:	f06f 0005 	mvn.w	r0, #5
 8008472:	4770      	bx	lr
 8008474:	f06f 0005 	mvn.w	r0, #5
 8008478:	4770      	bx	lr
    } else {
      stat = osError;
 800847a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 800847e:	4770      	bx	lr
 8008480:	2000077c 	.word	0x2000077c

08008484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008484:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008486:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800848a:	b9a3      	cbnz	r3, 80084b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848c:	f3ef 8310 	mrs	r3, PRIMASK
 8008490:	b913      	cbnz	r3, 8008498 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008492:	f3ef 8311 	mrs	r3, BASEPRI
 8008496:	b11b      	cbz	r3, 80084a0 <osKernelStart+0x1c>
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <osKernelStart+0x44>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d00d      	beq.n	80084bc <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <osKernelStart+0x44>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d10c      	bne.n	80084c2 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <osKernelStart+0x44>)
 80084aa:	2202      	movs	r2, #2
 80084ac:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80084ae:	f001 fa0b 	bl	80098c8 <vTaskStartScheduler>
      stat = osOK;
 80084b2:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80084b4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80084b6:	f06f 0005 	mvn.w	r0, #5
 80084ba:	e7fb      	b.n	80084b4 <osKernelStart+0x30>
 80084bc:	f06f 0005 	mvn.w	r0, #5
 80084c0:	e7f8      	b.n	80084b4 <osKernelStart+0x30>
      stat = osError;
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 80084c6:	e7f5      	b.n	80084b4 <osKernelStart+0x30>
 80084c8:	2000077c 	.word	0x2000077c

080084cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80084d0:	2400      	movs	r4, #0
 80084d2:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084d4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d138      	bne.n	800854e <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084dc:	f3ef 8310 	mrs	r3, PRIMASK
 80084e0:	b913      	cbnz	r3, 80084e8 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084e2:	f3ef 8311 	mrs	r3, BASEPRI
 80084e6:	b11b      	cbz	r3, 80084f0 <osThreadNew+0x24>
 80084e8:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <osThreadNew+0xd4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d02e      	beq.n	800854e <osThreadNew+0x82>
 80084f0:	b368      	cbz	r0, 800854e <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80084f2:	b322      	cbz	r2, 800853e <osThreadNew+0x72>
      if (attr->name != NULL) {
 80084f4:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80084f6:	6993      	ldr	r3, [r2, #24]
 80084f8:	b903      	cbnz	r3, 80084fc <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80084fa:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084fc:	1e5c      	subs	r4, r3, #1
 80084fe:	2c37      	cmp	r4, #55	; 0x37
 8008500:	d849      	bhi.n	8008596 <osThreadNew+0xca>
 8008502:	6854      	ldr	r4, [r2, #4]
 8008504:	f014 0f01 	tst.w	r4, #1
 8008508:	d147      	bne.n	800859a <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800850a:	6956      	ldr	r6, [r2, #20]
 800850c:	b16e      	cbz	r6, 800852a <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800850e:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008512:	6894      	ldr	r4, [r2, #8]
 8008514:	b12c      	cbz	r4, 8008522 <osThreadNew+0x56>
 8008516:	68d7      	ldr	r7, [r2, #12]
 8008518:	2f5b      	cmp	r7, #91	; 0x5b
 800851a:	d902      	bls.n	8008522 <osThreadNew+0x56>
 800851c:	6917      	ldr	r7, [r2, #16]
 800851e:	b107      	cbz	r7, 8008522 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008520:	b9c6      	cbnz	r6, 8008554 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008522:	b12c      	cbz	r4, 8008530 <osThreadNew+0x64>
    mem  = -1;
 8008524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008528:	e00e      	b.n	8008548 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 800852a:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800852e:	e7f0      	b.n	8008512 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008530:	68d4      	ldr	r4, [r2, #12]
 8008532:	b98c      	cbnz	r4, 8008558 <osThreadNew+0x8c>
 8008534:	6914      	ldr	r4, [r2, #16]
 8008536:	b194      	cbz	r4, 800855e <osThreadNew+0x92>
    mem  = -1;
 8008538:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800853c:	e004      	b.n	8008548 <osThreadNew+0x7c>
    name = NULL;
 800853e:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008540:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008542:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008544:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8008548:	2c01      	cmp	r4, #1
 800854a:	d00a      	beq.n	8008562 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800854c:	b1ac      	cbz	r4, 800857a <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800854e:	9805      	ldr	r0, [sp, #20]
}
 8008550:	b007      	add	sp, #28
 8008552:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008554:	2401      	movs	r4, #1
 8008556:	e7f7      	b.n	8008548 <osThreadNew+0x7c>
    mem  = -1;
 8008558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800855c:	e7f4      	b.n	8008548 <osThreadNew+0x7c>
          mem = 0;
 800855e:	2400      	movs	r4, #0
 8008560:	e7f2      	b.n	8008548 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008562:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008564:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008566:	9202      	str	r2, [sp, #8]
 8008568:	9401      	str	r4, [sp, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	460b      	mov	r3, r1
 800856e:	4662      	mov	r2, ip
 8008570:	4629      	mov	r1, r5
 8008572:	f001 f939 	bl	80097e8 <xTaskCreateStatic>
 8008576:	9005      	str	r0, [sp, #20]
 8008578:	e7e9      	b.n	800854e <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800857a:	aa05      	add	r2, sp, #20
 800857c:	9201      	str	r2, [sp, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	460b      	mov	r3, r1
 8008582:	fa1f f28c 	uxth.w	r2, ip
 8008586:	4629      	mov	r1, r5
 8008588:	f001 f969 	bl	800985e <xTaskCreate>
 800858c:	2801      	cmp	r0, #1
 800858e:	d0de      	beq.n	800854e <osThreadNew+0x82>
          hTask = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	9305      	str	r3, [sp, #20]
 8008594:	e7db      	b.n	800854e <osThreadNew+0x82>
        return (NULL);
 8008596:	2000      	movs	r0, #0
 8008598:	e7da      	b.n	8008550 <osThreadNew+0x84>
 800859a:	2000      	movs	r0, #0
 800859c:	e7d8      	b.n	8008550 <osThreadNew+0x84>
 800859e:	bf00      	nop
 80085a0:	2000077c 	.word	0x2000077c

080085a4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80085a4:	b530      	push	{r4, r5, lr}
 80085a6:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80085a8:	b1f0      	cbz	r0, 80085e8 <osThreadFlagsSet+0x44>
 80085aa:	4604      	mov	r4, r0
 80085ac:	2900      	cmp	r1, #0
 80085ae:	db1b      	blt.n	80085e8 <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 80085b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085b4:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b6:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 80085ba:	b9db      	cbnz	r3, 80085f4 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085bc:	f3ef 8310 	mrs	r3, PRIMASK
 80085c0:	b913      	cbnz	r3, 80085c8 <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085c2:	f3ef 8311 	mrs	r3, BASEPRI
 80085c6:	b11b      	cbz	r3, 80085d0 <osThreadFlagsSet+0x2c>
 80085c8:	4b19      	ldr	r3, [pc, #100]	; (8008630 <osThreadFlagsSet+0x8c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d011      	beq.n	80085f4 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80085d0:	2300      	movs	r3, #0
 80085d2:	2201      	movs	r2, #1
 80085d4:	4620      	mov	r0, r4
 80085d6:	f001 fd09 	bl	8009fec <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	2200      	movs	r2, #0
 80085de:	4611      	mov	r1, r2
 80085e0:	4620      	mov	r0, r4
 80085e2:	f001 fd03 	bl	8009fec <xTaskGenericNotify>
 80085e6:	e002      	b.n	80085ee <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80085e8:	f06f 0303 	mvn.w	r3, #3
 80085ec:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 80085ee:	9803      	ldr	r0, [sp, #12]
 80085f0:	b005      	add	sp, #20
 80085f2:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 80085f4:	2500      	movs	r5, #0
 80085f6:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80085f8:	ab02      	add	r3, sp, #8
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	462b      	mov	r3, r5
 80085fe:	2201      	movs	r2, #1
 8008600:	4620      	mov	r0, r4
 8008602:	f001 fd75 	bl	800a0f0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008606:	9500      	str	r5, [sp, #0]
 8008608:	ab03      	add	r3, sp, #12
 800860a:	462a      	mov	r2, r5
 800860c:	4629      	mov	r1, r5
 800860e:	4620      	mov	r0, r4
 8008610:	f001 fd6e 	bl	800a0f0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0e9      	beq.n	80085ee <osThreadFlagsSet+0x4a>
 800861a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	e7de      	b.n	80085ee <osThreadFlagsSet+0x4a>
 8008630:	2000077c 	.word	0x2000077c

08008634 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800863a:	f3ef 8305 	mrs	r3, IPSR
 800863e:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008640:	2b00      	cmp	r3, #0
 8008642:	d14c      	bne.n	80086de <osThreadFlagsWait+0xaa>
 8008644:	4681      	mov	r9, r0
 8008646:	468a      	mov	sl, r1
 8008648:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864a:	f3ef 8310 	mrs	r3, PRIMASK
 800864e:	b913      	cbnz	r3, 8008656 <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008650:	f3ef 8311 	mrs	r3, BASEPRI
 8008654:	b11b      	cbz	r3, 800865e <osThreadFlagsWait+0x2a>
 8008656:	4b29      	ldr	r3, [pc, #164]	; (80086fc <osThreadFlagsWait+0xc8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d045      	beq.n	80086ea <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	db45      	blt.n	80086f0 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008664:	f01a 0f02 	tst.w	sl, #2
 8008668:	d007      	beq.n	800867a <osThreadFlagsWait+0x46>
      clear = 0U;
 800866a:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 800866e:	f001 f981 	bl	8009974 <xTaskGetTickCount>
 8008672:	4683      	mov	fp, r0
    tout   = timeout;
 8008674:	463e      	mov	r6, r7
    rflags = 0U;
 8008676:	9d01      	ldr	r5, [sp, #4]
 8008678:	e023      	b.n	80086c2 <osThreadFlagsWait+0x8e>
      clear = flags;
 800867a:	46c8      	mov	r8, r9
 800867c:	e7f7      	b.n	800866e <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 800867e:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8008682:	9b03      	ldr	r3, [sp, #12]
 8008684:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008686:	f01a 0f01 	tst.w	sl, #1
 800868a:	d00d      	beq.n	80086a8 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 800868c:	ea39 0305 	bics.w	r3, r9, r5
 8008690:	d027      	beq.n	80086e2 <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8008692:	b387      	cbz	r7, 80086f6 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008694:	f001 f96e 	bl	8009974 <xTaskGetTickCount>
 8008698:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 800869c:	429e      	cmp	r6, r3
 800869e:	d30b      	bcc.n	80086b8 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 80086a0:	ebab 0000 	sub.w	r0, fp, r0
 80086a4:	4406      	add	r6, r0
 80086a6:	e00b      	b.n	80086c0 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 80086a8:	ea19 0f05 	tst.w	r9, r5
 80086ac:	d119      	bne.n	80086e2 <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 80086ae:	2f00      	cmp	r7, #0
 80086b0:	d1f0      	bne.n	8008694 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 80086b2:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 80086b6:	e014      	b.n	80086e2 <osThreadFlagsWait+0xae>
          tout  = 0;
 80086b8:	9e01      	ldr	r6, [sp, #4]
 80086ba:	e001      	b.n	80086c0 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 80086bc:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 80086c0:	b17c      	cbz	r4, 80086e2 <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80086c2:	4633      	mov	r3, r6
 80086c4:	aa03      	add	r2, sp, #12
 80086c6:	4641      	mov	r1, r8
 80086c8:	2000      	movs	r0, #0
 80086ca:	f001 fc43 	bl	8009f54 <xTaskNotifyWait>
 80086ce:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80086d0:	2801      	cmp	r0, #1
 80086d2:	d0d4      	beq.n	800867e <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 80086d4:	2f00      	cmp	r7, #0
 80086d6:	d1f1      	bne.n	80086bc <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80086d8:	f06f 0502 	mvn.w	r5, #2
 80086dc:	e7f0      	b.n	80086c0 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80086de:	f06f 0505 	mvn.w	r5, #5
}
 80086e2:	4628      	mov	r0, r5
 80086e4:	b005      	add	sp, #20
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80086ea:	f06f 0505 	mvn.w	r5, #5
 80086ee:	e7f8      	b.n	80086e2 <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80086f0:	f06f 0503 	mvn.w	r5, #3
 80086f4:	e7f5      	b.n	80086e2 <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80086f6:	f06f 0502 	mvn.w	r5, #2
 80086fa:	e7f2      	b.n	80086e2 <osThreadFlagsWait+0xae>
 80086fc:	2000077c 	.word	0x2000077c

08008700 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008700:	4b03      	ldr	r3, [pc, #12]	; (8008710 <vApplicationGetIdleTaskMemory+0x10>)
 8008702:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008704:	4b03      	ldr	r3, [pc, #12]	; (8008714 <vApplicationGetIdleTaskMemory+0x14>)
 8008706:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008708:	2380      	movs	r3, #128	; 0x80
 800870a:	6013      	str	r3, [r2, #0]
}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000720 	.word	0x20000720
 8008714:	20000520 	.word	0x20000520

08008718 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <vApplicationGetTimerTaskMemory+0x10>)
 800871a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800871c:	4b03      	ldr	r3, [pc, #12]	; (800872c <vApplicationGetTimerTaskMemory+0x14>)
 800871e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008724:	6013      	str	r3, [r2, #0]
}
 8008726:	4770      	bx	lr
 8008728:	20000b80 	.word	0x20000b80
 800872c:	20000780 	.word	0x20000780

08008730 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008730:	4a12      	ldr	r2, [pc, #72]	; (800877c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008732:	f012 0f07 	tst.w	r2, #7
 8008736:	d01e      	beq.n	8008776 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008738:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800873a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800873e:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8008742:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008744:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008746:	480e      	ldr	r0, [pc, #56]	; (8008780 <prvHeapInit+0x50>)
 8008748:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800874a:	2100      	movs	r1, #0
 800874c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800874e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008750:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008752:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8008756:	480b      	ldr	r0, [pc, #44]	; (8008784 <prvHeapInit+0x54>)
 8008758:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800875a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800875c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800875e:	1a99      	subs	r1, r3, r2
 8008760:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008762:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008764:	4b08      	ldr	r3, [pc, #32]	; (8008788 <prvHeapInit+0x58>)
 8008766:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008768:	4b08      	ldr	r3, [pc, #32]	; (800878c <prvHeapInit+0x5c>)
 800876a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800876c:	4b08      	ldr	r3, [pc, #32]	; (8008790 <prvHeapInit+0x60>)
 800876e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008772:	601a      	str	r2, [r3, #0]
}
 8008774:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800877a:	e7e4      	b.n	8008746 <prvHeapInit+0x16>
 800877c:	20000be0 	.word	0x20000be0
 8008780:	20002bec 	.word	0x20002bec
 8008784:	20000bdc 	.word	0x20000bdc
 8008788:	20002be8 	.word	0x20002be8
 800878c:	20002be4 	.word	0x20002be4
 8008790:	20002be0 	.word	0x20002be0

08008794 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008794:	4b15      	ldr	r3, [pc, #84]	; (80087ec <prvInsertBlockIntoFreeList+0x58>)
 8008796:	461a      	mov	r2, r3
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4283      	cmp	r3, r0
 800879c:	d3fb      	bcc.n	8008796 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800879e:	6851      	ldr	r1, [r2, #4]
 80087a0:	eb02 0c01 	add.w	ip, r2, r1
 80087a4:	4584      	cmp	ip, r0
 80087a6:	d009      	beq.n	80087bc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087a8:	6841      	ldr	r1, [r0, #4]
 80087aa:	eb00 0c01 	add.w	ip, r0, r1
 80087ae:	4563      	cmp	r3, ip
 80087b0:	d009      	beq.n	80087c6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087b2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087b4:	4290      	cmp	r0, r2
 80087b6:	d018      	beq.n	80087ea <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087b8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80087ba:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087bc:	6840      	ldr	r0, [r0, #4]
 80087be:	4401      	add	r1, r0
 80087c0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80087c2:	4610      	mov	r0, r2
 80087c4:	e7f0      	b.n	80087a8 <prvInsertBlockIntoFreeList+0x14>
{
 80087c6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087c8:	4c09      	ldr	r4, [pc, #36]	; (80087f0 <prvInsertBlockIntoFreeList+0x5c>)
 80087ca:	6824      	ldr	r4, [r4, #0]
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d00a      	beq.n	80087e6 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	4419      	add	r1, r3
 80087d4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80087dc:	4290      	cmp	r0, r2
 80087de:	d000      	beq.n	80087e2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e0:	6010      	str	r0, [r2, #0]
	}
}
 80087e2:	bc10      	pop	{r4}
 80087e4:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087e6:	6004      	str	r4, [r0, #0]
 80087e8:	e7f8      	b.n	80087dc <prvInsertBlockIntoFreeList+0x48>
 80087ea:	4770      	bx	lr
 80087ec:	20002bec 	.word	0x20002bec
 80087f0:	20000bdc 	.word	0x20000bdc

080087f4 <pvPortMalloc>:
{
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80087f8:	f001 f8b4 	bl	8009964 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80087fc:	4b34      	ldr	r3, [pc, #208]	; (80088d0 <pvPortMalloc+0xdc>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	b1a3      	cbz	r3, 800882c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008802:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <pvPortMalloc+0xe0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	421d      	tst	r5, r3
 8008808:	d14a      	bne.n	80088a0 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800880a:	b135      	cbz	r5, 800881a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800880c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800880e:	f015 0f07 	tst.w	r5, #7
 8008812:	d002      	beq.n	800881a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008814:	f025 0507 	bic.w	r5, r5, #7
 8008818:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800881a:	2d00      	cmp	r5, #0
 800881c:	d042      	beq.n	80088a4 <pvPortMalloc+0xb0>
 800881e:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <pvPortMalloc+0xe4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	42ab      	cmp	r3, r5
 8008824:	d34d      	bcc.n	80088c2 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8008826:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <pvPortMalloc+0xe8>)
 8008828:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882a:	e004      	b.n	8008836 <pvPortMalloc+0x42>
			prvHeapInit();
 800882c:	f7ff ff80 	bl	8008730 <prvHeapInit>
 8008830:	e7e7      	b.n	8008802 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008832:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008834:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	42ab      	cmp	r3, r5
 800883a:	d202      	bcs.n	8008842 <pvPortMalloc+0x4e>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f7      	bne.n	8008832 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008842:	4b23      	ldr	r3, [pc, #140]	; (80088d0 <pvPortMalloc+0xdc>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	42a3      	cmp	r3, r4
 8008848:	d03d      	beq.n	80088c6 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800884a:	6816      	ldr	r6, [r2, #0]
 800884c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008852:	6863      	ldr	r3, [r4, #4]
 8008854:	1b5b      	subs	r3, r3, r5
 8008856:	2b10      	cmp	r3, #16
 8008858:	d910      	bls.n	800887c <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800885a:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800885c:	f010 0f07 	tst.w	r0, #7
 8008860:	d008      	beq.n	8008874 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	e7fe      	b.n	8008872 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008874:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008876:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008878:	f7ff ff8c 	bl	8008794 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800887c:	6862      	ldr	r2, [r4, #4]
 800887e:	4916      	ldr	r1, [pc, #88]	; (80088d8 <pvPortMalloc+0xe4>)
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008886:	4916      	ldr	r1, [pc, #88]	; (80088e0 <pvPortMalloc+0xec>)
 8008888:	6809      	ldr	r1, [r1, #0]
 800888a:	428b      	cmp	r3, r1
 800888c:	d201      	bcs.n	8008892 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800888e:	4914      	ldr	r1, [pc, #80]	; (80088e0 <pvPortMalloc+0xec>)
 8008890:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008892:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <pvPortMalloc+0xe0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4313      	orrs	r3, r2
 8008898:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	e002      	b.n	80088a6 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 80088a0:	2600      	movs	r6, #0
 80088a2:	e000      	b.n	80088a6 <pvPortMalloc+0xb2>
 80088a4:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 80088a6:	f001 f911 	bl	8009acc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088aa:	f016 0f07 	tst.w	r6, #7
 80088ae:	d00c      	beq.n	80088ca <pvPortMalloc+0xd6>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	e7fe      	b.n	80088c0 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 80088c2:	2600      	movs	r6, #0
 80088c4:	e7ef      	b.n	80088a6 <pvPortMalloc+0xb2>
 80088c6:	2600      	movs	r6, #0
 80088c8:	e7ed      	b.n	80088a6 <pvPortMalloc+0xb2>
}
 80088ca:	4630      	mov	r0, r6
 80088cc:	bd70      	pop	{r4, r5, r6, pc}
 80088ce:	bf00      	nop
 80088d0:	20000bdc 	.word	0x20000bdc
 80088d4:	20002be0 	.word	0x20002be0
 80088d8:	20002be4 	.word	0x20002be4
 80088dc:	20002bec 	.word	0x20002bec
 80088e0:	20002be8 	.word	0x20002be8

080088e4 <vPortFree>:
	if( pv != NULL )
 80088e4:	b380      	cbz	r0, 8008948 <vPortFree+0x64>
{
 80088e6:	b538      	push	{r3, r4, r5, lr}
 80088e8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80088ea:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <vPortFree+0x68>)
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	4213      	tst	r3, r2
 80088f8:	d108      	bne.n	800890c <vPortFree+0x28>
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	e7fe      	b.n	800890a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800890c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008910:	b141      	cbz	r1, 8008924 <vPortFree+0x40>
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	e7fe      	b.n	8008922 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008924:	ea23 0302 	bic.w	r3, r3, r2
 8008928:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800892c:	f001 f81a 	bl	8009964 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008930:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008934:	4a06      	ldr	r2, [pc, #24]	; (8008950 <vPortFree+0x6c>)
 8008936:	6813      	ldr	r3, [r2, #0]
 8008938:	440b      	add	r3, r1
 800893a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff ff29 	bl	8008794 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008942:	f001 f8c3 	bl	8009acc <xTaskResumeAll>
}
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20002be0 	.word	0x20002be0
 8008950:	20002be4 	.word	0x20002be4

08008954 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008954:	f100 0308 	add.w	r3, r0, #8
 8008958:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800895a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800895e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008960:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008962:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008968:	4770      	bx	lr

0800896a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800896e:	4770      	bx	lr

08008970 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008970:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008972:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008978:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800897a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800897c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800897e:	6803      	ldr	r3, [r0, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	6003      	str	r3, [r0, #0]
}
 8008984:	4770      	bx	lr

08008986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008986:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008988:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800898a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800898e:	d011      	beq.n	80089b4 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008990:	f100 0308 	add.w	r3, r0, #8
 8008994:	461c      	mov	r4, r3
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	42aa      	cmp	r2, r5
 800899c:	d9fa      	bls.n	8008994 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089a2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089a4:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80089a6:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089a8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80089aa:	6803      	ldr	r3, [r0, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	6003      	str	r3, [r0, #0]
}
 80089b0:	bc30      	pop	{r4, r5}
 80089b2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80089b4:	6904      	ldr	r4, [r0, #16]
 80089b6:	e7f2      	b.n	800899e <vListInsert+0x18>

080089b8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089b8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089ba:	6841      	ldr	r1, [r0, #4]
 80089bc:	6882      	ldr	r2, [r0, #8]
 80089be:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089c0:	6841      	ldr	r1, [r0, #4]
 80089c2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4282      	cmp	r2, r0
 80089c8:	d006      	beq.n	80089d8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089ca:	2200      	movs	r2, #0
 80089cc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	3a01      	subs	r2, #1
 80089d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089d4:	6818      	ldr	r0, [r3, #0]
}
 80089d6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089d8:	6882      	ldr	r2, [r0, #8]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	e7f5      	b.n	80089ca <uxListRemove+0x12>
	...

080089e0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089e6:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <prvTaskExitError+0x3c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ee:	d008      	beq.n	8008a02 <prvTaskExitError+0x22>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	e7fe      	b.n	8008a00 <prvTaskExitError+0x20>
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a12:	9b01      	ldr	r3, [sp, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0fc      	beq.n	8008a12 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a18:	b002      	add	sp, #8
 8008a1a:	4770      	bx	lr
 8008a1c:	2000007c 	.word	0x2000007c

08008a20 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a20:	4806      	ldr	r0, [pc, #24]	; (8008a3c <prvPortStartFirstTask+0x1c>)
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	6800      	ldr	r0, [r0, #0]
 8008a26:	f380 8808 	msr	MSP, r0
 8008a2a:	b662      	cpsie	i
 8008a2c:	b661      	cpsie	f
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	df00      	svc	0
 8008a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a3a:	0000      	.short	0x0000
 8008a3c:	e000ed08 	.word	0xe000ed08

08008a40 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a44:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a48:	f021 0101 	bic.w	r1, r1, #1
 8008a4c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a50:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <pxPortInitialiseStack+0x20>)
 8008a52:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a56:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008a5a:	3840      	subs	r0, #64	; 0x40
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	080089e1 	.word	0x080089e1
	...

08008a70 <SVC_Handler>:
	__asm volatile (
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <pxCurrentTCBConst2>)
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	6808      	ldr	r0, [r1, #0]
 8008a76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a7a:	f380 8809 	msr	PSP, r0
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8811 	msr	BASEPRI, r0
 8008a8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a8e:	4770      	bx	lr

08008a90 <pxCurrentTCBConst2>:
 8008a90:	20002c48 	.word	0x20002c48

08008a94 <vPortEnterCritical>:
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aa4:	4a0b      	ldr	r2, [pc, #44]	; (8008ad4 <vPortEnterCritical+0x40>)
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d000      	beq.n	8008ab2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008ab0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ab2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ab6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008aba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008abe:	d0f7      	beq.n	8008ab0 <vPortEnterCritical+0x1c>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	e7fe      	b.n	8008ad0 <vPortEnterCritical+0x3c>
 8008ad2:	bf00      	nop
 8008ad4:	2000007c 	.word	0x2000007c

08008ad8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8008ad8:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <vPortExitCritical+0x28>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	b943      	cbnz	r3, 8008af0 <vPortExitCritical+0x18>
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	e7fe      	b.n	8008aee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008af0:	3b01      	subs	r3, #1
 8008af2:	4a03      	ldr	r2, [pc, #12]	; (8008b00 <vPortExitCritical+0x28>)
 8008af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008af6:	b90b      	cbnz	r3, 8008afc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008af8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	2000007c 	.word	0x2000007c
	...

08008b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b10:	f3ef 8009 	mrs	r0, PSP
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <pxCurrentTCBConst>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b20:	6010      	str	r0, [r2, #0]
 8008b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b2a:	f380 8811 	msr	BASEPRI, r0
 8008b2e:	f001 f881 	bl	8009c34 <vTaskSwitchContext>
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f380 8811 	msr	BASEPRI, r0
 8008b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	6808      	ldr	r0, [r1, #0]
 8008b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b46:	f380 8809 	msr	PSP, r0
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	4770      	bx	lr

08008b50 <pxCurrentTCBConst>:
 8008b50:	20002c48 	.word	0x20002c48

08008b54 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b54:	b508      	push	{r3, lr}
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f000 ff25 	bl	80099b4 <xTaskIncrementTick>
 8008b6a:	b128      	cbz	r0, 8008b78 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b7e:	bd08      	pop	{r3, pc}

08008b80 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8008b80:	b510      	push	{r4, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008b86:	4b46      	ldr	r3, [pc, #280]	; (8008ca0 <vPortSuppressTicksAndSleep+0x120>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4298      	cmp	r0, r3
 8008b8c:	d900      	bls.n	8008b90 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8008b8e:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8008b90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b94:	691a      	ldr	r2, [r3, #16]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008b9c:	699c      	ldr	r4, [r3, #24]
 8008b9e:	9b01      	ldr	r3, [sp, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	4a40      	ldr	r2, [pc, #256]	; (8008ca4 <vPortSuppressTicksAndSleep+0x124>)
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008baa:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <vPortSuppressTicksAndSleep+0x128>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	d200      	bcs.n	8008bb4 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8008bb2:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008bb4:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8008bb6:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8008bba:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8008bbe:	f001 f953 	bl	8009e68 <eTaskConfirmSleepModeStatus>
 8008bc2:	b970      	cbnz	r0, 8008be2 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008bc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	f042 0201 	orr.w	r2, r2, #1
 8008bd2:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008bd4:	4a33      	ldr	r2, [pc, #204]	; (8008ca4 <vPortSuppressTicksAndSleep+0x124>)
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	3a01      	subs	r2, #1
 8008bda:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8008bdc:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8008bde:	b004      	add	sp, #16
 8008be0:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008be2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008be6:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008be8:	2200      	movs	r2, #0
 8008bea:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008bec:	691a      	ldr	r2, [r3, #16]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8008bf8:	a803      	add	r0, sp, #12
 8008bfa:	f7f8 fa4d 	bl	8001098 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	b123      	cbz	r3, 8008c0c <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8008c02:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8008c06:	bf30      	wfi
				__asm volatile( "isb" );
 8008c08:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8008c0c:	a801      	add	r0, sp, #4
 8008c0e:	f7f8 fa63 	bl	80010d8 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008c12:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8008c14:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008c18:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008c1c:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008c1e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008c22:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8008c26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c2a:	2206      	movs	r2, #6
 8008c2c:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008c34:	d023      	beq.n	8008c7e <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008c36:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <vPortSuppressTicksAndSleep+0x124>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	1b1b      	subs	r3, r3, r4
 8008c42:	4413      	add	r3, r2
 8008c44:	3b01      	subs	r3, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008c46:	4918      	ldr	r1, [pc, #96]	; (8008ca8 <vPortSuppressTicksAndSleep+0x128>)
 8008c48:	6809      	ldr	r1, [r1, #0]
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d801      	bhi.n	8008c52 <vPortSuppressTicksAndSleep+0xd2>
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d200      	bcs.n	8008c54 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008c52:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8008c54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008c58:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008c5a:	9801      	ldr	r0, [sp, #4]
 8008c5c:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c5e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008c62:	2300      	movs	r3, #0
 8008c64:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 8008c6e:	f000 fe87 	bl	8009980 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <vPortSuppressTicksAndSleep+0x124>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 8008c7a:	b662      	cpsie	i
	}
 8008c7c:	e7af      	b.n	8008bde <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <vPortSuppressTicksAndSleep+0x124>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	9901      	ldr	r1, [sp, #4]
 8008c84:	fb02 f101 	mul.w	r1, r2, r1
 8008c88:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008c8c:	69a3      	ldr	r3, [r4, #24]
 8008c8e:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008c90:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008c94:	fb00 2202 	mla	r2, r0, r2, r2
 8008c98:	1a5b      	subs	r3, r3, r1
 8008c9a:	4413      	add	r3, r2
 8008c9c:	6163      	str	r3, [r4, #20]
 8008c9e:	e7de      	b.n	8008c5e <vPortSuppressTicksAndSleep+0xde>
 8008ca0:	20002c04 	.word	0x20002c04
 8008ca4:	20002c00 	.word	0x20002c00
 8008ca8:	20002bfc 	.word	0x20002bfc

08008cac <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8008cac:	480f      	ldr	r0, [pc, #60]	; (8008cec <vPortSetupTimerInterrupt+0x40>)
 8008cae:	6803      	ldr	r3, [r0, #0]
 8008cb0:	490f      	ldr	r1, [pc, #60]	; (8008cf0 <vPortSetupTimerInterrupt+0x44>)
 8008cb2:	fba1 2303 	umull	r2, r3, r1, r3
 8008cb6:	099b      	lsrs	r3, r3, #6
 8008cb8:	4a0e      	ldr	r2, [pc, #56]	; (8008cf4 <vPortSetupTimerInterrupt+0x48>)
 8008cba:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8008cbc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <vPortSetupTimerInterrupt+0x4c>)
 8008cc6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	; (8008cfc <vPortSetupTimerInterrupt+0x50>)
 8008cca:	222d      	movs	r2, #45	; 0x2d
 8008ccc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd6:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	fba1 1303 	umull	r1, r3, r1, r3
 8008cde:	099b      	lsrs	r3, r3, #6
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ce4:	2307      	movs	r3, #7
 8008ce6:	6113      	str	r3, [r2, #16]
}
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20000074 	.word	0x20000074
 8008cf0:	10624dd3 	.word	0x10624dd3
 8008cf4:	20002c00 	.word	0x20002c00
 8008cf8:	20002c04 	.word	0x20002c04
 8008cfc:	20002bfc 	.word	0x20002bfc

08008d00 <xPortStartScheduler>:
{
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d04:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <xPortStartScheduler+0xb0>)
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d20:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <xPortStartScheduler+0xb4>)
 8008d22:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d24:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <xPortStartScheduler+0xb8>)
 8008d26:	2207      	movs	r2, #7
 8008d28:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d2a:	e009      	b.n	8008d40 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8008d2c:	4a22      	ldr	r2, [pc, #136]	; (8008db8 <xPortStartScheduler+0xb8>)
 8008d2e:	6813      	ldr	r3, [r2, #0]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d48:	d1f0      	bne.n	8008d2c <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <xPortStartScheduler+0xb8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d008      	beq.n	8008d64 <xPortStartScheduler+0x64>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	e7fe      	b.n	8008d62 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <xPortStartScheduler+0xb8>)
 8008d68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d6e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	4a0e      	ldr	r2, [pc, #56]	; (8008db0 <xPortStartScheduler+0xb0>)
 8008d76:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d7c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008d80:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008d84:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d88:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008d8c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008d90:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008d94:	f7ff ff8a 	bl	8008cac <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008d98:	2400      	movs	r4, #0
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <xPortStartScheduler+0xbc>)
 8008d9c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8008d9e:	f7ff fe3f 	bl	8008a20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008da2:	f000 ff47 	bl	8009c34 <vTaskSwitchContext>
	prvTaskExitError();
 8008da6:	f7ff fe1b 	bl	80089e0 <prvTaskExitError>
}
 8008daa:	4620      	mov	r0, r4
 8008dac:	b002      	add	sp, #8
 8008dae:	bd10      	pop	{r4, pc}
 8008db0:	e000e400 	.word	0xe000e400
 8008db4:	20002bf4 	.word	0x20002bf4
 8008db8:	20002bf8 	.word	0x20002bf8
 8008dbc:	2000007c 	.word	0x2000007c

08008dc0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dc0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dc4:	2b0f      	cmp	r3, #15
 8008dc6:	d90f      	bls.n	8008de8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dc8:	4a11      	ldr	r2, [pc, #68]	; (8008e10 <vPortValidateInterruptPriority+0x50>)
 8008dca:	5c9b      	ldrb	r3, [r3, r2]
 8008dcc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dce:	4a11      	ldr	r2, [pc, #68]	; (8008e14 <vPortValidateInterruptPriority+0x54>)
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d908      	bls.n	8008de8 <vPortValidateInterruptPriority+0x28>
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	e7fe      	b.n	8008de6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dec:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008df4:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <vPortValidateInterruptPriority+0x58>)
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d908      	bls.n	8008e0e <vPortValidateInterruptPriority+0x4e>
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	e7fe      	b.n	8008e0c <vPortValidateInterruptPriority+0x4c>
	}
 8008e0e:	4770      	bx	lr
 8008e10:	e000e3f0 	.word	0xe000e3f0
 8008e14:	20002bf4 	.word	0x20002bf4
 8008e18:	20002bf8 	.word	0x20002bf8

08008e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e20:	f7ff fe38 	bl	8008a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008e26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d004      	beq.n	8008e36 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008e2c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008e2e:	f7ff fe53 	bl	8008ad8 <vPortExitCritical>

	return xReturn;
}
 8008e32:	4620      	mov	r0, r4
 8008e34:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008e36:	2401      	movs	r4, #1
 8008e38:	e7f9      	b.n	8008e2e <prvIsQueueFull+0x12>

08008e3a <prvIsQueueEmpty>:
{
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008e3e:	f7ff fe29 	bl	8008a94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e44:	b923      	cbnz	r3, 8008e50 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008e46:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008e48:	f7ff fe46 	bl	8008ad8 <vPortExitCritical>
}
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008e50:	2400      	movs	r4, #0
 8008e52:	e7f9      	b.n	8008e48 <prvIsQueueEmpty+0xe>

08008e54 <prvCopyDataToQueue>:
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008e5e:	b95a      	cbnz	r2, 8008e78 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e60:	6803      	ldr	r3, [r0, #0]
 8008e62:	b11b      	cbz	r3, 8008e6c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008e64:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e66:	3601      	adds	r6, #1
 8008e68:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e6c:	6880      	ldr	r0, [r0, #8]
 8008e6e:	f001 f829 	bl	8009ec4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	e7f6      	b.n	8008e66 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008e78:	b96d      	cbnz	r5, 8008e96 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e7a:	6840      	ldr	r0, [r0, #4]
 8008e7c:	f00c fb96 	bl	80155ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e82:	6863      	ldr	r3, [r4, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e88:	68a2      	ldr	r2, [r4, #8]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d319      	bcc.n	8008ec2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008e92:	4628      	mov	r0, r5
 8008e94:	e7e7      	b.n	8008e66 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e96:	68c0      	ldr	r0, [r0, #12]
 8008e98:	f00c fb88 	bl	80155ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e9e:	4251      	negs	r1, r2
 8008ea0:	68e3      	ldr	r3, [r4, #12]
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d202      	bcs.n	8008eb2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008eac:	68a3      	ldr	r3, [r4, #8]
 8008eae:	440b      	add	r3, r1
 8008eb0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008eb2:	2d02      	cmp	r5, #2
 8008eb4:	d001      	beq.n	8008eba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e7d5      	b.n	8008e66 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008eba:	b126      	cbz	r6, 8008ec6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008ebc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e7d1      	b.n	8008e66 <prvCopyDataToQueue+0x12>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	e7cf      	b.n	8008e66 <prvCopyDataToQueue+0x12>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e7cd      	b.n	8008e66 <prvCopyDataToQueue+0x12>

08008eca <prvCopyDataFromQueue>:
{
 8008eca:	b508      	push	{r3, lr}
 8008ecc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ece:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008ed0:	b162      	cbz	r2, 8008eec <prvCopyDataFromQueue+0x22>
 8008ed2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ed4:	68d9      	ldr	r1, [r3, #12]
 8008ed6:	4411      	add	r1, r2
 8008ed8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008eda:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008ede:	4561      	cmp	r1, ip
 8008ee0:	d301      	bcc.n	8008ee6 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ee6:	68d9      	ldr	r1, [r3, #12]
 8008ee8:	f00c fb60 	bl	80155ac <memcpy>
}
 8008eec:	bd08      	pop	{r3, pc}

08008eee <prvUnlockQueue>:
{
 8008eee:	b538      	push	{r3, r4, r5, lr}
 8008ef0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008ef2:	f7ff fdcf 	bl	8008a94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008ef6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008efa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008efc:	e001      	b.n	8008f02 <prvUnlockQueue+0x14>
			--cTxLock;
 8008efe:	3c01      	subs	r4, #1
 8008f00:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	dd0a      	ble.n	8008f1c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f08:	b143      	cbz	r3, 8008f1c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f0a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008f0e:	f000 ff0f 	bl	8009d30 <xTaskRemoveFromEventList>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0f3      	beq.n	8008efe <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008f16:	f000 ffa1 	bl	8009e5c <vTaskMissedYield>
 8008f1a:	e7f0      	b.n	8008efe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008f1c:	23ff      	movs	r3, #255	; 0xff
 8008f1e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008f22:	f7ff fdd9 	bl	8008ad8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008f26:	f7ff fdb5 	bl	8008a94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008f2a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008f2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f30:	e001      	b.n	8008f36 <prvUnlockQueue+0x48>
				--cRxLock;
 8008f32:	3c01      	subs	r4, #1
 8008f34:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	dd0a      	ble.n	8008f50 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3a:	692b      	ldr	r3, [r5, #16]
 8008f3c:	b143      	cbz	r3, 8008f50 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3e:	f105 0010 	add.w	r0, r5, #16
 8008f42:	f000 fef5 	bl	8009d30 <xTaskRemoveFromEventList>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d0f3      	beq.n	8008f32 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8008f4a:	f000 ff87 	bl	8009e5c <vTaskMissedYield>
 8008f4e:	e7f0      	b.n	8008f32 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008f50:	23ff      	movs	r3, #255	; 0xff
 8008f52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008f56:	f7ff fdbf 	bl	8008ad8 <vPortExitCritical>
}
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}

08008f5c <xQueueGenericReset>:
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008f5e:	b1e0      	cbz	r0, 8008f9a <xQueueGenericReset+0x3e>
 8008f60:	460d      	mov	r5, r1
 8008f62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f64:	f7ff fd96 	bl	8008a94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008f6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f6e:	fb01 3002 	mla	r0, r1, r2, r3
 8008f72:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f74:	2000      	movs	r0, #0
 8008f76:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f78:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	fb02 3301 	mla	r3, r2, r1, r3
 8008f80:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f82:	23ff      	movs	r3, #255	; 0xff
 8008f84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008f8c:	b9fd      	cbnz	r5, 8008fce <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	b963      	cbnz	r3, 8008fac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008f92:	f7ff fda1 	bl	8008ad8 <vPortExitCritical>
}
 8008f96:	2001      	movs	r0, #1
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008faa:	e7fe      	b.n	8008faa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fac:	f104 0010 	add.w	r0, r4, #16
 8008fb0:	f000 febe 	bl	8009d30 <xTaskRemoveFromEventList>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d0ec      	beq.n	8008f92 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008fb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	e7e1      	b.n	8008f92 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fce:	f104 0010 	add.w	r0, r4, #16
 8008fd2:	f7ff fcbf 	bl	8008954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008fda:	f7ff fcbb 	bl	8008954 <vListInitialise>
 8008fde:	e7d8      	b.n	8008f92 <xQueueGenericReset+0x36>

08008fe0 <prvInitialiseNewQueue>:
{
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	b949      	cbnz	r1, 8008ffe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008fec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff ffb2 	bl	8008f5c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008ff8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ffe:	6022      	str	r2, [r4, #0]
 8009000:	e7f4      	b.n	8008fec <prvInitialiseNewQueue+0xc>

08009002 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009002:	b940      	cbnz	r0, 8009016 <xQueueGenericCreateStatic+0x14>
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	e7fe      	b.n	8009014 <xQueueGenericCreateStatic+0x12>
	{
 8009016:	b510      	push	{r4, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	461c      	mov	r4, r3
 800901c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800901e:	b153      	cbz	r3, 8009036 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009020:	b192      	cbz	r2, 8009048 <xQueueGenericCreateStatic+0x46>
 8009022:	b989      	cbnz	r1, 8009048 <xQueueGenericCreateStatic+0x46>
 8009024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	e7fe      	b.n	8009034 <xQueueGenericCreateStatic+0x32>
 8009036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009046:	e7fe      	b.n	8009046 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009048:	b16a      	cbz	r2, 8009066 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800904a:	2350      	movs	r3, #80	; 0x50
 800904c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	2b50      	cmp	r3, #80	; 0x50
 8009052:	d013      	beq.n	800907c <xQueueGenericCreateStatic+0x7a>
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	e7fe      	b.n	8009064 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009066:	2900      	cmp	r1, #0
 8009068:	d0ef      	beq.n	800904a <xQueueGenericCreateStatic+0x48>
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	e7fe      	b.n	800907a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800907c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009084:	9400      	str	r4, [sp, #0]
 8009086:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800908a:	4660      	mov	r0, ip
 800908c:	f7ff ffa8 	bl	8008fe0 <prvInitialiseNewQueue>
	}
 8009090:	4620      	mov	r0, r4
 8009092:	b004      	add	sp, #16
 8009094:	bd10      	pop	{r4, pc}

08009096 <xQueueGenericSend>:
{
 8009096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009098:	b085      	sub	sp, #20
 800909a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800909c:	b188      	cbz	r0, 80090c2 <xQueueGenericSend+0x2c>
 800909e:	460f      	mov	r7, r1
 80090a0:	461d      	mov	r5, r3
 80090a2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090a4:	b1b1      	cbz	r1, 80090d4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090a6:	2d02      	cmp	r5, #2
 80090a8:	d120      	bne.n	80090ec <xQueueGenericSend+0x56>
 80090aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d01d      	beq.n	80090ec <xQueueGenericSend+0x56>
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericSend+0x2a>
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80090d2:	e7fe      	b.n	80090d2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0e5      	beq.n	80090a6 <xQueueGenericSend+0x10>
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ec:	f000 feda 	bl	8009ea4 <xTaskGetSchedulerState>
 80090f0:	4606      	mov	r6, r0
 80090f2:	b958      	cbnz	r0, 800910c <xQueueGenericSend+0x76>
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d048      	beq.n	800918c <xQueueGenericSend+0xf6>
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	e7fe      	b.n	800910a <xQueueGenericSend+0x74>
 800910c:	2600      	movs	r6, #0
 800910e:	e03d      	b.n	800918c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009110:	462a      	mov	r2, r5
 8009112:	4639      	mov	r1, r7
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff fe9d 	bl	8008e54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800911a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911c:	b97b      	cbnz	r3, 800913e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800911e:	b148      	cbz	r0, 8009134 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009120:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009128:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009134:	f7ff fcd0 	bl	8008ad8 <vPortExitCritical>
				return pdPASS;
 8009138:	2001      	movs	r0, #1
}
 800913a:	b005      	add	sp, #20
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800913e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009142:	f000 fdf5 	bl	8009d30 <xTaskRemoveFromEventList>
 8009146:	2800      	cmp	r0, #0
 8009148:	d0f4      	beq.n	8009134 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800914a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009152:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	e7e9      	b.n	8009134 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009160:	f7ff fcba 	bl	8008ad8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009164:	2000      	movs	r0, #0
 8009166:	e7e8      	b.n	800913a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009168:	a802      	add	r0, sp, #8
 800916a:	f000 fe29 	bl	8009dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800916e:	2601      	movs	r6, #1
 8009170:	e019      	b.n	80091a6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009172:	2300      	movs	r3, #0
 8009174:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009178:	e021      	b.n	80091be <xQueueGenericSend+0x128>
 800917a:	2300      	movs	r3, #0
 800917c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009180:	e023      	b.n	80091ca <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009182:	4620      	mov	r0, r4
 8009184:	f7ff feb3 	bl	8008eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009188:	f000 fca0 	bl	8009acc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800918c:	f7ff fc82 	bl	8008a94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009194:	429a      	cmp	r2, r3
 8009196:	d3bb      	bcc.n	8009110 <xQueueGenericSend+0x7a>
 8009198:	2d02      	cmp	r5, #2
 800919a:	d0b9      	beq.n	8009110 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0de      	beq.n	8009160 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d0e0      	beq.n	8009168 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80091a6:	f7ff fc97 	bl	8008ad8 <vPortExitCritical>
		vTaskSuspendAll();
 80091aa:	f000 fbdb 	bl	8009964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091ae:	f7ff fc71 	bl	8008a94 <vPortEnterCritical>
 80091b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80091b6:	b252      	sxtb	r2, r2
 80091b8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80091bc:	d0d9      	beq.n	8009172 <xQueueGenericSend+0xdc>
 80091be:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80091c2:	b252      	sxtb	r2, r2
 80091c4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80091c8:	d0d7      	beq.n	800917a <xQueueGenericSend+0xe4>
 80091ca:	f7ff fc85 	bl	8008ad8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ce:	a901      	add	r1, sp, #4
 80091d0:	a802      	add	r0, sp, #8
 80091d2:	f000 fe01 	bl	8009dd8 <xTaskCheckForTimeOut>
 80091d6:	b9d8      	cbnz	r0, 8009210 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091d8:	4620      	mov	r0, r4
 80091da:	f7ff fe1f 	bl	8008e1c <prvIsQueueFull>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d0cf      	beq.n	8009182 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091e2:	9901      	ldr	r1, [sp, #4]
 80091e4:	f104 0010 	add.w	r0, r4, #16
 80091e8:	f000 fd6e 	bl	8009cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091ec:	4620      	mov	r0, r4
 80091ee:	f7ff fe7e 	bl	8008eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091f2:	f000 fc6b 	bl	8009acc <xTaskResumeAll>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1c8      	bne.n	800918c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80091fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	e7bd      	b.n	800918c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff fe6c 	bl	8008eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009216:	f000 fc59 	bl	8009acc <xTaskResumeAll>
			return errQUEUE_FULL;
 800921a:	2000      	movs	r0, #0
 800921c:	e78d      	b.n	800913a <xQueueGenericSend+0xa4>

0800921e <xQueueGenericSendFromISR>:
{
 800921e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009222:	b190      	cbz	r0, 800924a <xQueueGenericSendFromISR+0x2c>
 8009224:	460f      	mov	r7, r1
 8009226:	4616      	mov	r6, r2
 8009228:	461c      	mov	r4, r3
 800922a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800922c:	b1b1      	cbz	r1, 800925c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800922e:	2c02      	cmp	r4, #2
 8009230:	d120      	bne.n	8009274 <xQueueGenericSendFromISR+0x56>
 8009232:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009234:	2b01      	cmp	r3, #1
 8009236:	d01d      	beq.n	8009274 <xQueueGenericSendFromISR+0x56>
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	e7fe      	b.n	8009248 <xQueueGenericSendFromISR+0x2a>
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800925a:	e7fe      	b.n	800925a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800925c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0e5      	beq.n	800922e <xQueueGenericSendFromISR+0x10>
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	e7fe      	b.n	8009272 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009274:	f7ff fda4 	bl	8008dc0 <vPortValidateInterruptPriority>
	__asm volatile
 8009278:	f3ef 8811 	mrs	r8, BASEPRI
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800928c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800928e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009290:	429a      	cmp	r2, r3
 8009292:	d306      	bcc.n	80092a2 <xQueueGenericSendFromISR+0x84>
 8009294:	2c02      	cmp	r4, #2
 8009296:	d004      	beq.n	80092a2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009298:	2000      	movs	r0, #0
	__asm volatile
 800929a:	f388 8811 	msr	BASEPRI, r8
}
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80092a2:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 80092a6:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092aa:	4622      	mov	r2, r4
 80092ac:	4639      	mov	r1, r7
 80092ae:	4628      	mov	r0, r5
 80092b0:	f7ff fdd0 	bl	8008e54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80092b4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80092b8:	d006      	beq.n	80092c8 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092ba:	f109 0301 	add.w	r3, r9, #1
 80092be:	b25b      	sxtb	r3, r3
 80092c0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7e8      	b.n	800929a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092ca:	b90b      	cbnz	r3, 80092d0 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 80092cc:	2001      	movs	r0, #1
 80092ce:	e7e4      	b.n	800929a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092d0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80092d4:	f000 fd2c 	bl	8009d30 <xTaskRemoveFromEventList>
 80092d8:	b118      	cbz	r0, 80092e2 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80092da:	b126      	cbz	r6, 80092e6 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092dc:	2001      	movs	r0, #1
 80092de:	6030      	str	r0, [r6, #0]
 80092e0:	e7db      	b.n	800929a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7d9      	b.n	800929a <xQueueGenericSendFromISR+0x7c>
 80092e6:	2001      	movs	r0, #1
 80092e8:	e7d7      	b.n	800929a <xQueueGenericSendFromISR+0x7c>

080092ea <xQueueReceive>:
{
 80092ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ec:	b085      	sub	sp, #20
 80092ee:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80092f0:	b190      	cbz	r0, 8009318 <xQueueReceive+0x2e>
 80092f2:	460f      	mov	r7, r1
 80092f4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f6:	b1c1      	cbz	r1, 800932a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092f8:	f000 fdd4 	bl	8009ea4 <xTaskGetSchedulerState>
 80092fc:	4606      	mov	r6, r0
 80092fe:	bb00      	cbnz	r0, 8009342 <xQueueReceive+0x58>
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05e      	beq.n	80093c4 <xQueueReceive+0xda>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	e7fe      	b.n	8009316 <xQueueReceive+0x2c>
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009328:	e7fe      	b.n	8009328 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0e3      	beq.n	80092f8 <xQueueReceive+0xe>
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	e7fe      	b.n	8009340 <xQueueReceive+0x56>
 8009342:	2600      	movs	r6, #0
 8009344:	e03e      	b.n	80093c4 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009346:	4639      	mov	r1, r7
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff fdbe 	bl	8008eca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800934e:	3d01      	subs	r5, #1
 8009350:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	b923      	cbnz	r3, 8009360 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009356:	f7ff fbbf 	bl	8008ad8 <vPortExitCritical>
				return pdPASS;
 800935a:	2001      	movs	r0, #1
}
 800935c:	b005      	add	sp, #20
 800935e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009360:	f104 0010 	add.w	r0, r4, #16
 8009364:	f000 fce4 	bl	8009d30 <xTaskRemoveFromEventList>
 8009368:	2800      	cmp	r0, #0
 800936a:	d0f4      	beq.n	8009356 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800936c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009374:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	e7e9      	b.n	8009356 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009382:	f7ff fba9 	bl	8008ad8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009386:	2000      	movs	r0, #0
 8009388:	e7e8      	b.n	800935c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800938a:	a802      	add	r0, sp, #8
 800938c:	f000 fd18 	bl	8009dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009390:	2601      	movs	r6, #1
 8009392:	e021      	b.n	80093d8 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009394:	2300      	movs	r3, #0
 8009396:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800939a:	e029      	b.n	80093f0 <xQueueReceive+0x106>
 800939c:	2300      	movs	r3, #0
 800939e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093a2:	e02b      	b.n	80093fc <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff fda2 	bl	8008eee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093aa:	f000 fb8f 	bl	8009acc <xTaskResumeAll>
 80093ae:	e009      	b.n	80093c4 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7ff fd9c 	bl	8008eee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093b6:	f000 fb89 	bl	8009acc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fd3d 	bl	8008e3a <prvIsQueueEmpty>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d13f      	bne.n	8009444 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80093c4:	f7ff fb66 	bl	8008a94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	d1bb      	bne.n	8009346 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0d6      	beq.n	8009382 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80093d4:	2e00      	cmp	r6, #0
 80093d6:	d0d8      	beq.n	800938a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80093d8:	f7ff fb7e 	bl	8008ad8 <vPortExitCritical>
		vTaskSuspendAll();
 80093dc:	f000 fac2 	bl	8009964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093e0:	f7ff fb58 	bl	8008a94 <vPortEnterCritical>
 80093e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093e8:	b25b      	sxtb	r3, r3
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ee:	d0d1      	beq.n	8009394 <xQueueReceive+0xaa>
 80093f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093f4:	b25b      	sxtb	r3, r3
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093fa:	d0cf      	beq.n	800939c <xQueueReceive+0xb2>
 80093fc:	f7ff fb6c 	bl	8008ad8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009400:	a901      	add	r1, sp, #4
 8009402:	a802      	add	r0, sp, #8
 8009404:	f000 fce8 	bl	8009dd8 <xTaskCheckForTimeOut>
 8009408:	2800      	cmp	r0, #0
 800940a:	d1d1      	bne.n	80093b0 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800940c:	4620      	mov	r0, r4
 800940e:	f7ff fd14 	bl	8008e3a <prvIsQueueEmpty>
 8009412:	2800      	cmp	r0, #0
 8009414:	d0c6      	beq.n	80093a4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009416:	9901      	ldr	r1, [sp, #4]
 8009418:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800941c:	f000 fc54 	bl	8009cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009420:	4620      	mov	r0, r4
 8009422:	f7ff fd64 	bl	8008eee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009426:	f000 fb51 	bl	8009acc <xTaskResumeAll>
 800942a:	2800      	cmp	r0, #0
 800942c:	d1ca      	bne.n	80093c4 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800942e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009436:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	e7bf      	b.n	80093c4 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8009444:	2000      	movs	r0, #0
 8009446:	e789      	b.n	800935c <xQueueReceive+0x72>

08009448 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009448:	2300      	movs	r3, #0
 800944a:	2b07      	cmp	r3, #7
 800944c:	d80c      	bhi.n	8009468 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800944e:	4a07      	ldr	r2, [pc, #28]	; (800946c <vQueueAddToRegistry+0x24>)
 8009450:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009454:	b10a      	cbz	r2, 800945a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009456:	3301      	adds	r3, #1
 8009458:	e7f7      	b.n	800944a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <vQueueAddToRegistry+0x24>)
 800945c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009460:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009464:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009466:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20002c08 	.word	0x20002c08

08009470 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	460d      	mov	r5, r1
 8009476:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009478:	f7ff fb0c 	bl	8008a94 <vPortEnterCritical>
 800947c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009480:	b25b      	sxtb	r3, r3
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009486:	d00d      	beq.n	80094a4 <vQueueWaitForMessageRestricted+0x34>
 8009488:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800948c:	b25b      	sxtb	r3, r3
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009492:	d00b      	beq.n	80094ac <vQueueWaitForMessageRestricted+0x3c>
 8009494:	f7ff fb20 	bl	8008ad8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009498:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800949a:	b15b      	cbz	r3, 80094b4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800949c:	4620      	mov	r0, r4
 800949e:	f7ff fd26 	bl	8008eee <prvUnlockQueue>
	}
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80094a4:	2300      	movs	r3, #0
 80094a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80094aa:	e7ed      	b.n	8009488 <vQueueWaitForMessageRestricted+0x18>
 80094ac:	2300      	movs	r3, #0
 80094ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094b2:	e7ef      	b.n	8009494 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094b4:	4632      	mov	r2, r6
 80094b6:	4629      	mov	r1, r5
 80094b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094bc:	f000 fc1c 	bl	8009cf8 <vTaskPlaceOnEventListRestricted>
 80094c0:	e7ec      	b.n	800949c <vQueueWaitForMessageRestricted+0x2c>
	...

080094c4 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80094c4:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <prvGetExpectedIdleTime+0x2c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	b103      	cbz	r3, 80094cc <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80094ca:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80094cc:	4a09      	ldr	r2, [pc, #36]	; (80094f4 <prvGetExpectedIdleTime+0x30>)
 80094ce:	6812      	ldr	r2, [r2, #0]
 80094d0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80094d2:	b950      	cbnz	r0, 80094ea <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80094d4:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <prvGetExpectedIdleTime+0x34>)
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	2a01      	cmp	r2, #1
 80094da:	d807      	bhi.n	80094ec <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80094dc:	b933      	cbnz	r3, 80094ec <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80094de:	4b07      	ldr	r3, [pc, #28]	; (80094fc <prvGetExpectedIdleTime+0x38>)
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	4b07      	ldr	r3, [pc, #28]	; (8009500 <prvGetExpectedIdleTime+0x3c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	1ac0      	subs	r0, r0, r3
 80094e8:	4770      	bx	lr
			xReturn = 0;
 80094ea:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	200030c8 	.word	0x200030c8
 80094f4:	20002c48 	.word	0x20002c48
 80094f8:	20002c54 	.word	0x20002c54
 80094fc:	200030f8 	.word	0x200030f8
 8009500:	20003140 	.word	0x20003140

08009504 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009504:	4b08      	ldr	r3, [pc, #32]	; (8009528 <prvResetNextTaskUnblockTime+0x24>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	b923      	cbnz	r3, 8009516 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <prvResetNextTaskUnblockTime+0x28>)
 800950e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009516:	4b04      	ldr	r3, [pc, #16]	; (8009528 <prvResetNextTaskUnblockTime+0x24>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <prvResetNextTaskUnblockTime+0x28>)
 8009522:	601a      	str	r2, [r3, #0]
	}
}
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	20002c4c 	.word	0x20002c4c
 800952c:	200030f8 	.word	0x200030f8

08009530 <prvInitialiseNewTask>:
{
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	4680      	mov	r8, r0
 8009536:	460d      	mov	r5, r1
 8009538:	4617      	mov	r7, r2
 800953a:	4699      	mov	r9, r3
 800953c:	9e08      	ldr	r6, [sp, #32]
 800953e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009544:	0092      	lsls	r2, r2, #2
 8009546:	21a5      	movs	r1, #165	; 0xa5
 8009548:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800954a:	f00c f803 	bl	8015554 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800954e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009550:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8009554:	3a01      	subs	r2, #1
 8009556:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800955a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800955e:	b3a5      	cbz	r5, 80095ca <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009560:	f04f 0c00 	mov.w	ip, #0
 8009564:	f1bc 0f0f 	cmp.w	ip, #15
 8009568:	d809      	bhi.n	800957e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800956a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800956e:	eb04 020c 	add.w	r2, r4, ip
 8009572:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009576:	b113      	cbz	r3, 800957e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009578:	f10c 0c01 	add.w	ip, ip, #1
 800957c:	e7f2      	b.n	8009564 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800957e:	2300      	movs	r3, #0
 8009580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009584:	2e37      	cmp	r6, #55	; 0x37
 8009586:	d900      	bls.n	800958a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009588:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800958a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800958c:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800958e:	2500      	movs	r5, #0
 8009590:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009592:	1d20      	adds	r0, r4, #4
 8009594:	f7ff f9e9 	bl	800896a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009598:	f104 0018 	add.w	r0, r4, #24
 800959c:	f7ff f9e5 	bl	800896a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a2:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80095a6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095a8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80095aa:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095ac:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095b0:	464a      	mov	r2, r9
 80095b2:	4641      	mov	r1, r8
 80095b4:	4638      	mov	r0, r7
 80095b6:	f7ff fa43 	bl	8008a40 <pxPortInitialiseStack>
 80095ba:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80095bc:	f1ba 0f00 	cmp.w	sl, #0
 80095c0:	d001      	beq.n	80095c6 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095c2:	f8ca 4000 	str.w	r4, [sl]
}
 80095c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80095d0:	e7d8      	b.n	8009584 <prvInitialiseNewTask+0x54>
	...

080095d4 <prvInitialiseTaskLists>:
{
 80095d4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095d6:	2400      	movs	r4, #0
 80095d8:	e007      	b.n	80095ea <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80095de:	0093      	lsls	r3, r2, #2
 80095e0:	480e      	ldr	r0, [pc, #56]	; (800961c <prvInitialiseTaskLists+0x48>)
 80095e2:	4418      	add	r0, r3
 80095e4:	f7ff f9b6 	bl	8008954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095e8:	3401      	adds	r4, #1
 80095ea:	2c37      	cmp	r4, #55	; 0x37
 80095ec:	d9f5      	bls.n	80095da <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80095ee:	4d0c      	ldr	r5, [pc, #48]	; (8009620 <prvInitialiseTaskLists+0x4c>)
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7ff f9af 	bl	8008954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095f6:	4c0b      	ldr	r4, [pc, #44]	; (8009624 <prvInitialiseTaskLists+0x50>)
 80095f8:	4620      	mov	r0, r4
 80095fa:	f7ff f9ab 	bl	8008954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095fe:	480a      	ldr	r0, [pc, #40]	; (8009628 <prvInitialiseTaskLists+0x54>)
 8009600:	f7ff f9a8 	bl	8008954 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009604:	4809      	ldr	r0, [pc, #36]	; (800962c <prvInitialiseTaskLists+0x58>)
 8009606:	f7ff f9a5 	bl	8008954 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800960a:	4809      	ldr	r0, [pc, #36]	; (8009630 <prvInitialiseTaskLists+0x5c>)
 800960c:	f7ff f9a2 	bl	8008954 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009610:	4b08      	ldr	r3, [pc, #32]	; (8009634 <prvInitialiseTaskLists+0x60>)
 8009612:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009614:	4b08      	ldr	r3, [pc, #32]	; (8009638 <prvInitialiseTaskLists+0x64>)
 8009616:	601c      	str	r4, [r3, #0]
}
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	20002c54 	.word	0x20002c54
 8009620:	200030cc 	.word	0x200030cc
 8009624:	200030e0 	.word	0x200030e0
 8009628:	20003100 	.word	0x20003100
 800962c:	2000312c 	.word	0x2000312c
 8009630:	20003118 	.word	0x20003118
 8009634:	20002c4c 	.word	0x20002c4c
 8009638:	20002c50 	.word	0x20002c50

0800963c <prvAddNewTaskToReadyList>:
{
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009640:	f7ff fa28 	bl	8008a94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009644:	4a22      	ldr	r2, [pc, #136]	; (80096d0 <prvAddNewTaskToReadyList+0x94>)
 8009646:	6813      	ldr	r3, [r2, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800964c:	4b21      	ldr	r3, [pc, #132]	; (80096d4 <prvAddNewTaskToReadyList+0x98>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	b15b      	cbz	r3, 800966a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <prvAddNewTaskToReadyList+0x9c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	b96b      	cbnz	r3, 8009674 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <prvAddNewTaskToReadyList+0x98>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009660:	429a      	cmp	r2, r3
 8009662:	d807      	bhi.n	8009674 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009664:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <prvAddNewTaskToReadyList+0x98>)
 8009666:	601c      	str	r4, [r3, #0]
 8009668:	e004      	b.n	8009674 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800966a:	4b1a      	ldr	r3, [pc, #104]	; (80096d4 <prvAddNewTaskToReadyList+0x98>)
 800966c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800966e:	6813      	ldr	r3, [r2, #0]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d029      	beq.n	80096c8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009674:	4a19      	ldr	r2, [pc, #100]	; (80096dc <prvAddNewTaskToReadyList+0xa0>)
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800967c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800967e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009680:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <prvAddNewTaskToReadyList+0xa4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4298      	cmp	r0, r3
 8009686:	d901      	bls.n	800968c <prvAddNewTaskToReadyList+0x50>
 8009688:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <prvAddNewTaskToReadyList+0xa4>)
 800968a:	6018      	str	r0, [r3, #0]
 800968c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009690:	1d21      	adds	r1, r4, #4
 8009692:	4b14      	ldr	r3, [pc, #80]	; (80096e4 <prvAddNewTaskToReadyList+0xa8>)
 8009694:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009698:	f7ff f96a 	bl	8008970 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800969c:	f7ff fa1c 	bl	8008ad8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <prvAddNewTaskToReadyList+0x9c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	b17b      	cbz	r3, 80096c6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <prvAddNewTaskToReadyList+0x98>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d209      	bcs.n	80096c6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80096b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	f3bf 8f6f 	isb	sy
}
 80096c6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80096c8:	f7ff ff84 	bl	80095d4 <prvInitialiseTaskLists>
 80096cc:	e7d2      	b.n	8009674 <prvAddNewTaskToReadyList+0x38>
 80096ce:	bf00      	nop
 80096d0:	200030b4 	.word	0x200030b4
 80096d4:	20002c48 	.word	0x20002c48
 80096d8:	20003114 	.word	0x20003114
 80096dc:	200030c4 	.word	0x200030c4
 80096e0:	200030c8 	.word	0x200030c8
 80096e4:	20002c54 	.word	0x20002c54

080096e8 <prvDeleteTCB>:
	{
 80096e8:	b510      	push	{r4, lr}
 80096ea:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096ec:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80096f0:	b163      	cbz	r3, 800970c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d011      	beq.n	800971a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d00e      	beq.n	8009718 <prvDeleteTCB+0x30>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	e7fe      	b.n	800970a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800970c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800970e:	f7ff f8e9 	bl	80088e4 <vPortFree>
				vPortFree( pxTCB );
 8009712:	4620      	mov	r0, r4
 8009714:	f7ff f8e6 	bl	80088e4 <vPortFree>
	}
 8009718:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800971a:	f7ff f8e3 	bl	80088e4 <vPortFree>
 800971e:	e7fb      	b.n	8009718 <prvDeleteTCB+0x30>

08009720 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <prvCheckTasksWaitingTermination+0x40>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	b1d3      	cbz	r3, 800975c <prvCheckTasksWaitingTermination+0x3c>
{
 8009726:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009728:	f7ff f9b4 	bl	8008a94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800972c:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <prvCheckTasksWaitingTermination+0x44>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009732:	1d20      	adds	r0, r4, #4
 8009734:	f7ff f940 	bl	80089b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009738:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <prvCheckTasksWaitingTermination+0x48>)
 800973a:	6813      	ldr	r3, [r2, #0]
 800973c:	3b01      	subs	r3, #1
 800973e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009740:	4a07      	ldr	r2, [pc, #28]	; (8009760 <prvCheckTasksWaitingTermination+0x40>)
 8009742:	6813      	ldr	r3, [r2, #0]
 8009744:	3b01      	subs	r3, #1
 8009746:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009748:	f7ff f9c6 	bl	8008ad8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800974c:	4620      	mov	r0, r4
 800974e:	f7ff ffcb 	bl	80096e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009752:	4b03      	ldr	r3, [pc, #12]	; (8009760 <prvCheckTasksWaitingTermination+0x40>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e6      	bne.n	8009728 <prvCheckTasksWaitingTermination+0x8>
}
 800975a:	bd10      	pop	{r4, pc}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	200030b8 	.word	0x200030b8
 8009764:	2000312c 	.word	0x2000312c
 8009768:	200030b4 	.word	0x200030b4

0800976c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	4604      	mov	r4, r0
 8009770:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009772:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x64>)
 8009774:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009776:	4b17      	ldr	r3, [pc, #92]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009778:	6818      	ldr	r0, [r3, #0]
 800977a:	3004      	adds	r0, #4
 800977c:	f7ff f91c 	bl	80089b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009780:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009784:	d00d      	beq.n	80097a2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009786:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009788:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x68>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800978e:	42a6      	cmp	r6, r4
 8009790:	d910      	bls.n	80097b4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009792:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009798:	6819      	ldr	r1, [r3, #0]
 800979a:	3104      	adds	r1, #4
 800979c:	f7ff f8f3 	bl	8008986 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097a0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097a2:	2d00      	cmp	r5, #0
 80097a4:	d0ef      	beq.n	8009786 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x68>)
 80097a8:	6819      	ldr	r1, [r3, #0]
 80097aa:	3104      	adds	r1, #4
 80097ac:	480b      	ldr	r0, [pc, #44]	; (80097dc <prvAddCurrentTaskToDelayedList+0x70>)
 80097ae:	f7ff f8df 	bl	8008970 <vListInsertEnd>
 80097b2:	e7f5      	b.n	80097a0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvAddCurrentTaskToDelayedList+0x74>)
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	4b06      	ldr	r3, [pc, #24]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x68>)
 80097ba:	6819      	ldr	r1, [r3, #0]
 80097bc:	3104      	adds	r1, #4
 80097be:	f7ff f8e2 	bl	8008986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097c2:	4b08      	ldr	r3, [pc, #32]	; (80097e4 <prvAddCurrentTaskToDelayedList+0x78>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	42a3      	cmp	r3, r4
 80097c8:	d9ea      	bls.n	80097a0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80097ca:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <prvAddCurrentTaskToDelayedList+0x78>)
 80097cc:	601c      	str	r4, [r3, #0]
}
 80097ce:	e7e7      	b.n	80097a0 <prvAddCurrentTaskToDelayedList+0x34>
 80097d0:	20003140 	.word	0x20003140
 80097d4:	20002c48 	.word	0x20002c48
 80097d8:	20002c50 	.word	0x20002c50
 80097dc:	20003118 	.word	0x20003118
 80097e0:	20002c4c 	.word	0x20002c4c
 80097e4:	200030f8 	.word	0x200030f8

080097e8 <xTaskCreateStatic>:
	{
 80097e8:	b530      	push	{r4, r5, lr}
 80097ea:	b087      	sub	sp, #28
 80097ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80097ee:	b17c      	cbz	r4, 8009810 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097f2:	b1b5      	cbz	r5, 8009822 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80097f4:	255c      	movs	r5, #92	; 0x5c
 80097f6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097f8:	9d04      	ldr	r5, [sp, #16]
 80097fa:	2d5c      	cmp	r5, #92	; 0x5c
 80097fc:	d01a      	beq.n	8009834 <xTaskCreateStatic+0x4c>
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	e7fe      	b.n	800980e <xTaskCreateStatic+0x26>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009820:	e7fe      	b.n	8009820 <xTaskCreateStatic+0x38>
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009832:	e7fe      	b.n	8009832 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009834:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009838:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800983a:	2402      	movs	r4, #2
 800983c:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009840:	2400      	movs	r4, #0
 8009842:	9403      	str	r4, [sp, #12]
 8009844:	9502      	str	r5, [sp, #8]
 8009846:	ac05      	add	r4, sp, #20
 8009848:	9401      	str	r4, [sp, #4]
 800984a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800984c:	9400      	str	r4, [sp, #0]
 800984e:	f7ff fe6f 	bl	8009530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009852:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009854:	f7ff fef2 	bl	800963c <prvAddNewTaskToReadyList>
	}
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	b007      	add	sp, #28
 800985c:	bd30      	pop	{r4, r5, pc}

0800985e <xTaskCreate>:
	{
 800985e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009862:	b085      	sub	sp, #20
 8009864:	4607      	mov	r7, r0
 8009866:	4688      	mov	r8, r1
 8009868:	4614      	mov	r4, r2
 800986a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800986c:	0090      	lsls	r0, r2, #2
 800986e:	f7fe ffc1 	bl	80087f4 <pvPortMalloc>
			if( pxStack != NULL )
 8009872:	b300      	cbz	r0, 80098b6 <xTaskCreate+0x58>
 8009874:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009876:	205c      	movs	r0, #92	; 0x5c
 8009878:	f7fe ffbc 	bl	80087f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800987c:	4605      	mov	r5, r0
 800987e:	b1b0      	cbz	r0, 80098ae <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009880:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009884:	b1e5      	cbz	r5, 80098c0 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009886:	2300      	movs	r3, #0
 8009888:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800988c:	9303      	str	r3, [sp, #12]
 800988e:	9502      	str	r5, [sp, #8]
 8009890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4633      	mov	r3, r6
 800989a:	4622      	mov	r2, r4
 800989c:	4641      	mov	r1, r8
 800989e:	4638      	mov	r0, r7
 80098a0:	f7ff fe46 	bl	8009530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098a4:	4628      	mov	r0, r5
 80098a6:	f7ff fec9 	bl	800963c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098aa:	2001      	movs	r0, #1
 80098ac:	e005      	b.n	80098ba <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80098ae:	4648      	mov	r0, r9
 80098b0:	f7ff f818 	bl	80088e4 <vPortFree>
 80098b4:	e7e6      	b.n	8009884 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80098ba:	b005      	add	sp, #20
 80098bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80098c4:	e7f9      	b.n	80098ba <xTaskCreate+0x5c>
	...

080098c8 <vTaskStartScheduler>:
{
 80098c8:	b510      	push	{r4, lr}
 80098ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098cc:	2400      	movs	r4, #0
 80098ce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098d0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098d2:	aa07      	add	r2, sp, #28
 80098d4:	a906      	add	r1, sp, #24
 80098d6:	a805      	add	r0, sp, #20
 80098d8:	f7fe ff12 	bl	8008700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098dc:	9b05      	ldr	r3, [sp, #20]
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	9400      	str	r4, [sp, #0]
 80098e6:	4623      	mov	r3, r4
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	4918      	ldr	r1, [pc, #96]	; (800994c <vTaskStartScheduler+0x84>)
 80098ec:	4818      	ldr	r0, [pc, #96]	; (8009950 <vTaskStartScheduler+0x88>)
 80098ee:	f7ff ff7b 	bl	80097e8 <xTaskCreateStatic>
 80098f2:	4b18      	ldr	r3, [pc, #96]	; (8009954 <vTaskStartScheduler+0x8c>)
 80098f4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80098f6:	b140      	cbz	r0, 800990a <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 80098f8:	f000 fd00 	bl	800a2fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80098fc:	2801      	cmp	r0, #1
 80098fe:	d006      	beq.n	800990e <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009900:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009904:	d018      	beq.n	8009938 <vTaskStartScheduler+0x70>
}
 8009906:	b008      	add	sp, #32
 8009908:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800990a:	2000      	movs	r0, #0
 800990c:	e7f6      	b.n	80098fc <vTaskStartScheduler+0x34>
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800991e:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <vTaskStartScheduler+0x90>)
 8009920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009924:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <vTaskStartScheduler+0x94>)
 8009928:	2201      	movs	r2, #1
 800992a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800992c:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <vTaskStartScheduler+0x98>)
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009932:	f7ff f9e5 	bl	8008d00 <xPortStartScheduler>
 8009936:	e7e6      	b.n	8009906 <vTaskStartScheduler+0x3e>
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009948:	e7fe      	b.n	8009948 <vTaskStartScheduler+0x80>
 800994a:	bf00      	nop
 800994c:	08015f14 	.word	0x08015f14
 8009950:	08009bc5 	.word	0x08009bc5
 8009954:	200030f4 	.word	0x200030f4
 8009958:	200030f8 	.word	0x200030f8
 800995c:	20003114 	.word	0x20003114
 8009960:	20003140 	.word	0x20003140

08009964 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009964:	4a02      	ldr	r2, [pc, #8]	; (8009970 <vTaskSuspendAll+0xc>)
 8009966:	6813      	ldr	r3, [r2, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	200030c0 	.word	0x200030c0

08009974 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009974:	4b01      	ldr	r3, [pc, #4]	; (800997c <xTaskGetTickCount+0x8>)
 8009976:	6818      	ldr	r0, [r3, #0]
}
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	20003140 	.word	0x20003140

08009980 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <vTaskStepTick+0x2c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4403      	add	r3, r0
 8009986:	4a0a      	ldr	r2, [pc, #40]	; (80099b0 <vTaskStepTick+0x30>)
 8009988:	6812      	ldr	r2, [r2, #0]
 800998a:	4293      	cmp	r3, r2
 800998c:	d908      	bls.n	80099a0 <vTaskStepTick+0x20>
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	e7fe      	b.n	800999e <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 80099a0:	4a02      	ldr	r2, [pc, #8]	; (80099ac <vTaskStepTick+0x2c>)
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	4403      	add	r3, r0
 80099a6:	6013      	str	r3, [r2, #0]
	}
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	20003140 	.word	0x20003140
 80099b0:	200030f8 	.word	0x200030f8

080099b4 <xTaskIncrementTick>:
{
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b6:	4b3a      	ldr	r3, [pc, #232]	; (8009aa0 <xTaskIncrementTick+0xec>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d164      	bne.n	8009a88 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099be:	4b39      	ldr	r3, [pc, #228]	; (8009aa4 <xTaskIncrementTick+0xf0>)
 80099c0:	681d      	ldr	r5, [r3, #0]
 80099c2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80099c4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099c6:	b9c5      	cbnz	r5, 80099fa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80099c8:	4b37      	ldr	r3, [pc, #220]	; (8009aa8 <xTaskIncrementTick+0xf4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	b143      	cbz	r3, 80099e2 <xTaskIncrementTick+0x2e>
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	e7fe      	b.n	80099e0 <xTaskIncrementTick+0x2c>
 80099e2:	4a31      	ldr	r2, [pc, #196]	; (8009aa8 <xTaskIncrementTick+0xf4>)
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	4b31      	ldr	r3, [pc, #196]	; (8009aac <xTaskIncrementTick+0xf8>)
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	6010      	str	r0, [r2, #0]
 80099ec:	6019      	str	r1, [r3, #0]
 80099ee:	4a30      	ldr	r2, [pc, #192]	; (8009ab0 <xTaskIncrementTick+0xfc>)
 80099f0:	6813      	ldr	r3, [r2, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	f7ff fd85 	bl	8009504 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099fa:	4b2e      	ldr	r3, [pc, #184]	; (8009ab4 <xTaskIncrementTick+0x100>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	42ab      	cmp	r3, r5
 8009a00:	d938      	bls.n	8009a74 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009a02:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a04:	4b2c      	ldr	r3, [pc, #176]	; (8009ab8 <xTaskIncrementTick+0x104>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a0e:	009a      	lsls	r2, r3, #2
 8009a10:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <xTaskIncrementTick+0x108>)
 8009a12:	589b      	ldr	r3, [r3, r2]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d93c      	bls.n	8009a92 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009a18:	2701      	movs	r7, #1
 8009a1a:	e03a      	b.n	8009a92 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009a1c:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a1e:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <xTaskIncrementTick+0xf4>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	b343      	cbz	r3, 8009a78 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a26:	4b20      	ldr	r3, [pc, #128]	; (8009aa8 <xTaskIncrementTick+0xf4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a2e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009a30:	429d      	cmp	r5, r3
 8009a32:	d326      	bcc.n	8009a82 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a34:	1d26      	adds	r6, r4, #4
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fe ffbe 	bl	80089b8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a3e:	b11b      	cbz	r3, 8009a48 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a40:	f104 0018 	add.w	r0, r4, #24
 8009a44:	f7fe ffb8 	bl	80089b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a4a:	4a1d      	ldr	r2, [pc, #116]	; (8009ac0 <xTaskIncrementTick+0x10c>)
 8009a4c:	6812      	ldr	r2, [r2, #0]
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d901      	bls.n	8009a56 <xTaskIncrementTick+0xa2>
 8009a52:	4a1b      	ldr	r2, [pc, #108]	; (8009ac0 <xTaskIncrementTick+0x10c>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a5a:	009a      	lsls	r2, r3, #2
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4817      	ldr	r0, [pc, #92]	; (8009abc <xTaskIncrementTick+0x108>)
 8009a60:	4410      	add	r0, r2
 8009a62:	f7fe ff85 	bl	8008970 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a68:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <xTaskIncrementTick+0x104>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d2d4      	bcs.n	8009a1c <xTaskIncrementTick+0x68>
 8009a72:	e7d4      	b.n	8009a1e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009a74:	2700      	movs	r7, #0
 8009a76:	e7d2      	b.n	8009a1e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a78:	4b0e      	ldr	r3, [pc, #56]	; (8009ab4 <xTaskIncrementTick+0x100>)
 8009a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7e:	601a      	str	r2, [r3, #0]
					break;
 8009a80:	e7c0      	b.n	8009a04 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009a82:	4a0c      	ldr	r2, [pc, #48]	; (8009ab4 <xTaskIncrementTick+0x100>)
 8009a84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a86:	e7bd      	b.n	8009a04 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009a88:	4a0e      	ldr	r2, [pc, #56]	; (8009ac4 <xTaskIncrementTick+0x110>)
 8009a8a:	6813      	ldr	r3, [r2, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009a90:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8009a92:	4b0d      	ldr	r3, [pc, #52]	; (8009ac8 <xTaskIncrementTick+0x114>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009a98:	2701      	movs	r7, #1
}
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200030c0 	.word	0x200030c0
 8009aa4:	20003140 	.word	0x20003140
 8009aa8:	20002c4c 	.word	0x20002c4c
 8009aac:	20002c50 	.word	0x20002c50
 8009ab0:	200030fc 	.word	0x200030fc
 8009ab4:	200030f8 	.word	0x200030f8
 8009ab8:	20002c48 	.word	0x20002c48
 8009abc:	20002c54 	.word	0x20002c54
 8009ac0:	200030c8 	.word	0x200030c8
 8009ac4:	200030bc 	.word	0x200030bc
 8009ac8:	20003144 	.word	0x20003144

08009acc <xTaskResumeAll>:
{
 8009acc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009ace:	4b35      	ldr	r3, [pc, #212]	; (8009ba4 <xTaskResumeAll+0xd8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	b943      	cbnz	r3, 8009ae6 <xTaskResumeAll+0x1a>
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	e7fe      	b.n	8009ae4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009ae6:	f7fe ffd5 	bl	8008a94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009aea:	4b2e      	ldr	r3, [pc, #184]	; (8009ba4 <xTaskResumeAll+0xd8>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	3a01      	subs	r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d14f      	bne.n	8009b98 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009af8:	4b2b      	ldr	r3, [pc, #172]	; (8009ba8 <xTaskResumeAll+0xdc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	b90b      	cbnz	r3, 8009b02 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009afe:	2400      	movs	r4, #0
 8009b00:	e04b      	b.n	8009b9a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009b02:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b04:	4b29      	ldr	r3, [pc, #164]	; (8009bac <xTaskResumeAll+0xe0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	b31b      	cbz	r3, 8009b52 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0a:	4b28      	ldr	r3, [pc, #160]	; (8009bac <xTaskResumeAll+0xe0>)
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b10:	f104 0018 	add.w	r0, r4, #24
 8009b14:	f7fe ff50 	bl	80089b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b18:	1d25      	adds	r5, r4, #4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7fe ff4c 	bl	80089b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b22:	4b23      	ldr	r3, [pc, #140]	; (8009bb0 <xTaskResumeAll+0xe4>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4298      	cmp	r0, r3
 8009b28:	d901      	bls.n	8009b2e <xTaskResumeAll+0x62>
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <xTaskResumeAll+0xe4>)
 8009b2c:	6018      	str	r0, [r3, #0]
 8009b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b32:	4629      	mov	r1, r5
 8009b34:	4b1f      	ldr	r3, [pc, #124]	; (8009bb4 <xTaskResumeAll+0xe8>)
 8009b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b3a:	f7fe ff19 	bl	8008970 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b40:	4b1d      	ldr	r3, [pc, #116]	; (8009bb8 <xTaskResumeAll+0xec>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d3dc      	bcc.n	8009b04 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009b4a:	4b1c      	ldr	r3, [pc, #112]	; (8009bbc <xTaskResumeAll+0xf0>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e7d8      	b.n	8009b04 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009b52:	b10c      	cbz	r4, 8009b58 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009b54:	f7ff fcd6 	bl	8009504 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b58:	4b19      	ldr	r3, [pc, #100]	; (8009bc0 <xTaskResumeAll+0xf4>)
 8009b5a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b5c:	b984      	cbnz	r4, 8009b80 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009b5e:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <xTaskResumeAll+0xf0>)
 8009b60:	681c      	ldr	r4, [r3, #0]
 8009b62:	b1d4      	cbz	r4, 8009b9a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009b64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009b78:	2401      	movs	r4, #1
 8009b7a:	e00e      	b.n	8009b9a <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b7c:	3c01      	subs	r4, #1
 8009b7e:	d007      	beq.n	8009b90 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009b80:	f7ff ff18 	bl	80099b4 <xTaskIncrementTick>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d0f9      	beq.n	8009b7c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <xTaskResumeAll+0xf0>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e7f5      	b.n	8009b7c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <xTaskResumeAll+0xf4>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	e7e2      	b.n	8009b5e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009b98:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009b9a:	f7fe ff9d 	bl	8008ad8 <vPortExitCritical>
}
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200030c0 	.word	0x200030c0
 8009ba8:	200030b4 	.word	0x200030b4
 8009bac:	20003100 	.word	0x20003100
 8009bb0:	200030c8 	.word	0x200030c8
 8009bb4:	20002c54 	.word	0x20002c54
 8009bb8:	20002c48 	.word	0x20002c48
 8009bbc:	20003144 	.word	0x20003144
 8009bc0:	200030bc 	.word	0x200030bc

08009bc4 <prvIdleTask>:
{
 8009bc4:	b508      	push	{r3, lr}
 8009bc6:	e003      	b.n	8009bd0 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009bc8:	f7ff fc7c 	bl	80094c4 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009bcc:	2801      	cmp	r0, #1
 8009bce:	d810      	bhi.n	8009bf2 <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 8009bd0:	f7ff fda6 	bl	8009720 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd4:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <prvIdleTask+0x64>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d9f5      	bls.n	8009bc8 <prvIdleTask+0x4>
				taskYIELD();
 8009bdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	e7ea      	b.n	8009bc8 <prvIdleTask+0x4>
				vTaskSuspendAll();
 8009bf2:	f7ff feb7 	bl	8009964 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	; (8009c2c <prvIdleTask+0x68>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <prvIdleTask+0x6c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d306      	bcc.n	8009c10 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009c02:	f7ff fc5f 	bl	80094c4 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009c06:	2801      	cmp	r0, #1
 8009c08:	d80b      	bhi.n	8009c22 <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 8009c0a:	f7ff ff5f 	bl	8009acc <xTaskResumeAll>
 8009c0e:	e7df      	b.n	8009bd0 <prvIdleTask+0xc>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009c20:	e7fe      	b.n	8009c20 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009c22:	f7fe ffad 	bl	8008b80 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 8009c26:	e7f0      	b.n	8009c0a <prvIdleTask+0x46>
 8009c28:	20002c54 	.word	0x20002c54
 8009c2c:	200030f8 	.word	0x200030f8
 8009c30:	20003140 	.word	0x20003140

08009c34 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c34:	4b1f      	ldr	r3, [pc, #124]	; (8009cb4 <vTaskSwitchContext+0x80>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	b11b      	cbz	r3, 8009c42 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009c3a:	4b1f      	ldr	r3, [pc, #124]	; (8009cb8 <vTaskSwitchContext+0x84>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009c42:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <vTaskSwitchContext+0x84>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c48:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <vTaskSwitchContext+0x88>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009c50:	008a      	lsls	r2, r1, #2
 8009c52:	491b      	ldr	r1, [pc, #108]	; (8009cc0 <vTaskSwitchContext+0x8c>)
 8009c54:	588a      	ldr	r2, [r1, r2]
 8009c56:	b95a      	cbnz	r2, 8009c70 <vTaskSwitchContext+0x3c>
 8009c58:	b10b      	cbz	r3, 8009c5e <vTaskSwitchContext+0x2a>
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	e7f6      	b.n	8009c4c <vTaskSwitchContext+0x18>
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	e7fe      	b.n	8009c6e <vTaskSwitchContext+0x3a>
 8009c70:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009c74:	0082      	lsls	r2, r0, #2
 8009c76:	440a      	add	r2, r1
 8009c78:	6850      	ldr	r0, [r2, #4]
 8009c7a:	6840      	ldr	r0, [r0, #4]
 8009c7c:	6050      	str	r0, [r2, #4]
 8009c7e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009c82:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8009c86:	3208      	adds	r2, #8
 8009c88:	4411      	add	r1, r2
 8009c8a:	4288      	cmp	r0, r1
 8009c8c:	d00b      	beq.n	8009ca6 <vTaskSwitchContext+0x72>
 8009c8e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009c92:	0091      	lsls	r1, r2, #2
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <vTaskSwitchContext+0x8c>)
 8009c96:	440a      	add	r2, r1
 8009c98:	6852      	ldr	r2, [r2, #4]
 8009c9a:	68d1      	ldr	r1, [r2, #12]
 8009c9c:	4a09      	ldr	r2, [pc, #36]	; (8009cc4 <vTaskSwitchContext+0x90>)
 8009c9e:	6011      	str	r1, [r2, #0]
 8009ca0:	4a06      	ldr	r2, [pc, #24]	; (8009cbc <vTaskSwitchContext+0x88>)
 8009ca2:	6013      	str	r3, [r2, #0]
}
 8009ca4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca6:	6840      	ldr	r0, [r0, #4]
 8009ca8:	4662      	mov	r2, ip
 8009caa:	0091      	lsls	r1, r2, #2
 8009cac:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <vTaskSwitchContext+0x8c>)
 8009cae:	440a      	add	r2, r1
 8009cb0:	6050      	str	r0, [r2, #4]
 8009cb2:	e7ec      	b.n	8009c8e <vTaskSwitchContext+0x5a>
 8009cb4:	200030c0 	.word	0x200030c0
 8009cb8:	20003144 	.word	0x20003144
 8009cbc:	200030c8 	.word	0x200030c8
 8009cc0:	20002c54 	.word	0x20002c54
 8009cc4:	20002c48 	.word	0x20002c48

08009cc8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009cc8:	b158      	cbz	r0, 8009ce2 <vTaskPlaceOnEventList+0x1a>
{
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cce:	4a09      	ldr	r2, [pc, #36]	; (8009cf4 <vTaskPlaceOnEventList+0x2c>)
 8009cd0:	6811      	ldr	r1, [r2, #0]
 8009cd2:	3118      	adds	r1, #24
 8009cd4:	f7fe fe57 	bl	8008986 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cd8:	2101      	movs	r1, #1
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f7ff fd46 	bl	800976c <prvAddCurrentTaskToDelayedList>
}
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009cf2:	e7fe      	b.n	8009cf2 <vTaskPlaceOnEventList+0x2a>
 8009cf4:	20002c48 	.word	0x20002c48

08009cf8 <vTaskPlaceOnEventListRestricted>:
	{
 8009cf8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009cfa:	b170      	cbz	r0, 8009d1a <vTaskPlaceOnEventListRestricted+0x22>
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d00:	4a0a      	ldr	r2, [pc, #40]	; (8009d2c <vTaskPlaceOnEventListRestricted+0x34>)
 8009d02:	6811      	ldr	r1, [r2, #0]
 8009d04:	3118      	adds	r1, #24
 8009d06:	f7fe fe33 	bl	8008970 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009d0a:	b10c      	cbz	r4, 8009d10 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009d0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d10:	4621      	mov	r1, r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7ff fd2a 	bl	800976c <prvAddCurrentTaskToDelayedList>
	}
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009d2a:	e7fe      	b.n	8009d2a <vTaskPlaceOnEventListRestricted+0x32>
 8009d2c:	20002c48 	.word	0x20002c48

08009d30 <xTaskRemoveFromEventList>:
{
 8009d30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d32:	68c3      	ldr	r3, [r0, #12]
 8009d34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009d36:	b334      	cbz	r4, 8009d86 <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d38:	f104 0518 	add.w	r5, r4, #24
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f7fe fe3b 	bl	80089b8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d42:	4b19      	ldr	r3, [pc, #100]	; (8009da8 <xTaskRemoveFromEventList+0x78>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	bb3b      	cbnz	r3, 8009d98 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d48:	1d25      	adds	r5, r4, #4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7fe fe34 	bl	80089b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009d52:	4b16      	ldr	r3, [pc, #88]	; (8009dac <xTaskRemoveFromEventList+0x7c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4298      	cmp	r0, r3
 8009d58:	d901      	bls.n	8009d5e <xTaskRemoveFromEventList+0x2e>
 8009d5a:	4b14      	ldr	r3, [pc, #80]	; (8009dac <xTaskRemoveFromEventList+0x7c>)
 8009d5c:	6018      	str	r0, [r3, #0]
 8009d5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009d62:	4629      	mov	r1, r5
 8009d64:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <xTaskRemoveFromEventList+0x80>)
 8009d66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d6a:	f7fe fe01 	bl	8008970 <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 8009d6e:	f7ff fbc9 	bl	8009504 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d74:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <xTaskRemoveFromEventList+0x84>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d911      	bls.n	8009da2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8009d7e:	2001      	movs	r0, #1
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <xTaskRemoveFromEventList+0x88>)
 8009d82:	6018      	str	r0, [r3, #0]
}
 8009d84:	bd38      	pop	{r3, r4, r5, pc}
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009d96:	e7fe      	b.n	8009d96 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4808      	ldr	r0, [pc, #32]	; (8009dbc <xTaskRemoveFromEventList+0x8c>)
 8009d9c:	f7fe fde8 	bl	8008970 <vListInsertEnd>
 8009da0:	e7e7      	b.n	8009d72 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 8009da2:	2000      	movs	r0, #0
	return xReturn;
 8009da4:	e7ee      	b.n	8009d84 <xTaskRemoveFromEventList+0x54>
 8009da6:	bf00      	nop
 8009da8:	200030c0 	.word	0x200030c0
 8009dac:	200030c8 	.word	0x200030c8
 8009db0:	20002c54 	.word	0x20002c54
 8009db4:	20002c48 	.word	0x20002c48
 8009db8:	20003144 	.word	0x20003144
 8009dbc:	20003100 	.word	0x20003100

08009dc0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dc0:	4b03      	ldr	r3, [pc, #12]	; (8009dd0 <vTaskInternalSetTimeOutState+0x10>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009dc6:	4b03      	ldr	r3, [pc, #12]	; (8009dd4 <vTaskInternalSetTimeOutState+0x14>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6043      	str	r3, [r0, #4]
}
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	200030fc 	.word	0x200030fc
 8009dd4:	20003140 	.word	0x20003140

08009dd8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8009dd8:	b1d8      	cbz	r0, 8009e12 <xTaskCheckForTimeOut+0x3a>
{
 8009dda:	b570      	push	{r4, r5, r6, lr}
 8009ddc:	460c      	mov	r4, r1
 8009dde:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009de0:	b301      	cbz	r1, 8009e24 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8009de2:	f7fe fe57 	bl	8008a94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009de6:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <xTaskCheckForTimeOut+0x7c>)
 8009de8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009dea:	686b      	ldr	r3, [r5, #4]
 8009dec:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009dee:	6822      	ldr	r2, [r4, #0]
 8009df0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009df4:	d027      	beq.n	8009e46 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009df6:	4e18      	ldr	r6, [pc, #96]	; (8009e58 <xTaskCheckForTimeOut+0x80>)
 8009df8:	6836      	ldr	r6, [r6, #0]
 8009dfa:	f8d5 c000 	ldr.w	ip, [r5]
 8009dfe:	45b4      	cmp	ip, r6
 8009e00:	d001      	beq.n	8009e06 <xTaskCheckForTimeOut+0x2e>
 8009e02:	428b      	cmp	r3, r1
 8009e04:	d924      	bls.n	8009e50 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e06:	4282      	cmp	r2, r0
 8009e08:	d815      	bhi.n	8009e36 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009e0e:	2401      	movs	r4, #1
 8009e10:	e01a      	b.n	8009e48 <xTaskCheckForTimeOut+0x70>
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009e22:	e7fe      	b.n	8009e22 <xTaskCheckForTimeOut+0x4a>
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009e34:	e7fe      	b.n	8009e34 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8009e36:	1a5b      	subs	r3, r3, r1
 8009e38:	4413      	add	r3, r2
 8009e3a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f7ff ffbf 	bl	8009dc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e42:	2400      	movs	r4, #0
 8009e44:	e000      	b.n	8009e48 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8009e46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009e48:	f7fe fe46 	bl	8008ad8 <vPortExitCritical>
}
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8009e50:	2401      	movs	r4, #1
 8009e52:	e7f9      	b.n	8009e48 <xTaskCheckForTimeOut+0x70>
 8009e54:	20003140 	.word	0x20003140
 8009e58:	200030fc 	.word	0x200030fc

08009e5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009e5c:	4b01      	ldr	r3, [pc, #4]	; (8009e64 <vTaskMissedYield+0x8>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	601a      	str	r2, [r3, #0]
}
 8009e62:	4770      	bx	lr
 8009e64:	20003144 	.word	0x20003144

08009e68 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <eTaskConfirmSleepModeStatus+0x2c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	b95b      	cbnz	r3, 8009e86 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	; (8009e98 <eTaskConfirmSleepModeStatus+0x30>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	b953      	cbnz	r3, 8009e8a <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009e74:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <eTaskConfirmSleepModeStatus+0x34>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <eTaskConfirmSleepModeStatus+0x38>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d005      	beq.n	8009e8e <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 8009e82:	2001      	movs	r0, #1
 8009e84:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009e86:	2000      	movs	r0, #0
 8009e88:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 8009e8e:	2002      	movs	r0, #2
	}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20003100 	.word	0x20003100
 8009e98:	20003144 	.word	0x20003144
 8009e9c:	20003118 	.word	0x20003118
 8009ea0:	200030b4 	.word	0x200030b4

08009ea4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <xTaskGetSchedulerState+0x18>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	b133      	cbz	r3, 8009eb8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <xTaskGetSchedulerState+0x1c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	b10b      	cbz	r3, 8009eb4 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009eb0:	2000      	movs	r0, #0
	}
 8009eb2:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009eb4:	2002      	movs	r0, #2
 8009eb6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009eb8:	2001      	movs	r0, #1
 8009eba:	4770      	bx	lr
 8009ebc:	20003114 	.word	0x20003114
 8009ec0:	200030c0 	.word	0x200030c0

08009ec4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d03b      	beq.n	8009f40 <xTaskPriorityDisinherit+0x7c>
	{
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <xTaskPriorityDisinherit+0x84>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	d008      	beq.n	8009ee6 <xTaskPriorityDisinherit+0x22>
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	e7fe      	b.n	8009ee4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009ee8:	b943      	cbnz	r3, 8009efc <xTaskPriorityDisinherit+0x38>
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	f383 8811 	msr	BASEPRI, r3
 8009ef2:	f3bf 8f6f 	isb	sy
 8009ef6:	f3bf 8f4f 	dsb	sy
 8009efa:	e7fe      	b.n	8009efa <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009efc:	3b01      	subs	r3, #1
 8009efe:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f00:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009f02:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009f04:	4291      	cmp	r1, r2
 8009f06:	d01d      	beq.n	8009f44 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f08:	b10b      	cbz	r3, 8009f0e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009f0a:	2000      	movs	r0, #0
	}
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f0e:	1d05      	adds	r5, r0, #4
 8009f10:	4628      	mov	r0, r5
 8009f12:	f7fe fd51 	bl	80089b8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f16:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009f18:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1a:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8009f1e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <xTaskPriorityDisinherit+0x88>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4298      	cmp	r0, r3
 8009f26:	d901      	bls.n	8009f2c <xTaskPriorityDisinherit+0x68>
 8009f28:	4b08      	ldr	r3, [pc, #32]	; (8009f4c <xTaskPriorityDisinherit+0x88>)
 8009f2a:	6018      	str	r0, [r3, #0]
 8009f2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f30:	4629      	mov	r1, r5
 8009f32:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <xTaskPriorityDisinherit+0x8c>)
 8009f34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f38:	f7fe fd1a 	bl	8008970 <vListInsertEnd>
					xReturn = pdTRUE;
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7e5      	b.n	8009f0c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009f40:	2000      	movs	r0, #0
	}
 8009f42:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009f44:	2000      	movs	r0, #0
 8009f46:	e7e1      	b.n	8009f0c <xTaskPriorityDisinherit+0x48>
 8009f48:	20002c48 	.word	0x20002c48
 8009f4c:	200030c8 	.word	0x200030c8
 8009f50:	20002c54 	.word	0x20002c54

08009f54 <xTaskNotifyWait>:
	{
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	4606      	mov	r6, r0
 8009f58:	460f      	mov	r7, r1
 8009f5a:	4614      	mov	r4, r2
 8009f5c:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 8009f5e:	f7fe fd99 	bl	8008a94 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f62:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	2a02      	cmp	r2, #2
 8009f6e:	d00a      	beq.n	8009f86 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009f70:	4a1d      	ldr	r2, [pc, #116]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009f72:	6811      	ldr	r1, [r2, #0]
 8009f74:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8009f76:	ea23 0306 	bic.w	r3, r3, r6
 8009f7a:	654b      	str	r3, [r1, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009f7c:	6813      	ldr	r3, [r2, #0]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 8009f84:	b9cd      	cbnz	r5, 8009fba <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009f86:	f7fe fda7 	bl	8008ad8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009f8a:	f7fe fd83 	bl	8008a94 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009f8e:	b11c      	cbz	r4, 8009f98 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009f90:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f96:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f98:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d018      	beq.n	8009fd8 <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 8009fa6:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fa8:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 8009fb2:	f7fe fd91 	bl	8008ad8 <vPortExitCritical>
	}
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7ff fbd5 	bl	800976c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8009fc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	e7d6      	b.n	8009f86 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009fd8:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <xTaskNotifyWait+0x94>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009fde:	ea23 0307 	bic.w	r3, r3, r7
 8009fe2:	6553      	str	r3, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 8009fe4:	2401      	movs	r4, #1
 8009fe6:	e7df      	b.n	8009fa8 <xTaskNotifyWait+0x54>
 8009fe8:	20002c48 	.word	0x20002c48

08009fec <xTaskGenericNotify>:
	{
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8009fee:	b1a8      	cbz	r0, 800a01c <xTaskGenericNotify+0x30>
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 8009ff8:	f7fe fd4c 	bl	8008a94 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009ffc:	b10d      	cbz	r5, 800a002 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ffe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a000:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a002:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800a006:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a008:	2202      	movs	r2, #2
 800a00a:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 800a00e:	2c04      	cmp	r4, #4
 800a010:	d81f      	bhi.n	800a052 <xTaskGenericNotify+0x66>
 800a012:	e8df f004 	tbb	[pc, r4]
 800a016:	0c2b      	.short	0x0c2b
 800a018:	1611      	.short	0x1611
 800a01a:	19          	.byte	0x19
 800a01b:	00          	.byte	0x00
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a02c:	e7fe      	b.n	800a02c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800a02e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a030:	433a      	orrs	r2, r7
 800a032:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a034:	2401      	movs	r4, #1
					break;
 800a036:	e01a      	b.n	800a06e <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 800a038:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a03a:	3201      	adds	r2, #1
 800a03c:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a03e:	2401      	movs	r4, #1
					break;
 800a040:	e015      	b.n	800a06e <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 800a042:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a044:	2401      	movs	r4, #1
					break;
 800a046:	e012      	b.n	800a06e <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d016      	beq.n	800a07a <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 800a04c:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a04e:	2401      	movs	r4, #1
 800a050:	e00d      	b.n	800a06e <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a052:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a054:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a058:	d011      	beq.n	800a07e <xTaskGenericNotify+0x92>
 800a05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	e7fe      	b.n	800a06a <xTaskGenericNotify+0x7e>
			switch( eAction )
 800a06c:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d007      	beq.n	800a082 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 800a072:	f7fe fd31 	bl	8008ad8 <vPortExitCritical>
	}
 800a076:	4620      	mov	r0, r4
 800a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800a07a:	2400      	movs	r4, #0
 800a07c:	e7f7      	b.n	800a06e <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 800a07e:	2401      	movs	r4, #1
 800a080:	e7f5      	b.n	800a06e <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a082:	1d35      	adds	r5, r6, #4
 800a084:	4628      	mov	r0, r5
 800a086:	f7fe fc97 	bl	80089b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a08a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a08c:	4b15      	ldr	r3, [pc, #84]	; (800a0e4 <xTaskGenericNotify+0xf8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4298      	cmp	r0, r3
 800a092:	d901      	bls.n	800a098 <xTaskGenericNotify+0xac>
 800a094:	4b13      	ldr	r3, [pc, #76]	; (800a0e4 <xTaskGenericNotify+0xf8>)
 800a096:	6018      	str	r0, [r3, #0]
 800a098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a09c:	4629      	mov	r1, r5
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <xTaskGenericNotify+0xfc>)
 800a0a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0a4:	f7fe fc64 	bl	8008970 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a0a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a0aa:	b143      	cbz	r3, 800a0be <xTaskGenericNotify+0xd2>
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	e7fe      	b.n	800a0bc <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 800a0be:	f7ff fa21 	bl	8009504 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0c2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <xTaskGenericNotify+0x100>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d9d1      	bls.n	800a072 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800a0ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	e7c6      	b.n	800a072 <xTaskGenericNotify+0x86>
 800a0e4:	200030c8 	.word	0x200030c8
 800a0e8:	20002c54 	.word	0x20002c54
 800a0ec:	20002c48 	.word	0x20002c48

0800a0f0 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800a0f0:	b310      	cbz	r0, 800a138 <xTaskGenericNotifyFromISR+0x48>
	{
 800a0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f6:	460e      	mov	r6, r1
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	461d      	mov	r5, r3
 800a0fc:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0fe:	f7fe fe5f 	bl	8008dc0 <vPortValidateInterruptPriority>
	__asm volatile
 800a102:	f3ef 8311 	mrs	r3, BASEPRI
 800a106:	f04f 0250 	mov.w	r2, #80	; 0x50
 800a10a:	f382 8811 	msr	BASEPRI, r2
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	4698      	mov	r8, r3
			if( pulPreviousNotificationValue != NULL )
 800a118:	b10d      	cbz	r5, 800a11e <xTaskGenericNotifyFromISR+0x2e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a11c:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a11e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800a122:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a124:	2202      	movs	r2, #2
 800a126:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 800a12a:	2c04      	cmp	r4, #4
 800a12c:	d81f      	bhi.n	800a16e <xTaskGenericNotifyFromISR+0x7e>
 800a12e:	e8df f004 	tbb	[pc, r4]
 800a132:	0c2b      	.short	0x0c2b
 800a134:	1611      	.short	0x1611
 800a136:	19          	.byte	0x19
 800a137:	00          	.byte	0x00
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a148:	e7fe      	b.n	800a148 <xTaskGenericNotifyFromISR+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 800a14a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a14c:	4332      	orrs	r2, r6
 800a14e:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a150:	2401      	movs	r4, #1
					break;
 800a152:	e01a      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
					( pxTCB->ulNotifiedValue )++;
 800a154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a156:	3201      	adds	r2, #1
 800a158:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a15a:	2401      	movs	r4, #1
					break;
 800a15c:	e015      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
					pxTCB->ulNotifiedValue = ulValue;
 800a15e:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a160:	2401      	movs	r4, #1
					break;
 800a162:	e012      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a164:	2b02      	cmp	r3, #2
 800a166:	d017      	beq.n	800a198 <xTaskGenericNotifyFromISR+0xa8>
						pxTCB->ulNotifiedValue = ulValue;
 800a168:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a16a:	2401      	movs	r4, #1
 800a16c:	e00d      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a16e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a170:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a174:	d012      	beq.n	800a19c <xTaskGenericNotifyFromISR+0xac>
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	e7fe      	b.n	800a186 <xTaskGenericNotifyFromISR+0x96>
			switch( eAction )
 800a188:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d008      	beq.n	800a1a0 <xTaskGenericNotifyFromISR+0xb0>
	__asm volatile
 800a18e:	f388 8811 	msr	BASEPRI, r8
	}
 800a192:	4620      	mov	r0, r4
 800a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 800a198:	2400      	movs	r4, #0
 800a19a:	e7f6      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
	BaseType_t xReturn = pdPASS;
 800a19c:	2401      	movs	r4, #1
 800a19e:	e7f4      	b.n	800a18a <xTaskGenericNotifyFromISR+0x9a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	b143      	cbz	r3, 800a1b6 <xTaskGenericNotifyFromISR+0xc6>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	e7fe      	b.n	800a1b4 <xTaskGenericNotifyFromISR+0xc4>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b6:	4b15      	ldr	r3, [pc, #84]	; (800a20c <xTaskGenericNotifyFromISR+0x11c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	bb0b      	cbnz	r3, 800a200 <xTaskGenericNotifyFromISR+0x110>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1bc:	1d3d      	adds	r5, r7, #4
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f7fe fbfa 	bl	80089b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a1c6:	4b12      	ldr	r3, [pc, #72]	; (800a210 <xTaskGenericNotifyFromISR+0x120>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4298      	cmp	r0, r3
 800a1cc:	d901      	bls.n	800a1d2 <xTaskGenericNotifyFromISR+0xe2>
 800a1ce:	4b10      	ldr	r3, [pc, #64]	; (800a210 <xTaskGenericNotifyFromISR+0x120>)
 800a1d0:	6018      	str	r0, [r3, #0]
 800a1d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <xTaskGenericNotifyFromISR+0x124>)
 800a1da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1de:	f7fe fbc7 	bl	8008970 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e4:	4b0c      	ldr	r3, [pc, #48]	; (800a218 <xTaskGenericNotifyFromISR+0x128>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d9cf      	bls.n	800a18e <xTaskGenericNotifyFromISR+0x9e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a1ee:	9b06      	ldr	r3, [sp, #24]
 800a1f0:	b113      	cbz	r3, 800a1f8 <xTaskGenericNotifyFromISR+0x108>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9a06      	ldr	r2, [sp, #24]
 800a1f6:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800a1f8:	4b08      	ldr	r3, [pc, #32]	; (800a21c <xTaskGenericNotifyFromISR+0x12c>)
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	e7c6      	b.n	800a18e <xTaskGenericNotifyFromISR+0x9e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a200:	f107 0118 	add.w	r1, r7, #24
 800a204:	4806      	ldr	r0, [pc, #24]	; (800a220 <xTaskGenericNotifyFromISR+0x130>)
 800a206:	f7fe fbb3 	bl	8008970 <vListInsertEnd>
 800a20a:	e7ea      	b.n	800a1e2 <xTaskGenericNotifyFromISR+0xf2>
 800a20c:	200030c0 	.word	0x200030c0
 800a210:	200030c8 	.word	0x200030c8
 800a214:	20002c54 	.word	0x20002c54
 800a218:	20002c48 	.word	0x20002c48
 800a21c:	20003144 	.word	0x20003144
 800a220:	20003100 	.word	0x20003100

0800a224 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a224:	4b06      	ldr	r3, [pc, #24]	; (800a240 <prvGetNextExpireTime+0x1c>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	6813      	ldr	r3, [r2, #0]
 800a22a:	b92b      	cbnz	r3, 800a238 <prvGetNextExpireTime+0x14>
 800a22c:	2301      	movs	r3, #1
 800a22e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a230:	b923      	cbnz	r3, 800a23c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a232:	68d3      	ldr	r3, [r2, #12]
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a238:	2300      	movs	r3, #0
 800a23a:	e7f8      	b.n	800a22e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a23c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a23e:	4770      	bx	lr
 800a240:	20003148 	.word	0x20003148

0800a244 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a244:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a246:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a248:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a24a:	4291      	cmp	r1, r2
 800a24c:	d80c      	bhi.n	800a268 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	6983      	ldr	r3, [r0, #24]
 800a252:	429a      	cmp	r2, r3
 800a254:	d301      	bcc.n	800a25a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a256:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a258:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a25a:	1d01      	adds	r1, r0, #4
 800a25c:	4b09      	ldr	r3, [pc, #36]	; (800a284 <prvInsertTimerInActiveList+0x40>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	f7fe fb91 	bl	8008986 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a264:	2000      	movs	r0, #0
 800a266:	e7f7      	b.n	800a258 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a268:	429a      	cmp	r2, r3
 800a26a:	d201      	bcs.n	800a270 <prvInsertTimerInActiveList+0x2c>
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d206      	bcs.n	800a27e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a270:	1d01      	adds	r1, r0, #4
 800a272:	4b05      	ldr	r3, [pc, #20]	; (800a288 <prvInsertTimerInActiveList+0x44>)
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	f7fe fb86 	bl	8008986 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a27a:	2000      	movs	r0, #0
 800a27c:	e7ec      	b.n	800a258 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a27e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a280:	e7ea      	b.n	800a258 <prvInsertTimerInActiveList+0x14>
 800a282:	bf00      	nop
 800a284:	2000314c 	.word	0x2000314c
 800a288:	20003148 	.word	0x20003148

0800a28c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a28c:	b530      	push	{r4, r5, lr}
 800a28e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a290:	f7fe fc00 	bl	8008a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a294:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <prvCheckForValidListAndQueue+0x50>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	b11b      	cbz	r3, 800a2a2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a29a:	f7fe fc1d 	bl	8008ad8 <vPortExitCritical>
}
 800a29e:	b003      	add	sp, #12
 800a2a0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a2a2:	4d0f      	ldr	r5, [pc, #60]	; (800a2e0 <prvCheckForValidListAndQueue+0x54>)
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	f7fe fb55 	bl	8008954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2aa:	4c0e      	ldr	r4, [pc, #56]	; (800a2e4 <prvCheckForValidListAndQueue+0x58>)
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f7fe fb51 	bl	8008954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2b2:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <prvCheckForValidListAndQueue+0x5c>)
 800a2b4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <prvCheckForValidListAndQueue+0x60>)
 800a2b8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <prvCheckForValidListAndQueue+0x64>)
 800a2c0:	4a0c      	ldr	r2, [pc, #48]	; (800a2f4 <prvCheckForValidListAndQueue+0x68>)
 800a2c2:	2110      	movs	r1, #16
 800a2c4:	200a      	movs	r0, #10
 800a2c6:	f7fe fe9c 	bl	8009002 <xQueueGenericCreateStatic>
 800a2ca:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <prvCheckForValidListAndQueue+0x50>)
 800a2cc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d0e3      	beq.n	800a29a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2d2:	4909      	ldr	r1, [pc, #36]	; (800a2f8 <prvCheckForValidListAndQueue+0x6c>)
 800a2d4:	f7ff f8b8 	bl	8009448 <vQueueAddToRegistry>
 800a2d8:	e7df      	b.n	800a29a <prvCheckForValidListAndQueue+0xe>
 800a2da:	bf00      	nop
 800a2dc:	2000326c 	.word	0x2000326c
 800a2e0:	200031f0 	.word	0x200031f0
 800a2e4:	20003204 	.word	0x20003204
 800a2e8:	20003148 	.word	0x20003148
 800a2ec:	2000314c 	.word	0x2000314c
 800a2f0:	2000321c 	.word	0x2000321c
 800a2f4:	20003150 	.word	0x20003150
 800a2f8:	08015f1c 	.word	0x08015f1c

0800a2fc <xTimerCreateTimerTask>:
{
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a300:	f7ff ffc4 	bl	800a28c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a304:	4b12      	ldr	r3, [pc, #72]	; (800a350 <xTimerCreateTimerTask+0x54>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	b1cb      	cbz	r3, 800a33e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a30a:	2400      	movs	r4, #0
 800a30c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a30e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a310:	aa07      	add	r2, sp, #28
 800a312:	a906      	add	r1, sp, #24
 800a314:	a805      	add	r0, sp, #20
 800a316:	f7fe f9ff 	bl	8008718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a31a:	9b05      	ldr	r3, [sp, #20]
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	9b06      	ldr	r3, [sp, #24]
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	2302      	movs	r3, #2
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	4623      	mov	r3, r4
 800a328:	9a07      	ldr	r2, [sp, #28]
 800a32a:	490a      	ldr	r1, [pc, #40]	; (800a354 <xTimerCreateTimerTask+0x58>)
 800a32c:	480a      	ldr	r0, [pc, #40]	; (800a358 <xTimerCreateTimerTask+0x5c>)
 800a32e:	f7ff fa5b 	bl	80097e8 <xTaskCreateStatic>
 800a332:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <xTimerCreateTimerTask+0x60>)
 800a334:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a336:	b110      	cbz	r0, 800a33e <xTimerCreateTimerTask+0x42>
}
 800a338:	2001      	movs	r0, #1
 800a33a:	b008      	add	sp, #32
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a34e:	e7fe      	b.n	800a34e <xTimerCreateTimerTask+0x52>
 800a350:	2000326c 	.word	0x2000326c
 800a354:	08015f24 	.word	0x08015f24
 800a358:	0800a661 	.word	0x0800a661
 800a35c:	20003270 	.word	0x20003270

0800a360 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a360:	b1b8      	cbz	r0, 800a392 <xTimerGenericCommand+0x32>
 800a362:	469c      	mov	ip, r3
 800a364:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a366:	4818      	ldr	r0, [pc, #96]	; (800a3c8 <xTimerGenericCommand+0x68>)
 800a368:	6800      	ldr	r0, [r0, #0]
 800a36a:	b358      	cbz	r0, 800a3c4 <xTimerGenericCommand+0x64>
{
 800a36c:	b500      	push	{lr}
 800a36e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a370:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a372:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a374:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a376:	2905      	cmp	r1, #5
 800a378:	dc1c      	bgt.n	800a3b4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a37a:	f7ff fd93 	bl	8009ea4 <xTaskGetSchedulerState>
 800a37e:	2802      	cmp	r0, #2
 800a380:	d010      	beq.n	800a3a4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a382:	2300      	movs	r3, #0
 800a384:	461a      	mov	r2, r3
 800a386:	4669      	mov	r1, sp
 800a388:	480f      	ldr	r0, [pc, #60]	; (800a3c8 <xTimerGenericCommand+0x68>)
 800a38a:	6800      	ldr	r0, [r0, #0]
 800a38c:	f7fe fe83 	bl	8009096 <xQueueGenericSend>
 800a390:	e015      	b.n	800a3be <xTimerGenericCommand+0x5e>
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a3a2:	e7fe      	b.n	800a3a2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9a06      	ldr	r2, [sp, #24]
 800a3a8:	4669      	mov	r1, sp
 800a3aa:	4807      	ldr	r0, [pc, #28]	; (800a3c8 <xTimerGenericCommand+0x68>)
 800a3ac:	6800      	ldr	r0, [r0, #0]
 800a3ae:	f7fe fe72 	bl	8009096 <xQueueGenericSend>
 800a3b2:	e004      	b.n	800a3be <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4662      	mov	r2, ip
 800a3b8:	4669      	mov	r1, sp
 800a3ba:	f7fe ff30 	bl	800921e <xQueueGenericSendFromISR>
}
 800a3be:	b005      	add	sp, #20
 800a3c0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a3c4:	2000      	movs	r0, #0
}
 800a3c6:	4770      	bx	lr
 800a3c8:	2000326c 	.word	0x2000326c

0800a3cc <prvSwitchTimerLists>:
{
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3d0:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <prvSwitchTimerLists+0x74>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	b362      	cbz	r2, 800a432 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3dc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3de:	1d25      	adds	r5, r4, #4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f7fe fae9 	bl	80089b8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3e6:	6a23      	ldr	r3, [r4, #32]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a3f0:	f013 0f04 	tst.w	r3, #4
 800a3f4:	d0ec      	beq.n	800a3d0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3f6:	69a3      	ldr	r3, [r4, #24]
 800a3f8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a3fa:	429e      	cmp	r6, r3
 800a3fc:	d207      	bcs.n	800a40e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3fe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a400:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a402:	4629      	mov	r1, r5
 800a404:	4b0e      	ldr	r3, [pc, #56]	; (800a440 <prvSwitchTimerLists+0x74>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	f7fe fabd 	bl	8008986 <vListInsert>
 800a40c:	e7e0      	b.n	800a3d0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a40e:	2100      	movs	r1, #0
 800a410:	9100      	str	r1, [sp, #0]
 800a412:	460b      	mov	r3, r1
 800a414:	4632      	mov	r2, r6
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff ffa2 	bl	800a360 <xTimerGenericCommand>
				configASSERT( xResult );
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d1d7      	bne.n	800a3d0 <prvSwitchTimerLists+0x4>
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	e7fe      	b.n	800a430 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a432:	4a04      	ldr	r2, [pc, #16]	; (800a444 <prvSwitchTimerLists+0x78>)
 800a434:	6810      	ldr	r0, [r2, #0]
 800a436:	4902      	ldr	r1, [pc, #8]	; (800a440 <prvSwitchTimerLists+0x74>)
 800a438:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a43a:	6013      	str	r3, [r2, #0]
}
 800a43c:	b002      	add	sp, #8
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	20003148 	.word	0x20003148
 800a444:	2000314c 	.word	0x2000314c

0800a448 <prvSampleTimeNow>:
{
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a44c:	f7ff fa92 	bl	8009974 <xTaskGetTickCount>
 800a450:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvSampleTimeNow+0x28>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4283      	cmp	r3, r0
 800a458:	d805      	bhi.n	800a466 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <prvSampleTimeNow+0x28>)
 800a460:	601c      	str	r4, [r3, #0]
}
 800a462:	4620      	mov	r0, r4
 800a464:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a466:	f7ff ffb1 	bl	800a3cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	e7f6      	b.n	800a45e <prvSampleTimeNow+0x16>
 800a470:	20003218 	.word	0x20003218

0800a474 <prvProcessExpiredTimer>:
{
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	4606      	mov	r6, r0
 800a47a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47c:	4917      	ldr	r1, [pc, #92]	; (800a4dc <prvProcessExpiredTimer+0x68>)
 800a47e:	6809      	ldr	r1, [r1, #0]
 800a480:	68c9      	ldr	r1, [r1, #12]
 800a482:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a484:	1d20      	adds	r0, r4, #4
 800a486:	f7fe fa97 	bl	80089b8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a48a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800a48e:	f01c 0f04 	tst.w	ip, #4
 800a492:	d108      	bne.n	800a4a6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a494:	f02c 0c01 	bic.w	ip, ip, #1
 800a498:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a49c:	6a23      	ldr	r3, [r4, #32]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4798      	blx	r3
}
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4a6:	69a1      	ldr	r1, [r4, #24]
 800a4a8:	4633      	mov	r3, r6
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4431      	add	r1, r6
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff fec8 	bl	800a244 <prvInsertTimerInActiveList>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d0f1      	beq.n	800a49c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	9100      	str	r1, [sp, #0]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4632      	mov	r2, r6
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7ff ff4d 	bl	800a360 <xTimerGenericCommand>
			configASSERT( xResult );
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d1e8      	bne.n	800a49c <prvProcessExpiredTimer+0x28>
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	e7fe      	b.n	800a4da <prvProcessExpiredTimer+0x66>
 800a4dc:	20003148 	.word	0x20003148

0800a4e0 <prvProcessTimerOrBlockTask>:
{
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a4e8:	f7ff fa3c 	bl	8009964 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ec:	a801      	add	r0, sp, #4
 800a4ee:	f7ff ffab 	bl	800a448 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a4f2:	9b01      	ldr	r3, [sp, #4]
 800a4f4:	bb33      	cbnz	r3, 800a544 <prvProcessTimerOrBlockTask+0x64>
 800a4f6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4f8:	b90c      	cbnz	r4, 800a4fe <prvProcessTimerOrBlockTask+0x1e>
 800a4fa:	42b0      	cmp	r0, r6
 800a4fc:	d219      	bcs.n	800a532 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 800a4fe:	b124      	cbz	r4, 800a50a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a500:	4a12      	ldr	r2, [pc, #72]	; (800a54c <prvProcessTimerOrBlockTask+0x6c>)
 800a502:	6812      	ldr	r2, [r2, #0]
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	b9da      	cbnz	r2, 800a540 <prvProcessTimerOrBlockTask+0x60>
 800a508:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a50a:	4622      	mov	r2, r4
 800a50c:	1b71      	subs	r1, r6, r5
 800a50e:	4b10      	ldr	r3, [pc, #64]	; (800a550 <prvProcessTimerOrBlockTask+0x70>)
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f7fe ffad 	bl	8009470 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a516:	f7ff fad9 	bl	8009acc <xTaskResumeAll>
 800a51a:	b9a8      	cbnz	r0, 800a548 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800a51c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a524:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	e00a      	b.n	800a548 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800a532:	f7ff facb 	bl	8009acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a536:	4629      	mov	r1, r5
 800a538:	4630      	mov	r0, r6
 800a53a:	f7ff ff9b 	bl	800a474 <prvProcessExpiredTimer>
 800a53e:	e003      	b.n	800a548 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a540:	461c      	mov	r4, r3
 800a542:	e7e2      	b.n	800a50a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800a544:	f7ff fac2 	bl	8009acc <xTaskResumeAll>
}
 800a548:	b002      	add	sp, #8
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	2000314c 	.word	0x2000314c
 800a550:	2000326c 	.word	0x2000326c

0800a554 <prvProcessReceivedCommands>:
{
 800a554:	b510      	push	{r4, lr}
 800a556:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a558:	e002      	b.n	800a560 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a55a:	9b04      	ldr	r3, [sp, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	da0f      	bge.n	800a580 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a560:	2200      	movs	r2, #0
 800a562:	a904      	add	r1, sp, #16
 800a564:	4b3d      	ldr	r3, [pc, #244]	; (800a65c <prvProcessReceivedCommands+0x108>)
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	f7fe febf 	bl	80092ea <xQueueReceive>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d073      	beq.n	800a658 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a570:	9b04      	ldr	r3, [sp, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	daf1      	bge.n	800a55a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a576:	9907      	ldr	r1, [sp, #28]
 800a578:	9806      	ldr	r0, [sp, #24]
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	4798      	blx	r3
 800a57e:	e7ec      	b.n	800a55a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a580:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a582:	6963      	ldr	r3, [r4, #20]
 800a584:	b113      	cbz	r3, 800a58c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a586:	1d20      	adds	r0, r4, #4
 800a588:	f7fe fa16 	bl	80089b8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a58c:	a803      	add	r0, sp, #12
 800a58e:	f7ff ff5b 	bl	800a448 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	2b09      	cmp	r3, #9
 800a596:	d8e3      	bhi.n	800a560 <prvProcessReceivedCommands+0xc>
 800a598:	e8df f003 	tbb	[pc, r3]
 800a59c:	30050505 	.word	0x30050505
 800a5a0:	05055037 	.word	0x05055037
 800a5a4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	69a1      	ldr	r1, [r4, #24]
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4419      	add	r1, r3
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff fe42 	bl	800a244 <prvInsertTimerInActiveList>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d0cd      	beq.n	800a560 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5c4:	6a23      	ldr	r3, [r4, #32]
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a5ce:	f013 0f04 	tst.w	r3, #4
 800a5d2:	d0c5      	beq.n	800a560 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5d4:	69a2      	ldr	r2, [r4, #24]
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	9100      	str	r1, [sp, #0]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	9805      	ldr	r0, [sp, #20]
 800a5de:	4402      	add	r2, r0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff febd 	bl	800a360 <xTimerGenericCommand>
							configASSERT( xResult );
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d1ba      	bne.n	800a560 <prvProcessReceivedCommands+0xc>
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	e7fe      	b.n	800a5fa <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a600:	f023 0301 	bic.w	r3, r3, #1
 800a604:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800a608:	e7aa      	b.n	800a560 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a60a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a60e:	f043 0301 	orr.w	r3, r3, #1
 800a612:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a616:	9905      	ldr	r1, [sp, #20]
 800a618:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a61a:	b131      	cbz	r1, 800a62a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a61c:	4603      	mov	r3, r0
 800a61e:	4602      	mov	r2, r0
 800a620:	4401      	add	r1, r0
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff fe0e 	bl	800a244 <prvInsertTimerInActiveList>
					break;
 800a628:	e79a      	b.n	800a560 <prvProcessReceivedCommands+0xc>
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a63a:	e7fe      	b.n	800a63a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a63c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a640:	f013 0f02 	tst.w	r3, #2
 800a644:	d004      	beq.n	800a650 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a646:	f023 0301 	bic.w	r3, r3, #1
 800a64a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a64e:	e787      	b.n	800a560 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800a650:	4620      	mov	r0, r4
 800a652:	f7fe f947 	bl	80088e4 <vPortFree>
 800a656:	e783      	b.n	800a560 <prvProcessReceivedCommands+0xc>
}
 800a658:	b008      	add	sp, #32
 800a65a:	bd10      	pop	{r4, pc}
 800a65c:	2000326c 	.word	0x2000326c

0800a660 <prvTimerTask>:
{
 800a660:	b500      	push	{lr}
 800a662:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a664:	a801      	add	r0, sp, #4
 800a666:	f7ff fddd 	bl	800a224 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a66a:	9901      	ldr	r1, [sp, #4]
 800a66c:	f7ff ff38 	bl	800a4e0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a670:	f7ff ff70 	bl	800a554 <prvProcessReceivedCommands>
	for( ;; )
 800a674:	e7f6      	b.n	800a664 <prvTimerTask+0x4>
	...

0800a678 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a678:	2804      	cmp	r0, #4
 800a67a:	d807      	bhi.n	800a68c <LmHandlerPackageIsInitialized+0x14>
{
 800a67c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <LmHandlerPackageIsInitialized+0x1c>)
 800a680:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	b11b      	cbz	r3, 800a690 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800a688:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800a68a:	bd08      	pop	{r3, pc}
        return false;
 800a68c:	2000      	movs	r0, #0
}
 800a68e:	4770      	bx	lr
        return false;
 800a690:	2000      	movs	r0, #0
 800a692:	e7fa      	b.n	800a68a <LmHandlerPackageIsInitialized+0x12>
 800a694:	2000338c 	.word	0x2000338c

0800a698 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	4605      	mov	r5, r0
 800a69c:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a69e:	2400      	movs	r4, #0
 800a6a0:	e005      	b.n	800a6ae <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	b10b      	cbz	r3, 800a6aa <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	b264      	sxtb	r4, r4
 800a6ae:	2c04      	cmp	r4, #4
 800a6b0:	dc34      	bgt.n	800a71c <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 800a6b2:	4626      	mov	r6, r4
 800a6b4:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <LmHandlerPackagesNotify+0x88>)
 800a6b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0f5      	beq.n	800a6aa <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800a6be:	2d03      	cmp	r5, #3
 800a6c0:	d8f3      	bhi.n	800a6aa <LmHandlerPackagesNotify+0x12>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <LmHandlerPackagesNotify+0x30>)
 800a6c4:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800a6c8:	0800a6a3 	.word	0x0800a6a3
 800a6cc:	0800a6d9 	.word	0x0800a6d9
 800a6d0:	0800a705 	.word	0x0800a705
 800a6d4:	0800a711 	.word	0x0800a711
                        break;
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800a6d8:	6a1a      	ldr	r2, [r3, #32]
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d0e5      	beq.n	800a6aa <LmHandlerPackagesNotify+0x12>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d007      	beq.n	800a6f6 <LmHandlerPackagesNotify+0x5e>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	d1df      	bne.n	800a6aa <LmHandlerPackagesNotify+0x12>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <LmHandlerPackagesNotify+0x88>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	4798      	blx	r3
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d0d9      	beq.n	800a6aa <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a6f6:	4b0a      	ldr	r3, [pc, #40]	; (800a720 <LmHandlerPackagesNotify+0x88>)
 800a6f8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	4638      	mov	r0, r7
 800a700:	4798      	blx	r3
 800a702:	e7d2      	b.n	800a6aa <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0cf      	beq.n	800a6aa <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a70a:	4638      	mov	r0, r7
 800a70c:	4798      	blx	r3
 800a70e:	e7cc      	b.n	800a6aa <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0c9      	beq.n	800a6aa <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a716:	4638      	mov	r0, r7
 800a718:	4798      	blx	r3
 800a71a:	e7c6      	b.n	800a6aa <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800a71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71e:	bf00      	nop
 800a720:	2000338c 	.word	0x2000338c

0800a724 <MlmeIndication>:
{
 800a724:	b510      	push	{r4, lr}
 800a726:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800a728:	4b11      	ldr	r3, [pc, #68]	; (800a770 <MlmeIndication+0x4c>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a72e:	7842      	ldrb	r2, [r0, #1]
 800a730:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a732:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800a736:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a738:	f9b1 2000 	ldrsh.w	r2, [r1]
 800a73c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a73e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a742:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a744:	78ca      	ldrb	r2, [r1, #3]
 800a746:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a748:	6842      	ldr	r2, [r0, #4]
 800a74a:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800a74c:	4b09      	ldr	r3, [pc, #36]	; (800a774 <MlmeIndication+0x50>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	b13b      	cbz	r3, 800a764 <MlmeIndication+0x40>
 800a754:	7802      	ldrb	r2, [r0, #0]
 800a756:	2a0b      	cmp	r2, #11
 800a758:	d004      	beq.n	800a764 <MlmeIndication+0x40>
 800a75a:	2a0f      	cmp	r2, #15
 800a75c:	d002      	beq.n	800a764 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a75e:	4904      	ldr	r1, [pc, #16]	; (800a770 <MlmeIndication+0x4c>)
 800a760:	2000      	movs	r0, #0
 800a762:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800a764:	4621      	mov	r1, r4
 800a766:	2003      	movs	r0, #3
 800a768:	f7ff ff96 	bl	800a698 <LmHandlerPackagesNotify>
}
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	bf00      	nop
 800a770:	20000098 	.word	0x20000098
 800a774:	20003388 	.word	0x20003388

0800a778 <McpsConfirm>:
{
 800a778:	b510      	push	{r4, lr}
 800a77a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <McpsConfirm+0x3c>)
 800a77e:	2201      	movs	r2, #1
 800a780:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a782:	7842      	ldrb	r2, [r0, #1]
 800a784:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a786:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800a78a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a78c:	68c2      	ldr	r2, [r0, #12]
 800a78e:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a790:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800a794:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a796:	6902      	ldr	r2, [r0, #16]
 800a798:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a79a:	7902      	ldrb	r2, [r0, #4]
 800a79c:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <McpsConfirm+0x40>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a4:	b10b      	cbz	r3, 800a7aa <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a7a6:	4803      	ldr	r0, [pc, #12]	; (800a7b4 <McpsConfirm+0x3c>)
 800a7a8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f7ff ff73 	bl	800a698 <LmHandlerPackagesNotify>
}
 800a7b2:	bd10      	pop	{r4, pc}
 800a7b4:	200000ac 	.word	0x200000ac
 800a7b8:	20003388 	.word	0x20003388

0800a7bc <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800a7bc:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a7be:	2400      	movs	r4, #0
 800a7c0:	e001      	b.n	800a7c6 <LmHandlerPackageIsTxPending+0xa>
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	b264      	sxtb	r4, r4
 800a7c6:	2c04      	cmp	r4, #4
 800a7c8:	dc0c      	bgt.n	800a7e4 <LmHandlerPackageIsTxPending+0x28>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800a7ca:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <LmHandlerPackageIsTxPending+0x30>)
 800a7cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0f6      	beq.n	800a7c2 <LmHandlerPackageIsTxPending+0x6>
 800a7d4:	2c00      	cmp	r4, #0
 800a7d6:	d0f4      	beq.n	800a7c2 <LmHandlerPackageIsTxPending+0x6>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	4798      	blx	r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d0ef      	beq.n	800a7c2 <LmHandlerPackageIsTxPending+0x6>
 800a7e2:	e000      	b.n	800a7e6 <LmHandlerPackageIsTxPending+0x2a>
            {
                return true;
            }
        }
    }
    return false;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	bd10      	pop	{r4, pc}
 800a7ea:	bf00      	nop
 800a7ec:	2000338c 	.word	0x2000338c

0800a7f0 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800a7f0:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a7f2:	2400      	movs	r4, #0
 800a7f4:	e001      	b.n	800a7fa <LmHandlerPackagesProcess+0xa>
 800a7f6:	3401      	adds	r4, #1
 800a7f8:	b264      	sxtb	r4, r4
 800a7fa:	2c04      	cmp	r4, #4
 800a7fc:	dc12      	bgt.n	800a824 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a7fe:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <LmHandlerPackagesProcess+0x38>)
 800a800:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f6      	beq.n	800a7f6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a808:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0f3      	beq.n	800a7f6 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800a80e:	b2e0      	uxtb	r0, r4
 800a810:	f7ff ff32 	bl	800a678 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a814:	2800      	cmp	r0, #0
 800a816:	d0ee      	beq.n	800a7f6 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800a818:	4b03      	ldr	r3, [pc, #12]	; (800a828 <LmHandlerPackagesProcess+0x38>)
 800a81a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	4798      	blx	r3
 800a822:	e7e8      	b.n	800a7f6 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800a824:	bd38      	pop	{r3, r4, r5, pc}
 800a826:	bf00      	nop
 800a828:	2000338c 	.word	0x2000338c

0800a82c <LmHandlerDeviceTimeReq>:
{
 800a82c:	b500      	push	{lr}
 800a82e:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800a830:	230a      	movs	r3, #10
 800a832:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800a836:	a801      	add	r0, sp, #4
 800a838:	f003 fef2 	bl	800e620 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a83c:	9a05      	ldr	r2, [sp, #20]
 800a83e:	4b04      	ldr	r3, [pc, #16]	; (800a850 <LmHandlerDeviceTimeReq+0x24>)
 800a840:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800a842:	b910      	cbnz	r0, 800a84a <LmHandlerDeviceTimeReq+0x1e>
}
 800a844:	b007      	add	sp, #28
 800a846:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a84a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a84e:	e7f9      	b.n	800a844 <LmHandlerDeviceTimeReq+0x18>
 800a850:	20003384 	.word	0x20003384

0800a854 <LmHandlerProcess>:
{
 800a854:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 800a856:	f002 ffe7 	bl	800d828 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800a85a:	f7ff ffc9 	bl	800a7f0 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800a85e:	f7ff ffad 	bl	800a7bc <LmHandlerPackageIsTxPending>
}
 800a862:	bd08      	pop	{r3, pc}

0800a864 <LmHandlerGetDutyCycleWaitTime>:
}
 800a864:	4b01      	ldr	r3, [pc, #4]	; (800a86c <LmHandlerGetDutyCycleWaitTime+0x8>)
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20003384 	.word	0x20003384

0800a870 <LmHandlerJoinStatus>:
{
 800a870:	b500      	push	{lr}
 800a872:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a874:	2301      	movs	r3, #1
 800a876:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a87a:	4668      	mov	r0, sp
 800a87c:	f003 fab8 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800a880:	b920      	cbnz	r0, 800a88c <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a882:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a886:	b110      	cbz	r0, 800a88e <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800a888:	2001      	movs	r0, #1
 800a88a:	e000      	b.n	800a88e <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800a88c:	2000      	movs	r0, #0
}
 800a88e:	b00b      	add	sp, #44	; 0x2c
 800a890:	f85d fb04 	ldr.w	pc, [sp], #4

0800a894 <LmHandlerRequestClass>:
{
 800a894:	b510      	push	{r4, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800a89a:	f002 ffa3 	bl	800d7e4 <LoRaMacIsBusy>
 800a89e:	bbb0      	cbnz	r0, 800a90e <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800a8a0:	f7ff ffe6 	bl	800a870 <LmHandlerJoinStatus>
 800a8a4:	2801      	cmp	r0, #1
 800a8a6:	d135      	bne.n	800a914 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a8ae:	4668      	mov	r0, sp
 800a8b0:	f003 fa9e 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
 800a8b4:	bb88      	cbnz	r0, 800a91a <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800a8b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800a8ba:	42a3      	cmp	r3, r4
 800a8bc:	d030      	beq.n	800a920 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800a8be:	2c01      	cmp	r4, #1
 800a8c0:	d030      	beq.n	800a924 <LmHandlerRequestClass+0x90>
 800a8c2:	2c02      	cmp	r4, #2
 800a8c4:	d014      	beq.n	800a8f0 <LmHandlerRequestClass+0x5c>
 800a8c6:	b114      	cbz	r4, 800a8ce <LmHandlerRequestClass+0x3a>
 800a8c8:	2000      	movs	r0, #0
}
 800a8ca:	b00a      	add	sp, #40	; 0x28
 800a8cc:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800a8ce:	b90b      	cbnz	r3, 800a8d4 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	e7fa      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800a8d4:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a8d8:	4668      	mov	r0, sp
 800a8da:	f003 fbe3 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800a8de:	bb20      	cbnz	r0, 800a92a <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a8e0:	4b18      	ldr	r3, [pc, #96]	; (800a944 <LmHandlerRequestClass+0xb0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	b31b      	cbz	r3, 800a930 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e7ec      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 800a8f0:	bb03      	cbnz	r3, 800a934 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800a8f2:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a8f6:	4668      	mov	r0, sp
 800a8f8:	f003 fbd4 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800a8fc:	b9e8      	cbnz	r0, 800a93a <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <LmHandlerRequestClass+0xb0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a904:	b1e3      	cbz	r3, 800a940 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a906:	4620      	mov	r0, r4
 800a908:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a90a:	2000      	movs	r0, #0
 800a90c:	e7dd      	b.n	800a8ca <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a90e:	f06f 0001 	mvn.w	r0, #1
 800a912:	e7da      	b.n	800a8ca <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a914:	f06f 0002 	mvn.w	r0, #2
 800a918:	e7d7      	b.n	800a8ca <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 800a91a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a91e:	e7d4      	b.n	800a8ca <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a920:	2000      	movs	r0, #0
 800a922:	e7d2      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800a924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a928:	e7cf      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a92e:	e7cc      	b.n	800a8ca <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a930:	2000      	movs	r0, #0
 800a932:	e7ca      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a938:	e7c7      	b.n	800a8ca <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a93e:	e7c4      	b.n	800a8ca <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a940:	2000      	movs	r0, #0
 800a942:	e7c2      	b.n	800a8ca <LmHandlerRequestClass+0x36>
 800a944:	20003388 	.word	0x20003388

0800a948 <LmHandlerJoin>:
{
 800a948:	b510      	push	{r4, lr}
 800a94a:	b090      	sub	sp, #64	; 0x40
    mlmeReq.Type = MLME_JOIN;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800a952:	4b35      	ldr	r3, [pc, #212]	; (800aa28 <LmHandlerJoin+0xe0>)
 800a954:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a958:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800a95c:	f993 c005 	ldrsb.w	ip, [r3, #5]
 800a960:	f88d c032 	strb.w	ip, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800a964:	2802      	cmp	r0, #2
 800a966:	d023      	beq.n	800a9b0 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a968:	2001      	movs	r0, #1
 800a96a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800a96e:	4b2f      	ldr	r3, [pc, #188]	; (800aa2c <LmHandlerJoin+0xe4>)
 800a970:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800a972:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800a974:	f883 c005 	strb.w	ip, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a978:	2000      	movs	r0, #0
 800a97a:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800a97c:	7219      	strb	r1, [r3, #8]
        if( CtxRestoreDone == false )
 800a97e:	4b2c      	ldr	r3, [pc, #176]	; (800aa30 <LmHandlerJoin+0xe8>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b30b      	cbz	r3, 800a9c8 <LmHandlerJoin+0x80>
        LoRaMacStart();
 800a984:	f003 f972 	bl	800dc6c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a988:	2301      	movs	r3, #1
 800a98a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a98e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a992:	a801      	add	r0, sp, #4
 800a994:	f003 fb86 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a998:	4b26      	ldr	r3, [pc, #152]	; (800aa34 <LmHandlerJoin+0xec>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	b10b      	cbz	r3, 800a9a4 <LmHandlerJoin+0x5c>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a9a0:	4822      	ldr	r0, [pc, #136]	; (800aa2c <LmHandlerJoin+0xe4>)
 800a9a2:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800a9a4:	4b20      	ldr	r3, [pc, #128]	; (800aa28 <LmHandlerJoin+0xe0>)
 800a9a6:	7858      	ldrb	r0, [r3, #1]
 800a9a8:	f7ff ff74 	bl	800a894 <LmHandlerRequestClass>
}
 800a9ac:	b010      	add	sp, #64	; 0x40
 800a9ae:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800a9b6:	4b1d      	ldr	r3, [pc, #116]	; (800aa2c <LmHandlerJoin+0xe4>)
 800a9b8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800a9ba:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 800a9bc:	f003 f956 	bl	800dc6c <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 800a9c0:	a80b      	add	r0, sp, #44	; 0x2c
 800a9c2:	f003 fe2d 	bl	800e620 <LoRaMacMlmeRequest>
 800a9c6:	e7f1      	b.n	800a9ac <LmHandlerJoin+0x64>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800a9c8:	231e      	movs	r3, #30
 800a9ca:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800a9ce:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9d2:	a801      	add	r0, sp, #4
 800a9d4:	f003 fb66 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800a9d8:	231f      	movs	r3, #31
 800a9da:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800a9de:	4c12      	ldr	r4, [pc, #72]	; (800aa28 <LmHandlerJoin+0xe0>)
 800a9e0:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800a9e4:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9e8:	a801      	add	r0, sp, #4
 800a9ea:	f003 fb5b 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800a9ee:	2321      	movs	r3, #33	; 0x21
 800a9f0:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800a9f4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800a9f8:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9fc:	a801      	add	r0, sp, #4
 800a9fe:	f003 fb51 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800aa02:	2320      	movs	r3, #32
 800aa04:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800aa08:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800aa0c:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800aa10:	a801      	add	r0, sp, #4
 800aa12:	f003 fb47 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800aa16:	2328      	movs	r3, #40	; 0x28
 800aa18:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <LmHandlerJoin+0xf0>)
 800aa1e:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800aa20:	a801      	add	r0, sp, #4
 800aa22:	f003 fb3f 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800aa26:	e7ad      	b.n	800a984 <LmHandlerJoin+0x3c>
 800aa28:	200033a0 	.word	0x200033a0
 800aa2c:	20000080 	.word	0x20000080
 800aa30:	20003380 	.word	0x20003380
 800aa34:	20003388 	.word	0x20003388
 800aa38:	01000300 	.word	0x01000300

0800aa3c <LmHandlerIsBusy>:
{
 800aa3c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800aa3e:	f002 fed1 	bl	800d7e4 <LoRaMacIsBusy>
 800aa42:	b100      	cbz	r0, 800aa46 <LmHandlerIsBusy+0xa>
}
 800aa44:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aa46:	f7ff ff13 	bl	800a870 <LmHandlerJoinStatus>
 800aa4a:	2801      	cmp	r0, #1
 800aa4c:	d108      	bne.n	800aa60 <LmHandlerIsBusy+0x24>
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800aa4e:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <LmHandlerIsBusy+0x34>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	4798      	blx	r3
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d1f4      	bne.n	800aa44 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800aa5a:	f7ff feaf 	bl	800a7bc <LmHandlerPackageIsTxPending>
 800aa5e:	e7f1      	b.n	800aa44 <LmHandlerIsBusy+0x8>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800aa60:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <LmHandlerIsBusy+0x38>)
 800aa62:	7a19      	ldrb	r1, [r3, #8]
 800aa64:	79d8      	ldrb	r0, [r3, #7]
 800aa66:	f7ff ff6f 	bl	800a948 <LmHandlerJoin>
        return true;
 800aa6a:	2001      	movs	r0, #1
 800aa6c:	e7ea      	b.n	800aa44 <LmHandlerIsBusy+0x8>
 800aa6e:	bf00      	nop
 800aa70:	2000338c 	.word	0x2000338c
 800aa74:	20000080 	.word	0x20000080

0800aa78 <LmHandlerSend>:
{
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	460d      	mov	r5, r1
 800aa80:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800aa82:	f002 feaf 	bl	800d7e4 <LoRaMacIsBusy>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d172      	bne.n	800ab70 <LmHandlerSend+0xf8>
    if( LoRaMacIsStopped() == true )
 800aa8a:	f002 fec1 	bl	800d810 <LoRaMacIsStopped>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d171      	bne.n	800ab76 <LmHandlerSend+0xfe>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aa92:	f7ff feed 	bl	800a870 <LmHandlerJoinStatus>
 800aa96:	2801      	cmp	r0, #1
 800aa98:	d144      	bne.n	800ab24 <LmHandlerSend+0xac>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800aa9a:	4b3b      	ldr	r3, [pc, #236]	; (800ab88 <LmHandlerSend+0x110>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	4798      	blx	r3
 800aaa2:	b138      	cbz	r0, 800aab4 <LmHandlerSend+0x3c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800aaa4:	7823      	ldrb	r3, [r4, #0]
 800aaa6:	4a38      	ldr	r2, [pc, #224]	; (800ab88 <LmHandlerSend+0x110>)
 800aaa8:	6812      	ldr	r2, [r2, #0]
 800aaaa:	7812      	ldrb	r2, [r2, #0]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d001      	beq.n	800aab4 <LmHandlerSend+0x3c>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d163      	bne.n	800ab7c <LmHandlerSend+0x104>
    TxParams.MsgType = isTxConfirmed;
 800aab4:	4b35      	ldr	r3, [pc, #212]	; (800ab8c <LmHandlerSend+0x114>)
 800aab6:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800aab8:	3d00      	subs	r5, #0
 800aaba:	bf18      	it	ne
 800aabc:	2501      	movne	r5, #1
 800aabe:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800aac2:	4b33      	ldr	r3, [pc, #204]	; (800ab90 <LmHandlerSend+0x118>)
 800aac4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800aac8:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800aacc:	4669      	mov	r1, sp
 800aace:	7860      	ldrb	r0, [r4, #1]
 800aad0:	f003 f92c 	bl	800dd2c <LoRaMacQueryTxPossible>
 800aad4:	b370      	cbz	r0, 800ab34 <LmHandlerSend+0xbc>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800aad6:	2300      	movs	r3, #0
 800aad8:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800aadc:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800aade:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800aae2:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800aae6:	4b29      	ldr	r3, [pc, #164]	; (800ab8c <LmHandlerSend+0x114>)
 800aae8:	f103 0c10 	add.w	ip, r3, #16
 800aaec:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aaf0:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800aaf4:	4a26      	ldr	r2, [pc, #152]	; (800ab90 <LmHandlerSend+0x118>)
 800aaf6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aafa:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800aafc:	4631      	mov	r1, r6
 800aafe:	a801      	add	r0, sp, #4
 800ab00:	f003 fe6e 	bl	800e7e0 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ab04:	9a05      	ldr	r2, [sp, #20]
 800ab06:	4b23      	ldr	r3, [pc, #140]	; (800ab94 <LmHandlerSend+0x11c>)
 800ab08:	601a      	str	r2, [r3, #0]
    switch( status )
 800ab0a:	2811      	cmp	r0, #17
 800ab0c:	d82d      	bhi.n	800ab6a <LmHandlerSend+0xf2>
 800ab0e:	e8df f000 	tbb	[pc, r0]
 800ab12:	1c21      	.short	0x1c21
 800ab14:	2c2c2c2c 	.word	0x2c2c2c2c
 800ab18:	2c2c382c 	.word	0x2c2c382c
 800ab1c:	2c2c292c 	.word	0x2c2c292c
 800ab20:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ab24:	4b1c      	ldr	r3, [pc, #112]	; (800ab98 <LmHandlerSend+0x120>)
 800ab26:	7a19      	ldrb	r1, [r3, #8]
 800ab28:	79d8      	ldrb	r0, [r3, #7]
 800ab2a:	f7ff ff0d 	bl	800a948 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab2e:	f06f 0502 	mvn.w	r5, #2
 800ab32:	e00c      	b.n	800ab4e <LmHandlerSend+0xd6>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ab34:	7823      	ldrb	r3, [r4, #0]
 800ab36:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ab3a:	7863      	ldrb	r3, [r4, #1]
 800ab3c:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ab44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ab48:	e7cd      	b.n	800aae6 <LmHandlerSend+0x6e>
    switch( status )
 800ab4a:	f06f 0501 	mvn.w	r5, #1
}
 800ab4e:	4628      	mov	r0, r5
 800ab50:	b006      	add	sp, #24
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ab54:	f115 0f07 	cmn.w	r5, #7
 800ab58:	d0f9      	beq.n	800ab4e <LmHandlerSend+0xd6>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	e7f7      	b.n	800ab4e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ab5e:	f06f 0504 	mvn.w	r5, #4
            break;
 800ab62:	e7f4      	b.n	800ab4e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ab64:	f06f 0505 	mvn.w	r5, #5
            break;
 800ab68:	e7f1      	b.n	800ab4e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ab6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            break;
 800ab6e:	e7ee      	b.n	800ab4e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ab70:	f06f 0501 	mvn.w	r5, #1
 800ab74:	e7eb      	b.n	800ab4e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab76:	f06f 0502 	mvn.w	r5, #2
 800ab7a:	e7e8      	b.n	800ab4e <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800ab7c:	f06f 0503 	mvn.w	r5, #3
 800ab80:	e7e5      	b.n	800ab4e <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab82:	f06f 0502 	mvn.w	r5, #2
 800ab86:	e7e2      	b.n	800ab4e <LmHandlerSend+0xd6>
 800ab88:	2000338c 	.word	0x2000338c
 800ab8c:	200000ac 	.word	0x200000ac
 800ab90:	200033a0 	.word	0x200033a0
 800ab94:	20003384 	.word	0x20003384
 800ab98:	20000080 	.word	0x20000080

0800ab9c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800ab9c:	b170      	cbz	r0, 800abbc <LmHandlerGetCurrentClass+0x20>
{
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	b08a      	sub	sp, #40	; 0x28
 800aba2:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800aba4:	2300      	movs	r3, #0
 800aba6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800abaa:	4668      	mov	r0, sp
 800abac:	f003 f920 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
 800abb0:	b938      	cbnz	r0, 800abc2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800abb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800abb6:	7023      	strb	r3, [r4, #0]
}
 800abb8:	b00a      	add	sp, #40	; 0x28
 800abba:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800abc0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc6:	e7f7      	b.n	800abb8 <LmHandlerGetCurrentClass+0x1c>

0800abc8 <McpsIndication>:
{
 800abc8:	b510      	push	{r4, lr}
 800abca:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 800abcc:	2300      	movs	r3, #0
 800abce:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800abd2:	4a21      	ldr	r2, [pc, #132]	; (800ac58 <McpsIndication+0x90>)
 800abd4:	2301      	movs	r3, #1
 800abd6:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800abd8:	7843      	ldrb	r3, [r0, #1]
 800abda:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d12e      	bne.n	800ac3e <McpsIndication+0x76>
 800abe0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800abe2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800abe6:	4b1c      	ldr	r3, [pc, #112]	; (800ac58 <McpsIndication+0x90>)
 800abe8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800abea:	f9b1 2000 	ldrsh.w	r2, [r1]
 800abee:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800abf0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800abf4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800abf6:	78ca      	ldrb	r2, [r1, #3]
 800abf8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800abfa:	6902      	ldr	r2, [r0, #16]
 800abfc:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800abfe:	78c3      	ldrb	r3, [r0, #3]
 800ac00:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ac04:	7b03      	ldrb	r3, [r0, #12]
 800ac06:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800ac0a:	6883      	ldr	r3, [r0, #8]
 800ac0c:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <McpsIndication+0x94>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	b113      	cbz	r3, 800ac1c <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ac16:	4910      	ldr	r1, [pc, #64]	; (800ac58 <McpsIndication+0x90>)
 800ac18:	a804      	add	r0, sp, #16
 800ac1a:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <McpsIndication+0x94>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	b113      	cbz	r3, 800ac2a <McpsIndication+0x62>
 800ac24:	7e22      	ldrb	r2, [r4, #24]
 800ac26:	b102      	cbz	r2, 800ac2a <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ac28:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	f7ff fd33 	bl	800a698 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800ac32:	f10d 000f 	add.w	r0, sp, #15
 800ac36:	f7ff ffb1 	bl	800ab9c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ac3a:	7963      	ldrb	r3, [r4, #5]
 800ac3c:	b90b      	cbnz	r3, 800ac42 <McpsIndication+0x7a>
}
 800ac3e:	b006      	add	sp, #24
 800ac40:	bd10      	pop	{r4, pc}
        LmHandlerAppData_t appData =
 800ac42:	2100      	movs	r1, #0
 800ac44:	f88d 1004 	strb.w	r1, [sp, #4]
 800ac48:	f88d 1005 	strb.w	r1, [sp, #5]
 800ac4c:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ac4e:	2201      	movs	r2, #1
 800ac50:	a801      	add	r0, sp, #4
 800ac52:	f7ff ff11 	bl	800aa78 <LmHandlerSend>
 800ac56:	e7f2      	b.n	800ac3e <McpsIndication+0x76>
 800ac58:	20000098 	.word	0x20000098
 800ac5c:	20003388 	.word	0x20003388

0800ac60 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800ac60:	b180      	cbz	r0, 800ac84 <LmHandlerGetTxDatarate+0x24>
{
 800ac62:	b510      	push	{r4, lr}
 800ac64:	b08a      	sub	sp, #40	; 0x28
 800ac66:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ac68:	231f      	movs	r3, #31
 800ac6a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ac6e:	4668      	mov	r0, sp
 800ac70:	f003 f8be 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
 800ac74:	b948      	cbnz	r0, 800ac8a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ac76:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800ac7a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ac7c:	4a04      	ldr	r2, [pc, #16]	; (800ac90 <LmHandlerGetTxDatarate+0x30>)
 800ac7e:	7113      	strb	r3, [r2, #4]
}
 800ac80:	b00a      	add	sp, #40	; 0x28
 800ac82:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ac88:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac8e:	e7f7      	b.n	800ac80 <LmHandlerGetTxDatarate+0x20>
 800ac90:	200033a0 	.word	0x200033a0

0800ac94 <LmHandlerSetSystemMaxRxError>:
{
 800ac94:	b500      	push	{lr}
 800ac96:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ac98:	2322      	movs	r3, #34	; 0x22
 800ac9a:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ac9e:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800aca0:	4668      	mov	r0, sp
 800aca2:	f003 f9ff 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800aca6:	b910      	cbnz	r0, 800acae <LmHandlerSetSystemMaxRxError+0x1a>
}
 800aca8:	b00b      	add	sp, #44	; 0x2c
 800acaa:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800acae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb2:	e7f9      	b.n	800aca8 <LmHandlerSetSystemMaxRxError+0x14>

0800acb4 <LmHandlerConfigure>:
{
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	b08e      	sub	sp, #56	; 0x38
 800acb8:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800acba:	4c6c      	ldr	r4, [pc, #432]	; (800ae6c <LmHandlerConfigure+0x1b8>)
 800acbc:	2218      	movs	r2, #24
 800acbe:	4620      	mov	r0, r4
 800acc0:	f008 f891 	bl	8012de6 <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 800acc4:	f7f7 ffa6 	bl	8002c14 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800acc8:	7822      	ldrb	r2, [r4, #0]
 800acca:	2301      	movs	r3, #1
 800accc:	4093      	lsls	r3, r2
 800acce:	6841      	ldr	r1, [r0, #4]
 800acd0:	420b      	tst	r3, r1
 800acd2:	d106      	bne.n	800ace2 <LmHandlerConfigure+0x2e>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800acd4:	4b66      	ldr	r3, [pc, #408]	; (800ae70 <LmHandlerConfigure+0x1bc>)
 800acd6:	2201      	movs	r2, #1
 800acd8:	2100      	movs	r1, #0
 800acda:	4608      	mov	r0, r1
 800acdc:	f009 ff60 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800ace0:	e7fe      	b.n	800ace0 <LmHandlerConfigure+0x2c>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800ace2:	4964      	ldr	r1, [pc, #400]	; (800ae74 <LmHandlerConfigure+0x1c0>)
 800ace4:	4864      	ldr	r0, [pc, #400]	; (800ae78 <LmHandlerConfigure+0x1c4>)
 800ace6:	f002 fde7 	bl	800d8b8 <LoRaMacInitialization>
 800acea:	2800      	cmp	r0, #0
 800acec:	f040 80b7 	bne.w	800ae5e <LmHandlerConfigure+0x1aa>
    mibReq.Type = MIB_NVM_CTXS;
 800acf0:	2326      	movs	r3, #38	; 0x26
 800acf2:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800acf6:	a804      	add	r0, sp, #16
 800acf8:	f003 f9d4 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d17c      	bne.n	800adfa <LmHandlerConfigure+0x146>
        CtxRestoreDone = true;
 800ad00:	4b5e      	ldr	r3, [pc, #376]	; (800ae7c <LmHandlerConfigure+0x1c8>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 800ad06:	4b5d      	ldr	r3, [pc, #372]	; (800ae7c <LmHandlerConfigure+0x1c8>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 809e 	beq.w	800ae4c <LmHandlerConfigure+0x198>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ad10:	4b5b      	ldr	r3, [pc, #364]	; (800ae80 <LmHandlerConfigure+0x1cc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	b10b      	cbz	r3, 800ad1c <LmHandlerConfigure+0x68>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ad18:	2000      	movs	r0, #0
 800ad1a:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800ad1c:	2326      	movs	r3, #38	; 0x26
 800ad1e:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ad22:	a804      	add	r0, sp, #16
 800ad24:	f003 f864 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800ad28:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800ad2a:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800ad2e:	4b4f      	ldr	r3, [pc, #316]	; (800ae6c <LmHandlerConfigure+0x1b8>)
 800ad30:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800ad32:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 800ad36:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800ad38:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800ad3c:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800ad3e:	4b4d      	ldr	r3, [pc, #308]	; (800ae74 <LmHandlerConfigure+0x1c0>)
 800ad40:	68d9      	ldr	r1, [r3, #12]
 800ad42:	6898      	ldr	r0, [r3, #8]
 800ad44:	f007 ff62 	bl	8012c0c <SecureElementInitMcuID>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f040 808b 	bne.w	800ae64 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_DEV_ADDR;
 800ad4e:	2306      	movs	r3, #6
 800ad50:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ad54:	a804      	add	r0, sp, #16
 800ad56:	f003 f84b 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ad5a:	4c4a      	ldr	r4, [pc, #296]	; (800ae84 <LmHandlerConfigure+0x1d0>)
 800ad5c:	9b05      	ldr	r3, [sp, #20]
 800ad5e:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ad60:	a804      	add	r0, sp, #16
 800ad62:	f003 f99f 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800ad66:	2302      	movs	r3, #2
 800ad68:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ad6c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ad6e:	a804      	add	r0, sp, #16
 800ad70:	f003 f83e 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800ad74:	2303      	movs	r3, #3
 800ad76:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ad7a:	3408      	adds	r4, #8
 800ad7c:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ad7e:	a804      	add	r0, sp, #16
 800ad80:	f003 f836 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800ad84:	f007 ffdc 	bl	8012d40 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ad88:	260f      	movs	r6, #15
 800ad8a:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ad94:	a804      	add	r0, sp, #16
 800ad96:	f003 f985 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ada0:	2500      	movs	r5, #0
 800ada2:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ada6:	eb0d 0003 	add.w	r0, sp, r3
 800adaa:	f003 f97b 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800adae:	2304      	movs	r3, #4
 800adb0:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800adb4:	4c2d      	ldr	r4, [pc, #180]	; (800ae6c <LmHandlerConfigure+0x1b8>)
 800adb6:	78a3      	ldrb	r3, [r4, #2]
 800adb8:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800adbc:	a804      	add	r0, sp, #16
 800adbe:	f003 f971 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800adc2:	2339      	movs	r3, #57	; 0x39
 800adc4:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800adc8:	6963      	ldr	r3, [r4, #20]
 800adca:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800adcc:	a804      	add	r0, sp, #16
 800adce:	f003 f969 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800add2:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800add6:	a902      	add	r1, sp, #8
 800add8:	7820      	ldrb	r0, [r4, #0]
 800adda:	f004 fe95 	bl	800fb08 <RegionGetPhyParam>
 800adde:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800ade0:	1b43      	subs	r3, r0, r5
 800ade2:	bf18      	it	ne
 800ade4:	2301      	movne	r3, #1
 800ade6:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800ade8:	2014      	movs	r0, #20
 800adea:	f7ff ff53 	bl	800ac94 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800adee:	79e0      	ldrb	r0, [r4, #7]
 800adf0:	f003 fdb2 	bl	800e958 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800adf4:	4628      	mov	r0, r5
}
 800adf6:	b00e      	add	sp, #56	; 0x38
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800adfa:	2327      	movs	r3, #39	; 0x27
 800adfc:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800ae00:	4b1f      	ldr	r3, [pc, #124]	; (800ae80 <LmHandlerConfigure+0x1cc>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	b14b      	cbz	r3, 800ae1c <LmHandlerConfigure+0x168>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ae08:	a804      	add	r0, sp, #16
 800ae0a:	f002 fff1 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800ae0e:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <LmHandlerConfigure+0x1cc>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 800ae18:	9805      	ldr	r0, [sp, #20]
 800ae1a:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800ae1c:	2326      	movs	r3, #38	; 0x26
 800ae1e:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ae22:	a804      	add	r0, sp, #16
 800ae24:	f003 f93e 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f47f af6c 	bne.w	800ad06 <LmHandlerConfigure+0x52>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ae34:	a804      	add	r0, sp, #16
 800ae36:	f002 ffdb 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ae3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f af61 	beq.w	800ad06 <LmHandlerConfigure+0x52>
                CtxRestoreDone = true;
 800ae44:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <LmHandlerConfigure+0x1c8>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	e75c      	b.n	800ad06 <LmHandlerConfigure+0x52>
        mibReq.Type = MIB_NET_ID;
 800ae4c:	2305      	movs	r3, #5
 800ae4e:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ae52:	2300      	movs	r3, #0
 800ae54:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ae56:	a804      	add	r0, sp, #16
 800ae58:	f003 f924 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
 800ae5c:	e76f      	b.n	800ad3e <LmHandlerConfigure+0x8a>
        return LORAMAC_HANDLER_ERROR;
 800ae5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae62:	e7c8      	b.n	800adf6 <LmHandlerConfigure+0x142>
        return LORAMAC_HANDLER_ERROR;
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae68:	e7c5      	b.n	800adf6 <LmHandlerConfigure+0x142>
 800ae6a:	bf00      	nop
 800ae6c:	200033a0 	.word	0x200033a0
 800ae70:	08015f2c 	.word	0x08015f2c
 800ae74:	200033b8 	.word	0x200033b8
 800ae78:	200033d0 	.word	0x200033d0
 800ae7c:	20003380 	.word	0x20003380
 800ae80:	20003388 	.word	0x20003388
 800ae84:	20003368 	.word	0x20003368

0800ae88 <LmHandlerPackageRegister>:
{
 800ae88:	b530      	push	{r4, r5, lr}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9301      	str	r3, [sp, #4]
    switch( id )
 800ae92:	4604      	mov	r4, r0
 800ae94:	b9c8      	cbnz	r0, 800aeca <LmHandlerPackageRegister+0x42>
                package = LmhpCompliancePackageFactory( );
 800ae96:	f000 fb21 	bl	800b4dc <LmhpCompliancePackageFactory>
 800ae9a:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	b1e3      	cbz	r3, 800aeda <LmHandlerPackageRegister+0x52>
        LmHandlerPackages[id] = package;
 800aea0:	4a0f      	ldr	r2, [pc, #60]	; (800aee0 <LmHandlerPackageRegister+0x58>)
 800aea2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800aea6:	4a0f      	ldr	r2, [pc, #60]	; (800aee4 <LmHandlerPackageRegister+0x5c>)
 800aea8:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800aeaa:	4a0f      	ldr	r2, [pc, #60]	; (800aee8 <LmHandlerPackageRegister+0x60>)
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800aeae:	4a0f      	ldr	r2, [pc, #60]	; (800aeec <LmHandlerPackageRegister+0x64>)
 800aeb0:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800aeb2:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <LmHandlerPackageRegister+0x68>)
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	6992      	ldr	r2, [r2, #24]
 800aeb8:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	22f2      	movs	r2, #242	; 0xf2
 800aebe:	490d      	ldr	r1, [pc, #52]	; (800aef4 <LmHandlerPackageRegister+0x6c>)
 800aec0:	4628      	mov	r0, r5
 800aec2:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800aec4:	2000      	movs	r0, #0
}
 800aec6:	b003      	add	sp, #12
 800aec8:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800aeca:	a901      	add	r1, sp, #4
 800aecc:	f000 fb0c 	bl	800b4e8 <LmhpPackagesRegister>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d0e3      	beq.n	800ae9c <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aed8:	e7f5      	b.n	800aec6 <LmHandlerPackageRegister+0x3e>
        return LORAMAC_HANDLER_ERROR;
 800aeda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aede:	e7f2      	b.n	800aec6 <LmHandlerPackageRegister+0x3e>
 800aee0:	2000338c 	.word	0x2000338c
 800aee4:	0800a949 	.word	0x0800a949
 800aee8:	0800aa79 	.word	0x0800aa79
 800aeec:	0800a82d 	.word	0x0800a82d
 800aef0:	20003388 	.word	0x20003388
 800aef4:	20003274 	.word	0x20003274

0800aef8 <LmHandlerInit>:
{
 800aef8:	b500      	push	{lr}
 800aefa:	b083      	sub	sp, #12
 800aefc:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800aefe:	4b15      	ldr	r3, [pc, #84]	; (800af54 <LmHandlerInit+0x5c>)
 800af00:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800af02:	4b15      	ldr	r3, [pc, #84]	; (800af58 <LmHandlerInit+0x60>)
 800af04:	4a15      	ldr	r2, [pc, #84]	; (800af5c <LmHandlerInit+0x64>)
 800af06:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800af08:	4a15      	ldr	r2, [pc, #84]	; (800af60 <LmHandlerInit+0x68>)
 800af0a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800af0c:	4a15      	ldr	r2, [pc, #84]	; (800af64 <LmHandlerInit+0x6c>)
 800af0e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800af10:	4a15      	ldr	r2, [pc, #84]	; (800af68 <LmHandlerInit+0x70>)
 800af12:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800af14:	6802      	ldr	r2, [r0, #0]
 800af16:	4b15      	ldr	r3, [pc, #84]	; (800af6c <LmHandlerInit+0x74>)
 800af18:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800af1a:	6842      	ldr	r2, [r0, #4]
 800af1c:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800af1e:	6882      	ldr	r2, [r0, #8]
 800af20:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800af22:	68c2      	ldr	r2, [r0, #12]
 800af24:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800af26:	4a12      	ldr	r2, [pc, #72]	; (800af70 <LmHandlerInit+0x78>)
 800af28:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800af2a:	6982      	ldr	r2, [r0, #24]
 800af2c:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800af2e:	4911      	ldr	r1, [pc, #68]	; (800af74 <LmHandlerInit+0x7c>)
 800af30:	2000      	movs	r0, #0
 800af32:	f7ff ffa9 	bl	800ae88 <LmHandlerPackageRegister>
 800af36:	b930      	cbnz	r0, 800af46 <LmHandlerInit+0x4e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800af38:	a801      	add	r0, sp, #4
 800af3a:	f000 fad3 	bl	800b4e4 <LmhpPackagesRegistrationInit>
 800af3e:	b928      	cbnz	r0, 800af4c <LmHandlerInit+0x54>
}
 800af40:	b003      	add	sp, #12
 800af42:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800af46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af4a:	e7f9      	b.n	800af40 <LmHandlerInit+0x48>
        return LORAMAC_HANDLER_ERROR;
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af50:	e7f6      	b.n	800af40 <LmHandlerInit+0x48>
 800af52:	bf00      	nop
 800af54:	20003388 	.word	0x20003388
 800af58:	200033d0 	.word	0x200033d0
 800af5c:	0800a779 	.word	0x0800a779
 800af60:	0800abc9 	.word	0x0800abc9
 800af64:	0800aff9 	.word	0x0800aff9
 800af68:	0800a725 	.word	0x0800a725
 800af6c:	200033b8 	.word	0x200033b8
 800af70:	0800fab1 	.word	0x0800fab1
 800af74:	2000008c 	.word	0x2000008c

0800af78 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800af78:	b161      	cbz	r1, 800af94 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800af7a:	b118      	cbz	r0, 800af84 <LmHandlerGetVersion+0xc>
 800af7c:	2801      	cmp	r0, #1
 800af7e:	d005      	beq.n	800af8c <LmHandlerGetVersion+0x14>
 800af80:	2000      	movs	r0, #0
 800af82:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800af84:	4a05      	ldr	r2, [pc, #20]	; (800af9c <LmHandlerGetVersion+0x24>)
 800af86:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800af88:	2000      	movs	r0, #0
            break;
 800af8a:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800af8c:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <LmHandlerGetVersion+0x28>)
 800af8e:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800af90:	2000      	movs	r0, #0
            break;
 800af92:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800af94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	01000300 	.word	0x01000300
 800afa0:	01010003 	.word	0x01010003

0800afa4 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800afa4:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800afa6:	f003 fcf5 	bl	800e994 <LoRaMacDeInitialization>
 800afaa:	b900      	cbnz	r0, 800afae <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800afac:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800afae:	f06f 0001 	mvn.w	r0, #1
 800afb2:	e7fb      	b.n	800afac <LmHandlerStop+0x8>

0800afb4 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800afb4:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800afb6:	f002 fe87 	bl	800dcc8 <LoRaMacHalt>
 800afba:	b900      	cbnz	r0, 800afbe <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800afbc:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800afbe:	f06f 0001 	mvn.w	r0, #1
 800afc2:	e7fb      	b.n	800afbc <LmHandlerHalt+0x8>

0800afc4 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800afc4:	b180      	cbz	r0, 800afe8 <LmHandlerGetTxPower+0x24>
{
 800afc6:	b510      	push	{r4, lr}
 800afc8:	b08a      	sub	sp, #40	; 0x28
 800afca:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800afcc:	2320      	movs	r3, #32
 800afce:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800afd2:	4668      	mov	r0, sp
 800afd4:	f002 ff0c 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
 800afd8:	b948      	cbnz	r0, 800afee <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800afda:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800afde:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800afe0:	4a04      	ldr	r2, [pc, #16]	; (800aff4 <LmHandlerGetTxPower+0x30>)
 800afe2:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800afe4:	b00a      	add	sp, #40	; 0x28
 800afe6:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800afec:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800afee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aff2:	e7f7      	b.n	800afe4 <LmHandlerGetTxPower+0x20>
 800aff4:	200033a0 	.word	0x200033a0

0800aff8 <MlmeConfirm>:
{
 800aff8:	b510      	push	{r4, lr}
 800affa:	b08a      	sub	sp, #40	; 0x28
 800affc:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800affe:	4b2c      	ldr	r3, [pc, #176]	; (800b0b0 <MlmeConfirm+0xb8>)
 800b000:	2200      	movs	r2, #0
 800b002:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800b004:	7842      	ldrb	r2, [r0, #1]
 800b006:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b008:	4b2a      	ldr	r3, [pc, #168]	; (800b0b4 <MlmeConfirm+0xbc>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	b10b      	cbz	r3, 800b014 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b010:	4827      	ldr	r0, [pc, #156]	; (800b0b0 <MlmeConfirm+0xb8>)
 800b012:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800b014:	4621      	mov	r1, r4
 800b016:	2002      	movs	r0, #2
 800b018:	f7ff fb3e 	bl	800a698 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800b01c:	7823      	ldrb	r3, [r4, #0]
 800b01e:	2b05      	cmp	r3, #5
 800b020:	d037      	beq.n	800b092 <MlmeConfirm+0x9a>
 800b022:	2b0c      	cmp	r3, #12
 800b024:	d03d      	beq.n	800b0a2 <MlmeConfirm+0xaa>
 800b026:	2b01      	cmp	r3, #1
 800b028:	d001      	beq.n	800b02e <MlmeConfirm+0x36>
}
 800b02a:	b00a      	add	sp, #40	; 0x28
 800b02c:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800b02e:	2306      	movs	r3, #6
 800b030:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800b034:	4668      	mov	r0, sp
 800b036:	f002 fedb 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800b03a:	9901      	ldr	r1, [sp, #4]
 800b03c:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <MlmeConfirm+0xc0>)
 800b03e:	79d8      	ldrb	r0, [r3, #7]
 800b040:	f007 fdc2 	bl	8012bc8 <SecureElementSetDevAddr>
 800b044:	b910      	cbnz	r0, 800b04c <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b046:	9a01      	ldr	r2, [sp, #4]
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <MlmeConfirm+0xc4>)
 800b04a:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800b04c:	4c1a      	ldr	r4, [pc, #104]	; (800b0b8 <MlmeConfirm+0xc0>)
 800b04e:	1d20      	adds	r0, r4, #4
 800b050:	f7ff fe06 	bl	800ac60 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800b054:	1d60      	adds	r0, r4, #5
 800b056:	f7ff ffb5 	bl	800afc4 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <MlmeConfirm+0xb8>)
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	b18b      	cbz	r3, 800b084 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800b060:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <MlmeConfirm+0xc0>)
 800b062:	22ff      	movs	r2, #255	; 0xff
 800b064:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800b066:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <MlmeConfirm+0xbc>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	b10b      	cbz	r3, 800b072 <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b06e:	4812      	ldr	r0, [pc, #72]	; (800b0b8 <MlmeConfirm+0xc0>)
 800b070:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b072:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <MlmeConfirm+0xb8>)
 800b074:	785b      	ldrb	r3, [r3, #1]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1d7      	bne.n	800b02a <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800b07a:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <MlmeConfirm+0xc0>)
 800b07c:	79d8      	ldrb	r0, [r3, #7]
 800b07e:	f007 fe71 	bl	8012d64 <SecureElementPrintSessionKeys>
            break;
 800b082:	e7d2      	b.n	800b02a <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b084:	2200      	movs	r2, #0
 800b086:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800b088:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <MlmeConfirm+0xc8>)
 800b08a:	7858      	ldrb	r0, [r3, #1]
 800b08c:	f7ff fc02 	bl	800a894 <LmHandlerRequestClass>
 800b090:	e7e9      	b.n	800b066 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800b092:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <MlmeConfirm+0xcc>)
 800b094:	2201      	movs	r2, #1
 800b096:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800b098:	7a22      	ldrb	r2, [r4, #8]
 800b09a:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800b09c:	7a62      	ldrb	r2, [r4, #9]
 800b09e:	74da      	strb	r2, [r3, #19]
            break;
 800b0a0:	e7c3      	b.n	800b02a <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b0a2:	7863      	ldrb	r3, [r4, #1]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0c0      	beq.n	800b02a <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800b0a8:	f7ff fbc0 	bl	800a82c <LmHandlerDeviceTimeReq>
}
 800b0ac:	e7bd      	b.n	800b02a <MlmeConfirm+0x32>
 800b0ae:	bf00      	nop
 800b0b0:	200000ac 	.word	0x200000ac
 800b0b4:	20003388 	.word	0x20003388
 800b0b8:	20000080 	.word	0x20000080
 800b0bc:	20003368 	.word	0x20003368
 800b0c0:	200033a0 	.word	0x200033a0
 800b0c4:	20000098 	.word	0x20000098

0800b0c8 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800b0cc:	f7ff ff72 	bl	800afb4 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	b148      	cbz	r0, 800b0e8 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800b0d4:	b92c      	cbnz	r4, 800b0e2 <LmHandlerNvmDataStore+0x1a>
 800b0d6:	4b18      	ldr	r3, [pc, #96]	; (800b138 <LmHandlerNvmDataStore+0x70>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	b10b      	cbz	r3, 800b0e2 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800b0de:	2001      	movs	r0, #1
 800b0e0:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	b00a      	add	sp, #40	; 0x28
 800b0e6:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800b0e8:	f004 fcea 	bl	800fac0 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800b0ec:	f110 0f02 	cmn.w	r0, #2
 800b0f0:	d012      	beq.n	800b118 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800b0f2:	b9d0      	cbnz	r0, 800b12a <LmHandlerNvmDataStore+0x62>
 800b0f4:	4b10      	ldr	r3, [pc, #64]	; (800b138 <LmHandlerNvmDataStore+0x70>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	b1cb      	cbz	r3, 800b130 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 800b0fc:	2326      	movs	r3, #38	; 0x26
 800b0fe:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b102:	4668      	mov	r0, sp
 800b104:	f002 fe74 	bl	800ddf0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800b108:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <LmHandlerNvmDataStore+0x70>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 800b112:	9801      	ldr	r0, [sp, #4]
 800b114:	4798      	blx	r3
 800b116:	e001      	b.n	800b11c <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800b118:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800b11c:	f004 fce0 	bl	800fae0 <NvmDataMgmtStoreEnd>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0d7      	beq.n	800b0d4 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b124:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b128:	e7db      	b.n	800b0e2 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b12a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b12e:	e7f5      	b.n	800b11c <LmHandlerNvmDataStore+0x54>
 800b130:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b134:	e7f2      	b.n	800b11c <LmHandlerNvmDataStore+0x54>
 800b136:	bf00      	nop
 800b138:	20003388 	.word	0x20003388

0800b13c <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800b13c:	4603      	mov	r3, r0
 800b13e:	b140      	cbz	r0, 800b152 <LmhpComplianceInit+0x16>
 800b140:	b139      	cbz	r1, 800b152 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800b142:	4807      	ldr	r0, [pc, #28]	; (800b160 <LmhpComplianceInit+0x24>)
 800b144:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <LmhpComplianceInit+0x28>)
 800b148:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800b14a:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 800b14c:	2201      	movs	r2, #1
 800b14e:	701a      	strb	r2, [r3, #0]
 800b150:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	4a02      	ldr	r2, [pc, #8]	; (800b160 <LmhpComplianceInit+0x24>)
 800b156:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800b158:	4a02      	ldr	r2, [pc, #8]	; (800b164 <LmhpComplianceInit+0x28>)
 800b15a:	7013      	strb	r3, [r2, #0]
    }
}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	2000340c 	.word	0x2000340c
 800b164:	200033e0 	.word	0x200033e0

0800b168 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800b168:	4b01      	ldr	r3, [pc, #4]	; (800b170 <LmhpComplianceIsInitialized+0x8>)
 800b16a:	7818      	ldrb	r0, [r3, #0]
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	200033e0 	.word	0x200033e0

0800b174 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800b174:	4b02      	ldr	r3, [pc, #8]	; (800b180 <LmhpComplianceIsRunning+0xc>)
 800b176:	7818      	ldrb	r0, [r3, #0]
 800b178:	b100      	cbz	r0, 800b17c <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800b17a:	7858      	ldrb	r0, [r3, #1]
}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	200033e0 	.word	0x200033e0

0800b184 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b12b      	cbz	r3, 800b196 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	b113      	cbz	r3, 800b196 <LmhpComplianceOnMcpsConfirm+0x12>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800b190:	7803      	ldrb	r3, [r0, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800b192:	2b01      	cmp	r3, #1
 800b194:	d000      	beq.n	800b198 <LmhpComplianceOnMcpsConfirm+0x14>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800b196:	4770      	bx	lr
        ( mcpsConfirm->AckReceived != 0 ) )
 800b198:	7903      	ldrb	r3, [r0, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0fb      	beq.n	800b196 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800b19e:	4a02      	ldr	r2, [pc, #8]	; (800b1a8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800b1a0:	8993      	ldrh	r3, [r2, #12]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	8193      	strh	r3, [r2, #12]
 800b1a6:	e7f6      	b.n	800b196 <LmhpComplianceOnMcpsConfirm+0x12>
 800b1a8:	200033e0 	.word	0x200033e0

0800b1ac <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800b1ac:	4b08      	ldr	r3, [pc, #32]	; (800b1d0 <LmhpComplianceOnMlmeConfirm+0x24>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	b12b      	cbz	r3, 800b1be <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <LmhpComplianceOnMlmeConfirm+0x24>)
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	b113      	cbz	r3, 800b1be <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800b1b8:	7803      	ldrb	r3, [r0, #0]
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	d000      	beq.n	800b1c0 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800b1be:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 800b1c0:	4b03      	ldr	r3, [pc, #12]	; (800b1d0 <LmhpComplianceOnMlmeConfirm+0x24>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800b1c6:	7a02      	ldrb	r2, [r0, #8]
 800b1c8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800b1ca:	7a42      	ldrb	r2, [r0, #9]
 800b1cc:	741a      	strb	r2, [r3, #16]
 800b1ce:	e7f6      	b.n	800b1be <LmhpComplianceOnMlmeConfirm+0x12>
 800b1d0:	200033e0 	.word	0x200033e0

0800b1d4 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800b1d4:	4770      	bx	lr
	...

0800b1d8 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 800b1d8:	4b26      	ldr	r3, [pc, #152]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d040      	beq.n	800b262 <LmhpComplianceTxProcess+0x8a>
    if( ComplianceTestState.IsRunning == false )
 800b1e0:	4b24      	ldr	r3, [pc, #144]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b1e2:	785b      	ldrb	r3, [r3, #1]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d03f      	beq.n	800b268 <LmhpComplianceTxProcess+0x90>
{
 800b1e8:	b500      	push	{lr}
 800b1ea:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 800b1ec:	4b21      	ldr	r3, [pc, #132]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b1ee:	7b9b      	ldrb	r3, [r3, #14]
 800b1f0:	b323      	cbz	r3, 800b23c <LmhpComplianceTxProcess+0x64>
        ComplianceTestState.LinkCheck = false;
 800b1f2:	4b20      	ldr	r3, [pc, #128]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800b1fc:	689a      	ldr	r2, [r3, #8]
 800b1fe:	2105      	movs	r1, #5
 800b200:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800b202:	7bd9      	ldrb	r1, [r3, #15]
 800b204:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800b206:	7c19      	ldrb	r1, [r3, #16]
 800b208:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 800b20a:	2201      	movs	r2, #1
 800b20c:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800b20e:	23e0      	movs	r3, #224	; 0xe0
 800b210:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 800b214:	4b17      	ldr	r3, [pc, #92]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b216:	799a      	ldrb	r2, [r3, #6]
    LmHandlerAppData_t appData =
 800b218:	f88d 2001 	strb.w	r2, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800b21c:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800b21e:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 800b220:	4815      	ldr	r0, [pc, #84]	; (800b278 <LmhpComplianceTxProcess+0xa0>)
 800b222:	f009 ff8f 	bl	8015144 <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800b226:	4b15      	ldr	r3, [pc, #84]	; (800b27c <LmhpComplianceTxProcess+0xa4>)
 800b228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22a:	b1fb      	cbz	r3, 800b26c <LmhpComplianceTxProcess+0x94>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800b22c:	2201      	movs	r2, #1
 800b22e:	4911      	ldr	r1, [pc, #68]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b230:	78c9      	ldrb	r1, [r1, #3]
 800b232:	4668      	mov	r0, sp
 800b234:	4798      	blx	r3
}
 800b236:	b003      	add	sp, #12
 800b238:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( ComplianceTestState.State )
 800b23c:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b23e:	789b      	ldrb	r3, [r3, #2]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d005      	beq.n	800b250 <LmhpComplianceTxProcess+0x78>
 800b244:	2b04      	cmp	r3, #4
 800b246:	d1e2      	bne.n	800b20e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.State = 1;
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b24a:	2201      	movs	r2, #1
 800b24c:	709a      	strb	r2, [r3, #2]
                break;
 800b24e:	e7de      	b.n	800b20e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.DataBufferSize = 2;
 800b250:	4b08      	ldr	r3, [pc, #32]	; (800b274 <LmhpComplianceTxProcess+0x9c>)
 800b252:	2202      	movs	r2, #2
 800b254:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800b256:	899a      	ldrh	r2, [r3, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	0a11      	lsrs	r1, r2, #8
 800b25c:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800b25e:	705a      	strb	r2, [r3, #1]
                break;
 800b260:	e7d5      	b.n	800b20e <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 800b262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b266:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800b268:	2000      	movs	r0, #0
}
 800b26a:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b270:	e7e1      	b.n	800b236 <LmhpComplianceTxProcess+0x5e>
 800b272:	bf00      	nop
 800b274:	200033e0 	.word	0x200033e0
 800b278:	200033f4 	.word	0x200033f4
 800b27c:	200000c8 	.word	0x200000c8

0800b280 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800b280:	4b8f      	ldr	r3, [pc, #572]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 8119 	beq.w	800b4bc <LmhpComplianceOnMcpsIndication+0x23c>
    if( mcpsIndication->RxData == false )
 800b28a:	7b43      	ldrb	r3, [r0, #13]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8115 	beq.w	800b4bc <LmhpComplianceOnMcpsIndication+0x23c>
    if( ( ComplianceTestState.IsRunning == true ) &&
 800b292:	4b8b      	ldr	r3, [pc, #556]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b294:	785b      	ldrb	r3, [r3, #1]
 800b296:	b12b      	cbz	r3, 800b2a4 <LmhpComplianceOnMcpsIndication+0x24>
        ( mcpsIndication->AckReceived == 0 ) )
 800b298:	7b82      	ldrb	r2, [r0, #14]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800b29a:	b91a      	cbnz	r2, 800b2a4 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 800b29c:	4988      	ldr	r1, [pc, #544]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b29e:	898a      	ldrh	r2, [r1, #12]
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800b2a4:	78c2      	ldrb	r2, [r0, #3]
 800b2a6:	2ae0      	cmp	r2, #224	; 0xe0
 800b2a8:	f040 8108 	bne.w	800b4bc <LmhpComplianceOnMcpsIndication+0x23c>
{
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	b08c      	sub	sp, #48	; 0x30
    if( ComplianceTestState.IsRunning == false )
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d140      	bne.n	800b336 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800b2b4:	7b03      	ldrb	r3, [r0, #12]
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d001      	beq.n	800b2be <LmhpComplianceOnMcpsIndication+0x3e>
}
 800b2ba:	b00c      	add	sp, #48	; 0x30
 800b2bc:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800b2be:	6883      	ldr	r3, [r0, #8]
 800b2c0:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800b2c2:	2a01      	cmp	r2, #1
 800b2c4:	d1f9      	bne.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800b2c6:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800b2c8:	2a01      	cmp	r2, #1
 800b2ca:	d1f6      	bne.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800b2cc:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800b2ce:	2a01      	cmp	r2, #1
 800b2d0:	d1f3      	bne.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800b2d2:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d1f0      	bne.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 800b2d8:	4b79      	ldr	r3, [pc, #484]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b2da:	2400      	movs	r4, #0
 800b2dc:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800b2de:	22e0      	movs	r2, #224	; 0xe0
 800b2e0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800b2e6:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800b2e8:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800b2ea:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800b2ec:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800b2f2:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 800b2f4:	2304      	movs	r3, #4
 800b2f6:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 800b2fa:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b2fe:	a802      	add	r0, sp, #8
 800b300:	f002 fed0 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 800b304:	4620      	mov	r0, r4
 800b306:	f003 fb27 	bl	800e958 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800b30a:	4b6e      	ldr	r3, [pc, #440]	; (800b4c4 <LmhpComplianceOnMcpsIndication+0x244>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	b103      	cbz	r3, 800b314 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 800b312:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800b314:	4c6c      	ldr	r4, [pc, #432]	; (800b4c8 <LmhpComplianceOnMcpsIndication+0x248>)
 800b316:	2200      	movs	r2, #0
 800b318:	9200      	str	r2, [sp, #0]
 800b31a:	4b6c      	ldr	r3, [pc, #432]	; (800b4cc <LmhpComplianceOnMcpsIndication+0x24c>)
 800b31c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b320:	4620      	mov	r0, r4
 800b322:	f009 fe57 	bl	8014fd4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800b326:	f241 3188 	movw	r1, #5000	; 0x1388
 800b32a:	4620      	mov	r0, r4
 800b32c:	f009 ff50 	bl	80151d0 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800b330:	f7ff ff52 	bl	800b1d8 <LmhpComplianceTxProcess>
 800b334:	e7c1      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800b336:	6882      	ldr	r2, [r0, #8]
 800b338:	7813      	ldrb	r3, [r2, #0]
 800b33a:	4961      	ldr	r1, [pc, #388]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b33c:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 800b33e:	2b0a      	cmp	r3, #10
 800b340:	d8bb      	bhi.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
 800b342:	e8df f003 	tbb	[pc, r3]
 800b346:	2206      	.short	0x2206
 800b348:	47312b26 	.word	0x47312b26
 800b34c:	a7a0714e 	.word	0xa7a0714e
 800b350:	b1          	.byte	0xb1
 800b351:	00          	.byte	0x00
                    TimerStop( &ComplianceTxNextPacketTimer );
 800b352:	485d      	ldr	r0, [pc, #372]	; (800b4c8 <LmhpComplianceOnMcpsIndication+0x248>)
 800b354:	f009 fe9c 	bl	8015090 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800b358:	4b59      	ldr	r3, [pc, #356]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800b35e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800b360:	2304      	movs	r3, #4
 800b362:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800b366:	4c57      	ldr	r4, [pc, #348]	; (800b4c4 <LmhpComplianceOnMcpsIndication+0x244>)
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800b370:	a802      	add	r0, sp, #8
 800b372:	f002 fe97 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	7858      	ldrb	r0, [r3, #1]
 800b37a:	f003 faed 	bl	800e958 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d099      	beq.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpComplianceParams->StartPeripherals( );
 800b386:	4798      	blx	r3
                break;
 800b388:	e797      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = 2;
 800b38a:	4b4d      	ldr	r3, [pc, #308]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b38c:	2202      	movs	r2, #2
 800b38e:	719a      	strb	r2, [r3, #6]
                break;
 800b390:	e793      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = true;
 800b392:	4b4b      	ldr	r3, [pc, #300]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b394:	2201      	movs	r2, #1
 800b396:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800b398:	709a      	strb	r2, [r3, #2]
                break;
 800b39a:	e78e      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = false;
 800b39c:	4b48      	ldr	r3, [pc, #288]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	709a      	strb	r2, [r3, #2]
                break;
 800b3a6:	e788      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800b3a8:	7b01      	ldrb	r1, [r0, #12]
 800b3aa:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b3ac:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 800b3ae:	689c      	ldr	r4, [r3, #8]
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	7023      	strb	r3, [r4, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4a42      	ldr	r2, [pc, #264]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b3b8:	7952      	ldrb	r2, [r2, #5]
 800b3ba:	428a      	cmp	r2, r1
 800b3bc:	bf28      	it	cs
 800b3be:	460a      	movcs	r2, r1
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	f67f af7a 	bls.w	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800b3c6:	6882      	ldr	r2, [r0, #8]
 800b3c8:	5cd2      	ldrb	r2, [r2, r3]
 800b3ca:	3201      	adds	r2, #1
 800b3cc:	54e2      	strb	r2, [r4, r3]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	e7f0      	b.n	800b3b6 <LmhpComplianceOnMcpsIndication+0x136>
                    mlmeReq.Type = MLME_LINK_CHECK;
 800b3d4:	2305      	movs	r3, #5
 800b3d6:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800b3da:	a802      	add	r0, sp, #8
 800b3dc:	f003 f920 	bl	800e620 <LoRaMacMlmeRequest>
                break;
 800b3e0:	e76b      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800b3e2:	4839      	ldr	r0, [pc, #228]	; (800b4c8 <LmhpComplianceOnMcpsIndication+0x248>)
 800b3e4:	f009 fe54 	bl	8015090 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800b3e8:	4b35      	ldr	r3, [pc, #212]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800b3ee:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800b3f0:	2304      	movs	r3, #4
 800b3f2:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800b3f6:	4c33      	ldr	r4, [pc, #204]	; (800b4c4 <LmhpComplianceOnMcpsIndication+0x244>)
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800b400:	a802      	add	r0, sp, #8
 800b402:	f002 fe4f 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	7858      	ldrb	r0, [r3, #1]
 800b40a:	f003 faa5 	bl	800e958 <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	b103      	cbz	r3, 800b416 <LmhpComplianceOnMcpsIndication+0x196>
                        LmhpComplianceParams->StartPeripherals( );
 800b414:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800b416:	4b2e      	ldr	r3, [pc, #184]	; (800b4d0 <LmhpComplianceOnMcpsIndication+0x250>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f43f af4d 	beq.w	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800b420:	2101      	movs	r1, #1
 800b422:	2002      	movs	r0, #2
 800b424:	4798      	blx	r3
                break;
 800b426:	e748      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                    if( mcpsIndication->BufferSize == 3 )
 800b428:	7b03      	ldrb	r3, [r0, #12]
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d008      	beq.n	800b440 <LmhpComplianceOnMcpsIndication+0x1c0>
                    else if( mcpsIndication->BufferSize == 7 )
 800b42e:	2b07      	cmp	r3, #7
 800b430:	d010      	beq.n	800b454 <LmhpComplianceOnMcpsIndication+0x1d4>
                    LoRaMacMlmeRequest( &mlmeReq );
 800b432:	a802      	add	r0, sp, #8
 800b434:	f003 f8f4 	bl	800e620 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800b438:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x240>)
 800b43a:	2201      	movs	r2, #1
 800b43c:	709a      	strb	r2, [r3, #2]
                break;
 800b43e:	e73c      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                        mlmeReq.Type = MLME_TXCW;
 800b440:	2306      	movs	r3, #6
 800b442:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800b446:	7851      	ldrb	r1, [r2, #1]
 800b448:	7893      	ldrb	r3, [r2, #2]
 800b44a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b44e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b452:	e7ee      	b.n	800b432 <LmhpComplianceOnMcpsIndication+0x1b2>
                        mlmeReq.Type = MLME_TXCW_1;
 800b454:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800b458:	7851      	ldrb	r1, [r2, #1]
 800b45a:	7893      	ldrb	r3, [r2, #2]
 800b45c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b460:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800b464:	78d1      	ldrb	r1, [r2, #3]
 800b466:	7913      	ldrb	r3, [r2, #4]
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b46e:	7952      	ldrb	r2, [r2, #5]
 800b470:	4313      	orrs	r3, r2
 800b472:	2264      	movs	r2, #100	; 0x64
 800b474:	fb02 f303 	mul.w	r3, r2, r3
 800b478:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800b47a:	6883      	ldr	r3, [r0, #8]
 800b47c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b480:	f88d 3014 	strb.w	r3, [sp, #20]
 800b484:	e7d5      	b.n	800b432 <LmhpComplianceOnMcpsIndication+0x1b2>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 800b486:	230a      	movs	r3, #10
 800b488:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800b48c:	a802      	add	r0, sp, #8
 800b48e:	f003 f8c7 	bl	800e620 <LoRaMacMlmeRequest>
                break;
 800b492:	e712      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                    mibReq.Type = MIB_DEVICE_CLASS;
 800b494:	2300      	movs	r3, #0
 800b496:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800b49a:	7853      	ldrb	r3, [r2, #1]
 800b49c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800b4a0:	a802      	add	r0, sp, #8
 800b4a2:	f002 fdff 	bl	800e0a4 <LoRaMacMibSetRequestConfirm>
                break;
 800b4a6:	e708      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800b4a8:	230d      	movs	r3, #13
 800b4aa:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800b4ae:	7853      	ldrb	r3, [r2, #1]
 800b4b0:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 800b4b4:	a802      	add	r0, sp, #8
 800b4b6:	f003 f8b3 	bl	800e620 <LoRaMacMlmeRequest>
                break;
 800b4ba:	e6fe      	b.n	800b2ba <LmhpComplianceOnMcpsIndication+0x3a>
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	200033e0 	.word	0x200033e0
 800b4c4:	2000340c 	.word	0x2000340c
 800b4c8:	200033f4 	.word	0x200033f4
 800b4cc:	0800b4d5 	.word	0x0800b4d5
 800b4d0:	200000c8 	.word	0x200000c8

0800b4d4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800b4d4:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 800b4d6:	f7ff fe7f 	bl	800b1d8 <LmhpComplianceTxProcess>
}
 800b4da:	bd08      	pop	{r3, pc}

0800b4dc <LmhpCompliancePackageFactory>:
}
 800b4dc:	4800      	ldr	r0, [pc, #0]	; (800b4e0 <LmhpCompliancePackageFactory+0x4>)
 800b4de:	4770      	bx	lr
 800b4e0:	200000c8 	.word	0x200000c8

0800b4e4 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	4770      	bx	lr

0800b4e8 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ec:	4770      	bx	lr
	...

0800b4f0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b4f0:	4b07      	ldr	r3, [pc, #28]	; (800b510 <UpdateRxSlotIdleState+0x20>)
 800b4f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d004      	beq.n	800b504 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b4fa:	4b06      	ldr	r3, [pc, #24]	; (800b514 <UpdateRxSlotIdleState+0x24>)
 800b4fc:	2206      	movs	r2, #6
 800b4fe:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 800b502:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b504:	4b03      	ldr	r3, [pc, #12]	; (800b514 <UpdateRxSlotIdleState+0x24>)
 800b506:	2202      	movs	r2, #2
 800b508:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20008000 	.word	0x20008000
 800b514:	20003414 	.word	0x20003414

0800b518 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800b518:	4b01      	ldr	r3, [pc, #4]	; (800b520 <LoRaMacEnableRequests+0x8>)
 800b51a:	f883 0482 	strb.w	r0, [r3, #1154]	; 0x482
}
 800b51e:	4770      	bx	lr
 800b520:	20003414 	.word	0x20003414

0800b524 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800b524:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b526:	4b15      	ldr	r3, [pc, #84]	; (800b57c <LoRaMacHandleIndicationEvents+0x58>)
 800b528:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b52c:	f013 0f08 	tst.w	r3, #8
 800b530:	d00e      	beq.n	800b550 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b532:	4812      	ldr	r0, [pc, #72]	; (800b57c <LoRaMacHandleIndicationEvents+0x58>)
 800b534:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800b538:	f36f 03c3 	bfc	r3, #3, #1
 800b53c:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b540:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800b54a:	f200 405c 	addw	r0, r0, #1116	; 0x45c
 800b54e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <LoRaMacHandleIndicationEvents+0x58>)
 800b552:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b556:	f013 0f02 	tst.w	r3, #2
 800b55a:	d00e      	beq.n	800b57a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b55c:	4807      	ldr	r0, [pc, #28]	; (800b57c <LoRaMacHandleIndicationEvents+0x58>)
 800b55e:	f890 3481 	ldrb.w	r3, [r0, #1153]	; 0x481
 800b562:	f36f 0341 	bfc	r3, #1, #1
 800b566:	f880 3481 	strb.w	r3, [r0, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b56a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	f200 417c 	addw	r1, r0, #1148	; 0x47c
 800b574:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800b578:	4798      	blx	r3
    }
}
 800b57a:	bd08      	pop	{r3, pc}
 800b57c:	20003414 	.word	0x20003414

0800b580 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <LoRaMacCheckForRxAbort+0x20>)
 800b582:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b586:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b58a:	d008      	beq.n	800b59e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b58c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b590:	4a03      	ldr	r2, [pc, #12]	; (800b5a0 <LoRaMacCheckForRxAbort+0x20>)
 800b592:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b596:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800b59a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800b59e:	4770      	bx	lr
 800b5a0:	20003414 	.word	0x20003414

0800b5a4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b5a4:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <CalculateBackOff+0x1c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a8:	b94b      	cbnz	r3, 800b5be <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b5aa:	4a05      	ldr	r2, [pc, #20]	; (800b5c0 <CalculateBackOff+0x1c>)
 800b5ac:	f8b2 311e 	ldrh.w	r3, [r2, #286]	; 0x11e
 800b5b0:	4904      	ldr	r1, [pc, #16]	; (800b5c4 <CalculateBackOff+0x20>)
 800b5b2:	f8d1 1414 	ldr.w	r1, [r1, #1044]	; 0x414
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800b5be:	4770      	bx	lr
 800b5c0:	20008000 	.word	0x20008000
 800b5c4:	20003414 	.word	0x20003414

0800b5c8 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	4684      	mov	ip, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b5d0:	4b06      	ldr	r3, [pc, #24]	; (800b5ec <SetTxContinuousWave1+0x24>)
 800b5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d4:	4662      	mov	r2, ip
 800b5d6:	b249      	sxtb	r1, r1
 800b5d8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b5da:	4a05      	ldr	r2, [pc, #20]	; (800b5f0 <SetTxContinuousWave1+0x28>)
 800b5dc:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800b5e0:	f043 0302 	orr.w	r3, r3, #2
 800b5e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	bd08      	pop	{r3, pc}
 800b5ec:	08016690 	.word	0x08016690
 800b5f0:	20003414 	.word	0x20003414

0800b5f4 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	b1f8      	cbz	r0, 800b638 <DetermineFrameType+0x44>
 800b5f8:	b301      	cbz	r1, 800b63c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b5fa:	7b03      	ldrb	r3, [r0, #12]
 800b5fc:	f013 030f 	ands.w	r3, r3, #15
 800b600:	d005      	beq.n	800b60e <DetermineFrameType+0x1a>
 800b602:	f890 0020 	ldrb.w	r0, [r0, #32]
 800b606:	b110      	cbz	r0, 800b60e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800b608:	2000      	movs	r0, #0
 800b60a:	7008      	strb	r0, [r1, #0]
 800b60c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800b60e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800b612:	b910      	cbnz	r0, 800b61a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800b614:	2301      	movs	r3, #1
 800b616:	700b      	strb	r3, [r1, #0]
 800b618:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800b61a:	b92b      	cbnz	r3, 800b628 <DetermineFrameType+0x34>
 800b61c:	f892 0020 	ldrb.w	r0, [r2, #32]
 800b620:	b910      	cbnz	r0, 800b628 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800b622:	2302      	movs	r3, #2
 800b624:	700b      	strb	r3, [r1, #0]
 800b626:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800b628:	b953      	cbnz	r3, 800b640 <DetermineFrameType+0x4c>
 800b62a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b62e:	b14a      	cbz	r2, 800b644 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800b630:	2203      	movs	r2, #3
 800b632:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800b634:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800b636:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b638:	2003      	movs	r0, #3
 800b63a:	4770      	bx	lr
 800b63c:	2003      	movs	r0, #3
 800b63e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800b640:	2018      	movs	r0, #24
 800b642:	4770      	bx	lr
 800b644:	2018      	movs	r0, #24
}
 800b646:	4770      	bx	lr

0800b648 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800b648:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <CheckRetransUnconfirmedUplink+0x40>)
 800b64a:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800b64e:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <CheckRetransUnconfirmedUplink+0x44>)
 800b650:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 800b654:	429a      	cmp	r2, r3
 800b656:	d20f      	bcs.n	800b678 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <CheckRetransUnconfirmedUplink+0x40>)
 800b65a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b65e:	f013 0f02 	tst.w	r3, #2
 800b662:	d00b      	beq.n	800b67c <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b664:	4b09      	ldr	r3, [pc, #36]	; (800b68c <CheckRetransUnconfirmedUplink+0x44>)
 800b666:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b66a:	b14b      	cbz	r3, 800b680 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <CheckRetransUnconfirmedUplink+0x40>)
 800b66e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800b672:	b13b      	cbz	r3, 800b684 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 800b674:	2000      	movs	r0, #0
 800b676:	4770      	bx	lr
        return true;
 800b678:	2001      	movs	r0, #1
 800b67a:	4770      	bx	lr
    return false;
 800b67c:	2000      	movs	r0, #0
 800b67e:	4770      	bx	lr
            return true;
 800b680:	2001      	movs	r0, #1
 800b682:	4770      	bx	lr
                return true;
 800b684:	2001      	movs	r0, #1
}
 800b686:	4770      	bx	lr
 800b688:	20003414 	.word	0x20003414
 800b68c:	20008000 	.word	0x20008000

0800b690 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <CheckRetransConfirmedUplink+0x2c>)
 800b692:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 800b696:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d209      	bcs.n	800b6b2 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <CheckRetransConfirmedUplink+0x2c>)
 800b6a0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b6a4:	f013 0f02 	tst.w	r3, #2
 800b6a8:	d005      	beq.n	800b6b6 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800b6aa:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <CheckRetransConfirmedUplink+0x2c>)
 800b6ac:	f893 0438 	ldrb.w	r0, [r3, #1080]	; 0x438
 800b6b0:	4770      	bx	lr
        return true;
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 800b6b6:	2000      	movs	r0, #0
}
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	20003414 	.word	0x20003414

0800b6c0 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b6c0:	4b11      	ldr	r3, [pc, #68]	; (800b708 <StopRetransmission+0x48>)
 800b6c2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800b6c6:	f013 0f02 	tst.w	r3, #2
 800b6ca:	d004      	beq.n	800b6d6 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b6cc:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <StopRetransmission+0x48>)
 800b6ce:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d907      	bls.n	800b6e6 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b6d6:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <StopRetransmission+0x4c>)
 800b6d8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b6dc:	b11b      	cbz	r3, 800b6e6 <StopRetransmission+0x26>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800b6de:	4a0b      	ldr	r2, [pc, #44]	; (800b70c <StopRetransmission+0x4c>)
 800b6e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800b6e6:	4b08      	ldr	r3, [pc, #32]	; (800b708 <StopRetransmission+0x48>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 800b6ee:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800b6f2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b6f6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b6fa:	f022 0202 	bic.w	r2, r2, #2
 800b6fe:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800b702:	2001      	movs	r0, #1
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20003414 	.word	0x20003414
 800b70c:	20008000 	.word	0x20008000

0800b710 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800b710:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b712:	4b04      	ldr	r3, [pc, #16]	; (800b724 <OnMacProcessNotify+0x14>)
 800b714:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b718:	b113      	cbz	r3, 800b720 <OnMacProcessNotify+0x10>
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	b103      	cbz	r3, 800b720 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b71e:	4798      	blx	r3
    }
}
 800b720:	bd08      	pop	{r3, pc}
 800b722:	bf00      	nop
 800b724:	20003414 	.word	0x20003414

0800b728 <OnRadioRxError>:
{
 800b728:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800b72a:	4a04      	ldr	r2, [pc, #16]	; (800b73c <OnRadioRxError+0x14>)
 800b72c:	7813      	ldrb	r3, [r2, #0]
 800b72e:	f043 0302 	orr.w	r3, r3, #2
 800b732:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800b734:	f7ff ffec 	bl	800b710 <OnMacProcessNotify>
}
 800b738:	bd08      	pop	{r3, pc}
 800b73a:	bf00      	nop
 800b73c:	20003410 	.word	0x20003410

0800b740 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800b740:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800b742:	4b04      	ldr	r3, [pc, #16]	; (800b754 <CallNvmDataChangeCallback+0x14>)
 800b744:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b748:	b113      	cbz	r3, 800b750 <CallNvmDataChangeCallback+0x10>
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	b103      	cbz	r3, 800b750 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800b74e:	4798      	blx	r3
    }
}
 800b750:	bd08      	pop	{r3, pc}
 800b752:	bf00      	nop
 800b754:	20003414 	.word	0x20003414

0800b758 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800b758:	4b04      	ldr	r3, [pc, #16]	; (800b76c <IsRequestPending+0x14>)
 800b75a:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
 800b75e:	f010 0005 	ands.w	r0, r0, #5
 800b762:	d100      	bne.n	800b766 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800b764:	4770      	bx	lr
        return 1;
 800b766:	2001      	movs	r0, #1
 800b768:	e7fc      	b.n	800b764 <IsRequestPending+0xc>
 800b76a:	bf00      	nop
 800b76c:	20003414 	.word	0x20003414

0800b770 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800b770:	4a13      	ldr	r2, [pc, #76]	; (800b7c0 <AckTimeoutRetriesProcess+0x50>)
 800b772:	f892 340e 	ldrb.w	r3, [r2, #1038]	; 0x40e
 800b776:	f892 240d 	ldrb.w	r2, [r2, #1037]	; 0x40d
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d207      	bcs.n	800b78e <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 800b77e:	3301      	adds	r3, #1
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4a0f      	ldr	r2, [pc, #60]	; (800b7c0 <AckTimeoutRetriesProcess+0x50>)
 800b784:	f882 340e 	strb.w	r3, [r2, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800b788:	f013 0f01 	tst.w	r3, #1
 800b78c:	d100      	bne.n	800b790 <AckTimeoutRetriesProcess+0x20>
 800b78e:	4770      	bx	lr
{
 800b790:	b510      	push	{r4, lr}
 800b792:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b794:	2322      	movs	r3, #34	; 0x22
 800b796:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b79a:	4c0a      	ldr	r4, [pc, #40]	; (800b7c4 <AckTimeoutRetriesProcess+0x54>)
 800b79c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800b7a0:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b7a4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
 800b7a8:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b7ac:	a902      	add	r1, sp, #8
 800b7ae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b7b2:	f004 f9a9 	bl	800fb08 <RegionGetPhyParam>
 800b7b6:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800b7b8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
}
 800b7bc:	b004      	add	sp, #16
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	20003414 	.word	0x20003414
 800b7c4:	20008000 	.word	0x20008000

0800b7c8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800b7c8:	b500      	push	{lr}
 800b7ca:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b7cc:	4b0d      	ldr	r3, [pc, #52]	; (800b804 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b7ce:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b7d2:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800b7d6:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b7da:	220d      	movs	r2, #13
 800b7dc:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800b7e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b7e4:	b113      	cbz	r3, 800b7ec <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b7e6:	230e      	movs	r3, #14
 800b7e8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b7ec:	a902      	add	r1, sp, #8
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800b7f0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b7f4:	f004 f988 	bl	800fb08 <RegionGetPhyParam>
 800b7f8:	9001      	str	r0, [sp, #4]
}
 800b7fa:	b2c0      	uxtb	r0, r0
 800b7fc:	b005      	add	sp, #20
 800b7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b802:	bf00      	nop
 800b804:	20008000 	.word	0x20008000

0800b808 <ValidatePayloadLength>:
{
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4605      	mov	r5, r0
 800b80c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b80e:	4608      	mov	r0, r1
 800b810:	f7ff ffda 	bl	800b7c8 <GetMaxAppPayloadWithoutFOptsLength>
 800b814:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800b816:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800b818:	4293      	cmp	r3, r2
 800b81a:	d303      	bcc.n	800b824 <ValidatePayloadLength+0x1c>
 800b81c:	2aff      	cmp	r2, #255	; 0xff
 800b81e:	d903      	bls.n	800b828 <ValidatePayloadLength+0x20>
    return false;
 800b820:	2000      	movs	r0, #0
 800b822:	e000      	b.n	800b826 <ValidatePayloadLength+0x1e>
 800b824:	2000      	movs	r0, #0
}
 800b826:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800b828:	2001      	movs	r0, #1
 800b82a:	e7fc      	b.n	800b826 <ValidatePayloadLength+0x1e>

0800b82c <ProcessRadioTxDone>:
{
 800b82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b82e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b830:	4b40      	ldr	r3, [pc, #256]	; (800b934 <ProcessRadioTxDone+0x108>)
 800b832:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b836:	2b02      	cmp	r3, #2
 800b838:	d002      	beq.n	800b840 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800b83a:	4b3f      	ldr	r3, [pc, #252]	; (800b938 <ProcessRadioTxDone+0x10c>)
 800b83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b840:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b844:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800b846:	f009 fbe3 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 800b84a:	4b3c      	ldr	r3, [pc, #240]	; (800b93c <ProcessRadioTxDone+0x110>)
 800b84c:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800b84e:	4c3c      	ldr	r4, [pc, #240]	; (800b940 <ProcessRadioTxDone+0x114>)
 800b850:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800b854:	1a2d      	subs	r5, r5, r0
 800b856:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800b85a:	4429      	add	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	f009 fcb7 	bl	80151d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800b862:	4630      	mov	r0, r6
 800b864:	f009 fc6e 	bl	8015144 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800b868:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b86c:	f504 7466 	add.w	r4, r4, #920	; 0x398
 800b870:	4429      	add	r1, r5
 800b872:	4620      	mov	r0, r4
 800b874:	f009 fcac 	bl	80151d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800b878:	4620      	mov	r0, r4
 800b87a:	f009 fc63 	bl	8015144 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b87e:	f387 8810 	msr	PRIMASK, r7
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800b882:	4b2c      	ldr	r3, [pc, #176]	; (800b934 <ProcessRadioTxDone+0x108>)
 800b884:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d004      	beq.n	800b896 <ProcessRadioTxDone+0x6a>
 800b88c:	f5a4 7366 	sub.w	r3, r4, #920	; 0x398
 800b890:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b894:	b1ab      	cbz	r3, 800b8c2 <ProcessRadioTxDone+0x96>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800b896:	2316      	movs	r3, #22
 800b898:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b89c:	a90a      	add	r1, sp, #40	; 0x28
 800b89e:	4b25      	ldr	r3, [pc, #148]	; (800b934 <ProcessRadioTxDone+0x108>)
 800b8a0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b8a4:	f004 f930 	bl	800fb08 <RegionGetPhyParam>
 800b8a8:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b8aa:	4c25      	ldr	r4, [pc, #148]	; (800b940 <ProcessRadioTxDone+0x114>)
 800b8ac:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b8b0:	f504 747d 	add.w	r4, r4, #1012	; 0x3f4
 800b8b4:	4401      	add	r1, r0
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f009 fc8a 	bl	80151d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f009 fc41 	bl	8015144 <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b8c2:	4b1e      	ldr	r3, [pc, #120]	; (800b93c <ProcessRadioTxDone+0x110>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4c1b      	ldr	r4, [pc, #108]	; (800b934 <ProcessRadioTxDone+0x108>)
 800b8c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800b8ca:	4f1d      	ldr	r7, [pc, #116]	; (800b940 <ProcessRadioTxDone+0x114>)
 800b8cc:	f897 2411 	ldrb.w	r2, [r7, #1041]	; 0x411
 800b8d0:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b8d4:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b8d6:	ae0c      	add	r6, sp, #48	; 0x30
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f009 fb0d 	bl	8014ef8 <SysTimeGetMcuTime>
 800b8de:	ad02      	add	r5, sp, #8
 800b8e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800b8ea:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	f009 fa9f 	bl	8014e32 <SysTimeSub>
 800b8f4:	ab07      	add	r3, sp, #28
 800b8f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b8fa:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b8fe:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800b902:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800b904:	2301      	movs	r3, #1
 800b906:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b90a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800b90e:	b90b      	cbnz	r3, 800b914 <ProcessRadioTxDone+0xe8>
        txDone.Joined  = false;
 800b910:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b914:	a904      	add	r1, sp, #16
 800b916:	4b07      	ldr	r3, [pc, #28]	; (800b934 <ProcessRadioTxDone+0x108>)
 800b918:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b91c:	f004 f90c 	bl	800fb38 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <ProcessRadioTxDone+0x114>)
 800b922:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b926:	b91b      	cbnz	r3, 800b930 <ProcessRadioTxDone+0x104>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <ProcessRadioTxDone+0x114>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
}
 800b930:	b00f      	add	sp, #60	; 0x3c
 800b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b934:	20008000 	.word	0x20008000
 800b938:	08016690 	.word	0x08016690
 800b93c:	2000392c 	.word	0x2000392c
 800b940:	20003414 	.word	0x20003414

0800b944 <OnAckTimeoutTimerEvent>:
{
 800b944:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800b946:	4c0d      	ldr	r4, [pc, #52]	; (800b97c <OnAckTimeoutTimerEvent+0x38>)
 800b948:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800b94c:	f009 fba0 	bl	8015090 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800b950:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 800b954:	b113      	cbz	r3, 800b95c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800b956:	2201      	movs	r2, #1
 800b958:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b95c:	4b08      	ldr	r3, [pc, #32]	; (800b980 <OnAckTimeoutTimerEvent+0x3c>)
 800b95e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b962:	2b02      	cmp	r3, #2
 800b964:	d002      	beq.n	800b96c <OnAckTimeoutTimerEvent+0x28>
    OnMacProcessNotify( );
 800b966:	f7ff fed3 	bl	800b710 <OnMacProcessNotify>
}
 800b96a:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b96c:	4a03      	ldr	r2, [pc, #12]	; (800b97c <OnAckTimeoutTimerEvent+0x38>)
 800b96e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800b972:	f043 0310 	orr.w	r3, r3, #16
 800b976:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800b97a:	e7f4      	b.n	800b966 <OnAckTimeoutTimerEvent+0x22>
 800b97c:	20003414 	.word	0x20003414
 800b980:	20008000 	.word	0x20008000

0800b984 <PrepareRxDoneAbort>:
{
 800b984:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b986:	4b0e      	ldr	r3, [pc, #56]	; (800b9c0 <PrepareRxDoneAbort+0x3c>)
 800b988:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b98c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b990:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800b994:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800b998:	b973      	cbnz	r3, 800b9b8 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <PrepareRxDoneAbort+0x3c>)
 800b99c:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800b9a0:	f042 0202 	orr.w	r2, r2, #2
 800b9a4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	f042 0210 	orr.w	r2, r2, #16
 800b9ae:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800b9b2:	f7ff fd9d 	bl	800b4f0 <UpdateRxSlotIdleState>
}
 800b9b6:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f7ff ffc3 	bl	800b944 <OnAckTimeoutTimerEvent>
 800b9be:	e7ec      	b.n	800b99a <PrepareRxDoneAbort+0x16>
 800b9c0:	20003414 	.word	0x20003414

0800b9c4 <LoRaMacCheckForBeaconAcquisition>:
{
 800b9c4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b9c6:	200c      	movs	r0, #12
 800b9c8:	f003 fb0a 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800b9cc:	b188      	cbz	r0, 800b9f2 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b9ce:	4b0b      	ldr	r3, [pc, #44]	; (800b9fc <LoRaMacCheckForBeaconAcquisition+0x38>)
 800b9d0:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b9d4:	f010 0f01 	tst.w	r0, #1
 800b9d8:	d10d      	bne.n	800b9f6 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b9da:	f010 0004 	ands.w	r0, r0, #4
 800b9de:	d009      	beq.n	800b9f4 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b9e6:	f023 0302 	bic.w	r3, r3, #2
 800b9ea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e000      	b.n	800b9f4 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800b9f2:	2000      	movs	r0, #0
}
 800b9f4:	bd08      	pop	{r3, pc}
    return 0x00;
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	e7fc      	b.n	800b9f4 <LoRaMacCheckForBeaconAcquisition+0x30>
 800b9fa:	bf00      	nop
 800b9fc:	20003414 	.word	0x20003414

0800ba00 <GetFCntDown>:
{
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	9c05      	ldr	r4, [sp, #20]
 800ba04:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ba06:	b302      	cbz	r2, 800ba4a <GetFCntDown+0x4a>
 800ba08:	4694      	mov	ip, r2
 800ba0a:	b304      	cbz	r4, 800ba4e <GetFCntDown+0x4e>
 800ba0c:	b30d      	cbz	r5, 800ba52 <GetFCntDown+0x52>
    switch( addrID )
 800ba0e:	b188      	cbz	r0, 800ba34 <GetFCntDown+0x34>
 800ba10:	2801      	cmp	r0, #1
 800ba12:	d120      	bne.n	800ba56 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 800ba14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ba18:	2a01      	cmp	r2, #1
 800ba1a:	d002      	beq.n	800ba22 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	7023      	strb	r3, [r4, #0]
 800ba20:	e00a      	b.n	800ba38 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ba22:	b121      	cbz	r1, 800ba2e <GetFCntDown+0x2e>
 800ba24:	2903      	cmp	r1, #3
 800ba26:	d002      	beq.n	800ba2e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	7023      	strb	r3, [r4, #0]
 800ba2c:	e004      	b.n	800ba38 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	7023      	strb	r3, [r4, #0]
 800ba32:	e001      	b.n	800ba38 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800ba34:	2304      	movs	r3, #4
 800ba36:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ba38:	462b      	mov	r3, r5
 800ba3a:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800ba3e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800ba42:	7820      	ldrb	r0, [r4, #0]
 800ba44:	f003 fcf6 	bl	800f434 <LoRaMacCryptoGetFCntDown>
}
 800ba48:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba4a:	200a      	movs	r0, #10
 800ba4c:	e7fc      	b.n	800ba48 <GetFCntDown+0x48>
 800ba4e:	200a      	movs	r0, #10
 800ba50:	e7fa      	b.n	800ba48 <GetFCntDown+0x48>
 800ba52:	200a      	movs	r0, #10
 800ba54:	e7f8      	b.n	800ba48 <GetFCntDown+0x48>
    switch( addrID )
 800ba56:	2005      	movs	r0, #5
 800ba58:	e7f6      	b.n	800ba48 <GetFCntDown+0x48>

0800ba5a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800ba5a:	2801      	cmp	r0, #1
 800ba5c:	d900      	bls.n	800ba60 <RemoveMacCommands+0x6>
 800ba5e:	4770      	bx	lr
{
 800ba60:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800ba62:	2a01      	cmp	r2, #1
 800ba64:	d105      	bne.n	800ba72 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800ba66:	f011 0f20 	tst.w	r1, #32
 800ba6a:	d004      	beq.n	800ba76 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800ba6c:	f003 f964 	bl	800ed38 <LoRaMacCommandsRemoveStickyAnsCmds>
 800ba70:	e001      	b.n	800ba76 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800ba72:	f003 f961 	bl	800ed38 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800ba76:	bd08      	pop	{r3, pc}

0800ba78 <ProcessMacCommands>:
{
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	b08f      	sub	sp, #60	; 0x3c
 800ba7e:	4605      	mov	r5, r0
 800ba80:	460c      	mov	r4, r1
 800ba82:	4616      	mov	r6, r2
 800ba84:	4698      	mov	r8, r3
    uint8_t status = 0;
 800ba86:	2700      	movs	r7, #0
 800ba88:	f88d 702f 	strb.w	r7, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ba8c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
    while( macIndex < commandsSize )
 800ba90:	42b4      	cmp	r4, r6
 800ba92:	f080 82c4 	bcs.w	800c01e <ProcessMacCommands+0x5a6>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ba96:	5d28      	ldrb	r0, [r5, r4]
 800ba98:	f003 f9a6 	bl	800ede8 <LoRaMacCommandsGetCmdSize>
 800ba9c:	4420      	add	r0, r4
 800ba9e:	42b0      	cmp	r0, r6
 800baa0:	f300 82bd 	bgt.w	800c01e <ProcessMacCommands+0x5a6>
        switch( payload[macIndex++] )
 800baa4:	f104 0901 	add.w	r9, r4, #1
 800baa8:	fa5f f989 	uxtb.w	r9, r9
 800baac:	5d29      	ldrb	r1, [r5, r4]
 800baae:	3902      	subs	r1, #2
 800bab0:	2911      	cmp	r1, #17
 800bab2:	f200 82b4 	bhi.w	800c01e <ProcessMacCommands+0x5a6>
 800bab6:	e8df f011 	tbh	[pc, r1, lsl #1]
 800baba:	0012      	.short	0x0012
 800babc:	00910029 	.word	0x00910029
 800bac0:	00ed00a5 	.word	0x00ed00a5
 800bac4:	013f0105 	.word	0x013f0105
 800bac8:	01ad0156 	.word	0x01ad0156
 800bacc:	02b202b2 	.word	0x02b202b2
 800bad0:	02b201de 	.word	0x02b201de
 800bad4:	023e02b2 	.word	0x023e02b2
 800bad8:	02750255 	.word	0x02750255
 800badc:	0291      	.short	0x0291
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800bade:	2005      	movs	r0, #5
 800bae0:	f003 fa7e 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800bae4:	b908      	cbnz	r0, 800baea <ProcessMacCommands+0x72>
        switch( payload[macIndex++] )
 800bae6:	464c      	mov	r4, r9
 800bae8:	e7d2      	b.n	800ba90 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800baea:	2105      	movs	r1, #5
 800baec:	2000      	movs	r0, #0
 800baee:	f003 fa2b 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800baf2:	1ca3      	adds	r3, r4, #2
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f815 1009 	ldrb.w	r1, [r5, r9]
 800bafa:	4ac2      	ldr	r2, [pc, #776]	; (800be04 <ProcessMacCommands+0x38c>)
 800bafc:	f882 1450 	strb.w	r1, [r2, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800bb00:	3403      	adds	r4, #3
 800bb02:	b2e4      	uxtb	r4, r4
 800bb04:	5ceb      	ldrb	r3, [r5, r3]
 800bb06:	f882 3451 	strb.w	r3, [r2, #1105]	; 0x451
 800bb0a:	e7c1      	b.n	800ba90 <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800bb12:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800bb16:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800bb1a:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800bb1e:	b10f      	cbz	r7, 800bb24 <ProcessMacCommands+0xac>
                break;
 800bb20:	464c      	mov	r4, r9
 800bb22:	e7b5      	b.n	800ba90 <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800bb24:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800bb28:	442b      	add	r3, r5
 800bb2a:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800bb2c:	eba6 0309 	sub.w	r3, r6, r9
 800bb30:	3301      	adds	r3, #1
 800bb32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800bb36:	48b4      	ldr	r0, [pc, #720]	; (800be08 <ProcessMacCommands+0x390>)
 800bb38:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 800bb3c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bb40:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800bb44:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800bb48:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
 800bb4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bb50:	f990 3038 	ldrsb.w	r3, [r0, #56]	; 0x38
 800bb54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bb58:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800bb5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800bb60:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 800bb64:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800bb66:	ab05      	add	r3, sp, #20
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	ab03      	add	r3, sp, #12
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	f10d 030b 	add.w	r3, sp, #11
 800bb72:	f10d 020a 	add.w	r2, sp, #10
 800bb76:	a907      	add	r1, sp, #28
 800bb78:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800bb7c:	f004 f85c 	bl	800fc38 <RegionLinkAdrReq>
 800bb80:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800bb84:	f000 0007 	and.w	r0, r0, #7
 800bb88:	2807      	cmp	r0, #7
 800bb8a:	d001      	beq.n	800bb90 <ProcessMacCommands+0x118>
{
 800bb8c:	2400      	movs	r4, #0
 800bb8e:	e015      	b.n	800bbbc <ProcessMacCommands+0x144>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800bb90:	4b9d      	ldr	r3, [pc, #628]	; (800be08 <ProcessMacCommands+0x390>)
 800bb92:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800bb96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800bb9a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800bb9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800bba2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800bba6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800bbaa:	e7ef      	b.n	800bb8c <ProcessMacCommands+0x114>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800bbac:	2201      	movs	r2, #1
 800bbae:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800bbb2:	2003      	movs	r0, #3
 800bbb4:	f003 f84c 	bl	800ec50 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bbb8:	3401      	adds	r4, #1
 800bbba:	b2e4      	uxtb	r4, r4
 800bbbc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800bbc0:	4b92      	ldr	r3, [pc, #584]	; (800be0c <ProcessMacCommands+0x394>)
 800bbc2:	fba3 1302 	umull	r1, r3, r3, r2
 800bbc6:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800bbca:	d3ef      	bcc.n	800bbac <ProcessMacCommands+0x134>
                    macIndex += linkAdrNbBytesParsed - 1;
 800bbcc:	eb02 0309 	add.w	r3, r2, r9
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 800bbd8:	2701      	movs	r7, #1
 800bbda:	e7a1      	b.n	800bb20 <ProcessMacCommands+0xa8>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800bbdc:	3402      	adds	r4, #2
 800bbde:	b2e4      	uxtb	r4, r4
 800bbe0:	f815 3009 	ldrb.w	r3, [r5, r9]
 800bbe4:	f003 030f 	and.w	r3, r3, #15
 800bbe8:	4987      	ldr	r1, [pc, #540]	; (800be08 <ProcessMacCommands+0x390>)
 800bbea:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800bbee:	2201      	movs	r2, #1
 800bbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf4:	f8a1 311e 	strh.w	r3, [r1, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	a90b      	add	r1, sp, #44	; 0x2c
 800bbfc:	2004      	movs	r0, #4
 800bbfe:	f003 f827 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800bc02:	e745      	b.n	800ba90 <ProcessMacCommands+0x18>
                status = 0x07;
 800bc04:	2307      	movs	r3, #7
 800bc06:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800bc0a:	f815 3009 	ldrb.w	r3, [r5, r9]
 800bc0e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bc12:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800bc16:	f915 3009 	ldrsb.w	r3, [r5, r9]
 800bc1a:	f003 030f 	and.w	r3, r3, #15
 800bc1e:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800bc22:	1ca3      	adds	r3, r4, #2
 800bc24:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800bc26:	1ce1      	adds	r1, r4, #3
 800bc28:	b2c9      	uxtb	r1, r1
 800bc2a:	5ceb      	ldrb	r3, [r5, r3]
 800bc2c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bc2e:	1d22      	adds	r2, r4, #4
 800bc30:	b2d2      	uxtb	r2, r2
 800bc32:	5c69      	ldrb	r1, [r5, r1]
 800bc34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bc38:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bc3a:	3405      	adds	r4, #5
 800bc3c:	b2e4      	uxtb	r4, r4
 800bc3e:	5caa      	ldrb	r2, [r5, r2]
 800bc40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc44:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800bc46:	2264      	movs	r2, #100	; 0x64
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800bc4e:	a907      	add	r1, sp, #28
 800bc50:	4b6d      	ldr	r3, [pc, #436]	; (800be08 <ProcessMacCommands+0x390>)
 800bc52:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bc56:	f004 f80b 	bl	800fc70 <RegionRxParamSetupReq>
 800bc5a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800bc5e:	f000 0307 	and.w	r3, r0, #7
 800bc62:	2b07      	cmp	r3, #7
 800bc64:	d007      	beq.n	800bc76 <ProcessMacCommands+0x1fe>
                macCmdPayload[0] = status;
 800bc66:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	a90b      	add	r1, sp, #44	; 0x2c
 800bc6e:	2005      	movs	r0, #5
 800bc70:	f002 ffee 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800bc74:	e70c      	b.n	800ba90 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800bc76:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800bc7a:	4b63      	ldr	r3, [pc, #396]	; (800be08 <ProcessMacCommands+0x390>)
 800bc7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800bc80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800bc84:	9a08      	ldr	r2, [sp, #32]
 800bc86:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800bc88:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800bc8a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800bc8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800bc92:	e7e8      	b.n	800bc66 <ProcessMacCommands+0x1ee>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800bc94:	4b5b      	ldr	r3, [pc, #364]	; (800be04 <ProcessMacCommands+0x38c>)
 800bc96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bc9a:	b17b      	cbz	r3, 800bcbc <ProcessMacCommands+0x244>
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	b17b      	cbz	r3, 800bcc0 <ProcessMacCommands+0x248>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800bca0:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800bca2:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800bca6:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800bcaa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800bcae:	2202      	movs	r2, #2
 800bcb0:	a90b      	add	r1, sp, #44	; 0x2c
 800bcb2:	2006      	movs	r0, #6
 800bcb4:	f002 ffcc 	bl	800ec50 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800bcb8:	464c      	mov	r4, r9
                break;
 800bcba:	e6e9      	b.n	800ba90 <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800bcbc:	20ff      	movs	r0, #255	; 0xff
 800bcbe:	e7f0      	b.n	800bca2 <ProcessMacCommands+0x22a>
 800bcc0:	20ff      	movs	r0, #255	; 0xff
 800bcc2:	e7ee      	b.n	800bca2 <ProcessMacCommands+0x22a>
                status = 0x03;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800bcca:	1ca3      	adds	r3, r4, #2
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f915 2009 	ldrsb.w	r2, [r5, r9]
 800bcd2:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800bcd6:	aa07      	add	r2, sp, #28
 800bcd8:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800bcda:	1ce2      	adds	r2, r4, #3
 800bcdc:	b2d2      	uxtb	r2, r2
 800bcde:	5ceb      	ldrb	r3, [r5, r3]
 800bce0:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bce2:	1d21      	adds	r1, r4, #4
 800bce4:	b2c9      	uxtb	r1, r1
 800bce6:	5caa      	ldrb	r2, [r5, r2]
 800bce8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bcec:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bcee:	1d62      	adds	r2, r4, #5
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	5c69      	ldrb	r1, [r5, r1]
 800bcf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bcf8:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800bcfa:	2164      	movs	r1, #100	; 0x64
 800bcfc:	fb01 f303 	mul.w	r3, r1, r3
 800bd00:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800bd06:	3406      	adds	r4, #6
 800bd08:	b2e4      	uxtb	r4, r4
 800bd0a:	56ab      	ldrsb	r3, [r5, r2]
 800bd0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800bd10:	a905      	add	r1, sp, #20
 800bd12:	4b3d      	ldr	r3, [pc, #244]	; (800be08 <ProcessMacCommands+0x390>)
 800bd14:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bd18:	f003 ffb9 	bl	800fc8e <RegionNewChannelReq>
 800bd1c:	b2c3      	uxtb	r3, r0
 800bd1e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800bd22:	2800      	cmp	r0, #0
 800bd24:	f6ff aeb4 	blt.w	800ba90 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800bd28:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	a90b      	add	r1, sp, #44	; 0x2c
 800bd30:	2007      	movs	r0, #7
 800bd32:	f002 ff8d 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800bd36:	e6ab      	b.n	800ba90 <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800bd38:	3402      	adds	r4, #2
 800bd3a:	b2e4      	uxtb	r4, r4
 800bd3c:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 800bd40:	f013 030f 	ands.w	r3, r3, #15
 800bd44:	d100      	bne.n	800bd48 <ProcessMacCommands+0x2d0>
                    delay++;
 800bd46:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800bd48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd4c:	fb02 f303 	mul.w	r3, r2, r3
 800bd50:	4a2d      	ldr	r2, [pc, #180]	; (800be08 <ProcessMacCommands+0x390>)
 800bd52:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800bd54:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bd58:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	a90b      	add	r1, sp, #44	; 0x2c
 800bd5e:	2008      	movs	r0, #8
 800bd60:	f002 ff76 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800bd64:	e694      	b.n	800ba90 <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 800bd66:	3402      	adds	r4, #2
 800bd68:	b2e4      	uxtb	r4, r4
 800bd6a:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800bd74:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800bd78:	f013 0f20 	tst.w	r3, #32
 800bd7c:	d002      	beq.n	800bd84 <ProcessMacCommands+0x30c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800bd84:	f013 0f10 	tst.w	r3, #16
 800bd88:	d002      	beq.n	800bd90 <ProcessMacCommands+0x318>
                    txParamSetupReq.UplinkDwellTime = 1;
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800bd98:	a903      	add	r1, sp, #12
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <ProcessMacCommands+0x390>)
 800bd9c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bda0:	f003 ff84 	bl	800fcac <RegionTxParamSetupReq>
 800bda4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bda8:	f43f ae72 	beq.w	800ba90 <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800bdac:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800bdb0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800be08 <ProcessMacCommands+0x390>
 800bdb4:	f889 a07c 	strb.w	sl, [r9, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800bdb8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800bdbc:	f889 307d 	strb.w	r3, [r9, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800bdc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800bdc4:	4a12      	ldr	r2, [pc, #72]	; (800be10 <ProcessMacCommands+0x398>)
 800bdc6:	5cd0      	ldrb	r0, [r2, r3]
 800bdc8:	f7f4 fd04 	bl	80007d4 <__aeabi_ui2f>
 800bdcc:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bdd6:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bdda:	a907      	add	r1, sp, #28
 800bddc:	f899 0048 	ldrb.w	r0, [r9, #72]	; 0x48
 800bde0:	f003 fe92 	bl	800fb08 <RegionGetPhyParam>
 800bde4:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800bde6:	b240      	sxtb	r0, r0
 800bde8:	f999 3039 	ldrsb.w	r3, [r9, #57]	; 0x39
 800bdec:	4298      	cmp	r0, r3
 800bdee:	bfb8      	it	lt
 800bdf0:	4618      	movlt	r0, r3
 800bdf2:	f889 0039 	strb.w	r0, [r9, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	a90b      	add	r1, sp, #44	; 0x2c
 800bdfa:	2009      	movs	r0, #9
 800bdfc:	f002 ff28 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800be00:	e646      	b.n	800ba90 <ProcessMacCommands+0x18>
 800be02:	bf00      	nop
 800be04:	20003414 	.word	0x20003414
 800be08:	20008000 	.word	0x20008000
 800be0c:	cccccccd 	.word	0xcccccccd
 800be10:	08015fb8 	.word	0x08015fb8
                status = 0x03;
 800be14:	2303      	movs	r3, #3
 800be16:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800be1a:	1ca3      	adds	r3, r4, #2
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	f815 2009 	ldrb.w	r2, [r5, r9]
 800be22:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800be26:	1ce1      	adds	r1, r4, #3
 800be28:	b2c9      	uxtb	r1, r1
 800be2a:	5ceb      	ldrb	r3, [r5, r3]
 800be2c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800be2e:	1d22      	adds	r2, r4, #4
 800be30:	b2d2      	uxtb	r2, r2
 800be32:	5c69      	ldrb	r1, [r5, r1]
 800be34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800be38:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800be3a:	3405      	adds	r4, #5
 800be3c:	b2e4      	uxtb	r4, r4
 800be3e:	5caa      	ldrb	r2, [r5, r2]
 800be40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be44:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800be46:	2264      	movs	r2, #100	; 0x64
 800be48:	fb02 f303 	mul.w	r3, r2, r3
 800be4c:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800be4e:	a907      	add	r1, sp, #28
 800be50:	4b74      	ldr	r3, [pc, #464]	; (800c024 <ProcessMacCommands+0x5ac>)
 800be52:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800be56:	f003 ff38 	bl	800fcca <RegionDlChannelReq>
 800be5a:	b2c3      	uxtb	r3, r0
 800be5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800be60:	2800      	cmp	r0, #0
 800be62:	f6ff ae15 	blt.w	800ba90 <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800be66:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800be6a:	2201      	movs	r2, #1
 800be6c:	a90b      	add	r1, sp, #44	; 0x2c
 800be6e:	200a      	movs	r0, #10
 800be70:	f002 feee 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800be74:	e60c      	b.n	800ba90 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800be76:	200a      	movs	r0, #10
 800be78:	f003 f8b2 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800be7c:	b908      	cbnz	r0, 800be82 <ProcessMacCommands+0x40a>
        switch( payload[macIndex++] )
 800be7e:	464c      	mov	r4, r9
 800be80:	e606      	b.n	800ba90 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800be82:	210a      	movs	r1, #10
 800be84:	2000      	movs	r0, #0
 800be86:	f003 f85f 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800be8a:	a903      	add	r1, sp, #12
 800be8c:	2300      	movs	r3, #0
 800be8e:	9303      	str	r3, [sp, #12]
 800be90:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800be92:	f10d 0a14 	add.w	sl, sp, #20
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800be9a:	f10d 0b1c 	add.w	fp, sp, #28
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800bea2:	1ca0      	adds	r0, r4, #2
 800bea4:	b2c0      	uxtb	r0, r0
 800bea6:	f815 3009 	ldrb.w	r3, [r5, r9]
 800beaa:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800beac:	1ce2      	adds	r2, r4, #3
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	5c28      	ldrb	r0, [r5, r0]
 800beb2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800beb6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800beb8:	1d20      	adds	r0, r4, #4
 800beba:	b2c0      	uxtb	r0, r0
 800bebc:	5caa      	ldrb	r2, [r5, r2]
 800bebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bec2:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800bec4:	1d62      	adds	r2, r4, #5
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	5c28      	ldrb	r0, [r5, r0]
 800beca:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bece:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800bed0:	3406      	adds	r4, #6
 800bed2:	b2e4      	uxtb	r4, r4
 800bed4:	5caa      	ldrb	r2, [r5, r2]
 800bed6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800beda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bede:	fb00 f202 	mul.w	r2, r0, r2
 800bee2:	0a12      	lsrs	r2, r2, #8
 800bee4:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800bee8:	c903      	ldmia	r1, {r0, r1}
 800beea:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800beee:	4a4e      	ldr	r2, [pc, #312]	; (800c028 <ProcessMacCommands+0x5b0>)
 800bef0:	441a      	add	r2, r3
 800bef2:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800bef4:	4658      	mov	r0, fp
 800bef6:	f008 ffdd 	bl	8014eb4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800befa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800c02c <ProcessMacCommands+0x5b4>
 800befe:	f8d9 333c 	ldr.w	r3, [r9, #828]	; 0x33c
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	f8d9 3338 	ldr.w	r3, [r9, #824]	; 0x338
 800bf08:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800bf0c:	a80c      	add	r0, sp, #48	; 0x30
 800bf0e:	f008 ff90 	bl	8014e32 <SysTimeSub>
 800bf12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf18:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800bf1c:	4650      	mov	r0, sl
 800bf1e:	f008 ff69 	bl	8014df4 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800bf22:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bf26:	f008 ffa3 	bl	8014e70 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800bf2a:	f002 fdf7 	bl	800eb1c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f889 3430 	strb.w	r3, [r9, #1072]	; 0x430
 800bf34:	e5ac      	b.n	800ba90 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800bf36:	200d      	movs	r0, #13
 800bf38:	f003 f852 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800bf3c:	b908      	cbnz	r0, 800bf42 <ProcessMacCommands+0x4ca>
        switch( payload[macIndex++] )
 800bf3e:	464c      	mov	r4, r9
 800bf40:	e5a6      	b.n	800ba90 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800bf42:	210d      	movs	r1, #13
 800bf44:	2000      	movs	r0, #0
 800bf46:	f002 ffff 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800bf4a:	4b38      	ldr	r3, [pc, #224]	; (800c02c <ProcessMacCommands+0x5b4>)
 800bf4c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800bf50:	3b04      	subs	r3, #4
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d801      	bhi.n	800bf5c <ProcessMacCommands+0x4e4>
        switch( payload[macIndex++] )
 800bf58:	464c      	mov	r4, r9
 800bf5a:	e599      	b.n	800ba90 <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800bf5c:	f002 fdda 	bl	800eb14 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800bf60:	464c      	mov	r4, r9
 800bf62:	e595      	b.n	800ba90 <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 800bf64:	1ca2      	adds	r2, r4, #2
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bf6c:	1ce1      	adds	r1, r4, #3
 800bf6e:	b2c9      	uxtb	r1, r1
 800bf70:	5caa      	ldrb	r2, [r5, r2]
 800bf72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800bf76:	1d22      	adds	r2, r4, #4
 800bf78:	b2d2      	uxtb	r2, r2
 800bf7a:	5c69      	ldrb	r1, [r5, r1]
 800bf7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800bf80:	3405      	adds	r4, #5
 800bf82:	b2e4      	uxtb	r4, r4
 800bf84:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800bf86:	2164      	movs	r1, #100	; 0x64
 800bf88:	fb03 f101 	mul.w	r1, r3, r1
 800bf8c:	f000 000f 	and.w	r0, r0, #15
 800bf90:	f002 fdc1 	bl	800eb16 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800bf94:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800bf98:	2201      	movs	r2, #1
 800bf9a:	a90b      	add	r1, sp, #44	; 0x2c
 800bf9c:	2011      	movs	r0, #17
 800bf9e:	f002 fe57 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800bfa2:	e575      	b.n	800ba90 <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800bfa4:	200e      	movs	r0, #14
 800bfa6:	f003 f81b 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800bfaa:	b908      	cbnz	r0, 800bfb0 <ProcessMacCommands+0x538>
        switch( payload[macIndex++] )
 800bfac:	464c      	mov	r4, r9
 800bfae:	e56f      	b.n	800ba90 <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800bfb0:	210e      	movs	r1, #14
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f002 ffc8 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800bfb8:	1ca2      	adds	r2, r4, #2
 800bfba:	b2d2      	uxtb	r2, r2
 800bfbc:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800bfc0:	1ce3      	adds	r3, r4, #3
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800bfc8:	3404      	adds	r4, #4
 800bfca:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800bfcc:	4a18      	ldr	r2, [pc, #96]	; (800c030 <ProcessMacCommands+0x5b8>)
 800bfce:	6812      	ldr	r2, [r2, #0]
 800bfd0:	5ce9      	ldrb	r1, [r5, r3]
 800bfd2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800bfd6:	f002 fda0 	bl	800eb1a <LoRaMacClassBBeaconTimingAns>
 800bfda:	e559      	b.n	800ba90 <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 800bfdc:	1ca1      	adds	r1, r4, #2
 800bfde:	b2c9      	uxtb	r1, r1
 800bfe0:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800bfe4:	1ce2      	adds	r2, r4, #3
 800bfe6:	b2d2      	uxtb	r2, r2
 800bfe8:	5c69      	ldrb	r1, [r5, r1]
 800bfea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800bfee:	3404      	adds	r4, #4
 800bff0:	b2e4      	uxtb	r4, r4
 800bff2:	5caa      	ldrb	r2, [r5, r2]
 800bff4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800bff8:	2064      	movs	r0, #100	; 0x64
 800bffa:	fb03 f000 	mul.w	r0, r3, r0
 800bffe:	f002 fd8e 	bl	800eb1e <LoRaMacClassBBeaconFreqReq>
 800c002:	b140      	cbz	r0, 800c016 <ProcessMacCommands+0x59e>
                        macCmdPayload[0] = 1;
 800c004:	2301      	movs	r3, #1
 800c006:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c00a:	2201      	movs	r2, #1
 800c00c:	a90b      	add	r1, sp, #44	; 0x2c
 800c00e:	2013      	movs	r0, #19
 800c010:	f002 fe1e 	bl	800ec50 <LoRaMacCommandsAddCmd>
                break;
 800c014:	e53c      	b.n	800ba90 <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c01c:	e7f5      	b.n	800c00a <ProcessMacCommands+0x592>
}
 800c01e:	b00f      	add	sp, #60	; 0x3c
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	20008000 	.word	0x20008000
 800c028:	12d53d80 	.word	0x12d53d80
 800c02c:	20003414 	.word	0x20003414
 800c030:	2000391c 	.word	0x2000391c

0800c034 <ProcessRadioRxDone>:
{
 800c034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c038:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800c03a:	4b9c      	ldr	r3, [pc, #624]	; (800c2ac <ProcessRadioRxDone+0x278>)
 800c03c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800c03e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800c040:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800c044:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	9308      	str	r3, [sp, #32]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800c04c:	4a98      	ldr	r2, [pc, #608]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c04e:	f8d2 80e4 	ldr.w	r8, [r2, #228]	; 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 800c052:	4c98      	ldr	r4, [pc, #608]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c054:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800c058:	f8a4 947c 	strh.w	r9, [r4, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800c05c:	f884 747e 	strb.w	r7, [r4, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800c060:	f894 2480 	ldrb.w	r2, [r4, #1152]	; 0x480
 800c064:	f884 247f 	strb.w	r2, [r4, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800c068:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800c06c:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800c070:	f884 341d 	strb.w	r3, [r4, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800c074:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800c078:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 800c07c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800c080:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800c084:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c088:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800c08c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c090:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    Radio.Sleep( );
 800c094:	4b88      	ldr	r3, [pc, #544]	; (800c2b8 <ProcessRadioRxDone+0x284>)
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800c09a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c09e:	f008 fff7 	bl	8015090 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f002 fd22 	bl	800eaee <LoRaMacClassBRxBeacon>
 800c0aa:	b9a0      	cbnz	r0, 800c0d6 <ProcessRadioRxDone+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c0ac:	4b80      	ldr	r3, [pc, #512]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c0ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d016      	beq.n	800c0e4 <ProcessRadioRxDone+0xb0>
    if( size == 0 )
 800c0b6:	b395      	cbz	r5, 800c11e <ProcessRadioRxDone+0xea>
    macHdr.Value = payload[pktHeaderLen++];
 800c0b8:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800c0ba:	0963      	lsrs	r3, r4, #5
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b06      	cmp	r3, #6
 800c0c0:	f200 82b3 	bhi.w	800c62a <ProcessRadioRxDone+0x5f6>
 800c0c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c0c8:	02b10032 	.word	0x02b10032
 800c0cc:	02b100c6 	.word	0x02b100c6
 800c0d0:	02b100c2 	.word	0x02b100c2
 800c0d4:	028b      	.short	0x028b
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800c0d6:	f8a4 9472 	strh.w	r9, [r4, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800c0da:	f884 7474 	strb.w	r7, [r4, #1140]	; 0x474
}
 800c0de:	b025      	add	sp, #148	; 0x94
 800c0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c0e4:	f002 fd07 	bl	800eaf6 <LoRaMacClassBIsPingExpected>
 800c0e8:	b150      	cbz	r0, 800c100 <ProcessRadioRxDone+0xcc>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	f002 fcf8 	bl	800eae0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f002 fcfa 	bl	800eaea <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c0f6:	4b6f      	ldr	r3, [pc, #444]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c0f8:	2204      	movs	r2, #4
 800c0fa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800c0fe:	e7da      	b.n	800c0b6 <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c100:	f002 fcfb 	bl	800eafa <LoRaMacClassBIsMulticastExpected>
 800c104:	2800      	cmp	r0, #0
 800c106:	d0d6      	beq.n	800c0b6 <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c108:	2000      	movs	r0, #0
 800c10a:	f002 fcea 	bl	800eae2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c10e:	2000      	movs	r0, #0
 800c110:	f002 fcec 	bl	800eaec <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c114:	4b67      	ldr	r3, [pc, #412]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c116:	2205      	movs	r2, #5
 800c118:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800c11c:	e7cb      	b.n	800c0b6 <ProcessRadioRxDone+0x82>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c11e:	4b65      	ldr	r3, [pc, #404]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 800c126:	f7ff fc2d 	bl	800b984 <PrepareRxDoneAbort>
        return;
 800c12a:	e7d8      	b.n	800c0de <ProcessRadioRxDone+0xaa>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800c12c:	2d10      	cmp	r5, #16
 800c12e:	d92e      	bls.n	800c18e <ProcessRadioRxDone+0x15a>
            macMsgJoinAccept.Buffer = payload;
 800c130:	9609      	str	r6, [sp, #36]	; 0x24
            macMsgJoinAccept.BufSize = size;
 800c132:	b2ed      	uxtb	r5, r5
 800c134:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c138:	4b5d      	ldr	r3, [pc, #372]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c13a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800c13e:	bb6b      	cbnz	r3, 800c19c <ProcessRadioRxDone+0x168>
            SecureElementGetJoinEui( joinEui );
 800c140:	a805      	add	r0, sp, #20
 800c142:	f006 fd33 	bl	8012bac <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800c146:	aa09      	add	r2, sp, #36	; 0x24
 800c148:	a905      	add	r1, sp, #20
 800c14a:	20ff      	movs	r0, #255	; 0xff
 800c14c:	f003 fade 	bl	800f70c <LoRaMacCryptoHandleJoinAccept>
 800c150:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c152:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800c156:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c15a:	f88d 3010 	strb.w	r3, [sp, #16]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c15e:	4b54      	ldr	r3, [pc, #336]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c160:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c164:	f88d 2011 	strb.w	r2, [sp, #17]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800c168:	2207      	movs	r2, #7
 800c16a:	a904      	add	r1, sp, #16
 800c16c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c170:	f003 fcfe 	bl	800fb70 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800c174:	b904      	cbnz	r4, 800c178 <ProcessRadioRxDone+0x144>
 800c176:	b9c0      	cbnz	r0, 800c1aa <ProcessRadioRxDone+0x176>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c178:	2001      	movs	r0, #1
 800c17a:	f002 ff31 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f000 8247 	beq.w	800c612 <ProcessRadioRxDone+0x5de>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800c184:	2101      	movs	r1, #1
 800c186:	2007      	movs	r0, #7
 800c188:	f002 fede 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
 800c18c:	e241      	b.n	800c612 <ProcessRadioRxDone+0x5de>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c18e:	4b49      	ldr	r3, [pc, #292]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c196:	f7ff fbf5 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c19a:	e7a0      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c19c:	4b45      	ldr	r3, [pc, #276]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c1a4:	f7ff fbee 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c1a8:	e799      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800c1aa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800c1ae:	4c40      	ldr	r4, [pc, #256]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c1b0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800c1b4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800c1b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c1bc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c1c0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800c1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800c1cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1ce:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800c1d2:	2002      	movs	r0, #2
 800c1d4:	f006 fcf8 	bl	8012bc8 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800c1d8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800c1dc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c1e0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c1e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c1e8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c1ec:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800c1f0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 800c1f4:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800c1f6:	b90b      	cbnz	r3, 800c1fc <ProcessRadioRxDone+0x1c8>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800c1fc:	4c2c      	ldr	r4, [pc, #176]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c204:	fb02 f303 	mul.w	r3, r2, r3
 800c208:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c20a:	4413      	add	r3, r2
 800c20c:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800c20e:	2601      	movs	r6, #1
 800c210:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800c21a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c21e:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800c220:	3d11      	subs	r5, #17
 800c222:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800c226:	a922      	add	r1, sp, #136	; 0x88
 800c228:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c22c:	f003 fcb0 	bl	800fb90 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c230:	2302      	movs	r3, #2
 800c232:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800c236:	4630      	mov	r0, r6
 800c238:	f002 fed2 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	f000 81e8 	beq.w	800c612 <ProcessRadioRxDone+0x5de>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800c242:	4631      	mov	r1, r6
 800c244:	2000      	movs	r0, #0
 800c246:	f002 fe7f 	bl	800ef48 <LoRaMacConfirmQueueSetStatus>
 800c24a:	e1e2      	b.n	800c612 <ProcessRadioRxDone+0x5de>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c24c:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c254:	4b16      	ldr	r3, [pc, #88]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c256:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c25a:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800c25e:	4a15      	ldr	r2, [pc, #84]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c260:	f992 241c 	ldrsb.w	r2, [r2, #1052]	; 0x41c
 800c264:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c268:	220d      	movs	r2, #13
 800c26a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c26e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c272:	b113      	cbz	r3, 800c27a <ProcessRadioRxDone+0x246>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c274:	230e      	movs	r3, #14
 800c276:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c27a:	a920      	add	r1, sp, #128	; 0x80
 800c27c:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <ProcessRadioRxDone+0x27c>)
 800c27e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c282:	f003 fc41 	bl	800fb08 <RegionGetPhyParam>
 800c286:	901f      	str	r0, [sp, #124]	; 0x7c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800c288:	f1a5 030d 	sub.w	r3, r5, #13
 800c28c:	b21b      	sxth	r3, r3
 800c28e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c292:	b200      	sxth	r0, r0
 800c294:	4283      	cmp	r3, r0
 800c296:	dc01      	bgt.n	800c29c <ProcessRadioRxDone+0x268>
 800c298:	2d0b      	cmp	r5, #11
 800c29a:	d80f      	bhi.n	800c2bc <ProcessRadioRxDone+0x288>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <ProcessRadioRxDone+0x280>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c2a4:	f7ff fb6e 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c2a8:	e719      	b.n	800c0de <ProcessRadioRxDone+0xaa>
 800c2aa:	bf00      	nop
 800c2ac:	2000391c 	.word	0x2000391c
 800c2b0:	20008000 	.word	0x20008000
 800c2b4:	20003414 	.word	0x20003414
 800c2b8:	08016690 	.word	0x08016690
            macMsgData.Buffer = payload;
 800c2bc:	9613      	str	r6, [sp, #76]	; 0x4c
            macMsgData.BufSize = size;
 800c2be:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800c2c2:	4bb0      	ldr	r3, [pc, #704]	; (800c584 <ProcessRadioRxDone+0x550>)
 800c2c4:	931c      	str	r3, [sp, #112]	; 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800c2c6:	23ff      	movs	r3, #255	; 0xff
 800c2c8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800c2cc:	a813      	add	r0, sp, #76	; 0x4c
 800c2ce:	f003 faeb 	bl	800f8a8 <LoRaMacParserData>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d148      	bne.n	800c368 <ProcessRadioRxDone+0x334>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800c2d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c2d8:	4bab      	ldr	r3, [pc, #684]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c2da:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800c2de:	a905      	add	r1, sp, #20
 800c2e0:	a813      	add	r0, sp, #76	; 0x4c
 800c2e2:	f7ff f987 	bl	800b5f4 <DetermineFrameType>
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d144      	bne.n	800c376 <ProcessRadioRxDone+0x342>
            downLinkCounter = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9308      	str	r3, [sp, #32]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d046      	beq.n	800c384 <ProcessRadioRxDone+0x350>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800c2f6:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c2fa:	2d01      	cmp	r5, #1
 800c2fc:	d108      	bne.n	800c310 <ProcessRadioRxDone+0x2dc>
 800c2fe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c302:	2b03      	cmp	r3, #3
 800c304:	d16d      	bne.n	800c3e2 <ProcessRadioRxDone+0x3ae>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c306:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c30a:	f013 0f60 	tst.w	r3, #96	; 0x60
 800c30e:	d168      	bne.n	800c3e2 <ProcessRadioRxDone+0x3ae>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800c310:	2315      	movs	r3, #21
 800c312:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c316:	4e9d      	ldr	r6, [pc, #628]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c318:	a920      	add	r1, sp, #128	; 0x80
 800c31a:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c31e:	f003 fbf3 	bl	800fb08 <RegionGetPhyParam>
 800c322:	901f      	str	r0, [sp, #124]	; 0x7c
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800c324:	ab08      	add	r3, sp, #32
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	f10d 031f 	add.w	r3, sp, #31
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	b280      	uxth	r0, r0
 800c330:	9000      	str	r0, [sp, #0]
 800c332:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800c336:	aa13      	add	r2, sp, #76	; 0x4c
 800c338:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800c33c:	4648      	mov	r0, r9
 800c33e:	f7ff fb5f 	bl	800ba00 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c342:	2800      	cmp	r0, #0
 800c344:	d06d      	beq.n	800c422 <ProcessRadioRxDone+0x3ee>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c346:	2807      	cmp	r0, #7
 800c348:	d052      	beq.n	800c3f0 <ProcessRadioRxDone+0x3bc>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800c34a:	2808      	cmp	r0, #8
 800c34c:	d064      	beq.n	800c418 <ProcessRadioRxDone+0x3e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c34e:	4b8e      	ldr	r3, [pc, #568]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c356:	9a08      	ldr	r2, [sp, #32]
 800c358:	4b8b      	ldr	r3, [pc, #556]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c35a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c35e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
                PrepareRxDoneAbort( );
 800c362:	f7ff fb0f 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c366:	e6ba      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c368:	4b87      	ldr	r3, [pc, #540]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c370:	f7ff fb08 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c374:	e6b3      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c376:	4b84      	ldr	r3, [pc, #528]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c37e:	f7ff fb01 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c382:	e6ac      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c384:	4618      	mov	r0, r3
 800c386:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c38a:	4a80      	ldr	r2, [pc, #512]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c38c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c390:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800c394:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c396:	428a      	cmp	r2, r1
 800c398:	d002      	beq.n	800c3a0 <ProcessRadioRxDone+0x36c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c39a:	3301      	adds	r3, #1
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	e7a8      	b.n	800c2f2 <ProcessRadioRxDone+0x2be>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800c3a0:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c3a4:	4979      	ldr	r1, [pc, #484]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c3a6:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c3aa:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	d0f3      	beq.n	800c39a <ProcessRadioRxDone+0x366>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800c3b2:	4b76      	ldr	r3, [pc, #472]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c3b4:	2130      	movs	r1, #48	; 0x30
 800c3b6:	fb01 3000 	mla	r0, r1, r0, r3
 800c3ba:	f890 90ea 	ldrb.w	r9, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800c3be:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800c3c2:	6809      	ldr	r1, [r1, #0]
 800c3c4:	9108      	str	r1, [sp, #32]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c3c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d002      	beq.n	800c3d4 <ProcessRadioRxDone+0x3a0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c3ce:	4690      	mov	r8, r2
                    multicast = 1;
 800c3d0:	2501      	movs	r5, #1
 800c3d2:	e792      	b.n	800c2fa <ProcessRadioRxDone+0x2c6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c3d4:	4b6c      	ldr	r3, [pc, #432]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c3d6:	2103      	movs	r1, #3
 800c3d8:	f883 147f 	strb.w	r1, [r3, #1151]	; 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c3dc:	4690      	mov	r8, r2
                    multicast = 1;
 800c3de:	2501      	movs	r5, #1
 800c3e0:	e78b      	b.n	800c2fa <ProcessRadioRxDone+0x2c6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c3e2:	4b69      	ldr	r3, [pc, #420]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c3ea:	f7ff facb 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c3ee:	e676      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c3f0:	4b65      	ldr	r3, [pc, #404]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c3f2:	2208      	movs	r2, #8
 800c3f4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800c3f8:	f896 312a 	ldrb.w	r3, [r6, #298]	; 0x12a
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1aa      	bne.n	800c356 <ProcessRadioRxDone+0x322>
 800c400:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800c404:	2ca0      	cmp	r4, #160	; 0xa0
 800c406:	d1a6      	bne.n	800c356 <ProcessRadioRxDone+0x322>
 800c408:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800c40a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d1a2      	bne.n	800c356 <ProcessRadioRxDone+0x322>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800c410:	2201      	movs	r2, #1
 800c412:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
 800c416:	e79e      	b.n	800c356 <ProcessRadioRxDone+0x322>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800c418:	4b5b      	ldr	r3, [pc, #364]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c41a:	220a      	movs	r2, #10
 800c41c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800c420:	e799      	b.n	800c356 <ProcessRadioRxDone+0x322>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c422:	ab13      	add	r3, sp, #76	; 0x4c
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	9b08      	ldr	r3, [sp, #32]
 800c428:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c42c:	4641      	mov	r1, r8
 800c42e:	4648      	mov	r0, r9
 800c430:	f003 f8c4 	bl	800f5bc <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c434:	2800      	cmp	r0, #0
 800c436:	d14a      	bne.n	800c4ce <ProcessRadioRxDone+0x49a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c438:	4b53      	ldr	r3, [pc, #332]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c43a:	2100      	movs	r1, #0
 800c43c:	f883 1419 	strb.w	r1, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800c440:	f883 541a 	strb.w	r5, [r3, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800c444:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800c448:	f883 1424 	strb.w	r1, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c44c:	9a08      	ldr	r2, [sp, #32]
 800c44e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c452:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c456:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800c45a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c45e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c462:	f883 1435 	strb.w	r1, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c466:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c46a:	f893 047f 	ldrb.w	r0, [r3, #1151]	; 0x47f
 800c46e:	2801      	cmp	r0, #1
 800c470:	d93b      	bls.n	800c4ea <ProcessRadioRxDone+0x4b6>
            if( multicast == 1 )
 800c472:	2d01      	cmp	r5, #1
 800c474:	d03c      	beq.n	800c4f0 <ProcessRadioRxDone+0x4bc>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c476:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800c47a:	2ca0      	cmp	r4, #160	; 0xa0
 800c47c:	d03d      	beq.n	800c4fa <ProcessRadioRxDone+0x4c6>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800c47e:	2300      	movs	r3, #0
 800c480:	4a42      	ldr	r2, [pc, #264]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c482:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c486:	4a40      	ldr	r2, [pc, #256]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c488:	f882 3418 	strb.w	r3, [r2, #1048]	; 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c48c:	4b3f      	ldr	r3, [pc, #252]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c48e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c492:	b923      	cbnz	r3, 800c49e <ProcessRadioRxDone+0x46a>
 800c494:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800c498:	f013 0f10 	tst.w	r3, #16
 800c49c:	d007      	beq.n	800c4ae <ProcessRadioRxDone+0x47a>
 800c49e:	4b3b      	ldr	r3, [pc, #236]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c4a0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c4a4:	b91b      	cbnz	r3, 800c4ae <ProcessRadioRxDone+0x47a>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800c4a6:	4b38      	ldr	r3, [pc, #224]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c4ae:	4b36      	ldr	r3, [pc, #216]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c4b0:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 800c4b4:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 800c4b8:	f7ff facf 	bl	800ba5a <RemoveMacCommands>
            switch( fType )
 800c4bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	f200 8085 	bhi.w	800c5d0 <ProcessRadioRxDone+0x59c>
 800c4c6:	e8df f003 	tbb	[pc, r3]
 800c4ca:	4a27      	.short	0x4a27
 800c4cc:	7363      	.short	0x7363
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800c4ce:	2802      	cmp	r0, #2
 800c4d0:	d006      	beq.n	800c4e0 <ProcessRadioRxDone+0x4ac>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c4d2:	4b2d      	ldr	r3, [pc, #180]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c4d4:	220c      	movs	r2, #12
 800c4d6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 800c4da:	f7ff fa53 	bl	800b984 <PrepareRxDoneAbort>
                return;
 800c4de:	e5fe      	b.n	800c0de <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800c4e0:	4b29      	ldr	r3, [pc, #164]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c4e2:	220b      	movs	r2, #11
 800c4e4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800c4e8:	e7f7      	b.n	800c4da <ProcessRadioRxDone+0x4a6>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800c4ea:	4b28      	ldr	r3, [pc, #160]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c4ec:	6299      	str	r1, [r3, #40]	; 0x28
 800c4ee:	e7c0      	b.n	800c472 <ProcessRadioRxDone+0x43e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c4f0:	4b25      	ldr	r3, [pc, #148]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800c4f8:	e7c8      	b.n	800c48c <ProcessRadioRxDone+0x458>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800c4fa:	4b24      	ldr	r3, [pc, #144]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c502:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800c506:	b913      	cbnz	r3, 800c50e <ProcessRadioRxDone+0x4da>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800c508:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c50a:	4b20      	ldr	r3, [pc, #128]	; (800c58c <ProcessRadioRxDone+0x558>)
 800c50c:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c50e:	4b1e      	ldr	r3, [pc, #120]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800c516:	e7b9      	b.n	800c48c <ProcessRadioRxDone+0x458>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c518:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800c51c:	4c1a      	ldr	r4, [pc, #104]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c51e:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	463b      	mov	r3, r7
 800c526:	f002 020f 	and.w	r2, r2, #15
 800c52a:	2100      	movs	r1, #0
 800c52c:	a817      	add	r0, sp, #92	; 0x5c
 800c52e:	f7ff faa3 	bl	800ba78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c532:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800c536:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c53a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c53c:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c540:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800c544:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800c548:	2301      	movs	r3, #1
 800c54a:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c54e:	4a0e      	ldr	r2, [pc, #56]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c550:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c554:	f043 0302 	orr.w	r3, r3, #2
 800c558:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800c55c:	e059      	b.n	800c612 <ProcessRadioRxDone+0x5de>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c55e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800c562:	4c09      	ldr	r4, [pc, #36]	; (800c588 <ProcessRadioRxDone+0x554>)
 800c564:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	463b      	mov	r3, r7
 800c56c:	f002 020f 	and.w	r2, r2, #15
 800c570:	2100      	movs	r1, #0
 800c572:	a817      	add	r0, sp, #92	; 0x5c
 800c574:	f7ff fa80 	bl	800ba78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c578:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800c57c:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 800c580:	e7e5      	b.n	800c54e <ProcessRadioRxDone+0x51a>
 800c582:	bf00      	nop
 800c584:	2000364c 	.word	0x2000364c
 800c588:	20003414 	.word	0x20003414
 800c58c:	20008000 	.word	0x20008000
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c590:	4c33      	ldr	r4, [pc, #204]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c592:	f894 347f 	ldrb.w	r3, [r4, #1151]	; 0x47f
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	463b      	mov	r3, r7
 800c59a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800c59e:	2100      	movs	r1, #0
 800c5a0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c5a2:	f7ff fa69 	bl	800ba78 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c5a6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800c5aa:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                    break;
 800c5ae:	e7ce      	b.n	800c54e <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c5b0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800c5b4:	4b2a      	ldr	r3, [pc, #168]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c5b6:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c5ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c5bc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c5c0:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800c5c4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 800c5ce:	e7be      	b.n	800c54e <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c5d0:	4b23      	ldr	r3, [pc, #140]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 800c5d8:	f7ff f9d4 	bl	800b984 <PrepareRxDoneAbort>
                    break;
 800c5dc:	e7b7      	b.n	800c54e <ProcessRadioRxDone+0x51a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c5de:	1e6a      	subs	r2, r5, #1
 800c5e0:	4c1f      	ldr	r4, [pc, #124]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c5e2:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800c5e6:	b292      	uxth	r2, r2
 800c5e8:	1c71      	adds	r1, r6, #1
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	f006 fbfb 	bl	8012de6 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c5fc:	f8c4 7420 	str.w	r7, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c600:	3d01      	subs	r5, #1
 800c602:	f884 5424 	strb.w	r5, [r4, #1060]	; 0x424
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c606:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 800c60a:	f043 0302 	orr.w	r3, r3, #2
 800c60e:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
    if( MacCtx.NodeAckRequested == true )
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c614:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800c618:	b173      	cbz	r3, 800c638 <ProcessRadioRxDone+0x604>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c61a:	4b11      	ldr	r3, [pc, #68]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c61c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c620:	b17b      	cbz	r3, 800c642 <ProcessRadioRxDone+0x60e>
            OnAckTimeoutTimerEvent( NULL );
 800c622:	2000      	movs	r0, #0
 800c624:	f7ff f98e 	bl	800b944 <OnAckTimeoutTimerEvent>
 800c628:	e00b      	b.n	800c642 <ProcessRadioRxDone+0x60e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c62a:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 800c632:	f7ff f9a7 	bl	800b984 <PrepareRxDoneAbort>
            break;
 800c636:	e7ec      	b.n	800c612 <ProcessRadioRxDone+0x5de>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c638:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <ProcessRadioRxDone+0x630>)
 800c63a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d009      	beq.n	800c656 <ProcessRadioRxDone+0x622>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c642:	4a07      	ldr	r2, [pc, #28]	; (800c660 <ProcessRadioRxDone+0x62c>)
 800c644:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c648:	f043 0310 	orr.w	r3, r3, #16
 800c64c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    UpdateRxSlotIdleState( );
 800c650:	f7fe ff4e 	bl	800b4f0 <UpdateRxSlotIdleState>
 800c654:	e543      	b.n	800c0de <ProcessRadioRxDone+0xaa>
            OnAckTimeoutTimerEvent( NULL );
 800c656:	2000      	movs	r0, #0
 800c658:	f7ff f974 	bl	800b944 <OnAckTimeoutTimerEvent>
 800c65c:	e7f1      	b.n	800c642 <ProcessRadioRxDone+0x60e>
 800c65e:	bf00      	nop
 800c660:	20003414 	.word	0x20003414
 800c664:	20008000 	.word	0x20008000

0800c668 <ProcessRadioTxTimeout>:
{
 800c668:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c66a:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <ProcessRadioTxTimeout+0x40>)
 800c66c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c670:	2b02      	cmp	r3, #2
 800c672:	d002      	beq.n	800c67a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800c674:	4b0d      	ldr	r3, [pc, #52]	; (800c6ac <ProcessRadioTxTimeout+0x44>)
 800c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c678:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800c67a:	f7fe ff39 	bl	800b4f0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c67e:	4c0c      	ldr	r4, [pc, #48]	; (800c6b0 <ProcessRadioTxTimeout+0x48>)
 800c680:	2002      	movs	r0, #2
 800c682:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c686:	f002 fc8d 	bl	800efa4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c68a:	f894 3410 	ldrb.w	r3, [r4, #1040]	; 0x410
 800c68e:	b113      	cbz	r3, 800c696 <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 800c690:	2201      	movs	r2, #1
 800c692:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c696:	4a06      	ldr	r2, [pc, #24]	; (800c6b0 <ProcessRadioTxTimeout+0x48>)
 800c698:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c69c:	f043 0310 	orr.w	r3, r3, #16
 800c6a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20008000 	.word	0x20008000
 800c6ac:	08016690 	.word	0x08016690
 800c6b0:	20003414 	.word	0x20003414

0800c6b4 <CheckForClassBCollision>:
{
 800c6b4:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c6b6:	f002 fa1c 	bl	800eaf2 <LoRaMacClassBIsBeaconExpected>
 800c6ba:	b978      	cbnz	r0, 800c6dc <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <CheckForClassBCollision+0x30>)
 800c6be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d001      	beq.n	800c6ca <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800c6c6:	2000      	movs	r0, #0
}
 800c6c8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c6ca:	f002 fa14 	bl	800eaf6 <LoRaMacClassBIsPingExpected>
 800c6ce:	b938      	cbnz	r0, 800c6e0 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c6d0:	f002 fa13 	bl	800eafa <LoRaMacClassBIsMulticastExpected>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d0f7      	beq.n	800c6c8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c6d8:	200f      	movs	r0, #15
 800c6da:	e7f5      	b.n	800c6c8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800c6dc:	200e      	movs	r0, #14
 800c6de:	e7f3      	b.n	800c6c8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800c6e0:	200f      	movs	r0, #15
 800c6e2:	e7f1      	b.n	800c6c8 <CheckForClassBCollision+0x14>
 800c6e4:	20008000 	.word	0x20008000

0800c6e8 <HandleRadioRxErrorTimeout>:
{
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c6ee:	4b37      	ldr	r3, [pc, #220]	; (800c7cc <HandleRadioRxErrorTimeout+0xe4>)
 800c6f0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d002      	beq.n	800c6fe <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800c6f8:	4b35      	ldr	r3, [pc, #212]	; (800c7d0 <HandleRadioRxErrorTimeout+0xe8>)
 800c6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c6fe:	f002 f9f8 	bl	800eaf2 <LoRaMacClassBIsBeaconExpected>
 800c702:	4606      	mov	r6, r0
 800c704:	bb00      	cbnz	r0, 800c748 <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c706:	4b31      	ldr	r3, [pc, #196]	; (800c7cc <HandleRadioRxErrorTimeout+0xe4>)
 800c708:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d022      	beq.n	800c756 <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800c710:	b9be      	cbnz	r6, 800c742 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c712:	4b30      	ldr	r3, [pc, #192]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c714:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d13f      	bne.n	800c79c <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 800c71c:	4b2d      	ldr	r3, [pc, #180]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c71e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800c722:	b113      	cbz	r3, 800c72a <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800c724:	4b2b      	ldr	r3, [pc, #172]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c726:	f883 5435 	strb.w	r5, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800c72a:	4628      	mov	r0, r5
 800c72c:	f002 fc3a 	bl	800efa4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800c730:	4b26      	ldr	r3, [pc, #152]	; (800c7cc <HandleRadioRxErrorTimeout+0xe4>)
 800c732:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c734:	f008 fc76 	bl	8015024 <UTIL_TIMER_GetElapsedTime>
 800c738:	4b26      	ldr	r3, [pc, #152]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c73a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c73e:	4298      	cmp	r0, r3
 800c740:	d220      	bcs.n	800c784 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800c742:	f7fe fed5 	bl	800b4f0 <UpdateRxSlotIdleState>
}
 800c746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800c748:	2002      	movs	r0, #2
 800c74a:	f002 f9c8 	bl	800eade <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c74e:	2000      	movs	r0, #0
 800c750:	f002 f9ca 	bl	800eae8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800c754:	e7d7      	b.n	800c706 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c756:	f002 f9ce 	bl	800eaf6 <LoRaMacClassBIsPingExpected>
 800c75a:	4607      	mov	r7, r0
 800c75c:	b950      	cbnz	r0, 800c774 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c75e:	f002 f9cc 	bl	800eafa <LoRaMacClassBIsMulticastExpected>
 800c762:	2800      	cmp	r0, #0
 800c764:	d0d4      	beq.n	800c710 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c766:	2000      	movs	r0, #0
 800c768:	f002 f9bb 	bl	800eae2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c76c:	2000      	movs	r0, #0
 800c76e:	f002 f9bd 	bl	800eaec <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800c772:	e7e6      	b.n	800c742 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c774:	2000      	movs	r0, #0
 800c776:	f002 f9b3 	bl	800eae0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c77a:	2000      	movs	r0, #0
 800c77c:	f002 f9b5 	bl	800eaea <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800c780:	463e      	mov	r6, r7
 800c782:	e7ec      	b.n	800c75e <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800c784:	4c13      	ldr	r4, [pc, #76]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c786:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c78a:	f008 fc81 	bl	8015090 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c78e:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
 800c792:	f043 0310 	orr.w	r3, r3, #16
 800c796:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
 800c79a:	e7d2      	b.n	800c742 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800c79c:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c79e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800c7a2:	b113      	cbz	r3, 800c7aa <HandleRadioRxErrorTimeout+0xc2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800c7a4:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c7a6:	f883 4435 	strb.w	r4, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f002 fbfa 	bl	800efa4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c7b0:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <HandleRadioRxErrorTimeout+0xe4>)
 800c7b2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d0c3      	beq.n	800c742 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c7ba:	4a06      	ldr	r2, [pc, #24]	; (800c7d4 <HandleRadioRxErrorTimeout+0xec>)
 800c7bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c7c0:	f043 0310 	orr.w	r3, r3, #16
 800c7c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800c7c8:	e7bb      	b.n	800c742 <HandleRadioRxErrorTimeout+0x5a>
 800c7ca:	bf00      	nop
 800c7cc:	20008000 	.word	0x20008000
 800c7d0:	08016690 	.word	0x08016690
 800c7d4:	20003414 	.word	0x20003414

0800c7d8 <ProcessRadioRxError>:
{
 800c7d8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800c7da:	2106      	movs	r1, #6
 800c7dc:	2005      	movs	r0, #5
 800c7de:	f7ff ff83 	bl	800c6e8 <HandleRadioRxErrorTimeout>
}
 800c7e2:	bd08      	pop	{r3, pc}

0800c7e4 <ProcessRadioRxTimeout>:
{
 800c7e4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800c7e6:	2104      	movs	r1, #4
 800c7e8:	2003      	movs	r0, #3
 800c7ea:	f7ff ff7d 	bl	800c6e8 <HandleRadioRxErrorTimeout>
}
 800c7ee:	bd08      	pop	{r3, pc}

0800c7f0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7f0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c7f4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800c7f6:	4a14      	ldr	r2, [pc, #80]	; (800c848 <LoRaMacHandleIrqEvents+0x58>)
 800c7f8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7fe:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800c802:	b303      	cbz	r3, 800c846 <LoRaMacHandleIrqEvents+0x56>
{
 800c804:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800c806:	b2dc      	uxtb	r4, r3
 800c808:	f013 0f10 	tst.w	r3, #16
 800c80c:	d10c      	bne.n	800c828 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800c80e:	f014 0f08 	tst.w	r4, #8
 800c812:	d10c      	bne.n	800c82e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800c814:	f014 0f04 	tst.w	r4, #4
 800c818:	d10c      	bne.n	800c834 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800c81a:	f014 0f02 	tst.w	r4, #2
 800c81e:	d10c      	bne.n	800c83a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800c820:	f014 0f01 	tst.w	r4, #1
 800c824:	d10c      	bne.n	800c840 <LoRaMacHandleIrqEvents+0x50>
}
 800c826:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800c828:	f7ff f800 	bl	800b82c <ProcessRadioTxDone>
 800c82c:	e7ef      	b.n	800c80e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800c82e:	f7ff fc01 	bl	800c034 <ProcessRadioRxDone>
 800c832:	e7ef      	b.n	800c814 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800c834:	f7ff ff18 	bl	800c668 <ProcessRadioTxTimeout>
 800c838:	e7ef      	b.n	800c81a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800c83a:	f7ff ffcd 	bl	800c7d8 <ProcessRadioRxError>
 800c83e:	e7ef      	b.n	800c820 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800c840:	f7ff ffd0 	bl	800c7e4 <ProcessRadioRxTimeout>
}
 800c844:	e7ef      	b.n	800c826 <LoRaMacHandleIrqEvents+0x36>
 800c846:	4770      	bx	lr
 800c848:	20003410 	.word	0x20003410

0800c84c <LoRaMacHandleMlmeRequest>:
{
 800c84c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c84e:	4b16      	ldr	r3, [pc, #88]	; (800c8a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800c850:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800c854:	f013 0f04 	tst.w	r3, #4
 800c858:	d100      	bne.n	800c85c <LoRaMacHandleMlmeRequest+0x10>
}
 800c85a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c85c:	2001      	movs	r0, #1
 800c85e:	f002 fbbf 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800c862:	b178      	cbz	r0, 800c884 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c864:	2001      	movs	r0, #1
 800c866:	f002 fb85 	bl	800ef74 <LoRaMacConfirmQueueGetStatus>
 800c86a:	b918      	cbnz	r0, 800c874 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c874:	4a0c      	ldr	r2, [pc, #48]	; (800c8a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800c876:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c87a:	f023 0302 	bic.w	r3, r3, #2
 800c87e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c882:	e7ea      	b.n	800c85a <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c884:	2006      	movs	r0, #6
 800c886:	f002 fbab 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
 800c88a:	b138      	cbz	r0, 800c89c <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c88c:	4a06      	ldr	r2, [pc, #24]	; (800c8a8 <LoRaMacHandleMlmeRequest+0x5c>)
 800c88e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c892:	f023 0302 	bic.w	r3, r3, #2
 800c896:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800c89a:	e7de      	b.n	800c85a <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800c89c:	2007      	movs	r0, #7
 800c89e:	f002 fb9f 	bl	800efe0 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d0d9      	beq.n	800c85a <LoRaMacHandleMlmeRequest+0xe>
 800c8a6:	e7f1      	b.n	800c88c <LoRaMacHandleMlmeRequest+0x40>
 800c8a8:	20003414 	.word	0x20003414

0800c8ac <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 800c8ac:	4b14      	ldr	r3, [pc, #80]	; (800c900 <AckTimeoutRetriesFinalize+0x54>)
 800c8ae:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800c8b2:	b12b      	cbz	r3, 800c8c0 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800c8b4:	4b12      	ldr	r3, [pc, #72]	; (800c900 <AckTimeoutRetriesFinalize+0x54>)
 800c8b6:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 800c8ba:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 800c8be:	4770      	bx	lr
{
 800c8c0:	b500      	push	{lr}
 800c8c2:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800c8ca:	4b0e      	ldr	r3, [pc, #56]	; (800c904 <AckTimeoutRetriesFinalize+0x58>)
 800c8cc:	f503 7208 	add.w	r2, r3, #544	; 0x220
 800c8d0:	9201      	str	r2, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800c8d2:	f503 7231 	add.w	r2, r3, #708	; 0x2c4
 800c8d6:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c8d8:	a901      	add	r1, sp, #4
 800c8da:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c8de:	f003 f939 	bl	800fb54 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800c8e2:	4b07      	ldr	r3, [pc, #28]	; (800c900 <AckTimeoutRetriesFinalize+0x54>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 800c8ea:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800c8ee:	4b04      	ldr	r3, [pc, #16]	; (800c900 <AckTimeoutRetriesFinalize+0x54>)
 800c8f0:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 800c8f4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 800c8f8:	b005      	add	sp, #20
 800c8fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8fe:	bf00      	nop
 800c900:	20003414 	.word	0x20003414
 800c904:	20008000 	.word	0x20008000

0800c908 <SerializeTxFrame>:
{
 800c908:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <SerializeTxFrame+0x40>)
 800c90c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c910:	b11b      	cbz	r3, 800c91a <SerializeTxFrame+0x12>
 800c912:	2b04      	cmp	r3, #4
 800c914:	d00a      	beq.n	800c92c <SerializeTxFrame+0x24>
 800c916:	2003      	movs	r0, #3
}
 800c918:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c91a:	480c      	ldr	r0, [pc, #48]	; (800c94c <SerializeTxFrame+0x44>)
 800c91c:	f003 f823 	bl	800f966 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c920:	b968      	cbnz	r0, 800c93e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c922:	4b09      	ldr	r3, [pc, #36]	; (800c948 <SerializeTxFrame+0x40>)
 800c924:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c928:	801a      	strh	r2, [r3, #0]
            break;
 800c92a:	e7f5      	b.n	800c918 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800c92c:	4807      	ldr	r0, [pc, #28]	; (800c94c <SerializeTxFrame+0x44>)
 800c92e:	f003 f850 	bl	800f9d2 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c932:	b930      	cbnz	r0, 800c942 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c934:	4b04      	ldr	r3, [pc, #16]	; (800c948 <SerializeTxFrame+0x40>)
 800c936:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c93a:	801a      	strh	r2, [r3, #0]
            break;
 800c93c:	e7ec      	b.n	800c918 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c93e:	2011      	movs	r0, #17
 800c940:	e7ea      	b.n	800c918 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c942:	2011      	movs	r0, #17
 800c944:	e7e8      	b.n	800c918 <SerializeTxFrame+0x10>
 800c946:	bf00      	nop
 800c948:	20003414 	.word	0x20003414
 800c94c:	2000351c 	.word	0x2000351c

0800c950 <ComputeRxWindowParameters>:
{
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c954:	4c1e      	ldr	r4, [pc, #120]	; (800c9d0 <ComputeRxWindowParameters+0x80>)
 800c956:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c95a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800c95e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800c962:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800c966:	4630      	mov	r0, r6
 800c968:	f003 f9f1 	bl	800fd4e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c96c:	4d19      	ldr	r5, [pc, #100]	; (800c9d4 <ComputeRxWindowParameters+0x84>)
 800c96e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c976:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800c97a:	b241      	sxtb	r1, r0
 800c97c:	4630      	mov	r0, r6
 800c97e:	f003 f924 	bl	800fbca <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c982:	f505 7373 	add.w	r3, r5, #972	; 0x3cc
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c98a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800c98e:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800c992:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c996:	f003 f918 	bl	800fbca <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c99a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c99c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800c9a0:	440b      	add	r3, r1
 800c9a2:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c9a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c9a8:	f8d5 23d8 	ldr.w	r2, [r5, #984]	; 0x3d8
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800c9b2:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800c9b6:	2b04      	cmp	r3, #4
 800c9b8:	d007      	beq.n	800c9ca <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c9ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c9bc:	4419      	add	r1, r3
 800c9be:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c9c2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c9c4:	440a      	add	r2, r1
 800c9c6:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800c9ca:	b002      	add	sp, #8
 800c9cc:	bd70      	pop	{r4, r5, r6, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20008000 	.word	0x20008000
 800c9d4:	20003414 	.word	0x20003414

0800c9d8 <VerifyTxFrame>:
{
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <VerifyTxFrame+0x40>)
 800c9e2:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 800c9e6:	b914      	cbnz	r4, 800c9ee <VerifyTxFrame+0x16>
}
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	b002      	add	sp, #8
 800c9ec:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c9ee:	a801      	add	r0, sp, #4
 800c9f0:	f002 f9bc 	bl	800ed6c <LoRaMacCommandsGetSizeSerializedCmds>
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	b968      	cbnz	r0, 800ca14 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800c9f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c9fc:	4b06      	ldr	r3, [pc, #24]	; (800ca18 <VerifyTxFrame+0x40>)
 800c9fe:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <VerifyTxFrame+0x44>)
 800ca04:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800ca08:	f7fe fefe 	bl	800b808 <ValidatePayloadLength>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d1eb      	bne.n	800c9e8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ca10:	2408      	movs	r4, #8
 800ca12:	e7e9      	b.n	800c9e8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ca14:	2413      	movs	r4, #19
 800ca16:	e7e7      	b.n	800c9e8 <VerifyTxFrame+0x10>
 800ca18:	20008000 	.word	0x20008000
 800ca1c:	20003414 	.word	0x20003414

0800ca20 <SecureFrame>:
{
 800ca20:	b530      	push	{r4, r5, lr}
 800ca22:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800ca28:	4b1a      	ldr	r3, [pc, #104]	; (800ca94 <SecureFrame+0x74>)
 800ca2a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ca2e:	b133      	cbz	r3, 800ca3e <SecureFrame+0x1e>
 800ca30:	4605      	mov	r5, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d00b      	beq.n	800ca50 <SecureFrame+0x30>
 800ca38:	2003      	movs	r0, #3
}
 800ca3a:	b003      	add	sp, #12
 800ca3c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ca3e:	4816      	ldr	r0, [pc, #88]	; (800ca98 <SecureFrame+0x78>)
 800ca40:	f002 fd4c 	bl	800f4dc <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ca44:	bb00      	cbnz	r0, 800ca88 <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <SecureFrame+0x74>)
 800ca48:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ca4c:	801a      	strh	r2, [r3, #0]
            break;
 800ca4e:	e7f4      	b.n	800ca3a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ca50:	a801      	add	r0, sp, #4
 800ca52:	f002 fce3 	bl	800f41c <LoRaMacCryptoGetFCntUp>
 800ca56:	b9c8      	cbnz	r0, 800ca8c <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ca58:	4b0e      	ldr	r3, [pc, #56]	; (800ca94 <SecureFrame+0x74>)
 800ca5a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800ca5e:	b923      	cbnz	r3, 800ca6a <SecureFrame+0x4a>
 800ca60:	4b0c      	ldr	r3, [pc, #48]	; (800ca94 <SecureFrame+0x74>)
 800ca62:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d902      	bls.n	800ca70 <SecureFrame+0x50>
                fCntUp -= 1;
 800ca6a:	9b01      	ldr	r3, [sp, #4]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ca70:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <SecureFrame+0x78>)
 800ca72:	4622      	mov	r2, r4
 800ca74:	4629      	mov	r1, r5
 800ca76:	9801      	ldr	r0, [sp, #4]
 800ca78:	f002 fd5c 	bl	800f534 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ca7c:	b940      	cbnz	r0, 800ca90 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <SecureFrame+0x74>)
 800ca80:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ca84:	801a      	strh	r2, [r3, #0]
            break;
 800ca86:	e7d8      	b.n	800ca3a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ca88:	2011      	movs	r0, #17
 800ca8a:	e7d6      	b.n	800ca3a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ca8c:	2012      	movs	r0, #18
 800ca8e:	e7d4      	b.n	800ca3a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ca90:	2011      	movs	r0, #17
 800ca92:	e7d2      	b.n	800ca3a <SecureFrame+0x1a>
 800ca94:	20003414 	.word	0x20003414
 800ca98:	2000351c 	.word	0x2000351c

0800ca9c <SendFrameOnChannel>:
{
 800ca9c:	b570      	push	{r4, r5, r6, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800caa8:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800caac:	4d34      	ldr	r5, [pc, #208]	; (800cb80 <SendFrameOnChannel+0xe4>)
 800caae:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800cab2:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800cab6:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800caba:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800cabe:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800cac2:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800cac4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800cac8:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800caca:	4c2e      	ldr	r4, [pc, #184]	; (800cb84 <SendFrameOnChannel+0xe8>)
 800cacc:	8823      	ldrh	r3, [r4, #0]
 800cace:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800cad2:	f204 4314 	addw	r3, r4, #1044	; 0x414
 800cad6:	f10d 0207 	add.w	r2, sp, #7
 800cada:	a902      	add	r1, sp, #8
 800cadc:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800cae0:	f003 f897 	bl	800fc12 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800caea:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800caee:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800caf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800caf6:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800cafa:	f8c4 6444 	str.w	r6, [r4, #1092]	; 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cafe:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 800cb02:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cb06:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800cb0a:	f001 fff8 	bl	800eafe <LoRaMacClassBIsBeaconModeActive>
 800cb0e:	bb58      	cbnz	r0, 800cb68 <SendFrameOnChannel+0xcc>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cb10:	4b1b      	ldr	r3, [pc, #108]	; (800cb80 <SendFrameOnChannel+0xe4>)
 800cb12:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d02e      	beq.n	800cb78 <SendFrameOnChannel+0xdc>
    LoRaMacClassBHaltBeaconing( );
 800cb1a:	f001 fff3 	bl	800eb04 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800cb1e:	4b18      	ldr	r3, [pc, #96]	; (800cb80 <SendFrameOnChannel+0xe4>)
 800cb20:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <SendFrameOnChannel+0xe8>)
 800cb26:	f893 1411 	ldrb.w	r1, [r3, #1041]	; 0x411
 800cb2a:	b2c0      	uxtb	r0, r0
 800cb2c:	f7ff ff78 	bl	800ca20 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800cb30:	4604      	mov	r4, r0
 800cb32:	b9b0      	cbnz	r0, 800cb62 <SendFrameOnChannel+0xc6>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800cb34:	4b13      	ldr	r3, [pc, #76]	; (800cb84 <SendFrameOnChannel+0xe8>)
 800cb36:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800cb3a:	f042 0202 	orr.w	r2, r2, #2
 800cb3e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800cb42:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800cb46:	b92b      	cbnz	r3, 800cb54 <SendFrameOnChannel+0xb8>
        MacCtx.ChannelsNbTransCounter++;
 800cb48:	4a0e      	ldr	r2, [pc, #56]	; (800cb84 <SendFrameOnChannel+0xe8>)
 800cb4a:	f892 340c 	ldrb.w	r3, [r2, #1036]	; 0x40c
 800cb4e:	3301      	adds	r3, #1
 800cb50:	f882 340c 	strb.w	r3, [r2, #1036]	; 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800cb54:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <SendFrameOnChannel+0xec>)
 800cb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb58:	480a      	ldr	r0, [pc, #40]	; (800cb84 <SendFrameOnChannel+0xe8>)
 800cb5a:	f830 1b02 	ldrh.w	r1, [r0], #2
 800cb5e:	b2c9      	uxtb	r1, r1
 800cb60:	4798      	blx	r3
}
 800cb62:	4620      	mov	r0, r4
 800cb64:	b006      	add	sp, #24
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800cb68:	f8d4 0414 	ldr.w	r0, [r4, #1044]	; 0x414
 800cb6c:	f001 ffd9 	bl	800eb22 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d0cd      	beq.n	800cb10 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800cb74:	2410      	movs	r4, #16
 800cb76:	e7f4      	b.n	800cb62 <SendFrameOnChannel+0xc6>
        LoRaMacClassBStopRxSlots( );
 800cb78:	f001 ffd5 	bl	800eb26 <LoRaMacClassBStopRxSlots>
 800cb7c:	e7cd      	b.n	800cb1a <SendFrameOnChannel+0x7e>
 800cb7e:	bf00      	nop
 800cb80:	20008000 	.word	0x20008000
 800cb84:	20003414 	.word	0x20003414
 800cb88:	08016690 	.word	0x08016690

0800cb8c <ScheduleTx>:
{
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	b08c      	sub	sp, #48	; 0x30
 800cb92:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800cb94:	f7ff fd8e 	bl	800c6b4 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800cb98:	4604      	mov	r4, r0
 800cb9a:	b118      	cbz	r0, 800cba4 <ScheduleTx+0x18>
}
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	b00c      	add	sp, #48	; 0x30
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800cba4:	f7fe fcfe 	bl	800b5a4 <CalculateBackOff>
    status = SerializeTxFrame( );
 800cba8:	f7ff feae 	bl	800c908 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800cbac:	4604      	mov	r4, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d1f4      	bne.n	800cb9c <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800cbb2:	4e36      	ldr	r6, [pc, #216]	; (800cc8c <ScheduleTx+0x100>)
 800cbb4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800cbb6:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cbb8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800cbbc:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800cbc0:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800cbc4:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cbc8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cbcc:	4640      	mov	r0, r8
 800cbce:	f008 f993 	bl	8014ef8 <SysTimeGetMcuTime>
 800cbd2:	af02      	add	r7, sp, #8
 800cbd4:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 800cbde:	e898 0006 	ldmia.w	r8, {r1, r2}
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f008 f925 	bl	8014e32 <SysTimeSub>
 800cbe8:	ab07      	add	r3, sp, #28
 800cbea:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cbee:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800cbf2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cbf4:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800cc02:	4b23      	ldr	r3, [pc, #140]	; (800cc90 <ScheduleTx+0x104>)
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc0a:	f896 312c 	ldrb.w	r3, [r6, #300]	; 0x12c
 800cc0e:	b92b      	cbnz	r3, 800cc1c <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800cc10:	2301      	movs	r3, #1
 800cc12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800cc16:	2300      	movs	r3, #0
 800cc18:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800cc1c:	4a1c      	ldr	r2, [pc, #112]	; (800cc90 <ScheduleTx+0x104>)
 800cc1e:	481b      	ldr	r0, [pc, #108]	; (800cc8c <ScheduleTx+0x100>)
 800cc20:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	f202 4384 	addw	r3, r2, #1156	; 0x484
 800cc2a:	f202 4211 	addw	r2, r2, #1041	; 0x411
 800cc2e:	a904      	add	r1, sp, #16
 800cc30:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800cc34:	f003 f868 	bl	800fd08 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800cc38:	b1c0      	cbz	r0, 800cc6c <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800cc3a:	280b      	cmp	r0, #11
 800cc3c:	d124      	bne.n	800cc88 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800cc3e:	4a14      	ldr	r2, [pc, #80]	; (800cc90 <ScheduleTx+0x104>)
 800cc40:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
 800cc44:	b191      	cbz	r1, 800cc6c <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800cc46:	b90d      	cbnz	r5, 800cc4c <ScheduleTx+0xc0>
                return status;
 800cc48:	4604      	mov	r4, r0
 800cc4a:	e7a7      	b.n	800cb9c <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800cc4c:	4615      	mov	r5, r2
 800cc4e:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800cc52:	f042 0220 	orr.w	r2, r2, #32
 800cc56:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800cc5a:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f008 fab6 	bl	80151d0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800cc64:	4628      	mov	r0, r5
 800cc66:	f008 fa6d 	bl	8015144 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800cc6a:	e797      	b.n	800cb9c <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800cc6c:	f7ff fe70 	bl	800c950 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800cc70:	f7ff feb2 	bl	800c9d8 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800cc74:	4604      	mov	r4, r0
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d190      	bne.n	800cb9c <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <ScheduleTx+0x104>)
 800cc7c:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 800cc80:	f7ff ff0c 	bl	800ca9c <SendFrameOnChannel>
 800cc84:	4604      	mov	r4, r0
 800cc86:	e789      	b.n	800cb9c <ScheduleTx+0x10>
            return status;
 800cc88:	4604      	mov	r4, r0
 800cc8a:	e787      	b.n	800cb9c <ScheduleTx+0x10>
 800cc8c:	20008000 	.word	0x20008000
 800cc90:	20003414 	.word	0x20003414

0800cc94 <OnTxDelayedTimerEvent>:
{
 800cc94:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800cc96:	4c11      	ldr	r4, [pc, #68]	; (800ccdc <OnTxDelayedTimerEvent+0x48>)
 800cc98:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cc9c:	f008 f9f8 	bl	8015090 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cca0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cca4:	f023 0320 	bic.w	r3, r3, #32
 800cca8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    switch( ScheduleTx( true ) )
 800ccac:	2001      	movs	r0, #1
 800ccae:	f7ff ff6d 	bl	800cb8c <ScheduleTx>
 800ccb2:	b108      	cbz	r0, 800ccb8 <OnTxDelayedTimerEvent+0x24>
 800ccb4:	280b      	cmp	r0, #11
 800ccb6:	d100      	bne.n	800ccba <OnTxDelayedTimerEvent+0x26>
}
 800ccb8:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <OnTxDelayedTimerEvent+0x4c>)
 800ccbc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800ccc0:	f884 2436 	strb.w	r2, [r4, #1078]	; 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ccc4:	f894 240e 	ldrb.w	r2, [r4, #1038]	; 0x40e
 800ccc8:	f884 2439 	strb.w	r2, [r4, #1081]	; 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800cccc:	2009      	movs	r0, #9
 800ccce:	f884 0435 	strb.w	r0, [r4, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ccd2:	f002 f967 	bl	800efa4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ccd6:	f7fe fcf3 	bl	800b6c0 <StopRetransmission>
}
 800ccda:	e7ed      	b.n	800ccb8 <OnTxDelayedTimerEvent+0x24>
 800ccdc:	20003414 	.word	0x20003414
 800cce0:	20008000 	.word	0x20008000

0800cce4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cce4:	4b23      	ldr	r3, [pc, #140]	; (800cd74 <LoRaMacHandleMcpsRequest+0x90>)
 800cce6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ccea:	f013 0f01 	tst.w	r3, #1
 800ccee:	d040      	beq.n	800cd72 <LoRaMacHandleMcpsRequest+0x8e>
{
 800ccf0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ccf2:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <LoRaMacHandleMcpsRequest+0x90>)
 800ccf4:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 800ccf8:	b12b      	cbz	r3, 800cd06 <LoRaMacHandleMcpsRequest+0x22>
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d003      	beq.n	800cd06 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d007      	beq.n	800cd12 <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800cd02:	2400      	movs	r4, #0
 800cd04:	e003      	b.n	800cd0e <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800cd06:	f7fe fc9f 	bl	800b648 <CheckRetransUnconfirmedUplink>
 800cd0a:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800cd0c:	b9a4      	cbnz	r4, 800cd38 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800cd0e:	b31c      	cbz	r4, 800cd58 <LoRaMacHandleMcpsRequest+0x74>
}
 800cd10:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800cd12:	4b18      	ldr	r3, [pc, #96]	; (800cd74 <LoRaMacHandleMcpsRequest+0x90>)
 800cd14:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 800cd18:	b1e3      	cbz	r3, 800cd54 <LoRaMacHandleMcpsRequest+0x70>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800cd1a:	f7fe fcb9 	bl	800b690 <CheckRetransConfirmedUplink>
 800cd1e:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800cd20:	4b15      	ldr	r3, [pc, #84]	; (800cd78 <LoRaMacHandleMcpsRequest+0x94>)
 800cd22:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1f0      	bne.n	800cd0c <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800cd2a:	b910      	cbnz	r0, 800cd32 <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800cd2c:	f7fe fd20 	bl	800b770 <AckTimeoutRetriesProcess>
 800cd30:	e7ec      	b.n	800cd0c <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800cd32:	f7ff fdbb 	bl	800c8ac <AckTimeoutRetriesFinalize>
 800cd36:	e7e9      	b.n	800cd0c <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800cd38:	4c0e      	ldr	r4, [pc, #56]	; (800cd74 <LoRaMacHandleMcpsRequest+0x90>)
 800cd3a:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cd3e:	f008 f9a7 	bl	8015090 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cd42:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cd46:	f023 0320 	bic.w	r3, r3, #32
 800cd4a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800cd4e:	f7fe fcb7 	bl	800b6c0 <StopRetransmission>
 800cd52:	e7dd      	b.n	800cd10 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800cd54:	2401      	movs	r4, #1
 800cd56:	e7da      	b.n	800cd0e <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800cd58:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <LoRaMacHandleMcpsRequest+0x90>)
 800cd5a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cd5e:	f36f 1204 	bfc	r2, #4, #1
 800cd62:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800cd66:	2000      	movs	r0, #0
 800cd68:	f883 040f 	strb.w	r0, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 800cd6c:	f7ff ff92 	bl	800cc94 <OnTxDelayedTimerEvent>
}
 800cd70:	e7ce      	b.n	800cd10 <LoRaMacHandleMcpsRequest+0x2c>
 800cd72:	4770      	bx	lr
 800cd74:	20003414 	.word	0x20003414
 800cd78:	20008000 	.word	0x20008000

0800cd7c <LoRaMacHandleRequestEvents>:
{
 800cd7c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800cd7e:	4b22      	ldr	r3, [pc, #136]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cd80:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cd84:	bb7b      	cbnz	r3, 800cde6 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cd88:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
 800cd8c:	f014 0501 	ands.w	r5, r4, #1
 800cd90:	d005      	beq.n	800cd9e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800cd92:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cd96:	f36f 0200 	bfc	r2, #0, #1
 800cd9a:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cd9e:	4b1a      	ldr	r3, [pc, #104]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cda0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800cda4:	f013 0f04 	tst.w	r3, #4
 800cda8:	d006      	beq.n	800cdb8 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800cdaa:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cdac:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cdb0:	f36f 0282 	bfc	r2, #2, #1
 800cdb4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800cdb8:	2001      	movs	r0, #1
 800cdba:	f7fe fbad 	bl	800b518 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800cdbe:	b135      	cbz	r5, 800cdce <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800cdc0:	4811      	ldr	r0, [pc, #68]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cdc2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f200 4034 	addw	r0, r0, #1076	; 0x434
 800cdcc:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800cdce:	f014 0f04 	tst.w	r4, #4
 800cdd2:	d109      	bne.n	800cde8 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800cdd4:	f001 fe97 	bl	800eb06 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800cdd8:	4b0b      	ldr	r3, [pc, #44]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cdda:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800cdde:	f36f 1204 	bfc	r2, #4, #1
 800cde2:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
}
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800cde8:	4808      	ldr	r0, [pc, #32]	; (800ce0c <LoRaMacHandleRequestEvents+0x90>)
 800cdea:	f002 f905 	bl	800eff8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800cdee:	f002 f93b 	bl	800f068 <LoRaMacConfirmQueueGetCnt>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d0ee      	beq.n	800cdd4 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800cdf6:	4a04      	ldr	r2, [pc, #16]	; (800ce08 <LoRaMacHandleRequestEvents+0x8c>)
 800cdf8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800cdfc:	f043 0304 	orr.w	r3, r3, #4
 800ce00:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800ce04:	e7e6      	b.n	800cdd4 <LoRaMacHandleRequestEvents+0x58>
 800ce06:	bf00      	nop
 800ce08:	20003414 	.word	0x20003414
 800ce0c:	2000385c 	.word	0x2000385c

0800ce10 <OpenContinuousRxCWindow>:
{
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ce14:	4c14      	ldr	r4, [pc, #80]	; (800ce68 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ce16:	4d15      	ldr	r5, [pc, #84]	; (800ce6c <OpenContinuousRxCWindow+0x5c>)
 800ce18:	f505 7678 	add.w	r6, r5, #992	; 0x3e0
 800ce1c:	9600      	str	r6, [sp, #0]
 800ce1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ce20:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800ce24:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800ce28:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ce2c:	f002 fecd 	bl	800fbca <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ce30:	2302      	movs	r3, #2
 800ce32:	f885 33f3 	strb.w	r3, [r5, #1011]	; 0x3f3
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ce36:	2301      	movs	r3, #1
 800ce38:	f885 33f2 	strb.w	r3, [r5, #1010]	; 0x3f2
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ce3c:	f205 421c 	addw	r2, r5, #1052	; 0x41c
 800ce40:	4631      	mov	r1, r6
 800ce42:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ce46:	f002 fed4 	bl	800fbf2 <RegionRxConfig>
 800ce4a:	b158      	cbz	r0, 800ce64 <OpenContinuousRxCWindow+0x54>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ce4c:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800ce50:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800ce54:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <OpenContinuousRxCWindow+0x60>)
 800ce56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ce5c:	f895 33f3 	ldrb.w	r3, [r5, #1011]	; 0x3f3
 800ce60:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800ce64:	b002      	add	sp, #8
 800ce66:	bd70      	pop	{r4, r5, r6, pc}
 800ce68:	20008000 	.word	0x20008000
 800ce6c:	20003414 	.word	0x20003414
 800ce70:	08016690 	.word	0x08016690

0800ce74 <RxWindowSetup>:
{
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800ce78:	f008 f90a 	bl	8015090 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800ce7c:	4b0c      	ldr	r3, [pc, #48]	; (800ceb0 <RxWindowSetup+0x3c>)
 800ce7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce80:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ce82:	4a0c      	ldr	r2, [pc, #48]	; (800ceb4 <RxWindowSetup+0x40>)
 800ce84:	4621      	mov	r1, r4
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <RxWindowSetup+0x44>)
 800ce88:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ce8c:	f002 feb1 	bl	800fbf2 <RegionRxConfig>
 800ce90:	b160      	cbz	r0, 800ceac <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ce92:	4d0a      	ldr	r5, [pc, #40]	; (800cebc <RxWindowSetup+0x48>)
 800ce94:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 800ce98:	f885 345e 	strb.w	r3, [r5, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <RxWindowSetup+0x3c>)
 800ce9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea0:	4a05      	ldr	r2, [pc, #20]	; (800ceb8 <RxWindowSetup+0x44>)
 800cea2:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800cea4:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800cea6:	7ce3      	ldrb	r3, [r4, #19]
 800cea8:	f885 3480 	strb.w	r3, [r5, #1152]	; 0x480
}
 800ceac:	bd38      	pop	{r3, r4, r5, pc}
 800ceae:	bf00      	nop
 800ceb0:	08016690 	.word	0x08016690
 800ceb4:	20003830 	.word	0x20003830
 800ceb8:	20008000 	.word	0x20008000
 800cebc:	20003414 	.word	0x20003414

0800cec0 <OnRxWindow2TimerEvent>:
{
 800cec0:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800cec2:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <OnRxWindow2TimerEvent+0x48>)
 800cec4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800cec8:	b903      	cbnz	r3, 800cecc <OnRxWindow2TimerEvent+0xc>
}
 800ceca:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cecc:	480e      	ldr	r0, [pc, #56]	; (800cf08 <OnRxWindow2TimerEvent+0x48>)
 800cece:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800ced2:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ced6:	4b0d      	ldr	r3, [pc, #52]	; (800cf0c <OnRxWindow2TimerEvent+0x4c>)
 800ced8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ceda:	f8c0 23d0 	str.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cede:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cee2:	f880 23dc 	strb.w	r2, [r0, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cee6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ceea:	f880 33dd 	strb.w	r3, [r0, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f880 33de 	strb.w	r3, [r0, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cef4:	2301      	movs	r3, #1
 800cef6:	f880 33df 	strb.w	r3, [r0, #991]	; 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800cefa:	f500 7173 	add.w	r1, r0, #972	; 0x3cc
 800cefe:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800cf02:	f7ff ffb7 	bl	800ce74 <RxWindowSetup>
 800cf06:	e7e0      	b.n	800ceca <OnRxWindow2TimerEvent+0xa>
 800cf08:	20003414 	.word	0x20003414
 800cf0c:	20008000 	.word	0x20008000

0800cf10 <OnRxWindow1TimerEvent>:
{
 800cf10:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800cf12:	480f      	ldr	r0, [pc, #60]	; (800cf50 <OnRxWindow1TimerEvent+0x40>)
 800cf14:	f890 3411 	ldrb.w	r3, [r0, #1041]	; 0x411
 800cf18:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <OnRxWindow1TimerEvent+0x44>)
 800cf1e:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800cf22:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cf26:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800cf2a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800cf2e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800cf32:	f880 33c9 	strb.w	r3, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800cf36:	2300      	movs	r3, #0
 800cf38:	f880 33ca 	strb.w	r3, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800cf3c:	f880 33cb 	strb.w	r3, [r0, #971]	; 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800cf40:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800cf44:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800cf48:	f7ff ff94 	bl	800ce74 <RxWindowSetup>
}
 800cf4c:	bd08      	pop	{r3, pc}
 800cf4e:	bf00      	nop
 800cf50:	20003414 	.word	0x20003414
 800cf54:	20008000 	.word	0x20008000

0800cf58 <LoRaMacHandleNvm>:
{
 800cf58:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800cf5a:	4b30      	ldr	r3, [pc, #192]	; (800d01c <LoRaMacHandleNvm+0xc4>)
 800cf5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cf60:	b103      	cbz	r3, 800cf64 <LoRaMacHandleNvm+0xc>
}
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800cf66:	2124      	movs	r1, #36	; 0x24
 800cf68:	f005 ff5e 	bl	8012e28 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800cf6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf6e:	4283      	cmp	r3, r0
 800cf70:	d052      	beq.n	800d018 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800cf72:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800cf74:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800cf76:	211c      	movs	r1, #28
 800cf78:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cf7c:	f005 ff54 	bl	8012e28 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800cf80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf82:	4283      	cmp	r3, r0
 800cf84:	d002      	beq.n	800cf8c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800cf86:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800cf88:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800cf8c:	21fc      	movs	r1, #252	; 0xfc
 800cf8e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800cf92:	f005 ff49 	bl	8012e28 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800cf96:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800cf9a:	4283      	cmp	r3, r0
 800cf9c:	d003      	beq.n	800cfa6 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800cf9e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800cfa2:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800cfa6:	21d4      	movs	r1, #212	; 0xd4
 800cfa8:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800cfac:	f005 ff3c 	bl	8012e28 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800cfb0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800cfb4:	4283      	cmp	r3, r0
 800cfb6:	d003      	beq.n	800cfc0 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800cfb8:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800cfbc:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800cfc0:	21a0      	movs	r1, #160	; 0xa0
 800cfc2:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800cfc6:	f005 ff2f 	bl	8012e28 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800cfca:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800cfce:	4283      	cmp	r3, r0
 800cfd0:	d003      	beq.n	800cfda <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800cfd2:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800cfd6:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800cfda:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800cfde:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 800cfe2:	f005 ff21 	bl	8012e28 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800cfe6:	f8d4 375c 	ldr.w	r3, [r4, #1884]	; 0x75c
 800cfea:	4283      	cmp	r3, r0
 800cfec:	d003      	beq.n	800cff6 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800cfee:	f8c4 075c 	str.w	r0, [r4, #1884]	; 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800cff2:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800cff6:	2114      	movs	r1, #20
 800cff8:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800cffc:	f005 ff14 	bl	8012e28 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800d000:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
 800d004:	4283      	cmp	r3, r0
 800d006:	d003      	beq.n	800d010 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800d008:	f8c4 0774 	str.w	r0, [r4, #1908]	; 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800d00c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800d010:	4628      	mov	r0, r5
 800d012:	f7fe fb95 	bl	800b740 <CallNvmDataChangeCallback>
 800d016:	e7a4      	b.n	800cf62 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d018:	2500      	movs	r5, #0
 800d01a:	e7ac      	b.n	800cf76 <LoRaMacHandleNvm+0x1e>
 800d01c:	20003414 	.word	0x20003414

0800d020 <RestoreNvmData>:
{
 800d020:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d022:	4b3d      	ldr	r3, [pc, #244]	; (800d118 <RestoreNvmData+0xf8>)
 800d024:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d001      	beq.n	800d030 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800d02c:	2001      	movs	r0, #1
}
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800d030:	4c3a      	ldr	r4, [pc, #232]	; (800d11c <RestoreNvmData+0xfc>)
 800d032:	2124      	movs	r1, #36	; 0x24
 800d034:	4620      	mov	r0, r4
 800d036:	f005 fef7 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800d03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d03c:	4283      	cmp	r3, r0
 800d03e:	d001      	beq.n	800d044 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d040:	2017      	movs	r0, #23
 800d042:	e7f4      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800d044:	211c      	movs	r1, #28
 800d046:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d04a:	f005 feed 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800d04e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d050:	4283      	cmp	r3, r0
 800d052:	d001      	beq.n	800d058 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d054:	2017      	movs	r0, #23
 800d056:	e7ea      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800d058:	21fc      	movs	r1, #252	; 0xfc
 800d05a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d05e:	f005 fee3 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800d062:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800d066:	4283      	cmp	r3, r0
 800d068:	d001      	beq.n	800d06e <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d06a:	2017      	movs	r0, #23
 800d06c:	e7df      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800d06e:	21d4      	movs	r1, #212	; 0xd4
 800d070:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800d074:	f005 fed8 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800d078:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800d07c:	4283      	cmp	r3, r0
 800d07e:	d001      	beq.n	800d084 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d080:	2017      	movs	r0, #23
 800d082:	e7d4      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800d084:	21a0      	movs	r1, #160	; 0xa0
 800d086:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800d08a:	f005 fecd 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800d08e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800d092:	4283      	cmp	r3, r0
 800d094:	d001      	beq.n	800d09a <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d096:	2017      	movs	r0, #23
 800d098:	e7c9      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800d09a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 800d09e:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 800d0a2:	f005 fec1 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800d0a6:	f8d4 375c 	ldr.w	r3, [r4, #1884]	; 0x75c
 800d0aa:	4283      	cmp	r3, r0
 800d0ac:	d001      	beq.n	800d0b2 <RestoreNvmData+0x92>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d0ae:	2017      	movs	r0, #23
 800d0b0:	e7bd      	b.n	800d02e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800d0b2:	2114      	movs	r1, #20
 800d0b4:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800d0b8:	f005 feb6 	bl	8012e28 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800d0bc:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
 800d0c0:	4283      	cmp	r3, r0
 800d0c2:	d001      	beq.n	800d0c8 <RestoreNvmData+0xa8>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d0c4:	2017      	movs	r0, #23
 800d0c6:	e7b2      	b.n	800d02e <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800d0c8:	4625      	mov	r5, r4
 800d0ca:	4c15      	ldr	r4, [pc, #84]	; (800d120 <RestoreNvmData+0x100>)
 800d0cc:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f005 fe87 	bl	8012de6 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800d0d8:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800d0dc:	2100      	movs	r1, #0
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f005 fe99 	bl	8012e16 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <RestoreNvmData+0xf8>)
 800d0e6:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 800d0ea:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d0ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800d0f0:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d0f4:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800d0f8:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d102:	2202      	movs	r2, #2
 800d104:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <RestoreNvmData+0x104>)
 800d10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d10c:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800d110:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800d112:	2000      	movs	r0, #0
 800d114:	e78b      	b.n	800d02e <RestoreNvmData+0xe>
 800d116:	bf00      	nop
 800d118:	20003414 	.word	0x20003414
 800d11c:	20008778 	.word	0x20008778
 800d120:	20008000 	.word	0x20008000
 800d124:	08016690 	.word	0x08016690

0800d128 <OnRadioRxTimeout>:
{
 800d128:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d12a:	4a07      	ldr	r2, [pc, #28]	; (800d148 <OnRadioRxTimeout+0x20>)
 800d12c:	7813      	ldrb	r3, [r2, #0]
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d134:	f7fe faec 	bl	800b710 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d138:	4b04      	ldr	r3, [pc, #16]	; (800d14c <OnRadioRxTimeout+0x24>)
 800d13a:	2201      	movs	r2, #1
 800d13c:	2100      	movs	r1, #0
 800d13e:	2002      	movs	r0, #2
 800d140:	f007 fd2e 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d144:	bd08      	pop	{r3, pc}
 800d146:	bf00      	nop
 800d148:	20003410 	.word	0x20003410
 800d14c:	08015f78 	.word	0x08015f78

0800d150 <OnRadioTxTimeout>:
{
 800d150:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d152:	4a07      	ldr	r2, [pc, #28]	; (800d170 <OnRadioTxTimeout+0x20>)
 800d154:	7813      	ldrb	r3, [r2, #0]
 800d156:	f043 0304 	orr.w	r3, r3, #4
 800d15a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d15c:	f7fe fad8 	bl	800b710 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d160:	4b04      	ldr	r3, [pc, #16]	; (800d174 <OnRadioTxTimeout+0x24>)
 800d162:	2201      	movs	r2, #1
 800d164:	2100      	movs	r1, #0
 800d166:	2002      	movs	r0, #2
 800d168:	f007 fd1a 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d16c:	bd08      	pop	{r3, pc}
 800d16e:	bf00      	nop
 800d170:	20003410 	.word	0x20003410
 800d174:	08015f88 	.word	0x08015f88

0800d178 <OnRadioRxDone>:
{
 800d178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17c:	4680      	mov	r8, r0
 800d17e:	460f      	mov	r7, r1
 800d180:	4616      	mov	r6, r2
 800d182:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d184:	f007 ff44 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 800d188:	4c0a      	ldr	r4, [pc, #40]	; (800d1b4 <OnRadioRxDone+0x3c>)
 800d18a:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800d18c:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800d190:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800d192:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800d194:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800d196:	4a08      	ldr	r2, [pc, #32]	; (800d1b8 <OnRadioRxDone+0x40>)
 800d198:	7813      	ldrb	r3, [r2, #0]
 800d19a:	f043 0308 	orr.w	r3, r3, #8
 800d19e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d1a0:	f7fe fab6 	bl	800b710 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d1a4:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <OnRadioRxDone+0x44>)
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	2002      	movs	r0, #2
 800d1ac:	f007 fcf8 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1b4:	2000391c 	.word	0x2000391c
 800d1b8:	20003410 	.word	0x20003410
 800d1bc:	08015f98 	.word	0x08015f98

0800d1c0 <OnRadioTxDone>:
{
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d1c4:	f007 ff24 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 800d1c8:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <OnRadioTxDone+0x3c>)
 800d1ca:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d1cc:	466c      	mov	r4, sp
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f007 fe70 	bl	8014eb4 <SysTimeGet>
 800d1d4:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <OnRadioTxDone+0x40>)
 800d1d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d1da:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800d1de:	4a09      	ldr	r2, [pc, #36]	; (800d204 <OnRadioTxDone+0x44>)
 800d1e0:	7813      	ldrb	r3, [r2, #0]
 800d1e2:	f043 0310 	orr.w	r3, r3, #16
 800d1e6:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d1e8:	f7fe fa92 	bl	800b710 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <OnRadioTxDone+0x48>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	2002      	movs	r0, #2
 800d1f4:	f007 fcd4 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d1f8:	b002      	add	sp, #8
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	2000392c 	.word	0x2000392c
 800d200:	2000374c 	.word	0x2000374c
 800d204:	20003410 	.word	0x20003410
 800d208:	08015fa8 	.word	0x08015fa8

0800d20c <ResetMacParameters>:
{
 800d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20e:	b08f      	sub	sp, #60	; 0x3c
    if( isRejoin == false )
 800d210:	b918      	cbnz	r0, 800d21a <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800d212:	4b5b      	ldr	r3, [pc, #364]	; (800d380 <ResetMacParameters+0x174>)
 800d214:	2200      	movs	r2, #0
 800d216:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800d21a:	4c59      	ldr	r4, [pc, #356]	; (800d380 <ResetMacParameters+0x174>)
 800d21c:	2500      	movs	r5, #0
 800d21e:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800d220:	4e58      	ldr	r6, [pc, #352]	; (800d384 <ResetMacParameters+0x178>)
 800d222:	f886 540c 	strb.w	r5, [r6, #1036]	; 0x40c
    MacCtx.AckTimeoutRetries = 1;
 800d226:	2701      	movs	r7, #1
 800d228:	f886 740d 	strb.w	r7, [r6, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d22c:	f886 740e 	strb.w	r7, [r6, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 800d230:	f886 540f 	strb.w	r5, [r6, #1039]	; 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 800d234:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800d238:	f8a4 711e 	strh.w	r7, [r4, #286]	; 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d23c:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800d240:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d244:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800d248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800d24c:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800d250:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d254:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800d258:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800d25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d260:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d264:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800d268:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800d26c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d270:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800d274:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800d278:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800d27c:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800d280:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800d284:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800d288:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d28c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800d290:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d294:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800d298:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800d29c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800d2a0:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800d2a4:	f886 5410 	strb.w	r5, [r6, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800d2a8:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800d2ac:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800d2b0:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800d2b4:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800d2b8:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800d2bc:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800d2c0:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800d2c4:	f884 5142 	strb.w	r5, [r4, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800d2c8:	f884 5143 	strb.w	r5, [r4, #323]	; 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800d2cc:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d2d0:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800d2d4:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d2d6:	f504 7331 	add.w	r3, r4, #708	; 0x2c4
 800d2da:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d2dc:	a901      	add	r1, sp, #4
 800d2de:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d2e2:	f002 fc37 	bl	800fb54 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800d2e6:	f886 5411 	strb.w	r5, [r6, #1041]	; 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d2ea:	f886 53cc 	strb.w	r5, [r6, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d2ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d2f0:	f8c6 33d0 	str.w	r3, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d2f4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800d2f8:	f886 33dc 	strb.w	r3, [r6, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d2fc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800d300:	f886 33dd 	strb.w	r3, [r6, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d304:	f886 53de 	strb.w	r5, [r6, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d308:	f886 73df 	strb.w	r7, [r6, #991]	; 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d30c:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800d310:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800d314:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d31a:	f8dc 3000 	ldr.w	r3, [ip]
 800d31e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d320:	f886 73f2 	strb.w	r7, [r6, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d324:	2302      	movs	r3, #2
 800d326:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800d32a:	950c      	str	r5, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800d32c:	950d      	str	r5, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 800d32e:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800d332:	b11b      	cbz	r3, 800d33c <ResetMacParameters+0x130>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800d334:	685a      	ldr	r2, [r3, #4]
 800d336:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800d33c:	4b11      	ldr	r3, [pc, #68]	; (800d384 <ResetMacParameters+0x178>)
 800d33e:	f203 425c 	addw	r2, r3, #1116	; 0x45c
 800d342:	9204      	str	r2, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800d344:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800d348:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800d34a:	f503 6289 	add.w	r2, r3, #1096	; 0x448
 800d34e:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800d350:	f203 4381 	addw	r3, r3, #1153	; 0x481
 800d354:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800d356:	4a0a      	ldr	r2, [pc, #40]	; (800d380 <ResetMacParameters+0x174>)
 800d358:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800d35c:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800d35e:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800d362:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800d364:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800d368:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800d36a:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800d36e:	930b      	str	r3, [sp, #44]	; 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800d370:	f502 62ec 	add.w	r2, r2, #1888	; 0x760
 800d374:	a90c      	add	r1, sp, #48	; 0x30
 800d376:	a804      	add	r0, sp, #16
 800d378:	f001 fbb0 	bl	800eadc <LoRaMacClassBInit>
}
 800d37c:	b00f      	add	sp, #60	; 0x3c
 800d37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d380:	20008000 	.word	0x20008000
 800d384:	20003414 	.word	0x20003414

0800d388 <SwitchClass>:
{
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800d38c:	4b44      	ldr	r3, [pc, #272]	; (800d4a0 <SwitchClass+0x118>)
 800d38e:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800d392:	2d01      	cmp	r5, #1
 800d394:	d06d      	beq.n	800d472 <SwitchClass+0xea>
 800d396:	2d02      	cmp	r5, #2
 800d398:	d073      	beq.n	800d482 <SwitchClass+0xfa>
 800d39a:	b10d      	cbz	r5, 800d3a0 <SwitchClass+0x18>
 800d39c:	2003      	movs	r0, #3
}
 800d39e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800d3a0:	bb50      	cbnz	r0, 800d3f8 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d3a2:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800d3a6:	336c      	adds	r3, #108	; 0x6c
 800d3a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3ac:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800d3b0:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800d3b2:	2c01      	cmp	r4, #1
 800d3b4:	d022      	beq.n	800d3fc <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 800d3b6:	2c02      	cmp	r4, #2
 800d3b8:	d1f1      	bne.n	800d39e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d3ba:	4b39      	ldr	r3, [pc, #228]	; (800d4a0 <SwitchClass+0x118>)
 800d3bc:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d3c0:	4e38      	ldr	r6, [pc, #224]	; (800d4a4 <SwitchClass+0x11c>)
 800d3c2:	f506 7478 	add.w	r4, r6, #992	; 0x3e0
 800d3c6:	f506 7c73 	add.w	ip, r6, #972	; 0x3cc
 800d3ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d3ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3d0:	f8dc 3000 	ldr.w	r3, [ip]
 800d3d4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	f886 33f3 	strb.w	r3, [r6, #1011]	; 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d3dc:	2300      	movs	r3, #0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	dd15      	ble.n	800d40e <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 800d3e2:	4b30      	ldr	r3, [pc, #192]	; (800d4a4 <SwitchClass+0x11c>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                Radio.Sleep( );
 800d3ea:	4b2f      	ldr	r3, [pc, #188]	; (800d4a8 <SwitchClass+0x120>)
 800d3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ee:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800d3f0:	f7ff fd0e 	bl	800ce10 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	e7d2      	b.n	800d39e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d3f8:	2003      	movs	r0, #3
 800d3fa:	e7da      	b.n	800d3b2 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f001 fb83 	bl	800eb08 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800d402:	2800      	cmp	r0, #0
 800d404:	d1d7      	bne.n	800d3b6 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800d406:	4b26      	ldr	r3, [pc, #152]	; (800d4a0 <SwitchClass+0x118>)
 800d408:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d40c:	e7d3      	b.n	800d3b6 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d40e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d412:	4a23      	ldr	r2, [pc, #140]	; (800d4a0 <SwitchClass+0x118>)
 800d414:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d418:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800d41c:	b132      	cbz	r2, 800d42c <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800d41e:	4a20      	ldr	r2, [pc, #128]	; (800d4a0 <SwitchClass+0x118>)
 800d420:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d424:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d428:	2a02      	cmp	r2, #2
 800d42a:	d002      	beq.n	800d432 <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d42c:	3301      	adds	r3, #1
 800d42e:	b25b      	sxtb	r3, r3
 800d430:	e7d5      	b.n	800d3de <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800d432:	4a1b      	ldr	r2, [pc, #108]	; (800d4a0 <SwitchClass+0x118>)
 800d434:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800d438:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800d43c:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800d43e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d442:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d446:	4b17      	ldr	r3, [pc, #92]	; (800d4a4 <SwitchClass+0x11c>)
 800d448:	f893 0411 	ldrb.w	r0, [r3, #1041]	; 0x411
 800d44c:	f883 03e0 	strb.w	r0, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d450:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d454:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800d458:	f883 13f0 	strb.w	r1, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d45c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800d460:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d464:	2203      	movs	r2, #3
 800d466:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800d470:	e7b7      	b.n	800d3e2 <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800d472:	f001 fb49 	bl	800eb08 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800d476:	2800      	cmp	r0, #0
 800d478:	d191      	bne.n	800d39e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <SwitchClass+0x118>)
 800d47c:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d480:	e78d      	b.n	800d39e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800d482:	b958      	cbnz	r0, 800d49c <SwitchClass+0x114>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800d484:	4b07      	ldr	r3, [pc, #28]	; (800d4a4 <SwitchClass+0x11c>)
 800d486:	2206      	movs	r2, #6
 800d488:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d48c:	4b04      	ldr	r3, [pc, #16]	; (800d4a0 <SwitchClass+0x118>)
 800d48e:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800d492:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <SwitchClass+0x120>)
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800d498:	4620      	mov	r0, r4
 800d49a:	e780      	b.n	800d39e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d49c:	2003      	movs	r0, #3
 800d49e:	e77e      	b.n	800d39e <SwitchClass+0x16>
 800d4a0:	20008000 	.word	0x20008000
 800d4a4:	20003414 	.word	0x20003414
 800d4a8:	08016690 	.word	0x08016690

0800d4ac <SendReJoinReq>:
{
 800d4ac:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800d4ae:	28ff      	cmp	r0, #255	; 0xff
 800d4b0:	d003      	beq.n	800d4ba <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800d4b2:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800d4b4:	f7ff fb6a 	bl	800cb8c <ScheduleTx>
}
 800d4b8:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	f7ff ff64 	bl	800d388 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800d4c0:	4d0a      	ldr	r5, [pc, #40]	; (800d4ec <SendReJoinReq+0x40>)
 800d4c2:	2400      	movs	r4, #0
 800d4c4:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800d4c8:	1cab      	adds	r3, r5, #2
 800d4ca:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d4ce:	23ff      	movs	r3, #255	; 0xff
 800d4d0:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800d4d4:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800d4d8:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800d4dc:	f005 fb66 	bl	8012bac <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800d4e0:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800d4e4:	f005 fb44 	bl	8012b70 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800d4e8:	4620      	mov	r0, r4
            break;
 800d4ea:	e7e3      	b.n	800d4b4 <SendReJoinReq+0x8>
 800d4ec:	20003414 	.word	0x20003414

0800d4f0 <SetTxContinuousWave>:
{
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800d4f4:	4c11      	ldr	r4, [pc, #68]	; (800d53c <SetTxContinuousWave+0x4c>)
 800d4f6:	f894 3411 	ldrb.w	r3, [r4, #1041]	; 0x411
 800d4fa:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d4fe:	4b10      	ldr	r3, [pc, #64]	; (800d540 <SetTxContinuousWave+0x50>)
 800d500:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800d504:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d508:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800d50c:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d510:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800d514:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d516:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d51a:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800d51c:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800d520:	4669      	mov	r1, sp
 800d522:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d526:	f002 fc04 	bl	800fd32 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d52a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d52e:	f043 0302 	orr.w	r3, r3, #2
 800d532:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
}
 800d536:	2000      	movs	r0, #0
 800d538:	b004      	add	sp, #16
 800d53a:	bd10      	pop	{r4, pc}
 800d53c:	20003414 	.word	0x20003414
 800d540:	20008000 	.word	0x20008000

0800d544 <PrepareFrame>:
{
 800d544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d548:	b083      	sub	sp, #12
 800d54a:	4605      	mov	r5, r0
 800d54c:	460e      	mov	r6, r1
 800d54e:	4617      	mov	r7, r2
 800d550:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800d554:	4959      	ldr	r1, [pc, #356]	; (800d6bc <PrepareFrame+0x178>)
 800d556:	2200      	movs	r2, #0
 800d558:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800d55a:	f881 2410 	strb.w	r2, [r1, #1040]	; 0x410
    uint32_t fCntUp = 0;
 800d55e:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800d560:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800d562:	4698      	mov	r8, r3
 800d564:	b1cb      	cbz	r3, 800d59a <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d566:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800d6bc <PrepareFrame+0x178>
 800d56a:	4622      	mov	r2, r4
 800d56c:	4641      	mov	r1, r8
 800d56e:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800d572:	f005 fc38 	bl	8012de6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d576:	b2e0      	uxtb	r0, r4
 800d578:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d57c:	782b      	ldrb	r3, [r5, #0]
 800d57e:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800d582:	782b      	ldrb	r3, [r5, #0]
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	2b04      	cmp	r3, #4
 800d588:	d009      	beq.n	800d59e <PrepareFrame+0x5a>
 800d58a:	2b07      	cmp	r3, #7
 800d58c:	d079      	beq.n	800d682 <PrepareFrame+0x13e>
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d009      	beq.n	800d5a6 <PrepareFrame+0x62>
 800d592:	2002      	movs	r0, #2
}
 800d594:	b003      	add	sp, #12
 800d596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800d59a:	4614      	mov	r4, r2
 800d59c:	e7e3      	b.n	800d566 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800d59e:	4b47      	ldr	r3, [pc, #284]	; (800d6bc <PrepareFrame+0x178>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d5a6:	4b45      	ldr	r3, [pc, #276]	; (800d6bc <PrepareFrame+0x178>)
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d5ae:	1c9a      	adds	r2, r3, #2
 800d5b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d5b4:	22ff      	movs	r2, #255	; 0xff
 800d5b6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d5ba:	782a      	ldrb	r2, [r5, #0]
 800d5bc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d5c0:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d5c4:	4a3e      	ldr	r2, [pc, #248]	; (800d6c0 <PrepareFrame+0x17c>)
 800d5c6:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800d5ca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d5ce:	7832      	ldrb	r2, [r6, #0]
 800d5d0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d5d4:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d5d8:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800d5dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d5e0:	a801      	add	r0, sp, #4
 800d5e2:	f001 ff1b 	bl	800f41c <LoRaMacCryptoGetFCntUp>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d15c      	bne.n	800d6a4 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d5ea:	9a01      	ldr	r2, [sp, #4]
 800d5ec:	4b33      	ldr	r3, [pc, #204]	; (800d6bc <PrepareFrame+0x178>)
 800d5ee:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	f883 1439 	strb.w	r1, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 800d5f8:	f883 1438 	strb.w	r1, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d5fc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d600:	4668      	mov	r0, sp
 800d602:	f001 fbb3 	bl	800ed6c <LoRaMacCommandsGetSizeSerializedCmds>
 800d606:	2800      	cmp	r0, #0
 800d608:	d14e      	bne.n	800d6a8 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800d60a:	9b00      	ldr	r3, [sp, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d0c1      	beq.n	800d594 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d610:	4b2b      	ldr	r3, [pc, #172]	; (800d6c0 <PrepareFrame+0x17c>)
 800d612:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d616:	f7fe f8d7 	bl	800b7c8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d61a:	4b28      	ldr	r3, [pc, #160]	; (800d6bc <PrepareFrame+0x178>)
 800d61c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800d620:	b113      	cbz	r3, 800d628 <PrepareFrame+0xe4>
 800d622:	9a00      	ldr	r2, [sp, #0]
 800d624:	2a0f      	cmp	r2, #15
 800d626:	d915      	bls.n	800d654 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d628:	b113      	cbz	r3, 800d630 <PrepareFrame+0xec>
 800d62a:	9b00      	ldr	r3, [sp, #0]
 800d62c:	2b0f      	cmp	r3, #15
 800d62e:	d821      	bhi.n	800d674 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d630:	4a24      	ldr	r2, [pc, #144]	; (800d6c4 <PrepareFrame+0x180>)
 800d632:	4669      	mov	r1, sp
 800d634:	f001 fba6 	bl	800ed84 <LoRaMacCommandsSerializeCmds>
 800d638:	2800      	cmp	r0, #0
 800d63a:	d13b      	bne.n	800d6b4 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d63c:	4b1f      	ldr	r3, [pc, #124]	; (800d6bc <PrepareFrame+0x178>)
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d644:	f503 6291 	add.w	r2, r3, #1160	; 0x488
 800d648:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d64c:	9a00      	ldr	r2, [sp, #0]
 800d64e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800d652:	e79f      	b.n	800d594 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d654:	4a1c      	ldr	r2, [pc, #112]	; (800d6c8 <PrepareFrame+0x184>)
 800d656:	4669      	mov	r1, sp
 800d658:	200f      	movs	r0, #15
 800d65a:	f001 fb93 	bl	800ed84 <LoRaMacCommandsSerializeCmds>
 800d65e:	bb28      	cbnz	r0, 800d6ac <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d660:	7833      	ldrb	r3, [r6, #0]
 800d662:	9a00      	ldr	r2, [sp, #0]
 800d664:	f362 0303 	bfi	r3, r2, #0, #4
 800d668:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	4b13      	ldr	r3, [pc, #76]	; (800d6bc <PrepareFrame+0x178>)
 800d66e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800d672:	e78f      	b.n	800d594 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d674:	4a13      	ldr	r2, [pc, #76]	; (800d6c4 <PrepareFrame+0x180>)
 800d676:	4669      	mov	r1, sp
 800d678:	f001 fb84 	bl	800ed84 <LoRaMacCommandsSerializeCmds>
 800d67c:	b1c0      	cbz	r0, 800d6b0 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d67e:	2013      	movs	r0, #19
 800d680:	e788      	b.n	800d594 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d682:	f1b8 0f00 	cmp.w	r8, #0
 800d686:	d017      	beq.n	800d6b8 <PrepareFrame+0x174>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d083      	beq.n	800d594 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d68c:	4c0b      	ldr	r4, [pc, #44]	; (800d6bc <PrepareFrame+0x178>)
 800d68e:	b282      	uxth	r2, r0
 800d690:	4641      	mov	r1, r8
 800d692:	1ce0      	adds	r0, r4, #3
 800d694:	f005 fba7 	bl	8012de6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d698:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800d69c:	3301      	adds	r3, #1
 800d69e:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	e777      	b.n	800d594 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d6a4:	2012      	movs	r0, #18
 800d6a6:	e775      	b.n	800d594 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d6a8:	2013      	movs	r0, #19
 800d6aa:	e773      	b.n	800d594 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d6ac:	2013      	movs	r0, #19
 800d6ae:	e771      	b.n	800d594 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d6b0:	200a      	movs	r0, #10
 800d6b2:	e76f      	b.n	800d594 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d6b4:	2013      	movs	r0, #19
 800d6b6:	e76d      	b.n	800d594 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e76b      	b.n	800d594 <PrepareFrame+0x50>
 800d6bc:	20003414 	.word	0x20003414
 800d6c0:	20008000 	.word	0x20008000
 800d6c4:	2000389c 	.word	0x2000389c
 800d6c8:	2000352c 	.word	0x2000352c

0800d6cc <Send>:
{
 800d6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	b08a      	sub	sp, #40	; 0x28
 800d6d2:	4617      	mov	r7, r2
 800d6d4:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d6d6:	4c42      	ldr	r4, [pc, #264]	; (800d7e0 <Send+0x114>)
 800d6d8:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d6dc:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d6e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d6e2:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d6e4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d077      	beq.n	800d7dc <Send+0x110>
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d6f0:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800d6f4:	b90b      	cbnz	r3, 800d6fa <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d700:	4837      	ldr	r0, [pc, #220]	; (800d7e0 <Send+0x114>)
 800d702:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800d706:	f361 13c7 	bfi	r3, r1, #7, #1
 800d70a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d70e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800d712:	2b01      	cmp	r3, #1
 800d714:	d04f      	beq.n	800d7b6 <Send+0xea>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d716:	4b32      	ldr	r3, [pc, #200]	; (800d7e0 <Send+0x114>)
 800d718:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d71c:	b12b      	cbz	r3, 800d72a <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800d71e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d722:	f043 0320 	orr.w	r3, r3, #32
 800d726:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800d730:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d734:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800d736:	492a      	ldr	r1, [pc, #168]	; (800d7e0 <Send+0x114>)
 800d738:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800d73c:	f8ad 3018 	strh.w	r3, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800d740:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800d744:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d748:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d74c:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d750:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800d754:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800d758:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800d75c:	f88d 301f 	strb.w	r3, [sp, #31]
    adrNext.Version = Nvm.MacGroup2.Version;
 800d760:	f8d1 3128 	ldr.w	r3, [r1, #296]	; 0x128
 800d764:	9303      	str	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800d766:	ab08      	add	r3, sp, #32
 800d768:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800d76c:	3139      	adds	r1, #57	; 0x39
 800d76e:	a803      	add	r0, sp, #12
 800d770:	f001 f9ac 	bl	800eacc <LoRaMacAdrCalcNext>
 800d774:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d778:	f360 1386 	bfi	r3, r0, #6, #1
 800d77c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800d780:	f8cd 8000 	str.w	r8, [sp]
 800d784:	463b      	mov	r3, r7
 800d786:	4632      	mov	r2, r6
 800d788:	a909      	add	r1, sp, #36	; 0x24
 800d78a:	4628      	mov	r0, r5
 800d78c:	f7ff feda 	bl	800d544 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800d790:	4604      	mov	r4, r0
 800d792:	b108      	cbz	r0, 800d798 <Send+0xcc>
 800d794:	280a      	cmp	r0, #10
 800d796:	d104      	bne.n	800d7a2 <Send+0xd6>
        status = ScheduleTx( allowDelayedTx );
 800d798:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800d79c:	f7ff f9f6 	bl	800cb8c <ScheduleTx>
 800d7a0:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800d7a2:	b17c      	cbz	r4, 800d7c4 <Send+0xf8>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800d7a4:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <Send+0x114>)
 800d7a6:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800d7aa:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	b00a      	add	sp, #40	; 0x28
 800d7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800d7b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d7ba:	f043 0310 	orr.w	r3, r3, #16
 800d7be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d7c2:	e7a8      	b.n	800d716 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <Send+0x114>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800d7cc:	9a08      	ldr	r2, [sp, #32]
 800d7ce:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800d7d0:	f001 fa9a 	bl	800ed08 <LoRaMacCommandsRemoveNoneStickyCmds>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d0ea      	beq.n	800d7ae <Send+0xe2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d7d8:	2413      	movs	r4, #19
 800d7da:	e7e8      	b.n	800d7ae <Send+0xe2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800d7dc:	2407      	movs	r4, #7
 800d7de:	e7e6      	b.n	800d7ae <Send+0xe2>
 800d7e0:	20008000 	.word	0x20008000

0800d7e4 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800d7e4:	4b09      	ldr	r3, [pc, #36]	; (800d80c <LoRaMacIsBusy+0x28>)
 800d7e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d007      	beq.n	800d7fe <LoRaMacIsBusy+0x1a>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d7ee:	b943      	cbnz	r3, 800d802 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d7f0:	4b06      	ldr	r3, [pc, #24]	; (800d80c <LoRaMacIsBusy+0x28>)
 800d7f2:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d005      	beq.n	800d806 <LoRaMacIsBusy+0x22>
    return true;
 800d7fa:	2001      	movs	r0, #1
 800d7fc:	4770      	bx	lr
        return false;
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr
    return true;
 800d802:	2001      	movs	r0, #1
 800d804:	4770      	bx	lr
        return false;
 800d806:	2000      	movs	r0, #0
}
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	20003414 	.word	0x20003414

0800d810 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800d810:	4b04      	ldr	r3, [pc, #16]	; (800d824 <LoRaMacIsStopped+0x14>)
 800d812:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d816:	2b01      	cmp	r3, #1
 800d818:	d001      	beq.n	800d81e <LoRaMacIsStopped+0xe>
    return false;
 800d81a:	2000      	movs	r0, #0
 800d81c:	4770      	bx	lr
        return true;
 800d81e:	2001      	movs	r0, #1
}
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	20003414 	.word	0x20003414

0800d828 <LoRaMacProcess>:
{
 800d828:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800d82a:	f7fe ffe1 	bl	800c7f0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800d82e:	f001 f97b 	bl	800eb28 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800d832:	4b1f      	ldr	r3, [pc, #124]	; (800d8b0 <LoRaMacProcess+0x88>)
 800d834:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d838:	f013 0f10 	tst.w	r3, #16
 800d83c:	d10d      	bne.n	800d85a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800d83e:	f7fd fe71 	bl	800b524 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800d842:	4b1b      	ldr	r3, [pc, #108]	; (800d8b0 <LoRaMacProcess+0x88>)
 800d844:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d022      	beq.n	800d892 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800d84c:	4b18      	ldr	r3, [pc, #96]	; (800d8b0 <LoRaMacProcess+0x88>)
 800d84e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d852:	f013 0f20 	tst.w	r3, #32
 800d856:	d11f      	bne.n	800d898 <LoRaMacProcess+0x70>
}
 800d858:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800d85a:	2000      	movs	r0, #0
 800d85c:	f7fd fe5c 	bl	800b518 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800d860:	f7fd fe8e 	bl	800b580 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800d864:	f7fd ff78 	bl	800b758 <IsRequestPending>
 800d868:	b110      	cbz	r0, 800d870 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800d86a:	f7fe f8ab 	bl	800b9c4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800d86e:	b918      	cbnz	r0, 800d878 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800d870:	f7fe ffec 	bl	800c84c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800d874:	f7ff fa36 	bl	800cce4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800d878:	f7ff fa80 	bl	800cd7c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d87c:	2001      	movs	r0, #1
 800d87e:	f7fd fe4b 	bl	800b518 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d882:	4a0b      	ldr	r2, [pc, #44]	; (800d8b0 <LoRaMacProcess+0x88>)
 800d884:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d888:	f043 0320 	orr.w	r3, r3, #32
 800d88c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800d890:	e7d5      	b.n	800d83e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800d892:	f7ff fabd 	bl	800ce10 <OpenContinuousRxCWindow>
 800d896:	e7d9      	b.n	800d84c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800d898:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <LoRaMacProcess+0x88>)
 800d89a:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800d89e:	f36f 1245 	bfc	r2, #5, #1
 800d8a2:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 800d8a6:	4803      	ldr	r0, [pc, #12]	; (800d8b4 <LoRaMacProcess+0x8c>)
 800d8a8:	f7ff fb56 	bl	800cf58 <LoRaMacHandleNvm>
}
 800d8ac:	e7d4      	b.n	800d858 <LoRaMacProcess+0x30>
 800d8ae:	bf00      	nop
 800d8b0:	20003414 	.word	0x20003414
 800d8b4:	20008000 	.word	0x20008000

0800d8b8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	b08b      	sub	sp, #44	; 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	f000 81a0 	beq.w	800dc04 <LoRaMacInitialization+0x34c>
 800d8c4:	4688      	mov	r8, r1
 800d8c6:	4691      	mov	r9, r2
 800d8c8:	4607      	mov	r7, r0
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	f000 819c 	beq.w	800dc08 <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d8d0:	6803      	ldr	r3, [r0, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 819a 	beq.w	800dc0c <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d8d8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 8198 	beq.w	800dc10 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d8e0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f000 8196 	beq.w	800dc14 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800d8e8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	f000 8194 	beq.w	800dc18 <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	f002 f8ff 	bl	800faf4 <RegionIsActive>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	f000 8190 	beq.w	800dc1c <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	f001 fad5 	bl	800eeac <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d902:	4ccc      	ldr	r4, [pc, #816]	; (800dc34 <LoRaMacInitialization+0x37c>)
 800d904:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800d908:	2100      	movs	r1, #0
 800d90a:	4620      	mov	r0, r4
 800d90c:	f005 fa83 	bl	8012e16 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d910:	4dc9      	ldr	r5, [pc, #804]	; (800dc38 <LoRaMacInitialization+0x380>)
 800d912:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800d916:	2100      	movs	r1, #0
 800d918:	4628      	mov	r0, r5
 800d91a:	f005 fa7c 	bl	8012e16 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800d91e:	f04f 0a01 	mov.w	sl, #1
 800d922:	f885 a40e 	strb.w	sl, [r5, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 800d926:	f885 a40d 	strb.w	sl, [r5, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d92a:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d92e:	2600      	movs	r6, #0
 800d930:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800d934:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d938:	4bc0      	ldr	r3, [pc, #768]	; (800dc3c <LoRaMacInitialization+0x384>)
 800d93a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d93e:	230f      	movs	r3, #15
 800d940:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d944:	a908      	add	r1, sp, #32
 800d946:	4648      	mov	r0, r9
 800d948:	f002 f8de 	bl	800fb08 <RegionGetPhyParam>
 800d94c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d94e:	1b80      	subs	r0, r0, r6
 800d950:	bf18      	it	ne
 800d952:	2001      	movne	r0, #1
 800d954:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d958:	f04f 0b0a 	mov.w	fp, #10
 800d95c:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d960:	a908      	add	r1, sp, #32
 800d962:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d966:	f002 f8cf 	bl	800fb08 <RegionGetPhyParam>
 800d96a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d96c:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d970:	f04f 0906 	mov.w	r9, #6
 800d974:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d978:	a908      	add	r1, sp, #32
 800d97a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d97e:	f002 f8c3 	bl	800fb08 <RegionGetPhyParam>
 800d982:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d984:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d988:	2310      	movs	r3, #16
 800d98a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d98e:	a908      	add	r1, sp, #32
 800d990:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d994:	f002 f8b8 	bl	800fb08 <RegionGetPhyParam>
 800d998:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d99a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d99e:	2311      	movs	r3, #17
 800d9a0:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9a4:	a908      	add	r1, sp, #32
 800d9a6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d9aa:	f002 f8ad 	bl	800fb08 <RegionGetPhyParam>
 800d9ae:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d9b0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d9b4:	2312      	movs	r3, #18
 800d9b6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9ba:	a908      	add	r1, sp, #32
 800d9bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d9c0:	f002 f8a2 	bl	800fb08 <RegionGetPhyParam>
 800d9c4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d9c6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d9ca:	2313      	movs	r3, #19
 800d9cc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9d0:	a908      	add	r1, sp, #32
 800d9d2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d9d6:	f002 f897 	bl	800fb08 <RegionGetPhyParam>
 800d9da:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d9dc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d9e0:	2314      	movs	r3, #20
 800d9e2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9e6:	a908      	add	r1, sp, #32
 800d9e8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d9ec:	f002 f88c 	bl	800fb08 <RegionGetPhyParam>
 800d9f0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d9f2:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d9f6:	2317      	movs	r3, #23
 800d9f8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9fc:	a908      	add	r1, sp, #32
 800d9fe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da02:	f002 f881 	bl	800fb08 <RegionGetPhyParam>
 800da06:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800da08:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800da0c:	2318      	movs	r3, #24
 800da0e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da12:	a908      	add	r1, sp, #32
 800da14:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da18:	f002 f876 	bl	800fb08 <RegionGetPhyParam>
 800da1c:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800da1e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800da22:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800da26:	2319      	movs	r3, #25
 800da28:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da2c:	a908      	add	r1, sp, #32
 800da2e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da32:	f002 f869 	bl	800fb08 <RegionGetPhyParam>
 800da36:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800da38:	b2c0      	uxtb	r0, r0
 800da3a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800da3e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800da42:	231e      	movs	r3, #30
 800da44:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da48:	a908      	add	r1, sp, #32
 800da4a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da4e:	f002 f85b 	bl	800fb08 <RegionGetPhyParam>
 800da52:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800da54:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800da58:	231f      	movs	r3, #31
 800da5a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da5e:	a908      	add	r1, sp, #32
 800da60:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da64:	f002 f850 	bl	800fb08 <RegionGetPhyParam>
 800da68:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800da6a:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800da6e:	2320      	movs	r3, #32
 800da70:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da74:	eb0d 0103 	add.w	r1, sp, r3
 800da78:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da7c:	f002 f844 	bl	800fb08 <RegionGetPhyParam>
 800da80:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800da82:	9b07      	ldr	r3, [sp, #28]
 800da84:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800da88:	2321      	movs	r3, #33	; 0x21
 800da8a:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da8e:	a908      	add	r1, sp, #32
 800da90:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800da94:	f002 f838 	bl	800fb08 <RegionGetPhyParam>
 800da98:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800da9a:	9b07      	ldr	r3, [sp, #28]
 800da9c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800daa0:	230b      	movs	r3, #11
 800daa2:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800daa6:	a908      	add	r1, sp, #32
 800daa8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800daac:	f002 f82c 	bl	800fb08 <RegionGetPhyParam>
 800dab0:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800dab2:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800dab6:	230c      	movs	r3, #12
 800dab8:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dabc:	a908      	add	r1, sp, #32
 800dabe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dac2:	f002 f821 	bl	800fb08 <RegionGetPhyParam>
 800dac6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800dac8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800dacc:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800dad0:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800dad4:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800dad8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800dadc:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800dae0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800dae4:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800dae6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800daea:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800daec:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800daf0:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800daf2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800daf6:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800daf8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800dafc:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800dafe:	f884 a068 	strb.w	sl, [r4, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800db02:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800db06:	f504 7308 	add.w	r3, r4, #544	; 0x220
 800db0a:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800db0c:	f504 7331 	add.w	r3, r4, #708	; 0x2c4
 800db10:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800db12:	a904      	add	r1, sp, #16
 800db14:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800db18:	f002 f81c 	bl	800fb54 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800db1c:	f8c5 8348 	str.w	r8, [r5, #840]	; 0x348
    ResetMacParameters( false );
 800db20:	4630      	mov	r0, r6
 800db22:	f7ff fb73 	bl	800d20c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800db26:	f884 a119 	strb.w	sl, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800db2a:	f8c5 7344 	str.w	r7, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800db2e:	f885 6481 	strb.w	r6, [r5, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800db32:	f8c5 a340 	str.w	sl, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800db36:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800db38:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800db3a:	9600      	str	r6, [sp, #0]
 800db3c:	4b40      	ldr	r3, [pc, #256]	; (800dc40 <LoRaMacInitialization+0x388>)
 800db3e:	4632      	mov	r2, r6
 800db40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800db44:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800db48:	f007 fa44 	bl	8014fd4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800db4c:	9600      	str	r6, [sp, #0]
 800db4e:	4b3d      	ldr	r3, [pc, #244]	; (800dc44 <LoRaMacInitialization+0x38c>)
 800db50:	4632      	mov	r2, r6
 800db52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800db56:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800db5a:	f007 fa3b 	bl	8014fd4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800db5e:	9600      	str	r6, [sp, #0]
 800db60:	4b39      	ldr	r3, [pc, #228]	; (800dc48 <LoRaMacInitialization+0x390>)
 800db62:	4632      	mov	r2, r6
 800db64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800db68:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800db6c:	f007 fa32 	bl	8014fd4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800db70:	9600      	str	r6, [sp, #0]
 800db72:	4b36      	ldr	r3, [pc, #216]	; (800dc4c <LoRaMacInitialization+0x394>)
 800db74:	4632      	mov	r2, r6
 800db76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800db7a:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800db7e:	f007 fa29 	bl	8014fd4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800db82:	ae02      	add	r6, sp, #8
 800db84:	4630      	mov	r0, r6
 800db86:	f007 f9b7 	bl	8014ef8 <SysTimeGetMcuTime>
 800db8a:	f504 7390 	add.w	r3, r4, #288	; 0x120
 800db8e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800db92:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800db96:	4b2e      	ldr	r3, [pc, #184]	; (800dc50 <LoRaMacInitialization+0x398>)
 800db98:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800db9c:	4b2d      	ldr	r3, [pc, #180]	; (800dc54 <LoRaMacInitialization+0x39c>)
 800db9e:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800dba2:	4b2d      	ldr	r3, [pc, #180]	; (800dc58 <LoRaMacInitialization+0x3a0>)
 800dba4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800dba8:	4b2c      	ldr	r3, [pc, #176]	; (800dc5c <LoRaMacInitialization+0x3a4>)
 800dbaa:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800dbae:	4b2c      	ldr	r3, [pc, #176]	; (800dc60 <LoRaMacInitialization+0x3a8>)
 800dbb0:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800dbb4:	4b2b      	ldr	r3, [pc, #172]	; (800dc64 <LoRaMacInitialization+0x3ac>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800dbbc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800dbbe:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 800dbc2:	f004 fe2f 	bl	8012824 <SecureElementInit>
 800dbc6:	bb70      	cbnz	r0, 800dc26 <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f001 fc07 	bl	800f3dc <LoRaMacCryptoInit>
 800dbce:	bb60      	cbnz	r0, 800dc2a <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800dbd0:	f001 f830 	bl	800ec34 <LoRaMacCommandsInit>
 800dbd4:	bb58      	cbnz	r0, 800dc2e <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800dbd6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800dbda:	f001 fc65 	bl	800f4a8 <LoRaMacCryptoSetMulticastReference>
 800dbde:	4604      	mov	r4, r0
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d141      	bne.n	800dc68 <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800dbe4:	4d1f      	ldr	r5, [pc, #124]	; (800dc64 <LoRaMacInitialization+0x3ac>)
 800dbe6:	696b      	ldr	r3, [r5, #20]
 800dbe8:	4798      	blx	r3
 800dbea:	f005 f8e9 	bl	8012dc0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dbee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800dbf0:	4a10      	ldr	r2, [pc, #64]	; (800dc34 <LoRaMacInitialization+0x37c>)
 800dbf2:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800dbf6:	4798      	blx	r3
    Radio.Sleep( );
 800dbf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dbfa:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dbfc:	4650      	mov	r0, sl
 800dbfe:	f7fd fc8b 	bl	800b518 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800dc02:	e00c      	b.n	800dc1e <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc04:	2403      	movs	r4, #3
 800dc06:	e00a      	b.n	800dc1e <LoRaMacInitialization+0x366>
 800dc08:	2403      	movs	r4, #3
 800dc0a:	e008      	b.n	800dc1e <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc0c:	2403      	movs	r4, #3
 800dc0e:	e006      	b.n	800dc1e <LoRaMacInitialization+0x366>
 800dc10:	2403      	movs	r4, #3
 800dc12:	e004      	b.n	800dc1e <LoRaMacInitialization+0x366>
 800dc14:	2403      	movs	r4, #3
 800dc16:	e002      	b.n	800dc1e <LoRaMacInitialization+0x366>
 800dc18:	2403      	movs	r4, #3
 800dc1a:	e000      	b.n	800dc1e <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dc1c:	2409      	movs	r4, #9
}
 800dc1e:	4620      	mov	r0, r4
 800dc20:	b00b      	add	sp, #44	; 0x2c
 800dc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc26:	2411      	movs	r4, #17
 800dc28:	e7f9      	b.n	800dc1e <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc2a:	2411      	movs	r4, #17
 800dc2c:	e7f7      	b.n	800dc1e <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dc2e:	2413      	movs	r4, #19
 800dc30:	e7f5      	b.n	800dc1e <LoRaMacInitialization+0x366>
 800dc32:	bf00      	nop
 800dc34:	20008000 	.word	0x20008000
 800dc38:	20003414 	.word	0x20003414
 800dc3c:	01000300 	.word	0x01000300
 800dc40:	0800cc95 	.word	0x0800cc95
 800dc44:	0800cf11 	.word	0x0800cf11
 800dc48:	0800cec1 	.word	0x0800cec1
 800dc4c:	0800b945 	.word	0x0800b945
 800dc50:	0800d1c1 	.word	0x0800d1c1
 800dc54:	0800d179 	.word	0x0800d179
 800dc58:	0800b729 	.word	0x0800b729
 800dc5c:	0800d151 	.word	0x0800d151
 800dc60:	0800d129 	.word	0x0800d129
 800dc64:	08016690 	.word	0x08016690
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800dc68:	2411      	movs	r4, #17
 800dc6a:	e7d8      	b.n	800dc1e <LoRaMacInitialization+0x366>

0800dc6c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800dc6c:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800dc6e:	2400      	movs	r4, #0
 800dc70:	4b03      	ldr	r3, [pc, #12]	; (800dc80 <LoRaMacStart+0x14>)
 800dc72:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800dc76:	f7fd fc3b 	bl	800b4f0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	bf00      	nop
 800dc80:	20003414 	.word	0x20003414

0800dc84 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800dc84:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800dc86:	f7ff fdad 	bl	800d7e4 <LoRaMacIsBusy>
 800dc8a:	b130      	cbz	r0, 800dc9a <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <LoRaMacStop+0x38>)
 800dc8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d010      	beq.n	800dcb8 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800dc96:	2001      	movs	r0, #1
}
 800dc98:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <LoRaMacStop+0x3c>)
 800dc9c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d005      	beq.n	800dcb0 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <LoRaMacStop+0x38>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800dcac:	2000      	movs	r0, #0
 800dcae:	e7f3      	b.n	800dc98 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800dcb0:	4b04      	ldr	r3, [pc, #16]	; (800dcc4 <LoRaMacStop+0x40>)
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	4798      	blx	r3
 800dcb6:	e7f5      	b.n	800dca4 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800dcb8:	2000      	movs	r0, #0
 800dcba:	e7ed      	b.n	800dc98 <LoRaMacStop+0x14>
 800dcbc:	20003414 	.word	0x20003414
 800dcc0:	20008000 	.word	0x20008000
 800dcc4:	08016690 	.word	0x08016690

0800dcc8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800dcc8:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800dcca:	4c14      	ldr	r4, [pc, #80]	; (800dd1c <LoRaMacHalt+0x54>)
 800dccc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800dcd0:	f007 f9de 	bl	8015090 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800dcd4:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800dcd8:	f007 f9da 	bl	8015090 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dcdc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800dce0:	f007 f9d6 	bl	8015090 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800dce4:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 800dce8:	f007 f9d2 	bl	8015090 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800dcec:	f000 ff0a 	bl	800eb04 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	; (800dd20 <LoRaMacHalt+0x58>)
 800dcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800dcfc:	4e09      	ldr	r6, [pc, #36]	; (800dd24 <LoRaMacHalt+0x5c>)
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f7ff f92a 	bl	800cf58 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800dd04:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4807      	ldr	r0, [pc, #28]	; (800dd28 <LoRaMacHalt+0x60>)
 800dd0c:	f005 f86b 	bl	8012de6 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800dd10:	2301      	movs	r3, #1
 800dd12:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800dd16:	4628      	mov	r0, r5
 800dd18:	bd70      	pop	{r4, r5, r6, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20003414 	.word	0x20003414
 800dd20:	08016690 	.word	0x08016690
 800dd24:	20008000 	.word	0x20008000
 800dd28:	20008778 	.word	0x20008778

0800dd2c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800dd2c:	b530      	push	{r4, r5, lr}
 800dd2e:	b089      	sub	sp, #36	; 0x24
 800dd30:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dd32:	4b2e      	ldr	r3, [pc, #184]	; (800ddec <LoRaMacQueryTxPossible+0xc0>)
 800dd34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd36:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dd38:	f993 00dd 	ldrsb.w	r0, [r3, #221]	; 0xdd
 800dd3c:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dd40:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800dd44:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d047      	beq.n	800dde0 <LoRaMacQueryTxPossible+0xb4>
 800dd50:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800dd52:	4b26      	ldr	r3, [pc, #152]	; (800ddec <LoRaMacQueryTxPossible+0xc0>)
 800dd54:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 800dd58:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800dd60:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800dd64:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800dd68:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800dd6a:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800dd6e:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800dd72:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800dd76:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dd7a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800dd7e:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800dd82:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 800dd86:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dd8a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dd8e:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800dd92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800dd96:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800dd9a:	ab02      	add	r3, sp, #8
 800dd9c:	f10d 0206 	add.w	r2, sp, #6
 800dda0:	f10d 0107 	add.w	r1, sp, #7
 800dda4:	a803      	add	r0, sp, #12
 800dda6:	f000 fe91 	bl	800eacc <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ddaa:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800ddae:	f7fd fd0b 	bl	800b7c8 <GetMaxAppPayloadWithoutFOptsLength>
 800ddb2:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ddb4:	4668      	mov	r0, sp
 800ddb6:	f000 ffd9 	bl	800ed6c <LoRaMacCommandsGetSizeSerializedCmds>
 800ddba:	b998      	cbnz	r0, 800dde4 <LoRaMacQueryTxPossible+0xb8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2b0f      	cmp	r3, #15
 800ddc0:	d80a      	bhi.n	800ddd8 <LoRaMacQueryTxPossible+0xac>
 800ddc2:	786a      	ldrb	r2, [r5, #1]
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d807      	bhi.n	800ddd8 <LoRaMacQueryTxPossible+0xac>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ddcc:	9b00      	ldr	r3, [sp, #0]
 800ddce:	441c      	add	r4, r3
 800ddd0:	42a2      	cmp	r2, r4
 800ddd2:	d309      	bcc.n	800dde8 <LoRaMacQueryTxPossible+0xbc>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800ddd4:	b009      	add	sp, #36	; 0x24
 800ddd6:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800dddc:	2008      	movs	r0, #8
 800ddde:	e7f9      	b.n	800ddd4 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dde0:	2003      	movs	r0, #3
 800dde2:	e7f7      	b.n	800ddd4 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dde4:	2013      	movs	r0, #19
 800dde6:	e7f5      	b.n	800ddd4 <LoRaMacQueryTxPossible+0xa8>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800dde8:	2008      	movs	r0, #8
 800ddea:	e7f3      	b.n	800ddd4 <LoRaMacQueryTxPossible+0xa8>
 800ddec:	20008000 	.word	0x20008000

0800ddf0 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f000 8146 	beq.w	800e082 <LoRaMacMibGetRequestConfirm+0x292>
{
 800ddf6:	b510      	push	{r4, lr}
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800ddfc:	7800      	ldrb	r0, [r0, #0]
 800ddfe:	283f      	cmp	r0, #63	; 0x3f
 800de00:	f200 813b 	bhi.w	800e07a <LoRaMacMibGetRequestConfirm+0x28a>
 800de04:	e8df f010 	tbh	[pc, r0, lsl #1]
 800de08:	00450040 	.word	0x00450040
 800de0c:	0050004b 	.word	0x0050004b
 800de10:	005b0055 	.word	0x005b0055
 800de14:	01390061 	.word	0x01390061
 800de18:	01390139 	.word	0x01390139
 800de1c:	01390139 	.word	0x01390139
 800de20:	01390139 	.word	0x01390139
 800de24:	00690139 	.word	0x00690139
 800de28:	0075006f 	.word	0x0075006f
 800de2c:	008a0082 	.word	0x008a0082
 800de30:	009a0092 	.word	0x009a0092
 800de34:	00a200af 	.word	0x00a200af
 800de38:	00c200bc 	.word	0x00c200bc
 800de3c:	00cc00c7 	.word	0x00cc00c7
 800de40:	00d600d1 	.word	0x00d600d1
 800de44:	00e100db 	.word	0x00e100db
 800de48:	00e700ed 	.word	0x00e700ed
 800de4c:	00f800f3 	.word	0x00f800f3
 800de50:	010c00fe 	.word	0x010c00fe
 800de54:	01080104 	.word	0x01080104
 800de58:	01120139 	.word	0x01120139
 800de5c:	01390139 	.word	0x01390139
 800de60:	01390139 	.word	0x01390139
 800de64:	01390139 	.word	0x01390139
 800de68:	01390139 	.word	0x01390139
 800de6c:	01390139 	.word	0x01390139
 800de70:	01390139 	.word	0x01390139
 800de74:	01390139 	.word	0x01390139
 800de78:	011b0139 	.word	0x011b0139
 800de7c:	01270121 	.word	0x01270121
 800de80:	0133012d 	.word	0x0133012d
 800de84:	013f013f 	.word	0x013f013f
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800de88:	4b80      	ldr	r3, [pc, #512]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800de8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800de8e:	7123      	strb	r3, [r4, #4]
            break;
 800de90:	e0fa      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800de92:	4b7e      	ldr	r3, [pc, #504]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800de94:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800de98:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800de9a:	2000      	movs	r0, #0
            break;
 800de9c:	e0f4      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800de9e:	6860      	ldr	r0, [r4, #4]
 800dea0:	f004 fe66 	bl	8012b70 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dea4:	2000      	movs	r0, #0
            break;
 800dea6:	e0ef      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800dea8:	6860      	ldr	r0, [r4, #4]
 800deaa:	f004 fe7f 	bl	8012bac <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deae:	2000      	movs	r0, #0
            break;
 800deb0:	e0ea      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800deb2:	4b76      	ldr	r3, [pc, #472]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800deb4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800deb8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deba:	2000      	movs	r0, #0
            break;
 800debc:	e0e4      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800debe:	4b73      	ldr	r3, [pc, #460]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dec4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dec6:	2000      	movs	r0, #0
            break;
 800dec8:	e0de      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800deca:	1d21      	adds	r1, r4, #4
 800decc:	4b6f      	ldr	r3, [pc, #444]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dece:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800ded2:	f004 fe87 	bl	8012be4 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ded6:	2000      	movs	r0, #0
            break;
 800ded8:	e0d6      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800deda:	4b6c      	ldr	r3, [pc, #432]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dedc:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800dee0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dee2:	2000      	movs	r0, #0
            break;
 800dee4:	e0d0      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800dee6:	4b69      	ldr	r3, [pc, #420]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dee8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800deec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800deee:	2000      	movs	r0, #0
            break;
 800def0:	e0ca      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800def2:	231d      	movs	r3, #29
 800def4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800def8:	a902      	add	r1, sp, #8
 800defa:	4b64      	ldr	r3, [pc, #400]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800defc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800df00:	f001 fe02 	bl	800fb08 <RegionGetPhyParam>
 800df04:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800df06:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df08:	2000      	movs	r0, #0
            break;
 800df0a:	e0bd      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800df0c:	3404      	adds	r4, #4
 800df0e:	4b60      	ldr	r3, [pc, #384]	; (800e090 <LoRaMacMibGetRequestConfirm+0x2a0>)
 800df10:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df14:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df18:	2000      	movs	r0, #0
            break;
 800df1a:	e0b5      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800df1c:	3404      	adds	r4, #4
 800df1e:	4b5d      	ldr	r3, [pc, #372]	; (800e094 <LoRaMacMibGetRequestConfirm+0x2a4>)
 800df20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df24:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df28:	2000      	movs	r0, #0
            break;
 800df2a:	e0ad      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800df2c:	3404      	adds	r4, #4
 800df2e:	4b5a      	ldr	r3, [pc, #360]	; (800e098 <LoRaMacMibGetRequestConfirm+0x2a8>)
 800df30:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df34:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df38:	2000      	movs	r0, #0
            break;
 800df3a:	e0a5      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800df3c:	3404      	adds	r4, #4
 800df3e:	4b57      	ldr	r3, [pc, #348]	; (800e09c <LoRaMacMibGetRequestConfirm+0x2ac>)
 800df40:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df44:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df48:	2000      	movs	r0, #0
            break;
 800df4a:	e09d      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800df4c:	231b      	movs	r3, #27
 800df4e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df52:	a902      	add	r1, sp, #8
 800df54:	4b4d      	ldr	r3, [pc, #308]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800df56:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800df5a:	f001 fdd5 	bl	800fb08 <RegionGetPhyParam>
 800df5e:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800df60:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df62:	2000      	movs	r0, #0
            break;
 800df64:	e090      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800df66:	231a      	movs	r3, #26
 800df68:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df6c:	a902      	add	r1, sp, #8
 800df6e:	4b47      	ldr	r3, [pc, #284]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800df70:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800df74:	f001 fdc8 	bl	800fb08 <RegionGetPhyParam>
 800df78:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800df7a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df7c:	2000      	movs	r0, #0
            break;
 800df7e:	e083      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800df80:	4b42      	ldr	r3, [pc, #264]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800df82:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800df86:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df88:	2000      	movs	r0, #0
            break;
 800df8a:	e07d      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800df8c:	4b3f      	ldr	r3, [pc, #252]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800df8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df90:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df92:	2000      	movs	r0, #0
            break;
 800df94:	e078      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800df96:	4b3d      	ldr	r3, [pc, #244]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800df98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df9a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800df9c:	2000      	movs	r0, #0
            break;
 800df9e:	e073      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800dfa0:	4b3a      	ldr	r3, [pc, #232]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfa4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfa6:	2000      	movs	r0, #0
            break;
 800dfa8:	e06e      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800dfaa:	4b38      	ldr	r3, [pc, #224]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfb0:	2000      	movs	r0, #0
            break;
 800dfb2:	e069      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800dfb4:	4b35      	ldr	r3, [pc, #212]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfba:	2000      	movs	r0, #0
            break;
 800dfbc:	e064      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dfbe:	4b33      	ldr	r3, [pc, #204]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfc0:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800dfc4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfc6:	2000      	movs	r0, #0
            break;
 800dfc8:	e05e      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800dfca:	4b30      	ldr	r3, [pc, #192]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfcc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800dfd0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfd2:	2000      	movs	r0, #0
            break;
 800dfd4:	e058      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dfd6:	4b2d      	ldr	r3, [pc, #180]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfd8:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800dfdc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfde:	2000      	movs	r0, #0
            break;
 800dfe0:	e052      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800dfe2:	4b2a      	ldr	r3, [pc, #168]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dfe4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800dfe8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dfea:	2000      	movs	r0, #0
            break;
 800dfec:	e04c      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800dfee:	4b27      	ldr	r3, [pc, #156]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dff2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dff4:	2000      	movs	r0, #0
            break;
 800dff6:	e047      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800dff8:	4b24      	ldr	r3, [pc, #144]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800dffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dffe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e000:	2000      	movs	r0, #0
            break;
 800e002:	e041      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e004:	4b21      	ldr	r3, [pc, #132]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e00a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e00c:	2000      	movs	r0, #0
            break;
 800e00e:	e03b      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e010:	4b1e      	ldr	r3, [pc, #120]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e012:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e014:	2000      	movs	r0, #0
            break;
 800e016:	e037      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e018:	4b21      	ldr	r3, [pc, #132]	; (800e0a0 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800e01a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e01c:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e01e:	e033      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e020:	4b1a      	ldr	r3, [pc, #104]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e022:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e026:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e028:	2000      	movs	r0, #0
            break;
 800e02a:	e02d      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e02c:	4b17      	ldr	r3, [pc, #92]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e02e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800e032:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e034:	f001 fe9e 	bl	800fd74 <RegionGetVersion>
 800e038:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e03a:	2000      	movs	r0, #0
            break;
 800e03c:	e024      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e03e:	4b13      	ldr	r3, [pc, #76]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e044:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e046:	2000      	movs	r0, #0
            break;
 800e048:	e01e      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e04a:	4b10      	ldr	r3, [pc, #64]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e04c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800e050:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e052:	2000      	movs	r0, #0
            break;
 800e054:	e018      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e056:	4b0d      	ldr	r3, [pc, #52]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e058:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800e05c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e05e:	2000      	movs	r0, #0
            break;
 800e060:	e012      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e062:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e064:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800e068:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e06a:	2000      	movs	r0, #0
            break;
 800e06c:	e00c      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <LoRaMacMibGetRequestConfirm+0x29c>)
 800e070:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800e074:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e076:	2000      	movs	r0, #0
            break;
 800e078:	e006      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 fd46 	bl	800eb0c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800e080:	e002      	b.n	800e088 <LoRaMacMibGetRequestConfirm+0x298>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e082:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800e084:	4770      	bx	lr
    switch( mibGet->Type )
 800e086:	2018      	movs	r0, #24
}
 800e088:	b004      	add	sp, #16
 800e08a:	bd10      	pop	{r4, pc}
 800e08c:	20008000 	.word	0x20008000
 800e090:	2000806c 	.word	0x2000806c
 800e094:	200080b4 	.word	0x200080b4
 800e098:	20008074 	.word	0x20008074
 800e09c:	200080bc 	.word	0x200080bc
 800e0a0:	20008778 	.word	0x20008778

0800e0a4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800e0a4:	b530      	push	{r4, r5, lr}
 800e0a6:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800e0a8:	2800      	cmp	r0, #0
 800e0aa:	f000 8280 	beq.w	800e5ae <LoRaMacMibSetRequestConfirm+0x50a>
 800e0ae:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e0b0:	4b9f      	ldr	r3, [pc, #636]	; (800e330 <LoRaMacMibSetRequestConfirm+0x28c>)
 800e0b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e0b6:	f013 0f02 	tst.w	r3, #2
 800e0ba:	f040 827a 	bne.w	800e5b2 <LoRaMacMibSetRequestConfirm+0x50e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800e0be:	7804      	ldrb	r4, [r0, #0]
 800e0c0:	2c3f      	cmp	r4, #63	; 0x3f
 800e0c2:	f200 8270 	bhi.w	800e5a6 <LoRaMacMibSetRequestConfirm+0x502>
 800e0c6:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e0ca:	0040      	.short	0x0040
 800e0cc:	004e0045 	.word	0x004e0045
 800e0d0:	005f0057 	.word	0x005f0057
 800e0d4:	006b0065 	.word	0x006b0065
 800e0d8:	0087007a 	.word	0x0087007a
 800e0dc:	00a10094 	.word	0x00a10094
 800e0e0:	00bb00ae 	.word	0x00bb00ae
 800e0e4:	00d500c8 	.word	0x00d500c8
 800e0e8:	00ed00e2 	.word	0x00ed00e2
 800e0ec:	00f3026e 	.word	0x00f3026e
 800e0f0:	013d0119 	.word	0x013d0119
 800e0f4:	0195016b 	.word	0x0195016b
 800e0f8:	01a50185 	.word	0x01a50185
 800e0fc:	01b501b0 	.word	0x01b501b0
 800e100:	01bf01ba 	.word	0x01bf01ba
 800e104:	01c901c4 	.word	0x01c901c4
 800e108:	020c01de 	.word	0x020c01de
 800e10c:	022101f7 	.word	0x022101f7
 800e110:	02300228 	.word	0x02300228
 800e114:	023c0236 	.word	0x023c0236
 800e118:	0240026e 	.word	0x0240026e
 800e11c:	026e026e 	.word	0x026e026e
 800e120:	026e026e 	.word	0x026e026e
 800e124:	026e026e 	.word	0x026e026e
 800e128:	026e026e 	.word	0x026e026e
 800e12c:	026e026e 	.word	0x026e026e
 800e130:	026e026e 	.word	0x026e026e
 800e134:	026e026e 	.word	0x026e026e
 800e138:	026e026e 	.word	0x026e026e
 800e13c:	02560250 	.word	0x02560250
 800e140:	0262025c 	.word	0x0262025c
 800e144:	02780268 	.word	0x02780268
 800e148:	0278      	.short	0x0278
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e14a:	7900      	ldrb	r0, [r0, #4]
 800e14c:	f7ff f91c 	bl	800d388 <SwitchClass>
 800e150:	4604      	mov	r4, r0
            break;
 800e152:	e22f      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e154:	7903      	ldrb	r3, [r0, #4]
 800e156:	2b02      	cmp	r3, #2
 800e158:	f000 8231 	beq.w	800e5be <LoRaMacMibSetRequestConfirm+0x51a>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800e15c:	4a75      	ldr	r2, [pc, #468]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e15e:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e162:	2400      	movs	r4, #0
 800e164:	e226      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e166:	6840      	ldr	r0, [r0, #4]
 800e168:	f004 fcf4 	bl	8012b54 <SecureElementSetDevEui>
 800e16c:	4604      	mov	r4, r0
 800e16e:	2800      	cmp	r0, #0
 800e170:	f000 8220 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e174:	2403      	movs	r4, #3
 800e176:	e21d      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e178:	6840      	ldr	r0, [r0, #4]
 800e17a:	f004 fd07 	bl	8012b8c <SecureElementSetJoinEui>
 800e17e:	2800      	cmp	r0, #0
 800e180:	f040 8218 	bne.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e184:	4604      	mov	r4, r0
 800e186:	e215      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800e188:	7902      	ldrb	r2, [r0, #4]
 800e18a:	4b6a      	ldr	r3, [pc, #424]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e18c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e190:	2400      	movs	r4, #0
            break;
 800e192:	e20f      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800e194:	6842      	ldr	r2, [r0, #4]
 800e196:	4b67      	ldr	r3, [pc, #412]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e198:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e19c:	2400      	movs	r4, #0
            break;
 800e19e:	e209      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800e1a0:	6841      	ldr	r1, [r0, #4]
 800e1a2:	4b64      	ldr	r3, [pc, #400]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e1a4:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
 800e1a8:	f004 fd0e 	bl	8012bc8 <SecureElementSetDevAddr>
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	f040 8207 	bne.w	800e5c2 <LoRaMacMibSetRequestConfirm+0x51e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800e1b4:	686a      	ldr	r2, [r5, #4]
 800e1b6:	4b5f      	ldr	r3, [pc, #380]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e1b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e1bc:	e1fa      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e1be:	6841      	ldr	r1, [r0, #4]
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	f000 8200 	beq.w	800e5c6 <LoRaMacMibSetRequestConfirm+0x522>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f001 fa7e 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f000 81f0 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1d4:	2411      	movs	r4, #17
 800e1d6:	e1ed      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e1d8:	6841      	ldr	r1, [r0, #4]
 800e1da:	2900      	cmp	r1, #0
 800e1dc:	f000 81f5 	beq.w	800e5ca <LoRaMacMibSetRequestConfirm+0x526>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e1e0:	2001      	movs	r0, #1
 800e1e2:	f001 fa71 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	f000 81e3 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e1ee:	2411      	movs	r4, #17
 800e1f0:	e1e0      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800e1f2:	6841      	ldr	r1, [r0, #4]
 800e1f4:	2900      	cmp	r1, #0
 800e1f6:	f000 81ea 	beq.w	800e5ce <LoRaMacMibSetRequestConfirm+0x52a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800e1fa:	2008      	movs	r0, #8
 800e1fc:	f001 fa64 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e200:	4604      	mov	r4, r0
 800e202:	2800      	cmp	r0, #0
 800e204:	f000 81d6 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e208:	2411      	movs	r4, #17
 800e20a:	e1d3      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e20c:	6841      	ldr	r1, [r0, #4]
 800e20e:	2900      	cmp	r1, #0
 800e210:	f000 81df 	beq.w	800e5d2 <LoRaMacMibSetRequestConfirm+0x52e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e214:	2009      	movs	r0, #9
 800e216:	f001 fa57 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e21a:	4604      	mov	r4, r0
 800e21c:	2800      	cmp	r0, #0
 800e21e:	f000 81c9 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e222:	2411      	movs	r4, #17
 800e224:	e1c6      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e226:	6841      	ldr	r1, [r0, #4]
 800e228:	2900      	cmp	r1, #0
 800e22a:	f000 81d4 	beq.w	800e5d6 <LoRaMacMibSetRequestConfirm+0x532>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e22e:	200c      	movs	r0, #12
 800e230:	f001 fa4a 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e234:	4604      	mov	r4, r0
 800e236:	2800      	cmp	r0, #0
 800e238:	f000 81bc 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e23c:	2411      	movs	r4, #17
 800e23e:	e1b9      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800e240:	6841      	ldr	r1, [r0, #4]
 800e242:	2900      	cmp	r1, #0
 800e244:	f000 81c9 	beq.w	800e5da <LoRaMacMibSetRequestConfirm+0x536>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e248:	200d      	movs	r0, #13
 800e24a:	f001 fa3d 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e24e:	4604      	mov	r4, r0
 800e250:	2800      	cmp	r0, #0
 800e252:	f000 81af 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e256:	2411      	movs	r4, #17
 800e258:	e1ac      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800e25a:	6841      	ldr	r1, [r0, #4]
 800e25c:	2900      	cmp	r1, #0
 800e25e:	f000 81be 	beq.w	800e5de <LoRaMacMibSetRequestConfirm+0x53a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e262:	200e      	movs	r0, #14
 800e264:	f001 fa30 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e268:	4604      	mov	r4, r0
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f000 81a2 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e270:	2411      	movs	r4, #17
 800e272:	e19f      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e274:	6841      	ldr	r1, [r0, #4]
 800e276:	2900      	cmp	r1, #0
 800e278:	f000 81b3 	beq.w	800e5e2 <LoRaMacMibSetRequestConfirm+0x53e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e27c:	200f      	movs	r0, #15
 800e27e:	f001 fa23 	bl	800f6c8 <LoRaMacCryptoSetKey>
 800e282:	4604      	mov	r4, r0
 800e284:	2800      	cmp	r0, #0
 800e286:	f000 8195 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e28a:	2411      	movs	r4, #17
 800e28c:	e192      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e28e:	7900      	ldrb	r0, [r0, #4]
 800e290:	4b28      	ldr	r3, [pc, #160]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e292:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e296:	4c28      	ldr	r4, [pc, #160]	; (800e338 <LoRaMacMibSetRequestConfirm+0x294>)
 800e298:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e29a:	4798      	blx	r3
            Radio.Sleep( );
 800e29c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e29e:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2a0:	2400      	movs	r4, #0
            break;
 800e2a2:	e187      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e2a4:	7902      	ldrb	r2, [r0, #4]
 800e2a6:	4b23      	ldr	r3, [pc, #140]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e2a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2ac:	2400      	movs	r4, #0
            break;
 800e2ae:	e181      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e2b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e2b4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e2b8:	4b1e      	ldr	r3, [pc, #120]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e2ba:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e2be:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800e2c2:	2207      	movs	r2, #7
 800e2c4:	a901      	add	r1, sp, #4
 800e2c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e2ca:	f001 fc51 	bl	800fb70 <RegionVerify>
 800e2ce:	b908      	cbnz	r0, 800e2d4 <LoRaMacMibSetRequestConfirm+0x230>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e2d0:	2403      	movs	r4, #3
 800e2d2:	e16f      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800e2d4:	686b      	ldr	r3, [r5, #4]
 800e2d6:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800e2d8:	2200      	movs	r2, #0
 800e2da:	a901      	add	r1, sp, #4
 800e2dc:	4b15      	ldr	r3, [pc, #84]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e2de:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e2e2:	f001 fc45 	bl	800fb70 <RegionVerify>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f000 817d 	beq.w	800e5e6 <LoRaMacMibSetRequestConfirm+0x542>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e2ec:	4b13      	ldr	r3, [pc, #76]	; (800e33c <LoRaMacMibSetRequestConfirm+0x298>)
 800e2ee:	3504      	adds	r5, #4
 800e2f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e2f4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2f8:	2400      	movs	r4, #0
 800e2fa:	e15b      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e2fc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e300:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e304:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <LoRaMacMibSetRequestConfirm+0x290>)
 800e306:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e30a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e30e:	2207      	movs	r2, #7
 800e310:	a901      	add	r1, sp, #4
 800e312:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e316:	f001 fc2b 	bl	800fb70 <RegionVerify>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f000 8165 	beq.w	800e5ea <LoRaMacMibSetRequestConfirm+0x546>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <LoRaMacMibSetRequestConfirm+0x29c>)
 800e322:	3504      	adds	r5, #4
 800e324:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e328:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e32c:	2400      	movs	r4, #0
 800e32e:	e141      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
 800e330:	20003414 	.word	0x20003414
 800e334:	20008000 	.word	0x20008000
 800e338:	08016690 	.word	0x08016690
 800e33c:	2000806c 	.word	0x2000806c
 800e340:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e344:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e348:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e34c:	4bb1      	ldr	r3, [pc, #708]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e34e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e352:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e356:	2207      	movs	r2, #7
 800e358:	a901      	add	r1, sp, #4
 800e35a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e35e:	f001 fc07 	bl	800fb70 <RegionVerify>
 800e362:	2800      	cmp	r0, #0
 800e364:	f000 8143 	beq.w	800e5ee <LoRaMacMibSetRequestConfirm+0x54a>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e368:	4baa      	ldr	r3, [pc, #680]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e36a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800e36e:	3504      	adds	r5, #4
 800e370:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e374:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e378:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	d001      	beq.n	800e384 <LoRaMacMibSetRequestConfirm+0x2e0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e380:	2400      	movs	r4, #0
 800e382:	e117      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e384:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800e388:	f893 412c 	ldrb.w	r4, [r3, #300]	; 0x12c
 800e38c:	2c00      	cmp	r4, #0
 800e38e:	f000 8111 	beq.w	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800e392:	4ba1      	ldr	r3, [pc, #644]	; (800e618 <LoRaMacMibSetRequestConfirm+0x574>)
 800e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e396:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800e398:	f7fe fd3a 	bl	800ce10 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e39c:	2400      	movs	r4, #0
 800e39e:	e109      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e3a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e3a4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e3a8:	4b9a      	ldr	r3, [pc, #616]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e3aa:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e3ae:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e3b2:	2207      	movs	r2, #7
 800e3b4:	a901      	add	r1, sp, #4
 800e3b6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e3ba:	f001 fbd9 	bl	800fb70 <RegionVerify>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f000 8117 	beq.w	800e5f2 <LoRaMacMibSetRequestConfirm+0x54e>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e3c4:	4b95      	ldr	r3, [pc, #596]	; (800e61c <LoRaMacMibSetRequestConfirm+0x578>)
 800e3c6:	3504      	adds	r5, #4
 800e3c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e3cc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3d0:	2400      	movs	r4, #0
 800e3d2:	e0ef      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e3d4:	6843      	ldr	r3, [r0, #4]
 800e3d6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e3de:	a902      	add	r1, sp, #8
 800e3e0:	4b8c      	ldr	r3, [pc, #560]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e3e2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e3e6:	f001 fbe1 	bl	800fbac <RegionChanMaskSet>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	f000 8103 	beq.w	800e5f6 <LoRaMacMibSetRequestConfirm+0x552>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3f0:	2400      	movs	r4, #0
 800e3f2:	e0df      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e3f4:	6843      	ldr	r3, [r0, #4]
 800e3f6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e3fe:	a902      	add	r1, sp, #8
 800e400:	4b84      	ldr	r3, [pc, #528]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e402:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e406:	f001 fbd1 	bl	800fbac <RegionChanMaskSet>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	f000 80f5 	beq.w	800e5fa <LoRaMacMibSetRequestConfirm+0x556>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e410:	2400      	movs	r4, #0
 800e412:	e0cf      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e414:	7902      	ldrb	r2, [r0, #4]
 800e416:	1e53      	subs	r3, r2, #1
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b0e      	cmp	r3, #14
 800e41c:	f200 80ef 	bhi.w	800e5fe <LoRaMacMibSetRequestConfirm+0x55a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e420:	4b7c      	ldr	r3, [pc, #496]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e422:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e426:	2400      	movs	r4, #0
 800e428:	e0c4      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e42a:	6842      	ldr	r2, [r0, #4]
 800e42c:	4b79      	ldr	r3, [pc, #484]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e42e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e430:	2400      	movs	r4, #0
            break;
 800e432:	e0bf      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e434:	6842      	ldr	r2, [r0, #4]
 800e436:	4b77      	ldr	r3, [pc, #476]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e438:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e43a:	2400      	movs	r4, #0
            break;
 800e43c:	e0ba      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e43e:	6842      	ldr	r2, [r0, #4]
 800e440:	4b74      	ldr	r3, [pc, #464]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e442:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e444:	2400      	movs	r4, #0
            break;
 800e446:	e0b5      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e448:	6842      	ldr	r2, [r0, #4]
 800e44a:	4b72      	ldr	r3, [pc, #456]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e44c:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e44e:	2400      	movs	r4, #0
            break;
 800e450:	e0b0      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e452:	6842      	ldr	r2, [r0, #4]
 800e454:	4b6f      	ldr	r3, [pc, #444]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e456:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e458:	2400      	movs	r4, #0
            break;
 800e45a:	e0ab      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e45c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e460:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800e464:	2206      	movs	r2, #6
 800e466:	a901      	add	r1, sp, #4
 800e468:	4b6a      	ldr	r3, [pc, #424]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e46a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e46e:	f001 fb7f 	bl	800fb70 <RegionVerify>
 800e472:	2800      	cmp	r0, #0
 800e474:	f000 80c5 	beq.w	800e602 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800e478:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e47c:	4b65      	ldr	r3, [pc, #404]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e47e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e482:	2400      	movs	r4, #0
 800e484:	e096      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e486:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e48a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e48e:	4b61      	ldr	r3, [pc, #388]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e490:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e494:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e498:	2205      	movs	r2, #5
 800e49a:	a901      	add	r1, sp, #4
 800e49c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e4a0:	f001 fb66 	bl	800fb70 <RegionVerify>
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	f000 80ae 	beq.w	800e606 <LoRaMacMibSetRequestConfirm+0x562>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e4aa:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e4ae:	4b59      	ldr	r3, [pc, #356]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e4b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e4b4:	2400      	movs	r4, #0
 800e4b6:	e07d      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e4b8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e4bc:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	a901      	add	r1, sp, #4
 800e4c4:	4b53      	ldr	r3, [pc, #332]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e4c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e4ca:	f001 fb51 	bl	800fb70 <RegionVerify>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f000 809b 	beq.w	800e60a <LoRaMacMibSetRequestConfirm+0x566>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800e4d4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e4d8:	4b4e      	ldr	r3, [pc, #312]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e4da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e4de:	2400      	movs	r4, #0
 800e4e0:	e068      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e4e2:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e4e6:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800e4ea:	2209      	movs	r2, #9
 800e4ec:	a901      	add	r1, sp, #4
 800e4ee:	4b49      	ldr	r3, [pc, #292]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e4f0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e4f4:	f001 fb3c 	bl	800fb70 <RegionVerify>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	f000 8088 	beq.w	800e60e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800e4fe:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e502:	4b44      	ldr	r3, [pc, #272]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e508:	2400      	movs	r4, #0
 800e50a:	e053      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e50c:	6842      	ldr	r2, [r0, #4]
 800e50e:	4b41      	ldr	r3, [pc, #260]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800e514:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e516:	2400      	movs	r4, #0
            break;
 800e518:	e04c      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e51a:	7902      	ldrb	r2, [r0, #4]
 800e51c:	4b3d      	ldr	r3, [pc, #244]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e51e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800e522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e526:	2400      	movs	r4, #0
            break;
 800e528:	e044      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e52a:	6842      	ldr	r2, [r0, #4]
 800e52c:	4b39      	ldr	r3, [pc, #228]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e52e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e532:	2400      	movs	r4, #0
            break;
 800e534:	e03e      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e536:	6842      	ldr	r2, [r0, #4]
 800e538:	4b36      	ldr	r3, [pc, #216]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e53a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e53e:	2400      	movs	r4, #0
            break;
 800e540:	e038      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800e542:	f7fe fd6d 	bl	800d020 <RestoreNvmData>
 800e546:	4604      	mov	r4, r0
            break;
 800e548:	e034      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e54a:	7983      	ldrb	r3, [r0, #6]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d901      	bls.n	800e554 <LoRaMacMibSetRequestConfirm+0x4b0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e550:	2403      	movs	r4, #3
 800e552:	e02f      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800e554:	6842      	ldr	r2, [r0, #4]
 800e556:	4b2f      	ldr	r3, [pc, #188]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e558:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e55c:	6840      	ldr	r0, [r0, #4]
 800e55e:	f000 ff55 	bl	800f40c <LoRaMacCryptoSetLrWanVersion>
 800e562:	4604      	mov	r4, r0
 800e564:	b330      	cbz	r0, 800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e566:	2411      	movs	r4, #17
 800e568:	e024      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800e56a:	6842      	ldr	r2, [r0, #4]
 800e56c:	4b29      	ldr	r3, [pc, #164]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e56e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e572:	2400      	movs	r4, #0
            break;
 800e574:	e01e      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e576:	8882      	ldrh	r2, [r0, #4]
 800e578:	4b26      	ldr	r3, [pc, #152]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e57a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e57e:	2400      	movs	r4, #0
            break;
 800e580:	e018      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e582:	8882      	ldrh	r2, [r0, #4]
 800e584:	4b23      	ldr	r3, [pc, #140]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e586:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e58a:	2400      	movs	r4, #0
            break;
 800e58c:	e012      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e58e:	8882      	ldrh	r2, [r0, #4]
 800e590:	4b20      	ldr	r3, [pc, #128]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e592:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e596:	2400      	movs	r4, #0
            break;
 800e598:	e00c      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e59a:	8882      	ldrh	r2, [r0, #4]
 800e59c:	4b1d      	ldr	r3, [pc, #116]	; (800e614 <LoRaMacMibSetRequestConfirm+0x570>)
 800e59e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e5a2:	2400      	movs	r4, #0
            break;
 800e5a4:	e006      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e5a6:	f000 fab3 	bl	800eb10 <LoRaMacMibClassBSetRequestConfirm>
 800e5aa:	4604      	mov	r4, r0
            break;
 800e5ac:	e002      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ae:	2403      	movs	r4, #3
 800e5b0:	e000      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_BUSY;
 800e5b2:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	b005      	add	sp, #20
 800e5b8:	bd30      	pop	{r4, r5, pc}
    switch( mibSet->Type )
 800e5ba:	2418      	movs	r4, #24
 800e5bc:	e7fa      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5be:	2403      	movs	r4, #3
 800e5c0:	e7f8      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5c2:	2403      	movs	r4, #3
 800e5c4:	e7f6      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5c6:	2403      	movs	r4, #3
 800e5c8:	e7f4      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ca:	2403      	movs	r4, #3
 800e5cc:	e7f2      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ce:	2403      	movs	r4, #3
 800e5d0:	e7f0      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5d2:	2403      	movs	r4, #3
 800e5d4:	e7ee      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5d6:	2403      	movs	r4, #3
 800e5d8:	e7ec      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5da:	2403      	movs	r4, #3
 800e5dc:	e7ea      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5de:	2403      	movs	r4, #3
 800e5e0:	e7e8      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5e2:	2403      	movs	r4, #3
 800e5e4:	e7e6      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5e6:	2403      	movs	r4, #3
 800e5e8:	e7e4      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ea:	2403      	movs	r4, #3
 800e5ec:	e7e2      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5ee:	2403      	movs	r4, #3
 800e5f0:	e7e0      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5f2:	2403      	movs	r4, #3
 800e5f4:	e7de      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5f6:	2403      	movs	r4, #3
 800e5f8:	e7dc      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5fa:	2403      	movs	r4, #3
 800e5fc:	e7da      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5fe:	2403      	movs	r4, #3
 800e600:	e7d8      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e602:	2403      	movs	r4, #3
 800e604:	e7d6      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e606:	2403      	movs	r4, #3
 800e608:	e7d4      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e60a:	2403      	movs	r4, #3
 800e60c:	e7d2      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e60e:	2403      	movs	r4, #3
 800e610:	e7d0      	b.n	800e5b4 <LoRaMacMibSetRequestConfirm+0x510>
 800e612:	bf00      	nop
 800e614:	20008000 	.word	0x20008000
 800e618:	08016690 	.word	0x08016690
 800e61c:	200080bc 	.word	0x200080bc

0800e620 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e620:	b570      	push	{r4, r5, r6, lr}
 800e622:	b084      	sub	sp, #16
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e624:	2300      	movs	r3, #0
 800e626:	f8ad 3008 	strh.w	r3, [sp, #8]

    if( mlmeRequest == NULL )
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f000 80d0 	beq.w	800e7d0 <LoRaMacMlmeRequest+0x1b0>
 800e630:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800e632:	f7ff f8d7 	bl	800d7e4 <LoRaMacIsBusy>
 800e636:	b118      	cbz	r0, 800e640 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800e638:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800e63a:	4620      	mov	r0, r4
 800e63c:	b004      	add	sp, #16
 800e63e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e640:	f000 fd18 	bl	800f074 <LoRaMacConfirmQueueIsFull>
 800e644:	b108      	cbz	r0, 800e64a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800e646:	2401      	movs	r4, #1
 800e648:	e7f7      	b.n	800e63a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e64a:	f000 fd0d 	bl	800f068 <LoRaMacConfirmQueueGetCnt>
 800e64e:	b1f8      	cbz	r0, 800e690 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e650:	4b60      	ldr	r3, [pc, #384]	; (800e7d4 <LoRaMacMlmeRequest+0x1b4>)
 800e652:	2101      	movs	r1, #1
 800e654:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e658:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e65c:	f042 0204 	orr.w	r2, r2, #4
 800e660:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 800e664:	782b      	ldrb	r3, [r5, #0]
 800e666:	f88d 300c 	strb.w	r3, [sp, #12]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e66a:	f88d 100d 	strb.w	r1, [sp, #13]
    queueElement.RestrictCommonReadyToHandle = false;
 800e66e:	2200      	movs	r2, #0
 800e670:	f88d 200f 	strb.w	r2, [sp, #15]
    switch( mlmeRequest->Type )
 800e674:	461c      	mov	r4, r3
 800e676:	3b01      	subs	r3, #1
 800e678:	2b0d      	cmp	r3, #13
 800e67a:	f200 808f 	bhi.w	800e79c <LoRaMacMlmeRequest+0x17c>
 800e67e:	e8df f003 	tbb	[pc, r3]
 800e682:	8d0d      	.short	0x8d0d
 800e684:	42388d8d 	.word	0x42388d8d
 800e688:	508d8d47 	.word	0x508d8d47
 800e68c:	755f7e8d 	.word	0x755f7e8d
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e690:	2214      	movs	r2, #20
 800e692:	2100      	movs	r1, #0
 800e694:	4850      	ldr	r0, [pc, #320]	; (800e7d8 <LoRaMacMlmeRequest+0x1b8>)
 800e696:	f004 fbbe 	bl	8012e16 <memset1>
 800e69a:	e7d9      	b.n	800e650 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e69c:	4b4d      	ldr	r3, [pc, #308]	; (800e7d4 <LoRaMacMlmeRequest+0x1b4>)
 800e69e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6a2:	f013 0f20 	tst.w	r3, #32
 800e6a6:	d1c8      	bne.n	800e63a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	f7fe fdaf 	bl	800d20c <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e6ae:	4c4b      	ldr	r4, [pc, #300]	; (800e7dc <LoRaMacMlmeRequest+0x1bc>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e6b6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e6ba:	f001 fb15 	bl	800fce8 <RegionAlternateDr>
 800e6be:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800e6c2:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800e6c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800e6ca:	2307      	movs	r3, #7
 800e6cc:	f88d 300d 	strb.w	r3, [sp, #13]
            status = SendReJoinReq( JOIN_REQ );
 800e6d0:	20ff      	movs	r0, #255	; 0xff
 800e6d2:	f7fe feeb 	bl	800d4ac <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d060      	beq.n	800e79e <LoRaMacMlmeRequest+0x17e>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800e6dc:	4e3f      	ldr	r6, [pc, #252]	; (800e7dc <LoRaMacMlmeRequest+0x1bc>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e6e4:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e6e8:	f001 fafe 	bl	800fce8 <RegionAlternateDr>
 800e6ec:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800e6f0:	e055      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	a902      	add	r1, sp, #8
 800e6f6:	2002      	movs	r0, #2
 800e6f8:	f000 faaa 	bl	800ec50 <LoRaMacCommandsAddCmd>
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d04d      	beq.n	800e79e <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e702:	2413      	movs	r4, #19
 800e704:	e04b      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800e706:	88a8      	ldrh	r0, [r5, #4]
 800e708:	f7fe fef2 	bl	800d4f0 <SetTxContinuousWave>
 800e70c:	4604      	mov	r4, r0
            break;
 800e70e:	e046      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800e710:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800e714:	b2d2      	uxtb	r2, r2
 800e716:	68a9      	ldr	r1, [r5, #8]
 800e718:	88a8      	ldrh	r0, [r5, #4]
 800e71a:	f7fc ff55 	bl	800b5c8 <SetTxContinuousWave1>
 800e71e:	4604      	mov	r4, r0
            break;
 800e720:	e03d      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800e722:	a901      	add	r1, sp, #4
 800e724:	200d      	movs	r0, #13
 800e726:	f000 fadf 	bl	800ece8 <LoRaMacCommandsGetCmd>
 800e72a:	4604      	mov	r4, r0
 800e72c:	b3b8      	cbz	r0, 800e79e <LoRaMacMlmeRequest+0x17e>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e72e:	2200      	movs	r2, #0
 800e730:	a902      	add	r1, sp, #8
 800e732:	200d      	movs	r0, #13
 800e734:	f000 fa8c 	bl	800ec50 <LoRaMacCommandsAddCmd>
 800e738:	4604      	mov	r4, r0
 800e73a:	b380      	cbz	r0, 800e79e <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e73c:	2413      	movs	r4, #19
            break;
 800e73e:	e02e      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800e740:	4b26      	ldr	r3, [pc, #152]	; (800e7dc <LoRaMacMlmeRequest+0x1bc>)
 800e742:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e746:	b10b      	cbz	r3, 800e74c <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e748:	2402      	movs	r4, #2
 800e74a:	e028      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800e74c:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800e74e:	f004 0007 	and.w	r0, r4, #7
 800e752:	f000 f9d6 	bl	800eb02 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800e756:	f88d 4008 	strb.w	r4, [sp, #8]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800e75a:	2201      	movs	r2, #1
 800e75c:	a902      	add	r1, sp, #8
 800e75e:	2010      	movs	r0, #16
 800e760:	f000 fa76 	bl	800ec50 <LoRaMacCommandsAddCmd>
 800e764:	4604      	mov	r4, r0
 800e766:	b1d0      	cbz	r0, 800e79e <LoRaMacMlmeRequest+0x17e>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e768:	2413      	movs	r4, #19
 800e76a:	e018      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800e76c:	2200      	movs	r2, #0
 800e76e:	a902      	add	r1, sp, #8
 800e770:	2012      	movs	r0, #18
 800e772:	f000 fa6d 	bl	800ec50 <LoRaMacCommandsAddCmd>
 800e776:	4604      	mov	r4, r0
 800e778:	b188      	cbz	r0, 800e79e <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e77a:	2413      	movs	r4, #19
 800e77c:	e00f      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
            queueElement.RestrictCommonReadyToHandle = true;
 800e77e:	2301      	movs	r3, #1
 800e780:	f88d 300f 	strb.w	r3, [sp, #15]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800e784:	f000 f9ae 	bl	800eae4 <LoRaMacClassBIsAcquisitionInProgress>
 800e788:	b108      	cbz	r0, 800e78e <LoRaMacMlmeRequest+0x16e>
                status = LORAMAC_STATUS_BUSY;
 800e78a:	2401      	movs	r4, #1
 800e78c:	e007      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800e78e:	f000 f9a6 	bl	800eade <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800e792:	2000      	movs	r0, #0
 800e794:	f000 f9a8 	bl	800eae8 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800e798:	2400      	movs	r4, #0
 800e79a:	e000      	b.n	800e79e <LoRaMacMlmeRequest+0x17e>
    switch( mlmeRequest->Type )
 800e79c:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e79e:	4b0d      	ldr	r3, [pc, #52]	; (800e7d4 <LoRaMacMlmeRequest+0x1b4>)
 800e7a0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e7a4:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800e7a6:	b17c      	cbz	r4, 800e7c8 <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e7a8:	f000 fc5e 	bl	800f068 <LoRaMacConfirmQueueGetCnt>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	f47f af44 	bne.w	800e63a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800e7b2:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <LoRaMacMlmeRequest+0x1b4>)
 800e7b4:	2100      	movs	r1, #0
 800e7b6:	f883 1410 	strb.w	r1, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e7ba:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e7be:	f361 0282 	bfi	r2, r1, #2, #1
 800e7c2:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800e7c6:	e738      	b.n	800e63a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800e7c8:	a803      	add	r0, sp, #12
 800e7ca:	f000 fb83 	bl	800eed4 <LoRaMacConfirmQueueAdd>
 800e7ce:	e734      	b.n	800e63a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e7d0:	2403      	movs	r4, #3
 800e7d2:	e732      	b.n	800e63a <LoRaMacMlmeRequest+0x1a>
 800e7d4:	20003414 	.word	0x20003414
 800e7d8:	2000385c 	.word	0x2000385c
 800e7dc:	20008000 	.word	0x20008000

0800e7e0 <LoRaMacMcpsRequest>:
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	f000 80b0 	beq.w	800e946 <LoRaMacMcpsRequest+0x166>
{
 800e7e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ea:	b088      	sub	sp, #32
 800e7ec:	460d      	mov	r5, r1
 800e7ee:	f04f 0800 	mov.w	r8, #0
 800e7f2:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800e7f4:	f7fe fff6 	bl	800d7e4 <LoRaMacIsBusy>
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	b118      	cbz	r0, 800e804 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800e7fc:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800e7fe:	b008      	add	sp, #32
 800e800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800e804:	4641      	mov	r1, r8
 800e806:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800e80a:	4f51      	ldr	r7, [pc, #324]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e80c:	2214      	movs	r2, #20
 800e80e:	f207 4034 	addw	r0, r7, #1076	; 0x434
 800e812:	f004 fb00 	bl	8012e16 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e816:	2301      	movs	r3, #1
 800e818:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
    MacCtx.AckTimeoutRetriesCounter = 1;
 800e81c:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
    switch( mcpsRequest->Type )
 800e820:	7823      	ldrb	r3, [r4, #0]
 800e822:	2b01      	cmp	r3, #1
 800e824:	d059      	beq.n	800e8da <LoRaMacMcpsRequest+0xfa>
 800e826:	2b03      	cmp	r3, #3
 800e828:	d06f      	beq.n	800e90a <LoRaMacMcpsRequest+0x12a>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d042      	beq.n	800e8b4 <LoRaMacMcpsRequest+0xd4>
 800e82e:	2700      	movs	r7, #0
 800e830:	46ba      	mov	sl, r7
 800e832:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e834:	2302      	movs	r3, #2
 800e836:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e83a:	4b46      	ldr	r3, [pc, #280]	; (800e954 <LoRaMacMcpsRequest+0x174>)
 800e83c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e840:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e844:	a906      	add	r1, sp, #24
 800e846:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e84a:	f001 f95d 	bl	800fb08 <RegionGetPhyParam>
 800e84e:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800e850:	b240      	sxtb	r0, r0
 800e852:	42b8      	cmp	r0, r7
 800e854:	bfb8      	it	lt
 800e856:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800e858:	2e00      	cmp	r6, #0
 800e85a:	d06e      	beq.n	800e93a <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800e85c:	4b3d      	ldr	r3, [pc, #244]	; (800e954 <LoRaMacMcpsRequest+0x174>)
 800e85e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e862:	b99b      	cbnz	r3, 800e88c <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800e864:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e868:	4b3a      	ldr	r3, [pc, #232]	; (800e954 <LoRaMacMcpsRequest+0x174>)
 800e86a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e86e:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e872:	2205      	movs	r2, #5
 800e874:	a903      	add	r1, sp, #12
 800e876:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e87a:	f001 f979 	bl	800fb70 <RegionVerify>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d063      	beq.n	800e94a <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e882:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800e886:	4b33      	ldr	r3, [pc, #204]	; (800e954 <LoRaMacMcpsRequest+0x174>)
 800e888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800e88c:	9500      	str	r5, [sp, #0]
 800e88e:	4643      	mov	r3, r8
 800e890:	4652      	mov	r2, sl
 800e892:	4649      	mov	r1, r9
 800e894:	a804      	add	r0, sp, #16
 800e896:	f7fe ff19 	bl	800d6cc <Send>
        if( status == LORAMAC_STATUS_OK )
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d148      	bne.n	800e930 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800e89e:	7822      	ldrb	r2, [r4, #0]
 800e8a0:	4b2b      	ldr	r3, [pc, #172]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e8a2:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800e8a6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
 800e8aa:	f042 0201 	orr.w	r2, r2, #1
 800e8ae:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800e8b2:	e043      	b.n	800e93c <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800e8b4:	2601      	movs	r6, #1
 800e8b6:	f887 640d 	strb.w	r6, [r7, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800e8ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	f362 1347 	bfi	r3, r2, #5, #3
 800e8c4:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800e8c8:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800e8cc:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800e8d0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800e8d4:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800e8d8:	e7ac      	b.n	800e834 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800e8da:	7be3      	ldrb	r3, [r4, #15]
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	bf28      	it	cs
 800e8e0:	2308      	movcs	r3, #8
 800e8e2:	4a1b      	ldr	r2, [pc, #108]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e8e4:	f882 340d 	strb.w	r3, [r2, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800e8e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e8ec:	2204      	movs	r2, #4
 800e8ee:	f362 1347 	bfi	r3, r2, #5, #3
 800e8f2:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800e8f6:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800e8fa:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800e8fe:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800e902:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800e906:	2601      	movs	r6, #1
            break;
 800e908:	e794      	b.n	800e834 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800e90a:	2601      	movs	r6, #1
 800e90c:	4b10      	ldr	r3, [pc, #64]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e90e:	f883 640d 	strb.w	r6, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800e912:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e916:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800e91a:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800e91e:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800e922:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800e926:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800e92a:	f04f 0900 	mov.w	r9, #0
            break;
 800e92e:	e781      	b.n	800e834 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800e930:	4b07      	ldr	r3, [pc, #28]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e932:	2200      	movs	r2, #0
 800e934:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800e938:	e000      	b.n	800e93c <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e93a:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e93c:	4b04      	ldr	r3, [pc, #16]	; (800e950 <LoRaMacMcpsRequest+0x170>)
 800e93e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800e942:	6123      	str	r3, [r4, #16]
    return status;
 800e944:	e75b      	b.n	800e7fe <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e946:	2003      	movs	r0, #3
}
 800e948:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800e94a:	2003      	movs	r0, #3
 800e94c:	e757      	b.n	800e7fe <LoRaMacMcpsRequest+0x1e>
 800e94e:	bf00      	nop
 800e950:	20003414 	.word	0x20003414
 800e954:	20008000 	.word	0x20008000

0800e958 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800e958:	b510      	push	{r4, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800e95e:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800e962:	220f      	movs	r2, #15
 800e964:	a901      	add	r1, sp, #4
 800e966:	4b09      	ldr	r3, [pc, #36]	; (800e98c <LoRaMacTestSetDutyCycleOn+0x34>)
 800e968:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e96c:	f001 f900 	bl	800fb70 <RegionVerify>
 800e970:	b148      	cbz	r0, 800e986 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800e972:	4b06      	ldr	r3, [pc, #24]	; (800e98c <LoRaMacTestSetDutyCycleOn+0x34>)
 800e974:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e978:	4a05      	ldr	r2, [pc, #20]	; (800e990 <LoRaMacTestSetDutyCycleOn+0x38>)
 800e97a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e97e:	f043 0320 	orr.w	r3, r3, #32
 800e982:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e986:	b002      	add	sp, #8
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	bf00      	nop
 800e98c:	20008000 	.word	0x20008000
 800e990:	20003414 	.word	0x20003414

0800e994 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800e994:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800e996:	f7ff f975 	bl	800dc84 <LoRaMacStop>
 800e99a:	b110      	cbz	r0, 800e9a2 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800e99c:	2401      	movs	r4, #1
    }
}
 800e99e:	4620      	mov	r0, r4
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800e9a4:	4d0c      	ldr	r5, [pc, #48]	; (800e9d8 <LoRaMacDeInitialization+0x44>)
 800e9a6:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800e9aa:	f006 fb71 	bl	8015090 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800e9ae:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800e9b2:	f006 fb6d 	bl	8015090 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e9b6:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800e9ba:	f006 fb69 	bl	8015090 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800e9be:	f505 707d 	add.w	r0, r5, #1012	; 0x3f4
 800e9c2:	f006 fb65 	bl	8015090 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800e9c6:	f000 f89d 	bl	800eb04 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	f7fe fc1e 	bl	800d20c <ResetMacParameters>
        Radio.Sleep( );
 800e9d0:	4b02      	ldr	r3, [pc, #8]	; (800e9dc <LoRaMacDeInitialization+0x48>)
 800e9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d4:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800e9d6:	e7e2      	b.n	800e99e <LoRaMacDeInitialization+0xa>
 800e9d8:	20003414 	.word	0x20003414
 800e9dc:	08016690 	.word	0x08016690

0800e9e0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	b089      	sub	sp, #36	; 0x24
 800e9e6:	460f      	mov	r7, r1
 800e9e8:	4616      	mov	r6, r2
 800e9ea:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800e9ec:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800e9f0:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800e9f4:	6883      	ldr	r3, [r0, #8]
 800e9f6:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800e9f8:	f890 8005 	ldrb.w	r8, [r0, #5]
 800e9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ea00:	d107      	bne.n	800ea12 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800ea02:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800ea06:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800ea0a:	4640      	mov	r0, r8
 800ea0c:	b009      	add	sp, #36	; 0x24
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea12:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800ea14:	2302      	movs	r3, #2
 800ea16:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ea1a:	7c83      	ldrb	r3, [r0, #18]
 800ea1c:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ea20:	a906      	add	r1, sp, #24
 800ea22:	7cc0      	ldrb	r0, [r0, #19]
 800ea24:	f001 f870 	bl	800fb08 <RegionGetPhyParam>
 800ea28:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800ea2a:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800ea2e:	464a      	mov	r2, r9
 800ea30:	45d1      	cmp	r9, sl
 800ea32:	bfb8      	it	lt
 800ea34:	4652      	movlt	r2, sl
 800ea36:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800ea38:	45d1      	cmp	r9, sl
 800ea3a:	dc04      	bgt.n	800ea46 <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800ea40:	4691      	mov	r9, r2
            adrAckReq = false;
 800ea42:	4698      	mov	r8, r3
 800ea44:	e7dd      	b.n	800ea02 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800ea46:	68a2      	ldr	r2, [r4, #8]
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d201      	bcs.n	800ea52 <CalcNextV10X+0x72>
                adrAckReq = false;
 800ea4e:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ea52:	89e1      	ldrh	r1, [r4, #14]
 800ea54:	440b      	add	r3, r1
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d202      	bcs.n	800ea60 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800ea5a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ea5e:	e7d0      	b.n	800ea02 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800ea60:	2308      	movs	r3, #8
 800ea62:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ea66:	a906      	add	r1, sp, #24
 800ea68:	7ce0      	ldrb	r0, [r4, #19]
 800ea6a:	f001 f84d 	bl	800fb08 <RegionGetPhyParam>
 800ea6e:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800ea70:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800ea74:	68a3      	ldr	r3, [r4, #8]
 800ea76:	89e2      	ldrh	r2, [r4, #14]
 800ea78:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea7c:	fb02 3311 	mls	r3, r2, r1, r3
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d002      	beq.n	800ea8a <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800ea84:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ea88:	e7bb      	b.n	800ea02 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ea8a:	2322      	movs	r3, #34	; 0x22
 800ea8c:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800ea90:	9b01      	ldr	r3, [sp, #4]
 800ea92:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ea96:	7ca3      	ldrb	r3, [r4, #18]
 800ea98:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ea9c:	a906      	add	r1, sp, #24
 800ea9e:	7ce0      	ldrb	r0, [r4, #19]
 800eaa0:	f001 f832 	bl	800fb08 <RegionGetPhyParam>
 800eaa4:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800eaa6:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800eaaa:	45ca      	cmp	sl, r9
 800eaac:	d1a9      	bne.n	800ea02 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800eaae:	f894 8004 	ldrb.w	r8, [r4, #4]
 800eab2:	f1b8 0f00 	cmp.w	r8, #0
 800eab6:	d0a4      	beq.n	800ea02 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800eab8:	2302      	movs	r3, #2
 800eaba:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800eabe:	a902      	add	r1, sp, #8
 800eac0:	7ce0      	ldrb	r0, [r4, #19]
 800eac2:	f001 f847 	bl	800fb54 <RegionInitDefaults>
                        adrAckReq = false;
 800eac6:	f04f 0800 	mov.w	r8, #0
 800eaca:	e79a      	b.n	800ea02 <CalcNextV10X+0x22>

0800eacc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800eacc:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800eace:	7884      	ldrb	r4, [r0, #2]
 800ead0:	b10c      	cbz	r4, 800ead6 <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800ead2:	2000      	movs	r0, #0
}
 800ead4:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800ead6:	f7ff ff83 	bl	800e9e0 <CalcNextV10X>
 800eada:	e7fb      	b.n	800ead4 <LoRaMacAdrCalcNext+0x8>

0800eadc <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eadc:	4770      	bx	lr

0800eade <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eade:	4770      	bx	lr

0800eae0 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eae0:	4770      	bx	lr

0800eae2 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eae2:	4770      	bx	lr

0800eae4 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eae4:	2000      	movs	r0, #0
 800eae6:	4770      	bx	lr

0800eae8 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eae8:	4770      	bx	lr

0800eaea <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eaea:	4770      	bx	lr

0800eaec <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eaec:	4770      	bx	lr

0800eaee <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eaee:	2000      	movs	r0, #0
 800eaf0:	4770      	bx	lr

0800eaf2 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eaf2:	2000      	movs	r0, #0
 800eaf4:	4770      	bx	lr

0800eaf6 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	4770      	bx	lr

0800eafa <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eafa:	2000      	movs	r0, #0
 800eafc:	4770      	bx	lr

0800eafe <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eafe:	2000      	movs	r0, #0
 800eb00:	4770      	bx	lr

0800eb02 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb02:	4770      	bx	lr

0800eb04 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb04:	4770      	bx	lr

0800eb06 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb06:	4770      	bx	lr

0800eb08 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb08:	2002      	movs	r0, #2
 800eb0a:	4770      	bx	lr

0800eb0c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb0c:	2002      	movs	r0, #2
 800eb0e:	4770      	bx	lr

0800eb10 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb10:	2002      	movs	r0, #2
 800eb12:	4770      	bx	lr

0800eb14 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb14:	4770      	bx	lr

0800eb16 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb16:	2000      	movs	r0, #0
 800eb18:	4770      	bx	lr

0800eb1a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb1a:	4770      	bx	lr

0800eb1c <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb1c:	4770      	bx	lr

0800eb1e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb1e:	2000      	movs	r0, #0
 800eb20:	4770      	bx	lr

0800eb22 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb22:	2000      	movs	r0, #0
 800eb24:	4770      	bx	lr

0800eb26 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb26:	4770      	bx	lr

0800eb28 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eb28:	4770      	bx	lr

0800eb2a <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	2b0f      	cmp	r3, #15
 800eb2e:	d804      	bhi.n	800eb3a <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800eb30:	5cc2      	ldrb	r2, [r0, r3]
 800eb32:	b922      	cbnz	r2, 800eb3e <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800eb34:	3301      	adds	r3, #1
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	e7f8      	b.n	800eb2c <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	4770      	bx	lr
            return false;
 800eb3e:	2000      	movs	r0, #0
}
 800eb40:	4770      	bx	lr
	...

0800eb44 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800eb44:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800eb46:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800eb48:	0123      	lsls	r3, r4, #4
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	4d06      	ldr	r5, [pc, #24]	; (800eb68 <MallocNewMacCommandSlot+0x24>)
 800eb4e:	441d      	add	r5, r3
 800eb50:	4628      	mov	r0, r5
 800eb52:	f7ff ffea 	bl	800eb2a <IsSlotFree>
 800eb56:	b920      	cbnz	r0, 800eb62 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800eb58:	3401      	adds	r4, #1
 800eb5a:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800eb5c:	2c0f      	cmp	r4, #15
 800eb5e:	d1f3      	bne.n	800eb48 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800eb60:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800eb62:	4628      	mov	r0, r5
 800eb64:	bd38      	pop	{r3, r4, r5, pc}
 800eb66:	bf00      	nop
 800eb68:	20003930 	.word	0x20003930

0800eb6c <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800eb6c:	b120      	cbz	r0, 800eb78 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800eb6e:	2200      	movs	r2, #0
 800eb70:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800eb72:	6042      	str	r2, [r0, #4]

    return true;
 800eb74:	2001      	movs	r0, #1
 800eb76:	4770      	bx	lr
        return false;
 800eb78:	2000      	movs	r0, #0
}
 800eb7a:	4770      	bx	lr

0800eb7c <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	b160      	cbz	r0, 800eb9a <LinkedListAdd+0x1e>
 800eb80:	b169      	cbz	r1, 800eb9e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800eb82:	6802      	ldr	r2, [r0, #0]
 800eb84:	b13a      	cbz	r2, 800eb96 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	b102      	cbz	r2, 800eb8c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800eb8a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800eb90:	6059      	str	r1, [r3, #4]

    return true;
 800eb92:	2001      	movs	r0, #1
 800eb94:	4770      	bx	lr
        list->First = element;
 800eb96:	6001      	str	r1, [r0, #0]
 800eb98:	e7f5      	b.n	800eb86 <LinkedListAdd+0xa>
        return false;
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	4770      	bx	lr
 800eb9e:	2000      	movs	r0, #0
}
 800eba0:	4770      	bx	lr

0800eba2 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800eba2:	b160      	cbz	r0, 800ebbe <LinkedListGetPrevious+0x1c>
 800eba4:	b161      	cbz	r1, 800ebc0 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800eba6:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800eba8:	4281      	cmp	r1, r0
 800ebaa:	d102      	bne.n	800ebb2 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800ebac:	2000      	movs	r0, #0
    }

    return curElement;
}
 800ebae:	4770      	bx	lr
            curElement = curElement->Next;
 800ebb0:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d0fb      	beq.n	800ebae <LinkedListGetPrevious+0xc>
 800ebb6:	6803      	ldr	r3, [r0, #0]
 800ebb8:	428b      	cmp	r3, r1
 800ebba:	d1f9      	bne.n	800ebb0 <LinkedListGetPrevious+0xe>
 800ebbc:	4770      	bx	lr
 800ebbe:	4770      	bx	lr
        return NULL;
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	4770      	bx	lr

0800ebc4 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ebc4:	b1b8      	cbz	r0, 800ebf6 <LinkedListRemove+0x32>
{
 800ebc6:	b538      	push	{r3, r4, r5, lr}
 800ebc8:	460c      	mov	r4, r1
 800ebca:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ebcc:	b1a9      	cbz	r1, 800ebfa <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ebce:	f7ff ffe8 	bl	800eba2 <LinkedListGetPrevious>

    if( list->First == element )
 800ebd2:	682b      	ldr	r3, [r5, #0]
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	d009      	beq.n	800ebec <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800ebd8:	686b      	ldr	r3, [r5, #4]
 800ebda:	42a3      	cmp	r3, r4
 800ebdc:	d009      	beq.n	800ebf2 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800ebde:	b108      	cbz	r0, 800ebe4 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	6023      	str	r3, [r4, #0]

    return true;
 800ebe8:	2001      	movs	r0, #1
}
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	602b      	str	r3, [r5, #0]
 800ebf0:	e7f2      	b.n	800ebd8 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800ebf2:	6068      	str	r0, [r5, #4]
 800ebf4:	e7f3      	b.n	800ebde <LinkedListRemove+0x1a>
        return false;
 800ebf6:	2000      	movs	r0, #0
}
 800ebf8:	4770      	bx	lr
        return false;
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	e7f5      	b.n	800ebea <LinkedListRemove+0x26>

0800ebfe <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800ebfe:	2805      	cmp	r0, #5
 800ec00:	d006      	beq.n	800ec10 <IsSticky+0x12>
 800ec02:	d307      	bcc.n	800ec14 <IsSticky+0x16>
 800ec04:	3808      	subs	r0, #8
 800ec06:	b2c0      	uxtb	r0, r0
 800ec08:	2802      	cmp	r0, #2
 800ec0a:	d905      	bls.n	800ec18 <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	4770      	bx	lr
    switch( cid )
 800ec10:	2001      	movs	r0, #1
 800ec12:	4770      	bx	lr
            return false;
 800ec14:	2000      	movs	r0, #0
 800ec16:	4770      	bx	lr
    switch( cid )
 800ec18:	2001      	movs	r0, #1
    }
}
 800ec1a:	4770      	bx	lr

0800ec1c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	4770      	bx	lr

0800ec20 <FreeMacCommandSlot>:
    if( slot == NULL )
 800ec20:	b130      	cbz	r0, 800ec30 <FreeMacCommandSlot+0x10>
{
 800ec22:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800ec24:	2210      	movs	r2, #16
 800ec26:	2100      	movs	r1, #0
 800ec28:	f004 f8f5 	bl	8012e16 <memset1>
    return true;
 800ec2c:	2001      	movs	r0, #1
}
 800ec2e:	bd08      	pop	{r3, pc}
        return false;
 800ec30:	2000      	movs	r0, #0
}
 800ec32:	4770      	bx	lr

0800ec34 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800ec34:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800ec36:	4c05      	ldr	r4, [pc, #20]	; (800ec4c <LoRaMacCommandsInit+0x18>)
 800ec38:	22fc      	movs	r2, #252	; 0xfc
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f004 f8ea 	bl	8012e16 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800ec42:	4620      	mov	r0, r4
 800ec44:	f7ff ff92 	bl	800eb6c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ec48:	2000      	movs	r0, #0
 800ec4a:	bd10      	pop	{r4, pc}
 800ec4c:	20003930 	.word	0x20003930

0800ec50 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800ec50:	b321      	cbz	r1, 800ec9c <LoRaMacCommandsAddCmd+0x4c>
{
 800ec52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec54:	4605      	mov	r5, r0
 800ec56:	4614      	mov	r4, r2
 800ec58:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800ec5a:	f7ff ff73 	bl	800eb44 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800ec5e:	4606      	mov	r6, r0
 800ec60:	b1f0      	cbz	r0, 800eca0 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800ec62:	4601      	mov	r1, r0
 800ec64:	4810      	ldr	r0, [pc, #64]	; (800eca8 <LoRaMacCommandsAddCmd+0x58>)
 800ec66:	f7ff ff89 	bl	800eb7c <LinkedListAdd>
 800ec6a:	b1d8      	cbz	r0, 800eca4 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800ec6c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800ec6e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800ec70:	b2a2      	uxth	r2, r4
 800ec72:	4639      	mov	r1, r7
 800ec74:	1d70      	adds	r0, r6, #5
 800ec76:	f004 f8b6 	bl	8012de6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f7ff ffbf 	bl	800ebfe <IsSticky>
 800ec80:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800ec82:	4628      	mov	r0, r5
 800ec84:	f7ff ffca 	bl	800ec1c <IsConfirmationRequired>
 800ec88:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800ec8a:	4b07      	ldr	r3, [pc, #28]	; (800eca8 <LoRaMacCommandsAddCmd+0x58>)
 800ec8c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800ec90:	4414      	add	r4, r2
 800ec92:	3401      	adds	r4, #1
 800ec94:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800ec98:	2000      	movs	r0, #0
}
 800ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ec9c:	2001      	movs	r0, #1
}
 800ec9e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800eca0:	2002      	movs	r0, #2
 800eca2:	e7fa      	b.n	800ec9a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800eca4:	2005      	movs	r0, #5
 800eca6:	e7f8      	b.n	800ec9a <LoRaMacCommandsAddCmd+0x4a>
 800eca8:	20003930 	.word	0x20003930

0800ecac <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800ecac:	b1a0      	cbz	r0, 800ecd8 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800ecb2:	4601      	mov	r1, r0
 800ecb4:	480b      	ldr	r0, [pc, #44]	; (800ece4 <LoRaMacCommandsRemoveCmd+0x38>)
 800ecb6:	f7ff ff85 	bl	800ebc4 <LinkedListRemove>
 800ecba:	b178      	cbz	r0, 800ecdc <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800ecbc:	68a1      	ldr	r1, [r4, #8]
 800ecbe:	4a09      	ldr	r2, [pc, #36]	; (800ece4 <LoRaMacCommandsRemoveCmd+0x38>)
 800ecc0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800ecc4:	1a5b      	subs	r3, r3, r1
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800eccc:	4620      	mov	r0, r4
 800ecce:	f7ff ffa7 	bl	800ec20 <FreeMacCommandSlot>
 800ecd2:	b128      	cbz	r0, 800ece0 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800ecd4:	2000      	movs	r0, #0
}
 800ecd6:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ecd8:	2001      	movs	r0, #1
}
 800ecda:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ecdc:	2003      	movs	r0, #3
 800ecde:	e7fa      	b.n	800ecd6 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800ece0:	2005      	movs	r0, #5
 800ece2:	e7f8      	b.n	800ecd6 <LoRaMacCommandsRemoveCmd+0x2a>
 800ece4:	20003930 	.word	0x20003930

0800ece8 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ece8:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <LoRaMacCommandsGetCmd+0x1c>)
 800ecea:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ecec:	e000      	b.n	800ecf0 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800ecee:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800ecf0:	b113      	cbz	r3, 800ecf8 <LoRaMacCommandsGetCmd+0x10>
 800ecf2:	791a      	ldrb	r2, [r3, #4]
 800ecf4:	4282      	cmp	r2, r0
 800ecf6:	d1fa      	bne.n	800ecee <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800ecf8:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800ecfa:	b10b      	cbz	r3, 800ed00 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800ed00:	2003      	movs	r0, #3
}
 800ed02:	4770      	bx	lr
 800ed04:	20003930 	.word	0x20003930

0800ed08 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ed08:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800ed0a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ed0c:	b120      	cbz	r0, 800ed18 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800ed0e:	7b03      	ldrb	r3, [r0, #12]
 800ed10:	b11b      	cbz	r3, 800ed1a <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800ed12:	6800      	ldr	r0, [r0, #0]
 800ed14:	e7fa      	b.n	800ed0c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ed16:	bd10      	pop	{r4, pc}
 800ed18:	4770      	bx	lr
{
 800ed1a:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800ed1c:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800ed1e:	f7ff ffc5 	bl	800ecac <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800ed22:	4620      	mov	r0, r4
    while( curElement != NULL )
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d0f6      	beq.n	800ed16 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800ed28:	7b03      	ldrb	r3, [r0, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d0f6      	beq.n	800ed1c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800ed2e:	6800      	ldr	r0, [r0, #0]
 800ed30:	e7f8      	b.n	800ed24 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800ed32:	bf00      	nop
 800ed34:	20003930 	.word	0x20003930

0800ed38 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800ed38:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ed3a:	4b0b      	ldr	r3, [pc, #44]	; (800ed68 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800ed3c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ed3e:	e000      	b.n	800ed42 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800ed40:	4634      	mov	r4, r6
    while( curElement != NULL )
 800ed42:	b17c      	cbz	r4, 800ed64 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800ed44:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ed46:	7925      	ldrb	r5, [r4, #4]
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f7ff ff58 	bl	800ebfe <IsSticky>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d0f6      	beq.n	800ed40 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800ed52:	4628      	mov	r0, r5
 800ed54:	f7ff ff62 	bl	800ec1c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d1f1      	bne.n	800ed40 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7ff ffa5 	bl	800ecac <LoRaMacCommandsRemoveCmd>
 800ed62:	e7ed      	b.n	800ed40 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ed64:	2000      	movs	r0, #0
 800ed66:	bd70      	pop	{r4, r5, r6, pc}
 800ed68:	20003930 	.word	0x20003930

0800ed6c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800ed6c:	b128      	cbz	r0, 800ed7a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ed6e:	4a04      	ldr	r2, [pc, #16]	; (800ed80 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ed70:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800ed74:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ed76:	2000      	movs	r0, #0
 800ed78:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ed7a:	2001      	movs	r0, #1
}
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	20003930 	.word	0x20003930

0800ed84 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ed88:	4b16      	ldr	r3, [pc, #88]	; (800ede4 <LoRaMacCommandsSerializeCmds+0x60>)
 800ed8a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ed8c:	b32a      	cbz	r2, 800edda <LoRaMacCommandsSerializeCmds+0x56>
 800ed8e:	4607      	mov	r7, r0
 800ed90:	4688      	mov	r8, r1
 800ed92:	4616      	mov	r6, r2
 800ed94:	b319      	cbz	r1, 800edde <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ed96:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ed98:	b194      	cbz	r4, 800edc0 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ed9a:	1a7a      	subs	r2, r7, r1
 800ed9c:	68a3      	ldr	r3, [r4, #8]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d30d      	bcc.n	800edc0 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800eda4:	1c4d      	adds	r5, r1, #1
 800eda6:	b2ed      	uxtb	r5, r5
 800eda8:	7923      	ldrb	r3, [r4, #4]
 800edaa:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800edac:	8922      	ldrh	r2, [r4, #8]
 800edae:	1d61      	adds	r1, r4, #5
 800edb0:	1970      	adds	r0, r6, r5
 800edb2:	f004 f818 	bl	8012de6 <memcpy1>
            itr += curElement->PayloadSize;
 800edb6:	68a3      	ldr	r3, [r4, #8]
 800edb8:	441d      	add	r5, r3
 800edba:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800edbc:	6824      	ldr	r4, [r4, #0]
 800edbe:	e7eb      	b.n	800ed98 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800edc0:	b12c      	cbz	r4, 800edce <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800edc2:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800edc4:	4620      	mov	r0, r4
 800edc6:	f7ff ff71 	bl	800ecac <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800edca:	462c      	mov	r4, r5
 800edcc:	e7f8      	b.n	800edc0 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800edce:	4640      	mov	r0, r8
 800edd0:	f7ff ffcc 	bl	800ed6c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800edd4:	2000      	movs	r0, #0
}
 800edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800edda:	2001      	movs	r0, #1
 800eddc:	e7fb      	b.n	800edd6 <LoRaMacCommandsSerializeCmds+0x52>
 800edde:	2001      	movs	r0, #1
 800ede0:	e7f9      	b.n	800edd6 <LoRaMacCommandsSerializeCmds+0x52>
 800ede2:	bf00      	nop
 800ede4:	20003930 	.word	0x20003930

0800ede8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800ede8:	1e83      	subs	r3, r0, #2
 800edea:	2b11      	cmp	r3, #17
 800edec:	d80a      	bhi.n	800ee04 <LoRaMacCommandsGetCmdSize+0x1c>
 800edee:	e8df f003 	tbb	[pc, r3]
 800edf2:	0b23      	.short	0x0b23
 800edf4:	110f240d 	.word	0x110f240d
 800edf8:	09171513 	.word	0x09171513
 800edfc:	09091909 	.word	0x09091909
 800ee00:	211f1d1b 	.word	0x211f1d1b
 800ee04:	2000      	movs	r0, #0
 800ee06:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800ee08:	2005      	movs	r0, #5
            break;
 800ee0a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800ee0c:	2002      	movs	r0, #2
            break;
 800ee0e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ee10:	2001      	movs	r0, #1
            break;
 800ee12:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ee14:	2006      	movs	r0, #6
            break;
 800ee16:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ee18:	2002      	movs	r0, #2
            break;
 800ee1a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ee1c:	2002      	movs	r0, #2
            break;
 800ee1e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800ee20:	2005      	movs	r0, #5
            break;
 800ee22:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800ee24:	2006      	movs	r0, #6
            break;
 800ee26:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800ee28:	2001      	movs	r0, #1
            break;
 800ee2a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800ee2c:	2005      	movs	r0, #5
            break;
 800ee2e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800ee30:	2004      	movs	r0, #4
            break;
 800ee32:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800ee34:	2004      	movs	r0, #4
            break;
 800ee36:	4770      	bx	lr
            cidSize = 3;
 800ee38:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800ee3a:	4770      	bx	lr

0800ee3c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ee3c:	4b03      	ldr	r3, [pc, #12]	; (800ee4c <IncreaseBufferPointer+0x10>)
 800ee3e:	4298      	cmp	r0, r3
 800ee40:	d001      	beq.n	800ee46 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800ee42:	3004      	adds	r0, #4
 800ee44:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ee46:	4802      	ldr	r0, [pc, #8]	; (800ee50 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	20003a48 	.word	0x20003a48
 800ee50:	20003a38 	.word	0x20003a38

0800ee54 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800ee54:	b108      	cbz	r0, 800ee5a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800ee56:	2000      	movs	r0, #0
 800ee58:	4770      	bx	lr
        return true;
 800ee5a:	2001      	movs	r0, #1
}
 800ee5c:	4770      	bx	lr

0800ee5e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800ee5e:	2804      	cmp	r0, #4
 800ee60:	d801      	bhi.n	800ee66 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800ee62:	2000      	movs	r0, #0
 800ee64:	4770      	bx	lr
        return true;
 800ee66:	2001      	movs	r0, #1
}
 800ee68:	4770      	bx	lr
	...

0800ee6c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	4606      	mov	r6, r0
 800ee70:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ee72:	4b0d      	ldr	r3, [pc, #52]	; (800eea8 <GetElement+0x3c>)
 800ee74:	f893 7020 	ldrb.w	r7, [r3, #32]
 800ee78:	4638      	mov	r0, r7
 800ee7a:	f7ff ffeb 	bl	800ee54 <IsListEmpty>
 800ee7e:	b970      	cbnz	r0, 800ee9e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800ee80:	2500      	movs	r5, #0
 800ee82:	42af      	cmp	r7, r5
 800ee84:	d909      	bls.n	800ee9a <GetElement+0x2e>
    {
        if( element->Request == request )
 800ee86:	7823      	ldrb	r3, [r4, #0]
 800ee88:	42b3      	cmp	r3, r6
 800ee8a:	d00a      	beq.n	800eea2 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f7ff ffd5 	bl	800ee3c <IncreaseBufferPointer>
 800ee92:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800ee94:	3501      	adds	r5, #1
 800ee96:	b2ed      	uxtb	r5, r5
 800ee98:	e7f3      	b.n	800ee82 <GetElement+0x16>
    }

    return NULL;
 800ee9a:	2000      	movs	r0, #0
}
 800ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e7fc      	b.n	800ee9c <GetElement+0x30>
            return element;
 800eea2:	4620      	mov	r0, r4
 800eea4:	e7fa      	b.n	800ee9c <GetElement+0x30>
 800eea6:	bf00      	nop
 800eea8:	20003a2c 	.word	0x20003a2c

0800eeac <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800eeac:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800eeae:	4c08      	ldr	r4, [pc, #32]	; (800eed0 <LoRaMacConfirmQueueInit+0x24>)
 800eeb0:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800eeb8:	f104 000c 	add.w	r0, r4, #12
 800eebc:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800eebe:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800eec0:	2214      	movs	r2, #20
 800eec2:	21ff      	movs	r1, #255	; 0xff
 800eec4:	f003 ffa7 	bl	8012e16 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eec8:	2301      	movs	r3, #1
 800eeca:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800eece:	bd10      	pop	{r4, pc}
 800eed0:	20003a2c 	.word	0x20003a2c

0800eed4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800eed8:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <LoRaMacConfirmQueueAdd+0x44>)
 800eeda:	f893 0020 	ldrb.w	r0, [r3, #32]
 800eede:	f7ff ffbe 	bl	800ee5e <IsListFull>
 800eee2:	b9b8      	cbnz	r0, 800ef14 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800eee4:	4c0c      	ldr	r4, [pc, #48]	; (800ef18 <LoRaMacConfirmQueueAdd+0x44>)
 800eee6:	68a3      	ldr	r3, [r4, #8]
 800eee8:	782a      	ldrb	r2, [r5, #0]
 800eeea:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800eeec:	68a3      	ldr	r3, [r4, #8]
 800eeee:	786a      	ldrb	r2, [r5, #1]
 800eef0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	78ea      	ldrb	r2, [r5, #3]
 800eef6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800eef8:	68a3      	ldr	r3, [r4, #8]
 800eefa:	2200      	movs	r2, #0
 800eefc:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800eefe:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ef02:	3301      	adds	r3, #1
 800ef04:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800ef08:	68a0      	ldr	r0, [r4, #8]
 800ef0a:	f7ff ff97 	bl	800ee3c <IncreaseBufferPointer>
 800ef0e:	60a0      	str	r0, [r4, #8]

    return true;
 800ef10:	2001      	movs	r0, #1
}
 800ef12:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800ef14:	2000      	movs	r0, #0
 800ef16:	e7fc      	b.n	800ef12 <LoRaMacConfirmQueueAdd+0x3e>
 800ef18:	20003a2c 	.word	0x20003a2c

0800ef1c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800ef1c:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ef1e:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ef20:	f893 4020 	ldrb.w	r4, [r3, #32]
 800ef24:	4620      	mov	r0, r4
 800ef26:	f7ff ff95 	bl	800ee54 <IsListEmpty>
 800ef2a:	b948      	cbnz	r0, 800ef40 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ef2c:	4d05      	ldr	r5, [pc, #20]	; (800ef44 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ef2e:	3c01      	subs	r4, #1
 800ef30:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ef34:	6868      	ldr	r0, [r5, #4]
 800ef36:	f7ff ff81 	bl	800ee3c <IncreaseBufferPointer>
 800ef3a:	6068      	str	r0, [r5, #4]

    return true;
 800ef3c:	2001      	movs	r0, #1
}
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800ef40:	2000      	movs	r0, #0
 800ef42:	e7fc      	b.n	800ef3e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800ef44:	20003a2c 	.word	0x20003a2c

0800ef48 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ef4e:	4b08      	ldr	r3, [pc, #32]	; (800ef70 <LoRaMacConfirmQueueSetStatus+0x28>)
 800ef50:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ef54:	f7ff ff7e 	bl	800ee54 <IsListEmpty>
 800ef58:	b948      	cbnz	r0, 800ef6e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ef5a:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <LoRaMacConfirmQueueSetStatus+0x28>)
 800ef5c:	689a      	ldr	r2, [r3, #8]
 800ef5e:	6859      	ldr	r1, [r3, #4]
 800ef60:	4620      	mov	r0, r4
 800ef62:	f7ff ff83 	bl	800ee6c <GetElement>
        if( element != NULL )
 800ef66:	b110      	cbz	r0, 800ef6e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800ef68:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	20003a2c 	.word	0x20003a2c

0800ef74 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800ef74:	b510      	push	{r4, lr}
 800ef76:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ef78:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800ef7a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ef7e:	f7ff ff69 	bl	800ee54 <IsListEmpty>
 800ef82:	b940      	cbnz	r0, 800ef96 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ef84:	4b06      	ldr	r3, [pc, #24]	; (800efa0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	6859      	ldr	r1, [r3, #4]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff ff6e 	bl	800ee6c <GetElement>
        if( element != NULL )
 800ef90:	b118      	cbz	r0, 800ef9a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800ef92:	7840      	ldrb	r0, [r0, #1]
 800ef94:	e000      	b.n	800ef98 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef96:	2001      	movs	r0, #1
}
 800ef98:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	e7fc      	b.n	800ef98 <LoRaMacConfirmQueueGetStatus+0x24>
 800ef9e:	bf00      	nop
 800efa0:	20003a2c 	.word	0x20003a2c

0800efa4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800efa4:	b538      	push	{r3, r4, r5, lr}
 800efa6:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800efa8:	4b0c      	ldr	r3, [pc, #48]	; (800efdc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800efaa:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800efac:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800efb0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800efb4:	f7ff ff4e 	bl	800ee54 <IsListEmpty>
 800efb8:	b150      	cbz	r0, 800efd0 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800efba:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800efbc:	2301      	movs	r3, #1
 800efbe:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800efc0:	4620      	mov	r0, r4
 800efc2:	f7ff ff3b 	bl	800ee3c <IncreaseBufferPointer>
 800efc6:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800efc8:	4b04      	ldr	r3, [pc, #16]	; (800efdc <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	4283      	cmp	r3, r0
 800efce:	d0f4      	beq.n	800efba <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800efd0:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800efd2:	78e3      	ldrb	r3, [r4, #3]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1f3      	bne.n	800efc0 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800efd8:	e7f0      	b.n	800efbc <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800efda:	bf00      	nop
 800efdc:	20003a2c 	.word	0x20003a2c

0800efe0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800efe0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800efe2:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800efe4:	689a      	ldr	r2, [r3, #8]
 800efe6:	6859      	ldr	r1, [r3, #4]
 800efe8:	f7ff ff40 	bl	800ee6c <GetElement>
 800efec:	b100      	cbz	r0, 800eff0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800efee:	2001      	movs	r0, #1
    }
    return false;
}
 800eff0:	bd08      	pop	{r3, pc}
 800eff2:	bf00      	nop
 800eff4:	20003a2c 	.word	0x20003a2c

0800eff8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800eff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800effa:	b083      	sub	sp, #12
 800effc:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800effe:	4b19      	ldr	r3, [pc, #100]	; (800f064 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f000:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800f004:	2204      	movs	r2, #4
 800f006:	2100      	movs	r1, #0
 800f008:	eb0d 0002 	add.w	r0, sp, r2
 800f00c:	f003 ff03 	bl	8012e16 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800f010:	2400      	movs	r4, #0
 800f012:	e00d      	b.n	800f030 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800f014:	781a      	ldrb	r2, [r3, #0]
 800f016:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800f01a:	785a      	ldrb	r2, [r3, #1]
 800f01c:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800f020:	78db      	ldrb	r3, [r3, #3]
 800f022:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800f026:	f7ff ff79 	bl	800ef1c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800f02a:	b1a5      	cbz	r5, 800f056 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800f02c:	3401      	adds	r4, #1
 800f02e:	b2e4      	uxtb	r4, r4
 800f030:	42bc      	cmp	r4, r7
 800f032:	d214      	bcs.n	800f05e <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800f034:	4b0b      	ldr	r3, [pc, #44]	; (800f064 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f036:	685a      	ldr	r2, [r3, #4]
 800f038:	7812      	ldrb	r2, [r2, #0]
 800f03a:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	7852      	ldrb	r2, [r2, #1]
 800f040:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800f046:	2d00      	cmp	r5, #0
 800f048:	d0e4      	beq.n	800f014 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800f04a:	4b06      	ldr	r3, [pc, #24]	; (800f064 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	4630      	mov	r0, r6
 800f052:	4798      	blx	r3
 800f054:	e7e7      	b.n	800f026 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800f056:	a801      	add	r0, sp, #4
 800f058:	f7ff ff3c 	bl	800eed4 <LoRaMacConfirmQueueAdd>
 800f05c:	e7e6      	b.n	800f02c <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800f05e:	b003      	add	sp, #12
 800f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f062:	bf00      	nop
 800f064:	20003a2c 	.word	0x20003a2c

0800f068 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800f068:	4b01      	ldr	r3, [pc, #4]	; (800f070 <LoRaMacConfirmQueueGetCnt+0x8>)
 800f06a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f06e:	4770      	bx	lr
 800f070:	20003a2c 	.word	0x20003a2c

0800f074 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800f074:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f076:	4b03      	ldr	r3, [pc, #12]	; (800f084 <LoRaMacConfirmQueueIsFull+0x10>)
 800f078:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f07c:	f7ff feef 	bl	800ee5e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800f080:	bd08      	pop	{r3, pc}
 800f082:	bf00      	nop
 800f084:	20003a2c 	.word	0x20003a2c

0800f088 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800f088:	b410      	push	{r4}
 800f08a:	9c01      	ldr	r4, [sp, #4]
 800f08c:	9902      	ldr	r1, [sp, #8]
 800f08e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800f090:	b1da      	cbz	r2, 800f0ca <PrepareB0+0x42>
 800f092:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800f094:	2049      	movs	r0, #73	; 0x49
 800f096:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800f098:	2000      	movs	r0, #0
 800f09a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800f09c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800f09e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800f0a0:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800f0a2:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800f0a4:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800f0a6:	0a23      	lsrs	r3, r4, #8
 800f0a8:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800f0aa:	0c23      	lsrs	r3, r4, #16
 800f0ac:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800f0ae:	0e24      	lsrs	r4, r4, #24
 800f0b0:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800f0b2:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800f0b4:	0a0b      	lsrs	r3, r1, #8
 800f0b6:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800f0b8:	0c0b      	lsrs	r3, r1, #16
 800f0ba:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800f0bc:	0e09      	lsrs	r1, r1, #24
 800f0be:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800f0c0:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800f0c2:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f0c6:	bc10      	pop	{r4}
 800f0c8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f0ca:	200a      	movs	r0, #10
 800f0cc:	e7fb      	b.n	800f0c6 <PrepareB0+0x3e>
	...

0800f0d0 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d80e      	bhi.n	800f0f4 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800f0d6:	469c      	mov	ip, r3
 800f0d8:	4a07      	ldr	r2, [pc, #28]	; (800f0f8 <GetKeyAddrItem+0x28>)
 800f0da:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800f0de:	4282      	cmp	r2, r0
 800f0e0:	d002      	beq.n	800f0e8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	e7f4      	b.n	800f0d2 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800f0e8:	4b03      	ldr	r3, [pc, #12]	; (800f0f8 <GetKeyAddrItem+0x28>)
 800f0ea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800f0ee:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800f0f4:	200c      	movs	r0, #12
}
 800f0f6:	4770      	bx	lr
 800f0f8:	20000104 	.word	0x20000104

0800f0fc <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800f0fc:	b1f1      	cbz	r1, 800f13c <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800f0fe:	3801      	subs	r0, #1
 800f100:	2803      	cmp	r0, #3
 800f102:	d81d      	bhi.n	800f140 <GetLastFcntDown+0x44>
 800f104:	e8df f000 	tbb	[pc, r0]
 800f108:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800f10c:	4a0d      	ldr	r2, [pc, #52]	; (800f144 <GetLastFcntDown+0x48>)
 800f10e:	6812      	ldr	r2, [r2, #0]
 800f110:	6912      	ldr	r2, [r2, #16]
 800f112:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800f114:	2000      	movs	r0, #0
            break;
 800f116:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800f118:	4a0a      	ldr	r2, [pc, #40]	; (800f144 <GetLastFcntDown+0x48>)
 800f11a:	6812      	ldr	r2, [r2, #0]
 800f11c:	6952      	ldr	r2, [r2, #20]
 800f11e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f120:	2000      	movs	r0, #0
            break;
 800f122:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800f124:	4a07      	ldr	r2, [pc, #28]	; (800f144 <GetLastFcntDown+0x48>)
 800f126:	6812      	ldr	r2, [r2, #0]
 800f128:	6992      	ldr	r2, [r2, #24]
 800f12a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f12c:	2000      	movs	r0, #0
            break;
 800f12e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800f130:	4a04      	ldr	r2, [pc, #16]	; (800f144 <GetLastFcntDown+0x48>)
 800f132:	6812      	ldr	r2, [r2, #0]
 800f134:	69d2      	ldr	r2, [r2, #28]
 800f136:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f138:	2000      	movs	r0, #0
            break;
 800f13a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f13c:	200a      	movs	r0, #10
 800f13e:	4770      	bx	lr
    switch( fCntID )
 800f140:	2005      	movs	r0, #5
}
 800f142:	4770      	bx	lr
 800f144:	20003a50 	.word	0x20003a50

0800f148 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800f148:	b510      	push	{r4, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800f152:	a901      	add	r1, sp, #4
 800f154:	f7ff ffd2 	bl	800f0fc <GetLastFcntDown>
 800f158:	b948      	cbnz	r0, 800f16e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800f15a:	9b01      	ldr	r3, [sp, #4]
 800f15c:	42a3      	cmp	r3, r4
 800f15e:	d309      	bcc.n	800f174 <CheckFCntDown+0x2c>
 800f160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f164:	d001      	beq.n	800f16a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800f166:	2000      	movs	r0, #0
 800f168:	e002      	b.n	800f170 <CheckFCntDown+0x28>
        return true;
 800f16a:	2001      	movs	r0, #1
 800f16c:	e000      	b.n	800f170 <CheckFCntDown+0x28>
        return false;
 800f16e:	2000      	movs	r0, #0
    }
}
 800f170:	b002      	add	sp, #8
 800f172:	bd10      	pop	{r4, pc}
        return true;
 800f174:	2001      	movs	r0, #1
 800f176:	e7fb      	b.n	800f170 <CheckFCntDown+0x28>

0800f178 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800f178:	3801      	subs	r0, #1
 800f17a:	2803      	cmp	r0, #3
 800f17c:	d815      	bhi.n	800f1aa <UpdateFCntDown+0x32>
 800f17e:	e8df f000 	tbb	[pc, r0]
 800f182:	0702      	.short	0x0702
 800f184:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800f186:	4b09      	ldr	r3, [pc, #36]	; (800f1ac <UpdateFCntDown+0x34>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800f18c:	6219      	str	r1, [r3, #32]
            break;
 800f18e:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800f190:	4b06      	ldr	r3, [pc, #24]	; (800f1ac <UpdateFCntDown+0x34>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800f196:	6219      	str	r1, [r3, #32]
            break;
 800f198:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800f19a:	4b04      	ldr	r3, [pc, #16]	; (800f1ac <UpdateFCntDown+0x34>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800f1a0:	6219      	str	r1, [r3, #32]
            break;
 800f1a2:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800f1a4:	4b01      	ldr	r3, [pc, #4]	; (800f1ac <UpdateFCntDown+0x34>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800f1aa:	4770      	bx	lr
 800f1ac:	20003a50 	.word	0x20003a50

0800f1b0 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800f1b0:	4b0a      	ldr	r3, [pc, #40]	; (800f1dc <ResetFCnts+0x2c>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f1b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f1bc:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f1be:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f1c0:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800f1c2:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dd00      	ble.n	800f1ca <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800f1c8:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800f1ca:	1d99      	adds	r1, r3, #6
 800f1cc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1d4:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	e7f4      	b.n	800f1c4 <ResetFCnts+0x14>
 800f1da:	bf00      	nop
 800f1dc:	20003a50 	.word	0x20003a50

0800f1e0 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800f1e0:	4b03      	ldr	r3, [pc, #12]	; (800f1f0 <IsJoinNonce10xOk+0x10>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800f1e6:	4283      	cmp	r3, r0
 800f1e8:	bf2c      	ite	cs
 800f1ea:	2000      	movcs	r0, #0
 800f1ec:	2001      	movcc	r0, #1
 800f1ee:	4770      	bx	lr
 800f1f0:	20003a50 	.word	0x20003a50

0800f1f4 <ComputeCmacB0>:
{
 800f1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f8:	b088      	sub	sp, #32
 800f1fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800f1fc:	b1f0      	cbz	r0, 800f23c <ComputeCmacB0+0x48>
 800f1fe:	460c      	mov	r4, r1
 800f200:	4615      	mov	r5, r2
 800f202:	461a      	mov	r2, r3
 800f204:	4680      	mov	r8, r0
 800f206:	b1de      	cbz	r6, 800f240 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f208:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f20c:	d81a      	bhi.n	800f244 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f20e:	af04      	add	r7, sp, #16
 800f210:	9702      	str	r7, [sp, #8]
 800f212:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f21e:	4629      	mov	r1, r5
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff ff31 	bl	800f088 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800f226:	9600      	str	r6, [sp, #0]
 800f228:	462b      	mov	r3, r5
 800f22a:	4622      	mov	r2, r4
 800f22c:	4641      	mov	r1, r8
 800f22e:	4638      	mov	r0, r7
 800f230:	f003 fb86 	bl	8012940 <SecureElementComputeAesCmac>
 800f234:	b940      	cbnz	r0, 800f248 <ComputeCmacB0+0x54>
}
 800f236:	b008      	add	sp, #32
 800f238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f23c:	200a      	movs	r0, #10
 800f23e:	e7fa      	b.n	800f236 <ComputeCmacB0+0x42>
 800f240:	200a      	movs	r0, #10
 800f242:	e7f8      	b.n	800f236 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f244:	200e      	movs	r0, #14
 800f246:	e7f6      	b.n	800f236 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f248:	200f      	movs	r0, #15
 800f24a:	e7f4      	b.n	800f236 <ComputeCmacB0+0x42>

0800f24c <DeriveSessionKey10x>:
{
 800f24c:	b510      	push	{r4, lr}
 800f24e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800f250:	2400      	movs	r4, #0
 800f252:	9400      	str	r4, [sp, #0]
 800f254:	9401      	str	r4, [sp, #4]
 800f256:	9402      	str	r4, [sp, #8]
 800f258:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800f25a:	2808      	cmp	r0, #8
 800f25c:	d003      	beq.n	800f266 <DeriveSessionKey10x+0x1a>
 800f25e:	2809      	cmp	r0, #9
 800f260:	d025      	beq.n	800f2ae <DeriveSessionKey10x+0x62>
 800f262:	200b      	movs	r0, #11
 800f264:	e021      	b.n	800f2aa <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800f266:	2401      	movs	r4, #1
 800f268:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800f26c:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800f270:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f274:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800f278:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f27c:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800f280:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800f284:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f288:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800f28c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800f290:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800f294:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f29e:	4602      	mov	r2, r0
 800f2a0:	2101      	movs	r1, #1
 800f2a2:	4668      	mov	r0, sp
 800f2a4:	f003 fbea 	bl	8012a7c <SecureElementDeriveAndStoreKey>
 800f2a8:	b928      	cbnz	r0, 800f2b6 <DeriveSessionKey10x+0x6a>
}
 800f2aa:	b004      	add	sp, #16
 800f2ac:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800f2ae:	2402      	movs	r4, #2
 800f2b0:	f88d 4000 	strb.w	r4, [sp]
            break;
 800f2b4:	e7da      	b.n	800f26c <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f2b6:	200f      	movs	r0, #15
 800f2b8:	e7f7      	b.n	800f2aa <DeriveSessionKey10x+0x5e>

0800f2ba <PayloadEncrypt>:
{
 800f2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	4690      	mov	r8, r2
 800f2c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d052      	beq.n	800f36e <PayloadEncrypt+0xb4>
 800f2c8:	460d      	mov	r5, r1
 800f2ca:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800f2cc:	2600      	movs	r6, #0
 800f2ce:	9604      	str	r6, [sp, #16]
 800f2d0:	9605      	str	r6, [sp, #20]
 800f2d2:	9606      	str	r6, [sp, #24]
 800f2d4:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800f2d6:	9600      	str	r6, [sp, #0]
 800f2d8:	9601      	str	r6, [sp, #4]
 800f2da:	9602      	str	r6, [sp, #8]
 800f2dc:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800f2de:	2701      	movs	r7, #1
 800f2e0:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800f2e4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800f2e8:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800f2ec:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800f2f0:	0a19      	lsrs	r1, r3, #8
 800f2f2:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800f2f6:	0c19      	lsrs	r1, r3, #16
 800f2f8:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800f2fc:	0e1b      	lsrs	r3, r3, #24
 800f2fe:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800f302:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800f306:	0a13      	lsrs	r3, r2, #8
 800f308:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800f30c:	0c13      	lsrs	r3, r2, #16
 800f30e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800f312:	0e12      	lsrs	r2, r2, #24
 800f314:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800f318:	e014      	b.n	800f344 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800f31a:	18f2      	adds	r2, r6, r3
 800f31c:	5ca0      	ldrb	r0, [r4, r2]
 800f31e:	f103 0120 	add.w	r1, r3, #32
 800f322:	4469      	add	r1, sp
 800f324:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800f328:	4048      	eors	r0, r1
 800f32a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800f32c:	3301      	adds	r3, #1
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	462a      	mov	r2, r5
 800f332:	2d10      	cmp	r5, #16
 800f334:	bfa8      	it	ge
 800f336:	2210      	movge	r2, #16
 800f338:	4293      	cmp	r3, r2
 800f33a:	dbee      	blt.n	800f31a <PayloadEncrypt+0x60>
        size -= 16;
 800f33c:	3d10      	subs	r5, #16
 800f33e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800f340:	3610      	adds	r6, #16
 800f342:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800f344:	2d00      	cmp	r5, #0
 800f346:	dd0e      	ble.n	800f366 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800f348:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800f34c:	3701      	adds	r7, #1
 800f34e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800f350:	ab04      	add	r3, sp, #16
 800f352:	4642      	mov	r2, r8
 800f354:	2110      	movs	r1, #16
 800f356:	4668      	mov	r0, sp
 800f358:	f003 fb17 	bl	801298a <SecureElementAesEncrypt>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2800      	cmp	r0, #0
 800f360:	d0e6      	beq.n	800f330 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f362:	200f      	movs	r0, #15
 800f364:	e000      	b.n	800f368 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800f366:	2000      	movs	r0, #0
}
 800f368:	b008      	add	sp, #32
 800f36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f36e:	200a      	movs	r0, #10
 800f370:	e7fa      	b.n	800f368 <PayloadEncrypt+0xae>

0800f372 <VerifyCmacB0>:
    if( msg == 0 )
 800f372:	b368      	cbz	r0, 800f3d0 <VerifyCmacB0+0x5e>
{
 800f374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f378:	b0c8      	sub	sp, #288	; 0x120
 800f37a:	460c      	mov	r4, r1
 800f37c:	4615      	mov	r5, r2
 800f37e:	461e      	mov	r6, r3
 800f380:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f382:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f386:	d825      	bhi.n	800f3d4 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800f388:	af04      	add	r7, sp, #16
 800f38a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f38e:	2100      	movs	r1, #0
 800f390:	4638      	mov	r0, r7
 800f392:	f003 fd40 	bl	8012e16 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f396:	9702      	str	r7, [sp, #8]
 800f398:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800f39a:	9301      	str	r3, [sp, #4]
 800f39c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800f3a4:	4632      	mov	r2, r6
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f7ff fe6d 	bl	800f088 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800f3ae:	4622      	mov	r2, r4
 800f3b0:	4641      	mov	r1, r8
 800f3b2:	a808      	add	r0, sp, #32
 800f3b4:	f003 fd17 	bl	8012de6 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800f3b8:	462b      	mov	r3, r5
 800f3ba:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800f3bc:	f104 0110 	add.w	r1, r4, #16
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	f003 facc 	bl	801295e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800f3c6:	b130      	cbz	r0, 800f3d6 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800f3c8:	2801      	cmp	r0, #1
 800f3ca:	d004      	beq.n	800f3d6 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f3cc:	200f      	movs	r0, #15
 800f3ce:	e002      	b.n	800f3d6 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f3d0:	200a      	movs	r0, #10
}
 800f3d2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f3d4:	200e      	movs	r0, #14
}
 800f3d6:	b048      	add	sp, #288	; 0x120
 800f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3dc <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800f3dc:	b188      	cbz	r0, 800f402 <LoRaMacCryptoInit+0x26>
{
 800f3de:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800f3e0:	4c09      	ldr	r4, [pc, #36]	; (800f408 <LoRaMacCryptoInit+0x2c>)
 800f3e2:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800f3e4:	2228      	movs	r2, #40	; 0x28
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	f003 fd15 	bl	8012e16 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800f3f2:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800f3f4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800f3f6:	2400      	movs	r4, #0
 800f3f8:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800f3fa:	f7ff fed9 	bl	800f1b0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800f3fe:	4620      	mov	r0, r4
}
 800f400:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800f402:	2009      	movs	r0, #9
}
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20003a50 	.word	0x20003a50

0800f40c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800f40c:	4b02      	ldr	r3, [pc, #8]	; (800f418 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800f412:	2000      	movs	r0, #0
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	20003a50 	.word	0x20003a50

0800f41c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800f41c:	b130      	cbz	r0, 800f42c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800f41e:	4b04      	ldr	r3, [pc, #16]	; (800f430 <LoRaMacCryptoGetFCntUp+0x14>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	3301      	adds	r3, #1
 800f426:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800f428:	2000      	movs	r0, #0
 800f42a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f42c:	200a      	movs	r0, #10
}
 800f42e:	4770      	bx	lr
 800f430:	20003a50 	.word	0x20003a50

0800f434 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800f43a:	2200      	movs	r2, #0
 800f43c:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800f43e:	b363      	cbz	r3, 800f49a <LoRaMacCryptoGetFCntDown+0x66>
 800f440:	460d      	mov	r5, r1
 800f442:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800f444:	a901      	add	r1, sp, #4
 800f446:	f7ff fe59 	bl	800f0fc <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f44a:	b9b8      	cbnz	r0, 800f47c <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800f44c:	9b01      	ldr	r3, [sp, #4]
 800f44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f452:	d015      	beq.n	800f480 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800f454:	b29a      	uxth	r2, r3
 800f456:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800f458:	2a00      	cmp	r2, #0
 800f45a:	dd13      	ble.n	800f484 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800f45c:	4413      	add	r3, r2
 800f45e:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f460:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <LoRaMacCryptoGetFCntDown+0x70>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	789a      	ldrb	r2, [r3, #2]
 800f466:	b94a      	cbnz	r2, 800f47c <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800f468:	6833      	ldr	r3, [r6, #0]
 800f46a:	9901      	ldr	r1, [sp, #4]
 800f46c:	1a5b      	subs	r3, r3, r1
 800f46e:	eb61 0101 	sbc.w	r1, r1, r1
 800f472:	42ab      	cmp	r3, r5
 800f474:	f171 0100 	sbcs.w	r1, r1, #0
 800f478:	da11      	bge.n	800f49e <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800f47a:	4610      	mov	r0, r2
}
 800f47c:	b002      	add	sp, #8
 800f47e:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800f480:	6034      	str	r4, [r6, #0]
 800f482:	e7ed      	b.n	800f460 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800f484:	b132      	cbz	r2, 800f494 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800f486:	0c1b      	lsrs	r3, r3, #16
 800f488:	041b      	lsls	r3, r3, #16
 800f48a:	4423      	add	r3, r4
 800f48c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f490:	6033      	str	r3, [r6, #0]
 800f492:	e7e5      	b.n	800f460 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800f494:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800f496:	2007      	movs	r0, #7
 800f498:	e7f0      	b.n	800f47c <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f49a:	200a      	movs	r0, #10
 800f49c:	e7ee      	b.n	800f47c <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800f49e:	2008      	movs	r0, #8
 800f4a0:	e7ec      	b.n	800f47c <LoRaMacCryptoGetFCntDown+0x48>
 800f4a2:	bf00      	nop
 800f4a4:	20003a50 	.word	0x20003a50

0800f4a8 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800f4a8:	4601      	mov	r1, r0
 800f4aa:	b908      	cbnz	r0, 800f4b0 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f4ac:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f4ae:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd01      	ble.n	800f4ba <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800f4ba:	4a07      	ldr	r2, [pc, #28]	; (800f4d8 <LoRaMacCryptoSetMulticastReference+0x30>)
 800f4bc:	6812      	ldr	r2, [r2, #0]
 800f4be:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f4c2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800f4c6:	f103 0c06 	add.w	ip, r3, #6
 800f4ca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800f4ce:	3204      	adds	r2, #4
 800f4d0:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	e7ed      	b.n	800f4b2 <LoRaMacCryptoSetMulticastReference+0xa>
 800f4d6:	bf00      	nop
 800f4d8:	20003a50 	.word	0x20003a50

0800f4dc <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800f4dc:	b300      	cbz	r0, 800f520 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	b084      	sub	sp, #16
 800f4e2:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800f4e8:	a803      	add	r0, sp, #12
 800f4ea:	f003 fb25 	bl	8012b38 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800f4ee:	4b10      	ldr	r3, [pc, #64]	; (800f530 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f4f6:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800f4f8:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 fa33 	bl	800f966 <LoRaMacSerializerJoinRequest>
 800f500:	b980      	cbnz	r0, 800f524 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800f502:	4623      	mov	r3, r4
 800f504:	f853 1b18 	ldr.w	r1, [r3], #24
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	2301      	movs	r3, #1
 800f50c:	2213      	movs	r2, #19
 800f50e:	f003 fa17 	bl	8012940 <SecureElementComputeAesCmac>
 800f512:	b950      	cbnz	r0, 800f52a <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f514:	4620      	mov	r0, r4
 800f516:	f000 fa26 	bl	800f966 <LoRaMacSerializerJoinRequest>
 800f51a:	b120      	cbz	r0, 800f526 <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f51c:	2011      	movs	r0, #17
 800f51e:	e002      	b.n	800f526 <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f520:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f522:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f524:	2011      	movs	r0, #17
}
 800f526:	b004      	add	sp, #16
 800f528:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f52a:	200f      	movs	r0, #15
 800f52c:	e7fb      	b.n	800f526 <LoRaMacCryptoPrepareJoinRequest+0x4a>
 800f52e:	bf00      	nop
 800f530:	20003a50 	.word	0x20003a50

0800f534 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800f534:	2b00      	cmp	r3, #0
 800f536:	d036      	beq.n	800f5a6 <LoRaMacCryptoSecureMessage+0x72>
{
 800f538:	b530      	push	{r4, r5, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	4604      	mov	r4, r0
 800f53e:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800f540:	4b1d      	ldr	r3, [pc, #116]	; (800f5b8 <LoRaMacCryptoSecureMessage+0x84>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	4283      	cmp	r3, r0
 800f548:	d82f      	bhi.n	800f5aa <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800f54a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800f54e:	b342      	cbz	r2, 800f5a2 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800f550:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800f552:	42a3      	cmp	r3, r4
 800f554:	d209      	bcs.n	800f56a <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800f556:	9401      	str	r4, [sp, #4]
 800f558:	2300      	movs	r3, #0
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	68ab      	ldr	r3, [r5, #8]
 800f55e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800f562:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f564:	f7ff fea9 	bl	800f2ba <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f568:	bb10      	cbnz	r0, 800f5b0 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f56a:	4628      	mov	r0, r5
 800f56c:	f000 fa31 	bl	800f9d2 <LoRaMacSerializerData>
 800f570:	b9e8      	cbnz	r0, 800f5ae <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800f572:	7929      	ldrb	r1, [r5, #4]
 800f574:	3904      	subs	r1, #4
 800f576:	462b      	mov	r3, r5
 800f578:	f853 0b2c 	ldr.w	r0, [r3], #44
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	9402      	str	r4, [sp, #8]
 800f580:	68ab      	ldr	r3, [r5, #8]
 800f582:	9301      	str	r3, [sp, #4]
 800f584:	2300      	movs	r3, #0
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	2208      	movs	r2, #8
 800f58a:	b289      	uxth	r1, r1
 800f58c:	f7ff fe32 	bl	800f1f4 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f590:	b970      	cbnz	r0, 800f5b0 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f592:	4628      	mov	r0, r5
 800f594:	f000 fa1d 	bl	800f9d2 <LoRaMacSerializerData>
 800f598:	b960      	cbnz	r0, 800f5b4 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800f59a:	4b07      	ldr	r3, [pc, #28]	; (800f5b8 <LoRaMacCryptoSecureMessage+0x84>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800f5a0:	e006      	b.n	800f5b0 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	e7d5      	b.n	800f552 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f5a6:	200a      	movs	r0, #10
}
 800f5a8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f5aa:	2006      	movs	r0, #6
 800f5ac:	e000      	b.n	800f5b0 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f5ae:	2011      	movs	r0, #17
}
 800f5b0:	b005      	add	sp, #20
 800f5b2:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f5b4:	2011      	movs	r0, #17
 800f5b6:	e7fb      	b.n	800f5b0 <LoRaMacCryptoSecureMessage+0x7c>
 800f5b8:	20003a50 	.word	0x20003a50

0800f5bc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800f5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	d049      	beq.n	800f65c <LoRaMacCryptoUnsecureMessage+0xa0>
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	4688      	mov	r8, r1
 800f5cc:	4617      	mov	r7, r2
 800f5ce:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	f7ff fdb8 	bl	800f148 <CheckFCntDown>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d041      	beq.n	800f660 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f000 f963 	bl	800f8a8 <LoRaMacParserData>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d141      	bne.n	800f66a <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800f5e6:	a905      	add	r1, sp, #20
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f7ff fd71 	bl	800f0d0 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d136      	bne.n	800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800f5f4:	9b05      	ldr	r3, [sp, #20]
 800f5f6:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800f5fa:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800f5fc:	68b3      	ldr	r3, [r6, #8]
 800f5fe:	4543      	cmp	r3, r8
 800f600:	d135      	bne.n	800f66e <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800f602:	7b33      	ldrb	r3, [r6, #12]
 800f604:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f608:	491a      	ldr	r1, [pc, #104]	; (800f674 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800f60a:	6809      	ldr	r1, [r1, #0]
 800f60c:	7889      	ldrb	r1, [r1, #2]
 800f60e:	b901      	cbnz	r1, 800f612 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800f610:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800f612:	7931      	ldrb	r1, [r6, #4]
 800f614:	3904      	subs	r1, #4
 800f616:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f618:	9003      	str	r0, [sp, #12]
 800f61a:	9402      	str	r4, [sp, #8]
 800f61c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f620:	2001      	movs	r0, #1
 800f622:	9000      	str	r0, [sp, #0]
 800f624:	b289      	uxth	r1, r1
 800f626:	6830      	ldr	r0, [r6, #0]
 800f628:	f7ff fea3 	bl	800f372 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f62c:	4605      	mov	r5, r0
 800f62e:	b9c0      	cbnz	r0, 800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800f630:	f896 3020 	ldrb.w	r3, [r6, #32]
 800f634:	b90b      	cbnz	r3, 800f63a <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800f636:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800f63a:	9401      	str	r4, [sp, #4]
 800f63c:	2301      	movs	r3, #1
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	4643      	mov	r3, r8
 800f642:	464a      	mov	r2, r9
 800f644:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800f648:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800f64a:	f7ff fe36 	bl	800f2ba <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f64e:	4605      	mov	r5, r0
 800f650:	b938      	cbnz	r0, 800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800f652:	4621      	mov	r1, r4
 800f654:	4638      	mov	r0, r7
 800f656:	f7ff fd8f 	bl	800f178 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800f65a:	e002      	b.n	800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f65c:	250a      	movs	r5, #10
 800f65e:	e000      	b.n	800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f660:	2506      	movs	r5, #6
}
 800f662:	4628      	mov	r0, r5
 800f664:	b007      	add	sp, #28
 800f666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f66a:	2510      	movs	r5, #16
 800f66c:	e7f9      	b.n	800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800f66e:	2502      	movs	r5, #2
 800f670:	e7f7      	b.n	800f662 <LoRaMacCryptoUnsecureMessage+0xa6>
 800f672:	bf00      	nop
 800f674:	20003a50 	.word	0x20003a50

0800f678 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800f678:	b500      	push	{lr}
 800f67a:	b085      	sub	sp, #20
 800f67c:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800f67e:	2300      	movs	r3, #0
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	9301      	str	r3, [sp, #4]
 800f684:	9302      	str	r3, [sp, #8]
 800f686:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800f688:	290b      	cmp	r1, #11
 800f68a:	d007      	beq.n	800f69c <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800f68c:	290c      	cmp	r1, #12
 800f68e:	d013      	beq.n	800f6b8 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800f690:	290a      	cmp	r1, #10
 800f692:	d00c      	beq.n	800f6ae <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800f694:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f696:	b005      	add	sp, #20
 800f698:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800f69c:	2801      	cmp	r0, #1
 800f69e:	d001      	beq.n	800f6a4 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	e00a      	b.n	800f6ba <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800f6a4:	2320      	movs	r3, #32
 800f6a6:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	e005      	b.n	800f6ba <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800f6ae:	2330      	movs	r3, #48	; 0x30
 800f6b0:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800f6b4:	2100      	movs	r1, #0
            break;
 800f6b6:	e000      	b.n	800f6ba <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800f6b8:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f6ba:	4668      	mov	r0, sp
 800f6bc:	f003 f9de 	bl	8012a7c <SecureElementDeriveAndStoreKey>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d0e8      	beq.n	800f696 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f6c4:	200f      	movs	r0, #15
 800f6c6:	e7e6      	b.n	800f696 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800f6c8 <LoRaMacCryptoSetKey>:
{
 800f6c8:	b510      	push	{r4, lr}
 800f6ca:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800f6cc:	f003 f994 	bl	80129f8 <SecureElementSetKey>
 800f6d0:	b998      	cbnz	r0, 800f6fa <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800f6d2:	b104      	cbz	r4, 800f6d6 <LoRaMacCryptoSetKey+0xe>
}
 800f6d4:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f6d6:	4b0c      	ldr	r3, [pc, #48]	; (800f708 <LoRaMacCryptoSetKey+0x40>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	210b      	movs	r1, #11
 800f6dc:	7898      	ldrb	r0, [r3, #2]
 800f6de:	f7ff ffcb 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
 800f6e2:	b960      	cbnz	r0, 800f6fe <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f6e4:	210c      	movs	r1, #12
 800f6e6:	f7ff ffc7 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
 800f6ea:	b950      	cbnz	r0, 800f702 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800f6ec:	210a      	movs	r1, #10
 800f6ee:	f7ff ffc3 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d0ee      	beq.n	800f6d4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f6f6:	200f      	movs	r0, #15
 800f6f8:	e7ec      	b.n	800f6d4 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f6fa:	200f      	movs	r0, #15
 800f6fc:	e7ea      	b.n	800f6d4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f6fe:	200f      	movs	r0, #15
 800f700:	e7e8      	b.n	800f6d4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f702:	200f      	movs	r0, #15
 800f704:	e7e6      	b.n	800f6d4 <LoRaMacCryptoSetKey+0xc>
 800f706:	bf00      	nop
 800f708:	20003a50 	.word	0x20003a50

0800f70c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f70c:	2a00      	cmp	r2, #0
 800f70e:	d06c      	beq.n	800f7ea <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800f710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f712:	b08f      	sub	sp, #60	; 0x3c
 800f714:	4607      	mov	r7, r0
 800f716:	460d      	mov	r5, r1
 800f718:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800f71a:	2900      	cmp	r1, #0
 800f71c:	d067      	beq.n	800f7ee <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800f71e:	2600      	movs	r6, #0
 800f720:	9605      	str	r6, [sp, #20]
 800f722:	221d      	movs	r2, #29
 800f724:	4631      	mov	r1, r6
 800f726:	a806      	add	r0, sp, #24
 800f728:	f005 ff14 	bl	8015554 <memset>
    uint8_t versionMinor         = 0;
 800f72c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800f730:	4b33      	ldr	r3, [pc, #204]	; (800f800 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800f736:	f10d 0313 	add.w	r3, sp, #19
 800f73a:	9302      	str	r3, [sp, #8]
 800f73c:	ab05      	add	r3, sp, #20
 800f73e:	9301      	str	r3, [sp, #4]
 800f740:	7923      	ldrb	r3, [r4, #4]
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	4632      	mov	r2, r6
 800f748:	4629      	mov	r1, r5
 800f74a:	4638      	mov	r0, r7
 800f74c:	f003 f9b6 	bl	8012abc <SecureElementProcessJoinAccept>
 800f750:	2800      	cmp	r0, #0
 800f752:	d14e      	bne.n	800f7f2 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800f754:	7922      	ldrb	r2, [r4, #4]
 800f756:	a905      	add	r1, sp, #20
 800f758:	6820      	ldr	r0, [r4, #0]
 800f75a:	f003 fb44 	bl	8012de6 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 f850 	bl	800f804 <LoRaMacParserJoinAccept>
 800f764:	2800      	cmp	r0, #0
 800f766:	d147      	bne.n	800f7f8 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800f768:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800f76a:	79e3      	ldrb	r3, [r4, #7]
 800f76c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800f770:	7a23      	ldrb	r3, [r4, #8]
 800f772:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800f776:	4628      	mov	r0, r5
 800f778:	f7ff fd32 	bl	800f1e0 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d03d      	beq.n	800f7fc <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800f780:	4b1f      	ldr	r3, [pc, #124]	; (800f800 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800f786:	210b      	movs	r1, #11
 800f788:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800f78c:	f7ff ff74 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f790:	bb80      	cbnz	r0, 800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800f792:	210c      	movs	r1, #12
 800f794:	2000      	movs	r0, #0
 800f796:	f7ff ff6f 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f79a:	bb58      	cbnz	r0, 800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800f79c:	210a      	movs	r1, #10
 800f79e:	2000      	movs	r0, #0
 800f7a0:	f7ff ff6a 	bl	800f678 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f7a4:	bb30      	cbnz	r0, 800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800f7a6:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800f7a8:	7aa2      	ldrb	r2, [r4, #10]
 800f7aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800f7ae:	7ae2      	ldrb	r2, [r4, #11]
 800f7b0:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800f7b4:	4633      	mov	r3, r6
 800f7b6:	4622      	mov	r2, r4
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	2009      	movs	r0, #9
 800f7bc:	f7ff fd46 	bl	800f24c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f7c0:	b9c0      	cbnz	r0, 800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800f7c2:	4633      	mov	r3, r6
 800f7c4:	4622      	mov	r2, r4
 800f7c6:	4629      	mov	r1, r5
 800f7c8:	2008      	movs	r0, #8
 800f7ca:	f7ff fd3f 	bl	800f24c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f7ce:	b988      	cbnz	r0, 800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800f7d8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800f7da:	2200      	movs	r2, #0
 800f7dc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7e2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f7e4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f7e6:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800f7e8:	e004      	b.n	800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f7ea:	200a      	movs	r0, #10
}
 800f7ec:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f7ee:	200a      	movs	r0, #10
 800f7f0:	e000      	b.n	800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f7f2:	200f      	movs	r0, #15
}
 800f7f4:	b00f      	add	sp, #60	; 0x3c
 800f7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f7f8:	2010      	movs	r0, #16
 800f7fa:	e7fb      	b.n	800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800f7fc:	2003      	movs	r0, #3
 800f7fe:	e7f9      	b.n	800f7f4 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800f800:	20003a50 	.word	0x20003a50

0800f804 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f804:	2800      	cmp	r0, #0
 800f806:	d049      	beq.n	800f89c <LoRaMacParserJoinAccept+0x98>
{
 800f808:	b510      	push	{r4, lr}
 800f80a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f80c:	6801      	ldr	r1, [r0, #0]
 800f80e:	2900      	cmp	r1, #0
 800f810:	d046      	beq.n	800f8a0 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f812:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f816:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800f818:	2203      	movs	r2, #3
 800f81a:	3006      	adds	r0, #6
 800f81c:	f003 fae3 	bl	8012de6 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800f820:	4620      	mov	r0, r4
 800f822:	f850 1b09 	ldr.w	r1, [r0], #9
 800f826:	2203      	movs	r2, #3
 800f828:	3104      	adds	r1, #4
 800f82a:	f003 fadc 	bl	8012de6 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f82e:	6821      	ldr	r1, [r4, #0]
 800f830:	79cb      	ldrb	r3, [r1, #7]
 800f832:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f834:	7a0a      	ldrb	r2, [r1, #8]
 800f836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f83a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f83c:	7a4a      	ldrb	r2, [r1, #9]
 800f83e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f842:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f844:	7a8a      	ldrb	r2, [r1, #10]
 800f846:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f84a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800f84c:	7acb      	ldrb	r3, [r1, #11]
 800f84e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f850:	7b0b      	ldrb	r3, [r1, #12]
 800f852:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800f854:	7923      	ldrb	r3, [r4, #4]
 800f856:	2b21      	cmp	r3, #33	; 0x21
 800f858:	d018      	beq.n	800f88c <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800f85a:	2b11      	cmp	r3, #17
 800f85c:	dc22      	bgt.n	800f8a4 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800f85e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800f860:	6821      	ldr	r1, [r4, #0]
 800f862:	f102 0c01 	add.w	ip, r2, #1
 800f866:	5c8b      	ldrb	r3, [r1, r2]
 800f868:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f86a:	1c90      	adds	r0, r2, #2
 800f86c:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800f870:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800f874:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f876:	3203      	adds	r2, #3
 800f878:	5c08      	ldrb	r0, [r1, r0]
 800f87a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f87e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f880:	5c8a      	ldrb	r2, [r1, r2]
 800f882:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f886:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800f888:	2000      	movs	r0, #0
}
 800f88a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800f88c:	2210      	movs	r2, #16
 800f88e:	310d      	adds	r1, #13
 800f890:	f104 0012 	add.w	r0, r4, #18
 800f894:	f003 faa7 	bl	8012de6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800f898:	221d      	movs	r2, #29
 800f89a:	e7e1      	b.n	800f860 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800f89c:	2002      	movs	r0, #2
}
 800f89e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f8a0:	2002      	movs	r0, #2
 800f8a2:	e7f2      	b.n	800f88a <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	e7f0      	b.n	800f88a <LoRaMacParserJoinAccept+0x86>

0800f8a8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d058      	beq.n	800f95e <LoRaMacParserData+0xb6>
{
 800f8ac:	b510      	push	{r4, lr}
 800f8ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f8b0:	6801      	ldr	r1, [r0, #0]
 800f8b2:	2900      	cmp	r1, #0
 800f8b4:	d055      	beq.n	800f962 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800f8b6:	780b      	ldrb	r3, [r1, #0]
 800f8b8:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800f8ba:	784b      	ldrb	r3, [r1, #1]
 800f8bc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800f8be:	788a      	ldrb	r2, [r1, #2]
 800f8c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f8c4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800f8c6:	78ca      	ldrb	r2, [r1, #3]
 800f8c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8cc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800f8ce:	790a      	ldrb	r2, [r1, #4]
 800f8d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f8d4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800f8d6:	794b      	ldrb	r3, [r1, #5]
 800f8d8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800f8da:	798b      	ldrb	r3, [r1, #6]
 800f8dc:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800f8de:	79ca      	ldrb	r2, [r1, #7]
 800f8e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f8e4:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f8e6:	7b02      	ldrb	r2, [r0, #12]
 800f8e8:	f002 020f 	and.w	r2, r2, #15
 800f8ec:	3108      	adds	r1, #8
 800f8ee:	3010      	adds	r0, #16
 800f8f0:	f003 fa79 	bl	8012de6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f8f4:	7b23      	ldrb	r3, [r4, #12]
 800f8f6:	f003 030f 	and.w	r3, r3, #15
 800f8fa:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800f8fe:	2200      	movs	r2, #0
 800f900:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800f904:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800f908:	7922      	ldrb	r2, [r4, #4]
 800f90a:	1a11      	subs	r1, r2, r0
 800f90c:	2904      	cmp	r1, #4
 800f90e:	dc16      	bgt.n	800f93e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800f910:	6822      	ldr	r2, [r4, #0]
 800f912:	7923      	ldrb	r3, [r4, #4]
 800f914:	441a      	add	r2, r3
 800f916:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f91a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800f91c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800f920:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f924:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800f926:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800f92a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f92e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800f930:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f934:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f938:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800f93a:	2000      	movs	r0, #0
}
 800f93c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800f93e:	6821      	ldr	r1, [r4, #0]
 800f940:	3309      	adds	r3, #9
 800f942:	5c08      	ldrb	r0, [r1, r0]
 800f944:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800f948:	1ad2      	subs	r2, r2, r3
 800f94a:	b2d2      	uxtb	r2, r2
 800f94c:	3a04      	subs	r2, #4
 800f94e:	b2d2      	uxtb	r2, r2
 800f950:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800f954:	4419      	add	r1, r3
 800f956:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f958:	f003 fa45 	bl	8012de6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800f95c:	e7d8      	b.n	800f910 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800f95e:	2002      	movs	r0, #2
}
 800f960:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f962:	2002      	movs	r0, #2
 800f964:	e7ea      	b.n	800f93c <LoRaMacParserData+0x94>

0800f966 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f966:	b370      	cbz	r0, 800f9c6 <LoRaMacSerializerJoinRequest+0x60>
{
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f96c:	6803      	ldr	r3, [r0, #0]
 800f96e:	b363      	cbz	r3, 800f9ca <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800f970:	7902      	ldrb	r2, [r0, #4]
 800f972:	2a16      	cmp	r2, #22
 800f974:	d92b      	bls.n	800f9ce <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f976:	7942      	ldrb	r2, [r0, #5]
 800f978:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f97a:	4601      	mov	r1, r0
 800f97c:	f851 0b06 	ldr.w	r0, [r1], #6
 800f980:	2208      	movs	r2, #8
 800f982:	3001      	adds	r0, #1
 800f984:	f003 fa3a 	bl	8012dfc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800f988:	4621      	mov	r1, r4
 800f98a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800f98e:	2208      	movs	r2, #8
 800f990:	3009      	adds	r0, #9
 800f992:	f003 fa33 	bl	8012dfc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800f996:	8ae2      	ldrh	r2, [r4, #22]
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800f99c:	8ae3      	ldrh	r3, [r4, #22]
 800f99e:	6822      	ldr	r2, [r4, #0]
 800f9a0:	0a1b      	lsrs	r3, r3, #8
 800f9a2:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f9a4:	69a2      	ldr	r2, [r4, #24]
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f9aa:	69a3      	ldr	r3, [r4, #24]
 800f9ac:	0a1b      	lsrs	r3, r3, #8
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f9b2:	8b62      	ldrh	r2, [r4, #26]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f9b8:	7ee2      	ldrb	r2, [r4, #27]
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800f9be:	2317      	movs	r3, #23
 800f9c0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f9c2:	2000      	movs	r0, #0
}
 800f9c4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f9c6:	2001      	movs	r0, #1
}
 800f9c8:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f9ca:	2001      	movs	r0, #1
 800f9cc:	e7fa      	b.n	800f9c4 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f9ce:	2002      	movs	r0, #2
 800f9d0:	e7f8      	b.n	800f9c4 <LoRaMacSerializerJoinRequest+0x5e>

0800f9d2 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d066      	beq.n	800faa4 <LoRaMacSerializerData+0xd2>
{
 800f9d6:	b538      	push	{r3, r4, r5, lr}
 800f9d8:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f9da:	6801      	ldr	r1, [r0, #0]
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	d063      	beq.n	800faa8 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f9e0:	7b02      	ldrb	r2, [r0, #12]
 800f9e2:	f002 020f 	and.w	r2, r2, #15
 800f9e6:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f9ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f9ee:	b10b      	cbz	r3, 800f9f4 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800f9f0:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800f9f4:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800f9f6:	3304      	adds	r3, #4
 800f9f8:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800f9fa:	7922      	ldrb	r2, [r4, #4]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d355      	bcc.n	800faac <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800fa00:	7963      	ldrb	r3, [r4, #5]
 800fa02:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800fa04:	68a2      	ldr	r2, [r4, #8]
 800fa06:	6823      	ldr	r3, [r4, #0]
 800fa08:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800fa0a:	68a3      	ldr	r3, [r4, #8]
 800fa0c:	0a1b      	lsrs	r3, r3, #8
 800fa0e:	6822      	ldr	r2, [r4, #0]
 800fa10:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800fa12:	8962      	ldrh	r2, [r4, #10]
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800fa18:	7ae2      	ldrb	r2, [r4, #11]
 800fa1a:	6823      	ldr	r3, [r4, #0]
 800fa1c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	7b22      	ldrb	r2, [r4, #12]
 800fa22:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800fa24:	89e2      	ldrh	r2, [r4, #14]
 800fa26:	6823      	ldr	r3, [r4, #0]
 800fa28:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800fa2a:	89e3      	ldrh	r3, [r4, #14]
 800fa2c:	6822      	ldr	r2, [r4, #0]
 800fa2e:	0a1b      	lsrs	r3, r3, #8
 800fa30:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800fa32:	4621      	mov	r1, r4
 800fa34:	f851 0b10 	ldr.w	r0, [r1], #16
 800fa38:	7b22      	ldrb	r2, [r4, #12]
 800fa3a:	f002 020f 	and.w	r2, r2, #15
 800fa3e:	3008      	adds	r0, #8
 800fa40:	f003 f9d1 	bl	8012de6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fa44:	7b23      	ldrb	r3, [r4, #12]
 800fa46:	f003 030f 	and.w	r3, r3, #15
 800fa4a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800fa4e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fa52:	b12a      	cbz	r2, 800fa60 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800fa54:	6822      	ldr	r2, [r4, #0]
 800fa56:	f894 1020 	ldrb.w	r1, [r4, #32]
 800fa5a:	5551      	strb	r1, [r2, r5]
 800fa5c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800fa60:	6820      	ldr	r0, [r4, #0]
 800fa62:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fa66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fa68:	4428      	add	r0, r5
 800fa6a:	f003 f9bc 	bl	8012de6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800fa6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fa72:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800fa74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fa76:	6821      	ldr	r1, [r4, #0]
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	b292      	uxth	r2, r2
 800fa7c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800fa7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fa80:	0a08      	lsrs	r0, r1, #8
 800fa82:	6825      	ldr	r5, [r4, #0]
 800fa84:	1c99      	adds	r1, r3, #2
 800fa86:	b289      	uxth	r1, r1
 800fa88:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800fa8a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800fa8c:	6820      	ldr	r0, [r4, #0]
 800fa8e:	1cda      	adds	r2, r3, #3
 800fa90:	b292      	uxth	r2, r2
 800fa92:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800fa94:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800fa98:	6821      	ldr	r1, [r4, #0]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800fa9e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800faa0:	2000      	movs	r0, #0
}
 800faa2:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800faa4:	2001      	movs	r0, #1
}
 800faa6:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800faa8:	2001      	movs	r0, #1
 800faaa:	e7fa      	b.n	800faa2 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800faac:	2002      	movs	r0, #2
 800faae:	e7f8      	b.n	800faa2 <LoRaMacSerializerData+0xd0>

0800fab0 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800fab0:	4b02      	ldr	r3, [pc, #8]	; (800fabc <NvmDataMgmtEvent+0xc>)
 800fab2:	881a      	ldrh	r2, [r3, #0]
 800fab4:	4310      	orrs	r0, r2
 800fab6:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	20003a54 	.word	0x20003a54

0800fac0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800fac0:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800fac2:	4b06      	ldr	r3, [pc, #24]	; (800fadc <NvmDataMgmtStoreBegin+0x1c>)
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	b11b      	cbz	r3, 800fad0 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800fac8:	f7fe f8dc 	bl	800dc84 <LoRaMacStop>
 800facc:	b918      	cbnz	r0, 800fad6 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800face:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800fad0:	f06f 0001 	mvn.w	r0, #1
 800fad4:	e7fb      	b.n	800face <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800fad6:	f06f 0002 	mvn.w	r0, #2
 800fada:	e7f8      	b.n	800face <NvmDataMgmtStoreBegin+0xe>
 800fadc:	20003a54 	.word	0x20003a54

0800fae0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800fae0:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fae2:	2400      	movs	r4, #0
 800fae4:	4b02      	ldr	r3, [pc, #8]	; (800faf0 <NvmDataMgmtStoreEnd+0x10>)
 800fae6:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800fae8:	f7fe f8c0 	bl	800dc6c <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800faec:	4620      	mov	r0, r4
 800faee:	bd10      	pop	{r4, pc}
 800faf0:	20003a54 	.word	0x20003a54

0800faf4 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800faf4:	2805      	cmp	r0, #5
 800faf6:	d005      	beq.n	800fb04 <RegionIsActive+0x10>
 800faf8:	2808      	cmp	r0, #8
 800fafa:	d001      	beq.n	800fb00 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800fafc:	2000      	movs	r0, #0
        }
    }
}
 800fafe:	4770      	bx	lr
    switch( region )
 800fb00:	2001      	movs	r0, #1
 800fb02:	4770      	bx	lr
 800fb04:	2001      	movs	r0, #1
 800fb06:	4770      	bx	lr

0800fb08 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800fb08:	b500      	push	{lr}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800fb10:	2200      	movs	r2, #0
 800fb12:	9200      	str	r2, [sp, #0]
    switch( region )
 800fb14:	2b05      	cmp	r3, #5
 800fb16:	d004      	beq.n	800fb22 <RegionGetPhyParam+0x1a>
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d009      	beq.n	800fb30 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800fb1c:	9b00      	ldr	r3, [sp, #0]
 800fb1e:	9301      	str	r3, [sp, #4]
 800fb20:	e002      	b.n	800fb28 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800fb22:	f000 fdfb 	bl	801071c <RegionEU868GetPhyParam>
 800fb26:	9001      	str	r0, [sp, #4]
        }
    }
}
 800fb28:	9801      	ldr	r0, [sp, #4]
 800fb2a:	b003      	add	sp, #12
 800fb2c:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800fb30:	f001 fc1e 	bl	8011370 <RegionUS915GetPhyParam>
 800fb34:	9001      	str	r0, [sp, #4]
 800fb36:	e7f7      	b.n	800fb28 <RegionGetPhyParam+0x20>

0800fb38 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800fb38:	b508      	push	{r3, lr}
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	4608      	mov	r0, r1
    switch( region )
 800fb3e:	2b05      	cmp	r3, #5
 800fb40:	d002      	beq.n	800fb48 <RegionSetBandTxDone+0x10>
 800fb42:	2b08      	cmp	r3, #8
 800fb44:	d003      	beq.n	800fb4e <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800fb46:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800fb48:	f000 feaa 	bl	80108a0 <RegionEU868SetBandTxDone>
 800fb4c:	e7fb      	b.n	800fb46 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800fb4e:	f001 fceb 	bl	8011528 <RegionUS915SetBandTxDone>
 800fb52:	e7f8      	b.n	800fb46 <RegionSetBandTxDone+0xe>

0800fb54 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800fb54:	b508      	push	{r3, lr}
 800fb56:	4603      	mov	r3, r0
 800fb58:	4608      	mov	r0, r1
    switch( region )
 800fb5a:	2b05      	cmp	r3, #5
 800fb5c:	d002      	beq.n	800fb64 <RegionInitDefaults+0x10>
 800fb5e:	2b08      	cmp	r3, #8
 800fb60:	d003      	beq.n	800fb6a <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800fb62:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800fb64:	f000 feba 	bl	80108dc <RegionEU868InitDefaults>
 800fb68:	e7fb      	b.n	800fb62 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800fb6a:	f001 fcfb 	bl	8011564 <RegionUS915InitDefaults>
}
 800fb6e:	e7f8      	b.n	800fb62 <RegionInitDefaults+0xe>

0800fb70 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fb70:	b508      	push	{r3, lr}
 800fb72:	4603      	mov	r3, r0
 800fb74:	4608      	mov	r0, r1
 800fb76:	4611      	mov	r1, r2
    switch( region )
 800fb78:	2b05      	cmp	r3, #5
 800fb7a:	d003      	beq.n	800fb84 <RegionVerify+0x14>
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	d004      	beq.n	800fb8a <RegionVerify+0x1a>
 800fb80:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800fb82:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800fb84:	f000 ff16 	bl	80109b4 <RegionEU868Verify>
 800fb88:	e7fb      	b.n	800fb82 <RegionVerify+0x12>
        US915_VERIFY( );
 800fb8a:	f001 fd91 	bl	80116b0 <RegionUS915Verify>
 800fb8e:	e7f8      	b.n	800fb82 <RegionVerify+0x12>

0800fb90 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800fb90:	b508      	push	{r3, lr}
 800fb92:	4603      	mov	r3, r0
 800fb94:	4608      	mov	r0, r1
    switch( region )
 800fb96:	2b05      	cmp	r3, #5
 800fb98:	d002      	beq.n	800fba0 <RegionApplyCFList+0x10>
 800fb9a:	2b08      	cmp	r3, #8
 800fb9c:	d003      	beq.n	800fba6 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800fb9e:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800fba0:	f001 fada 	bl	8011158 <RegionEU868ApplyCFList>
 800fba4:	e7fb      	b.n	800fb9e <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800fba6:	f001 fdb3 	bl	8011710 <RegionUS915ApplyCFList>
}
 800fbaa:	e7f8      	b.n	800fb9e <RegionApplyCFList+0xe>

0800fbac <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800fbac:	b508      	push	{r3, lr}
 800fbae:	4603      	mov	r3, r0
 800fbb0:	4608      	mov	r0, r1
    switch( region )
 800fbb2:	2b05      	cmp	r3, #5
 800fbb4:	d003      	beq.n	800fbbe <RegionChanMaskSet+0x12>
 800fbb6:	2b08      	cmp	r3, #8
 800fbb8:	d004      	beq.n	800fbc4 <RegionChanMaskSet+0x18>
 800fbba:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800fbbc:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800fbbe:	f000 ff3f 	bl	8010a40 <RegionEU868ChanMaskSet>
 800fbc2:	e7fb      	b.n	800fbbc <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800fbc4:	f001 fde6 	bl	8011794 <RegionUS915ChanMaskSet>
 800fbc8:	e7f8      	b.n	800fbbc <RegionChanMaskSet+0x10>

0800fbca <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fbca:	b508      	push	{r3, lr}
 800fbcc:	4684      	mov	ip, r0
 800fbce:	4608      	mov	r0, r1
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	461a      	mov	r2, r3
    switch( region )
 800fbd4:	f1bc 0f05 	cmp.w	ip, #5
 800fbd8:	d003      	beq.n	800fbe2 <RegionComputeRxWindowParameters+0x18>
 800fbda:	f1bc 0f08 	cmp.w	ip, #8
 800fbde:	d004      	beq.n	800fbea <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800fbe0:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800fbe2:	9b02      	ldr	r3, [sp, #8]
 800fbe4:	f000 ff4a 	bl	8010a7c <RegionEU868ComputeRxWindowParameters>
 800fbe8:	e7fa      	b.n	800fbe0 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800fbea:	9b02      	ldr	r3, [sp, #8]
 800fbec:	f001 fe16 	bl	801181c <RegionUS915ComputeRxWindowParameters>
}
 800fbf0:	e7f6      	b.n	800fbe0 <RegionComputeRxWindowParameters+0x16>

0800fbf2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800fbf2:	b508      	push	{r3, lr}
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4611      	mov	r1, r2
    switch( region )
 800fbfa:	2b05      	cmp	r3, #5
 800fbfc:	d003      	beq.n	800fc06 <RegionRxConfig+0x14>
 800fbfe:	2b08      	cmp	r3, #8
 800fc00:	d004      	beq.n	800fc0c <RegionRxConfig+0x1a>
 800fc02:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800fc04:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800fc06:	f000 ff6f 	bl	8010ae8 <RegionEU868RxConfig>
 800fc0a:	e7fb      	b.n	800fc04 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800fc0c:	f001 fe34 	bl	8011878 <RegionUS915RxConfig>
 800fc10:	e7f8      	b.n	800fc04 <RegionRxConfig+0x12>

0800fc12 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800fc12:	b508      	push	{r3, lr}
 800fc14:	4684      	mov	ip, r0
 800fc16:	4608      	mov	r0, r1
 800fc18:	4611      	mov	r1, r2
 800fc1a:	461a      	mov	r2, r3
    switch( region )
 800fc1c:	f1bc 0f05 	cmp.w	ip, #5
 800fc20:	d004      	beq.n	800fc2c <RegionTxConfig+0x1a>
 800fc22:	f1bc 0f08 	cmp.w	ip, #8
 800fc26:	d004      	beq.n	800fc32 <RegionTxConfig+0x20>
 800fc28:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800fc2a:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800fc2c:	f000 ffe0 	bl	8010bf0 <RegionEU868TxConfig>
 800fc30:	e7fb      	b.n	800fc2a <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800fc32:	f001 fe7b 	bl	801192c <RegionUS915TxConfig>
 800fc36:	e7f8      	b.n	800fc2a <RegionTxConfig+0x18>

0800fc38 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800fc38:	b500      	push	{lr}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	4684      	mov	ip, r0
 800fc3e:	4608      	mov	r0, r1
 800fc40:	4611      	mov	r1, r2
 800fc42:	461a      	mov	r2, r3
    switch( region )
 800fc44:	f1bc 0f05 	cmp.w	ip, #5
 800fc48:	d006      	beq.n	800fc58 <RegionLinkAdrReq+0x20>
 800fc4a:	f1bc 0f08 	cmp.w	ip, #8
 800fc4e:	d009      	beq.n	800fc64 <RegionLinkAdrReq+0x2c>
 800fc50:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fc52:	b003      	add	sp, #12
 800fc54:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800fc58:	9b05      	ldr	r3, [sp, #20]
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	9b04      	ldr	r3, [sp, #16]
 800fc5e:	f001 f85f 	bl	8010d20 <RegionEU868LinkAdrReq>
 800fc62:	e7f6      	b.n	800fc52 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800fc64:	9b05      	ldr	r3, [sp, #20]
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	9b04      	ldr	r3, [sp, #16]
 800fc6a:	f001 fed9 	bl	8011a20 <RegionUS915LinkAdrReq>
 800fc6e:	e7f0      	b.n	800fc52 <RegionLinkAdrReq+0x1a>

0800fc70 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800fc70:	b508      	push	{r3, lr}
 800fc72:	4603      	mov	r3, r0
 800fc74:	4608      	mov	r0, r1
    switch( region )
 800fc76:	2b05      	cmp	r3, #5
 800fc78:	d003      	beq.n	800fc82 <RegionRxParamSetupReq+0x12>
 800fc7a:	2b08      	cmp	r3, #8
 800fc7c:	d004      	beq.n	800fc88 <RegionRxParamSetupReq+0x18>
 800fc7e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fc80:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800fc82:	f001 f913 	bl	8010eac <RegionEU868RxParamSetupReq>
 800fc86:	e7fb      	b.n	800fc80 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800fc88:	f002 f820 	bl	8011ccc <RegionUS915RxParamSetupReq>
 800fc8c:	e7f8      	b.n	800fc80 <RegionRxParamSetupReq+0x10>

0800fc8e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800fc8e:	b508      	push	{r3, lr}
 800fc90:	4603      	mov	r3, r0
 800fc92:	4608      	mov	r0, r1
    switch( region )
 800fc94:	2b05      	cmp	r3, #5
 800fc96:	d003      	beq.n	800fca0 <RegionNewChannelReq+0x12>
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d004      	beq.n	800fca6 <RegionNewChannelReq+0x18>
 800fc9c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fc9e:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800fca0:	f001 fa9b 	bl	80111da <RegionEU868NewChannelReq>
 800fca4:	e7fb      	b.n	800fc9e <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800fca6:	f002 f83c 	bl	8011d22 <RegionUS915NewChannelReq>
 800fcaa:	e7f8      	b.n	800fc9e <RegionNewChannelReq+0x10>

0800fcac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800fcac:	b508      	push	{r3, lr}
 800fcae:	4603      	mov	r3, r0
 800fcb0:	4608      	mov	r0, r1
    switch( region )
 800fcb2:	2b05      	cmp	r3, #5
 800fcb4:	d003      	beq.n	800fcbe <RegionTxParamSetupReq+0x12>
 800fcb6:	2b08      	cmp	r3, #8
 800fcb8:	d004      	beq.n	800fcc4 <RegionTxParamSetupReq+0x18>
 800fcba:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fcbc:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800fcbe:	f001 f919 	bl	8010ef4 <RegionEU868TxParamSetupReq>
 800fcc2:	e7fb      	b.n	800fcbc <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800fcc4:	f002 f830 	bl	8011d28 <RegionUS915TxParamSetupReq>
 800fcc8:	e7f8      	b.n	800fcbc <RegionTxParamSetupReq+0x10>

0800fcca <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800fcca:	b508      	push	{r3, lr}
 800fccc:	4603      	mov	r3, r0
 800fcce:	4608      	mov	r0, r1
    switch( region )
 800fcd0:	2b05      	cmp	r3, #5
 800fcd2:	d003      	beq.n	800fcdc <RegionDlChannelReq+0x12>
 800fcd4:	2b08      	cmp	r3, #8
 800fcd6:	d004      	beq.n	800fce2 <RegionDlChannelReq+0x18>
 800fcd8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fcda:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800fcdc:	f001 f90e 	bl	8010efc <RegionEU868DlChannelReq>
 800fce0:	e7fb      	b.n	800fcda <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800fce2:	f002 f824 	bl	8011d2e <RegionUS915DlChannelReq>
 800fce6:	e7f8      	b.n	800fcda <RegionDlChannelReq+0x10>

0800fce8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800fce8:	b508      	push	{r3, lr}
 800fcea:	4603      	mov	r3, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	4611      	mov	r1, r2
    switch( region )
 800fcf0:	2b05      	cmp	r3, #5
 800fcf2:	d003      	beq.n	800fcfc <RegionAlternateDr+0x14>
 800fcf4:	2b08      	cmp	r3, #8
 800fcf6:	d004      	beq.n	800fd02 <RegionAlternateDr+0x1a>
 800fcf8:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800fcfa:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800fcfc:	f001 f92a 	bl	8010f54 <RegionEU868AlternateDr>
 800fd00:	e7fb      	b.n	800fcfa <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800fd02:	f002 f817 	bl	8011d34 <RegionUS915AlternateDr>
 800fd06:	e7f8      	b.n	800fcfa <RegionAlternateDr+0x12>

0800fd08 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800fd08:	b508      	push	{r3, lr}
 800fd0a:	4684      	mov	ip, r0
 800fd0c:	4608      	mov	r0, r1
 800fd0e:	4611      	mov	r1, r2
 800fd10:	461a      	mov	r2, r3
    switch( region )
 800fd12:	f1bc 0f05 	cmp.w	ip, #5
 800fd16:	d004      	beq.n	800fd22 <RegionNextChannel+0x1a>
 800fd18:	f1bc 0f08 	cmp.w	ip, #8
 800fd1c:	d005      	beq.n	800fd2a <RegionNextChannel+0x22>
 800fd1e:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800fd20:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800fd22:	9b02      	ldr	r3, [sp, #8]
 800fd24:	f001 f918 	bl	8010f58 <RegionEU868NextChannel>
 800fd28:	e7fa      	b.n	800fd20 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800fd2a:	9b02      	ldr	r3, [sp, #8]
 800fd2c:	f002 f828 	bl	8011d80 <RegionUS915NextChannel>
 800fd30:	e7f6      	b.n	800fd20 <RegionNextChannel+0x18>

0800fd32 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800fd32:	b508      	push	{r3, lr}
 800fd34:	4603      	mov	r3, r0
 800fd36:	4608      	mov	r0, r1
    switch( region )
 800fd38:	2b05      	cmp	r3, #5
 800fd3a:	d002      	beq.n	800fd42 <RegionSetContinuousWave+0x10>
 800fd3c:	2b08      	cmp	r3, #8
 800fd3e:	d003      	beq.n	800fd48 <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 800fd40:	bd08      	pop	{r3, pc}
        EU868_SET_CONTINUOUS_WAVE( );
 800fd42:	f001 fa75 	bl	8011230 <RegionEU868SetContinuousWave>
 800fd46:	e7fb      	b.n	800fd40 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 800fd48:	f002 f8ce 	bl	8011ee8 <RegionUS915SetContinuousWave>
}
 800fd4c:	e7f8      	b.n	800fd40 <RegionSetContinuousWave+0xe>

0800fd4e <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800fd4e:	b508      	push	{r3, lr}
 800fd50:	4684      	mov	ip, r0
 800fd52:	4608      	mov	r0, r1
 800fd54:	4611      	mov	r1, r2
 800fd56:	461a      	mov	r2, r3
    switch( region )
 800fd58:	f1bc 0f05 	cmp.w	ip, #5
 800fd5c:	d004      	beq.n	800fd68 <RegionApplyDrOffset+0x1a>
 800fd5e:	f1bc 0f08 	cmp.w	ip, #8
 800fd62:	d004      	beq.n	800fd6e <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800fd64:	b2c8      	uxtb	r0, r1
 800fd66:	e001      	b.n	800fd6c <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800fd68:	f001 fa90 	bl	801128c <RegionEU868ApplyDrOffset>
        }
    }
}
 800fd6c:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800fd6e:	f002 f8ef 	bl	8011f50 <RegionUS915ApplyDrOffset>
 800fd72:	e7fb      	b.n	800fd6c <RegionApplyDrOffset+0x1e>

0800fd74 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800fd74:	4800      	ldr	r0, [pc, #0]	; (800fd78 <RegionGetVersion+0x4>)
 800fd76:	4770      	bx	lr
 800fd78:	01010003 	.word	0x01010003

0800fd7c <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800fd7c:	468c      	mov	ip, r1
 800fd7e:	b1a9      	cbz	r1, 800fdac <FindAvailable125kHzChannels+0x30>
 800fd80:	b1b2      	cbz	r2, 800fdb0 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800fd86:	e001      	b.n	800fd8c <FindAvailable125kHzChannels+0x10>
 800fd88:	3301      	adds	r3, #1
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b07      	cmp	r3, #7
 800fd8e:	d80b      	bhi.n	800fda8 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800fd90:	fa40 f103 	asr.w	r1, r0, r3
 800fd94:	f011 0f01 	tst.w	r1, #1
 800fd98:	d0f6      	beq.n	800fd88 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800fd9a:	7811      	ldrb	r1, [r2, #0]
 800fd9c:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800fda0:	7811      	ldrb	r1, [r2, #0]
 800fda2:	3101      	adds	r1, #1
 800fda4:	7011      	strb	r1, [r2, #0]
 800fda6:	e7ef      	b.n	800fd88 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800fda8:	2000      	movs	r0, #0
 800fdaa:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdac:	2003      	movs	r0, #3
 800fdae:	4770      	bx	lr
 800fdb0:	2003      	movs	r0, #3
}
 800fdb2:	4770      	bx	lr

0800fdb4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800fdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdb6:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800fdb8:	2300      	movs	r3, #0
 800fdba:	9302      	str	r3, [sp, #8]
 800fdbc:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800fdbe:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d03e      	beq.n	800fe44 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800fdc6:	460d      	mov	r5, r1
 800fdc8:	4617      	mov	r7, r2
 800fdca:	4606      	mov	r6, r0
 800fdcc:	2900      	cmp	r1, #0
 800fdce:	d03b      	beq.n	800fe48 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800fdd0:	2a00      	cmp	r2, #0
 800fdd2:	d03b      	beq.n	800fe4c <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800fdd4:	780c      	ldrb	r4, [r1, #0]
 800fdd6:	e017      	b.n	800fe08 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800fdd8:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800fddc:	0a00      	lsrs	r0, r0, #8
 800fdde:	e019      	b.n	800fe14 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800fde0:	3901      	subs	r1, #1
 800fde2:	2000      	movs	r0, #0
 800fde4:	f002 fff2 	bl	8012dcc <randr>
 800fde8:	f100 0310 	add.w	r3, r0, #16
 800fdec:	eb0d 0003 	add.w	r0, sp, r3
 800fdf0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800fdf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fdf8:	703b      	strb	r3, [r7, #0]
 800fdfa:	e016      	b.n	800fe2a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800fdfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe00:	b9cb      	cbnz	r3, 800fe36 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800fe02:	782a      	ldrb	r2, [r5, #0]
 800fe04:	42a2      	cmp	r2, r4
 800fe06:	d016      	beq.n	800fe36 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800fe08:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800fe0a:	f014 0f01 	tst.w	r4, #1
 800fe0e:	d1e3      	bne.n	800fdd8 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800fe10:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800fe14:	f10d 0207 	add.w	r2, sp, #7
 800fe18:	a902      	add	r1, sp, #8
 800fe1a:	f7ff ffaf 	bl	800fd7c <FindAvailable125kHzChannels>
 800fe1e:	2803      	cmp	r0, #3
 800fe20:	d00b      	beq.n	800fe3a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800fe22:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d1da      	bne.n	800fde0 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800fe2e:	2c07      	cmp	r4, #7
 800fe30:	d9e4      	bls.n	800fdfc <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800fe32:	2400      	movs	r4, #0
 800fe34:	e7e2      	b.n	800fdfc <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800fe36:	b913      	cbnz	r3, 800fe3e <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800fe38:	2003      	movs	r0, #3
}
 800fe3a:	b005      	add	sp, #20
 800fe3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800fe3e:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800fe40:	2000      	movs	r0, #0
 800fe42:	e7fa      	b.n	800fe3a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fe44:	2003      	movs	r0, #3
 800fe46:	e7f8      	b.n	800fe3a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800fe48:	2003      	movs	r0, #3
 800fe4a:	e7f6      	b.n	800fe3a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800fe4c:	2003      	movs	r0, #3
 800fe4e:	e7f4      	b.n	800fe3a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800fe50 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800fe50:	fb02 1000 	mla	r0, r2, r0, r1
 800fe54:	4770      	bx	lr

0800fe56 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800fe56:	b082      	sub	sp, #8
 800fe58:	f10d 0c08 	add.w	ip, sp, #8
 800fe5c:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800fe60:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800fe62:	b971      	cbnz	r1, 800fe82 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800fe64:	4613      	mov	r3, r2
 800fe66:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800fe6a:	d306      	bcc.n	800fe7a <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800fe6c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d80a      	bhi.n	800fe8a <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800fe74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe78:	e000      	b.n	800fe7c <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800fe7a:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800fe7c:	4298      	cmp	r0, r3
 800fe7e:	bf38      	it	cc
 800fe80:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800fe82:	b900      	cbnz	r0, 800fe86 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800fe84:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800fe86:	b002      	add	sp, #8
 800fe88:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800fe8a:	f242 7310 	movw	r3, #10000	; 0x2710
 800fe8e:	e7f5      	b.n	800fe7c <GetDutyCycle+0x26>

0800fe90 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800fe90:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800fe92:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800fe94:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800fe96:	e001      	b.n	800fe9c <CountChannels+0xc>
 800fe98:	3301      	adds	r3, #1
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	d207      	bcs.n	800feb0 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800fea0:	2201      	movs	r2, #1
 800fea2:	409a      	lsls	r2, r3
 800fea4:	ea32 020c 	bics.w	r2, r2, ip
 800fea8:	d1f6      	bne.n	800fe98 <CountChannels+0x8>
        {
            nbActiveBits++;
 800feaa:	3001      	adds	r0, #1
 800feac:	b2c0      	uxtb	r0, r0
 800feae:	e7f3      	b.n	800fe98 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800feb0:	4770      	bx	lr
	...

0800feb4 <SetMaxTimeCredits>:
{
 800feb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800feb8:	b089      	sub	sp, #36	; 0x24
 800feba:	4604      	mov	r4, r0
 800febc:	460e      	mov	r6, r1
 800febe:	ad02      	add	r5, sp, #8
 800fec0:	e885 000c 	stmia.w	r5, {r2, r3}
 800fec4:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800fec8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800fecc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fed0:	f005 f828 	bl	8014f24 <SysTimeToMs>
 800fed4:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800fed6:	2300      	movs	r3, #0
 800fed8:	9304      	str	r3, [sp, #16]
 800feda:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800fedc:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fee0:	4631      	mov	r1, r6
 800fee2:	4620      	mov	r0, r4
 800fee4:	f7ff ffb7 	bl	800fe56 <GetDutyCycle>
 800fee8:	4605      	mov	r5, r0
    if( joined == false )
 800feea:	2e00      	cmp	r6, #0
 800feec:	d14c      	bne.n	800ff88 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800feee:	2864      	cmp	r0, #100	; 0x64
 800fef0:	d025      	beq.n	800ff3e <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800fef2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fef6:	d025      	beq.n	800ff44 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800fef8:	4e27      	ldr	r6, [pc, #156]	; (800ff98 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800fefa:	68a1      	ldr	r1, [r4, #8]
 800fefc:	a806      	add	r0, sp, #24
 800fefe:	f005 f831 	bl	8014f64 <SysTimeFromMs>
 800ff02:	9b07      	ldr	r3, [sp, #28]
 800ff04:	9300      	str	r3, [sp, #0]
 800ff06:	9b06      	ldr	r3, [sp, #24]
 800ff08:	aa02      	add	r2, sp, #8
 800ff0a:	ca06      	ldmia	r2, {r1, r2}
 800ff0c:	a804      	add	r0, sp, #16
 800ff0e:	f004 ff90 	bl	8014e32 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ff12:	f1b8 0f00 	cmp.w	r8, #0
 800ff16:	d102      	bne.n	800ff1e <SetMaxTimeCredits+0x6a>
 800ff18:	f1b9 0f00 	cmp.w	r9, #0
 800ff1c:	d002      	beq.n	800ff24 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ff1e:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ff20:	42b3      	cmp	r3, r6
 800ff22:	d012      	beq.n	800ff4a <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800ff24:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800ff26:	9b02      	ldr	r3, [sp, #8]
 800ff28:	4a1c      	ldr	r2, [pc, #112]	; (800ff9c <SetMaxTimeCredits+0xe8>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d812      	bhi.n	800ff54 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800ff2e:	6863      	ldr	r3, [r4, #4]
 800ff30:	b903      	cbnz	r3, 800ff34 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800ff32:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800ff34:	6126      	str	r6, [r4, #16]
}
 800ff36:	4628      	mov	r0, r5
 800ff38:	b009      	add	sp, #36	; 0x24
 800ff3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800ff3e:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ff40:	4e17      	ldr	r6, [pc, #92]	; (800ffa0 <SetMaxTimeCredits+0xec>)
 800ff42:	e7da      	b.n	800fefa <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800ff44:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800ff46:	4e17      	ldr	r6, [pc, #92]	; (800ffa4 <SetMaxTimeCredits+0xf0>)
 800ff48:	e7d7      	b.n	800fefa <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800ff4a:	9a04      	ldr	r2, [sp, #16]
 800ff4c:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <SetMaxTimeCredits+0xf4>)
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d9ed      	bls.n	800ff2e <SetMaxTimeCredits+0x7a>
 800ff52:	e7e7      	b.n	800ff24 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800ff54:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800ff58:	3b30      	subs	r3, #48	; 0x30
 800ff5a:	4a14      	ldr	r2, [pc, #80]	; (800ffac <SetMaxTimeCredits+0xf8>)
 800ff5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ff60:	0c1b      	lsrs	r3, r3, #16
 800ff62:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800ff64:	4a12      	ldr	r2, [pc, #72]	; (800ffb0 <SetMaxTimeCredits+0xfc>)
 800ff66:	fb02 f303 	mul.w	r3, r2, r3
 800ff6a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800ff6c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800ff70:	3330      	adds	r3, #48	; 0x30
 800ff72:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800ff7a:	ab04      	add	r3, sp, #16
 800ff7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff80:	f004 ffd0 	bl	8014f24 <SysTimeToMs>
 800ff84:	60a0      	str	r0, [r4, #8]
 800ff86:	e7d2      	b.n	800ff2e <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800ff88:	f1b8 0f00 	cmp.w	r8, #0
 800ff8c:	d102      	bne.n	800ff94 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800ff8e:	4e04      	ldr	r6, [pc, #16]	; (800ffa0 <SetMaxTimeCredits+0xec>)
 800ff90:	60e6      	str	r6, [r4, #12]
 800ff92:	e7cc      	b.n	800ff2e <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ff94:	4e02      	ldr	r6, [pc, #8]	; (800ffa0 <SetMaxTimeCredits+0xec>)
 800ff96:	e7ca      	b.n	800ff2e <SetMaxTimeCredits+0x7a>
 800ff98:	02932e00 	.word	0x02932e00
 800ff9c:	0001ec2f 	.word	0x0001ec2f
 800ffa0:	001b7740 	.word	0x001b7740
 800ffa4:	0112a880 	.word	0x0112a880
 800ffa8:	0001517f 	.word	0x0001517f
 800ffac:	c22e4507 	.word	0xc22e4507
 800ffb0:	00015180 	.word	0x00015180

0800ffb4 <UpdateTimeCredits>:
{
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	4604      	mov	r4, r0
 800ffba:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	9200      	str	r2, [sp, #0]
 800ffc0:	ab06      	add	r3, sp, #24
 800ffc2:	cb0c      	ldmia	r3, {r2, r3}
 800ffc4:	f7ff ff76 	bl	800feb4 <SetMaxTimeCredits>
 800ffc8:	4605      	mov	r5, r0
    if( joined == true )
 800ffca:	b94e      	cbnz	r6, 800ffe0 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800ffcc:	68e2      	ldr	r2, [r4, #12]
 800ffce:	6923      	ldr	r3, [r4, #16]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d900      	bls.n	800ffd6 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800ffd4:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800ffd6:	9b08      	ldr	r3, [sp, #32]
 800ffd8:	6063      	str	r3, [r4, #4]
}
 800ffda:	4628      	mov	r0, r5
 800ffdc:	b002      	add	sp, #8
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800ffe0:	6860      	ldr	r0, [r4, #4]
 800ffe2:	f005 f81f 	bl	8015024 <UTIL_TIMER_GetElapsedTime>
 800ffe6:	68e3      	ldr	r3, [r4, #12]
 800ffe8:	4403      	add	r3, r0
 800ffea:	60e3      	str	r3, [r4, #12]
 800ffec:	e7ee      	b.n	800ffcc <UpdateTimeCredits+0x18>

0800ffee <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800ffee:	4288      	cmp	r0, r1
 800fff0:	db03      	blt.n	800fffa <RegionCommonValueInRange+0xc>
 800fff2:	4290      	cmp	r0, r2
 800fff4:	dd03      	ble.n	800fffe <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800fff6:	2000      	movs	r0, #0
 800fff8:	4770      	bx	lr
 800fffa:	2000      	movs	r0, #0
 800fffc:	4770      	bx	lr
        return 1;
 800fffe:	2001      	movs	r0, #1
}
 8010000:	4770      	bx	lr

08010002 <RegionCommonChanVerifyDr>:
{
 8010002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010006:	4682      	mov	sl, r0
 8010008:	460e      	mov	r6, r1
 801000a:	4690      	mov	r8, r2
 801000c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8010010:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8010014:	4619      	mov	r1, r3
 8010016:	4640      	mov	r0, r8
 8010018:	f7ff ffe9 	bl	800ffee <RegionCommonValueInRange>
 801001c:	b338      	cbz	r0, 801006e <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801001e:	2500      	movs	r5, #0
 8010020:	462f      	mov	r7, r5
 8010022:	e01e      	b.n	8010062 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8010024:	3401      	adds	r4, #1
 8010026:	b2e4      	uxtb	r4, r4
 8010028:	2c0f      	cmp	r4, #15
 801002a:	d816      	bhi.n	801005a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801002c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8010030:	4123      	asrs	r3, r4
 8010032:	f013 0f01 	tst.w	r3, #1
 8010036:	d0f5      	beq.n	8010024 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8010038:	193b      	adds	r3, r7, r4
 801003a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801003e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010042:	7a19      	ldrb	r1, [r3, #8]
 8010044:	090a      	lsrs	r2, r1, #4
 8010046:	f001 010f 	and.w	r1, r1, #15
 801004a:	4640      	mov	r0, r8
 801004c:	f7ff ffcf 	bl	800ffee <RegionCommonValueInRange>
 8010050:	2801      	cmp	r0, #1
 8010052:	d1e7      	bne.n	8010024 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8010054:	2001      	movs	r0, #1
}
 8010056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801005a:	3710      	adds	r7, #16
 801005c:	b2ff      	uxtb	r7, r7
 801005e:	3501      	adds	r5, #1
 8010060:	b2ed      	uxtb	r5, r5
 8010062:	4557      	cmp	r7, sl
 8010064:	d201      	bcs.n	801006a <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8010066:	2400      	movs	r4, #0
 8010068:	e7de      	b.n	8010028 <RegionCommonChanVerifyDr+0x26>
    return false;
 801006a:	2000      	movs	r0, #0
 801006c:	e7f3      	b.n	8010056 <RegionCommonChanVerifyDr+0x54>
        return false;
 801006e:	2000      	movs	r0, #0
 8010070:	e7f1      	b.n	8010056 <RegionCommonChanVerifyDr+0x54>

08010072 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010072:	0913      	lsrs	r3, r2, #4
 8010074:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8010078:	d313      	bcc.n	80100a2 <RegionCommonChanDisable+0x30>
{
 801007a:	b500      	push	{lr}
 801007c:	4684      	mov	ip, r0
 801007e:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010082:	4291      	cmp	r1, r2
 8010084:	d20f      	bcs.n	80100a6 <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8010086:	f001 030f 	and.w	r3, r1, #15
 801008a:	2001      	movs	r0, #1
 801008c:	fa00 f303 	lsl.w	r3, r0, r3
 8010090:	43db      	mvns	r3, r3
 8010092:	b21b      	sxth	r3, r3
 8010094:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 8010098:	4013      	ands	r3, r2
 801009a:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 801009e:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 80100a2:	2000      	movs	r0, #0
}
 80100a4:	4770      	bx	lr
        return false;
 80100a6:	2000      	movs	r0, #0
 80100a8:	e7f9      	b.n	801009e <RegionCommonChanDisable+0x2c>

080100aa <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80100aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 80100ac:	b188      	cbz	r0, 80100d2 <RegionCommonCountChannels+0x28>
 80100ae:	460c      	mov	r4, r1
 80100b0:	4616      	mov	r6, r2
 80100b2:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 80100b4:	2500      	movs	r5, #0
 80100b6:	e008      	b.n	80100ca <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80100b8:	2110      	movs	r1, #16
 80100ba:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 80100be:	f7ff fee7 	bl	800fe90 <CountChannels>
 80100c2:	4405      	add	r5, r0
 80100c4:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80100c6:	3401      	adds	r4, #1
 80100c8:	b2e4      	uxtb	r4, r4
 80100ca:	42b4      	cmp	r4, r6
 80100cc:	d3f4      	bcc.n	80100b8 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 80100ce:	4628      	mov	r0, r5
 80100d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80100d2:	2500      	movs	r5, #0
 80100d4:	e7fb      	b.n	80100ce <RegionCommonCountChannels+0x24>

080100d6 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80100d6:	4684      	mov	ip, r0
 80100d8:	b158      	cbz	r0, 80100f2 <RegionCommonChanMaskCopy+0x1c>
 80100da:	b109      	cbz	r1, 80100e0 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 80100dc:	2300      	movs	r3, #0
 80100de:	e006      	b.n	80100ee <RegionCommonChanMaskCopy+0x18>
 80100e0:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80100e2:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80100e6:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 80100ea:	3301      	adds	r3, #1
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d3f7      	bcc.n	80100e2 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 80100f2:	4770      	bx	lr

080100f4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80100f4:	b082      	sub	sp, #8
 80100f6:	b538      	push	{r3, r4, r5, lr}
 80100f8:	4604      	mov	r4, r0
 80100fa:	460d      	mov	r5, r1
 80100fc:	4611      	mov	r1, r2
 80100fe:	aa04      	add	r2, sp, #16
 8010100:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010104:	ca0c      	ldmia	r2, {r2, r3}
 8010106:	f7ff fea6 	bl	800fe56 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	fb05 f100 	mul.w	r1, r5, r0
 8010110:	428b      	cmp	r3, r1
 8010112:	d905      	bls.n	8010120 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8010114:	1a5b      	subs	r3, r3, r1
 8010116:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8010118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801011c:	b002      	add	sp, #8
 801011e:	4770      	bx	lr
        band->TimeCredits = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	60e3      	str	r3, [r4, #12]
}
 8010124:	e7f8      	b.n	8010118 <RegionCommonSetBandTxDone+0x24>
	...

08010128 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8010128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	b089      	sub	sp, #36	; 0x24
 801012e:	4607      	mov	r7, r0
 8010130:	468b      	mov	fp, r1
 8010132:	4691      	mov	r9, r2
 8010134:	4698      	mov	r8, r3
 8010136:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801013a:	f004 ff69 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 801013e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8010140:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8010142:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8010144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010148:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 801014a:	e005      	b.n	8010158 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 801014c:	2301      	movs	r3, #1
 801014e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8010150:	441e      	add	r6, r3
 8010152:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8010154:	3401      	adds	r4, #1
 8010156:	b2e4      	uxtb	r4, r4
 8010158:	454c      	cmp	r4, r9
 801015a:	d25d      	bcs.n	8010218 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801015c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010160:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8010164:	9b04      	ldr	r3, [sp, #16]
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	ab13      	add	r3, sp, #76	; 0x4c
 801016a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801016e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010172:	4653      	mov	r3, sl
 8010174:	4642      	mov	r2, r8
 8010176:	4639      	mov	r1, r7
 8010178:	4628      	mov	r0, r5
 801017a:	f7ff ff1b 	bl	800ffb4 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 801017e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010180:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8010184:	68ea      	ldr	r2, [r5, #12]
 8010186:	429a      	cmp	r2, r3
 8010188:	d2e0      	bcs.n	801014c <RegionCommonUpdateBandTimeOff+0x24>
 801018a:	f1b8 0f00 	cmp.w	r8, #0
 801018e:	d101      	bne.n	8010194 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8010190:	2f00      	cmp	r7, #0
 8010192:	d1db      	bne.n	801014c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8010194:	2100      	movs	r1, #0
 8010196:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8010198:	6929      	ldr	r1, [r5, #16]
 801019a:	4299      	cmp	r1, r3
 801019c:	d307      	bcc.n	80101ae <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	9a05      	ldr	r2, [sp, #20]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	bf28      	it	cs
 80101a6:	461a      	movcs	r2, r3
 80101a8:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80101aa:	3601      	adds	r6, #1
 80101ac:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80101ae:	2f00      	cmp	r7, #0
 80101b0:	d1d0      	bne.n	8010154 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 80101b2:	2300      	movs	r3, #0
 80101b4:	9306      	str	r3, [sp, #24]
 80101b6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80101ba:	2864      	cmp	r0, #100	; 0x64
 80101bc:	d024      	beq.n	8010208 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80101be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80101c2:	d025      	beq.n	8010210 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80101c4:	4b19      	ldr	r3, [pc, #100]	; (801022c <RegionCommonUpdateBandTimeOff+0x104>)
 80101c6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80101c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101ca:	4a18      	ldr	r2, [pc, #96]	; (801022c <RegionCommonUpdateBandTimeOff+0x104>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d90c      	bls.n	80101ea <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80101d0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80101d4:	3b30      	subs	r3, #48	; 0x30
 80101d6:	4a16      	ldr	r2, [pc, #88]	; (8010230 <RegionCommonUpdateBandTimeOff+0x108>)
 80101d8:	fba2 2303 	umull	r2, r3, r2, r3
 80101dc:	0c1b      	lsrs	r3, r3, #16
 80101de:	4a15      	ldr	r2, [pc, #84]	; (8010234 <RegionCommonUpdateBandTimeOff+0x10c>)
 80101e0:	fb03 2202 	mla	r2, r3, r2, r2
 80101e4:	9b06      	ldr	r3, [sp, #24]
 80101e6:	4413      	add	r3, r2
 80101e8:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80101ea:	ad06      	add	r5, sp, #24
 80101ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101f2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80101f6:	4628      	mov	r0, r5
 80101f8:	f004 fe1b 	bl	8014e32 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80101fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010200:	f004 fe90 	bl	8014f24 <SysTimeToMs>
 8010204:	9005      	str	r0, [sp, #20]
 8010206:	e7a5      	b.n	8010154 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8010208:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801020c:	9306      	str	r3, [sp, #24]
 801020e:	e7db      	b.n	80101c8 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8010210:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8010214:	9306      	str	r3, [sp, #24]
 8010216:	e7d7      	b.n	80101c8 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8010218:	b11e      	cbz	r6, 8010222 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 801021a:	9805      	ldr	r0, [sp, #20]
 801021c:	b009      	add	sp, #36	; 0x24
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8010222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010226:	9305      	str	r3, [sp, #20]
 8010228:	e7f7      	b.n	801021a <RegionCommonUpdateBandTimeOff+0xf2>
 801022a:	bf00      	nop
 801022c:	0001ec30 	.word	0x0001ec30
 8010230:	c22e4507 	.word	0xc22e4507
 8010234:	00015180 	.word	0x00015180

08010238 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8010238:	7803      	ldrb	r3, [r0, #0]
 801023a:	2b03      	cmp	r3, #3
 801023c:	d001      	beq.n	8010242 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 801023e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8010240:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8010242:	7842      	ldrb	r2, [r0, #1]
 8010244:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010248:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801024a:	f003 030f 	and.w	r3, r3, #15
 801024e:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8010250:	0913      	lsrs	r3, r2, #4
 8010252:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8010254:	7883      	ldrb	r3, [r0, #2]
 8010256:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8010258:	78c2      	ldrb	r2, [r0, #3]
 801025a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801025e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8010260:	7903      	ldrb	r3, [r0, #4]
 8010262:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8010264:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8010268:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 801026a:	f003 030f 	and.w	r3, r3, #15
 801026e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8010270:	2005      	movs	r0, #5
 8010272:	4770      	bx	lr

08010274 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8010274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	b085      	sub	sp, #20
 801027a:	4604      	mov	r4, r0
 801027c:	4688      	mov	r8, r1
 801027e:	4617      	mov	r7, r2
 8010280:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8010282:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8010284:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8010288:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 801028c:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010290:	7943      	ldrb	r3, [r0, #5]
 8010292:	b92b      	cbnz	r3, 80102a0 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8010294:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8010298:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 801029c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 80102a0:	b355      	cbz	r5, 80102f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80102a2:	f1ba 0f0f 	cmp.w	sl, #15
 80102a6:	d114      	bne.n	80102d2 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80102a8:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 80102ac:	f1b9 0f0f 	cmp.w	r9, #15
 80102b0:	d020      	beq.n	80102f4 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80102b2:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80102b6:	9303      	str	r3, [sp, #12]
 80102b8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80102bc:	461c      	mov	r4, r3
 80102be:	4619      	mov	r1, r3
 80102c0:	4648      	mov	r0, r9
 80102c2:	f7ff fe94 	bl	800ffee <RegionCommonValueInRange>
 80102c6:	b9b8      	cbnz	r0, 80102f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80102c8:	454c      	cmp	r4, r9
 80102ca:	dc21      	bgt.n	8010310 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80102cc:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 80102d0:	e012      	b.n	80102f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80102d2:	69a3      	ldr	r3, [r4, #24]
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	f994 3015 	ldrsb.w	r3, [r4, #21]
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80102e0:	4652      	mov	r2, sl
 80102e2:	6921      	ldr	r1, [r4, #16]
 80102e4:	7b20      	ldrb	r0, [r4, #12]
 80102e6:	f7ff fe8c 	bl	8010002 <RegionCommonChanVerifyDr>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d1de      	bne.n	80102ac <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 80102ee:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 80102f2:	e7db      	b.n	80102ac <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 80102f4:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80102f8:	2d07      	cmp	r5, #7
 80102fa:	d00c      	beq.n	8010316 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 80102fc:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8010300:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8010304:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8010308:	4628      	mov	r0, r5
 801030a:	b005      	add	sp, #20
 801030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8010310:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010314:	e7f0      	b.n	80102f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8010316:	f1bb 0f00 	cmp.w	fp, #0
 801031a:	d1ef      	bne.n	80102fc <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 801031c:	f04f 0b01 	mov.w	fp, #1
 8010320:	e7ec      	b.n	80102fc <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08010324 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8010324:	4b02      	ldr	r3, [pc, #8]	; (8010330 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8010326:	fa03 f000 	lsl.w	r0, r3, r0
}
 801032a:	fbb0 f0f1 	udiv	r0, r0, r1
 801032e:	4770      	bx	lr
 8010330:	000f4240 	.word	0x000f4240

08010334 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8010334:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010338:	fbb3 f0f0 	udiv	r0, r3, r0
 801033c:	4770      	bx	lr
	...

08010340 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8010340:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010342:	f1a1 0c04 	sub.w	ip, r1, #4
 8010346:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 801034a:	fb0e f202 	mul.w	r2, lr, r2
 801034e:	fb00 220c 	mla	r2, r0, ip, r2
 8010352:	0052      	lsls	r2, r2, #1
 8010354:	d021      	beq.n	801039a <RegionCommonComputeRxWindowParameters+0x5a>
 8010356:	4402      	add	r2, r0
 8010358:	3a01      	subs	r2, #1
 801035a:	fbb2 f2f0 	udiv	r2, r2, r0
 801035e:	4291      	cmp	r1, r2
 8010360:	bf38      	it	cc
 8010362:	4611      	movcc	r1, r2
 8010364:	9a01      	ldr	r2, [sp, #4]
 8010366:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010368:	0082      	lsls	r2, r0, #2
 801036a:	fb01 f000 	mul.w	r0, r1, r0
 801036e:	b1b8      	cbz	r0, 80103a0 <RegionCommonComputeRxWindowParameters+0x60>
 8010370:	3001      	adds	r0, #1
 8010372:	0840      	lsrs	r0, r0, #1
 8010374:	1a12      	subs	r2, r2, r0
 8010376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801037a:	fb01 2313 	mls	r3, r1, r3, r2
 801037e:	2b00      	cmp	r3, #0
 8010380:	dd10      	ble.n	80103a4 <RegionCommonComputeRxWindowParameters+0x64>
 8010382:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8010386:	4a0b      	ldr	r2, [pc, #44]	; (80103b4 <RegionCommonComputeRxWindowParameters+0x74>)
 8010388:	fb82 1203 	smull	r1, r2, r2, r3
 801038c:	17db      	asrs	r3, r3, #31
 801038e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010392:	9a02      	ldr	r2, [sp, #8]
 8010394:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8010396:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801039a:	fbb2 f2f0 	udiv	r2, r2, r0
 801039e:	e7de      	b.n	801035e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80103a0:	0840      	lsrs	r0, r0, #1
 80103a2:	e7e7      	b.n	8010374 <RegionCommonComputeRxWindowParameters+0x34>
 80103a4:	4a03      	ldr	r2, [pc, #12]	; (80103b4 <RegionCommonComputeRxWindowParameters+0x74>)
 80103a6:	fb82 1203 	smull	r1, r2, r2, r3
 80103aa:	17db      	asrs	r3, r3, #31
 80103ac:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80103b0:	e7ef      	b.n	8010392 <RegionCommonComputeRxWindowParameters+0x52>
 80103b2:	bf00      	nop
 80103b4:	10624dd3 	.word	0x10624dd3

080103b8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	460d      	mov	r5, r1
 80103bc:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80103be:	0040      	lsls	r0, r0, #1
 80103c0:	f7f0 fa08 	bl	80007d4 <__aeabi_ui2f>
 80103c4:	4601      	mov	r1, r0
 80103c6:	4628      	mov	r0, r5
 80103c8:	f7f0 f952 	bl	8000670 <__aeabi_fsub>
 80103cc:	4621      	mov	r1, r4
 80103ce:	f7f0 f94f 	bl	8000670 <__aeabi_fsub>
 80103d2:	f7f0 f841 	bl	8000458 <__aeabi_f2d>
 80103d6:	f005 f8f7 	bl	80155c8 <floor>
 80103da:	f7f0 f91d 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 80103de:	b240      	sxtb	r0, r0
 80103e0:	bd38      	pop	{r3, r4, r5, pc}

080103e2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80103e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e6:	b083      	sub	sp, #12
 80103e8:	4605      	mov	r5, r0
 80103ea:	468b      	mov	fp, r1
 80103ec:	9200      	str	r2, [sp, #0]
 80103ee:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80103f0:	2600      	movs	r6, #0
 80103f2:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 80103f4:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 80103f6:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80103f8:	e049      	b.n	801048e <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80103fa:	7a3a      	ldrb	r2, [r7, #8]
 80103fc:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8010400:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8010404:	b252      	sxtb	r2, r2
 8010406:	b249      	sxtb	r1, r1
 8010408:	f995 0001 	ldrsb.w	r0, [r5, #1]
 801040c:	f7ff fdef 	bl	800ffee <RegionCommonValueInRange>
 8010410:	b178      	cbz	r0, 8010432 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8010412:	68ea      	ldr	r2, [r5, #12]
 8010414:	7a7b      	ldrb	r3, [r7, #9]
 8010416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801041a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801041e:	7d13      	ldrb	r3, [r2, #20]
 8010420:	b353      	cbz	r3, 8010478 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8010422:	f109 0301 	add.w	r3, r9, #1
 8010426:	eb08 0204 	add.w	r2, r8, r4
 801042a:	f80b 2009 	strb.w	r2, [fp, r9]
 801042e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8010432:	3401      	adds	r4, #1
 8010434:	b2e4      	uxtb	r4, r4
 8010436:	2c0f      	cmp	r4, #15
 8010438:	d823      	bhi.n	8010482 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801043a:	686b      	ldr	r3, [r5, #4]
 801043c:	0072      	lsls	r2, r6, #1
 801043e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8010442:	4123      	asrs	r3, r4
 8010444:	f013 0f01 	tst.w	r3, #1
 8010448:	d0f3      	beq.n	8010432 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801044a:	68a8      	ldr	r0, [r5, #8]
 801044c:	eb08 0304 	add.w	r3, r8, r4
 8010450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010454:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8010458:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d0e8      	beq.n	8010432 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010460:	782b      	ldrb	r3, [r5, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1c9      	bne.n	80103fa <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8010466:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010468:	2b00      	cmp	r3, #0
 801046a:	d0c6      	beq.n	80103fa <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801046c:	5a9b      	ldrh	r3, [r3, r2]
 801046e:	4123      	asrs	r3, r4
 8010470:	f013 0f01 	tst.w	r3, #1
 8010474:	d1c1      	bne.n	80103fa <RegionCommonCountNbOfEnabledChannels+0x18>
 8010476:	e7dc      	b.n	8010432 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8010478:	f10a 0a01 	add.w	sl, sl, #1
 801047c:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8010480:	e7d7      	b.n	8010432 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010482:	f108 0810 	add.w	r8, r8, #16
 8010486:	fa5f f888 	uxtb.w	r8, r8
 801048a:	3601      	adds	r6, #1
 801048c:	b2f6      	uxtb	r6, r6
 801048e:	8a2b      	ldrh	r3, [r5, #16]
 8010490:	fa1f f288 	uxth.w	r2, r8
 8010494:	429a      	cmp	r2, r3
 8010496:	d201      	bcs.n	801049c <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 8010498:	2400      	movs	r4, #0
 801049a:	e7cc      	b.n	8010436 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801049c:	9b00      	ldr	r3, [sp, #0]
 801049e:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80104a2:	9b01      	ldr	r3, [sp, #4]
 80104a4:	f883 a000 	strb.w	sl, [r3]
}
 80104a8:	b003      	add	sp, #12
 80104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104ae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80104ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104b2:	b085      	sub	sp, #20
 80104b4:	4604      	mov	r4, r0
 80104b6:	460f      	mov	r7, r1
 80104b8:	4616      	mov	r6, r2
 80104ba:	461d      	mov	r5, r3
 80104bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80104c0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80104c4:	6840      	ldr	r0, [r0, #4]
 80104c6:	f004 fdad 	bl	8015024 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	1a1b      	subs	r3, r3, r0
 80104ce:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 80104d2:	2301      	movs	r3, #1
 80104d4:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 80104d8:	2300      	movs	r3, #0
 80104da:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80104dc:	6863      	ldr	r3, [r4, #4]
 80104de:	b113      	cbz	r3, 80104e6 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80104e0:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80104e2:	4283      	cmp	r3, r0
 80104e4:	d81e      	bhi.n	8010524 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80104e6:	2300      	movs	r3, #0
 80104e8:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80104ea:	69e3      	ldr	r3, [r4, #28]
 80104ec:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80104f0:	781f      	ldrb	r7, [r3, #0]
 80104f2:	69a3      	ldr	r3, [r4, #24]
 80104f4:	9303      	str	r3, [sp, #12]
 80104f6:	ab01      	add	r3, sp, #4
 80104f8:	f104 020c 	add.w	r2, r4, #12
 80104fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010500:	e883 0003 	stmia.w	r3, {r0, r1}
 8010504:	7d23      	ldrb	r3, [r4, #20]
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	7a23      	ldrb	r3, [r4, #8]
 801050a:	7a62      	ldrb	r2, [r4, #9]
 801050c:	4661      	mov	r1, ip
 801050e:	4638      	mov	r0, r7
 8010510:	f7ff fe0a 	bl	8010128 <RegionCommonUpdateBandTimeOff>
 8010514:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8010518:	4643      	mov	r3, r8
 801051a:	462a      	mov	r2, r5
 801051c:	4631      	mov	r1, r6
 801051e:	69e0      	ldr	r0, [r4, #28]
 8010520:	f7ff ff5f 	bl	80103e2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8010524:	782b      	ldrb	r3, [r5, #0]
 8010526:	b923      	cbnz	r3, 8010532 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8010528:	f898 3000 	ldrb.w	r3, [r8]
 801052c:	b13b      	cbz	r3, 801053e <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801052e:	200b      	movs	r0, #11
 8010530:	e002      	b.n	8010538 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 8010532:	2000      	movs	r0, #0
 8010534:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8010538:	b005      	add	sp, #20
 801053a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801053e:	200c      	movs	r0, #12
 8010540:	e7fa      	b.n	8010538 <RegionCommonIdentifyChannels+0x8a>

08010542 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8010542:	b570      	push	{r4, r5, r6, lr}
 8010544:	b082      	sub	sp, #8
 8010546:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8010548:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 801054c:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8010550:	42a6      	cmp	r6, r4
 8010552:	d011      	beq.n	8010578 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8010554:	3c01      	subs	r4, #1
 8010556:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 8010558:	42a6      	cmp	r6, r4
 801055a:	d00e      	beq.n	801057a <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801055c:	68ab      	ldr	r3, [r5, #8]
 801055e:	9301      	str	r3, [sp, #4]
 8010560:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	4633      	mov	r3, r6
 8010568:	4622      	mov	r2, r4
 801056a:	6869      	ldr	r1, [r5, #4]
 801056c:	78e8      	ldrb	r0, [r5, #3]
 801056e:	f7ff fd48 	bl	8010002 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8010572:	2800      	cmp	r0, #0
 8010574:	d0ee      	beq.n	8010554 <RegionCommonGetNextLowerTxDr+0x12>
 8010576:	e000      	b.n	801057a <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8010578:	4634      	mov	r4, r6

        return drLocal;
    }
}
 801057a:	4620      	mov	r0, r4
 801057c:	b002      	add	sp, #8
 801057e:	bd70      	pop	{r4, r5, r6, pc}

08010580 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8010580:	4288      	cmp	r0, r1
 8010582:	bfb8      	it	lt
 8010584:	4608      	movlt	r0, r1
 8010586:	4770      	bx	lr

08010588 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8010588:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 801058c:	4a05      	ldr	r2, [pc, #20]	; (80105a4 <RegionCommonGetBandwidth+0x1c>)
 801058e:	4293      	cmp	r3, r2
 8010590:	d004      	beq.n	801059c <RegionCommonGetBandwidth+0x14>
 8010592:	4a05      	ldr	r2, [pc, #20]	; (80105a8 <RegionCommonGetBandwidth+0x20>)
 8010594:	4293      	cmp	r3, r2
 8010596:	d103      	bne.n	80105a0 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8010598:	2002      	movs	r0, #2
 801059a:	4770      	bx	lr
            return 1;
 801059c:	2001      	movs	r0, #1
 801059e:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 80105a0:	2000      	movs	r0, #0
    }
}
 80105a2:	4770      	bx	lr
 80105a4:	0003d090 	.word	0x0003d090
 80105a8:	0007a120 	.word	0x0007a120

080105ac <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80105ac:	b500      	push	{lr}
 80105ae:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 80105b0:	2805      	cmp	r0, #5
 80105b2:	d80e      	bhi.n	80105d2 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80105b4:	9202      	str	r2, [sp, #8]
 80105b6:	9101      	str	r1, [sp, #4]
 80105b8:	4b0a      	ldr	r3, [pc, #40]	; (80105e4 <RegionCommonRxConfigPrint+0x38>)
 80105ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	4b09      	ldr	r3, [pc, #36]	; (80105e8 <RegionCommonRxConfigPrint+0x3c>)
 80105c2:	2201      	movs	r2, #1
 80105c4:	2100      	movs	r1, #0
 80105c6:	2002      	movs	r0, #2
 80105c8:	f004 faea 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80105cc:	b005      	add	sp, #20
 80105ce:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80105d2:	9201      	str	r2, [sp, #4]
 80105d4:	9100      	str	r1, [sp, #0]
 80105d6:	4b05      	ldr	r3, [pc, #20]	; (80105ec <RegionCommonRxConfigPrint+0x40>)
 80105d8:	2201      	movs	r2, #1
 80105da:	2100      	movs	r1, #0
 80105dc:	2002      	movs	r0, #2
 80105de:	f004 fadf 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 80105e2:	e7f3      	b.n	80105cc <RegionCommonRxConfigPrint+0x20>
 80105e4:	08016030 	.word	0x08016030
 80105e8:	08015fc8 	.word	0x08015fc8
 80105ec:	08015fe8 	.word	0x08015fe8

080105f0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80105f0:	b500      	push	{lr}
 80105f2:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80105f4:	9101      	str	r1, [sp, #4]
 80105f6:	9000      	str	r0, [sp, #0]
 80105f8:	4b04      	ldr	r3, [pc, #16]	; (801060c <RegionCommonTxConfigPrint+0x1c>)
 80105fa:	2201      	movs	r2, #1
 80105fc:	2100      	movs	r1, #0
 80105fe:	2002      	movs	r0, #2
 8010600:	f004 face 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010604:	b003      	add	sp, #12
 8010606:	f85d fb04 	ldr.w	pc, [sp], #4
 801060a:	bf00      	nop
 801060c:	08016004 	.word	0x08016004

08010610 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010616:	4b1b      	ldr	r3, [pc, #108]	; (8010684 <VerifyRfFreq+0x74>)
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	4798      	blx	r3
 801061c:	b130      	cbz	r0, 801062c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801061e:	4b1a      	ldr	r3, [pc, #104]	; (8010688 <VerifyRfFreq+0x78>)
 8010620:	4423      	add	r3, r4
 8010622:	4a1a      	ldr	r2, [pc, #104]	; (801068c <VerifyRfFreq+0x7c>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d802      	bhi.n	801062e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 8010628:	2302      	movs	r3, #2
 801062a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 801062c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801062e:	4b18      	ldr	r3, [pc, #96]	; (8010690 <VerifyRfFreq+0x80>)
 8010630:	4423      	add	r3, r4
 8010632:	4a18      	ldr	r2, [pc, #96]	; (8010694 <VerifyRfFreq+0x84>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d802      	bhi.n	801063e <VerifyRfFreq+0x2e>
        *band = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	702b      	strb	r3, [r5, #0]
 801063c:	e7f6      	b.n	801062c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801063e:	4b16      	ldr	r3, [pc, #88]	; (8010698 <VerifyRfFreq+0x88>)
 8010640:	4423      	add	r3, r4
 8010642:	4a16      	ldr	r2, [pc, #88]	; (801069c <VerifyRfFreq+0x8c>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d802      	bhi.n	801064e <VerifyRfFreq+0x3e>
        *band = 1;
 8010648:	2301      	movs	r3, #1
 801064a:	702b      	strb	r3, [r5, #0]
 801064c:	e7ee      	b.n	801062c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801064e:	4b14      	ldr	r3, [pc, #80]	; (80106a0 <VerifyRfFreq+0x90>)
 8010650:	4423      	add	r3, r4
 8010652:	4a14      	ldr	r2, [pc, #80]	; (80106a4 <VerifyRfFreq+0x94>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d802      	bhi.n	801065e <VerifyRfFreq+0x4e>
        *band = 5;
 8010658:	2305      	movs	r3, #5
 801065a:	702b      	strb	r3, [r5, #0]
 801065c:	e7e6      	b.n	801062c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801065e:	4b12      	ldr	r3, [pc, #72]	; (80106a8 <VerifyRfFreq+0x98>)
 8010660:	4423      	add	r3, r4
 8010662:	4a12      	ldr	r2, [pc, #72]	; (80106ac <VerifyRfFreq+0x9c>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d802      	bhi.n	801066e <VerifyRfFreq+0x5e>
        *band = 3;
 8010668:	2303      	movs	r3, #3
 801066a:	702b      	strb	r3, [r5, #0]
 801066c:	e7de      	b.n	801062c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801066e:	4b10      	ldr	r3, [pc, #64]	; (80106b0 <VerifyRfFreq+0xa0>)
 8010670:	4423      	add	r3, r4
 8010672:	4a10      	ldr	r2, [pc, #64]	; (80106b4 <VerifyRfFreq+0xa4>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d802      	bhi.n	801067e <VerifyRfFreq+0x6e>
        *band = 4;
 8010678:	2304      	movs	r3, #4
 801067a:	702b      	strb	r3, [r5, #0]
 801067c:	e7d6      	b.n	801062c <VerifyRfFreq+0x1c>
        return false;
 801067e:	2000      	movs	r0, #0
 8010680:	e7d4      	b.n	801062c <VerifyRfFreq+0x1c>
 8010682:	bf00      	nop
 8010684:	08016690 	.word	0x08016690
 8010688:	cc8faa40 	.word	0xcc8faa40
 801068c:	001e847f 	.word	0x001e847f
 8010690:	cc7125c0 	.word	0xcc7125c0
 8010694:	002dc6c0 	.word	0x002dc6c0
 8010698:	cc435eff 	.word	0xcc435eff
 801069c:	000927bf 	.word	0x000927bf
 80106a0:	cc38b0a0 	.word	0xcc38b0a0
 80106a4:	0007a120 	.word	0x0007a120
 80106a8:	cc2e0240 	.word	0xcc2e0240
 80106ac:	0003d090 	.word	0x0003d090
 80106b0:	cc296e60 	.word	0xcc296e60
 80106b4:	000493e0 	.word	0x000493e0

080106b8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	4605      	mov	r5, r0
 80106be:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 80106c0:	4b13      	ldr	r3, [pc, #76]	; (8010710 <GetTimeOnAir+0x58>)
 80106c2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80106c4:	4913      	ldr	r1, [pc, #76]	; (8010714 <GetTimeOnAir+0x5c>)
 80106c6:	f7ff ff5f 	bl	8010588 <RegionCommonGetBandwidth>
 80106ca:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 80106cc:	2d07      	cmp	r5, #7
 80106ce:	d00e      	beq.n	80106ee <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80106d0:	4b11      	ldr	r3, [pc, #68]	; (8010718 <GetTimeOnAir+0x60>)
 80106d2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80106d4:	2001      	movs	r0, #1
 80106d6:	9003      	str	r0, [sp, #12]
 80106d8:	b2e4      	uxtb	r4, r4
 80106da:	9402      	str	r4, [sp, #8]
 80106dc:	2300      	movs	r3, #0
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	2308      	movs	r3, #8
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	4603      	mov	r3, r0
 80106e6:	4632      	mov	r2, r6
 80106e8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 80106ea:	b004      	add	sp, #16
 80106ec:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80106ee:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <GetTimeOnAir+0x60>)
 80106f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80106f2:	2301      	movs	r3, #1
 80106f4:	9303      	str	r3, [sp, #12]
 80106f6:	b2e4      	uxtb	r4, r4
 80106f8:	9402      	str	r4, [sp, #8]
 80106fa:	2000      	movs	r0, #0
 80106fc:	9001      	str	r0, [sp, #4]
 80106fe:	2305      	movs	r3, #5
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	4603      	mov	r3, r0
 8010704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010708:	fb06 f202 	mul.w	r2, r6, r2
 801070c:	47a8      	blx	r5
 801070e:	e7ec      	b.n	80106ea <GetTimeOnAir+0x32>
 8010710:	08016068 	.word	0x08016068
 8010714:	08016048 	.word	0x08016048
 8010718:	08016690 	.word	0x08016690

0801071c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801071c:	b500      	push	{lr}
 801071e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010720:	2300      	movs	r3, #0
 8010722:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8010724:	7803      	ldrb	r3, [r0, #0]
 8010726:	3b0b      	subs	r3, #11
 8010728:	2b2e      	cmp	r3, #46	; 0x2e
 801072a:	d830      	bhi.n	801078e <RegionEU868GetPhyParam+0x72>
 801072c:	e8df f003 	tbb	[pc, r3]
 8010730:	403a3734 	.word	0x403a3734
 8010734:	514d4946 	.word	0x514d4946
 8010738:	615d5955 	.word	0x615d5955
 801073c:	6d2f6a2f 	.word	0x6d2f6a2f
 8010740:	2f7c7973 	.word	0x2f7c7973
 8010744:	1884802f 	.word	0x1884802f
 8010748:	2f2f2f2f 	.word	0x2f2f2f2f
 801074c:	2f2f2f2f 	.word	0x2f2f2f2f
 8010750:	2f2f2f2f 	.word	0x2f2f2f2f
 8010754:	918a872f 	.word	0x918a872f
 8010758:	97942f2f 	.word	0x97942f2f
 801075c:	9a2f      	.short	0x9a2f
 801075e:	a0          	.byte	0xa0
 801075f:	00          	.byte	0x00
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8010760:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010764:	f88d 3004 	strb.w	r3, [sp, #4]
 8010768:	2307      	movs	r3, #7
 801076a:	f88d 3005 	strb.w	r3, [sp, #5]
 801076e:	2300      	movs	r3, #0
 8010770:	f88d 3006 	strb.w	r3, [sp, #6]
 8010774:	2310      	movs	r3, #16
 8010776:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801077a:	4b41      	ldr	r3, [pc, #260]	; (8010880 <RegionEU868GetPhyParam+0x164>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010782:	9202      	str	r2, [sp, #8]
 8010784:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010786:	a801      	add	r0, sp, #4
 8010788:	f7ff fedb 	bl	8010542 <RegionCommonGetNextLowerTxDr>
 801078c:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801078e:	9804      	ldr	r0, [sp, #16]
 8010790:	9005      	str	r0, [sp, #20]
}
 8010792:	b007      	add	sp, #28
 8010794:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010798:	2340      	movs	r3, #64	; 0x40
 801079a:	9304      	str	r3, [sp, #16]
            break;
 801079c:	e7f7      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801079e:	2320      	movs	r3, #32
 80107a0:	9304      	str	r3, [sp, #16]
            break;
 80107a2:	e7f4      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80107a4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80107a8:	4a36      	ldr	r2, [pc, #216]	; (8010884 <RegionEU868GetPhyParam+0x168>)
 80107aa:	5cd3      	ldrb	r3, [r2, r3]
 80107ac:	9304      	str	r3, [sp, #16]
            break;
 80107ae:	e7ee      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80107b0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80107b4:	4a34      	ldr	r2, [pc, #208]	; (8010888 <RegionEU868GetPhyParam+0x16c>)
 80107b6:	5cd3      	ldrb	r3, [r2, r3]
 80107b8:	9304      	str	r3, [sp, #16]
            break;
 80107ba:	e7e8      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80107bc:	2301      	movs	r3, #1
 80107be:	9304      	str	r3, [sp, #16]
            break;
 80107c0:	e7e5      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80107c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80107c6:	9304      	str	r3, [sp, #16]
            break;
 80107c8:	e7e1      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80107ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80107ce:	9304      	str	r3, [sp, #16]
            break;
 80107d0:	e7dd      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80107d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80107d6:	9304      	str	r3, [sp, #16]
            break;
 80107d8:	e7d9      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80107da:	f241 3388 	movw	r3, #5000	; 0x1388
 80107de:	9304      	str	r3, [sp, #16]
            break;
 80107e0:	e7d5      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80107e2:	f241 7370 	movw	r3, #6000	; 0x1770
 80107e6:	9304      	str	r3, [sp, #16]
            break;
 80107e8:	e7d1      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80107ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80107ee:	9304      	str	r3, [sp, #16]
            break;
 80107f0:	e7cd      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80107f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80107f6:	4825      	ldr	r0, [pc, #148]	; (801088c <RegionEU868GetPhyParam+0x170>)
 80107f8:	f002 fae8 	bl	8012dcc <randr>
 80107fc:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010800:	9004      	str	r0, [sp, #16]
            break;
 8010802:	e7c4      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010804:	4b22      	ldr	r3, [pc, #136]	; (8010890 <RegionEU868GetPhyParam+0x174>)
 8010806:	9304      	str	r3, [sp, #16]
            break;
 8010808:	e7c1      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801080a:	4b1d      	ldr	r3, [pc, #116]	; (8010880 <RegionEU868GetPhyParam+0x164>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010812:	9304      	str	r3, [sp, #16]
            break;
 8010814:	e7bb      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010816:	4b1a      	ldr	r3, [pc, #104]	; (8010880 <RegionEU868GetPhyParam+0x164>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801081e:	9304      	str	r3, [sp, #16]
            break;
 8010820:	e7b5      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010822:	2310      	movs	r3, #16
 8010824:	9304      	str	r3, [sp, #16]
            break;
 8010826:	e7b2      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010828:	4b15      	ldr	r3, [pc, #84]	; (8010880 <RegionEU868GetPhyParam+0x164>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	9304      	str	r3, [sp, #16]
            break;
 801082e:	e7ae      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010830:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010834:	9304      	str	r3, [sp, #16]
            break;
 8010836:	e7aa      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8010838:	4b16      	ldr	r3, [pc, #88]	; (8010894 <RegionEU868GetPhyParam+0x178>)
 801083a:	9304      	str	r3, [sp, #16]
            break;
 801083c:	e7a7      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801083e:	4b14      	ldr	r3, [pc, #80]	; (8010890 <RegionEU868GetPhyParam+0x174>)
 8010840:	9304      	str	r3, [sp, #16]
            break;
 8010842:	e7a4      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010844:	2311      	movs	r3, #17
 8010846:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801084a:	2302      	movs	r3, #2
 801084c:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 8010850:	e79d      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010852:	2303      	movs	r3, #3
 8010854:	9304      	str	r3, [sp, #16]
            break;
 8010856:	e79a      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8010858:	4b0d      	ldr	r3, [pc, #52]	; (8010890 <RegionEU868GetPhyParam+0x174>)
 801085a:	9304      	str	r3, [sp, #16]
            break;
 801085c:	e797      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801085e:	2303      	movs	r3, #3
 8010860:	9304      	str	r3, [sp, #16]
            break;
 8010862:	e794      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8010864:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010868:	4a0b      	ldr	r2, [pc, #44]	; (8010898 <RegionEU868GetPhyParam+0x17c>)
 801086a:	5cd3      	ldrb	r3, [r2, r3]
 801086c:	9304      	str	r3, [sp, #16]
            break;
 801086e:	e78e      	b.n	801078e <RegionEU868GetPhyParam+0x72>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8010870:	490a      	ldr	r1, [pc, #40]	; (801089c <RegionEU868GetPhyParam+0x180>)
 8010872:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010876:	f7ff fe87 	bl	8010588 <RegionCommonGetBandwidth>
 801087a:	9004      	str	r0, [sp, #16]
            break;
 801087c:	e787      	b.n	801078e <RegionEU868GetPhyParam+0x72>
 801087e:	bf00      	nop
 8010880:	20003a5c 	.word	0x20003a5c
 8010884:	08016070 	.word	0x08016070
 8010888:	08016078 	.word	0x08016078
 801088c:	fffffc18 	.word	0xfffffc18
 8010890:	33d3e608 	.word	0x33d3e608
 8010894:	4009999a 	.word	0x4009999a
 8010898:	08016068 	.word	0x08016068
 801089c:	08016048 	.word	0x08016048

080108a0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80108a0:	b510      	push	{r4, lr}
 80108a2:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80108a4:	4b0b      	ldr	r3, [pc, #44]	; (80108d4 <RegionEU868SetBandTxDone+0x34>)
 80108a6:	681c      	ldr	r4, [r3, #0]
 80108a8:	4b0b      	ldr	r3, [pc, #44]	; (80108d8 <RegionEU868SetBandTxDone+0x38>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	7803      	ldrb	r3, [r0, #0]
 80108ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108b6:	7a5b      	ldrb	r3, [r3, #9]
 80108b8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80108bc:	6903      	ldr	r3, [r0, #16]
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	68c3      	ldr	r3, [r0, #12]
 80108c2:	7842      	ldrb	r2, [r0, #1]
 80108c4:	6881      	ldr	r1, [r0, #8]
 80108c6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 80108ca:	f7ff fc13 	bl	80100f4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80108ce:	b002      	add	sp, #8
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	bf00      	nop
 80108d4:	20003a58 	.word	0x20003a58
 80108d8:	20003a5c 	.word	0x20003a5c

080108dc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80108dc:	b510      	push	{r4, lr}
 80108de:	b0a4      	sub	sp, #144	; 0x90
 80108e0:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80108e2:	2290      	movs	r2, #144	; 0x90
 80108e4:	2100      	movs	r1, #0
 80108e6:	4668      	mov	r0, sp
 80108e8:	f004 fe34 	bl	8015554 <memset>
 80108ec:	2364      	movs	r3, #100	; 0x64
 80108ee:	f8ad 3000 	strh.w	r3, [sp]
 80108f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80108f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80108fa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80108fe:	210a      	movs	r1, #10
 8010900:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8010904:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010908:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801090c:	7a23      	ldrb	r3, [r4, #8]
 801090e:	2b01      	cmp	r3, #1
 8010910:	d031      	beq.n	8010976 <RegionEU868InitDefaults+0x9a>
 8010912:	2b02      	cmp	r3, #2
 8010914:	d03d      	beq.n	8010992 <RegionEU868InitDefaults+0xb6>
 8010916:	b10b      	cbz	r3, 801091c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010918:	b024      	add	sp, #144	; 0x90
 801091a:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801091c:	6820      	ldr	r0, [r4, #0]
 801091e:	2800      	cmp	r0, #0
 8010920:	d0fa      	beq.n	8010918 <RegionEU868InitDefaults+0x3c>
 8010922:	6863      	ldr	r3, [r4, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d0f7      	beq.n	8010918 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010928:	4a1f      	ldr	r2, [pc, #124]	; (80109a8 <RegionEU868InitDefaults+0xcc>)
 801092a:	6010      	str	r0, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801092c:	4c1f      	ldr	r4, [pc, #124]	; (80109ac <RegionEU868InitDefaults+0xd0>)
 801092e:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8010930:	2290      	movs	r2, #144	; 0x90
 8010932:	4669      	mov	r1, sp
 8010934:	f002 fa57 	bl	8012de6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010938:	6824      	ldr	r4, [r4, #0]
 801093a:	4b1d      	ldr	r3, [pc, #116]	; (80109b0 <RegionEU868InitDefaults+0xd4>)
 801093c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010944:	f104 0c0c 	add.w	ip, r4, #12
 8010948:	f103 020c 	add.w	r2, r3, #12
 801094c:	ca07      	ldmia	r2, {r0, r1, r2}
 801094e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010952:	f104 0c18 	add.w	ip, r4, #24
 8010956:	3318      	adds	r3, #24
 8010958:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801095c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010960:	2307      	movs	r3, #7
 8010962:	f8a4 348c 	strh.w	r3, [r4, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010966:	2201      	movs	r2, #1
 8010968:	f204 418c 	addw	r1, r4, #1164	; 0x48c
 801096c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8010970:	f7ff fbb1 	bl	80100d6 <RegionCommonChanMaskCopy>
            break;
 8010974:	e7d0      	b.n	8010918 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8010976:	4b0d      	ldr	r3, [pc, #52]	; (80109ac <RegionEU868InitDefaults+0xd0>)
 8010978:	6818      	ldr	r0, [r3, #0]
 801097a:	2300      	movs	r3, #0
 801097c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801097e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8010980:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010982:	2201      	movs	r2, #1
 8010984:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8010988:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801098c:	f7ff fba3 	bl	80100d6 <RegionCommonChanMaskCopy>
            break;
 8010990:	e7c2      	b.n	8010918 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8010992:	4b06      	ldr	r3, [pc, #24]	; (80109ac <RegionEU868InitDefaults+0xd0>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801099a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 801099e:	430a      	orrs	r2, r1
 80109a0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80109a4:	e7b8      	b.n	8010918 <RegionEU868InitDefaults+0x3c>
 80109a6:	bf00      	nop
 80109a8:	20003a58 	.word	0x20003a58
 80109ac:	20003a5c 	.word	0x20003a5c
 80109b0:	080156fc 	.word	0x080156fc

080109b4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80109b4:	b500      	push	{lr}
 80109b6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80109b8:	290f      	cmp	r1, #15
 80109ba:	d83c      	bhi.n	8010a36 <RegionEU868Verify+0x82>
 80109bc:	e8df f001 	tbb	[pc, r1]
 80109c0:	3b3b3b0a 	.word	0x3b3b3b0a
 80109c4:	271d133b 	.word	0x271d133b
 80109c8:	3b31313b 	.word	0x3b31313b
 80109cc:	083b3b3b 	.word	0x083b3b3b
 80109d0:	2001      	movs	r0, #1
 80109d2:	e031      	b.n	8010a38 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80109d4:	2300      	movs	r3, #0
 80109d6:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 80109da:	f10d 0107 	add.w	r1, sp, #7
 80109de:	6800      	ldr	r0, [r0, #0]
 80109e0:	f7ff fe16 	bl	8010610 <VerifyRfFreq>
 80109e4:	e028      	b.n	8010a38 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80109e6:	2207      	movs	r2, #7
 80109e8:	2100      	movs	r1, #0
 80109ea:	f990 0000 	ldrsb.w	r0, [r0]
 80109ee:	f7ff fafe 	bl	800ffee <RegionCommonValueInRange>
 80109f2:	3800      	subs	r0, #0
 80109f4:	bf18      	it	ne
 80109f6:	2001      	movne	r0, #1
 80109f8:	e01e      	b.n	8010a38 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80109fa:	2205      	movs	r2, #5
 80109fc:	2100      	movs	r1, #0
 80109fe:	f990 0000 	ldrsb.w	r0, [r0]
 8010a02:	f7ff faf4 	bl	800ffee <RegionCommonValueInRange>
 8010a06:	3800      	subs	r0, #0
 8010a08:	bf18      	it	ne
 8010a0a:	2001      	movne	r0, #1
 8010a0c:	e014      	b.n	8010a38 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010a0e:	2207      	movs	r2, #7
 8010a10:	2100      	movs	r1, #0
 8010a12:	f990 0000 	ldrsb.w	r0, [r0]
 8010a16:	f7ff faea 	bl	800ffee <RegionCommonValueInRange>
 8010a1a:	3800      	subs	r0, #0
 8010a1c:	bf18      	it	ne
 8010a1e:	2001      	movne	r0, #1
 8010a20:	e00a      	b.n	8010a38 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010a22:	2207      	movs	r2, #7
 8010a24:	2100      	movs	r1, #0
 8010a26:	f990 0000 	ldrsb.w	r0, [r0]
 8010a2a:	f7ff fae0 	bl	800ffee <RegionCommonValueInRange>
 8010a2e:	3800      	subs	r0, #0
 8010a30:	bf18      	it	ne
 8010a32:	2001      	movne	r0, #1
 8010a34:	e000      	b.n	8010a38 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8010a36:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010a38:	b003      	add	sp, #12
 8010a3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010a40 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010a40:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010a42:	7903      	ldrb	r3, [r0, #4]
 8010a44:	b11b      	cbz	r3, 8010a4e <RegionEU868ChanMaskSet+0xe>
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d00b      	beq.n	8010a62 <RegionEU868ChanMaskSet+0x22>
 8010a4a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010a4c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010a4e:	4b0a      	ldr	r3, [pc, #40]	; (8010a78 <RegionEU868ChanMaskSet+0x38>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2201      	movs	r2, #1
 8010a54:	6801      	ldr	r1, [r0, #0]
 8010a56:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8010a5a:	f7ff fb3c 	bl	80100d6 <RegionCommonChanMaskCopy>
    return true;
 8010a5e:	2001      	movs	r0, #1
            break;
 8010a60:	e7f4      	b.n	8010a4c <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010a62:	4b05      	ldr	r3, [pc, #20]	; (8010a78 <RegionEU868ChanMaskSet+0x38>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2201      	movs	r2, #1
 8010a68:	6801      	ldr	r1, [r0, #0]
 8010a6a:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8010a6e:	f7ff fb32 	bl	80100d6 <RegionCommonChanMaskCopy>
    return true;
 8010a72:	2001      	movs	r0, #1
            break;
 8010a74:	e7ea      	b.n	8010a4c <RegionEU868ChanMaskSet+0xc>
 8010a76:	bf00      	nop
 8010a78:	20003a5c 	.word	0x20003a5c

08010a7c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	460e      	mov	r6, r1
 8010a82:	4617      	mov	r7, r2
 8010a84:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8010a86:	2807      	cmp	r0, #7
 8010a88:	bfa8      	it	ge
 8010a8a:	2007      	movge	r0, #7
 8010a8c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010a8e:	4913      	ldr	r1, [pc, #76]	; (8010adc <RegionEU868ComputeRxWindowParameters+0x60>)
 8010a90:	f7ff fd7a 	bl	8010588 <RegionCommonGetBandwidth>
 8010a94:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8010a96:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010a9a:	2b07      	cmp	r3, #7
 8010a9c:	d017      	beq.n	8010ace <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010a9e:	4a0f      	ldr	r2, [pc, #60]	; (8010adc <RegionEU868ComputeRxWindowParameters+0x60>)
 8010aa0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010aa4:	4a0e      	ldr	r2, [pc, #56]	; (8010ae0 <RegionEU868ComputeRxWindowParameters+0x64>)
 8010aa6:	5cd0      	ldrb	r0, [r2, r3]
 8010aa8:	f7ff fc3c 	bl	8010324 <RegionCommonComputeSymbolTimeLoRa>
 8010aac:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010aae:	4b0d      	ldr	r3, [pc, #52]	; (8010ae4 <RegionEU868ComputeRxWindowParameters+0x68>)
 8010ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ab2:	4798      	blx	r3
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	f104 020c 	add.w	r2, r4, #12
 8010aba:	9201      	str	r2, [sp, #4]
 8010abc:	3408      	adds	r4, #8
 8010abe:	9400      	str	r4, [sp, #0]
 8010ac0:	463a      	mov	r2, r7
 8010ac2:	4631      	mov	r1, r6
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	f7ff fc3b 	bl	8010340 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8010aca:	b003      	add	sp, #12
 8010acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010ace:	4a04      	ldr	r2, [pc, #16]	; (8010ae0 <RegionEU868ComputeRxWindowParameters+0x64>)
 8010ad0:	5cd0      	ldrb	r0, [r2, r3]
 8010ad2:	f7ff fc2f 	bl	8010334 <RegionCommonComputeSymbolTimeFsk>
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	e7e9      	b.n	8010aae <RegionEU868ComputeRxWindowParameters+0x32>
 8010ada:	bf00      	nop
 8010adc:	08016048 	.word	0x08016048
 8010ae0:	08016068 	.word	0x08016068
 8010ae4:	08016690 	.word	0x08016690

08010ae8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aec:	b08a      	sub	sp, #40	; 0x28
 8010aee:	4604      	mov	r4, r0
 8010af0:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010af2:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010af6:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010afa:	4b37      	ldr	r3, [pc, #220]	; (8010bd8 <RegionEU868RxConfig+0xf0>)
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	4798      	blx	r3
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d167      	bne.n	8010bd4 <RegionEU868RxConfig+0xec>
 8010b04:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010b06:	7ce3      	ldrb	r3, [r4, #19]
 8010b08:	b983      	cbnz	r3, 8010b2c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010b0a:	4b34      	ldr	r3, [pc, #208]	; (8010bdc <RegionEU868RxConfig+0xf4>)
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	7823      	ldrb	r3, [r4, #0]
 8010b10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010b14:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010b18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010b20:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8010b24:	f1b8 0f00 	cmp.w	r8, #0
 8010b28:	d100      	bne.n	8010b2c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010b2a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010b2c:	4b2c      	ldr	r3, [pc, #176]	; (8010be0 <RegionEU868RxConfig+0xf8>)
 8010b2e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010b32:	4b29      	ldr	r3, [pc, #164]	; (8010bd8 <RegionEU868RxConfig+0xf0>)
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	4640      	mov	r0, r8
 8010b38:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8010b3a:	2d07      	cmp	r5, #7
 8010b3c:	d02b      	beq.n	8010b96 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010b3e:	4b26      	ldr	r3, [pc, #152]	; (8010bd8 <RegionEU868RxConfig+0xf0>)
 8010b40:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010b44:	7ca3      	ldrb	r3, [r4, #18]
 8010b46:	9309      	str	r3, [sp, #36]	; 0x24
 8010b48:	2601      	movs	r6, #1
 8010b4a:	9608      	str	r6, [sp, #32]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	9307      	str	r3, [sp, #28]
 8010b50:	9306      	str	r3, [sp, #24]
 8010b52:	9305      	str	r3, [sp, #20]
 8010b54:	9304      	str	r3, [sp, #16]
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	8922      	ldrh	r2, [r4, #8]
 8010b5a:	9202      	str	r2, [sp, #8]
 8010b5c:	2208      	movs	r2, #8
 8010b5e:	9201      	str	r2, [sp, #4]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	4633      	mov	r3, r6
 8010b64:	464a      	mov	r2, r9
 8010b66:	78a1      	ldrb	r1, [r4, #2]
 8010b68:	4630      	mov	r0, r6
 8010b6a:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 8010b6c:	7c63      	ldrb	r3, [r4, #17]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d02d      	beq.n	8010bce <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8010b72:	4b1c      	ldr	r3, [pc, #112]	; (8010be4 <RegionEU868RxConfig+0xfc>)
 8010b74:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010b76:	4b18      	ldr	r3, [pc, #96]	; (8010bd8 <RegionEU868RxConfig+0xf0>)
 8010b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b7a:	310d      	adds	r1, #13
 8010b7c:	b2c9      	uxtb	r1, r1
 8010b7e:	4630      	mov	r0, r6
 8010b80:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010b82:	462a      	mov	r2, r5
 8010b84:	4641      	mov	r1, r8
 8010b86:	7ce0      	ldrb	r0, [r4, #19]
 8010b88:	f7ff fd10 	bl	80105ac <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8010b8c:	703d      	strb	r5, [r7, #0]
    return true;
 8010b8e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010b90:	b00a      	add	sp, #40	; 0x28
 8010b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8010b96:	4b10      	ldr	r3, [pc, #64]	; (8010bd8 <RegionEU868RxConfig+0xf0>)
 8010b98:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010b9c:	7ca3      	ldrb	r3, [r4, #18]
 8010b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	9008      	str	r0, [sp, #32]
 8010ba4:	9007      	str	r0, [sp, #28]
 8010ba6:	9006      	str	r0, [sp, #24]
 8010ba8:	2301      	movs	r3, #1
 8010baa:	9305      	str	r3, [sp, #20]
 8010bac:	9004      	str	r0, [sp, #16]
 8010bae:	9003      	str	r0, [sp, #12]
 8010bb0:	8923      	ldrh	r3, [r4, #8]
 8010bb2:	9302      	str	r3, [sp, #8]
 8010bb4:	2305      	movs	r3, #5
 8010bb6:	9301      	str	r3, [sp, #4]
 8010bb8:	4b0b      	ldr	r3, [pc, #44]	; (8010be8 <RegionEU868RxConfig+0x100>)
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010bc2:	fb02 f209 	mul.w	r2, r2, r9
 8010bc6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010bca:	47d0      	blx	sl
 8010bcc:	e7ce      	b.n	8010b6c <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010bce:	4b07      	ldr	r3, [pc, #28]	; (8010bec <RegionEU868RxConfig+0x104>)
 8010bd0:	5d59      	ldrb	r1, [r3, r5]
 8010bd2:	e7d0      	b.n	8010b76 <RegionEU868RxConfig+0x8e>
        return false;
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	e7db      	b.n	8010b90 <RegionEU868RxConfig+0xa8>
 8010bd8:	08016690 	.word	0x08016690
 8010bdc:	20003a5c 	.word	0x20003a5c
 8010be0:	08016068 	.word	0x08016068
 8010be4:	08016078 	.word	0x08016078
 8010be8:	00014585 	.word	0x00014585
 8010bec:	08016070 	.word	0x08016070

08010bf0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	b08d      	sub	sp, #52	; 0x34
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	460f      	mov	r7, r1
 8010bfa:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8010bfc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010c00:	4a42      	ldr	r2, [pc, #264]	; (8010d0c <RegionEU868TxConfig+0x11c>)
 8010c02:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010c06:	4b42      	ldr	r3, [pc, #264]	; (8010d10 <RegionEU868TxConfig+0x120>)
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	4d42      	ldr	r5, [pc, #264]	; (8010d14 <RegionEU868TxConfig+0x124>)
 8010c0c:	6829      	ldr	r1, [r5, #0]
 8010c0e:	7803      	ldrb	r3, [r0, #0]
 8010c10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010c18:	7a4b      	ldrb	r3, [r1, #9]
 8010c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c22:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010c26:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010c2a:	f7ff fca9 	bl	8010580 <RegionCommonLimitTxPower>
 8010c2e:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010c30:	4939      	ldr	r1, [pc, #228]	; (8010d18 <RegionEU868TxConfig+0x128>)
 8010c32:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010c36:	f7ff fca7 	bl	8010588 <RegionCommonGetBandwidth>
 8010c3a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010c3c:	68a2      	ldr	r2, [r4, #8]
 8010c3e:	6861      	ldr	r1, [r4, #4]
 8010c40:	4630      	mov	r0, r6
 8010c42:	f7ff fbb9 	bl	80103b8 <RegionCommonComputeTxPower>
 8010c46:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010c48:	4b34      	ldr	r3, [pc, #208]	; (8010d1c <RegionEU868TxConfig+0x12c>)
 8010c4a:	68da      	ldr	r2, [r3, #12]
 8010c4c:	6829      	ldr	r1, [r5, #0]
 8010c4e:	7823      	ldrb	r3, [r4, #0]
 8010c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c54:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010c58:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8010c5a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010c5e:	2b07      	cmp	r3, #7
 8010c60:	d031      	beq.n	8010cc6 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010c62:	4b2e      	ldr	r3, [pc, #184]	; (8010d1c <RegionEU868TxConfig+0x12c>)
 8010c64:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010c68:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010c6c:	9308      	str	r3, [sp, #32]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	9207      	str	r2, [sp, #28]
 8010c72:	9206      	str	r2, [sp, #24]
 8010c74:	9205      	str	r2, [sp, #20]
 8010c76:	2501      	movs	r5, #1
 8010c78:	9504      	str	r5, [sp, #16]
 8010c7a:	9203      	str	r2, [sp, #12]
 8010c7c:	2308      	movs	r3, #8
 8010c7e:	9302      	str	r3, [sp, #8]
 8010c80:	9501      	str	r5, [sp, #4]
 8010c82:	f8cd a000 	str.w	sl, [sp]
 8010c86:	464b      	mov	r3, r9
 8010c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010c8e:	4b21      	ldr	r3, [pc, #132]	; (8010d14 <RegionEU868TxConfig+0x124>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	7823      	ldrb	r3, [r4, #0]
 8010c94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c98:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010c9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010ca0:	f7ff fca6 	bl	80105f0 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8010ca4:	89a1      	ldrh	r1, [r4, #12]
 8010ca6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010caa:	f7ff fd05 	bl	80106b8 <GetTimeOnAir>
 8010cae:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8010cb2:	4b1a      	ldr	r3, [pc, #104]	; (8010d1c <RegionEU868TxConfig+0x12c>)
 8010cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cb6:	7b21      	ldrb	r1, [r4, #12]
 8010cb8:	4628      	mov	r0, r5
 8010cba:	4798      	blx	r3

    *txPower = txPowerLimited;
 8010cbc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010cbe:	2001      	movs	r0, #1
 8010cc0:	b00d      	add	sp, #52	; 0x34
 8010cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8010cc6:	4b15      	ldr	r3, [pc, #84]	; (8010d1c <RegionEU868TxConfig+0x12c>)
 8010cc8:	69dd      	ldr	r5, [r3, #28]
 8010cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010cce:	fb03 f30a 	mul.w	r3, r3, sl
 8010cd2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8010cd6:	9208      	str	r2, [sp, #32]
 8010cd8:	f04f 0a00 	mov.w	sl, #0
 8010cdc:	f8cd a01c 	str.w	sl, [sp, #28]
 8010ce0:	f8cd a018 	str.w	sl, [sp, #24]
 8010ce4:	f8cd a014 	str.w	sl, [sp, #20]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	9204      	str	r2, [sp, #16]
 8010cec:	f8cd a00c 	str.w	sl, [sp, #12]
 8010cf0:	2205      	movs	r2, #5
 8010cf2:	9202      	str	r2, [sp, #8]
 8010cf4:	f8cd a004 	str.w	sl, [sp, #4]
 8010cf8:	9300      	str	r3, [sp, #0]
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8010d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d02:	4650      	mov	r0, sl
 8010d04:	47a8      	blx	r5
        modem = MODEM_FSK;
 8010d06:	4655      	mov	r5, sl
 8010d08:	e7c1      	b.n	8010c8e <RegionEU868TxConfig+0x9e>
 8010d0a:	bf00      	nop
 8010d0c:	08016068 	.word	0x08016068
 8010d10:	20003a58 	.word	0x20003a58
 8010d14:	20003a5c 	.word	0x20003a5c
 8010d18:	08016048 	.word	0x08016048
 8010d1c:	08016690 	.word	0x08016690

08010d20 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d24:	b08f      	sub	sp, #60	; 0x3c
 8010d26:	4605      	mov	r5, r0
 8010d28:	4689      	mov	r9, r1
 8010d2a:	4690      	mov	r8, r2
 8010d2c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010d2e:	2400      	movs	r4, #0
 8010d30:	940c      	str	r4, [sp, #48]	; 0x30
 8010d32:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8010d36:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8010d3a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010d3c:	e030      	b.n	8010da0 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010d3e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 8010d42:	2607      	movs	r6, #7
 8010d44:	e012      	b.n	8010d6c <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8010d46:	4a58      	ldr	r2, [pc, #352]	; (8010ea8 <RegionEU868LinkAdrReq+0x188>)
 8010d48:	6812      	ldr	r2, [r2, #0]
 8010d4a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8010d4e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010d52:	b13a      	cbz	r2, 8010d64 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8010d54:	2201      	movs	r2, #1
 8010d56:	fa02 f20c 	lsl.w	r2, r2, ip
 8010d5a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010d5e:	430a      	orrs	r2, r1
 8010d60:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010d64:	f10c 0c01 	add.w	ip, ip, #1
 8010d68:	fa5f fc8c 	uxtb.w	ip, ip
 8010d6c:	f1bc 0f0f 	cmp.w	ip, #15
 8010d70:	d816      	bhi.n	8010da0 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8010d72:	2b06      	cmp	r3, #6
 8010d74:	d0e7      	beq.n	8010d46 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010d76:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 8010d7a:	fa4e fe0c 	asr.w	lr, lr, ip
 8010d7e:	f01e 0f01 	tst.w	lr, #1
 8010d82:	d0ef      	beq.n	8010d64 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8010d84:	4a48      	ldr	r2, [pc, #288]	; (8010ea8 <RegionEU868LinkAdrReq+0x188>)
 8010d86:	6812      	ldr	r2, [r2, #0]
 8010d88:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8010d8c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010d90:	2a00      	cmp	r2, #0
 8010d92:	d1e7      	bne.n	8010d64 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8010d94:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8010d98:	e7e4      	b.n	8010d64 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8010d9a:	2606      	movs	r6, #6
 8010d9c:	e000      	b.n	8010da0 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 8010d9e:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010da0:	7a2b      	ldrb	r3, [r5, #8]
 8010da2:	42a3      	cmp	r3, r4
 8010da4:	d919      	bls.n	8010dda <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010da6:	6868      	ldr	r0, [r5, #4]
 8010da8:	a90c      	add	r1, sp, #48	; 0x30
 8010daa:	4420      	add	r0, r4
 8010dac:	f7ff fa44 	bl	8010238 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010db0:	4603      	mov	r3, r0
 8010db2:	b190      	cbz	r0, 8010dda <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 8010db4:	4423      	add	r3, r4
 8010db6:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 8010db8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010dbc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8010dc0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010dc4:	b90b      	cbnz	r3, 8010dca <RegionEU868LinkAdrReq+0xaa>
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	d0e7      	beq.n	8010d9a <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8010dca:	1e5a      	subs	r2, r3, #1
 8010dcc:	b2d2      	uxtb	r2, r2
 8010dce:	2a04      	cmp	r2, #4
 8010dd0:	d9e5      	bls.n	8010d9e <RegionEU868LinkAdrReq+0x7e>
 8010dd2:	2b06      	cmp	r3, #6
 8010dd4:	d9b3      	bls.n	8010d3e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 8010dd6:	2606      	movs	r6, #6
 8010dd8:	e7e2      	b.n	8010da0 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010dda:	2302      	movs	r3, #2
 8010ddc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8010de0:	7a6b      	ldrb	r3, [r5, #9]
 8010de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8010de6:	a80a      	add	r0, sp, #40	; 0x28
 8010de8:	f7ff fc98 	bl	801071c <RegionEU868GetPhyParam>
 8010dec:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 8010dee:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8010df2:	7aab      	ldrb	r3, [r5, #10]
 8010df4:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010df8:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010dfc:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8010e00:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010e04:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010e08:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010e0c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010e10:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8010e14:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010e18:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010e1c:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010e20:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8010e24:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8010e28:	2310      	movs	r3, #16
 8010e2a:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010e2e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010e32:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8010e34:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8010e38:	2307      	movs	r3, #7
 8010e3a:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010e3e:	4a1a      	ldr	r2, [pc, #104]	; (8010ea8 <RegionEU868LinkAdrReq+0x188>)
 8010e40:	6812      	ldr	r2, [r2, #0]
 8010e42:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8010e44:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010e52:	ab0c      	add	r3, sp, #48	; 0x30
 8010e54:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8010e58:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8010e5c:	a801      	add	r0, sp, #4
 8010e5e:	f7ff fa09 	bl	8010274 <RegionCommonLinkAdrReqVerifyParams>
 8010e62:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8010e64:	2807      	cmp	r0, #7
 8010e66:	d010      	beq.n	8010e8a <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8010e68:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010e6c:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8010e70:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8010e74:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8010e78:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010e7c:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8010e7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010e80:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 8010e82:	4628      	mov	r0, r5
 8010e84:	b00f      	add	sp, #60	; 0x3c
 8010e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8010e8a:	4e07      	ldr	r6, [pc, #28]	; (8010ea8 <RegionEU868LinkAdrReq+0x188>)
 8010e8c:	6830      	ldr	r0, [r6, #0]
 8010e8e:	220c      	movs	r2, #12
 8010e90:	2100      	movs	r1, #0
 8010e92:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010e96:	f001 ffbe 	bl	8012e16 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8010e9a:	6833      	ldr	r3, [r6, #0]
 8010e9c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8010ea0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
 8010ea4:	e7e0      	b.n	8010e68 <RegionEU868LinkAdrReq+0x148>
 8010ea6:	bf00      	nop
 8010ea8:	20003a5c 	.word	0x20003a5c

08010eac <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010eac:	b530      	push	{r4, r5, lr}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8010eb8:	f10d 0107 	add.w	r1, sp, #7
 8010ebc:	6840      	ldr	r0, [r0, #4]
 8010ebe:	f7ff fba7 	bl	8010610 <VerifyRfFreq>
 8010ec2:	b1a8      	cbz	r0, 8010ef0 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 8010ec4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8010ec6:	2207      	movs	r2, #7
 8010ec8:	2100      	movs	r1, #0
 8010eca:	f994 0000 	ldrsb.w	r0, [r4]
 8010ece:	f7ff f88e 	bl	800ffee <RegionCommonValueInRange>
 8010ed2:	b908      	cbnz	r0, 8010ed8 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8010ed4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8010ed8:	2205      	movs	r2, #5
 8010eda:	2100      	movs	r1, #0
 8010edc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010ee0:	f7ff f885 	bl	800ffee <RegionCommonValueInRange>
 8010ee4:	b908      	cbnz	r0, 8010eea <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8010ee6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8010eea:	4628      	mov	r0, r5
 8010eec:	b003      	add	sp, #12
 8010eee:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8010ef0:	2506      	movs	r5, #6
 8010ef2:	e7e8      	b.n	8010ec6 <RegionEU868RxParamSetupReq+0x1a>

08010ef4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8010ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ef8:	4770      	bx	lr
	...

08010efc <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8010efc:	b510      	push	{r4, lr}
 8010efe:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8010f06:	7803      	ldrb	r3, [r0, #0]
 8010f08:	2b0f      	cmp	r3, #15
 8010f0a:	d902      	bls.n	8010f12 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 8010f0c:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 8010f0e:	b002      	add	sp, #8
 8010f10:	bd10      	pop	{r4, pc}
 8010f12:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8010f14:	f10d 0107 	add.w	r1, sp, #7
 8010f18:	6840      	ldr	r0, [r0, #4]
 8010f1a:	f7ff fb79 	bl	8010610 <VerifyRfFreq>
 8010f1e:	b170      	cbz	r0, 8010f3e <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 8010f20:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8010f22:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <RegionEU868DlChannelReq+0x54>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	7823      	ldrb	r3, [r4, #0]
 8010f28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010f2c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010f30:	b909      	cbnz	r1, 8010f36 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 8010f32:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 8010f36:	2803      	cmp	r0, #3
 8010f38:	d003      	beq.n	8010f42 <RegionEU868DlChannelReq+0x46>
    return status;
 8010f3a:	b240      	sxtb	r0, r0
 8010f3c:	e7e7      	b.n	8010f0e <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 8010f3e:	2002      	movs	r0, #2
 8010f40:	e7ef      	b.n	8010f22 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8010f42:	6861      	ldr	r1, [r4, #4]
 8010f44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f48:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f4c:	6051      	str	r1, [r2, #4]
 8010f4e:	e7f4      	b.n	8010f3a <RegionEU868DlChannelReq+0x3e>
 8010f50:	20003a5c 	.word	0x20003a5c

08010f54 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 8010f54:	4770      	bx	lr
	...

08010f58 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f5a:	b097      	sub	sp, #92	; 0x5c
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	460f      	mov	r7, r1
 8010f60:	4616      	mov	r6, r2
 8010f62:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8010f64:	2100      	movs	r1, #0
 8010f66:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8010f6a:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8010f6e:	9111      	str	r1, [sp, #68]	; 0x44
 8010f70:	9112      	str	r1, [sp, #72]	; 0x48
 8010f72:	9113      	str	r1, [sp, #76]	; 0x4c
 8010f74:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8010f76:	2307      	movs	r3, #7
 8010f78:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8010f7c:	4b34      	ldr	r3, [pc, #208]	; (8011050 <RegionEU868NextChannel+0xf8>)
 8010f7e:	6818      	ldr	r0, [r3, #0]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8010f86:	f7ff f890 	bl	80100aa <RegionCommonCountChannels>
 8010f8a:	b938      	cbnz	r0, 8010f9c <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010f8c:	4b30      	ldr	r3, [pc, #192]	; (8011050 <RegionEU868NextChannel+0xf8>)
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8010f94:	f043 0307 	orr.w	r3, r3, #7
 8010f98:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010f9c:	7a63      	ldrb	r3, [r4, #9]
 8010f9e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010fa2:	7a23      	ldrb	r3, [r4, #8]
 8010fa4:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010fa8:	4b29      	ldr	r3, [pc, #164]	; (8011050 <RegionEU868NextChannel+0xf8>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 8010fb0:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8010fb2:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8010fb4:	4b27      	ldr	r3, [pc, #156]	; (8011054 <RegionEU868NextChannel+0xfc>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8010fba:	2310      	movs	r3, #16
 8010fbc:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8010fc0:	f10d 030a 	add.w	r3, sp, #10
 8010fc4:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8010fca:	6863      	ldr	r3, [r4, #4]
 8010fcc:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8010fce:	7aa3      	ldrb	r3, [r4, #10]
 8010fd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8010fd4:	2306      	movs	r3, #6
 8010fd6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8010fda:	ab0c      	add	r3, sp, #48	; 0x30
 8010fdc:	f104 020c 	add.w	r2, r4, #12
 8010fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fe4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8010fe8:	7d23      	ldrb	r3, [r4, #20]
 8010fea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8010fee:	8ae1      	ldrh	r1, [r4, #22]
 8010ff0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8010ff4:	f7ff fb60 	bl	80106b8 <GetTimeOnAir>
 8010ff8:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8010ffa:	ab03      	add	r3, sp, #12
 8010ffc:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8010ffe:	9601      	str	r6, [sp, #4]
 8011000:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011004:	9300      	str	r3, [sp, #0]
 8011006:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 801100a:	aa11      	add	r2, sp, #68	; 0x44
 801100c:	4629      	mov	r1, r5
 801100e:	a809      	add	r0, sp, #36	; 0x24
 8011010:	f7ff fa4d 	bl	80104ae <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011014:	4604      	mov	r4, r0
 8011016:	b120      	cbz	r0, 8011022 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011018:	280c      	cmp	r0, #12
 801101a:	d00f      	beq.n	801103c <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801101c:	4620      	mov	r0, r4
 801101e:	b017      	add	sp, #92	; 0x5c
 8011020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011022:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8011026:	3901      	subs	r1, #1
 8011028:	f001 fed0 	bl	8012dcc <randr>
 801102c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8011030:	eb0d 0003 	add.w	r0, sp, r3
 8011034:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8011038:	703b      	strb	r3, [r7, #0]
 801103a:	e7ef      	b.n	801101c <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801103c:	4b04      	ldr	r3, [pc, #16]	; (8011050 <RegionEU868NextChannel+0xf8>)
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	f8b2 3480 	ldrh.w	r3, [r2, #1152]	; 0x480
 8011044:	f043 0307 	orr.w	r3, r3, #7
 8011048:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
 801104c:	e7e6      	b.n	801101c <RegionEU868NextChannel+0xc4>
 801104e:	bf00      	nop
 8011050:	20003a5c 	.word	0x20003a5c
 8011054:	20003a58 	.word	0x20003a58

08011058 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801105a:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8011062:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011064:	2d02      	cmp	r5, #2
 8011066:	d94e      	bls.n	8011106 <RegionEU868ChannelAdd+0xae>
 8011068:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801106a:	2d0f      	cmp	r5, #15
 801106c:	d84d      	bhi.n	801110a <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801106e:	6803      	ldr	r3, [r0, #0]
 8011070:	7a18      	ldrb	r0, [r3, #8]
 8011072:	f340 0003 	sbfx	r0, r0, #0, #4
 8011076:	2207      	movs	r2, #7
 8011078:	2100      	movs	r1, #0
 801107a:	b240      	sxtb	r0, r0
 801107c:	f7fe ffb7 	bl	800ffee <RegionCommonValueInRange>
 8011080:	2800      	cmp	r0, #0
 8011082:	d03c      	beq.n	80110fe <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 8011084:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	7a18      	ldrb	r0, [r3, #8]
 801108a:	f340 1003 	sbfx	r0, r0, #4, #4
 801108e:	2207      	movs	r2, #7
 8011090:	2100      	movs	r1, #0
 8011092:	b240      	sxtb	r0, r0
 8011094:	f7fe ffab 	bl	800ffee <RegionCommonValueInRange>
 8011098:	b900      	cbnz	r0, 801109c <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 801109a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801109c:	6820      	ldr	r0, [r4, #0]
 801109e:	7a03      	ldrb	r3, [r0, #8]
 80110a0:	f343 0203 	sbfx	r2, r3, #0, #4
 80110a4:	b252      	sxtb	r2, r2
 80110a6:	f343 1303 	sbfx	r3, r3, #4, #4
 80110aa:	b25b      	sxtb	r3, r3
 80110ac:	429a      	cmp	r2, r3
 80110ae:	dd00      	ble.n	80110b2 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 80110b0:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80110b2:	f10d 0107 	add.w	r1, sp, #7
 80110b6:	6800      	ldr	r0, [r0, #0]
 80110b8:	f7ff faaa 	bl	8010610 <VerifyRfFreq>
 80110bc:	b308      	cbz	r0, 8011102 <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 80110be:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80110c0:	b106      	cbz	r6, 80110c4 <RegionEU868ChannelAdd+0x6c>
 80110c2:	bb2b      	cbnz	r3, 8011110 <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80110c4:	bb36      	cbnz	r6, 8011114 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80110c6:	bb3b      	cbnz	r3, 8011118 <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80110c8:	4f14      	ldr	r7, [pc, #80]	; (801111c <RegionEU868ChannelAdd+0xc4>)
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	006e      	lsls	r6, r5, #1
 80110ce:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80110d2:	220c      	movs	r2, #12
 80110d4:	6821      	ldr	r1, [r4, #0]
 80110d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80110da:	f001 fe84 	bl	8012de6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80110de:	683a      	ldr	r2, [r7, #0]
 80110e0:	442e      	add	r6, r5
 80110e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110ea:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80110ec:	2301      	movs	r3, #1
 80110ee:	40ab      	lsls	r3, r5
 80110f0:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 80110f4:	430b      	orrs	r3, r1
 80110f6:	f8a2 3480 	strh.w	r3, [r2, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80110fa:	2000      	movs	r0, #0
 80110fc:	e006      	b.n	801110c <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 80110fe:	2601      	movs	r6, #1
 8011100:	e7c1      	b.n	8011086 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 8011102:	2301      	movs	r3, #1
 8011104:	e7dc      	b.n	80110c0 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011106:	2006      	movs	r0, #6
 8011108:	e000      	b.n	801110c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801110a:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801110c:	b003      	add	sp, #12
 801110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011110:	2006      	movs	r0, #6
 8011112:	e7fb      	b.n	801110c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011114:	2005      	movs	r0, #5
 8011116:	e7f9      	b.n	801110c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011118:	2004      	movs	r0, #4
 801111a:	e7f7      	b.n	801110c <RegionEU868ChannelAdd+0xb4>
 801111c:	20003a5c 	.word	0x20003a5c

08011120 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8011120:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011122:	2902      	cmp	r1, #2
 8011124:	d801      	bhi.n	801112a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8011126:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8011128:	4770      	bx	lr
{
 801112a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801112c:	4b09      	ldr	r3, [pc, #36]	; (8011154 <RegionEU868ChannelsRemove+0x34>)
 801112e:	6818      	ldr	r0, [r3, #0]
 8011130:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011134:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011138:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801113c:	2200      	movs	r2, #0
 801113e:	f840 200c 	str.w	r2, [r0, ip]
 8011142:	605a      	str	r2, [r3, #4]
 8011144:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8011146:	2210      	movs	r2, #16
 8011148:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801114c:	f7fe ff91 	bl	8010072 <RegionCommonChanDisable>
}
 8011150:	bd08      	pop	{r3, pc}
 8011152:	bf00      	nop
 8011154:	20003a5c 	.word	0x20003a5c

08011158 <RegionEU868ApplyCFList>:
{
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801115c:	2350      	movs	r3, #80	; 0x50
 801115e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8011162:	7903      	ldrb	r3, [r0, #4]
 8011164:	2b10      	cmp	r3, #16
 8011166:	d136      	bne.n	80111d6 <RegionEU868ApplyCFList+0x7e>
 8011168:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801116a:	6803      	ldr	r3, [r0, #0]
 801116c:	7bdd      	ldrb	r5, [r3, #15]
 801116e:	2d00      	cmp	r5, #0
 8011170:	d131      	bne.n	80111d6 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011172:	2403      	movs	r4, #3
 8011174:	e01b      	b.n	80111ae <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8011176:	6832      	ldr	r2, [r6, #0]
 8011178:	5d53      	ldrb	r3, [r2, r5]
 801117a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801117c:	442a      	add	r2, r5
 801117e:	7851      	ldrb	r1, [r2, #1]
 8011180:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011184:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8011186:	7892      	ldrb	r2, [r2, #2]
 8011188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801118c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 801118e:	2264      	movs	r2, #100	; 0x64
 8011190:	fb02 f303 	mul.w	r3, r2, r3
 8011194:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	9304      	str	r3, [sp, #16]
 801119a:	e011      	b.n	80111c0 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 801119c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 80111a0:	4668      	mov	r0, sp
 80111a2:	f7ff ffbd 	bl	8011120 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80111a6:	3503      	adds	r5, #3
 80111a8:	b2ed      	uxtb	r5, r5
 80111aa:	3401      	adds	r4, #1
 80111ac:	b2e4      	uxtb	r4, r4
 80111ae:	2c0f      	cmp	r4, #15
 80111b0:	d811      	bhi.n	80111d6 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80111b2:	2c07      	cmp	r4, #7
 80111b4:	d9df      	bls.n	8011176 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 80111ba:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 80111be:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 80111c0:	9b03      	ldr	r3, [sp, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d0ea      	beq.n	801119c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 80111c6:	ab03      	add	r3, sp, #12
 80111c8:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80111ca:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 80111ce:	a801      	add	r0, sp, #4
 80111d0:	f7ff ff42 	bl	8011058 <RegionEU868ChannelAdd>
 80111d4:	e7e7      	b.n	80111a6 <RegionEU868ApplyCFList+0x4e>
}
 80111d6:	b006      	add	sp, #24
 80111d8:	bd70      	pop	{r4, r5, r6, pc}

080111da <RegionEU868NewChannelReq>:
{
 80111da:	b500      	push	{lr}
 80111dc:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80111de:	6803      	ldr	r3, [r0, #0]
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	b952      	cbnz	r2, 80111fa <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80111e4:	7903      	ldrb	r3, [r0, #4]
 80111e6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80111ea:	a801      	add	r0, sp, #4
 80111ec:	f7ff ff98 	bl	8011120 <RegionEU868ChannelsRemove>
 80111f0:	b1d0      	cbz	r0, 8011228 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80111f2:	2003      	movs	r0, #3
}
 80111f4:	b005      	add	sp, #20
 80111f6:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80111fa:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80111fc:	7903      	ldrb	r3, [r0, #4]
 80111fe:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8011202:	a802      	add	r0, sp, #8
 8011204:	f7ff ff28 	bl	8011058 <RegionEU868ChannelAdd>
 8011208:	2806      	cmp	r0, #6
 801120a:	d80b      	bhi.n	8011224 <RegionEU868NewChannelReq+0x4a>
 801120c:	e8df f000 	tbb	[pc, r0]
 8011210:	0a0a0a04 	.word	0x0a0a0a04
 8011214:	060e      	.short	0x060e
 8011216:	08          	.byte	0x08
 8011217:	00          	.byte	0x00
 8011218:	2003      	movs	r0, #3
 801121a:	e7eb      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 801121c:	2001      	movs	r0, #1
                break;
 801121e:	e7e9      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011220:	2000      	movs	r0, #0
                break;
 8011222:	e7e7      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011224:	2000      	movs	r0, #0
                break;
 8011226:	e7e5      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8011228:	2000      	movs	r0, #0
 801122a:	e7e3      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 801122c:	2002      	movs	r0, #2
 801122e:	e7e1      	b.n	80111f4 <RegionEU868NewChannelReq+0x1a>

08011230 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011230:	b538      	push	{r3, r4, r5, lr}
 8011232:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011234:	4b12      	ldr	r3, [pc, #72]	; (8011280 <RegionEU868SetContinuousWave+0x50>)
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	4d12      	ldr	r5, [pc, #72]	; (8011284 <RegionEU868SetContinuousWave+0x54>)
 801123a:	6829      	ldr	r1, [r5, #0]
 801123c:	7803      	ldrb	r3, [r0, #0]
 801123e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011242:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011246:	7a4b      	ldrb	r3, [r1, #9]
 8011248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801124c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011250:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8011254:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011258:	f7ff f992 	bl	8010580 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801125c:	682a      	ldr	r2, [r5, #0]
 801125e:	7823      	ldrb	r3, [r4, #0]
 8011260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011264:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011268:	68a2      	ldr	r2, [r4, #8]
 801126a:	6861      	ldr	r1, [r4, #4]
 801126c:	f7ff f8a4 	bl	80103b8 <RegionCommonComputeTxPower>
 8011270:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011272:	4b05      	ldr	r3, [pc, #20]	; (8011288 <RegionEU868SetContinuousWave+0x58>)
 8011274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011276:	89a2      	ldrh	r2, [r4, #12]
 8011278:	4628      	mov	r0, r5
 801127a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	bf00      	nop
 8011280:	20003a58 	.word	0x20003a58
 8011284:	20003a5c 	.word	0x20003a5c
 8011288:	08016690 	.word	0x08016690

0801128c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801128c:	1a88      	subs	r0, r1, r2
 801128e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8011290:	2800      	cmp	r0, #0
 8011292:	db01      	blt.n	8011298 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 8011294:	b2c0      	uxtb	r0, r0
 8011296:	4770      	bx	lr
        datarate = DR_0;
 8011298:	2000      	movs	r0, #0
 801129a:	e7fb      	b.n	8011294 <RegionEU868ApplyDrOffset+0x8>

0801129c <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 801129c:	b510      	push	{r4, lr}
 801129e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80112a0:	4b10      	ldr	r3, [pc, #64]	; (80112e4 <VerifyRfFreq+0x48>)
 80112a2:	6a1b      	ldr	r3, [r3, #32]
 80112a4:	4798      	blx	r3
 80112a6:	b1c8      	cbz	r0, 80112dc <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80112a8:	4b0f      	ldr	r3, [pc, #60]	; (80112e8 <VerifyRfFreq+0x4c>)
 80112aa:	4423      	add	r3, r4
 80112ac:	4a0f      	ldr	r2, [pc, #60]	; (80112ec <VerifyRfFreq+0x50>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d813      	bhi.n	80112da <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80112b2:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 80112b6:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 80112ba:	f202 7245 	addw	r2, r2, #1861	; 0x745
 80112be:	fba2 1203 	umull	r1, r2, r2, r3
 80112c2:	0c92      	lsrs	r2, r2, #18
 80112c4:	490a      	ldr	r1, [pc, #40]	; (80112f0 <VerifyRfFreq+0x54>)
 80112c6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80112ca:	b942      	cbnz	r2, 80112de <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80112cc:	4b09      	ldr	r3, [pc, #36]	; (80112f4 <VerifyRfFreq+0x58>)
 80112ce:	4423      	add	r3, r4
 80112d0:	4a09      	ldr	r2, [pc, #36]	; (80112f8 <VerifyRfFreq+0x5c>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d902      	bls.n	80112dc <VerifyRfFreq+0x40>
    {
        return false;
 80112d6:	2000      	movs	r0, #0
 80112d8:	e000      	b.n	80112dc <VerifyRfFreq+0x40>
        return false;
 80112da:	2000      	movs	r0, #0
    }
    return true;
}
 80112dc:	bd10      	pop	{r4, pc}
        return false;
 80112de:	2000      	movs	r0, #0
 80112e0:	e7fc      	b.n	80112dc <VerifyRfFreq+0x40>
 80112e2:	bf00      	nop
 80112e4:	08016690 	.word	0x08016690
 80112e8:	c8f78f60 	.word	0xc8f78f60
 80112ec:	00401640 	.word	0x00401640
 80112f0:	000927c0 	.word	0x000927c0
 80112f4:	ca37fea0 	.word	0xca37fea0
 80112f8:	01808580 	.word	0x01808580

080112fc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8011302:	4b0a      	ldr	r3, [pc, #40]	; (801132c <GetTimeOnAir+0x30>)
 8011304:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011306:	490a      	ldr	r1, [pc, #40]	; (8011330 <GetTimeOnAir+0x34>)
 8011308:	f7ff f93e 	bl	8010588 <RegionCommonGetBandwidth>
 801130c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801130e:	4b09      	ldr	r3, [pc, #36]	; (8011334 <GetTimeOnAir+0x38>)
 8011310:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011312:	2001      	movs	r0, #1
 8011314:	9003      	str	r0, [sp, #12]
 8011316:	b2e4      	uxtb	r4, r4
 8011318:	9402      	str	r4, [sp, #8]
 801131a:	2200      	movs	r2, #0
 801131c:	9201      	str	r2, [sp, #4]
 801131e:	2208      	movs	r2, #8
 8011320:	9200      	str	r2, [sp, #0]
 8011322:	4603      	mov	r3, r0
 8011324:	4632      	mov	r2, r6
 8011326:	47a8      	blx	r5
}
 8011328:	b004      	add	sp, #16
 801132a:	bd70      	pop	{r4, r5, r6, pc}
 801132c:	080160d4 	.word	0x080160d4
 8011330:	08016080 	.word	0x08016080
 8011334:	08016690 	.word	0x08016690

08011338 <LimitTxPower>:
{
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	4606      	mov	r6, r0
 801133c:	4615      	mov	r5, r2
 801133e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8011340:	f7ff f91e 	bl	8010580 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8011344:	2d04      	cmp	r5, #4
 8011346:	d105      	bne.n	8011354 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011348:	4634      	mov	r4, r6
 801134a:	2e02      	cmp	r6, #2
 801134c:	bfb8      	it	lt
 801134e:	2402      	movlt	r4, #2
}
 8011350:	4620      	mov	r0, r4
 8011352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011354:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011356:	2204      	movs	r2, #4
 8011358:	2100      	movs	r1, #0
 801135a:	4638      	mov	r0, r7
 801135c:	f7fe fea5 	bl	80100aa <RegionCommonCountChannels>
 8011360:	2831      	cmp	r0, #49	; 0x31
 8011362:	d8f5      	bhi.n	8011350 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011364:	4634      	mov	r4, r6
 8011366:	2e05      	cmp	r6, #5
 8011368:	bfb8      	it	lt
 801136a:	2405      	movlt	r4, #5
 801136c:	e7f0      	b.n	8011350 <LimitTxPower+0x18>
	...

08011370 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8011370:	b500      	push	{lr}
 8011372:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011374:	2300      	movs	r3, #0
 8011376:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011378:	7803      	ldrb	r3, [r0, #0]
 801137a:	3b01      	subs	r3, #1
 801137c:	2b38      	cmp	r3, #56	; 0x38
 801137e:	d820      	bhi.n	80113c2 <RegionUS915GetPhyParam+0x52>
 8011380:	e8df f003 	tbb	[pc, r3]
 8011384:	1f1f1f1d 	.word	0x1f1f1f1d
 8011388:	1f1f1f1f 	.word	0x1f1f1f1f
 801138c:	3f3c1f1f 	.word	0x3f3c1f1f
 8011390:	4e1f4842 	.word	0x4e1f4842
 8011394:	5e5a5652 	.word	0x5e5a5652
 8011398:	6f1f6662 	.word	0x6f1f6662
 801139c:	817b7572 	.word	0x817b7572
 80113a0:	881f1f84 	.word	0x881f1f84
 80113a4:	1f1f248b 	.word	0x1f1f248b
 80113a8:	1f1f1f1f 	.word	0x1f1f1f1f
 80113ac:	1f1f1f1f 	.word	0x1f1f1f1f
 80113b0:	8e1f1f1f 	.word	0x8e1f1f1f
 80113b4:	1fa29f95 	.word	0x1fa29f95
 80113b8:	b2afaca5 	.word	0xb2afaca5
 80113bc:	b8          	.byte	0xb8
 80113bd:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80113be:	2308      	movs	r3, #8
 80113c0:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80113c2:	9804      	ldr	r0, [sp, #16]
 80113c4:	9005      	str	r0, [sp, #20]
}
 80113c6:	b007      	add	sp, #28
 80113c8:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 80113cc:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113d0:	f88d 3004 	strb.w	r3, [sp, #4]
 80113d4:	2304      	movs	r3, #4
 80113d6:	f88d 3005 	strb.w	r3, [sp, #5]
 80113da:	2300      	movs	r3, #0
 80113dc:	f88d 3006 	strb.w	r3, [sp, #6]
 80113e0:	2348      	movs	r3, #72	; 0x48
 80113e2:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80113e6:	4b47      	ldr	r3, [pc, #284]	; (8011504 <RegionUS915GetPhyParam+0x194>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f503 6290 	add.w	r2, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80113ee:	9202      	str	r2, [sp, #8]
 80113f0:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80113f2:	a801      	add	r0, sp, #4
 80113f4:	f7ff f8a5 	bl	8010542 <RegionCommonGetNextLowerTxDr>
 80113f8:	9004      	str	r0, [sp, #16]
            break;
 80113fa:	e7e2      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80113fc:	2340      	movs	r3, #64	; 0x40
 80113fe:	9304      	str	r3, [sp, #16]
            break;
 8011400:	e7df      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011402:	2320      	movs	r3, #32
 8011404:	9304      	str	r3, [sp, #16]
            break;
 8011406:	e7dc      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011408:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801140c:	4a3e      	ldr	r2, [pc, #248]	; (8011508 <RegionUS915GetPhyParam+0x198>)
 801140e:	5cd3      	ldrb	r3, [r2, r3]
 8011410:	9304      	str	r3, [sp, #16]
            break;
 8011412:	e7d6      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8011414:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011418:	4a3c      	ldr	r2, [pc, #240]	; (801150c <RegionUS915GetPhyParam+0x19c>)
 801141a:	5cd3      	ldrb	r3, [r2, r3]
 801141c:	9304      	str	r3, [sp, #16]
            break;
 801141e:	e7d0      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8011420:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011424:	9304      	str	r3, [sp, #16]
            break;
 8011426:	e7cc      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801142c:	9304      	str	r3, [sp, #16]
            break;
 801142e:	e7c8      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8011430:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011434:	9304      	str	r3, [sp, #16]
            break;
 8011436:	e7c4      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011438:	f241 3388 	movw	r3, #5000	; 0x1388
 801143c:	9304      	str	r3, [sp, #16]
            break;
 801143e:	e7c0      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011440:	f241 7370 	movw	r3, #6000	; 0x1770
 8011444:	9304      	str	r3, [sp, #16]
            break;
 8011446:	e7bc      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8011448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801144c:	9304      	str	r3, [sp, #16]
            break;
 801144e:	e7b8      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8011450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011454:	482e      	ldr	r0, [pc, #184]	; (8011510 <RegionUS915GetPhyParam+0x1a0>)
 8011456:	f001 fcb9 	bl	8012dcc <randr>
 801145a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801145e:	9004      	str	r0, [sp, #16]
            break;
 8011460:	e7af      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8011462:	4b2c      	ldr	r3, [pc, #176]	; (8011514 <RegionUS915GetPhyParam+0x1a4>)
 8011464:	9304      	str	r3, [sp, #16]
            break;
 8011466:	e7ac      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 8011468:	2308      	movs	r3, #8
 801146a:	9304      	str	r3, [sp, #16]
            break;
 801146c:	e7a9      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801146e:	4b25      	ldr	r3, [pc, #148]	; (8011504 <RegionUS915GetPhyParam+0x194>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8011476:	9304      	str	r3, [sp, #16]
            break;
 8011478:	e7a3      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801147a:	4b22      	ldr	r3, [pc, #136]	; (8011504 <RegionUS915GetPhyParam+0x194>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8011482:	9304      	str	r3, [sp, #16]
            break;
 8011484:	e79d      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8011486:	2348      	movs	r3, #72	; 0x48
 8011488:	9304      	str	r3, [sp, #16]
            break;
 801148a:	e79a      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801148c:	4b1d      	ldr	r3, [pc, #116]	; (8011504 <RegionUS915GetPhyParam+0x194>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	9304      	str	r3, [sp, #16]
            break;
 8011492:	e796      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8011494:	4b20      	ldr	r3, [pc, #128]	; (8011518 <RegionUS915GetPhyParam+0x1a8>)
 8011496:	9304      	str	r3, [sp, #16]
            break;
 8011498:	e793      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	9304      	str	r3, [sp, #16]
            break;
 801149e:	e790      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80114a0:	4a1e      	ldr	r2, [pc, #120]	; (801151c <RegionUS915GetPhyParam+0x1ac>)
 80114a2:	491c      	ldr	r1, [pc, #112]	; (8011514 <RegionUS915GetPhyParam+0x1a4>)
 80114a4:	7900      	ldrb	r0, [r0, #4]
 80114a6:	f7fe fcd3 	bl	800fe50 <RegionBaseUSCalcDownlinkFrequency>
 80114aa:	9004      	str	r0, [sp, #16]
            break;
 80114ac:	e789      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80114ae:	2317      	movs	r3, #23
 80114b0:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80114b4:	2305      	movs	r3, #5
 80114b6:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80114ba:	2303      	movs	r3, #3
 80114bc:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80114c0:	e77f      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80114c2:	2308      	movs	r3, #8
 80114c4:	9304      	str	r3, [sp, #16]
            break;
 80114c6:	e77c      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80114c8:	2308      	movs	r3, #8
 80114ca:	9304      	str	r3, [sp, #16]
            break;
 80114cc:	e779      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80114ce:	4a13      	ldr	r2, [pc, #76]	; (801151c <RegionUS915GetPhyParam+0x1ac>)
 80114d0:	4910      	ldr	r1, [pc, #64]	; (8011514 <RegionUS915GetPhyParam+0x1a4>)
 80114d2:	7900      	ldrb	r0, [r0, #4]
 80114d4:	f7fe fcbc 	bl	800fe50 <RegionBaseUSCalcDownlinkFrequency>
 80114d8:	9004      	str	r0, [sp, #16]
            break;
 80114da:	e772      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80114dc:	2308      	movs	r3, #8
 80114de:	9304      	str	r3, [sp, #16]
            break;
 80114e0:	e76f      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80114e2:	2308      	movs	r3, #8
 80114e4:	9304      	str	r3, [sp, #16]
            break;
 80114e6:	e76c      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80114e8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80114ec:	4a0c      	ldr	r2, [pc, #48]	; (8011520 <RegionUS915GetPhyParam+0x1b0>)
 80114ee:	5cd3      	ldrb	r3, [r2, r3]
 80114f0:	9304      	str	r3, [sp, #16]
            break;
 80114f2:	e766      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80114f4:	490b      	ldr	r1, [pc, #44]	; (8011524 <RegionUS915GetPhyParam+0x1b4>)
 80114f6:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80114fa:	f7ff f845 	bl	8010588 <RegionCommonGetBandwidth>
 80114fe:	9004      	str	r0, [sp, #16]
            break;
 8011500:	e75f      	b.n	80113c2 <RegionUS915GetPhyParam+0x52>
 8011502:	bf00      	nop
 8011504:	20003a64 	.word	0x20003a64
 8011508:	080160f4 	.word	0x080160f4
 801150c:	080160e4 	.word	0x080160e4
 8011510:	fffffc18 	.word	0xfffffc18
 8011514:	370870a0 	.word	0x370870a0
 8011518:	4200999a 	.word	0x4200999a
 801151c:	000927c0 	.word	0x000927c0
 8011520:	080160d4 	.word	0x080160d4
 8011524:	08016080 	.word	0x08016080

08011528 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011528:	b510      	push	{r4, lr}
 801152a:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801152c:	4b0b      	ldr	r3, [pc, #44]	; (801155c <RegionUS915SetBandTxDone+0x34>)
 801152e:	681c      	ldr	r4, [r3, #0]
 8011530:	4b0b      	ldr	r3, [pc, #44]	; (8011560 <RegionUS915SetBandTxDone+0x38>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	7803      	ldrb	r3, [r0, #0]
 8011536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801153a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801153e:	7a5b      	ldrb	r3, [r3, #9]
 8011540:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011544:	6903      	ldr	r3, [r0, #16]
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	68c3      	ldr	r3, [r0, #12]
 801154a:	7842      	ldrb	r2, [r0, #1]
 801154c:	6881      	ldr	r1, [r0, #8]
 801154e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8011552:	f7fe fdcf 	bl	80100f4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8011556:	b002      	add	sp, #8
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop
 801155c:	20003a60 	.word	0x20003a60
 8011560:	20003a64 	.word	0x20003a64

08011564 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8011564:	b510      	push	{r4, lr}
 8011566:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8011568:	2301      	movs	r3, #1
 801156a:	f8ad 3000 	strh.w	r3, [sp]
 801156e:	2300      	movs	r3, #0
 8011570:	f88d 3002 	strb.w	r3, [sp, #2]
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	9302      	str	r3, [sp, #8]
 8011578:	9303      	str	r3, [sp, #12]
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8011580:	7a04      	ldrb	r4, [r0, #8]
 8011582:	b17c      	cbz	r4, 80115a4 <RegionUS915InitDefaults+0x40>
 8011584:	3c01      	subs	r4, #1
 8011586:	b2e4      	uxtb	r4, r4
 8011588:	2c01      	cmp	r4, #1
 801158a:	f200 8082 	bhi.w	8011692 <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801158e:	4b42      	ldr	r3, [pc, #264]	; (8011698 <RegionUS915InitDefaults+0x134>)
 8011590:	6818      	ldr	r0, [r3, #0]
 8011592:	2206      	movs	r2, #6
 8011594:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8011598:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 801159c:	f7fe fd9b 	bl	80100d6 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80115a0:	2300      	movs	r3, #0
 80115a2:	e074      	b.n	801168e <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d073      	beq.n	8011692 <RegionUS915InitDefaults+0x12e>
 80115aa:	6842      	ldr	r2, [r0, #4]
 80115ac:	2a00      	cmp	r2, #0
 80115ae:	d070      	beq.n	8011692 <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80115b0:	493a      	ldr	r1, [pc, #232]	; (801169c <RegionUS915InitDefaults+0x138>)
 80115b2:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80115b4:	4938      	ldr	r1, [pc, #224]	; (8011698 <RegionUS915InitDefaults+0x134>)
 80115b6:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80115be:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80115c2:	2218      	movs	r2, #24
 80115c4:	4669      	mov	r1, sp
 80115c6:	4618      	mov	r0, r3
 80115c8:	f001 fc0d 	bl	8012de6 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80115cc:	e011      	b.n	80115f2 <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80115ce:	4b32      	ldr	r3, [pc, #200]	; (8011698 <RegionUS915InitDefaults+0x134>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	4933      	ldr	r1, [pc, #204]	; (80116a0 <RegionUS915InitDefaults+0x13c>)
 80115d4:	4a33      	ldr	r2, [pc, #204]	; (80116a4 <RegionUS915InitDefaults+0x140>)
 80115d6:	fb01 2204 	mla	r2, r1, r4, r2
 80115da:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80115de:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80115e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80115e6:	2230      	movs	r2, #48	; 0x30
 80115e8:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80115ea:	2200      	movs	r2, #0
 80115ec:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80115ee:	3401      	adds	r4, #1
 80115f0:	b2e4      	uxtb	r4, r4
 80115f2:	2c3f      	cmp	r4, #63	; 0x3f
 80115f4:	d9eb      	bls.n	80115ce <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80115f6:	2340      	movs	r3, #64	; 0x40
 80115f8:	2b47      	cmp	r3, #71	; 0x47
 80115fa:	d814      	bhi.n	8011626 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80115fc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8011600:	4a25      	ldr	r2, [pc, #148]	; (8011698 <RegionUS915InitDefaults+0x134>)
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	4c28      	ldr	r4, [pc, #160]	; (80116a8 <RegionUS915InitDefaults+0x144>)
 8011606:	4929      	ldr	r1, [pc, #164]	; (80116ac <RegionUS915InitDefaults+0x148>)
 8011608:	fb04 1100 	mla	r1, r4, r0, r1
 801160c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8011610:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8011614:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8011618:	2144      	movs	r1, #68	; 0x44
 801161a:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801161c:	2100      	movs	r1, #0
 801161e:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8011620:	3301      	adds	r3, #1
 8011622:	b2db      	uxtb	r3, r3
 8011624:	e7e8      	b.n	80115f8 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8011626:	4c1c      	ldr	r4, [pc, #112]	; (8011698 <RegionUS915InitDefaults+0x134>)
 8011628:	6820      	ldr	r0, [r4, #0]
 801162a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801162e:	f8a0 348c 	strh.w	r3, [r0, #1164]	; 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8011632:	f8a0 348e 	strh.w	r3, [r0, #1166]	; 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8011636:	f8a0 3490 	strh.w	r3, [r0, #1168]	; 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801163a:	f8a0 3492 	strh.w	r3, [r0, #1170]	; 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801163e:	23ff      	movs	r3, #255	; 0xff
 8011640:	f8a0 3494 	strh.w	r3, [r0, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8011644:	2300      	movs	r3, #0
 8011646:	f8a0 3496 	strh.w	r3, [r0, #1174]	; 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801164a:	2206      	movs	r2, #6
 801164c:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8011650:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011654:	f7fe fd3f 	bl	80100d6 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011658:	4b10      	ldr	r3, [pc, #64]	; (801169c <RegionUS915InitDefaults+0x138>)
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	6821      	ldr	r1, [r4, #0]
 801165e:	2206      	movs	r2, #6
 8011660:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8011664:	3090      	adds	r0, #144	; 0x90
 8011666:	f7fe fd36 	bl	80100d6 <RegionCommonChanMaskCopy>
            break;
 801166a:	e012      	b.n	8011692 <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801166c:	4a0b      	ldr	r2, [pc, #44]	; (801169c <RegionUS915InitDefaults+0x138>)
 801166e:	6811      	ldr	r1, [r2, #0]
 8011670:	4a09      	ldr	r2, [pc, #36]	; (8011698 <RegionUS915InitDefaults+0x134>)
 8011672:	6812      	ldr	r2, [r2, #0]
 8011674:	f503 7010 	add.w	r0, r3, #576	; 0x240
 8011678:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 801167c:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8011680:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8011684:	4022      	ands	r2, r4
 8011686:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801168a:	3301      	adds	r3, #1
 801168c:	b2db      	uxtb	r3, r3
 801168e:	2b05      	cmp	r3, #5
 8011690:	d9ec      	bls.n	801166c <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8011692:	b006      	add	sp, #24
 8011694:	bd10      	pop	{r4, pc}
 8011696:	bf00      	nop
 8011698:	20003a64 	.word	0x20003a64
 801169c:	20003a60 	.word	0x20003a60
 80116a0:	00030d40 	.word	0x00030d40
 80116a4:	35c80160 	.word	0x35c80160
 80116a8:	00186a00 	.word	0x00186a00
 80116ac:	35d2afc0 	.word	0x35d2afc0

080116b0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80116b0:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 80116b2:	290a      	cmp	r1, #10
 80116b4:	d829      	bhi.n	801170a <RegionUS915Verify+0x5a>
 80116b6:	e8df f001 	tbb	[pc, r1]
 80116ba:	2806      	.short	0x2806
 80116bc:	0a282828 	.word	0x0a282828
 80116c0:	1e28140a 	.word	0x1e28140a
 80116c4:	1e          	.byte	0x1e
 80116c5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80116c6:	6800      	ldr	r0, [r0, #0]
 80116c8:	f7ff fde8 	bl	801129c <VerifyRfFreq>
 80116cc:	e01e      	b.n	801170c <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80116ce:	2204      	movs	r2, #4
 80116d0:	2100      	movs	r1, #0
 80116d2:	f990 0000 	ldrsb.w	r0, [r0]
 80116d6:	f7fe fc8a 	bl	800ffee <RegionCommonValueInRange>
 80116da:	3800      	subs	r0, #0
 80116dc:	bf18      	it	ne
 80116de:	2001      	movne	r0, #1
 80116e0:	e014      	b.n	801170c <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80116e2:	220d      	movs	r2, #13
 80116e4:	2108      	movs	r1, #8
 80116e6:	f990 0000 	ldrsb.w	r0, [r0]
 80116ea:	f7fe fc80 	bl	800ffee <RegionCommonValueInRange>
 80116ee:	3800      	subs	r0, #0
 80116f0:	bf18      	it	ne
 80116f2:	2001      	movne	r0, #1
 80116f4:	e00a      	b.n	801170c <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80116f6:	220e      	movs	r2, #14
 80116f8:	2100      	movs	r1, #0
 80116fa:	f990 0000 	ldrsb.w	r0, [r0]
 80116fe:	f7fe fc76 	bl	800ffee <RegionCommonValueInRange>
 8011702:	3800      	subs	r0, #0
 8011704:	bf18      	it	ne
 8011706:	2001      	movne	r0, #1
 8011708:	e000      	b.n	801170c <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 801170a:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801170c:	bd08      	pop	{r3, pc}
	...

08011710 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8011710:	7903      	ldrb	r3, [r0, #4]
 8011712:	2b10      	cmp	r3, #16
 8011714:	d138      	bne.n	8011788 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8011716:	6803      	ldr	r3, [r0, #0]
 8011718:	7bdb      	ldrb	r3, [r3, #15]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d134      	bne.n	8011788 <RegionUS915ApplyCFList+0x78>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801171e:	2200      	movs	r2, #0
 8011720:	4613      	mov	r3, r2
 8011722:	2a04      	cmp	r2, #4
 8011724:	d82f      	bhi.n	8011786 <RegionUS915ApplyCFList+0x76>
{
 8011726:	b530      	push	{r4, r5, lr}
 8011728:	e012      	b.n	8011750 <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801172a:	4d18      	ldr	r5, [pc, #96]	; (801178c <RegionUS915ApplyCFList+0x7c>)
 801172c:	682d      	ldr	r5, [r5, #0]
 801172e:	f501 7c10 	add.w	ip, r1, #576	; 0x240
 8011732:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 8011736:	3148      	adds	r1, #72	; 0x48
 8011738:	f835 c011 	ldrh.w	ip, [r5, r1, lsl #1]
 801173c:	ea04 040c 	and.w	r4, r4, ip
 8011740:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011744:	3301      	adds	r3, #1
 8011746:	b2db      	uxtb	r3, r3
 8011748:	3202      	adds	r2, #2
 801174a:	b2d2      	uxtb	r2, r2
 801174c:	2b04      	cmp	r3, #4
 801174e:	d819      	bhi.n	8011784 <RegionUS915ApplyCFList+0x74>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8011750:	6805      	ldr	r5, [r0, #0]
 8011752:	490f      	ldr	r1, [pc, #60]	; (8011790 <RegionUS915ApplyCFList+0x80>)
 8011754:	680c      	ldr	r4, [r1, #0]
 8011756:	4619      	mov	r1, r3
 8011758:	f815 c002 	ldrb.w	ip, [r5, r2]
 801175c:	f503 7510 	add.w	r5, r3, #576	; 0x240
 8011760:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8011764:	f8d0 e000 	ldr.w	lr, [r0]
 8011768:	4496      	add	lr, r2
 801176a:	f89e e001 	ldrb.w	lr, [lr, #1]
 801176e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8011772:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8011776:	2b04      	cmp	r3, #4
 8011778:	d1d7      	bne.n	801172a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801177a:	fa5f fc8c 	uxtb.w	ip, ip
 801177e:	f824 c015 	strh.w	ip, [r4, r5, lsl #1]
 8011782:	e7d2      	b.n	801172a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8011784:	bd30      	pop	{r4, r5, pc}
 8011786:	4770      	bx	lr
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	20003a60 	.word	0x20003a60
 8011790:	20003a64 	.word	0x20003a64

08011794 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011794:	b570      	push	{r4, r5, r6, lr}
 8011796:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8011798:	2204      	movs	r2, #4
 801179a:	2100      	movs	r1, #0
 801179c:	6800      	ldr	r0, [r0, #0]
 801179e:	f7fe fc84 	bl	80100aa <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80117a2:	2801      	cmp	r0, #1
 80117a4:	d033      	beq.n	801180e <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 80117a6:	792c      	ldrb	r4, [r5, #4]
 80117a8:	b11c      	cbz	r4, 80117b2 <RegionUS915ChanMaskSet+0x1e>
 80117aa:	2c01      	cmp	r4, #1
 80117ac:	d025      	beq.n	80117fa <RegionUS915ChanMaskSet+0x66>
 80117ae:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80117b0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80117b2:	4e18      	ldr	r6, [pc, #96]	; (8011814 <RegionUS915ChanMaskSet+0x80>)
 80117b4:	6830      	ldr	r0, [r6, #0]
 80117b6:	2206      	movs	r2, #6
 80117b8:	6829      	ldr	r1, [r5, #0]
 80117ba:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 80117be:	f7fe fc8a 	bl	80100d6 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80117c2:	6835      	ldr	r5, [r6, #0]
 80117c4:	f895 3494 	ldrb.w	r3, [r5, #1172]	; 0x494
 80117c8:	f8a5 3494 	strh.w	r3, [r5, #1172]	; 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80117cc:	2300      	movs	r3, #0
 80117ce:	f8a5 3496 	strh.w	r3, [r5, #1174]	; 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80117d2:	e00e      	b.n	80117f2 <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80117d4:	4b10      	ldr	r3, [pc, #64]	; (8011818 <RegionUS915ChanMaskSet+0x84>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	f504 7310 	add.w	r3, r4, #576	; 0x240
 80117dc:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80117e0:	f104 0148 	add.w	r1, r4, #72	; 0x48
 80117e4:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80117e8:	4003      	ands	r3, r0
 80117ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80117ee:	3401      	adds	r4, #1
 80117f0:	b2e4      	uxtb	r4, r4
 80117f2:	2c05      	cmp	r4, #5
 80117f4:	d9ee      	bls.n	80117d4 <RegionUS915ChanMaskSet+0x40>
    return true;
 80117f6:	2001      	movs	r0, #1
 80117f8:	e7da      	b.n	80117b0 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80117fa:	4b06      	ldr	r3, [pc, #24]	; (8011814 <RegionUS915ChanMaskSet+0x80>)
 80117fc:	6818      	ldr	r0, [r3, #0]
 80117fe:	2206      	movs	r2, #6
 8011800:	6829      	ldr	r1, [r5, #0]
 8011802:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 8011806:	f7fe fc66 	bl	80100d6 <RegionCommonChanMaskCopy>
    return true;
 801180a:	2001      	movs	r0, #1
            break;
 801180c:	e7d0      	b.n	80117b0 <RegionUS915ChanMaskSet+0x1c>
        return false;
 801180e:	2000      	movs	r0, #0
 8011810:	e7ce      	b.n	80117b0 <RegionUS915ChanMaskSet+0x1c>
 8011812:	bf00      	nop
 8011814:	20003a64 	.word	0x20003a64
 8011818:	20003a60 	.word	0x20003a60

0801181c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801181e:	b083      	sub	sp, #12
 8011820:	460e      	mov	r6, r1
 8011822:	4617      	mov	r7, r2
 8011824:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8011826:	280d      	cmp	r0, #13
 8011828:	bfa8      	it	ge
 801182a:	200d      	movge	r0, #13
 801182c:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801182e:	4d0f      	ldr	r5, [pc, #60]	; (801186c <RegionUS915ComputeRxWindowParameters+0x50>)
 8011830:	4629      	mov	r1, r5
 8011832:	f7fe fea9 	bl	8010588 <RegionCommonGetBandwidth>
 8011836:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8011838:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801183c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011840:	4a0b      	ldr	r2, [pc, #44]	; (8011870 <RegionUS915ComputeRxWindowParameters+0x54>)
 8011842:	5cd0      	ldrb	r0, [r2, r3]
 8011844:	f7fe fd6e 	bl	8010324 <RegionCommonComputeSymbolTimeLoRa>
 8011848:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801184a:	4b0a      	ldr	r3, [pc, #40]	; (8011874 <RegionUS915ComputeRxWindowParameters+0x58>)
 801184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801184e:	4798      	blx	r3
 8011850:	4603      	mov	r3, r0
 8011852:	f104 020c 	add.w	r2, r4, #12
 8011856:	9201      	str	r2, [sp, #4]
 8011858:	3408      	adds	r4, #8
 801185a:	9400      	str	r4, [sp, #0]
 801185c:	463a      	mov	r2, r7
 801185e:	4631      	mov	r1, r6
 8011860:	4628      	mov	r0, r5
 8011862:	f7fe fd6d 	bl	8010340 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8011866:	b003      	add	sp, #12
 8011868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801186a:	bf00      	nop
 801186c:	08016080 	.word	0x08016080
 8011870:	080160d4 	.word	0x080160d4
 8011874:	08016690 	.word	0x08016690

08011878 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801187c:	b08b      	sub	sp, #44	; 0x2c
 801187e:	4604      	mov	r4, r0
 8011880:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8011882:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8011886:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011888:	4b22      	ldr	r3, [pc, #136]	; (8011914 <RegionUS915RxConfig+0x9c>)
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	4798      	blx	r3
 801188e:	2800      	cmp	r0, #0
 8011890:	d13d      	bne.n	801190e <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011892:	7ce3      	ldrb	r3, [r4, #19]
 8011894:	b933      	cbnz	r3, 80118a4 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8011896:	7823      	ldrb	r3, [r4, #0]
 8011898:	f003 0307 	and.w	r3, r3, #7
 801189c:	4a1e      	ldr	r2, [pc, #120]	; (8011918 <RegionUS915RxConfig+0xa0>)
 801189e:	4f1f      	ldr	r7, [pc, #124]	; (801191c <RegionUS915RxConfig+0xa4>)
 80118a0:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80118a4:	4b1e      	ldr	r3, [pc, #120]	; (8011920 <RegionUS915RxConfig+0xa8>)
 80118a6:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 80118aa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8011914 <RegionUS915RxConfig+0x9c>
 80118ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118b2:	4638      	mov	r0, r7
 80118b4:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80118b6:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80118ba:	7ca3      	ldrb	r3, [r4, #18]
 80118bc:	9309      	str	r3, [sp, #36]	; 0x24
 80118be:	2001      	movs	r0, #1
 80118c0:	9008      	str	r0, [sp, #32]
 80118c2:	2200      	movs	r2, #0
 80118c4:	9207      	str	r2, [sp, #28]
 80118c6:	9206      	str	r2, [sp, #24]
 80118c8:	9205      	str	r2, [sp, #20]
 80118ca:	9204      	str	r2, [sp, #16]
 80118cc:	9203      	str	r2, [sp, #12]
 80118ce:	8923      	ldrh	r3, [r4, #8]
 80118d0:	9302      	str	r3, [sp, #8]
 80118d2:	2308      	movs	r3, #8
 80118d4:	9301      	str	r3, [sp, #4]
 80118d6:	9200      	str	r2, [sp, #0]
 80118d8:	4603      	mov	r3, r0
 80118da:	464a      	mov	r2, r9
 80118dc:	78a1      	ldrb	r1, [r4, #2]
 80118de:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 80118e0:	7c63      	ldrb	r3, [r4, #17]
 80118e2:	b18b      	cbz	r3, 8011908 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80118e4:	4b0f      	ldr	r3, [pc, #60]	; (8011924 <RegionUS915RxConfig+0xac>)
 80118e6:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80118e8:	4b0a      	ldr	r3, [pc, #40]	; (8011914 <RegionUS915RxConfig+0x9c>)
 80118ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ec:	310d      	adds	r1, #13
 80118ee:	b2c9      	uxtb	r1, r1
 80118f0:	2001      	movs	r0, #1
 80118f2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80118f4:	4632      	mov	r2, r6
 80118f6:	4639      	mov	r1, r7
 80118f8:	7ce0      	ldrb	r0, [r4, #19]
 80118fa:	f7fe fe57 	bl	80105ac <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80118fe:	702e      	strb	r6, [r5, #0]
    return true;
 8011900:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8011902:	b00b      	add	sp, #44	; 0x2c
 8011904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8011908:	4b07      	ldr	r3, [pc, #28]	; (8011928 <RegionUS915RxConfig+0xb0>)
 801190a:	5d99      	ldrb	r1, [r3, r6]
 801190c:	e7ec      	b.n	80118e8 <RegionUS915RxConfig+0x70>
        return false;
 801190e:	2000      	movs	r0, #0
 8011910:	e7f7      	b.n	8011902 <RegionUS915RxConfig+0x8a>
 8011912:	bf00      	nop
 8011914:	08016690 	.word	0x08016690
 8011918:	000927c0 	.word	0x000927c0
 801191c:	370870a0 	.word	0x370870a0
 8011920:	080160d4 	.word	0x080160d4
 8011924:	080160e4 	.word	0x080160e4
 8011928:	080160f4 	.word	0x080160f4

0801192c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	b08d      	sub	sp, #52	; 0x34
 8011932:	4604      	mov	r4, r0
 8011934:	468b      	mov	fp, r1
 8011936:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8011938:	f990 2001 	ldrsb.w	r2, [r0, #1]
 801193c:	4b32      	ldr	r3, [pc, #200]	; (8011a08 <RegionUS915TxConfig+0xdc>)
 801193e:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8011942:	4b32      	ldr	r3, [pc, #200]	; (8011a0c <RegionUS915TxConfig+0xe0>)
 8011944:	6818      	ldr	r0, [r3, #0]
 8011946:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011a10 <RegionUS915TxConfig+0xe4>
 801194a:	f8d9 3000 	ldr.w	r3, [r9]
 801194e:	7821      	ldrb	r1, [r4, #0]
 8011950:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011954:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011958:	7a49      	ldrb	r1, [r1, #9]
 801195a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801195e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011962:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8011966:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801196a:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801196e:	f7ff fce3 	bl	8011338 <LimitTxPower>
 8011972:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8011974:	4927      	ldr	r1, [pc, #156]	; (8011a14 <RegionUS915TxConfig+0xe8>)
 8011976:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801197a:	f7fe fe05 	bl	8010588 <RegionCommonGetBandwidth>
 801197e:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8011980:	2200      	movs	r2, #0
 8011982:	4925      	ldr	r1, [pc, #148]	; (8011a18 <RegionUS915TxConfig+0xec>)
 8011984:	4630      	mov	r0, r6
 8011986:	f7fe fd17 	bl	80103b8 <RegionCommonComputeTxPower>
 801198a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801198c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011a1c <RegionUS915TxConfig+0xf0>
 8011990:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011994:	f8d9 1000 	ldr.w	r1, [r9]
 8011998:	7823      	ldrb	r3, [r4, #0]
 801199a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801199e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80119a2:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80119a4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80119a8:	9308      	str	r3, [sp, #32]
 80119aa:	2200      	movs	r2, #0
 80119ac:	9207      	str	r2, [sp, #28]
 80119ae:	9206      	str	r2, [sp, #24]
 80119b0:	9205      	str	r2, [sp, #20]
 80119b2:	2501      	movs	r5, #1
 80119b4:	9504      	str	r5, [sp, #16]
 80119b6:	9203      	str	r2, [sp, #12]
 80119b8:	2308      	movs	r3, #8
 80119ba:	9302      	str	r3, [sp, #8]
 80119bc:	9501      	str	r5, [sp, #4]
 80119be:	f8cd a000 	str.w	sl, [sp]
 80119c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119c6:	4628      	mov	r0, r5
 80119c8:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80119cc:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80119ce:	f8d9 2000 	ldr.w	r2, [r9]
 80119d2:	7823      	ldrb	r3, [r4, #0]
 80119d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80119d8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80119dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80119e0:	f7fe fe06 	bl	80105f0 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80119e4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80119e8:	7b21      	ldrb	r1, [r4, #12]
 80119ea:	4628      	mov	r0, r5
 80119ec:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80119ee:	89a1      	ldrh	r1, [r4, #12]
 80119f0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80119f4:	f7ff fc82 	bl	80112fc <GetTimeOnAir>
 80119f8:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80119fa:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80119fe:	4628      	mov	r0, r5
 8011a00:	b00d      	add	sp, #52	; 0x34
 8011a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a06:	bf00      	nop
 8011a08:	080160d4 	.word	0x080160d4
 8011a0c:	20003a60 	.word	0x20003a60
 8011a10:	20003a64 	.word	0x20003a64
 8011a14:	08016080 	.word	0x08016080
 8011a18:	41f00000 	.word	0x41f00000
 8011a1c:	08016690 	.word	0x08016690

08011a20 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a24:	b091      	sub	sp, #68	; 0x44
 8011a26:	4605      	mov	r5, r0
 8011a28:	4688      	mov	r8, r1
 8011a2a:	4617      	mov	r7, r2
 8011a2c:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011a2e:	2400      	movs	r4, #0
 8011a30:	940e      	str	r4, [sp, #56]	; 0x38
 8011a32:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8011a36:	940b      	str	r4, [sp, #44]	; 0x2c
 8011a38:	940c      	str	r4, [sp, #48]	; 0x30
 8011a3a:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011a3c:	4ba1      	ldr	r3, [pc, #644]	; (8011cc4 <RegionUS915LinkAdrReq+0x2a4>)
 8011a3e:	6819      	ldr	r1, [r3, #0]
 8011a40:	2206      	movs	r2, #6
 8011a42:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8011a46:	a80b      	add	r0, sp, #44	; 0x2c
 8011a48:	f7fe fb45 	bl	80100d6 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011a4c:	e00d      	b.n	8011a6a <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8011a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a52:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8011a56:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8011a5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8011a5e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011a62:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011a66:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011a6a:	7a2b      	ldrb	r3, [r5, #8]
 8011a6c:	42a3      	cmp	r3, r4
 8011a6e:	f240 808b 	bls.w	8011b88 <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011a72:	6868      	ldr	r0, [r5, #4]
 8011a74:	a90e      	add	r1, sp, #56	; 0x38
 8011a76:	4420      	add	r0, r4
 8011a78:	f7fe fbde 	bl	8010238 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	f000 8082 	beq.w	8011b88 <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8011a84:	4423      	add	r3, r4
 8011a86:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8011a88:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8011a8c:	f1bc 0f06 	cmp.w	ip, #6
 8011a90:	d0dd      	beq.n	8011a4e <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8011a92:	f1bc 0f07 	cmp.w	ip, #7
 8011a96:	d00a      	beq.n	8011aae <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8011a98:	f1bc 0f05 	cmp.w	ip, #5
 8011a9c:	d071      	beq.n	8011b82 <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011a9e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011aa2:	aa10      	add	r2, sp, #64	; 0x40
 8011aa4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8011aa8:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8011aac:	e7dd      	b.n	8011a6a <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8011ab4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8011ab8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8011abc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011ac0:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011ac4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011ac8:	e7cf      	b.n	8011a6a <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011aca:	aa10      	add	r2, sp, #64	; 0x40
 8011acc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011ad0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011ad4:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8011ad8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011adc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011ae0:	ea4c 0202 	orr.w	r2, ip, r2
 8011ae4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011ae8:	3101      	adds	r1, #1
 8011aea:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8011aec:	3301      	adds	r3, #1
 8011aee:	b2db      	uxtb	r3, r3
 8011af0:	2b07      	cmp	r3, #7
 8011af2:	d8ba      	bhi.n	8011a6a <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011af4:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011af8:	f04f 0c01 	mov.w	ip, #1
 8011afc:	fa0c fc03 	lsl.w	ip, ip, r3
 8011b00:	ea12 0f0c 	tst.w	r2, ip
 8011b04:	d012      	beq.n	8011b2c <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 8011b06:	f013 0f01 	tst.w	r3, #1
 8011b0a:	d1de      	bne.n	8011aca <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011b0c:	aa10      	add	r2, sp, #64	; 0x40
 8011b0e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011b12:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011b16:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8011b1a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011b1e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b22:	ea4c 0202 	orr.w	r2, ip, r2
 8011b26:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011b2a:	e7df      	b.n	8011aec <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 8011b2c:	f013 0f01 	tst.w	r3, #1
 8011b30:	d113      	bne.n	8011b5a <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8011b32:	aa10      	add	r2, sp, #64	; 0x40
 8011b34:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011b38:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011b3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011b40:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011b44:	ea6f 0c0c 	mvn.w	ip, ip
 8011b48:	fa0f fc8c 	sxth.w	ip, ip
 8011b4c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b50:	ea0c 0c02 	and.w	ip, ip, r2
 8011b54:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 8011b58:	e7c8      	b.n	8011aec <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8011b5a:	aa10      	add	r2, sp, #64	; 0x40
 8011b5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8011b60:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8011b64:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011b68:	ea6f 0c0c 	mvn.w	ip, ip
 8011b6c:	fa0f fc8c 	sxth.w	ip, ip
 8011b70:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011b74:	ea0c 0c02 	and.w	ip, ip, r2
 8011b78:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011b7c:	3101      	adds	r1, #1
 8011b7e:	b2c9      	uxtb	r1, r1
 8011b80:	e7b4      	b.n	8011aec <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 8011b82:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 8011b84:	4619      	mov	r1, r3
 8011b86:	e7b3      	b.n	8011af0 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011b88:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011b8c:	2b03      	cmp	r3, #3
 8011b8e:	dd58      	ble.n	8011c42 <RegionUS915LinkAdrReq+0x222>
 8011b90:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011b94:	2302      	movs	r3, #2
 8011b96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011b9a:	7a6b      	ldrb	r3, [r5, #9]
 8011b9c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8011ba0:	a809      	add	r0, sp, #36	; 0x24
 8011ba2:	f7ff fbe5 	bl	8011370 <RegionUS915GetPhyParam>
 8011ba6:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8011ba8:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011bac:	7aab      	ldrb	r3, [r5, #10]
 8011bae:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011bb2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011bb6:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011bba:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011bbe:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011bc2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011bc6:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011bca:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011bce:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011bd2:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8011bd6:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011bda:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011bde:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8011be2:	2348      	movs	r3, #72	; 0x48
 8011be4:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011be8:	ab0b      	add	r3, sp, #44	; 0x2c
 8011bea:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011bec:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8011bf0:	2304      	movs	r3, #4
 8011bf2:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011bf6:	4b33      	ldr	r3, [pc, #204]	; (8011cc4 <RegionUS915LinkAdrReq+0x2a4>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8011bfc:	230e      	movs	r3, #14
 8011bfe:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8011c02:	2300      	movs	r3, #0
 8011c04:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011c0c:	ab0e      	add	r3, sp, #56	; 0x38
 8011c0e:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011c12:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8011c16:	4668      	mov	r0, sp
 8011c18:	f7fe fb2c 	bl	8010274 <RegionCommonLinkAdrReqVerifyParams>
 8011c1c:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011c1e:	2807      	cmp	r0, #7
 8011c20:	d01c      	beq.n	8011c5c <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011c22:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011c26:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 8011c2a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011c2e:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011c30:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011c34:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 8011c36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c38:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	b011      	add	sp, #68	; 0x44
 8011c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011c42:	2204      	movs	r2, #4
 8011c44:	2100      	movs	r1, #0
 8011c46:	a80b      	add	r0, sp, #44	; 0x2c
 8011c48:	f7fe fa2f 	bl	80100aa <RegionCommonCountChannels>
 8011c4c:	2801      	cmp	r0, #1
 8011c4e:	d902      	bls.n	8011c56 <RegionUS915LinkAdrReq+0x236>
 8011c50:	f04f 0907 	mov.w	r9, #7
 8011c54:	e79e      	b.n	8011b94 <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 8011c56:	f04f 0906 	mov.w	r9, #6
 8011c5a:	e79b      	b.n	8011b94 <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8011c5c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8011cc4 <RegionUS915LinkAdrReq+0x2a4>
 8011c60:	f8d9 0000 	ldr.w	r0, [r9]
 8011c64:	2206      	movs	r2, #6
 8011c66:	a90b      	add	r1, sp, #44	; 0x2c
 8011c68:	f500 6090 	add.w	r0, r0, #1152	; 0x480
 8011c6c:	f7fe fa33 	bl	80100d6 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8011c70:	4b15      	ldr	r3, [pc, #84]	; (8011cc8 <RegionUS915LinkAdrReq+0x2a8>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f8d9 2000 	ldr.w	r2, [r9]
 8011c78:	f8b2 1480 	ldrh.w	r1, [r2, #1152]	; 0x480
 8011c7c:	f8b3 0090 	ldrh.w	r0, [r3, #144]	; 0x90
 8011c80:	4001      	ands	r1, r0
 8011c82:	f8a3 1090 	strh.w	r1, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8011c86:	f8b2 1482 	ldrh.w	r1, [r2, #1154]	; 0x482
 8011c8a:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
 8011c8e:	4001      	ands	r1, r0
 8011c90:	f8a3 1092 	strh.w	r1, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8011c94:	f8b2 1484 	ldrh.w	r1, [r2, #1156]	; 0x484
 8011c98:	f8b3 0094 	ldrh.w	r0, [r3, #148]	; 0x94
 8011c9c:	4001      	ands	r1, r0
 8011c9e:	f8a3 1094 	strh.w	r1, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8011ca2:	f8b2 1486 	ldrh.w	r1, [r2, #1158]	; 0x486
 8011ca6:	f8b3 0096 	ldrh.w	r0, [r3, #150]	; 0x96
 8011caa:	4001      	ands	r1, r0
 8011cac:	f8a3 1096 	strh.w	r1, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011cb0:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	; 0x488
 8011cb4:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8011cb8:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	; 0x48a
 8011cbc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8011cc0:	e7af      	b.n	8011c22 <RegionUS915LinkAdrReq+0x202>
 8011cc2:	bf00      	nop
 8011cc4:	20003a64 	.word	0x20003a64
 8011cc8:	20003a60 	.word	0x20003a60

08011ccc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011ccc:	b538      	push	{r3, r4, r5, lr}
 8011cce:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011cd0:	6840      	ldr	r0, [r0, #4]
 8011cd2:	f7ff fae3 	bl	801129c <VerifyRfFreq>
 8011cd6:	b310      	cbz	r0, 8011d1e <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8011cd8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8011cda:	220d      	movs	r2, #13
 8011cdc:	2108      	movs	r1, #8
 8011cde:	f994 0000 	ldrsb.w	r0, [r4]
 8011ce2:	f7fe f984 	bl	800ffee <RegionCommonValueInRange>
 8011ce6:	b908      	cbnz	r0, 8011cec <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8011ce8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011cec:	2207      	movs	r2, #7
 8011cee:	2105      	movs	r1, #5
 8011cf0:	f994 0000 	ldrsb.w	r0, [r4]
 8011cf4:	f7fe f97b 	bl	800ffee <RegionCommonValueInRange>
 8011cf8:	2801      	cmp	r0, #1
 8011cfa:	d003      	beq.n	8011d04 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011cfc:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011d00:	2b0d      	cmp	r3, #13
 8011d02:	dd01      	ble.n	8011d08 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8011d04:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8011d08:	2203      	movs	r2, #3
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011d10:	f7fe f96d 	bl	800ffee <RegionCommonValueInRange>
 8011d14:	b908      	cbnz	r0, 8011d1a <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011d16:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 8011d1a:	4628      	mov	r0, r5
 8011d1c:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011d1e:	2506      	movs	r5, #6
 8011d20:	e7db      	b.n	8011cda <RegionUS915RxParamSetupReq+0xe>

08011d22 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d26:	4770      	bx	lr

08011d28 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d2c:	4770      	bx	lr

08011d2e <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d32:	4770      	bx	lr

08011d34 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8011d34:	b9b1      	cbnz	r1, 8011d64 <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8011d36:	4b10      	ldr	r3, [pc, #64]	; (8011d78 <RegionUS915AlternateDr+0x44>)
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 8011d3e:	3301      	adds	r3, #1
 8011d40:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8011d44:	4b0c      	ldr	r3, [pc, #48]	; (8011d78 <RegionUS915AlternateDr+0x44>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 8011d4c:	4b0b      	ldr	r3, [pc, #44]	; (8011d7c <RegionUS915AlternateDr+0x48>)
 8011d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8011d52:	085b      	lsrs	r3, r3, #1
 8011d54:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011d58:	1ad2      	subs	r2, r2, r3
 8011d5a:	f012 0fff 	tst.w	r2, #255	; 0xff
 8011d5e:	d009      	beq.n	8011d74 <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8011d60:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8011d62:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8011d64:	4b04      	ldr	r3, [pc, #16]	; (8011d78 <RegionUS915AlternateDr+0x44>)
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
 8011d72:	e7e7      	b.n	8011d44 <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 8011d74:	2004      	movs	r0, #4
 8011d76:	4770      	bx	lr
 8011d78:	20003a60 	.word	0x20003a60
 8011d7c:	38e38e39 	.word	0x38e38e39

08011d80 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d84:	b0a4      	sub	sp, #144	; 0x90
 8011d86:	4604      	mov	r4, r0
 8011d88:	460e      	mov	r6, r1
 8011d8a:	4690      	mov	r8, r2
 8011d8c:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8011d8e:	2500      	movs	r5, #0
 8011d90:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8011d94:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8011d98:	9511      	str	r5, [sp, #68]	; 0x44
 8011d9a:	2244      	movs	r2, #68	; 0x44
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	a812      	add	r0, sp, #72	; 0x48
 8011da0:	f003 fbd8 	bl	8015554 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011da4:	4b4e      	ldr	r3, [pc, #312]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011da6:	6818      	ldr	r0, [r3, #0]
 8011da8:	2204      	movs	r2, #4
 8011daa:	4629      	mov	r1, r5
 8011dac:	3090      	adds	r0, #144	; 0x90
 8011dae:	f7fe f97c 	bl	80100aa <RegionCommonCountChannels>
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d054      	beq.n	8011e60 <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8011db6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011dba:	2b03      	cmp	r3, #3
 8011dbc:	dd0a      	ble.n	8011dd4 <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011dbe:	4b48      	ldr	r3, [pc, #288]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8011dc6:	b92a      	cbnz	r2, 8011dd4 <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011dc8:	4a46      	ldr	r2, [pc, #280]	; (8011ee4 <RegionUS915NextChannel+0x164>)
 8011dca:	6812      	ldr	r2, [r2, #0]
 8011dcc:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	; 0x488
 8011dd0:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011dd4:	7a63      	ldrb	r3, [r4, #9]
 8011dd6:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011dda:	7a23      	ldrb	r3, [r4, #8]
 8011ddc:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8011de0:	4b3f      	ldr	r3, [pc, #252]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8011de8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011dea:	4a3e      	ldr	r2, [pc, #248]	; (8011ee4 <RegionUS915NextChannel+0x164>)
 8011dec:	6812      	ldr	r2, [r2, #0]
 8011dee:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011df0:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8011df2:	2348      	movs	r3, #72	; 0x48
 8011df4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011e00:	6863      	ldr	r3, [r4, #4]
 8011e02:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8011e04:	7aa3      	ldrb	r3, [r4, #10]
 8011e06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011e10:	ab0c      	add	r3, sp, #48	; 0x30
 8011e12:	f104 020c 	add.w	r2, r4, #12
 8011e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e1a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011e1e:	7d23      	ldrb	r3, [r4, #20]
 8011e20:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8011e24:	8ae1      	ldrh	r1, [r4, #22]
 8011e26:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011e2a:	f7ff fa67 	bl	80112fc <GetTimeOnAir>
 8011e2e:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011e30:	ab03      	add	r3, sp, #12
 8011e32:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011e34:	f8cd 8004 	str.w	r8, [sp, #4]
 8011e38:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8011e3c:	9300      	str	r3, [sp, #0]
 8011e3e:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8011e42:	aa11      	add	r2, sp, #68	; 0x44
 8011e44:	4639      	mov	r1, r7
 8011e46:	a809      	add	r0, sp, #36	; 0x24
 8011e48:	f7fe fb31 	bl	80104ae <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d141      	bne.n	8011ed6 <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 8011e52:	7a63      	ldrb	r3, [r4, #9]
 8011e54:	b99b      	cbnz	r3, 8011e7e <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8011e56:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011e5a:	b1eb      	cbz	r3, 8011e98 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	e029      	b.n	8011eb4 <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8011e60:	4d1f      	ldr	r5, [pc, #124]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011e62:	6828      	ldr	r0, [r5, #0]
 8011e64:	4b1f      	ldr	r3, [pc, #124]	; (8011ee4 <RegionUS915NextChannel+0x164>)
 8011e66:	6819      	ldr	r1, [r3, #0]
 8011e68:	2204      	movs	r2, #4
 8011e6a:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8011e6e:	3090      	adds	r0, #144	; 0x90
 8011e70:	f7fe f931 	bl	80100d6 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8011e7c:	e79b      	b.n	8011db6 <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011e7e:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 8011e82:	3901      	subs	r1, #1
 8011e84:	f000 ffa2 	bl	8012dcc <randr>
 8011e88:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8011e8c:	eb0d 0003 	add.w	r0, sp, r3
 8011e90:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8011e94:	7033      	strb	r3, [r6, #0]
 8011e96:	e017      	b.n	8011ec8 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8011e98:	4b11      	ldr	r3, [pc, #68]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011e9a:	6818      	ldr	r0, [r3, #0]
 8011e9c:	4632      	mov	r2, r6
 8011e9e:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 8011ea2:	3090      	adds	r0, #144	; 0x90
 8011ea4:	f7fd ff86 	bl	800fdb4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8011ea8:	2803      	cmp	r0, #3
 8011eaa:	d10d      	bne.n	8011ec8 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011eac:	4605      	mov	r5, r0
 8011eae:	e012      	b.n	8011ed6 <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8011eb4:	4a0a      	ldr	r2, [pc, #40]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011eb6:	6812      	ldr	r2, [r2, #0]
 8011eb8:	f892 0098 	ldrb.w	r0, [r2, #152]	; 0x98
 8011ebc:	4118      	asrs	r0, r3
 8011ebe:	f010 0f01 	tst.w	r0, #1
 8011ec2:	d0f5      	beq.n	8011eb0 <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 8011ec4:	3340      	adds	r3, #64	; 0x40
 8011ec6:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8011ec8:	4b05      	ldr	r3, [pc, #20]	; (8011ee0 <RegionUS915NextChannel+0x160>)
 8011eca:	6818      	ldr	r0, [r3, #0]
 8011ecc:	2248      	movs	r2, #72	; 0x48
 8011ece:	7831      	ldrb	r1, [r6, #0]
 8011ed0:	3090      	adds	r0, #144	; 0x90
 8011ed2:	f7fe f8ce 	bl	8010072 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	b024      	add	sp, #144	; 0x90
 8011eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ede:	bf00      	nop
 8011ee0:	20003a60 	.word	0x20003a60
 8011ee4:	20003a64 	.word	0x20003a64

08011ee8 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8011eec:	4b14      	ldr	r3, [pc, #80]	; (8011f40 <RegionUS915SetContinuousWave+0x58>)
 8011eee:	6819      	ldr	r1, [r3, #0]
 8011ef0:	4d14      	ldr	r5, [pc, #80]	; (8011f44 <RegionUS915SetContinuousWave+0x5c>)
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	7802      	ldrb	r2, [r0, #0]
 8011ef6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011efa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011efe:	7a52      	ldrb	r2, [r2, #9]
 8011f00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011f04:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011f08:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8011f0c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8011f10:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8011f14:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011f18:	f7ff fa0e 	bl	8011338 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8011f1c:	682a      	ldr	r2, [r5, #0]
 8011f1e:	7823      	ldrb	r3, [r4, #0]
 8011f20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011f24:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8011f28:	2200      	movs	r2, #0
 8011f2a:	4907      	ldr	r1, [pc, #28]	; (8011f48 <RegionUS915SetContinuousWave+0x60>)
 8011f2c:	f7fe fa44 	bl	80103b8 <RegionCommonComputeTxPower>
 8011f30:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011f32:	4b06      	ldr	r3, [pc, #24]	; (8011f4c <RegionUS915SetContinuousWave+0x64>)
 8011f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f36:	89a2      	ldrh	r2, [r4, #12]
 8011f38:	4628      	mov	r0, r5
 8011f3a:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8011f3c:	bd38      	pop	{r3, r4, r5, pc}
 8011f3e:	bf00      	nop
 8011f40:	20003a60 	.word	0x20003a60
 8011f44:	20003a64 	.word	0x20003a64
 8011f48:	41f00000 	.word	0x41f00000
 8011f4c:	08016690 	.word	0x08016690

08011f50 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8011f50:	4b04      	ldr	r3, [pc, #16]	; (8011f64 <RegionUS915ApplyDrOffset+0x14>)
 8011f52:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011f56:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	db01      	blt.n	8011f60 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8011f5c:	b2c0      	uxtb	r0, r0
 8011f5e:	4770      	bx	lr
        datarate = DR_0;
 8011f60:	2000      	movs	r0, #0
 8011f62:	e7fb      	b.n	8011f5c <RegionUS915ApplyDrOffset+0xc>
 8011f64:	080160c0 	.word	0x080160c0

08011f68 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8011f6c:	2210      	movs	r2, #16
 8011f6e:	2100      	movs	r1, #0
 8011f70:	30f1      	adds	r0, #241	; 0xf1
 8011f72:	f000 ff50 	bl	8012e16 <memset1>
    ctx->M_n = 0;
 8011f76:	2100      	movs	r1, #0
 8011f78:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8011f7c:	22f0      	movs	r2, #240	; 0xf0
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f000 ff49 	bl	8012e16 <memset1>
}
 8011f84:	bd10      	pop	{r4, pc}

08011f86 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8011f86:	b508      	push	{r3, lr}
 8011f88:	4602      	mov	r2, r0
 8011f8a:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8011f8c:	2110      	movs	r1, #16
 8011f8e:	f000 fb3b 	bl	8012608 <lorawan_aes_set_key>
}
 8011f92:	bd08      	pop	{r3, pc}

08011f94 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8011f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f98:	b084      	sub	sp, #16
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	460d      	mov	r5, r1
 8011f9e:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8011fa0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d054      	beq.n	8012052 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8011fa8:	f1c3 0810 	rsb	r8, r3, #16
 8011fac:	4647      	mov	r7, r8
 8011fae:	4590      	cmp	r8, r2
 8011fb0:	bf28      	it	cs
 8011fb2:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8011fb4:	f200 1001 	addw	r0, r0, #257	; 0x101
 8011fb8:	b2ba      	uxth	r2, r7
 8011fba:	4418      	add	r0, r3
 8011fbc:	f000 ff13 	bl	8012de6 <memcpy1>
        ctx->M_n += mlen;
 8011fc0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8011fc4:	443b      	add	r3, r7
 8011fc6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8011fca:	2b0f      	cmp	r3, #15
 8011fcc:	d94d      	bls.n	801206a <AES_CMAC_Update+0xd6>
 8011fce:	45b0      	cmp	r8, r6
 8011fd0:	d24b      	bcs.n	801206a <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e008      	b.n	8011fe8 <AES_CMAC_Update+0x54>
 8011fd6:	18e2      	adds	r2, r4, r3
 8011fd8:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8011fdc:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8011fe0:	4041      	eors	r1, r0
 8011fe2:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	2b0f      	cmp	r3, #15
 8011fea:	ddf4      	ble.n	8011fd6 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011fec:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8011ff0:	2210      	movs	r2, #16
 8011ff2:	4641      	mov	r1, r8
 8011ff4:	4668      	mov	r0, sp
 8011ff6:	f000 fef6 	bl	8012de6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8011ffa:	4622      	mov	r2, r4
 8011ffc:	4669      	mov	r1, sp
 8011ffe:	4668      	mov	r0, sp
 8012000:	f000 fb86 	bl	8012710 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8012004:	2210      	movs	r2, #16
 8012006:	4669      	mov	r1, sp
 8012008:	4640      	mov	r0, r8
 801200a:	f000 feec 	bl	8012de6 <memcpy1>

        data += mlen;
 801200e:	443d      	add	r5, r7
        len -= mlen;
 8012010:	1bf6      	subs	r6, r6, r7
 8012012:	e01e      	b.n	8012052 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8012014:	eb04 0e03 	add.w	lr, r4, r3
 8012018:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 801201c:	5cea      	ldrb	r2, [r5, r3]
 801201e:	ea8c 0c02 	eor.w	ip, ip, r2
 8012022:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8012026:	3301      	adds	r3, #1
 8012028:	2b0f      	cmp	r3, #15
 801202a:	ddf3      	ble.n	8012014 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801202c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8012030:	2210      	movs	r2, #16
 8012032:	4639      	mov	r1, r7
 8012034:	4668      	mov	r0, sp
 8012036:	f000 fed6 	bl	8012de6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801203a:	4622      	mov	r2, r4
 801203c:	4669      	mov	r1, sp
 801203e:	4668      	mov	r0, sp
 8012040:	f000 fb66 	bl	8012710 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8012044:	2210      	movs	r2, #16
 8012046:	4669      	mov	r1, sp
 8012048:	4638      	mov	r0, r7
 801204a:	f000 fecc 	bl	8012de6 <memcpy1>

        data += 16;
 801204e:	3510      	adds	r5, #16
        len -= 16;
 8012050:	3e10      	subs	r6, #16
    while( len > 16 )
 8012052:	2e10      	cmp	r6, #16
 8012054:	d901      	bls.n	801205a <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8012056:	2300      	movs	r3, #0
 8012058:	e7e6      	b.n	8012028 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801205a:	b2b2      	uxth	r2, r6
 801205c:	4629      	mov	r1, r5
 801205e:	f204 1001 	addw	r0, r4, #257	; 0x101
 8012062:	f000 fec0 	bl	8012de6 <memcpy1>
    ctx->M_n = len;
 8012066:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 801206a:	b004      	add	sp, #16
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012070 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8012070:	b530      	push	{r4, r5, lr}
 8012072:	b089      	sub	sp, #36	; 0x24
 8012074:	4605      	mov	r5, r0
 8012076:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8012078:	2210      	movs	r2, #16
 801207a:	2100      	movs	r1, #0
 801207c:	eb0d 0002 	add.w	r0, sp, r2
 8012080:	f000 fec9 	bl	8012e16 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8012084:	4622      	mov	r2, r4
 8012086:	a904      	add	r1, sp, #16
 8012088:	4608      	mov	r0, r1
 801208a:	f000 fb41 	bl	8012710 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801208e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012092:	2b00      	cmp	r3, #0
 8012094:	db01      	blt.n	801209a <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8012096:	2300      	movs	r3, #0
 8012098:	e030      	b.n	80120fc <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 801209a:	2300      	movs	r3, #0
 801209c:	2b0e      	cmp	r3, #14
 801209e:	dc11      	bgt.n	80120c4 <AES_CMAC_Final+0x54>
 80120a0:	f103 0220 	add.w	r2, r3, #32
 80120a4:	eb0d 0102 	add.w	r1, sp, r2
 80120a8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80120ac:	3301      	adds	r3, #1
 80120ae:	f103 0220 	add.w	r2, r3, #32
 80120b2:	446a      	add	r2, sp
 80120b4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80120b8:	09d2      	lsrs	r2, r2, #7
 80120ba:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80120be:	f801 2c10 	strb.w	r2, [r1, #-16]
 80120c2:	e7eb      	b.n	801209c <AES_CMAC_Final+0x2c>
 80120c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80120c8:	005b      	lsls	r3, r3, #1
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80120d0:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80120d4:	f88d 301f 	strb.w	r3, [sp, #31]
 80120d8:	e017      	b.n	801210a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80120da:	f103 0220 	add.w	r2, r3, #32
 80120de:	eb0d 0102 	add.w	r1, sp, r2
 80120e2:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80120e6:	3301      	adds	r3, #1
 80120e8:	f103 0220 	add.w	r2, r3, #32
 80120ec:	446a      	add	r2, sp
 80120ee:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80120f2:	09d2      	lsrs	r2, r2, #7
 80120f4:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80120f8:	f801 2c10 	strb.w	r2, [r1, #-16]
 80120fc:	2b0e      	cmp	r3, #14
 80120fe:	ddec      	ble.n	80120da <AES_CMAC_Final+0x6a>
 8012100:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801210a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801210e:	2810      	cmp	r0, #16
 8012110:	d014      	beq.n	801213c <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8012112:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	db30      	blt.n	801217c <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801211a:	2300      	movs	r3, #0
 801211c:	e041      	b.n	80121a2 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801211e:	18e1      	adds	r1, r4, r3
 8012120:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8012124:	f103 0020 	add.w	r0, r3, #32
 8012128:	4468      	add	r0, sp
 801212a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801212e:	4042      	eors	r2, r0
 8012130:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8012134:	3301      	adds	r3, #1
 8012136:	2b0f      	cmp	r3, #15
 8012138:	ddf1      	ble.n	801211e <AES_CMAC_Final+0xae>
 801213a:	e059      	b.n	80121f0 <AES_CMAC_Final+0x180>
 801213c:	2300      	movs	r3, #0
 801213e:	e7fa      	b.n	8012136 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8012140:	f103 0220 	add.w	r2, r3, #32
 8012144:	eb0d 0102 	add.w	r1, sp, r2
 8012148:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 801214c:	3301      	adds	r3, #1
 801214e:	f103 0220 	add.w	r2, r3, #32
 8012152:	446a      	add	r2, sp
 8012154:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012158:	09d2      	lsrs	r2, r2, #7
 801215a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801215e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012162:	2b0e      	cmp	r3, #14
 8012164:	ddec      	ble.n	8012140 <AES_CMAC_Final+0xd0>
 8012166:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	b2db      	uxtb	r3, r3
 801216e:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8012172:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8012176:	f88d 301f 	strb.w	r3, [sp, #31]
 801217a:	e019      	b.n	80121b0 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 801217c:	2300      	movs	r3, #0
 801217e:	e7f0      	b.n	8012162 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8012180:	f103 0220 	add.w	r2, r3, #32
 8012184:	eb0d 0102 	add.w	r1, sp, r2
 8012188:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 801218c:	3301      	adds	r3, #1
 801218e:	f103 0220 	add.w	r2, r3, #32
 8012192:	446a      	add	r2, sp
 8012194:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012198:	09d2      	lsrs	r2, r2, #7
 801219a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801219e:	f801 2c10 	strb.w	r2, [r1, #-16]
 80121a2:	2b0e      	cmp	r3, #14
 80121a4:	ddec      	ble.n	8012180 <AES_CMAC_Final+0x110>
 80121a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80121b0:	4420      	add	r0, r4
 80121b2:	2380      	movs	r3, #128	; 0x80
 80121b4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80121b8:	e003      	b.n	80121c2 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80121ba:	4423      	add	r3, r4
 80121bc:	2200      	movs	r2, #0
 80121be:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80121c2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80121c6:	3301      	adds	r3, #1
 80121c8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80121cc:	2b0f      	cmp	r3, #15
 80121ce:	d9f4      	bls.n	80121ba <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80121d0:	2300      	movs	r3, #0
 80121d2:	e00b      	b.n	80121ec <AES_CMAC_Final+0x17c>
 80121d4:	18e1      	adds	r1, r4, r3
 80121d6:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80121da:	f103 0020 	add.w	r0, r3, #32
 80121de:	4468      	add	r0, sp
 80121e0:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80121e4:	4042      	eors	r2, r0
 80121e6:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80121ea:	3301      	adds	r3, #1
 80121ec:	2b0f      	cmp	r3, #15
 80121ee:	ddf1      	ble.n	80121d4 <AES_CMAC_Final+0x164>
 80121f0:	2300      	movs	r3, #0
 80121f2:	e009      	b.n	8012208 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 80121f4:	18e2      	adds	r2, r4, r3
 80121f6:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 80121fa:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 80121fe:	ea8c 0c01 	eor.w	ip, ip, r1
 8012202:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8012206:	3301      	adds	r3, #1
 8012208:	2b0f      	cmp	r3, #15
 801220a:	ddf3      	ble.n	80121f4 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801220c:	2210      	movs	r2, #16
 801220e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8012212:	4668      	mov	r0, sp
 8012214:	f000 fde7 	bl	8012de6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8012218:	4622      	mov	r2, r4
 801221a:	4629      	mov	r1, r5
 801221c:	4668      	mov	r0, sp
 801221e:	f000 fa77 	bl	8012710 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8012222:	2210      	movs	r2, #16
 8012224:	2100      	movs	r1, #0
 8012226:	eb0d 0002 	add.w	r0, sp, r2
 801222a:	f000 fdf4 	bl	8012e16 <memset1>
}
 801222e:	b009      	add	sp, #36	; 0x24
 8012230:	bd30      	pop	{r4, r5, pc}

08012232 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8012232:	780b      	ldrb	r3, [r1, #0]
 8012234:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8012236:	784b      	ldrb	r3, [r1, #1]
 8012238:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801223a:	788b      	ldrb	r3, [r1, #2]
 801223c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 801223e:	78cb      	ldrb	r3, [r1, #3]
 8012240:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8012242:	790b      	ldrb	r3, [r1, #4]
 8012244:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8012246:	794b      	ldrb	r3, [r1, #5]
 8012248:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801224a:	798b      	ldrb	r3, [r1, #6]
 801224c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801224e:	79cb      	ldrb	r3, [r1, #7]
 8012250:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8012252:	7a0b      	ldrb	r3, [r1, #8]
 8012254:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8012256:	7a4b      	ldrb	r3, [r1, #9]
 8012258:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801225a:	7a8b      	ldrb	r3, [r1, #10]
 801225c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801225e:	7acb      	ldrb	r3, [r1, #11]
 8012260:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8012262:	7b0b      	ldrb	r3, [r1, #12]
 8012264:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8012266:	7b4b      	ldrb	r3, [r1, #13]
 8012268:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801226a:	7b8b      	ldrb	r3, [r1, #14]
 801226c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801226e:	7bcb      	ldrb	r3, [r1, #15]
 8012270:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012272:	4770      	bx	lr

08012274 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8012274:	e004      	b.n	8012280 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8012276:	f811 2b01 	ldrb.w	r2, [r1], #1
 801227a:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 801227e:	461a      	mov	r2, r3
 8012280:	1e53      	subs	r3, r2, #1
 8012282:	b2db      	uxtb	r3, r3
 8012284:	2a00      	cmp	r2, #0
 8012286:	d1f6      	bne.n	8012276 <copy_block_nn+0x2>
}
 8012288:	4770      	bx	lr

0801228a <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 801228a:	780b      	ldrb	r3, [r1, #0]
 801228c:	7802      	ldrb	r2, [r0, #0]
 801228e:	4053      	eors	r3, r2
 8012290:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8012292:	784b      	ldrb	r3, [r1, #1]
 8012294:	7842      	ldrb	r2, [r0, #1]
 8012296:	4053      	eors	r3, r2
 8012298:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 801229a:	788b      	ldrb	r3, [r1, #2]
 801229c:	7882      	ldrb	r2, [r0, #2]
 801229e:	4053      	eors	r3, r2
 80122a0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80122a2:	78cb      	ldrb	r3, [r1, #3]
 80122a4:	78c2      	ldrb	r2, [r0, #3]
 80122a6:	4053      	eors	r3, r2
 80122a8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80122aa:	790b      	ldrb	r3, [r1, #4]
 80122ac:	7902      	ldrb	r2, [r0, #4]
 80122ae:	4053      	eors	r3, r2
 80122b0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80122b2:	794b      	ldrb	r3, [r1, #5]
 80122b4:	7942      	ldrb	r2, [r0, #5]
 80122b6:	4053      	eors	r3, r2
 80122b8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80122ba:	798b      	ldrb	r3, [r1, #6]
 80122bc:	7982      	ldrb	r2, [r0, #6]
 80122be:	4053      	eors	r3, r2
 80122c0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80122c2:	79cb      	ldrb	r3, [r1, #7]
 80122c4:	79c2      	ldrb	r2, [r0, #7]
 80122c6:	4053      	eors	r3, r2
 80122c8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80122ca:	7a0b      	ldrb	r3, [r1, #8]
 80122cc:	7a02      	ldrb	r2, [r0, #8]
 80122ce:	4053      	eors	r3, r2
 80122d0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80122d2:	7a4b      	ldrb	r3, [r1, #9]
 80122d4:	7a42      	ldrb	r2, [r0, #9]
 80122d6:	4053      	eors	r3, r2
 80122d8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80122da:	7a8b      	ldrb	r3, [r1, #10]
 80122dc:	7a82      	ldrb	r2, [r0, #10]
 80122de:	4053      	eors	r3, r2
 80122e0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80122e2:	7acb      	ldrb	r3, [r1, #11]
 80122e4:	7ac2      	ldrb	r2, [r0, #11]
 80122e6:	4053      	eors	r3, r2
 80122e8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80122ea:	7b0b      	ldrb	r3, [r1, #12]
 80122ec:	7b02      	ldrb	r2, [r0, #12]
 80122ee:	4053      	eors	r3, r2
 80122f0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80122f2:	7b4b      	ldrb	r3, [r1, #13]
 80122f4:	7b42      	ldrb	r2, [r0, #13]
 80122f6:	4053      	eors	r3, r2
 80122f8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80122fa:	7b8b      	ldrb	r3, [r1, #14]
 80122fc:	7b82      	ldrb	r2, [r0, #14]
 80122fe:	4053      	eors	r3, r2
 8012300:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8012302:	7bcb      	ldrb	r3, [r1, #15]
 8012304:	7bc2      	ldrb	r2, [r0, #15]
 8012306:	4053      	eors	r3, r2
 8012308:	73c3      	strb	r3, [r0, #15]
#endif
}
 801230a:	4770      	bx	lr

0801230c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 801230c:	780b      	ldrb	r3, [r1, #0]
 801230e:	f892 c000 	ldrb.w	ip, [r2]
 8012312:	ea83 030c 	eor.w	r3, r3, ip
 8012316:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8012318:	784b      	ldrb	r3, [r1, #1]
 801231a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801231e:	ea83 030c 	eor.w	r3, r3, ip
 8012322:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8012324:	788b      	ldrb	r3, [r1, #2]
 8012326:	f892 c002 	ldrb.w	ip, [r2, #2]
 801232a:	ea83 030c 	eor.w	r3, r3, ip
 801232e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8012330:	78cb      	ldrb	r3, [r1, #3]
 8012332:	f892 c003 	ldrb.w	ip, [r2, #3]
 8012336:	ea83 030c 	eor.w	r3, r3, ip
 801233a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 801233c:	790b      	ldrb	r3, [r1, #4]
 801233e:	f892 c004 	ldrb.w	ip, [r2, #4]
 8012342:	ea83 030c 	eor.w	r3, r3, ip
 8012346:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8012348:	794b      	ldrb	r3, [r1, #5]
 801234a:	f892 c005 	ldrb.w	ip, [r2, #5]
 801234e:	ea83 030c 	eor.w	r3, r3, ip
 8012352:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8012354:	798b      	ldrb	r3, [r1, #6]
 8012356:	f892 c006 	ldrb.w	ip, [r2, #6]
 801235a:	ea83 030c 	eor.w	r3, r3, ip
 801235e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8012360:	79cb      	ldrb	r3, [r1, #7]
 8012362:	f892 c007 	ldrb.w	ip, [r2, #7]
 8012366:	ea83 030c 	eor.w	r3, r3, ip
 801236a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801236c:	7a0b      	ldrb	r3, [r1, #8]
 801236e:	f892 c008 	ldrb.w	ip, [r2, #8]
 8012372:	ea83 030c 	eor.w	r3, r3, ip
 8012376:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8012378:	7a4b      	ldrb	r3, [r1, #9]
 801237a:	f892 c009 	ldrb.w	ip, [r2, #9]
 801237e:	ea83 030c 	eor.w	r3, r3, ip
 8012382:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8012384:	7a8b      	ldrb	r3, [r1, #10]
 8012386:	f892 c00a 	ldrb.w	ip, [r2, #10]
 801238a:	ea83 030c 	eor.w	r3, r3, ip
 801238e:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012390:	7acb      	ldrb	r3, [r1, #11]
 8012392:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8012396:	ea83 030c 	eor.w	r3, r3, ip
 801239a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 801239c:	7b0b      	ldrb	r3, [r1, #12]
 801239e:	f892 c00c 	ldrb.w	ip, [r2, #12]
 80123a2:	ea83 030c 	eor.w	r3, r3, ip
 80123a6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80123a8:	7b4b      	ldrb	r3, [r1, #13]
 80123aa:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80123ae:	ea83 030c 	eor.w	r3, r3, ip
 80123b2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80123b4:	7b8b      	ldrb	r3, [r1, #14]
 80123b6:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80123ba:	ea83 030c 	eor.w	r3, r3, ip
 80123be:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80123c0:	7bcb      	ldrb	r3, [r1, #15]
 80123c2:	7bd2      	ldrb	r2, [r2, #15]
 80123c4:	4053      	eors	r3, r2
 80123c6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80123c8:	4770      	bx	lr

080123ca <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80123ca:	b508      	push	{r3, lr}
    xor_block(d, k);
 80123cc:	f7ff ff5d 	bl	801228a <xor_block>
}
 80123d0:	bd08      	pop	{r3, pc}
	...

080123d4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80123d4:	7802      	ldrb	r2, [r0, #0]
 80123d6:	4b18      	ldr	r3, [pc, #96]	; (8012438 <shift_sub_rows+0x64>)
 80123d8:	5c9a      	ldrb	r2, [r3, r2]
 80123da:	7002      	strb	r2, [r0, #0]
 80123dc:	7902      	ldrb	r2, [r0, #4]
 80123de:	5c9a      	ldrb	r2, [r3, r2]
 80123e0:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80123e2:	7a02      	ldrb	r2, [r0, #8]
 80123e4:	5c9a      	ldrb	r2, [r3, r2]
 80123e6:	7202      	strb	r2, [r0, #8]
 80123e8:	7b02      	ldrb	r2, [r0, #12]
 80123ea:	5c9a      	ldrb	r2, [r3, r2]
 80123ec:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80123ee:	7842      	ldrb	r2, [r0, #1]
 80123f0:	7941      	ldrb	r1, [r0, #5]
 80123f2:	5c59      	ldrb	r1, [r3, r1]
 80123f4:	7041      	strb	r1, [r0, #1]
 80123f6:	7a41      	ldrb	r1, [r0, #9]
 80123f8:	5c59      	ldrb	r1, [r3, r1]
 80123fa:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80123fc:	7b41      	ldrb	r1, [r0, #13]
 80123fe:	5c59      	ldrb	r1, [r3, r1]
 8012400:	7241      	strb	r1, [r0, #9]
 8012402:	5c9a      	ldrb	r2, [r3, r2]
 8012404:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8012406:	7882      	ldrb	r2, [r0, #2]
 8012408:	7a81      	ldrb	r1, [r0, #10]
 801240a:	5c59      	ldrb	r1, [r3, r1]
 801240c:	7081      	strb	r1, [r0, #2]
 801240e:	5c9a      	ldrb	r2, [r3, r2]
 8012410:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8012412:	7982      	ldrb	r2, [r0, #6]
 8012414:	7b81      	ldrb	r1, [r0, #14]
 8012416:	5c59      	ldrb	r1, [r3, r1]
 8012418:	7181      	strb	r1, [r0, #6]
 801241a:	5c9a      	ldrb	r2, [r3, r2]
 801241c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 801241e:	7bc2      	ldrb	r2, [r0, #15]
 8012420:	7ac1      	ldrb	r1, [r0, #11]
 8012422:	5c59      	ldrb	r1, [r3, r1]
 8012424:	73c1      	strb	r1, [r0, #15]
 8012426:	79c1      	ldrb	r1, [r0, #7]
 8012428:	5c59      	ldrb	r1, [r3, r1]
 801242a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 801242c:	78c1      	ldrb	r1, [r0, #3]
 801242e:	5c59      	ldrb	r1, [r3, r1]
 8012430:	71c1      	strb	r1, [r0, #7]
 8012432:	5c9b      	ldrb	r3, [r3, r2]
 8012434:	70c3      	strb	r3, [r0, #3]
}
 8012436:	4770      	bx	lr
 8012438:	08016304 	.word	0x08016304

0801243c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 801243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012440:	b084      	sub	sp, #16
 8012442:	4604      	mov	r4, r0
    block_copy(st, dt);
 8012444:	4601      	mov	r1, r0
 8012446:	4668      	mov	r0, sp
 8012448:	f7ff fef3 	bl	8012232 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 801244c:	f89d c000 	ldrb.w	ip, [sp]
 8012450:	4b6a      	ldr	r3, [pc, #424]	; (80125fc <mix_sub_columns+0x1c0>)
 8012452:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012456:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801245a:	4a69      	ldr	r2, [pc, #420]	; (8012600 <mix_sub_columns+0x1c4>)
 801245c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012460:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8012464:	4967      	ldr	r1, [pc, #412]	; (8012604 <mix_sub_columns+0x1c8>)
 8012466:	f811 500e 	ldrb.w	r5, [r1, lr]
 801246a:	f89d 700f 	ldrb.w	r7, [sp, #15]
 801246e:	5dce      	ldrb	r6, [r1, r7]
 8012470:	ea80 0009 	eor.w	r0, r0, r9
 8012474:	4068      	eors	r0, r5
 8012476:	4070      	eors	r0, r6
 8012478:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 801247a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801247e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012482:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012486:	ea80 0a0a 	eor.w	sl, r0, sl
 801248a:	ea89 090a 	eor.w	r9, r9, sl
 801248e:	ea86 0609 	eor.w	r6, r6, r9
 8012492:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8012494:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012498:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801249c:	5dd6      	ldrb	r6, [r2, r7]
 801249e:	ea80 0008 	eor.w	r0, r0, r8
 80124a2:	ea8e 0000 	eor.w	r0, lr, r0
 80124a6:	4070      	eors	r0, r6
 80124a8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80124aa:	f812 600c 	ldrb.w	r6, [r2, ip]
 80124ae:	5dd8      	ldrb	r0, [r3, r7]
 80124b0:	ea86 0608 	eor.w	r6, r6, r8
 80124b4:	4075      	eors	r5, r6
 80124b6:	4068      	eors	r0, r5
 80124b8:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80124ba:	f89d c004 	ldrb.w	ip, [sp, #4]
 80124be:	f813 000c 	ldrb.w	r0, [r3, ip]
 80124c2:	f89d 8009 	ldrb.w	r8, [sp, #9]
 80124c6:	f812 9008 	ldrb.w	r9, [r2, r8]
 80124ca:	f89d e00e 	ldrb.w	lr, [sp, #14]
 80124ce:	f811 500e 	ldrb.w	r5, [r1, lr]
 80124d2:	f89d 7003 	ldrb.w	r7, [sp, #3]
 80124d6:	5dce      	ldrb	r6, [r1, r7]
 80124d8:	ea80 0009 	eor.w	r0, r0, r9
 80124dc:	4068      	eors	r0, r5
 80124de:	4070      	eors	r0, r6
 80124e0:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80124e2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80124e6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80124ea:	f812 900e 	ldrb.w	r9, [r2, lr]
 80124ee:	ea80 0a0a 	eor.w	sl, r0, sl
 80124f2:	ea89 090a 	eor.w	r9, r9, sl
 80124f6:	ea86 0609 	eor.w	r6, r6, r9
 80124fa:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80124fc:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012500:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012504:	5dd6      	ldrb	r6, [r2, r7]
 8012506:	ea80 0008 	eor.w	r0, r0, r8
 801250a:	ea8e 0000 	eor.w	r0, lr, r0
 801250e:	4070      	eors	r0, r6
 8012510:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8012512:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012516:	5dd8      	ldrb	r0, [r3, r7]
 8012518:	ea86 0608 	eor.w	r6, r6, r8
 801251c:	4075      	eors	r5, r6
 801251e:	4068      	eors	r0, r5
 8012520:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8012522:	f89d c008 	ldrb.w	ip, [sp, #8]
 8012526:	f813 000c 	ldrb.w	r0, [r3, ip]
 801252a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 801252e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012532:	f89d e002 	ldrb.w	lr, [sp, #2]
 8012536:	f811 500e 	ldrb.w	r5, [r1, lr]
 801253a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801253e:	5dce      	ldrb	r6, [r1, r7]
 8012540:	ea80 0009 	eor.w	r0, r0, r9
 8012544:	4068      	eors	r0, r5
 8012546:	4070      	eors	r0, r6
 8012548:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 801254a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801254e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012552:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012556:	ea80 0a0a 	eor.w	sl, r0, sl
 801255a:	ea89 090a 	eor.w	r9, r9, sl
 801255e:	ea86 0609 	eor.w	r6, r6, r9
 8012562:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8012564:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012568:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801256c:	5dd6      	ldrb	r6, [r2, r7]
 801256e:	ea80 0008 	eor.w	r0, r0, r8
 8012572:	ea8e 0000 	eor.w	r0, lr, r0
 8012576:	4070      	eors	r0, r6
 8012578:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 801257a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801257e:	5dd8      	ldrb	r0, [r3, r7]
 8012580:	ea86 0608 	eor.w	r6, r6, r8
 8012584:	4075      	eors	r5, r6
 8012586:	4068      	eors	r0, r5
 8012588:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 801258a:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801258e:	5d98      	ldrb	r0, [r3, r6]
 8012590:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8012594:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012598:	f89d 7006 	ldrb.w	r7, [sp, #6]
 801259c:	f811 c007 	ldrb.w	ip, [r1, r7]
 80125a0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 80125a4:	f811 e005 	ldrb.w	lr, [r1, r5]
 80125a8:	ea80 0009 	eor.w	r0, r0, r9
 80125ac:	ea8c 0000 	eor.w	r0, ip, r0
 80125b0:	ea8e 0000 	eor.w	r0, lr, r0
 80125b4:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80125b6:	5d88      	ldrb	r0, [r1, r6]
 80125b8:	f813 a008 	ldrb.w	sl, [r3, r8]
 80125bc:	f812 9007 	ldrb.w	r9, [r2, r7]
 80125c0:	ea80 0a0a 	eor.w	sl, r0, sl
 80125c4:	ea89 090a 	eor.w	r9, r9, sl
 80125c8:	ea8e 0e09 	eor.w	lr, lr, r9
 80125cc:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80125d0:	f811 1008 	ldrb.w	r1, [r1, r8]
 80125d4:	f813 e007 	ldrb.w	lr, [r3, r7]
 80125d8:	5d57      	ldrb	r7, [r2, r5]
 80125da:	4048      	eors	r0, r1
 80125dc:	ea8e 0000 	eor.w	r0, lr, r0
 80125e0:	4078      	eors	r0, r7
 80125e2:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80125e4:	5d92      	ldrb	r2, [r2, r6]
 80125e6:	5d5b      	ldrb	r3, [r3, r5]
 80125e8:	4051      	eors	r1, r2
 80125ea:	ea8c 0c01 	eor.w	ip, ip, r1
 80125ee:	ea83 030c 	eor.w	r3, r3, ip
 80125f2:	73e3      	strb	r3, [r4, #15]
  }
 80125f4:	b004      	add	sp, #16
 80125f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125fa:	bf00      	nop
 80125fc:	08016104 	.word	0x08016104
 8012600:	08016204 	.word	0x08016204
 8012604:	08016304 	.word	0x08016304

08012608 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8012608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801260c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 801260e:	f1a1 0310 	sub.w	r3, r1, #16
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b10      	cmp	r3, #16
 8012616:	d806      	bhi.n	8012626 <lorawan_aes_set_key+0x1e>
 8012618:	460d      	mov	r5, r1
 801261a:	4a3b      	ldr	r2, [pc, #236]	; (8012708 <lorawan_aes_set_key+0x100>)
 801261c:	fa22 f303 	lsr.w	r3, r2, r3
 8012620:	f013 0f01 	tst.w	r3, #1
 8012624:	d105      	bne.n	8012632 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8012626:	2300      	movs	r3, #0
 8012628:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 801262c:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 801262e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8012632:	460a      	mov	r2, r1
 8012634:	4601      	mov	r1, r0
 8012636:	4620      	mov	r0, r4
 8012638:	f7ff fe1c 	bl	8012274 <copy_block_nn>
    hi = (keylen + 28) << 2;
 801263c:	f105 031c 	add.w	r3, r5, #28
 8012640:	b2db      	uxtb	r3, r3
 8012642:	009b      	lsls	r3, r3, #2
 8012644:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8012648:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801264c:	3b01      	subs	r3, #1
 801264e:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8012652:	462b      	mov	r3, r5
 8012654:	f04f 0c01 	mov.w	ip, #1
 8012658:	e023      	b.n	80126a2 <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 801265a:	2d18      	cmp	r5, #24
 801265c:	d901      	bls.n	8012662 <lorawan_aes_set_key+0x5a>
 801265e:	2a10      	cmp	r2, #16
 8012660:	d048      	beq.n	80126f4 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8012662:	1b5a      	subs	r2, r3, r5
 8012664:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8012666:	f814 9002 	ldrb.w	r9, [r4, r2]
 801266a:	ea89 0808 	eor.w	r8, r9, r8
 801266e:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8012672:	f102 0801 	add.w	r8, r2, #1
 8012676:	f814 8008 	ldrb.w	r8, [r4, r8]
 801267a:	f100 0901 	add.w	r9, r0, #1
 801267e:	ea88 0707 	eor.w	r7, r8, r7
 8012682:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8012686:	1c97      	adds	r7, r2, #2
 8012688:	5de7      	ldrb	r7, [r4, r7]
 801268a:	f100 0802 	add.w	r8, r0, #2
 801268e:	407e      	eors	r6, r7
 8012690:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8012694:	3203      	adds	r2, #3
 8012696:	5ca6      	ldrb	r6, [r4, r2]
 8012698:	1cc2      	adds	r2, r0, #3
 801269a:	4071      	eors	r1, r6
 801269c:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801269e:	3304      	adds	r3, #4
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	4573      	cmp	r3, lr
 80126a4:	d22d      	bcs.n	8012702 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 80126a6:	4618      	mov	r0, r3
 80126a8:	1f1a      	subs	r2, r3, #4
 80126aa:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 80126ae:	1eda      	subs	r2, r3, #3
 80126b0:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 80126b2:	1e9a      	subs	r2, r3, #2
 80126b4:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 80126b6:	1e5a      	subs	r2, r3, #1
 80126b8:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 80126ba:	fbb3 f2f5 	udiv	r2, r3, r5
 80126be:	fb05 3212 	mls	r2, r5, r2, r3
 80126c2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80126c6:	d1c8      	bne.n	801265a <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 80126c8:	4a10      	ldr	r2, [pc, #64]	; (801270c <lorawan_aes_set_key+0x104>)
 80126ca:	f812 9007 	ldrb.w	r9, [r2, r7]
 80126ce:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 80126d2:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 80126d4:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 80126d6:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 80126da:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 80126de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80126e2:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80126e6:	b2d2      	uxtb	r2, r2
 80126e8:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 80126ec:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 80126f0:	46c8      	mov	r8, r9
 80126f2:	e7b6      	b.n	8012662 <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 80126f4:	4a05      	ldr	r2, [pc, #20]	; (801270c <lorawan_aes_set_key+0x104>)
 80126f6:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 80126fa:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 80126fc:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 80126fe:	5c51      	ldrb	r1, [r2, r1]
 8012700:	e7af      	b.n	8012662 <lorawan_aes_set_key+0x5a>
    return 0;
 8012702:	2000      	movs	r0, #0
 8012704:	e793      	b.n	801262e <lorawan_aes_set_key+0x26>
 8012706:	bf00      	nop
 8012708:	00010101 	.word	0x00010101
 801270c:	08016304 	.word	0x08016304

08012710 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8012710:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8012714:	b31b      	cbz	r3, 801275e <lorawan_aes_encrypt+0x4e>
{
 8012716:	b570      	push	{r4, r5, r6, lr}
 8012718:	b084      	sub	sp, #16
 801271a:	460e      	mov	r6, r1
 801271c:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 801271e:	4601      	mov	r1, r0
 8012720:	4668      	mov	r0, sp
 8012722:	f7ff fdf3 	bl	801230c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8012726:	2401      	movs	r4, #1
 8012728:	e009      	b.n	801273e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801272a:	4668      	mov	r0, sp
 801272c:	f7ff fe86 	bl	801243c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8012730:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8012734:	4668      	mov	r0, sp
 8012736:	f7ff fe48 	bl	80123ca <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801273a:	3401      	adds	r4, #1
 801273c:	b2e4      	uxtb	r4, r4
 801273e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8012742:	42a3      	cmp	r3, r4
 8012744:	d8f1      	bhi.n	801272a <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8012746:	4668      	mov	r0, sp
 8012748:	f7ff fe44 	bl	80123d4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801274c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8012750:	4669      	mov	r1, sp
 8012752:	4630      	mov	r0, r6
 8012754:	f7ff fdda 	bl	801230c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8012758:	2000      	movs	r0, #0
}
 801275a:	b004      	add	sp, #16
 801275c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 801275e:	20ff      	movs	r0, #255	; 0xff
}
 8012760:	4770      	bx	lr
	...

08012764 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012764:	2300      	movs	r3, #0
 8012766:	2b0a      	cmp	r3, #10
 8012768:	d817      	bhi.n	801279a <GetKeyByID+0x36>
{
 801276a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801276c:	4a0c      	ldr	r2, [pc, #48]	; (80127a0 <GetKeyByID+0x3c>)
 801276e:	6814      	ldr	r4, [r2, #0]
 8012770:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012774:	4422      	add	r2, r4
 8012776:	7e12      	ldrb	r2, [r2, #24]
 8012778:	4282      	cmp	r2, r0
 801277a:	d006      	beq.n	801278a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801277c:	3301      	adds	r3, #1
 801277e:	b2db      	uxtb	r3, r3
 8012780:	2b0a      	cmp	r3, #10
 8012782:	d9f3      	bls.n	801276c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012784:	2003      	movs	r0, #3
}
 8012786:	bc10      	pop	{r4}
 8012788:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801278a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801278e:	f10c 0c18 	add.w	ip, ip, #24
 8012792:	4464      	add	r4, ip
 8012794:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8012796:	2000      	movs	r0, #0
 8012798:	e7f5      	b.n	8012786 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801279a:	2003      	movs	r0, #3
}
 801279c:	4770      	bx	lr
 801279e:	bf00      	nop
 80127a0:	20003a68 	.word	0x20003a68

080127a4 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 80127a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a8:	b0cc      	sub	sp, #304	; 0x130
 80127aa:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80127ac:	b3a9      	cbz	r1, 801281a <ComputeCmac+0x76>
 80127ae:	4607      	mov	r7, r0
 80127b0:	4616      	mov	r6, r2
 80127b2:	461c      	mov	r4, r3
 80127b4:	4688      	mov	r8, r1
 80127b6:	b395      	cbz	r5, 801281e <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80127b8:	a802      	add	r0, sp, #8
 80127ba:	f7ff fbd5 	bl	8011f68 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80127be:	a901      	add	r1, sp, #4
 80127c0:	4620      	mov	r0, r4
 80127c2:	f7ff ffcf 	bl	8012764 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80127c6:	4604      	mov	r4, r0
 80127c8:	b118      	cbz	r0, 80127d2 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80127ca:	4620      	mov	r0, r4
 80127cc:	b04c      	add	sp, #304	; 0x130
 80127ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80127d2:	9901      	ldr	r1, [sp, #4]
 80127d4:	3101      	adds	r1, #1
 80127d6:	a802      	add	r0, sp, #8
 80127d8:	f7ff fbd5 	bl	8011f86 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80127dc:	b127      	cbz	r7, 80127e8 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 80127de:	2210      	movs	r2, #16
 80127e0:	4639      	mov	r1, r7
 80127e2:	a802      	add	r0, sp, #8
 80127e4:	f7ff fbd6 	bl	8011f94 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80127e8:	4632      	mov	r2, r6
 80127ea:	4641      	mov	r1, r8
 80127ec:	a802      	add	r0, sp, #8
 80127ee:	f7ff fbd1 	bl	8011f94 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80127f2:	a902      	add	r1, sp, #8
 80127f4:	a848      	add	r0, sp, #288	; 0x120
 80127f6:	f7ff fc3b 	bl	8012070 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 80127fa:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 80127fe:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8012802:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012806:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 801280a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801280e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8012812:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012816:	602b      	str	r3, [r5, #0]
 8012818:	e7d7      	b.n	80127ca <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801281a:	2402      	movs	r4, #2
 801281c:	e7d5      	b.n	80127ca <ComputeCmac+0x26>
 801281e:	2402      	movs	r4, #2
 8012820:	e7d3      	b.n	80127ca <ComputeCmac+0x26>
	...

08012824 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8012824:	b140      	cbz	r0, 8012838 <SecureElementInit+0x14>
{
 8012826:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8012828:	4a04      	ldr	r2, [pc, #16]	; (801283c <SecureElementInit+0x18>)
 801282a:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 801282c:	22d8      	movs	r2, #216	; 0xd8
 801282e:	4904      	ldr	r1, [pc, #16]	; (8012840 <SecureElementInit+0x1c>)
 8012830:	f000 fad9 	bl	8012de6 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8012834:	2000      	movs	r0, #0
}
 8012836:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012838:	2002      	movs	r0, #2
}
 801283a:	4770      	bx	lr
 801283c:	20003a68 	.word	0x20003a68
 8012840:	0803e500 	.word	0x0803e500

08012844 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012844:	2300      	movs	r3, #0
 8012846:	2b0a      	cmp	r3, #10
 8012848:	d817      	bhi.n	801287a <SecureElementGetKeyByID+0x36>
{
 801284a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801284c:	4a0c      	ldr	r2, [pc, #48]	; (8012880 <SecureElementGetKeyByID+0x3c>)
 801284e:	6814      	ldr	r4, [r2, #0]
 8012850:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012854:	4422      	add	r2, r4
 8012856:	7e12      	ldrb	r2, [r2, #24]
 8012858:	4282      	cmp	r2, r0
 801285a:	d006      	beq.n	801286a <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801285c:	3301      	adds	r3, #1
 801285e:	b2db      	uxtb	r3, r3
 8012860:	2b0a      	cmp	r3, #10
 8012862:	d9f3      	bls.n	801284c <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012864:	2003      	movs	r0, #3
}
 8012866:	bc10      	pop	{r4}
 8012868:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801286a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801286e:	f10c 0c18 	add.w	ip, ip, #24
 8012872:	4464      	add	r4, ip
 8012874:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8012876:	2000      	movs	r0, #0
 8012878:	e7f5      	b.n	8012866 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801287a:	2003      	movs	r0, #3
}
 801287c:	4770      	bx	lr
 801287e:	bf00      	nop
 8012880:	20003a68 	.word	0x20003a68

08012884 <PrintKey>:
{
 8012884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012888:	b099      	sub	sp, #100	; 0x64
 801288a:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 801288c:	a917      	add	r1, sp, #92	; 0x5c
 801288e:	f7ff ffd9 	bl	8012844 <SecureElementGetKeyByID>
 8012892:	4603      	mov	r3, r0
 8012894:	2800      	cmp	r0, #0
 8012896:	d042      	beq.n	801291e <PrintKey+0x9a>
}
 8012898:	b019      	add	sp, #100	; 0x64
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 801289e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80128a2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80128a6:	689b      	ldr	r3, [r3, #8]
 80128a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80128aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128ac:	785a      	ldrb	r2, [r3, #1]
 80128ae:	9214      	str	r2, [sp, #80]	; 0x50
 80128b0:	7899      	ldrb	r1, [r3, #2]
 80128b2:	9115      	str	r1, [sp, #84]	; 0x54
 80128b4:	78da      	ldrb	r2, [r3, #3]
 80128b6:	7919      	ldrb	r1, [r3, #4]
 80128b8:	7958      	ldrb	r0, [r3, #5]
 80128ba:	799c      	ldrb	r4, [r3, #6]
 80128bc:	79dd      	ldrb	r5, [r3, #7]
 80128be:	7a1e      	ldrb	r6, [r3, #8]
 80128c0:	7a5f      	ldrb	r7, [r3, #9]
 80128c2:	f893 c00a 	ldrb.w	ip, [r3, #10]
 80128c6:	f893 e00b 	ldrb.w	lr, [r3, #11]
 80128ca:	f893 800c 	ldrb.w	r8, [r3, #12]
 80128ce:	f893 900d 	ldrb.w	r9, [r3, #13]
 80128d2:	f893 a00e 	ldrb.w	sl, [r3, #14]
 80128d6:	f893 b00f 	ldrb.w	fp, [r3, #15]
 80128da:	7c1b      	ldrb	r3, [r3, #16]
 80128dc:	9310      	str	r3, [sp, #64]	; 0x40
 80128de:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80128e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80128e6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80128ea:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80128ee:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80128f2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80128f6:	9709      	str	r7, [sp, #36]	; 0x24
 80128f8:	9608      	str	r6, [sp, #32]
 80128fa:	9507      	str	r5, [sp, #28]
 80128fc:	9406      	str	r4, [sp, #24]
 80128fe:	9005      	str	r0, [sp, #20]
 8012900:	9104      	str	r1, [sp, #16]
 8012902:	9203      	str	r2, [sp, #12]
 8012904:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012906:	9102      	str	r1, [sp, #8]
 8012908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801290a:	9201      	str	r2, [sp, #4]
 801290c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	4b09      	ldr	r3, [pc, #36]	; (8012938 <PrintKey+0xb4>)
 8012912:	2200      	movs	r2, #0
 8012914:	4611      	mov	r1, r2
 8012916:	2002      	movs	r0, #2
 8012918:	f002 f942 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 801291c:	e7bc      	b.n	8012898 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801291e:	2b0a      	cmp	r3, #10
 8012920:	d8ba      	bhi.n	8012898 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8012922:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012926:	4905      	ldr	r1, [pc, #20]	; (801293c <PrintKey+0xb8>)
 8012928:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 801292c:	42a2      	cmp	r2, r4
 801292e:	d0b6      	beq.n	801289e <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012930:	3301      	adds	r3, #1
 8012932:	b2db      	uxtb	r3, r3
 8012934:	e7f3      	b.n	801291e <PrintKey+0x9a>
 8012936:	bf00      	nop
 8012938:	08016404 	.word	0x08016404
 801293c:	0801659c 	.word	0x0801659c

08012940 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8012940:	2b0b      	cmp	r3, #11
 8012942:	d80a      	bhi.n	801295a <SecureElementComputeAesCmac+0x1a>
{
 8012944:	b500      	push	{lr}
 8012946:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8012948:	f8dd c010 	ldr.w	ip, [sp, #16]
 801294c:	f8cd c000 	str.w	ip, [sp]
 8012950:	f7ff ff28 	bl	80127a4 <ComputeCmac>
}
 8012954:	b003      	add	sp, #12
 8012956:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801295a:	2003      	movs	r0, #3
}
 801295c:	4770      	bx	lr

0801295e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 801295e:	b190      	cbz	r0, 8012986 <SecureElementVerifyAesCmac+0x28>
{
 8012960:	b510      	push	{r4, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	468c      	mov	ip, r1
 8012966:	4614      	mov	r4, r2
 8012968:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 801296a:	2000      	movs	r0, #0
 801296c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801296e:	aa03      	add	r2, sp, #12
 8012970:	9200      	str	r2, [sp, #0]
 8012972:	4662      	mov	r2, ip
 8012974:	f7ff ff16 	bl	80127a4 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012978:	b918      	cbnz	r0, 8012982 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801297a:	9b03      	ldr	r3, [sp, #12]
 801297c:	42a3      	cmp	r3, r4
 801297e:	d000      	beq.n	8012982 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8012980:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8012982:	b004      	add	sp, #16
 8012984:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012986:	2002      	movs	r0, #2
}
 8012988:	4770      	bx	lr

0801298a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 801298a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801298e:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8012990:	b348      	cbz	r0, 80129e6 <SecureElementAesEncrypt+0x5c>
 8012992:	460d      	mov	r5, r1
 8012994:	4614      	mov	r4, r2
 8012996:	461e      	mov	r6, r3
 8012998:	4607      	mov	r7, r0
 801299a:	b33b      	cbz	r3, 80129ec <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 801299c:	f011 0f0f 	tst.w	r1, #15
 80129a0:	d127      	bne.n	80129f2 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80129a2:	22f0      	movs	r2, #240	; 0xf0
 80129a4:	2100      	movs	r1, #0
 80129a6:	a801      	add	r0, sp, #4
 80129a8:	f000 fa35 	bl	8012e16 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80129ac:	4669      	mov	r1, sp
 80129ae:	4620      	mov	r0, r4
 80129b0:	f7ff fed8 	bl	8012764 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80129b4:	4680      	mov	r8, r0
 80129b6:	b118      	cbz	r0, 80129c0 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80129b8:	4640      	mov	r0, r8
 80129ba:	b03e      	add	sp, #248	; 0xf8
 80129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80129c0:	aa01      	add	r2, sp, #4
 80129c2:	2110      	movs	r1, #16
 80129c4:	9800      	ldr	r0, [sp, #0]
 80129c6:	3001      	adds	r0, #1
 80129c8:	f7ff fe1e 	bl	8012608 <lorawan_aes_set_key>
        uint8_t block = 0;
 80129cc:	4644      	mov	r4, r8
        while( size != 0 )
 80129ce:	e007      	b.n	80129e0 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80129d0:	aa01      	add	r2, sp, #4
 80129d2:	1931      	adds	r1, r6, r4
 80129d4:	1938      	adds	r0, r7, r4
 80129d6:	f7ff fe9b 	bl	8012710 <lorawan_aes_encrypt>
            block = block + 16;
 80129da:	3410      	adds	r4, #16
 80129dc:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 80129de:	3d10      	subs	r5, #16
        while( size != 0 )
 80129e0:	2d00      	cmp	r5, #0
 80129e2:	d1f5      	bne.n	80129d0 <SecureElementAesEncrypt+0x46>
 80129e4:	e7e8      	b.n	80129b8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80129e6:	f04f 0802 	mov.w	r8, #2
 80129ea:	e7e5      	b.n	80129b8 <SecureElementAesEncrypt+0x2e>
 80129ec:	f04f 0802 	mov.w	r8, #2
 80129f0:	e7e2      	b.n	80129b8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80129f2:	f04f 0805 	mov.w	r8, #5
 80129f6:	e7df      	b.n	80129b8 <SecureElementAesEncrypt+0x2e>

080129f8 <SecureElementSetKey>:
{
 80129f8:	b530      	push	{r4, r5, lr}
 80129fa:	b085      	sub	sp, #20
    if( key == NULL )
 80129fc:	2900      	cmp	r1, #0
 80129fe:	d038      	beq.n	8012a72 <SecureElementSetKey+0x7a>
 8012a00:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012a02:	2300      	movs	r3, #0
 8012a04:	2b0a      	cmp	r3, #10
 8012a06:	d830      	bhi.n	8012a6a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8012a08:	4a1b      	ldr	r2, [pc, #108]	; (8012a78 <SecureElementSetKey+0x80>)
 8012a0a:	6811      	ldr	r1, [r2, #0]
 8012a0c:	461c      	mov	r4, r3
 8012a0e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012a12:	440a      	add	r2, r1
 8012a14:	7e12      	ldrb	r2, [r2, #24]
 8012a16:	4282      	cmp	r2, r0
 8012a18:	d002      	beq.n	8012a20 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	e7f1      	b.n	8012a04 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8012a20:	280d      	cmp	r0, #13
 8012a22:	d00a      	beq.n	8012a3a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8012a24:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8012a28:	3418      	adds	r4, #24
 8012a2a:	1908      	adds	r0, r1, r4
 8012a2c:	2210      	movs	r2, #16
 8012a2e:	4661      	mov	r1, ip
 8012a30:	3001      	adds	r0, #1
 8012a32:	f000 f9d8 	bl	8012de6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8012a36:	2500      	movs	r5, #0
 8012a38:	e018      	b.n	8012a6c <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	9302      	str	r3, [sp, #8]
 8012a42:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8012a44:	466b      	mov	r3, sp
 8012a46:	220c      	movs	r2, #12
 8012a48:	2110      	movs	r1, #16
 8012a4a:	4660      	mov	r0, ip
 8012a4c:	f7ff ff9d 	bl	801298a <SecureElementAesEncrypt>
 8012a50:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8012a52:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <SecureElementSetKey+0x80>)
 8012a54:	6818      	ldr	r0, [r3, #0]
 8012a56:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8012a5a:	3418      	adds	r4, #24
 8012a5c:	4420      	add	r0, r4
 8012a5e:	2210      	movs	r2, #16
 8012a60:	4669      	mov	r1, sp
 8012a62:	3001      	adds	r0, #1
 8012a64:	f000 f9bf 	bl	8012de6 <memcpy1>
                return retval;
 8012a68:	e000      	b.n	8012a6c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012a6a:	2503      	movs	r5, #3
}
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	b005      	add	sp, #20
 8012a70:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012a72:	2502      	movs	r5, #2
 8012a74:	e7fa      	b.n	8012a6c <SecureElementSetKey+0x74>
 8012a76:	bf00      	nop
 8012a78:	20003a68 	.word	0x20003a68

08012a7c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8012a7c:	b1d0      	cbz	r0, 8012ab4 <SecureElementDeriveAndStoreKey+0x38>
{
 8012a7e:	b510      	push	{r4, lr}
 8012a80:	b084      	sub	sp, #16
 8012a82:	4614      	mov	r4, r2
 8012a84:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8012a86:	2a0c      	cmp	r2, #12
 8012a88:	d101      	bne.n	8012a8e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8012a8a:	290b      	cmp	r1, #11
 8012a8c:	d114      	bne.n	8012ab8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8012a8e:	2300      	movs	r3, #0
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	9301      	str	r3, [sp, #4]
 8012a94:	9302      	str	r3, [sp, #8]
 8012a96:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8012a98:	466b      	mov	r3, sp
 8012a9a:	460a      	mov	r2, r1
 8012a9c:	2110      	movs	r1, #16
 8012a9e:	4660      	mov	r0, ip
 8012aa0:	f7ff ff73 	bl	801298a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012aa4:	b108      	cbz	r0, 8012aaa <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8012aa6:	b004      	add	sp, #16
 8012aa8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8012aaa:	4669      	mov	r1, sp
 8012aac:	4620      	mov	r0, r4
 8012aae:	f7ff ffa3 	bl	80129f8 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012ab2:	e7f8      	b.n	8012aa6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8012ab4:	2002      	movs	r0, #2
}
 8012ab6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012ab8:	2003      	movs	r0, #3
 8012aba:	e7f4      	b.n	8012aa6 <SecureElementDeriveAndStoreKey+0x2a>

08012abc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8012abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012abe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012ac2:	9c07      	ldr	r4, [sp, #28]
 8012ac4:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8012ac6:	b35b      	cbz	r3, 8012b20 <SecureElementProcessJoinAccept+0x64>
 8012ac8:	461f      	mov	r7, r3
 8012aca:	b35c      	cbz	r4, 8012b24 <SecureElementProcessJoinAccept+0x68>
 8012acc:	b366      	cbz	r6, 8012b28 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8012ace:	2d21      	cmp	r5, #33	; 0x21
 8012ad0:	d82c      	bhi.n	8012b2c <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8012ad2:	462a      	mov	r2, r5
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f000 f985 	bl	8012de6 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8012adc:	1c63      	adds	r3, r4, #1
 8012ade:	2201      	movs	r2, #1
 8012ae0:	1e69      	subs	r1, r5, #1
 8012ae2:	18b8      	adds	r0, r7, r2
 8012ae4:	f7ff ff51 	bl	801298a <SecureElementAesEncrypt>
 8012ae8:	bb10      	cbnz	r0, 8012b30 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8012aea:	7ae3      	ldrb	r3, [r4, #11]
 8012aec:	09db      	lsrs	r3, r3, #7
 8012aee:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8012af0:	1961      	adds	r1, r4, r5
 8012af2:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8012af6:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8012afa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8012afe:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8012b02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8012b06:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8012b0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8012b0e:	b98b      	cbnz	r3, 8012b34 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8012b10:	2301      	movs	r3, #1
 8012b12:	1f29      	subs	r1, r5, #4
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7ff ff22 	bl	801295e <SecureElementVerifyAesCmac>
 8012b1a:	b140      	cbz	r0, 8012b2e <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8012b1c:	2001      	movs	r0, #1
 8012b1e:	e006      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8012b20:	2002      	movs	r0, #2
 8012b22:	e004      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>
 8012b24:	2002      	movs	r0, #2
 8012b26:	e002      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>
 8012b28:	2002      	movs	r0, #2
 8012b2a:	e000      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012b2c:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8012b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8012b30:	2007      	movs	r0, #7
 8012b32:	e7fc      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8012b34:	2004      	movs	r0, #4
 8012b36:	e7fa      	b.n	8012b2e <SecureElementProcessJoinAccept+0x72>

08012b38 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 8012b38:	b138      	cbz	r0, 8012b4a <SecureElementRandomNumber+0x12>
{
 8012b3a:	b510      	push	{r4, lr}
 8012b3c:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 8012b3e:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <SecureElementRandomNumber+0x18>)
 8012b40:	695b      	ldr	r3, [r3, #20]
 8012b42:	4798      	blx	r3
 8012b44:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8012b46:	2000      	movs	r0, #0
}
 8012b48:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012b4a:	2002      	movs	r0, #2
}
 8012b4c:	4770      	bx	lr
 8012b4e:	bf00      	nop
 8012b50:	08016690 	.word	0x08016690

08012b54 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012b54:	b140      	cbz	r0, 8012b68 <SecureElementSetDevEui+0x14>
{
 8012b56:	b508      	push	{r3, lr}
 8012b58:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8012b5a:	2208      	movs	r2, #8
 8012b5c:	4b03      	ldr	r3, [pc, #12]	; (8012b6c <SecureElementSetDevEui+0x18>)
 8012b5e:	6818      	ldr	r0, [r3, #0]
 8012b60:	f000 f941 	bl	8012de6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012b64:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012b66:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012b68:	2002      	movs	r0, #2
}
 8012b6a:	4770      	bx	lr
 8012b6c:	20003a68 	.word	0x20003a68

08012b70 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012b70:	b138      	cbz	r0, 8012b82 <SecureElementGetDevEui+0x12>
{
 8012b72:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8012b74:	2208      	movs	r2, #8
 8012b76:	4904      	ldr	r1, [pc, #16]	; (8012b88 <SecureElementGetDevEui+0x18>)
 8012b78:	6809      	ldr	r1, [r1, #0]
 8012b7a:	f000 f934 	bl	8012de6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012b7e:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012b80:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012b82:	2002      	movs	r0, #2
}
 8012b84:	4770      	bx	lr
 8012b86:	bf00      	nop
 8012b88:	20003a68 	.word	0x20003a68

08012b8c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012b8c:	b148      	cbz	r0, 8012ba2 <SecureElementSetJoinEui+0x16>
{
 8012b8e:	b508      	push	{r3, lr}
 8012b90:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8012b92:	4b05      	ldr	r3, [pc, #20]	; (8012ba8 <SecureElementSetJoinEui+0x1c>)
 8012b94:	6818      	ldr	r0, [r3, #0]
 8012b96:	2208      	movs	r2, #8
 8012b98:	4410      	add	r0, r2
 8012b9a:	f000 f924 	bl	8012de6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012b9e:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012ba0:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012ba2:	2002      	movs	r0, #2
}
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	20003a68 	.word	0x20003a68

08012bac <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012bac:	b140      	cbz	r0, 8012bc0 <SecureElementGetJoinEui+0x14>
{
 8012bae:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8012bb0:	4a04      	ldr	r2, [pc, #16]	; (8012bc4 <SecureElementGetJoinEui+0x18>)
 8012bb2:	6811      	ldr	r1, [r2, #0]
 8012bb4:	2208      	movs	r2, #8
 8012bb6:	4411      	add	r1, r2
 8012bb8:	f000 f915 	bl	8012de6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012bbc:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012bbe:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012bc0:	2002      	movs	r0, #2
}
 8012bc2:	4770      	bx	lr
 8012bc4:	20003a68 	.word	0x20003a68

08012bc8 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8012bc8:	2802      	cmp	r0, #2
 8012bca:	d004      	beq.n	8012bd6 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8012bcc:	4b04      	ldr	r3, [pc, #16]	; (8012be0 <SecureElementSetDevAddr+0x18>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012bd2:	2000      	movs	r0, #0
 8012bd4:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8012bd6:	4b02      	ldr	r3, [pc, #8]	; (8012be0 <SecureElementSetDevAddr+0x18>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	6119      	str	r1, [r3, #16]
 8012bdc:	e7f9      	b.n	8012bd2 <SecureElementSetDevAddr+0xa>
 8012bde:	bf00      	nop
 8012be0:	20003a68 	.word	0x20003a68

08012be4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8012be4:	b169      	cbz	r1, 8012c02 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8012be6:	2802      	cmp	r0, #2
 8012be8:	d005      	beq.n	8012bf6 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8012bea:	4a07      	ldr	r2, [pc, #28]	; (8012c08 <SecureElementGetDevAddr+0x24>)
 8012bec:	6812      	ldr	r2, [r2, #0]
 8012bee:	6952      	ldr	r2, [r2, #20]
 8012bf0:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8012bf6:	4a04      	ldr	r2, [pc, #16]	; (8012c08 <SecureElementGetDevAddr+0x24>)
 8012bf8:	6812      	ldr	r2, [r2, #0]
 8012bfa:	6912      	ldr	r2, [r2, #16]
 8012bfc:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8012bfe:	2000      	movs	r0, #0
 8012c00:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8012c02:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	20003a68 	.word	0x20003a68

08012c0c <SecureElementInitMcuID>:
{
 8012c0c:	b530      	push	{r4, r5, lr}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	4605      	mov	r5, r0
 8012c12:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8012c18:	a802      	add	r0, sp, #8
 8012c1a:	f7ff ffa9 	bl	8012b70 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8012c1e:	a901      	add	r1, sp, #4
 8012c20:	2001      	movs	r0, #1
 8012c22:	f7ff ffdf 	bl	8012be4 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8012c26:	b195      	cbz	r5, 8012c4e <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012c28:	2300      	movs	r3, #0
 8012c2a:	2b07      	cmp	r3, #7
 8012c2c:	d808      	bhi.n	8012c40 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8012c2e:	f103 0210 	add.w	r2, r3, #16
 8012c32:	446a      	add	r2, sp
 8012c34:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8012c38:	b9aa      	cbnz	r2, 8012c66 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	e7f4      	b.n	8012c2a <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8012c40:	2300      	movs	r3, #0
        if( id_init == false )
 8012c42:	b923      	cbnz	r3, 8012c4e <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8012c44:	a802      	add	r0, sp, #8
 8012c46:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8012c48:	a802      	add	r0, sp, #8
 8012c4a:	f7ff ff83 	bl	8012b54 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8012c4e:	b13c      	cbz	r4, 8012c60 <SecureElementInitMcuID+0x54>
 8012c50:	9b01      	ldr	r3, [sp, #4]
 8012c52:	b92b      	cbnz	r3, 8012c60 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8012c54:	a801      	add	r0, sp, #4
 8012c56:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8012c58:	9901      	ldr	r1, [sp, #4]
 8012c5a:	2001      	movs	r0, #1
 8012c5c:	f7ff ffb4 	bl	8012bc8 <SecureElementSetDevAddr>
}
 8012c60:	2000      	movs	r0, #0
 8012c62:	b005      	add	sp, #20
 8012c64:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8012c66:	2301      	movs	r3, #1
 8012c68:	e7eb      	b.n	8012c42 <SecureElementInitMcuID+0x36>
	...

08012c6c <PrintIds>:
{
 8012c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c6e:	b08f      	sub	sp, #60	; 0x3c
 8012c70:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8012c72:	2400      	movs	r4, #0
 8012c74:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8012c76:	a80a      	add	r0, sp, #40	; 0x28
 8012c78:	f7ff ff7a 	bl	8012b70 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8012c7c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012c80:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8012c84:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8012c88:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012c8c:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8012c90:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8012c94:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8012c98:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8012c9c:	f8cd e01c 	str.w	lr, [sp, #28]
 8012ca0:	f8cd c018 	str.w	ip, [sp, #24]
 8012ca4:	9705      	str	r7, [sp, #20]
 8012ca6:	9604      	str	r6, [sp, #16]
 8012ca8:	9003      	str	r0, [sp, #12]
 8012caa:	9102      	str	r1, [sp, #8]
 8012cac:	9201      	str	r2, [sp, #4]
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	4b20      	ldr	r3, [pc, #128]	; (8012d34 <PrintIds+0xc8>)
 8012cb2:	4622      	mov	r2, r4
 8012cb4:	4621      	mov	r1, r4
 8012cb6:	2002      	movs	r0, #2
 8012cb8:	f001 ff72 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8012cbc:	a80c      	add	r0, sp, #48	; 0x30
 8012cbe:	f7ff ff75 	bl	8012bac <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8012cc2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8012cc6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8012cca:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8012cce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8012cd2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8012cd6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8012cda:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8012cde:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 8012ce2:	f8cd e01c 	str.w	lr, [sp, #28]
 8012ce6:	f8cd c018 	str.w	ip, [sp, #24]
 8012cea:	9705      	str	r7, [sp, #20]
 8012cec:	9604      	str	r6, [sp, #16]
 8012cee:	9003      	str	r0, [sp, #12]
 8012cf0:	9102      	str	r1, [sp, #8]
 8012cf2:	9201      	str	r2, [sp, #4]
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	4b10      	ldr	r3, [pc, #64]	; (8012d38 <PrintIds+0xcc>)
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	2002      	movs	r0, #2
 8012cfe:	f001 ff4f 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8012d02:	a909      	add	r1, sp, #36	; 0x24
 8012d04:	4628      	mov	r0, r5
 8012d06:	f7ff ff6d 	bl	8012be4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8012d0a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8012d0e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8012d12:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8012d16:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8012d1a:	9003      	str	r0, [sp, #12]
 8012d1c:	9102      	str	r1, [sp, #8]
 8012d1e:	9201      	str	r2, [sp, #4]
 8012d20:	9300      	str	r3, [sp, #0]
 8012d22:	4b06      	ldr	r3, [pc, #24]	; (8012d3c <PrintIds+0xd0>)
 8012d24:	4622      	mov	r2, r4
 8012d26:	4621      	mov	r1, r4
 8012d28:	2002      	movs	r0, #2
 8012d2a:	f001 ff39 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012d2e:	b00f      	add	sp, #60	; 0x3c
 8012d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d32:	bf00      	nop
 8012d34:	08016460 	.word	0x08016460
 8012d38:	080164a0 	.word	0x080164a0
 8012d3c:	080164e0 	.word	0x080164e0

08012d40 <SecureElementPrintKeys>:
{
 8012d40:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8012d42:	2000      	movs	r0, #0
 8012d44:	f7ff fd9e 	bl	8012884 <PrintKey>
    PrintKey( NWK_KEY );
 8012d48:	2001      	movs	r0, #1
 8012d4a:	f7ff fd9b 	bl	8012884 <PrintKey>
    PrintKey( APP_S_KEY );
 8012d4e:	2009      	movs	r0, #9
 8012d50:	f7ff fd98 	bl	8012884 <PrintKey>
    PrintKey( NWK_S_KEY );
 8012d54:	2008      	movs	r0, #8
 8012d56:	f7ff fd95 	bl	8012884 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8012d5a:	2000      	movs	r0, #0
 8012d5c:	f7ff ff86 	bl	8012c6c <PrintIds>
}
 8012d60:	2000      	movs	r0, #0
 8012d62:	bd08      	pop	{r3, pc}

08012d64 <SecureElementPrintSessionKeys>:
{
 8012d64:	b510      	push	{r4, lr}
 8012d66:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8012d68:	200b      	movs	r0, #11
 8012d6a:	f7ff fd8b 	bl	8012884 <PrintKey>
    PrintKey( MC_KE_KEY );
 8012d6e:	200c      	movs	r0, #12
 8012d70:	f7ff fd88 	bl	8012884 <PrintKey>
    PrintKey( APP_S_KEY );
 8012d74:	2009      	movs	r0, #9
 8012d76:	f7ff fd85 	bl	8012884 <PrintKey>
    PrintKey( NWK_S_KEY );
 8012d7a:	2008      	movs	r0, #8
 8012d7c:	f7ff fd82 	bl	8012884 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8012d80:	200a      	movs	r0, #10
 8012d82:	f7ff fd7f 	bl	8012884 <PrintKey>
    PrintIds( mode );
 8012d86:	4620      	mov	r0, r4
 8012d88:	f7ff ff70 	bl	8012c6c <PrintIds>
}
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	bd10      	pop	{r4, pc}

08012d90 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8012d90:	4b09      	ldr	r3, [pc, #36]	; (8012db8 <rand1+0x28>)
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	4909      	ldr	r1, [pc, #36]	; (8012dbc <rand1+0x2c>)
 8012d96:	f243 0039 	movw	r0, #12345	; 0x3039
 8012d9a:	fb01 0002 	mla	r0, r1, r2, r0
 8012d9e:	6018      	str	r0, [r3, #0]
 8012da0:	2303      	movs	r3, #3
 8012da2:	fba3 2300 	umull	r2, r3, r3, r0
 8012da6:	1ac2      	subs	r2, r0, r3
 8012da8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012dac:	0f9b      	lsrs	r3, r3, #30
 8012dae:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8012db2:	1ac0      	subs	r0, r0, r3
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	2000010c 	.word	0x2000010c
 8012dbc:	41c64e6d 	.word	0x41c64e6d

08012dc0 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8012dc0:	4b01      	ldr	r3, [pc, #4]	; (8012dc8 <srand1+0x8>)
 8012dc2:	6018      	str	r0, [r3, #0]
}
 8012dc4:	4770      	bx	lr
 8012dc6:	bf00      	nop
 8012dc8:	2000010c 	.word	0x2000010c

08012dcc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	4605      	mov	r5, r0
 8012dd0:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8012dd2:	f7ff ffdd 	bl	8012d90 <rand1>
 8012dd6:	1b61      	subs	r1, r4, r5
 8012dd8:	3101      	adds	r1, #1
 8012dda:	fb90 f3f1 	sdiv	r3, r0, r1
 8012dde:	fb01 0013 	mls	r0, r1, r3, r0
}
 8012de2:	4428      	add	r0, r5
 8012de4:	bd38      	pop	{r3, r4, r5, pc}

08012de6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8012de6:	e004      	b.n	8012df2 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8012de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dec:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8012df0:	461a      	mov	r2, r3
 8012df2:	1e53      	subs	r3, r2, #1
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	2a00      	cmp	r2, #0
 8012df8:	d1f6      	bne.n	8012de8 <memcpy1+0x2>
    }
}
 8012dfa:	4770      	bx	lr

08012dfc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8012dfc:	1e53      	subs	r3, r2, #1
 8012dfe:	4418      	add	r0, r3
    while( size-- )
 8012e00:	e004      	b.n	8012e0c <memcpyr+0x10>
    {
        *dst-- = *src++;
 8012e02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e06:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	1e53      	subs	r3, r2, #1
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	2a00      	cmp	r2, #0
 8012e12:	d1f6      	bne.n	8012e02 <memcpyr+0x6>
    }
}
 8012e14:	4770      	bx	lr

08012e16 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8012e16:	e002      	b.n	8012e1e <memset1+0x8>
    {
        *dst++ = value;
 8012e18:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	1e53      	subs	r3, r2, #1
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	2a00      	cmp	r2, #0
 8012e24:	d1f8      	bne.n	8012e18 <memset1+0x2>
    }
}
 8012e26:	4770      	bx	lr

08012e28 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8012e28:	b1f0      	cbz	r0, 8012e68 <Crc32+0x40>
{
 8012e2a:	b510      	push	{r4, lr}
 8012e2c:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8012e2e:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8012e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e36:	e00e      	b.n	8012e56 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8012e38:	f340 0c00 	sbfx	ip, r0, #0, #1
 8012e3c:	4a0b      	ldr	r2, [pc, #44]	; (8012e6c <Crc32+0x44>)
 8012e3e:	ea0c 0202 	and.w	r2, ip, r2
 8012e42:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8012e46:	3301      	adds	r3, #1
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	2b07      	cmp	r3, #7
 8012e4c:	d9f4      	bls.n	8012e38 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8012e4e:	f10e 0e01 	add.w	lr, lr, #1
 8012e52:	fa1f fe8e 	uxth.w	lr, lr
 8012e56:	458e      	cmp	lr, r1
 8012e58:	d204      	bcs.n	8012e64 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8012e5a:	f814 300e 	ldrb.w	r3, [r4, lr]
 8012e5e:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8012e60:	2300      	movs	r3, #0
 8012e62:	e7f2      	b.n	8012e4a <Crc32+0x22>
        }
    }

    return ~crc;
 8012e64:	43c0      	mvns	r0, r0
}
 8012e66:	bd10      	pop	{r4, pc}
        return 0;
 8012e68:	2000      	movs	r0, #0
}
 8012e6a:	4770      	bx	lr
 8012e6c:	edb88320 	.word	0xedb88320

08012e70 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8012e70:	2001      	movs	r0, #1
 8012e72:	4770      	bx	lr

08012e74 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8012e74:	280a      	cmp	r0, #10
 8012e76:	d807      	bhi.n	8012e88 <RadioGetLoRaBandwidthInHz+0x14>
 8012e78:	e8df f000 	tbb	[pc, r0]
 8012e7c:	17110b20 	.word	0x17110b20
 8012e80:	061e1c1a 	.word	0x061e1c1a
 8012e84:	0e08      	.short	0x0e08
 8012e86:	14          	.byte	0x14
 8012e87:	00          	.byte	0x00
 8012e88:	2000      	movs	r0, #0
 8012e8a:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8012e8c:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8012e90:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8012e92:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8012e96:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8012e98:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8012e9c:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8012e9e:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8012ea2:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8012ea4:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8012ea8:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8012eaa:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8012eae:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8012eb0:	4804      	ldr	r0, [pc, #16]	; (8012ec4 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8012eb2:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8012eb4:	4804      	ldr	r0, [pc, #16]	; (8012ec8 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8012eb6:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8012eb8:	4804      	ldr	r0, [pc, #16]	; (8012ecc <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8012eba:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8012ebc:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	0001e848 	.word	0x0001e848
 8012ec8:	0003d090 	.word	0x0003d090
 8012ecc:	0007a120 	.word	0x0007a120

08012ed0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012ed0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8012ed4:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012ed6:	b953      	cbnz	r3, 8012eee <RadioGetGfskTimeOnAirNumerator+0x1e>
 8012ed8:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8012eda:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012edc:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8012ede:	b141      	cbz	r1, 8012ef2 <RadioGetGfskTimeOnAirNumerator+0x22>
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	f89d 0000 	ldrb.w	r0, [sp]
 8012ee6:	4418      	add	r0, r3
}
 8012ee8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012eec:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012eee:	2300      	movs	r3, #0
 8012ef0:	e7f3      	b.n	8012eda <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	e7f5      	b.n	8012ee2 <RadioGetGfskTimeOnAirNumerator+0x12>

08012ef6 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012ef6:	b570      	push	{r4, r5, r6, lr}
 8012ef8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012efc:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8012f00:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8012f02:	f1a1 0c05 	sub.w	ip, r1, #5
 8012f06:	f1bc 0f01 	cmp.w	ip, #1
 8012f0a:	d931      	bls.n	8012f70 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012f0c:	b918      	cbnz	r0, 8012f16 <RadioGetLoRaTimeOnAirNumerator+0x20>
 8012f0e:	f1a1 060b 	sub.w	r6, r1, #11
 8012f12:	2e01      	cmp	r6, #1
 8012f14:	d934      	bls.n	8012f80 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8012f16:	2801      	cmp	r0, #1
 8012f18:	d02e      	beq.n	8012f78 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8012f1a:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012f1c:	f89d c014 	ldrb.w	ip, [sp, #20]
 8012f20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8012f24:	b385      	cbz	r5, 8012f88 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8012f26:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012f28:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8012f2a:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8012f2c:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8012f30:	b364      	cbz	r4, 8012f8c <RadioGetLoRaTimeOnAirNumerator+0x96>
 8012f32:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8012f36:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8012f38:	2906      	cmp	r1, #6
 8012f3a:	d904      	bls.n	8012f46 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8012f3c:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8012f40:	b10e      	cbz	r6, 8012f46 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8012f42:	1e88      	subs	r0, r1, #2
 8012f44:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8012f46:	f1bc 0f00 	cmp.w	ip, #0
 8012f4a:	db22      	blt.n	8012f92 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8012f4c:	4484      	add	ip, r0
 8012f4e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8012f52:	fb9c fcf0 	sdiv	ip, ip, r0
 8012f56:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8012f5a:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8012f5e:	2906      	cmp	r1, #6
 8012f60:	d801      	bhi.n	8012f66 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8012f62:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8012f66:	0080      	lsls	r0, r0, #2
 8012f68:	3001      	adds	r0, #1
 8012f6a:	3902      	subs	r1, #2
}
 8012f6c:	4088      	lsls	r0, r1
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8012f70:	2b0b      	cmp	r3, #11
 8012f72:	d8cb      	bhi.n	8012f0c <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8012f74:	230c      	movs	r3, #12
 8012f76:	e7c9      	b.n	8012f0c <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012f78:	290c      	cmp	r1, #12
 8012f7a:	d003      	beq.n	8012f84 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8012f7c:	2600      	movs	r6, #0
 8012f7e:	e7cd      	b.n	8012f1c <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8012f80:	2601      	movs	r6, #1
 8012f82:	e7cb      	b.n	8012f1c <RadioGetLoRaTimeOnAirNumerator+0x26>
 8012f84:	2601      	movs	r6, #1
 8012f86:	e7c9      	b.n	8012f1c <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8012f88:	2000      	movs	r0, #0
 8012f8a:	e7cd      	b.n	8012f28 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8012f8c:	f04f 0e14 	mov.w	lr, #20
 8012f90:	e7d1      	b.n	8012f36 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8012f92:	f04f 0c00 	mov.w	ip, #0
 8012f96:	e7d9      	b.n	8012f4c <RadioGetLoRaTimeOnAirNumerator+0x56>

08012f98 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8012f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	460e      	mov	r6, r1
 8012f9e:	4615      	mov	r5, r2
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012fa6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012faa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8012fae:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8012fb2:	b148      	cbz	r0, 8012fc8 <RadioTimeOnAir+0x30>
 8012fb4:	2801      	cmp	r0, #1
 8012fb6:	d012      	beq.n	8012fde <RadioTimeOnAir+0x46>
 8012fb8:	2501      	movs	r5, #1
 8012fba:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8012fbc:	442c      	add	r4, r5
 8012fbe:	1e60      	subs	r0, r4, #1
}
 8012fc0:	fbb0 f0f5 	udiv	r0, r0, r5
 8012fc4:	b005      	add	sp, #20
 8012fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8012fc8:	f8cd c004 	str.w	ip, [sp, #4]
 8012fcc:	9700      	str	r7, [sp, #0]
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f7ff ff7e 	bl	8012ed0 <RadioGetGfskTimeOnAirNumerator>
 8012fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012fd8:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8012fdc:	e7ee      	b.n	8012fbc <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8012fde:	f8cd c008 	str.w	ip, [sp, #8]
 8012fe2:	9701      	str	r7, [sp, #4]
 8012fe4:	9300      	str	r3, [sp, #0]
 8012fe6:	4613      	mov	r3, r2
 8012fe8:	460a      	mov	r2, r1
 8012fea:	4629      	mov	r1, r5
 8012fec:	4630      	mov	r0, r6
 8012fee:	f7ff ff82 	bl	8012ef6 <RadioGetLoRaTimeOnAirNumerator>
 8012ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012ff6:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8012ffa:	4b03      	ldr	r3, [pc, #12]	; (8013008 <RadioTimeOnAir+0x70>)
 8012ffc:	5d98      	ldrb	r0, [r3, r6]
 8012ffe:	f7ff ff39 	bl	8012e74 <RadioGetLoRaBandwidthInHz>
 8013002:	4605      	mov	r5, r0
        break;
 8013004:	e7da      	b.n	8012fbc <RadioTimeOnAir+0x24>
 8013006:	bf00      	nop
 8013008:	0801668c 	.word	0x0801668c

0801300c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801300c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801300e:	4b05      	ldr	r3, [pc, #20]	; (8013024 <RadioOnTxTimeoutProcess+0x18>)
 8013010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013014:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8013016:	4b04      	ldr	r3, [pc, #16]	; (8013028 <RadioOnTxTimeoutProcess+0x1c>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	b113      	cbz	r3, 8013022 <RadioOnTxTimeoutProcess+0x16>
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	b103      	cbz	r3, 8013022 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8013020:	4798      	blx	r3
    }
}
 8013022:	bd08      	pop	{r3, pc}
 8013024:	48000400 	.word	0x48000400
 8013028:	20003b6c 	.word	0x20003b6c

0801302c <RadioOnTxTimeoutIrq>:
{
 801302c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801302e:	f7ff ffed 	bl	801300c <RadioOnTxTimeoutProcess>
}
 8013032:	bd08      	pop	{r3, pc}

08013034 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8013034:	b508      	push	{r3, lr}
 8013036:	4b05      	ldr	r3, [pc, #20]	; (801304c <RadioOnRxTimeoutProcess+0x18>)
 8013038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801303c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801303e:	4b04      	ldr	r3, [pc, #16]	; (8013050 <RadioOnRxTimeoutProcess+0x1c>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	b113      	cbz	r3, 801304a <RadioOnRxTimeoutProcess+0x16>
 8013044:	68db      	ldr	r3, [r3, #12]
 8013046:	b103      	cbz	r3, 801304a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8013048:	4798      	blx	r3
    }
}
 801304a:	bd08      	pop	{r3, pc}
 801304c:	48000400 	.word	0x48000400
 8013050:	20003b6c 	.word	0x20003b6c

08013054 <RadioOnRxTimeoutIrq>:
{
 8013054:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8013056:	f7ff ffed 	bl	8013034 <RadioOnRxTimeoutProcess>
}
 801305a:	bd08      	pop	{r3, pc}

0801305c <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013060:	4770      	bx	lr

08013062 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8013062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013066:	4770      	bx	lr

08013068 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8013068:	2001      	movs	r0, #1
 801306a:	4770      	bx	lr

0801306c <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 801306c:	2001      	movs	r0, #1
 801306e:	4770      	bx	lr

08013070 <RadioWrite>:
{
 8013070:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8013072:	f000 fe37 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 8013076:	bd08      	pop	{r3, pc}

08013078 <RadioTxCw>:
{
 8013078:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801307a:	f001 fbcf 	bl	801481c <SUBGRF_SetRfTxPower>
 801307e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8013080:	210e      	movs	r1, #14
 8013082:	f640 101f 	movw	r0, #2335	; 0x91f
 8013086:	f000 fe2d 	bl	8013ce4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801308a:	2101      	movs	r1, #1
 801308c:	4620      	mov	r0, r4
 801308e:	f001 fbb1 	bl	80147f4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8013092:	f000 fff7 	bl	8014084 <SUBGRF_SetTxContinuousWave>
}
 8013096:	bd10      	pop	{r4, pc}

08013098 <RadioTxPrbs>:
{
 8013098:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801309a:	2101      	movs	r1, #1
 801309c:	4b07      	ldr	r3, [pc, #28]	; (80130bc <RadioTxPrbs+0x24>)
 801309e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80130a2:	f001 fba7 	bl	80147f4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80130a6:	212d      	movs	r1, #45	; 0x2d
 80130a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80130ac:	f7ff ffe0 	bl	8013070 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80130b0:	f000 ffef 	bl	8014092 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80130b4:	4802      	ldr	r0, [pc, #8]	; (80130c0 <RadioTxPrbs+0x28>)
 80130b6:	f000 ff25 	bl	8013f04 <SUBGRF_SetTx>
}
 80130ba:	bd08      	pop	{r3, pc}
 80130bc:	20003b88 	.word	0x20003b88
 80130c0:	000fffff 	.word	0x000fffff

080130c4 <RadioSetRxDutyCycle>:
{
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	4604      	mov	r4, r0
 80130c8:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80130ca:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80130ce:	4e09      	ldr	r6, [pc, #36]	; (80130f4 <RadioSetRxDutyCycle+0x30>)
 80130d0:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80130d2:	2300      	movs	r3, #0
 80130d4:	461a      	mov	r2, r3
 80130d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80130da:	4608      	mov	r0, r1
 80130dc:	f001 f8a5 	bl	801422a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80130e0:	2100      	movs	r1, #0
 80130e2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80130e6:	f001 fb85 	bl	80147f4 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80130ea:	4629      	mov	r1, r5
 80130ec:	4620      	mov	r0, r4
 80130ee:	f000 ff99 	bl	8014024 <SUBGRF_SetRxDutyCycle>
}
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	20003b88 	.word	0x20003b88

080130f8 <RadioRxBoosted>:
{
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80130fc:	f001 fc69 	bl	80149d2 <RFW_Is_Init>
 8013100:	2801      	cmp	r0, #1
 8013102:	d019      	beq.n	8013138 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013104:	2300      	movs	r3, #0
 8013106:	461a      	mov	r2, r3
 8013108:	f240 2162 	movw	r1, #610	; 0x262
 801310c:	4608      	mov	r0, r1
 801310e:	f001 f88c 	bl	801422a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8013112:	b9a4      	cbnz	r4, 801313e <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013114:	4c11      	ldr	r4, [pc, #68]	; (801315c <RadioRxBoosted+0x64>)
 8013116:	2100      	movs	r1, #0
 8013118:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801311a:	4b11      	ldr	r3, [pc, #68]	; (8013160 <RadioRxBoosted+0x68>)
 801311c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013120:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013122:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013126:	f001 fb65 	bl	80147f4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801312a:	7863      	ldrb	r3, [r4, #1]
 801312c:	b183      	cbz	r3, 8013150 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801312e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013132:	f000 ff59 	bl	8013fe8 <SUBGRF_SetRxBoosted>
}
 8013136:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8013138:	f001 fc53 	bl	80149e2 <RFW_ReceiveInit>
 801313c:	e7e9      	b.n	8013112 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801313e:	4d09      	ldr	r5, [pc, #36]	; (8013164 <RadioRxBoosted+0x6c>)
 8013140:	4621      	mov	r1, r4
 8013142:	4628      	mov	r0, r5
 8013144:	f002 f844 	bl	80151d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013148:	4628      	mov	r0, r5
 801314a:	f001 fffb 	bl	8015144 <UTIL_TIMER_Start>
 801314e:	e7e1      	b.n	8013114 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8013150:	4b02      	ldr	r3, [pc, #8]	; (801315c <RadioRxBoosted+0x64>)
 8013152:	6898      	ldr	r0, [r3, #8]
 8013154:	0180      	lsls	r0, r0, #6
 8013156:	f000 ff47 	bl	8013fe8 <SUBGRF_SetRxBoosted>
}
 801315a:	e7ec      	b.n	8013136 <RadioRxBoosted+0x3e>
 801315c:	20003b88 	.word	0x20003b88
 8013160:	48000400 	.word	0x48000400
 8013164:	20003b70 	.word	0x20003b70

08013168 <RadioStandby>:
{
 8013168:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 801316a:	2000      	movs	r0, #0
 801316c:	f000 feb0 	bl	8013ed0 <SUBGRF_SetStandby>
}
 8013170:	bd08      	pop	{r3, pc}

08013172 <RadioRead>:
{
 8013172:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8013174:	f000 fdc6 	bl	8013d04 <SUBGRF_ReadRegister>
}
 8013178:	bd08      	pop	{r3, pc}

0801317a <RadioGetStatus>:
{
 801317a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 801317c:	f000 fda6 	bl	8013ccc <SUBGRF_GetOperatingMode>
 8013180:	2805      	cmp	r0, #5
 8013182:	d007      	beq.n	8013194 <RadioGetStatus+0x1a>
 8013184:	2807      	cmp	r0, #7
 8013186:	d007      	beq.n	8013198 <RadioGetStatus+0x1e>
 8013188:	2804      	cmp	r0, #4
 801318a:	d001      	beq.n	8013190 <RadioGetStatus+0x16>
            return RF_IDLE;
 801318c:	2000      	movs	r0, #0
}
 801318e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8013190:	2002      	movs	r0, #2
 8013192:	e7fc      	b.n	801318e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8013194:	2001      	movs	r0, #1
 8013196:	e7fa      	b.n	801318e <RadioGetStatus+0x14>
            return RF_CAD;
 8013198:	2003      	movs	r0, #3
 801319a:	e7f8      	b.n	801318e <RadioGetStatus+0x14>

0801319c <RadioIrqProcess>:
{
 801319c:	b530      	push	{r4, r5, lr}
 801319e:	b083      	sub	sp, #12
    uint8_t size = 0;
 80131a0:	2300      	movs	r3, #0
 80131a2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80131a6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80131a8:	4ba5      	ldr	r3, [pc, #660]	; (8013440 <RadioIrqProcess+0x2a4>)
 80131aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80131ae:	2b20      	cmp	r3, #32
 80131b0:	d829      	bhi.n	8013206 <RadioIrqProcess+0x6a>
 80131b2:	b21a      	sxth	r2, r3
 80131b4:	2a00      	cmp	r2, #0
 80131b6:	f000 8140 	beq.w	801343a <RadioIrqProcess+0x29e>
 80131ba:	3b01      	subs	r3, #1
 80131bc:	2b1f      	cmp	r3, #31
 80131be:	f200 813c 	bhi.w	801343a <RadioIrqProcess+0x29e>
 80131c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80131c6:	0063      	.short	0x0063
 80131c8:	013a007f 	.word	0x013a007f
 80131cc:	013a00f7 	.word	0x013a00f7
 80131d0:	013a013a 	.word	0x013a013a
 80131d4:	013a0127 	.word	0x013a0127
 80131d8:	013a013a 	.word	0x013a013a
 80131dc:	013a013a 	.word	0x013a013a
 80131e0:	013a013a 	.word	0x013a013a
 80131e4:	013a0134 	.word	0x013a0134
 80131e8:	013a013a 	.word	0x013a013a
 80131ec:	013a013a 	.word	0x013a013a
 80131f0:	013a013a 	.word	0x013a013a
 80131f4:	013a013a 	.word	0x013a013a
 80131f8:	013a013a 	.word	0x013a013a
 80131fc:	013a013a 	.word	0x013a013a
 8013200:	013a013a 	.word	0x013a013a
 8013204:	0155      	.short	0x0155
 8013206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801320a:	f000 80b3 	beq.w	8013374 <RadioIrqProcess+0x1d8>
 801320e:	d928      	bls.n	8013262 <RadioIrqProcess+0xc6>
 8013210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013214:	f040 8111 	bne.w	801343a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8013218:	4b8a      	ldr	r3, [pc, #552]	; (8013444 <RadioIrqProcess+0x2a8>)
 801321a:	2201      	movs	r2, #1
 801321c:	2100      	movs	r1, #0
 801321e:	2002      	movs	r0, #2
 8013220:	f001 fcbe 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8013224:	f000 fd52 	bl	8013ccc <SUBGRF_GetOperatingMode>
 8013228:	2804      	cmp	r0, #4
 801322a:	f000 80b0 	beq.w	801338e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801322e:	f000 fd4d 	bl	8013ccc <SUBGRF_GetOperatingMode>
 8013232:	2805      	cmp	r0, #5
 8013234:	f040 8101 	bne.w	801343a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8013238:	4b83      	ldr	r3, [pc, #524]	; (8013448 <RadioIrqProcess+0x2ac>)
 801323a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801323e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8013240:	4882      	ldr	r0, [pc, #520]	; (801344c <RadioIrqProcess+0x2b0>)
 8013242:	f001 ff25 	bl	8015090 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8013246:	2000      	movs	r0, #0
 8013248:	f000 fe42 	bl	8013ed0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801324c:	4b80      	ldr	r3, [pc, #512]	; (8013450 <RadioIrqProcess+0x2b4>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	f000 80f2 	beq.w	801343a <RadioIrqProcess+0x29e>
 8013256:	68db      	ldr	r3, [r3, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	f000 80ee 	beq.w	801343a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801325e:	4798      	blx	r3
 8013260:	e0eb      	b.n	801343a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8013262:	2b40      	cmp	r3, #64	; 0x40
 8013264:	f000 811d 	beq.w	80134a2 <RadioIrqProcess+0x306>
 8013268:	2b80      	cmp	r3, #128	; 0x80
 801326a:	f040 80e6 	bne.w	801343a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801326e:	2000      	movs	r0, #0
 8013270:	f000 fe2e 	bl	8013ed0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8013274:	4b76      	ldr	r3, [pc, #472]	; (8013450 <RadioIrqProcess+0x2b4>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	f000 80de 	beq.w	801343a <RadioIrqProcess+0x29e>
 801327e:	699b      	ldr	r3, [r3, #24]
 8013280:	2b00      	cmp	r3, #0
 8013282:	f000 80da 	beq.w	801343a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8013286:	2000      	movs	r0, #0
 8013288:	4798      	blx	r3
 801328a:	e0d6      	b.n	801343a <RadioIrqProcess+0x29e>
 801328c:	4b6e      	ldr	r3, [pc, #440]	; (8013448 <RadioIrqProcess+0x2ac>)
 801328e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013292:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8013294:	486f      	ldr	r0, [pc, #444]	; (8013454 <RadioIrqProcess+0x2b8>)
 8013296:	f001 fefb 	bl	8015090 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801329a:	2000      	movs	r0, #0
 801329c:	f000 fe18 	bl	8013ed0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80132a0:	f001 fb99 	bl	80149d6 <RFW_Is_LongPacketModeEnabled>
 80132a4:	2801      	cmp	r0, #1
 80132a6:	d00a      	beq.n	80132be <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80132a8:	4b69      	ldr	r3, [pc, #420]	; (8013450 <RadioIrqProcess+0x2b4>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 80c4 	beq.w	801343a <RadioIrqProcess+0x29e>
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	f000 80c0 	beq.w	801343a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80132ba:	4798      	blx	r3
 80132bc:	e0bd      	b.n	801343a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80132be:	f001 fb93 	bl	80149e8 <RFW_DeInit_TxLongPacket>
 80132c2:	e7f1      	b.n	80132a8 <RadioIrqProcess+0x10c>
 80132c4:	4b60      	ldr	r3, [pc, #384]	; (8013448 <RadioIrqProcess+0x2ac>)
 80132c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80132ca:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80132cc:	485f      	ldr	r0, [pc, #380]	; (801344c <RadioIrqProcess+0x2b0>)
 80132ce:	f001 fedf 	bl	8015090 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80132d2:	4b5b      	ldr	r3, [pc, #364]	; (8013440 <RadioIrqProcess+0x2a4>)
 80132d4:	785b      	ldrb	r3, [r3, #1]
 80132d6:	b303      	cbz	r3, 801331a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80132d8:	22ff      	movs	r2, #255	; 0xff
 80132da:	f10d 0107 	add.w	r1, sp, #7
 80132de:	485e      	ldr	r0, [pc, #376]	; (8013458 <RadioIrqProcess+0x2bc>)
 80132e0:	f001 fa32 	bl	8014748 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80132e4:	485d      	ldr	r0, [pc, #372]	; (801345c <RadioIrqProcess+0x2c0>)
 80132e6:	f001 fa49 	bl	801477c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80132ea:	4b59      	ldr	r3, [pc, #356]	; (8013450 <RadioIrqProcess+0x2b4>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 80a3 	beq.w	801343a <RadioIrqProcess+0x29e>
 80132f4:	689c      	ldr	r4, [r3, #8]
 80132f6:	2c00      	cmp	r4, #0
 80132f8:	f000 809f 	beq.w	801343a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 80132fc:	4b50      	ldr	r3, [pc, #320]	; (8013440 <RadioIrqProcess+0x2a4>)
 80132fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013302:	2b01      	cmp	r3, #1
 8013304:	d11d      	bne.n	8013342 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8013306:	4a4e      	ldr	r2, [pc, #312]	; (8013440 <RadioIrqProcess+0x2a4>)
 8013308:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801330c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8013310:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013314:	4850      	ldr	r0, [pc, #320]	; (8013458 <RadioIrqProcess+0x2bc>)
 8013316:	47a0      	blx	r4
                break;
 8013318:	e08f      	b.n	801343a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801331a:	2000      	movs	r0, #0
 801331c:	f000 fdd8 	bl	8013ed0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8013320:	2100      	movs	r1, #0
 8013322:	f640 1002 	movw	r0, #2306	; 0x902
 8013326:	f000 fcdd 	bl	8013ce4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801332a:	f640 1044 	movw	r0, #2372	; 0x944
 801332e:	f000 fce9 	bl	8013d04 <SUBGRF_ReadRegister>
 8013332:	f040 0102 	orr.w	r1, r0, #2
 8013336:	b2c9      	uxtb	r1, r1
 8013338:	f640 1044 	movw	r0, #2372	; 0x944
 801333c:	f000 fcd2 	bl	8013ce4 <SUBGRF_WriteRegister>
 8013340:	e7ca      	b.n	80132d8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8013342:	4c3f      	ldr	r4, [pc, #252]	; (8013440 <RadioIrqProcess+0x2a4>)
 8013344:	4669      	mov	r1, sp
 8013346:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013348:	f001 faf8 	bl	801493c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801334c:	4b40      	ldr	r3, [pc, #256]	; (8013450 <RadioIrqProcess+0x2b4>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	689d      	ldr	r5, [r3, #8]
 8013352:	9b00      	ldr	r3, [sp, #0]
 8013354:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013358:	4a41      	ldr	r2, [pc, #260]	; (8013460 <RadioIrqProcess+0x2c4>)
 801335a:	fb82 1203 	smull	r1, r2, r2, r3
 801335e:	17db      	asrs	r3, r3, #31
 8013360:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8013364:	b25b      	sxtb	r3, r3
 8013366:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 801336a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801336e:	483a      	ldr	r0, [pc, #232]	; (8013458 <RadioIrqProcess+0x2bc>)
 8013370:	47a8      	blx	r5
                break;
 8013372:	e062      	b.n	801343a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8013374:	2000      	movs	r0, #0
 8013376:	f000 fdab 	bl	8013ed0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801337a:	4b35      	ldr	r3, [pc, #212]	; (8013450 <RadioIrqProcess+0x2b4>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d05b      	beq.n	801343a <RadioIrqProcess+0x29e>
 8013382:	699b      	ldr	r3, [r3, #24]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d058      	beq.n	801343a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8013388:	2001      	movs	r0, #1
 801338a:	4798      	blx	r3
 801338c:	e055      	b.n	801343a <RadioIrqProcess+0x29e>
 801338e:	4b2e      	ldr	r3, [pc, #184]	; (8013448 <RadioIrqProcess+0x2ac>)
 8013390:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013394:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8013396:	482f      	ldr	r0, [pc, #188]	; (8013454 <RadioIrqProcess+0x2b8>)
 8013398:	f001 fe7a 	bl	8015090 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801339c:	2000      	movs	r0, #0
 801339e:	f000 fd97 	bl	8013ed0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80133a2:	4b2b      	ldr	r3, [pc, #172]	; (8013450 <RadioIrqProcess+0x2b4>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d047      	beq.n	801343a <RadioIrqProcess+0x29e>
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d044      	beq.n	801343a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80133b0:	4798      	blx	r3
 80133b2:	e042      	b.n	801343a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80133b4:	4b2b      	ldr	r3, [pc, #172]	; (8013464 <RadioIrqProcess+0x2c8>)
 80133b6:	2201      	movs	r2, #1
 80133b8:	2100      	movs	r1, #0
 80133ba:	2002      	movs	r0, #2
 80133bc:	f001 fbf0 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80133c0:	4b1f      	ldr	r3, [pc, #124]	; (8013440 <RadioIrqProcess+0x2a4>)
 80133c2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80133c4:	b3c9      	cbz	r1, 801343a <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80133c6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80133ca:	f640 1003 	movw	r0, #2307	; 0x903
 80133ce:	f7ff fe4f 	bl	8013070 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80133d2:	4c1b      	ldr	r4, [pc, #108]	; (8013440 <RadioIrqProcess+0x2a4>)
 80133d4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80133d8:	f640 1004 	movw	r0, #2308	; 0x904
 80133dc:	f7ff fe48 	bl	8013070 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80133e0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80133e4:	f640 1005 	movw	r0, #2309	; 0x905
 80133e8:	f7ff fe42 	bl	8013070 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80133ec:	f640 1002 	movw	r0, #2306	; 0x902
 80133f0:	f7ff febf 	bl	8013172 <RadioRead>
 80133f4:	f040 0101 	orr.w	r1, r0, #1
 80133f8:	b2c9      	uxtb	r1, r1
 80133fa:	f640 1002 	movw	r0, #2306	; 0x902
 80133fe:	f7ff fe37 	bl	8013070 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8013402:	2200      	movs	r2, #0
 8013404:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013406:	4613      	mov	r3, r2
 8013408:	f240 2162 	movw	r1, #610	; 0x262
 801340c:	4608      	mov	r0, r1
 801340e:	f000 ff0c 	bl	801422a <SUBGRF_SetDioIrqParams>
 8013412:	e012      	b.n	801343a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8013414:	4b14      	ldr	r3, [pc, #80]	; (8013468 <RadioIrqProcess+0x2cc>)
 8013416:	2201      	movs	r2, #1
 8013418:	2100      	movs	r1, #0
 801341a:	2002      	movs	r0, #2
 801341c:	f001 fbc0 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8013420:	f001 fad7 	bl	80149d2 <RFW_Is_Init>
 8013424:	2801      	cmp	r0, #1
 8013426:	d108      	bne.n	801343a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8013428:	f001 fadf 	bl	80149ea <RFW_ReceivePayload>
 801342c:	e005      	b.n	801343a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801342e:	4b0f      	ldr	r3, [pc, #60]	; (801346c <RadioIrqProcess+0x2d0>)
 8013430:	2201      	movs	r2, #1
 8013432:	2100      	movs	r1, #0
 8013434:	2002      	movs	r0, #2
 8013436:	f001 fbb3 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
}
 801343a:	b003      	add	sp, #12
 801343c:	bd30      	pop	{r4, r5, pc}
 801343e:	bf00      	nop
 8013440:	20003b88 	.word	0x20003b88
 8013444:	08016620 	.word	0x08016620
 8013448:	48000400 	.word	0x48000400
 801344c:	20003b70 	.word	0x20003b70
 8013450:	20003b6c 	.word	0x20003b6c
 8013454:	20003be4 	.word	0x20003be4
 8013458:	20003a6c 	.word	0x20003a6c
 801345c:	20003bac 	.word	0x20003bac
 8013460:	10624dd3 	.word	0x10624dd3
 8013464:	08016634 	.word	0x08016634
 8013468:	08016640 	.word	0x08016640
 801346c:	0801664c 	.word	0x0801664c
        TimerStop( &RxTimeoutTimer );
 8013470:	4817      	ldr	r0, [pc, #92]	; (80134d0 <RadioIrqProcess+0x334>)
 8013472:	f001 fe0d 	bl	8015090 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8013476:	4b17      	ldr	r3, [pc, #92]	; (80134d4 <RadioIrqProcess+0x338>)
 8013478:	785b      	ldrb	r3, [r3, #1]
 801347a:	b173      	cbz	r3, 801349a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801347c:	4b16      	ldr	r3, [pc, #88]	; (80134d8 <RadioIrqProcess+0x33c>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d0da      	beq.n	801343a <RadioIrqProcess+0x29e>
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d0d7      	beq.n	801343a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801348a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801348c:	4b13      	ldr	r3, [pc, #76]	; (80134dc <RadioIrqProcess+0x340>)
 801348e:	2201      	movs	r2, #1
 8013490:	2100      	movs	r1, #0
 8013492:	2002      	movs	r0, #2
 8013494:	f001 fb84 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
 8013498:	e7cf      	b.n	801343a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801349a:	2000      	movs	r0, #0
 801349c:	f000 fd18 	bl	8013ed0 <SUBGRF_SetStandby>
 80134a0:	e7ec      	b.n	801347c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80134a2:	4b0f      	ldr	r3, [pc, #60]	; (80134e0 <RadioIrqProcess+0x344>)
 80134a4:	2201      	movs	r2, #1
 80134a6:	2100      	movs	r1, #0
 80134a8:	2002      	movs	r0, #2
 80134aa:	f001 fb79 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80134ae:	4b09      	ldr	r3, [pc, #36]	; (80134d4 <RadioIrqProcess+0x338>)
 80134b0:	785b      	ldrb	r3, [r3, #1]
 80134b2:	b143      	cbz	r3, 80134c6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80134b4:	4b08      	ldr	r3, [pc, #32]	; (80134d8 <RadioIrqProcess+0x33c>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d0be      	beq.n	801343a <RadioIrqProcess+0x29e>
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d0bb      	beq.n	801343a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80134c2:	4798      	blx	r3
}
 80134c4:	e7b9      	b.n	801343a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80134c6:	2000      	movs	r0, #0
 80134c8:	f000 fd02 	bl	8013ed0 <SUBGRF_SetStandby>
 80134cc:	e7f2      	b.n	80134b4 <RadioIrqProcess+0x318>
 80134ce:	bf00      	nop
 80134d0:	20003b70 	.word	0x20003b70
 80134d4:	20003b88 	.word	0x20003b88
 80134d8:	20003b6c 	.word	0x20003b6c
 80134dc:	08016658 	.word	0x08016658
 80134e0:	08016664 	.word	0x08016664

080134e4 <RadioOnDioIrq>:
{
 80134e4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80134e6:	4b03      	ldr	r3, [pc, #12]	; (80134f4 <RadioOnDioIrq+0x10>)
 80134e8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80134ec:	f7ff fe56 	bl	801319c <RadioIrqProcess>
}
 80134f0:	bd08      	pop	{r3, pc}
 80134f2:	bf00      	nop
 80134f4:	20003b88 	.word	0x20003b88

080134f8 <RadioGetWakeupTime>:
{
 80134f8:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80134fa:	f001 f9a6 	bl	801484a <SUBGRF_GetRadioWakeUpTime>
}
 80134fe:	3003      	adds	r0, #3
 8013500:	bd08      	pop	{r3, pc}
	...

08013504 <RadioSetMaxPayloadLength>:
{
 8013504:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8013506:	2801      	cmp	r0, #1
 8013508:	d004      	beq.n	8013514 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801350a:	4b0a      	ldr	r3, [pc, #40]	; (8013534 <RadioSetMaxPayloadLength+0x30>)
 801350c:	7d5b      	ldrb	r3, [r3, #21]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d008      	beq.n	8013524 <RadioSetMaxPayloadLength+0x20>
}
 8013512:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8013514:	4b08      	ldr	r3, [pc, #32]	; (8013538 <RadioSetMaxPayloadLength+0x34>)
 8013516:	7019      	strb	r1, [r3, #0]
 8013518:	4806      	ldr	r0, [pc, #24]	; (8013534 <RadioSetMaxPayloadLength+0x30>)
 801351a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801351c:	300e      	adds	r0, #14
 801351e:	f001 f853 	bl	80145c8 <SUBGRF_SetPacketParams>
 8013522:	e7f6      	b.n	8013512 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8013524:	4b04      	ldr	r3, [pc, #16]	; (8013538 <RadioSetMaxPayloadLength+0x34>)
 8013526:	7019      	strb	r1, [r3, #0]
 8013528:	4802      	ldr	r0, [pc, #8]	; (8013534 <RadioSetMaxPayloadLength+0x30>)
 801352a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801352c:	300e      	adds	r0, #14
 801352e:	f001 f84b 	bl	80145c8 <SUBGRF_SetPacketParams>
}
 8013532:	e7ee      	b.n	8013512 <RadioSetMaxPayloadLength+0xe>
 8013534:	20003b88 	.word	0x20003b88
 8013538:	20000110 	.word	0x20000110

0801353c <RadioReadRegisters>:
{
 801353c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801353e:	f000 fc5f 	bl	8013e00 <SUBGRF_ReadRegisters>
}
 8013542:	bd08      	pop	{r3, pc}

08013544 <RadioWriteRegisters>:
{
 8013544:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8013546:	f000 fc19 	bl	8013d7c <SUBGRF_WriteRegisters>
}
 801354a:	bd08      	pop	{r3, pc}

0801354c <RadioRssi>:
{
 801354c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801354e:	f001 f8cb 	bl	80146e8 <SUBGRF_GetRssiInst>
}
 8013552:	b200      	sxth	r0, r0
 8013554:	bd08      	pop	{r3, pc}
	...

08013558 <RadioSetTxContinuousWave>:
{
 8013558:	b538      	push	{r3, r4, r5, lr}
 801355a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 801355c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013560:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8013564:	f000 fed4 	bl	8014310 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8013568:	4628      	mov	r0, r5
 801356a:	f001 f957 	bl	801481c <SUBGRF_SetRfTxPower>
 801356e:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8013570:	210e      	movs	r1, #14
 8013572:	f640 101f 	movw	r0, #2335	; 0x91f
 8013576:	f000 fbb5 	bl	8013ce4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801357a:	2101      	movs	r1, #1
 801357c:	4628      	mov	r0, r5
 801357e:	f001 f939 	bl	80147f4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8013582:	f000 fd7f 	bl	8014084 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8013586:	4d04      	ldr	r5, [pc, #16]	; (8013598 <RadioSetTxContinuousWave+0x40>)
 8013588:	4621      	mov	r1, r4
 801358a:	4628      	mov	r0, r5
 801358c:	f001 fe20 	bl	80151d0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8013590:	4628      	mov	r0, r5
 8013592:	f001 fdd7 	bl	8015144 <UTIL_TIMER_Start>
}
 8013596:	bd38      	pop	{r3, r4, r5, pc}
 8013598:	20003be4 	.word	0x20003be4

0801359c <RadioSetChannel>:
{
 801359c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801359e:	f000 feb7 	bl	8014310 <SUBGRF_SetRfFrequency>
}
 80135a2:	bd08      	pop	{r3, pc}

080135a4 <RadioStartCad>:
{
 80135a4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80135a6:	2100      	movs	r1, #0
 80135a8:	4b07      	ldr	r3, [pc, #28]	; (80135c8 <RadioStartCad+0x24>)
 80135aa:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80135ae:	f001 f921 	bl	80147f4 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80135b2:	2300      	movs	r3, #0
 80135b4:	461a      	mov	r2, r3
 80135b6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80135ba:	4608      	mov	r0, r1
 80135bc:	f000 fe35 	bl	801422a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80135c0:	f000 fd54 	bl	801406c <SUBGRF_SetCad>
}
 80135c4:	bd08      	pop	{r3, pc}
 80135c6:	bf00      	nop
 80135c8:	20003b88 	.word	0x20003b88

080135cc <RadioRx>:
{
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80135d0:	f001 f9ff 	bl	80149d2 <RFW_Is_Init>
 80135d4:	2801      	cmp	r0, #1
 80135d6:	d019      	beq.n	801360c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80135d8:	2300      	movs	r3, #0
 80135da:	461a      	mov	r2, r3
 80135dc:	f240 2162 	movw	r1, #610	; 0x262
 80135e0:	4608      	mov	r0, r1
 80135e2:	f000 fe22 	bl	801422a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80135e6:	b9a4      	cbnz	r4, 8013612 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80135e8:	4c11      	ldr	r4, [pc, #68]	; (8013630 <RadioRx+0x64>)
 80135ea:	2100      	movs	r1, #0
 80135ec:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80135ee:	4b11      	ldr	r3, [pc, #68]	; (8013634 <RadioRx+0x68>)
 80135f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80135f4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80135f6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80135fa:	f001 f8fb 	bl	80147f4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80135fe:	7863      	ldrb	r3, [r4, #1]
 8013600:	b183      	cbz	r3, 8013624 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013602:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013606:	f000 fc9f 	bl	8013f48 <SUBGRF_SetRx>
}
 801360a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 801360c:	f001 f9e9 	bl	80149e2 <RFW_ReceiveInit>
 8013610:	e7e9      	b.n	80135e6 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013612:	4d09      	ldr	r5, [pc, #36]	; (8013638 <RadioRx+0x6c>)
 8013614:	4621      	mov	r1, r4
 8013616:	4628      	mov	r0, r5
 8013618:	f001 fdda 	bl	80151d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801361c:	4628      	mov	r0, r5
 801361e:	f001 fd91 	bl	8015144 <UTIL_TIMER_Start>
 8013622:	e7e1      	b.n	80135e8 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8013624:	4b02      	ldr	r3, [pc, #8]	; (8013630 <RadioRx+0x64>)
 8013626:	6898      	ldr	r0, [r3, #8]
 8013628:	0180      	lsls	r0, r0, #6
 801362a:	f000 fc8d 	bl	8013f48 <SUBGRF_SetRx>
}
 801362e:	e7ec      	b.n	801360a <RadioRx+0x3e>
 8013630:	20003b88 	.word	0x20003b88
 8013634:	48000400 	.word	0x48000400
 8013638:	20003b70 	.word	0x20003b70

0801363c <RadioSleep>:
{
 801363c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801363e:	f04f 0004 	mov.w	r0, #4
 8013642:	f000 fc25 	bl	8013e90 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8013646:	2002      	movs	r0, #2
 8013648:	f7ee fab6 	bl	8001bb8 <HAL_Delay>
}
 801364c:	bd08      	pop	{r3, pc}
	...

08013650 <RadioSend>:
{
 8013650:	b570      	push	{r4, r5, r6, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	4605      	mov	r5, r0
 8013656:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8013658:	2300      	movs	r3, #0
 801365a:	461a      	mov	r2, r3
 801365c:	f240 2101 	movw	r1, #513	; 0x201
 8013660:	4608      	mov	r0, r1
 8013662:	f000 fde2 	bl	801422a <SUBGRF_SetDioIrqParams>
 8013666:	4b3f      	ldr	r3, [pc, #252]	; (8013764 <RadioSend+0x114>)
 8013668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801366c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801366e:	4e3e      	ldr	r6, [pc, #248]	; (8013768 <RadioSend+0x118>)
 8013670:	2101      	movs	r1, #1
 8013672:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8013676:	f001 f8bd 	bl	80147f4 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801367a:	7833      	ldrb	r3, [r6, #0]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d103      	bne.n	8013688 <RadioSend+0x38>
 8013680:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8013684:	2b06      	cmp	r3, #6
 8013686:	d012      	beq.n	80136ae <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8013688:	f640 0089 	movw	r0, #2185	; 0x889
 801368c:	f000 fb3a 	bl	8013d04 <SUBGRF_ReadRegister>
 8013690:	f040 0104 	orr.w	r1, r0, #4
 8013694:	b2c9      	uxtb	r1, r1
 8013696:	f640 0089 	movw	r0, #2185	; 0x889
 801369a:	f000 fb23 	bl	8013ce4 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 801369e:	4b32      	ldr	r3, [pc, #200]	; (8013768 <RadioSend+0x118>)
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	2b03      	cmp	r3, #3
 80136a4:	d818      	bhi.n	80136d8 <RadioSend+0x88>
 80136a6:	e8df f003 	tbb	[pc, r3]
 80136aa:	0d23      	.short	0x0d23
 80136ac:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80136ae:	f640 0089 	movw	r0, #2185	; 0x889
 80136b2:	f000 fb27 	bl	8013d04 <SUBGRF_ReadRegister>
 80136b6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80136ba:	f640 0089 	movw	r0, #2185	; 0x889
 80136be:	f000 fb11 	bl	8013ce4 <SUBGRF_WriteRegister>
 80136c2:	e7ec      	b.n	801369e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80136c4:	4828      	ldr	r0, [pc, #160]	; (8013768 <RadioSend+0x118>)
 80136c6:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80136c8:	300e      	adds	r0, #14
 80136ca:	f000 ff7d 	bl	80145c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80136ce:	2200      	movs	r2, #0
 80136d0:	4621      	mov	r1, r4
 80136d2:	4628      	mov	r0, r5
 80136d4:	f000 fc30 	bl	8013f38 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80136d8:	4c24      	ldr	r4, [pc, #144]	; (801376c <RadioSend+0x11c>)
 80136da:	4b23      	ldr	r3, [pc, #140]	; (8013768 <RadioSend+0x118>)
 80136dc:	6859      	ldr	r1, [r3, #4]
 80136de:	4620      	mov	r0, r4
 80136e0:	f001 fd76 	bl	80151d0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80136e4:	4620      	mov	r0, r4
 80136e6:	f001 fd2d 	bl	8015144 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80136ea:	2000      	movs	r0, #0
}
 80136ec:	b002      	add	sp, #8
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80136f0:	f001 f96f 	bl	80149d2 <RFW_Is_Init>
 80136f4:	2801      	cmp	r0, #1
 80136f6:	d00a      	beq.n	801370e <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80136f8:	481b      	ldr	r0, [pc, #108]	; (8013768 <RadioSend+0x118>)
 80136fa:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80136fc:	300e      	adds	r0, #14
 80136fe:	f000 ff63 	bl	80145c8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8013702:	2200      	movs	r2, #0
 8013704:	4621      	mov	r1, r4
 8013706:	4628      	mov	r0, r5
 8013708:	f000 fc16 	bl	8013f38 <SUBGRF_SendPayload>
 801370c:	e7e4      	b.n	80136d8 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801370e:	f10d 0207 	add.w	r2, sp, #7
 8013712:	4621      	mov	r1, r4
 8013714:	4628      	mov	r0, r5
 8013716:	f001 f961 	bl	80149dc <RFW_TransmitInit>
 801371a:	b968      	cbnz	r0, 8013738 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801371c:	4812      	ldr	r0, [pc, #72]	; (8013768 <RadioSend+0x118>)
 801371e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013722:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013724:	300e      	adds	r0, #14
 8013726:	f000 ff4f 	bl	80145c8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801372a:	2200      	movs	r2, #0
 801372c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013730:	4628      	mov	r0, r5
 8013732:	f000 fc01 	bl	8013f38 <SUBGRF_SendPayload>
 8013736:	e7cf      	b.n	80136d8 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8013738:	4b0d      	ldr	r3, [pc, #52]	; (8013770 <RadioSend+0x120>)
 801373a:	2201      	movs	r2, #1
 801373c:	2100      	movs	r1, #0
 801373e:	2002      	movs	r0, #2
 8013740:	f001 fa2e 	bl	8014ba0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8013744:	2003      	movs	r0, #3
 8013746:	e7d1      	b.n	80136ec <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8013748:	4807      	ldr	r0, [pc, #28]	; (8013768 <RadioSend+0x118>)
 801374a:	2302      	movs	r3, #2
 801374c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801374e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013750:	300e      	adds	r0, #14
 8013752:	f000 ff39 	bl	80145c8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013756:	2200      	movs	r2, #0
 8013758:	4621      	mov	r1, r4
 801375a:	4628      	mov	r0, r5
 801375c:	f000 fbec 	bl	8013f38 <SUBGRF_SendPayload>
            break;
 8013760:	e7ba      	b.n	80136d8 <RadioSend+0x88>
 8013762:	bf00      	nop
 8013764:	48000400 	.word	0x48000400
 8013768:	20003b88 	.word	0x20003b88
 801376c:	20003be4 	.word	0x20003be4
 8013770:	08016674 	.word	0x08016674

08013774 <RadioRandom>:
{
 8013774:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013776:	2300      	movs	r3, #0
 8013778:	461a      	mov	r2, r3
 801377a:	4619      	mov	r1, r3
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fd54 	bl	801422a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8013782:	f000 fbfb 	bl	8013f7c <SUBGRF_GetRandom>
}
 8013786:	bd08      	pop	{r3, pc}

08013788 <RadioSetModem>:
{
 8013788:	b510      	push	{r4, lr}
 801378a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 801378c:	4b14      	ldr	r3, [pc, #80]	; (80137e0 <RadioSetModem+0x58>)
 801378e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8013790:	f001 f92c 	bl	80149ec <RFW_SetRadioModem>
    switch( modem )
 8013794:	2c01      	cmp	r4, #1
 8013796:	d010      	beq.n	80137ba <RadioSetModem+0x32>
 8013798:	2c03      	cmp	r4, #3
 801379a:	d01a      	beq.n	80137d2 <RadioSetModem+0x4a>
 801379c:	b134      	cbz	r4, 80137ac <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801379e:	2003      	movs	r0, #3
 80137a0:	f000 fde2 	bl	8014368 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80137a4:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <RadioSetModem+0x58>)
 80137a6:	2200      	movs	r2, #0
 80137a8:	735a      	strb	r2, [r3, #13]
}
 80137aa:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80137ac:	2000      	movs	r0, #0
 80137ae:	f000 fddb 	bl	8014368 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80137b2:	4b0b      	ldr	r3, [pc, #44]	; (80137e0 <RadioSetModem+0x58>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	735a      	strb	r2, [r3, #13]
        break;
 80137b8:	e7f7      	b.n	80137aa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80137ba:	2001      	movs	r0, #1
 80137bc:	f000 fdd4 	bl	8014368 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80137c0:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <RadioSetModem+0x58>)
 80137c2:	7b5a      	ldrb	r2, [r3, #13]
 80137c4:	7b18      	ldrb	r0, [r3, #12]
 80137c6:	4282      	cmp	r2, r0
 80137c8:	d0ef      	beq.n	80137aa <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80137ca:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80137cc:	f000 f80a 	bl	80137e4 <RadioSetPublicNetwork>
 80137d0:	e7eb      	b.n	80137aa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80137d2:	2002      	movs	r0, #2
 80137d4:	f000 fdc8 	bl	8014368 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80137d8:	4b01      	ldr	r3, [pc, #4]	; (80137e0 <RadioSetModem+0x58>)
 80137da:	2200      	movs	r2, #0
 80137dc:	735a      	strb	r2, [r3, #13]
}
 80137de:	e7e4      	b.n	80137aa <RadioSetModem+0x22>
 80137e0:	20003b88 	.word	0x20003b88

080137e4 <RadioSetPublicNetwork>:
{
 80137e4:	b510      	push	{r4, lr}
 80137e6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80137e8:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <RadioSetPublicNetwork+0x40>)
 80137ea:	7318      	strb	r0, [r3, #12]
 80137ec:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80137ee:	2001      	movs	r0, #1
 80137f0:	f7ff ffca 	bl	8013788 <RadioSetModem>
    if( enable == true )
 80137f4:	b154      	cbz	r4, 801380c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80137f6:	2134      	movs	r1, #52	; 0x34
 80137f8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80137fc:	f000 fa72 	bl	8013ce4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8013800:	2144      	movs	r1, #68	; 0x44
 8013802:	f240 7041 	movw	r0, #1857	; 0x741
 8013806:	f000 fa6d 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 801380a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801380c:	2114      	movs	r1, #20
 801380e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8013812:	f000 fa67 	bl	8013ce4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8013816:	2124      	movs	r1, #36	; 0x24
 8013818:	f240 7041 	movw	r0, #1857	; 0x741
 801381c:	f000 fa62 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 8013820:	e7f3      	b.n	801380a <RadioSetPublicNetwork+0x26>
 8013822:	bf00      	nop
 8013824:	20003b88 	.word	0x20003b88

08013828 <RadioSetTxConfig>:
{
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	b083      	sub	sp, #12
 801382e:	4604      	mov	r4, r0
 8013830:	460e      	mov	r6, r1
 8013832:	4617      	mov	r7, r2
 8013834:	461d      	mov	r5, r3
 8013836:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 801383a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 801383e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8013842:	f001 f8c5 	bl	80149d0 <RFW_DeInit>
    switch( modem )
 8013846:	b1ac      	cbz	r4, 8013874 <RadioSetTxConfig+0x4c>
 8013848:	2c01      	cmp	r4, #1
 801384a:	d05a      	beq.n	8013902 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801384c:	4630      	mov	r0, r6
 801384e:	f000 ffe5 	bl	801481c <SUBGRF_SetRfTxPower>
 8013852:	4c55      	ldr	r4, [pc, #340]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013854:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8013858:	210e      	movs	r1, #14
 801385a:	f640 101f 	movw	r0, #2335	; 0x91f
 801385e:	f000 fa41 	bl	8013ce4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8013862:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013866:	f001 f8b8 	bl	80149da <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801386a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801386c:	6063      	str	r3, [r4, #4]
}
 801386e:	b003      	add	sp, #12
 8013870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8013874:	4c4c      	ldr	r4, [pc, #304]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013876:	f04f 0b00 	mov.w	fp, #0
 801387a:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801387e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013880:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013882:	230b      	movs	r3, #11
 8013884:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013888:	4628      	mov	r0, r5
 801388a:	f001 f83f 	bl	801490c <SUBGRF_GetFskBandwidthRegValue>
 801388e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8013892:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013894:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8013898:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801389c:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80138a0:	2304      	movs	r3, #4
 80138a2:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80138a4:	2318      	movs	r3, #24
 80138a6:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80138a8:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80138ac:	f089 0901 	eor.w	r9, r9, #1
 80138b0:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 80138b4:	f1ba 0f00 	cmp.w	sl, #0
 80138b8:	d01f      	beq.n	80138fa <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80138ba:	22f2      	movs	r2, #242	; 0xf2
 80138bc:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80138be:	4c3a      	ldr	r4, [pc, #232]	; (80139a8 <RadioSetTxConfig+0x180>)
 80138c0:	2301      	movs	r3, #1
 80138c2:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80138c4:	f7ff fc50 	bl	8013168 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80138c8:	2000      	movs	r0, #0
 80138ca:	f7ff ff5d 	bl	8013788 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80138ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80138d2:	f000 fdf1 	bl	80144b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80138d6:	f104 000e 	add.w	r0, r4, #14
 80138da:	f000 fe75 	bl	80145c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80138de:	4a33      	ldr	r2, [pc, #204]	; (80139ac <RadioSetTxConfig+0x184>)
 80138e0:	466b      	mov	r3, sp
 80138e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80138ea:	4618      	mov	r0, r3
 80138ec:	f000 fa56 	bl	8013d9c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80138f0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80138f4:	f000 fa29 	bl	8013d4a <SUBGRF_SetWhiteningSeed>
            break;
 80138f8:	e7a8      	b.n	801384c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80138fa:	4b2b      	ldr	r3, [pc, #172]	; (80139a8 <RadioSetTxConfig+0x180>)
 80138fc:	2201      	movs	r2, #1
 80138fe:	75da      	strb	r2, [r3, #23]
 8013900:	e7dd      	b.n	80138be <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013902:	4a29      	ldr	r2, [pc, #164]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013904:	2301      	movs	r3, #1
 8013906:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801390a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801390c:	b2db      	uxtb	r3, r3
 801390e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8013912:	4927      	ldr	r1, [pc, #156]	; (80139b0 <RadioSetTxConfig+0x188>)
 8013914:	5d49      	ldrb	r1, [r1, r5]
 8013916:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801391a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801391e:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013922:	b91d      	cbnz	r5, 801392c <RadioSetTxConfig+0x104>
 8013924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013926:	3a0b      	subs	r2, #11
 8013928:	2a01      	cmp	r2, #1
 801392a:	d92c      	bls.n	8013986 <RadioSetTxConfig+0x15e>
 801392c:	2d01      	cmp	r5, #1
 801392e:	d027      	beq.n	8013980 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013930:	4a1d      	ldr	r2, [pc, #116]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013932:	2100      	movs	r1, #0
 8013934:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013938:	4a1b      	ldr	r2, [pc, #108]	; (80139a8 <RadioSetTxConfig+0x180>)
 801393a:	2101      	movs	r1, #1
 801393c:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801393e:	3b05      	subs	r3, #5
 8013940:	b2db      	uxtb	r3, r3
 8013942:	428b      	cmp	r3, r1
 8013944:	d924      	bls.n	8013990 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013946:	4b18      	ldr	r3, [pc, #96]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013948:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801394c:	4c16      	ldr	r4, [pc, #88]	; (80139a8 <RadioSetTxConfig+0x180>)
 801394e:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013952:	4b18      	ldr	r3, [pc, #96]	; (80139b4 <RadioSetTxConfig+0x18c>)
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013958:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801395c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013960:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013964:	f7ff fc00 	bl	8013168 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013968:	2001      	movs	r0, #1
 801396a:	f7ff ff0d 	bl	8013788 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801396e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013972:	f000 fda1 	bl	80144b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013976:	f104 000e 	add.w	r0, r4, #14
 801397a:	f000 fe25 	bl	80145c8 <SUBGRF_SetPacketParams>
            break;
 801397e:	e765      	b.n	801384c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013982:	2a0c      	cmp	r2, #12
 8013984:	d1d4      	bne.n	8013930 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013986:	4a08      	ldr	r2, [pc, #32]	; (80139a8 <RadioSetTxConfig+0x180>)
 8013988:	2101      	movs	r1, #1
 801398a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801398e:	e7d3      	b.n	8013938 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8013990:	f1b8 0f0b 	cmp.w	r8, #11
 8013994:	d803      	bhi.n	801399e <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013996:	4613      	mov	r3, r2
 8013998:	220c      	movs	r2, #12
 801399a:	839a      	strh	r2, [r3, #28]
 801399c:	e7d6      	b.n	801394c <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801399e:	4b02      	ldr	r3, [pc, #8]	; (80139a8 <RadioSetTxConfig+0x180>)
 80139a0:	f8a3 801c 	strh.w	r8, [r3, #28]
 80139a4:	e7d2      	b.n	801394c <RadioSetTxConfig+0x124>
 80139a6:	bf00      	nop
 80139a8:	20003b88 	.word	0x20003b88
 80139ac:	08015720 	.word	0x08015720
 80139b0:	0801668c 	.word	0x0801668c
 80139b4:	20000110 	.word	0x20000110

080139b8 <RadioSetRxConfig>:
{
 80139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139bc:	b085      	sub	sp, #20
 80139be:	4604      	mov	r4, r0
 80139c0:	460d      	mov	r5, r1
 80139c2:	4616      	mov	r6, r2
 80139c4:	9301      	str	r3, [sp, #4]
 80139c6:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80139ca:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80139ce:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80139d2:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80139d6:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80139da:	4b73      	ldr	r3, [pc, #460]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 80139dc:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80139e0:	f000 fff6 	bl	80149d0 <RFW_DeInit>
    if( rxContinuous == true )
 80139e4:	f1b8 0f00 	cmp.w	r8, #0
 80139e8:	d001      	beq.n	80139ee <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80139ea:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80139ee:	b14f      	cbz	r7, 8013a04 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80139f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80139f4:	4b6d      	ldr	r3, [pc, #436]	; (8013bac <RadioSetRxConfig+0x1f4>)
 80139f6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80139f8:	b144      	cbz	r4, 8013a0c <RadioSetRxConfig+0x54>
 80139fa:	2c01      	cmp	r4, #1
 80139fc:	d057      	beq.n	8013aae <RadioSetRxConfig+0xf6>
}
 80139fe:	b005      	add	sp, #20
 8013a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8013a04:	4b69      	ldr	r3, [pc, #420]	; (8013bac <RadioSetRxConfig+0x1f4>)
 8013a06:	22ff      	movs	r2, #255	; 0xff
 8013a08:	701a      	strb	r2, [r3, #0]
 8013a0a:	e7f5      	b.n	80139f8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	f000 fb47 	bl	80140a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8013a12:	4c65      	ldr	r4, [pc, #404]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013a14:	f04f 0800 	mov.w	r8, #0
 8013a18:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013a1c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013a1e:	230b      	movs	r3, #11
 8013a20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013a24:	4628      	mov	r0, r5
 8013a26:	f000 ff71 	bl	801490c <SUBGRF_GetFskBandwidthRegValue>
 8013a2a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013a2e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8013a32:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8013a36:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013a3a:	2304      	movs	r3, #4
 8013a3c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8013a3e:	2318      	movs	r3, #24
 8013a40:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013a42:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013a46:	f087 0701 	eor.w	r7, r7, #1
 8013a4a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8013a4c:	4b57      	ldr	r3, [pc, #348]	; (8013bac <RadioSetRxConfig+0x1f4>)
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8013a52:	f1bb 0f00 	cmp.w	fp, #0
 8013a56:	d026      	beq.n	8013aa6 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013a58:	22f2      	movs	r2, #242	; 0xf2
 8013a5a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013a5c:	4c52      	ldr	r4, [pc, #328]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013a5e:	2301      	movs	r3, #1
 8013a60:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8013a62:	f7ff fb81 	bl	8013168 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8013a66:	2000      	movs	r0, #0
 8013a68:	f7ff fe8e 	bl	8013788 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013a6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013a70:	f000 fd22 	bl	80144b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013a74:	f104 000e 	add.w	r0, r4, #14
 8013a78:	f000 fda6 	bl	80145c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013a7c:	4a4c      	ldr	r2, [pc, #304]	; (8013bb0 <RadioSetRxConfig+0x1f8>)
 8013a7e:	ab02      	add	r3, sp, #8
 8013a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a84:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f000 f987 	bl	8013d9c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8013a8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013a92:	f000 f95a 	bl	8013d4a <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8013a96:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8013a9a:	fb03 f30a 	mul.w	r3, r3, sl
 8013a9e:	fbb3 f3f6 	udiv	r3, r3, r6
 8013aa2:	60a3      	str	r3, [r4, #8]
            break;
 8013aa4:	e7ab      	b.n	80139fe <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013aa6:	4b40      	ldr	r3, [pc, #256]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013aa8:	2201      	movs	r2, #1
 8013aaa:	75da      	strb	r2, [r3, #23]
 8013aac:	e7d6      	b.n	8013a5c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013aae:	2000      	movs	r0, #0
 8013ab0:	f000 faf6 	bl	80140a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013ab4:	4a3c      	ldr	r2, [pc, #240]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8013abc:	b2f3      	uxtb	r3, r6
 8013abe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013ac2:	493c      	ldr	r1, [pc, #240]	; (8013bb4 <RadioSetRxConfig+0x1fc>)
 8013ac4:	5d49      	ldrb	r1, [r1, r5]
 8013ac6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8013aca:	9901      	ldr	r1, [sp, #4]
 8013acc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013ad0:	b91d      	cbnz	r5, 8013ada <RadioSetRxConfig+0x122>
 8013ad2:	f1a6 020b 	sub.w	r2, r6, #11
 8013ad6:	2a01      	cmp	r2, #1
 8013ad8:	d94b      	bls.n	8013b72 <RadioSetRxConfig+0x1ba>
 8013ada:	2d01      	cmp	r5, #1
 8013adc:	d047      	beq.n	8013b6e <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013ade:	4a32      	ldr	r2, [pc, #200]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013ae0:	2100      	movs	r1, #0
 8013ae2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013ae6:	4a30      	ldr	r2, [pc, #192]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013ae8:	2101      	movs	r1, #1
 8013aea:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013aec:	3b05      	subs	r3, #5
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	428b      	cmp	r3, r1
 8013af2:	d943      	bls.n	8013b7c <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013af4:	4b2c      	ldr	r3, [pc, #176]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013af6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8013afa:	4c2b      	ldr	r4, [pc, #172]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013afc:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013afe:	4b2b      	ldr	r3, [pc, #172]	; (8013bac <RadioSetRxConfig+0x1f4>)
 8013b00:	781b      	ldrb	r3, [r3, #0]
 8013b02:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013b04:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013b08:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013b0c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013b10:	f7ff fb2a 	bl	8013168 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013b14:	2001      	movs	r0, #1
 8013b16:	f7ff fe37 	bl	8013788 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013b1a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013b1e:	f000 fccb 	bl	80144b8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013b22:	f104 000e 	add.w	r0, r4, #14
 8013b26:	f000 fd4f 	bl	80145c8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8013b2a:	fa5f f08a 	uxtb.w	r0, sl
 8013b2e:	f000 fac4 	bl	80140ba <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8013b32:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013b36:	f000 f8e5 	bl	8013d04 <SUBGRF_ReadRegister>
 8013b3a:	f000 0101 	and.w	r1, r0, #1
 8013b3e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013b42:	f000 f8cf 	bl	8013ce4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8013b46:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d021      	beq.n	8013b92 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8013b4e:	f240 7036 	movw	r0, #1846	; 0x736
 8013b52:	f000 f8d7 	bl	8013d04 <SUBGRF_ReadRegister>
 8013b56:	f040 0104 	orr.w	r1, r0, #4
 8013b5a:	b2c9      	uxtb	r1, r1
 8013b5c:	f240 7036 	movw	r0, #1846	; 0x736
 8013b60:	f000 f8c0 	bl	8013ce4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8013b64:	4b10      	ldr	r3, [pc, #64]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b6a:	609a      	str	r2, [r3, #8]
}
 8013b6c:	e747      	b.n	80139fe <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013b6e:	2e0c      	cmp	r6, #12
 8013b70:	d1b5      	bne.n	8013ade <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013b72:	4a0d      	ldr	r2, [pc, #52]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013b74:	2101      	movs	r1, #1
 8013b76:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013b7a:	e7b4      	b.n	8013ae6 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8013b7c:	f1b9 0f0b 	cmp.w	r9, #11
 8013b80:	d803      	bhi.n	8013b8a <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013b82:	4613      	mov	r3, r2
 8013b84:	220c      	movs	r2, #12
 8013b86:	839a      	strh	r2, [r3, #28]
 8013b88:	e7b7      	b.n	8013afa <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013b8a:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <RadioSetRxConfig+0x1f0>)
 8013b8c:	f8a3 901c 	strh.w	r9, [r3, #28]
 8013b90:	e7b3      	b.n	8013afa <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8013b92:	f240 7036 	movw	r0, #1846	; 0x736
 8013b96:	f000 f8b5 	bl	8013d04 <SUBGRF_ReadRegister>
 8013b9a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013b9e:	f240 7036 	movw	r0, #1846	; 0x736
 8013ba2:	f000 f89f 	bl	8013ce4 <SUBGRF_WriteRegister>
 8013ba6:	e7dd      	b.n	8013b64 <RadioSetRxConfig+0x1ac>
 8013ba8:	20003b88 	.word	0x20003b88
 8013bac:	20000110 	.word	0x20000110
 8013bb0:	08015720 	.word	0x08015720
 8013bb4:	0801668c 	.word	0x0801668c

08013bb8 <RadioIsChannelFree>:
{
 8013bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bba:	b08b      	sub	sp, #44	; 0x2c
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	460f      	mov	r7, r1
 8013bc0:	4616      	mov	r6, r2
 8013bc2:	461d      	mov	r5, r3
    RadioStandby( );
 8013bc4:	f7ff fad0 	bl	8013168 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8013bc8:	2000      	movs	r0, #0
 8013bca:	f7ff fddd 	bl	8013788 <RadioSetModem>
    RadioSetChannel( freq );
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f7ff fce4 	bl	801359c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bd8:	2400      	movs	r4, #0
 8013bda:	9408      	str	r4, [sp, #32]
 8013bdc:	9407      	str	r4, [sp, #28]
 8013bde:	9406      	str	r4, [sp, #24]
 8013be0:	9405      	str	r4, [sp, #20]
 8013be2:	9404      	str	r4, [sp, #16]
 8013be4:	9403      	str	r4, [sp, #12]
 8013be6:	9402      	str	r4, [sp, #8]
 8013be8:	2303      	movs	r3, #3
 8013bea:	9301      	str	r3, [sp, #4]
 8013bec:	9700      	str	r7, [sp, #0]
 8013bee:	4623      	mov	r3, r4
 8013bf0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f7ff fede 	bl	80139b8 <RadioSetRxConfig>
    RadioRx( 0 );
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f7ff fce5 	bl	80135cc <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8013c02:	f7ff fc79 	bl	80134f8 <RadioGetWakeupTime>
 8013c06:	f7ed ffd7 	bl	8001bb8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8013c0a:	f001 fa01 	bl	8015010 <UTIL_TIMER_GetCurrentTime>
 8013c0e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8013c10:	4620      	mov	r0, r4
 8013c12:	f001 fa07 	bl	8015024 <UTIL_TIMER_GetElapsedTime>
 8013c16:	42a8      	cmp	r0, r5
 8013c18:	d206      	bcs.n	8013c28 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f7ff fc96 	bl	801354c <RadioRssi>
        if( rssi > rssiThresh )
 8013c20:	42b0      	cmp	r0, r6
 8013c22:	ddf5      	ble.n	8013c10 <RadioIsChannelFree+0x58>
            status = false;
 8013c24:	2400      	movs	r4, #0
 8013c26:	e000      	b.n	8013c2a <RadioIsChannelFree+0x72>
    bool status = true;
 8013c28:	2401      	movs	r4, #1
    RadioStandby( );
 8013c2a:	f7ff fa9d 	bl	8013168 <RadioStandby>
}
 8013c2e:	4620      	mov	r0, r4
 8013c30:	b00b      	add	sp, #44	; 0x2c
 8013c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c34 <RadioInit>:
{
 8013c34:	b570      	push	{r4, r5, r6, lr}
 8013c36:	b082      	sub	sp, #8
    RadioEvents = events;
 8013c38:	4b1d      	ldr	r3, [pc, #116]	; (8013cb0 <RadioInit+0x7c>)
 8013c3a:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8013c3c:	4d1d      	ldr	r5, [pc, #116]	; (8013cb4 <RadioInit+0x80>)
 8013c3e:	2400      	movs	r4, #0
 8013c40:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8013c42:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8013c44:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013c46:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8013c48:	481b      	ldr	r0, [pc, #108]	; (8013cb8 <RadioInit+0x84>)
 8013c4a:	f000 fb27 	bl	801429c <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8013c4e:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8013c50:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8013c52:	f000 fa53 	bl	80140fc <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8013c56:	4621      	mov	r1, r4
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f000 fd27 	bl	80146ac <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8013c5e:	2204      	movs	r2, #4
 8013c60:	4621      	mov	r1, r4
 8013c62:	2001      	movs	r0, #1
 8013c64:	f000 fb9a 	bl	801439c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013c68:	4623      	mov	r3, r4
 8013c6a:	4622      	mov	r2, r4
 8013c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013c70:	4608      	mov	r0, r1
 8013c72:	f000 fada 	bl	801422a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8013c76:	f7ff fce1 	bl	801363c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013c7a:	4e10      	ldr	r6, [pc, #64]	; (8013cbc <RadioInit+0x88>)
 8013c7c:	9400      	str	r4, [sp, #0]
 8013c7e:	4b10      	ldr	r3, [pc, #64]	; (8013cc0 <RadioInit+0x8c>)
 8013c80:	4622      	mov	r2, r4
 8013c82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013c86:	4630      	mov	r0, r6
 8013c88:	f001 f9a4 	bl	8014fd4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013c8c:	4d0d      	ldr	r5, [pc, #52]	; (8013cc4 <RadioInit+0x90>)
 8013c8e:	9400      	str	r4, [sp, #0]
 8013c90:	4b0d      	ldr	r3, [pc, #52]	; (8013cc8 <RadioInit+0x94>)
 8013c92:	4622      	mov	r2, r4
 8013c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013c98:	4628      	mov	r0, r5
 8013c9a:	f001 f99b 	bl	8014fd4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f001 f9f6 	bl	8015090 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	f001 f9f3 	bl	8015090 <UTIL_TIMER_Stop>
}
 8013caa:	b002      	add	sp, #8
 8013cac:	bd70      	pop	{r4, r5, r6, pc}
 8013cae:	bf00      	nop
 8013cb0:	20003b6c 	.word	0x20003b6c
 8013cb4:	20003b88 	.word	0x20003b88
 8013cb8:	080134e5 	.word	0x080134e5
 8013cbc:	20003be4 	.word	0x20003be4
 8013cc0:	0801302d 	.word	0x0801302d
 8013cc4:	20003b70 	.word	0x20003b70
 8013cc8:	08013055 	.word	0x08013055

08013ccc <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8013ccc:	4b01      	ldr	r3, [pc, #4]	; (8013cd4 <SUBGRF_GetOperatingMode+0x8>)
 8013cce:	7818      	ldrb	r0, [r3, #0]
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop
 8013cd4:	20003c02 	.word	0x20003c02

08013cd8 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8013cd8:	4b01      	ldr	r3, [pc, #4]	; (8013ce0 <SUBGRF_GetPacketType+0x8>)
 8013cda:	7818      	ldrb	r0, [r3, #0]
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	20003c03 	.word	0x20003c03

08013ce4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8013ce4:	b500      	push	{lr}
 8013ce6:	b083      	sub	sp, #12
 8013ce8:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8013cec:	2301      	movs	r3, #1
 8013cee:	f10d 0207 	add.w	r2, sp, #7
 8013cf2:	4601      	mov	r1, r0
 8013cf4:	4802      	ldr	r0, [pc, #8]	; (8013d00 <SUBGRF_WriteRegister+0x1c>)
 8013cf6:	f7f2 ff9d 	bl	8006c34 <HAL_SUBGHZ_WriteRegisters>
}
 8013cfa:	b003      	add	sp, #12
 8013cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d00:	20000248 	.word	0x20000248

08013d04 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8013d04:	b500      	push	{lr}
 8013d06:	b083      	sub	sp, #12
 8013d08:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	f10d 0207 	add.w	r2, sp, #7
 8013d10:	4803      	ldr	r0, [pc, #12]	; (8013d20 <SUBGRF_ReadRegister+0x1c>)
 8013d12:	f7f2 ffdf 	bl	8006cd4 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8013d16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d1a:	b003      	add	sp, #12
 8013d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d20:	20000248 	.word	0x20000248

08013d24 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8013d24:	b510      	push	{r4, lr}
 8013d26:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8013d28:	f7ef f8bc 	bl	8002ea4 <RBI_IsDCDC>
 8013d2c:	2801      	cmp	r0, #1
 8013d2e:	d000      	beq.n	8013d32 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8013d30:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8013d32:	f640 1023 	movw	r0, #2339	; 0x923
 8013d36:	f7ff ffe5 	bl	8013d04 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8013d3a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8013d3e:	4321      	orrs	r1, r4
 8013d40:	f640 1023 	movw	r0, #2339	; 0x923
 8013d44:	f7ff ffce 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 8013d48:	e7f2      	b.n	8013d30 <Radio_SMPS_Set+0xc>

08013d4a <SUBGRF_SetWhiteningSeed>:
{
 8013d4a:	b510      	push	{r4, lr}
 8013d4c:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8013d4e:	f7ff ffc3 	bl	8013cd8 <SUBGRF_GetPacketType>
 8013d52:	b100      	cbz	r0, 8013d56 <SUBGRF_SetWhiteningSeed+0xc>
}
 8013d54:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8013d56:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013d5a:	f7ff ffd3 	bl	8013d04 <SUBGRF_ReadRegister>
 8013d5e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8013d62:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8013d66:	4301      	orrs	r1, r0
 8013d68:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013d6c:	f7ff ffba 	bl	8013ce4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8013d70:	b2e1      	uxtb	r1, r4
 8013d72:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8013d76:	f7ff ffb5 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 8013d7a:	e7eb      	b.n	8013d54 <SUBGRF_SetWhiteningSeed+0xa>

08013d7c <SUBGRF_WriteRegisters>:
{
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013d84:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8013d86:	460a      	mov	r2, r1
 8013d88:	4601      	mov	r1, r0
 8013d8a:	4803      	ldr	r0, [pc, #12]	; (8013d98 <SUBGRF_WriteRegisters+0x1c>)
 8013d8c:	f7f2 ff52 	bl	8006c34 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d90:	f384 8810 	msr	PRIMASK, r4
}
 8013d94:	bd10      	pop	{r4, pc}
 8013d96:	bf00      	nop
 8013d98:	20000248 	.word	0x20000248

08013d9c <SUBGRF_SetSyncWord>:
{
 8013d9c:	b508      	push	{r3, lr}
 8013d9e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013da0:	2208      	movs	r2, #8
 8013da2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8013da6:	f7ff ffe9 	bl	8013d7c <SUBGRF_WriteRegisters>
}
 8013daa:	2000      	movs	r0, #0
 8013dac:	bd08      	pop	{r3, pc}

08013dae <SUBGRF_SetCrcSeed>:
{
 8013dae:	b500      	push	{lr}
 8013db0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8013db2:	0a03      	lsrs	r3, r0, #8
 8013db4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8013db8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013dbc:	f7ff ff8c 	bl	8013cd8 <SUBGRF_GetPacketType>
 8013dc0:	b110      	cbz	r0, 8013dc8 <SUBGRF_SetCrcSeed+0x1a>
}
 8013dc2:	b003      	add	sp, #12
 8013dc4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8013dc8:	2202      	movs	r2, #2
 8013dca:	a901      	add	r1, sp, #4
 8013dcc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8013dd0:	f7ff ffd4 	bl	8013d7c <SUBGRF_WriteRegisters>
}
 8013dd4:	e7f5      	b.n	8013dc2 <SUBGRF_SetCrcSeed+0x14>

08013dd6 <SUBGRF_SetCrcPolynomial>:
{
 8013dd6:	b500      	push	{lr}
 8013dd8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8013dda:	0a03      	lsrs	r3, r0, #8
 8013ddc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8013de0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013de4:	f7ff ff78 	bl	8013cd8 <SUBGRF_GetPacketType>
 8013de8:	b110      	cbz	r0, 8013df0 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8013dea:	b003      	add	sp, #12
 8013dec:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8013df0:	2202      	movs	r2, #2
 8013df2:	a901      	add	r1, sp, #4
 8013df4:	f240 60be 	movw	r0, #1726	; 0x6be
 8013df8:	f7ff ffc0 	bl	8013d7c <SUBGRF_WriteRegisters>
}
 8013dfc:	e7f5      	b.n	8013dea <SUBGRF_SetCrcPolynomial+0x14>
	...

08013e00 <SUBGRF_ReadRegisters>:
{
 8013e00:	b510      	push	{r4, lr}
 8013e02:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e04:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e08:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8013e0a:	460a      	mov	r2, r1
 8013e0c:	4601      	mov	r1, r0
 8013e0e:	4803      	ldr	r0, [pc, #12]	; (8013e1c <SUBGRF_ReadRegisters+0x1c>)
 8013e10:	f7f2 ff60 	bl	8006cd4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e14:	f384 8810 	msr	PRIMASK, r4
}
 8013e18:	bd10      	pop	{r4, pc}
 8013e1a:	bf00      	nop
 8013e1c:	20000248 	.word	0x20000248

08013e20 <SUBGRF_WriteBuffer>:
{
 8013e20:	b510      	push	{r4, lr}
 8013e22:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e24:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e28:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8013e2a:	460a      	mov	r2, r1
 8013e2c:	4601      	mov	r1, r0
 8013e2e:	4803      	ldr	r0, [pc, #12]	; (8013e3c <SUBGRF_WriteBuffer+0x1c>)
 8013e30:	f7f3 f8ae 	bl	8006f90 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e34:	f384 8810 	msr	PRIMASK, r4
}
 8013e38:	bd10      	pop	{r4, pc}
 8013e3a:	bf00      	nop
 8013e3c:	20000248 	.word	0x20000248

08013e40 <SUBGRF_SetPayload>:
{
 8013e40:	b508      	push	{r3, lr}
 8013e42:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8013e44:	4601      	mov	r1, r0
 8013e46:	2000      	movs	r0, #0
 8013e48:	f7ff ffea 	bl	8013e20 <SUBGRF_WriteBuffer>
}
 8013e4c:	bd08      	pop	{r3, pc}
	...

08013e50 <SUBGRF_ReadBuffer>:
{
 8013e50:	b510      	push	{r4, lr}
 8013e52:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e54:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e58:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8013e5a:	460a      	mov	r2, r1
 8013e5c:	4601      	mov	r1, r0
 8013e5e:	4803      	ldr	r0, [pc, #12]	; (8013e6c <SUBGRF_ReadBuffer+0x1c>)
 8013e60:	f7f3 f8e0 	bl	8007024 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e64:	f384 8810 	msr	PRIMASK, r4
}
 8013e68:	bd10      	pop	{r4, pc}
 8013e6a:	bf00      	nop
 8013e6c:	20000248 	.word	0x20000248

08013e70 <SUBGRF_WriteCommand>:
{
 8013e70:	b510      	push	{r4, lr}
 8013e72:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e74:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013e78:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8013e7a:	460a      	mov	r2, r1
 8013e7c:	4601      	mov	r1, r0
 8013e7e:	4803      	ldr	r0, [pc, #12]	; (8013e8c <SUBGRF_WriteCommand+0x1c>)
 8013e80:	f7f2 ff7c 	bl	8006d7c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e84:	f384 8810 	msr	PRIMASK, r4
}
 8013e88:	bd10      	pop	{r4, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20000248 	.word	0x20000248

08013e90 <SUBGRF_SetSleep>:
{
 8013e90:	b510      	push	{r4, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8013e96:	2000      	movs	r0, #0
 8013e98:	f7ee fff8 	bl	8002e8c <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013e9c:	2002      	movs	r0, #2
 8013e9e:	f7ff ff41 	bl	8013d24 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013ea2:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013ea6:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013eaa:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8013eac:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8013eb0:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8013eb2:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8013eb6:	2201      	movs	r2, #1
 8013eb8:	f10d 0107 	add.w	r1, sp, #7
 8013ebc:	2084      	movs	r0, #132	; 0x84
 8013ebe:	f7ff ffd7 	bl	8013e70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8013ec2:	4b02      	ldr	r3, [pc, #8]	; (8013ecc <SUBGRF_SetSleep+0x3c>)
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	701a      	strb	r2, [r3, #0]
}
 8013ec8:	b002      	add	sp, #8
 8013eca:	bd10      	pop	{r4, pc}
 8013ecc:	20003c02 	.word	0x20003c02

08013ed0 <SUBGRF_SetStandby>:
{
 8013ed0:	b500      	push	{lr}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8013ed8:	2201      	movs	r2, #1
 8013eda:	f10d 0107 	add.w	r1, sp, #7
 8013ede:	2080      	movs	r0, #128	; 0x80
 8013ee0:	f7ff ffc6 	bl	8013e70 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8013ee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013ee8:	b92b      	cbnz	r3, 8013ef6 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8013eea:	4b05      	ldr	r3, [pc, #20]	; (8013f00 <SUBGRF_SetStandby+0x30>)
 8013eec:	2201      	movs	r2, #1
 8013eee:	701a      	strb	r2, [r3, #0]
}
 8013ef0:	b003      	add	sp, #12
 8013ef2:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8013ef6:	4b02      	ldr	r3, [pc, #8]	; (8013f00 <SUBGRF_SetStandby+0x30>)
 8013ef8:	2202      	movs	r2, #2
 8013efa:	701a      	strb	r2, [r3, #0]
}
 8013efc:	e7f8      	b.n	8013ef0 <SUBGRF_SetStandby+0x20>
 8013efe:	bf00      	nop
 8013f00:	20003c02 	.word	0x20003c02

08013f04 <SUBGRF_SetTx>:
{
 8013f04:	b500      	push	{lr}
 8013f06:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8013f08:	4b0a      	ldr	r3, [pc, #40]	; (8013f34 <SUBGRF_SetTx+0x30>)
 8013f0a:	2204      	movs	r2, #4
 8013f0c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013f0e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013f12:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013f16:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013f1a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013f1e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8013f22:	2203      	movs	r2, #3
 8013f24:	a901      	add	r1, sp, #4
 8013f26:	2083      	movs	r0, #131	; 0x83
 8013f28:	f7ff ffa2 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8013f2c:	b003      	add	sp, #12
 8013f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f32:	bf00      	nop
 8013f34:	20003c02 	.word	0x20003c02

08013f38 <SUBGRF_SendPayload>:
{
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8013f3c:	f7ff ff80 	bl	8013e40 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7ff ffdf 	bl	8013f04 <SUBGRF_SetTx>
}
 8013f46:	bd10      	pop	{r4, pc}

08013f48 <SUBGRF_SetRx>:
{
 8013f48:	b500      	push	{lr}
 8013f4a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8013f4c:	4b0a      	ldr	r3, [pc, #40]	; (8013f78 <SUBGRF_SetRx+0x30>)
 8013f4e:	2205      	movs	r2, #5
 8013f50:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013f52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013f56:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8013f5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013f5e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013f62:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8013f66:	2203      	movs	r2, #3
 8013f68:	a901      	add	r1, sp, #4
 8013f6a:	2082      	movs	r0, #130	; 0x82
 8013f6c:	f7ff ff80 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8013f70:	b003      	add	sp, #12
 8013f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f76:	bf00      	nop
 8013f78:	20003c02 	.word	0x20003c02

08013f7c <SUBGRF_GetRandom>:
{
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8013f80:	2600      	movs	r6, #0
 8013f82:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8013f84:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013f88:	f7ff febc 	bl	8013d04 <SUBGRF_ReadRegister>
 8013f8c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8013f8e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8013f92:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013f96:	f7ff fea5 	bl	8013ce4 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8013f9a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013f9e:	f7ff feb1 	bl	8013d04 <SUBGRF_ReadRegister>
 8013fa2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8013fa4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8013fa8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013fac:	f7ff fe9a 	bl	8013ce4 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013fb0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013fb4:	f7ff ffc8 	bl	8013f48 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8013fb8:	2204      	movs	r2, #4
 8013fba:	eb0d 0102 	add.w	r1, sp, r2
 8013fbe:	f640 0019 	movw	r0, #2073	; 0x819
 8013fc2:	f7ff ff1d 	bl	8013e00 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f7ff ff82 	bl	8013ed0 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8013fcc:	4629      	mov	r1, r5
 8013fce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013fd2:	f7ff fe87 	bl	8013ce4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8013fd6:	4621      	mov	r1, r4
 8013fd8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013fdc:	f7ff fe82 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 8013fe0:	9801      	ldr	r0, [sp, #4]
 8013fe2:	b002      	add	sp, #8
 8013fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08013fe8 <SUBGRF_SetRxBoosted>:
{
 8013fe8:	b510      	push	{r4, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8013fee:	4b0c      	ldr	r3, [pc, #48]	; (8014020 <SUBGRF_SetRxBoosted+0x38>)
 8013ff0:	2205      	movs	r2, #5
 8013ff2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8013ff4:	2197      	movs	r1, #151	; 0x97
 8013ff6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8013ffa:	f7ff fe73 	bl	8013ce4 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013ffe:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8014002:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014006:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801400a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801400e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8014012:	2203      	movs	r2, #3
 8014014:	a901      	add	r1, sp, #4
 8014016:	2082      	movs	r0, #130	; 0x82
 8014018:	f7ff ff2a 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801401c:	b002      	add	sp, #8
 801401e:	bd10      	pop	{r4, pc}
 8014020:	20003c02 	.word	0x20003c02

08014024 <SUBGRF_SetRxDutyCycle>:
{
 8014024:	b500      	push	{lr}
 8014026:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8014028:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801402c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8014030:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014034:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8014038:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801403c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014040:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8014044:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014048:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801404c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8014050:	2206      	movs	r2, #6
 8014052:	4669      	mov	r1, sp
 8014054:	2094      	movs	r0, #148	; 0x94
 8014056:	f7ff ff0b 	bl	8013e70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801405a:	4b03      	ldr	r3, [pc, #12]	; (8014068 <SUBGRF_SetRxDutyCycle+0x44>)
 801405c:	2206      	movs	r2, #6
 801405e:	701a      	strb	r2, [r3, #0]
}
 8014060:	b003      	add	sp, #12
 8014062:	f85d fb04 	ldr.w	pc, [sp], #4
 8014066:	bf00      	nop
 8014068:	20003c02 	.word	0x20003c02

0801406c <SUBGRF_SetCad>:
{
 801406c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801406e:	2200      	movs	r2, #0
 8014070:	4611      	mov	r1, r2
 8014072:	20c5      	movs	r0, #197	; 0xc5
 8014074:	f7ff fefc 	bl	8013e70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8014078:	4b01      	ldr	r3, [pc, #4]	; (8014080 <SUBGRF_SetCad+0x14>)
 801407a:	2207      	movs	r2, #7
 801407c:	701a      	strb	r2, [r3, #0]
}
 801407e:	bd08      	pop	{r3, pc}
 8014080:	20003c02 	.word	0x20003c02

08014084 <SUBGRF_SetTxContinuousWave>:
{
 8014084:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8014086:	2200      	movs	r2, #0
 8014088:	4611      	mov	r1, r2
 801408a:	20d1      	movs	r0, #209	; 0xd1
 801408c:	f7ff fef0 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014090:	bd08      	pop	{r3, pc}

08014092 <SUBGRF_SetTxInfinitePreamble>:
{
 8014092:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8014094:	2200      	movs	r2, #0
 8014096:	4611      	mov	r1, r2
 8014098:	20d2      	movs	r0, #210	; 0xd2
 801409a:	f7ff fee9 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801409e:	bd08      	pop	{r3, pc}

080140a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80140a0:	b500      	push	{lr}
 80140a2:	b083      	sub	sp, #12
 80140a4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80140a8:	2201      	movs	r2, #1
 80140aa:	f10d 0107 	add.w	r1, sp, #7
 80140ae:	209f      	movs	r0, #159	; 0x9f
 80140b0:	f7ff fede 	bl	8013e70 <SUBGRF_WriteCommand>
}
 80140b4:	b003      	add	sp, #12
 80140b6:	f85d fb04 	ldr.w	pc, [sp], #4

080140ba <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80140ba:	b500      	push	{lr}
 80140bc:	b083      	sub	sp, #12
 80140be:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80140c2:	2201      	movs	r2, #1
 80140c4:	f10d 0107 	add.w	r1, sp, #7
 80140c8:	20a0      	movs	r0, #160	; 0xa0
 80140ca:	f7ff fed1 	bl	8013e70 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80140ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80140d2:	2b3f      	cmp	r3, #63	; 0x3f
 80140d4:	d90f      	bls.n	80140f6 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80140d6:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80140d8:	2200      	movs	r2, #0
        while( mant > 31 )
 80140da:	e002      	b.n	80140e2 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80140dc:	089b      	lsrs	r3, r3, #2
            exp++;
 80140de:	3201      	adds	r2, #1
 80140e0:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 80140e2:	2b1f      	cmp	r3, #31
 80140e4:	d8fa      	bhi.n	80140dc <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80140e6:	00d9      	lsls	r1, r3, #3
 80140e8:	b2c9      	uxtb	r1, r1
 80140ea:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80140ec:	b2c9      	uxtb	r1, r1
 80140ee:	f240 7006 	movw	r0, #1798	; 0x706
 80140f2:	f7ff fdf7 	bl	8013ce4 <SUBGRF_WriteRegister>
}
 80140f6:	b003      	add	sp, #12
 80140f8:	f85d fb04 	ldr.w	pc, [sp], #4

080140fc <SUBGRF_SetRegulatorMode>:
{
 80140fc:	b500      	push	{lr}
 80140fe:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8014100:	f7ee fed0 	bl	8002ea4 <RBI_IsDCDC>
 8014104:	2801      	cmp	r0, #1
 8014106:	d00b      	beq.n	8014120 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8014108:	2300      	movs	r3, #0
 801410a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801410e:	2201      	movs	r2, #1
 8014110:	f10d 0107 	add.w	r1, sp, #7
 8014114:	2096      	movs	r0, #150	; 0x96
 8014116:	f7ff feab 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801411a:	b003      	add	sp, #12
 801411c:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8014120:	2301      	movs	r3, #1
 8014122:	f88d 3007 	strb.w	r3, [sp, #7]
 8014126:	e7f2      	b.n	801410e <SUBGRF_SetRegulatorMode+0x12>

08014128 <SUBGRF_Calibrate>:
{
 8014128:	b500      	push	{lr}
 801412a:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801412c:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014130:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014134:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014136:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801413a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801413c:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014140:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8014142:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8014146:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8014148:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801414c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801414e:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8014152:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014154:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8014158:	2201      	movs	r2, #1
 801415a:	f10d 0107 	add.w	r1, sp, #7
 801415e:	2089      	movs	r0, #137	; 0x89
 8014160:	f7ff fe86 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014164:	b003      	add	sp, #12
 8014166:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801416c <SUBGRF_CalibrateImage>:
{
 801416c:	b500      	push	{lr}
 801416e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8014170:	4b1f      	ldr	r3, [pc, #124]	; (80141f0 <SUBGRF_CalibrateImage+0x84>)
 8014172:	4298      	cmp	r0, r3
 8014174:	d90d      	bls.n	8014192 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8014176:	23e1      	movs	r3, #225	; 0xe1
 8014178:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 801417c:	23e9      	movs	r3, #233	; 0xe9
 801417e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8014182:	2202      	movs	r2, #2
 8014184:	a901      	add	r1, sp, #4
 8014186:	2098      	movs	r0, #152	; 0x98
 8014188:	f7ff fe72 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801418c:	b003      	add	sp, #12
 801418e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8014192:	4b18      	ldr	r3, [pc, #96]	; (80141f4 <SUBGRF_CalibrateImage+0x88>)
 8014194:	4298      	cmp	r0, r3
 8014196:	d906      	bls.n	80141a6 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8014198:	23d7      	movs	r3, #215	; 0xd7
 801419a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 801419e:	23db      	movs	r3, #219	; 0xdb
 80141a0:	f88d 3005 	strb.w	r3, [sp, #5]
 80141a4:	e7ed      	b.n	8014182 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80141a6:	4b14      	ldr	r3, [pc, #80]	; (80141f8 <SUBGRF_CalibrateImage+0x8c>)
 80141a8:	4298      	cmp	r0, r3
 80141aa:	d906      	bls.n	80141ba <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80141ac:	23c1      	movs	r3, #193	; 0xc1
 80141ae:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80141b2:	23c5      	movs	r3, #197	; 0xc5
 80141b4:	f88d 3005 	strb.w	r3, [sp, #5]
 80141b8:	e7e3      	b.n	8014182 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80141ba:	4b10      	ldr	r3, [pc, #64]	; (80141fc <SUBGRF_CalibrateImage+0x90>)
 80141bc:	4298      	cmp	r0, r3
 80141be:	d906      	bls.n	80141ce <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80141c0:	2375      	movs	r3, #117	; 0x75
 80141c2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80141c6:	2381      	movs	r3, #129	; 0x81
 80141c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80141cc:	e7d9      	b.n	8014182 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80141ce:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <SUBGRF_CalibrateImage+0x94>)
 80141d0:	4298      	cmp	r0, r3
 80141d2:	d906      	bls.n	80141e2 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80141d4:	236b      	movs	r3, #107	; 0x6b
 80141d6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80141da:	236f      	movs	r3, #111	; 0x6f
 80141dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80141e0:	e7cf      	b.n	8014182 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80141e2:	2329      	movs	r3, #41	; 0x29
 80141e4:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 80141e8:	232b      	movs	r3, #43	; 0x2b
 80141ea:	f88d 3005 	strb.w	r3, [sp, #5]
 80141ee:	e7c8      	b.n	8014182 <SUBGRF_CalibrateImage+0x16>
 80141f0:	35a4e900 	.word	0x35a4e900
 80141f4:	32a9f880 	.word	0x32a9f880
 80141f8:	2de54480 	.word	0x2de54480
 80141fc:	1b6b0b00 	.word	0x1b6b0b00
 8014200:	1954fc40 	.word	0x1954fc40

08014204 <SUBGRF_SetPaConfig>:
{
 8014204:	b500      	push	{lr}
 8014206:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8014208:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 801420c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8014210:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8014214:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014218:	2204      	movs	r2, #4
 801421a:	eb0d 0102 	add.w	r1, sp, r2
 801421e:	2095      	movs	r0, #149	; 0x95
 8014220:	f7ff fe26 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014224:	b003      	add	sp, #12
 8014226:	f85d fb04 	ldr.w	pc, [sp], #4

0801422a <SUBGRF_SetDioIrqParams>:
{
 801422a:	b500      	push	{lr}
 801422c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801422e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8014232:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8014236:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801423a:	0a08      	lsrs	r0, r1, #8
 801423c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8014240:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8014244:	0a11      	lsrs	r1, r2, #8
 8014246:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801424a:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801424e:	0a1a      	lsrs	r2, r3, #8
 8014250:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8014254:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8014258:	2208      	movs	r2, #8
 801425a:	4669      	mov	r1, sp
 801425c:	4610      	mov	r0, r2
 801425e:	f7ff fe07 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014262:	b003      	add	sp, #12
 8014264:	f85d fb04 	ldr.w	pc, [sp], #4

08014268 <SUBGRF_SetTcxoMode>:
{
 8014268:	b500      	push	{lr}
 801426a:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 801426c:	f000 0007 	and.w	r0, r0, #7
 8014270:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014274:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014278:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801427c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014280:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8014284:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014288:	2204      	movs	r2, #4
 801428a:	eb0d 0102 	add.w	r1, sp, r2
 801428e:	2097      	movs	r0, #151	; 0x97
 8014290:	f7ff fdee 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014294:	b003      	add	sp, #12
 8014296:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801429c <SUBGRF_Init>:
{
 801429c:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801429e:	b108      	cbz	r0, 80142a4 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80142a0:	4a18      	ldr	r2, [pc, #96]	; (8014304 <SUBGRF_Init+0x68>)
 80142a2:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80142a4:	f7ed fb80 	bl	80019a8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80142a8:	2002      	movs	r0, #2
 80142aa:	f7ff fd3b 	bl	8013d24 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80142ae:	2000      	movs	r0, #0
 80142b0:	4b15      	ldr	r3, [pc, #84]	; (8014308 <SUBGRF_Init+0x6c>)
 80142b2:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80142b4:	f7ff fe0c 	bl	8013ed0 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80142b8:	f7ee fdf0 	bl	8002e9c <RBI_IsTCXO>
 80142bc:	2801      	cmp	r0, #1
 80142be:	d014      	beq.n	80142ea <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80142c0:	2120      	movs	r1, #32
 80142c2:	f640 1011 	movw	r0, #2321	; 0x911
 80142c6:	f7ff fd0d 	bl	8013ce4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80142ca:	2120      	movs	r1, #32
 80142cc:	f640 1012 	movw	r0, #2322	; 0x912
 80142d0:	f7ff fd08 	bl	8013ce4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80142d4:	210e      	movs	r1, #14
 80142d6:	f640 101f 	movw	r0, #2335	; 0x91f
 80142da:	f7ff fd03 	bl	8013ce4 <SUBGRF_WriteRegister>
    RBI_Init();
 80142de:	f7ee fdd1 	bl	8002e84 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80142e2:	4b0a      	ldr	r3, [pc, #40]	; (801430c <SUBGRF_Init+0x70>)
 80142e4:	2201      	movs	r2, #1
 80142e6:	701a      	strb	r2, [r3, #0]
}
 80142e8:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80142ea:	2140      	movs	r1, #64	; 0x40
 80142ec:	f7ff ffbc 	bl	8014268 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80142f0:	2100      	movs	r1, #0
 80142f2:	f640 1011 	movw	r0, #2321	; 0x911
 80142f6:	f7ff fcf5 	bl	8013ce4 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80142fa:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80142fe:	f7ff ff13 	bl	8014128 <SUBGRF_Calibrate>
 8014302:	e7e7      	b.n	80142d4 <SUBGRF_Init+0x38>
 8014304:	20003c04 	.word	0x20003c04
 8014308:	20003c00 	.word	0x20003c00
 801430c:	20003c02 	.word	0x20003c02

08014310 <SUBGRF_SetRfFrequency>:
{
 8014310:	b510      	push	{r4, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8014316:	4b12      	ldr	r3, [pc, #72]	; (8014360 <SUBGRF_SetRfFrequency+0x50>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	b1d3      	cbz	r3, 8014352 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801431c:	4a11      	ldr	r2, [pc, #68]	; (8014364 <SUBGRF_SetRfFrequency+0x54>)
 801431e:	2300      	movs	r3, #0
 8014320:	0660      	lsls	r0, r4, #25
 8014322:	09e1      	lsrs	r1, r4, #7
 8014324:	f7ec fc24 	bl	8000b70 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8014328:	0e03      	lsrs	r3, r0, #24
 801432a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801432e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014332:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8014336:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801433a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801433e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8014342:	2204      	movs	r2, #4
 8014344:	eb0d 0102 	add.w	r1, sp, r2
 8014348:	2086      	movs	r0, #134	; 0x86
 801434a:	f7ff fd91 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801434e:	b002      	add	sp, #8
 8014350:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8014352:	f7ff ff0b 	bl	801416c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8014356:	4b02      	ldr	r3, [pc, #8]	; (8014360 <SUBGRF_SetRfFrequency+0x50>)
 8014358:	2201      	movs	r2, #1
 801435a:	701a      	strb	r2, [r3, #0]
 801435c:	e7de      	b.n	801431c <SUBGRF_SetRfFrequency+0xc>
 801435e:	bf00      	nop
 8014360:	20003c00 	.word	0x20003c00
 8014364:	01e84800 	.word	0x01e84800

08014368 <SUBGRF_SetPacketType>:
{
 8014368:	b500      	push	{lr}
 801436a:	b083      	sub	sp, #12
 801436c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8014370:	b2c3      	uxtb	r3, r0
 8014372:	4a09      	ldr	r2, [pc, #36]	; (8014398 <SUBGRF_SetPacketType+0x30>)
 8014374:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8014376:	b143      	cbz	r3, 801438a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8014378:	2201      	movs	r2, #1
 801437a:	f10d 0107 	add.w	r1, sp, #7
 801437e:	208a      	movs	r0, #138	; 0x8a
 8014380:	f7ff fd76 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014384:	b003      	add	sp, #12
 8014386:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801438a:	2100      	movs	r1, #0
 801438c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8014390:	f7ff fca8 	bl	8013ce4 <SUBGRF_WriteRegister>
 8014394:	e7f0      	b.n	8014378 <SUBGRF_SetPacketType+0x10>
 8014396:	bf00      	nop
 8014398:	20003c03 	.word	0x20003c03

0801439c <SUBGRF_SetTxParams>:
{
 801439c:	b570      	push	{r4, r5, r6, lr}
 801439e:	b082      	sub	sp, #8
 80143a0:	460c      	mov	r4, r1
 80143a2:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80143a4:	2801      	cmp	r0, #1
 80143a6:	d035      	beq.n	8014414 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80143a8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80143ac:	f7ff fcaa 	bl	8013d04 <SUBGRF_ReadRegister>
 80143b0:	f040 011e 	orr.w	r1, r0, #30
 80143b4:	b2c9      	uxtb	r1, r1
 80143b6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80143ba:	f7ff fc93 	bl	8013ce4 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80143be:	2001      	movs	r0, #1
 80143c0:	f7ee fd74 	bl	8002eac <RBI_GetRFOMaxPowerConfig>
 80143c4:	4605      	mov	r5, r0
        if (power > max_power)
 80143c6:	4284      	cmp	r4, r0
 80143c8:	dd00      	ble.n	80143cc <SUBGRF_SetTxParams+0x30>
            power = max_power;
 80143ca:	b244      	sxtb	r4, r0
        if (max_power == 20)
 80143cc:	2d14      	cmp	r5, #20
 80143ce:	d054      	beq.n	801447a <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 80143d0:	2d11      	cmp	r5, #17
 80143d2:	d05c      	beq.n	801448e <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 80143d4:	2d0e      	cmp	r5, #14
 80143d6:	d064      	beq.n	80144a2 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80143d8:	2301      	movs	r3, #1
 80143da:	2200      	movs	r2, #0
 80143dc:	2107      	movs	r1, #7
 80143de:	2004      	movs	r0, #4
 80143e0:	f7ff ff10 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80143e4:	1b64      	subs	r4, r4, r5
 80143e6:	3416      	adds	r4, #22
 80143e8:	b265      	sxtb	r5, r4
        if (power < -9)
 80143ea:	f115 0f09 	cmn.w	r5, #9
 80143ee:	da01      	bge.n	80143f4 <SUBGRF_SetTxParams+0x58>
            power = -9;
 80143f0:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80143f4:	2138      	movs	r1, #56	; 0x38
 80143f6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80143fa:	f7ff fc73 	bl	8013ce4 <SUBGRF_WriteRegister>
    buf[0] = power;
 80143fe:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8014402:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8014406:	2202      	movs	r2, #2
 8014408:	a901      	add	r1, sp, #4
 801440a:	208e      	movs	r0, #142	; 0x8e
 801440c:	f7ff fd30 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014410:	b002      	add	sp, #8
 8014412:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8014414:	2000      	movs	r0, #0
 8014416:	f7ee fd49 	bl	8002eac <RBI_GetRFOMaxPowerConfig>
 801441a:	4605      	mov	r5, r0
        if (power >  max_power)
 801441c:	4284      	cmp	r4, r0
 801441e:	dd00      	ble.n	8014422 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8014420:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8014422:	2d0e      	cmp	r5, #14
 8014424:	d015      	beq.n	8014452 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8014426:	2d0a      	cmp	r5, #10
 8014428:	d01d      	beq.n	8014466 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801442a:	2301      	movs	r3, #1
 801442c:	461a      	mov	r2, r3
 801442e:	2100      	movs	r1, #0
 8014430:	2007      	movs	r0, #7
 8014432:	f7ff fee7 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014436:	1b65      	subs	r5, r4, r5
 8014438:	350e      	adds	r5, #14
 801443a:	b26d      	sxtb	r5, r5
        if (power < -17)
 801443c:	f115 0f11 	cmn.w	r5, #17
 8014440:	da01      	bge.n	8014446 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8014442:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8014446:	2118      	movs	r1, #24
 8014448:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801444c:	f7ff fc4a 	bl	8013ce4 <SUBGRF_WriteRegister>
 8014450:	e7d5      	b.n	80143fe <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8014452:	2301      	movs	r3, #1
 8014454:	461a      	mov	r2, r3
 8014456:	2100      	movs	r1, #0
 8014458:	2004      	movs	r0, #4
 801445a:	f7ff fed3 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801445e:	1b65      	subs	r5, r4, r5
 8014460:	350e      	adds	r5, #14
 8014462:	b26d      	sxtb	r5, r5
 8014464:	e7ea      	b.n	801443c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8014466:	2301      	movs	r3, #1
 8014468:	461a      	mov	r2, r3
 801446a:	2100      	movs	r1, #0
 801446c:	4618      	mov	r0, r3
 801446e:	f7ff fec9 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8014472:	1b65      	subs	r5, r4, r5
 8014474:	350d      	adds	r5, #13
 8014476:	b26d      	sxtb	r5, r5
 8014478:	e7e0      	b.n	801443c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801447a:	2301      	movs	r3, #1
 801447c:	2200      	movs	r2, #0
 801447e:	2105      	movs	r1, #5
 8014480:	2003      	movs	r0, #3
 8014482:	f7ff febf 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014486:	1b65      	subs	r5, r4, r5
 8014488:	3516      	adds	r5, #22
 801448a:	b26d      	sxtb	r5, r5
 801448c:	e7ad      	b.n	80143ea <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801448e:	2301      	movs	r3, #1
 8014490:	2200      	movs	r2, #0
 8014492:	2103      	movs	r1, #3
 8014494:	2002      	movs	r0, #2
 8014496:	f7ff feb5 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801449a:	1b65      	subs	r5, r4, r5
 801449c:	3516      	adds	r5, #22
 801449e:	b26d      	sxtb	r5, r5
 80144a0:	e7a3      	b.n	80143ea <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80144a2:	2301      	movs	r3, #1
 80144a4:	2200      	movs	r2, #0
 80144a6:	2102      	movs	r1, #2
 80144a8:	4608      	mov	r0, r1
 80144aa:	f7ff feab 	bl	8014204 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80144ae:	1b65      	subs	r5, r4, r5
 80144b0:	350e      	adds	r5, #14
 80144b2:	b26d      	sxtb	r5, r5
 80144b4:	e799      	b.n	80143ea <SUBGRF_SetTxParams+0x4e>
	...

080144b8 <SUBGRF_SetModulationParams>:
{
 80144b8:	b510      	push	{r4, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80144be:	4b3e      	ldr	r3, [pc, #248]	; (80145b8 <SUBGRF_SetModulationParams+0x100>)
 80144c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144c4:	ab02      	add	r3, sp, #8
 80144c6:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80144ca:	7820      	ldrb	r0, [r4, #0]
 80144cc:	4b3b      	ldr	r3, [pc, #236]	; (80145bc <SUBGRF_SetModulationParams+0x104>)
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	4298      	cmp	r0, r3
 80144d2:	d106      	bne.n	80144e2 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80144d4:	7823      	ldrb	r3, [r4, #0]
 80144d6:	2b03      	cmp	r3, #3
 80144d8:	d82c      	bhi.n	8014534 <SUBGRF_SetModulationParams+0x7c>
 80144da:	e8df f003 	tbb	[pc, r3]
 80144de:	4205      	.short	0x4205
 80144e0:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80144e2:	f7ff ff41 	bl	8014368 <SUBGRF_SetPacketType>
 80144e6:	e7f5      	b.n	80144d4 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80144e8:	6862      	ldr	r2, [r4, #4]
 80144ea:	4b35      	ldr	r3, [pc, #212]	; (80145c0 <SUBGRF_SetModulationParams+0x108>)
 80144ec:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80144f0:	0c1a      	lsrs	r2, r3, #16
 80144f2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80144f6:	0a1a      	lsrs	r2, r3, #8
 80144f8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80144fc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8014500:	7b23      	ldrb	r3, [r4, #12]
 8014502:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8014506:	7b63      	ldrb	r3, [r4, #13]
 8014508:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801450c:	68a1      	ldr	r1, [r4, #8]
 801450e:	4a2d      	ldr	r2, [pc, #180]	; (80145c4 <SUBGRF_SetModulationParams+0x10c>)
 8014510:	2300      	movs	r3, #0
 8014512:	0648      	lsls	r0, r1, #25
 8014514:	09c9      	lsrs	r1, r1, #7
 8014516:	f7ec fb2b 	bl	8000b70 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801451a:	0c03      	lsrs	r3, r0, #16
 801451c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8014520:	0a03      	lsrs	r3, r0, #8
 8014522:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8014526:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801452a:	2208      	movs	r2, #8
 801452c:	4669      	mov	r1, sp
 801452e:	208b      	movs	r0, #139	; 0x8b
 8014530:	f7ff fc9e 	bl	8013e70 <SUBGRF_WriteCommand>
}
 8014534:	b002      	add	sp, #8
 8014536:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8014538:	6922      	ldr	r2, [r4, #16]
 801453a:	4b21      	ldr	r3, [pc, #132]	; (80145c0 <SUBGRF_SetModulationParams+0x108>)
 801453c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014540:	0c1a      	lsrs	r2, r3, #16
 8014542:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014546:	0a1a      	lsrs	r2, r3, #8
 8014548:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801454c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8014550:	7d23      	ldrb	r3, [r4, #20]
 8014552:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014556:	2204      	movs	r2, #4
 8014558:	4669      	mov	r1, sp
 801455a:	208b      	movs	r0, #139	; 0x8b
 801455c:	f7ff fc88 	bl	8013e70 <SUBGRF_WriteCommand>
        break;
 8014560:	e7e8      	b.n	8014534 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8014562:	7e23      	ldrb	r3, [r4, #24]
 8014564:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8014568:	7e63      	ldrb	r3, [r4, #25]
 801456a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801456e:	7ea3      	ldrb	r3, [r4, #26]
 8014570:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8014574:	7ee3      	ldrb	r3, [r4, #27]
 8014576:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801457a:	2204      	movs	r2, #4
 801457c:	4669      	mov	r1, sp
 801457e:	208b      	movs	r0, #139	; 0x8b
 8014580:	f7ff fc76 	bl	8013e70 <SUBGRF_WriteCommand>
        break;
 8014584:	e7d6      	b.n	8014534 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8014586:	6862      	ldr	r2, [r4, #4]
 8014588:	4b0d      	ldr	r3, [pc, #52]	; (80145c0 <SUBGRF_SetModulationParams+0x108>)
 801458a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801458e:	0c1a      	lsrs	r2, r3, #16
 8014590:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014594:	0a1a      	lsrs	r2, r3, #8
 8014596:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 801459a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801459e:	7b23      	ldrb	r3, [r4, #12]
 80145a0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80145a4:	7b63      	ldrb	r3, [r4, #13]
 80145a6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80145aa:	2205      	movs	r2, #5
 80145ac:	4669      	mov	r1, sp
 80145ae:	208b      	movs	r0, #139	; 0x8b
 80145b0:	f7ff fc5e 	bl	8013e70 <SUBGRF_WriteCommand>
}
 80145b4:	e7be      	b.n	8014534 <SUBGRF_SetModulationParams+0x7c>
 80145b6:	bf00      	nop
 80145b8:	08015728 	.word	0x08015728
 80145bc:	20003c03 	.word	0x20003c03
 80145c0:	3d090000 	.word	0x3d090000
 80145c4:	01e84800 	.word	0x01e84800

080145c8 <SUBGRF_SetPacketParams>:
{
 80145c8:	b510      	push	{r4, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80145ce:	ab01      	add	r3, sp, #4
 80145d0:	4a33      	ldr	r2, [pc, #204]	; (80146a0 <SUBGRF_SetPacketParams+0xd8>)
 80145d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80145d4:	c303      	stmia	r3!, {r0, r1}
 80145d6:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80145d8:	7820      	ldrb	r0, [r4, #0]
 80145da:	4b32      	ldr	r3, [pc, #200]	; (80146a4 <SUBGRF_SetPacketParams+0xdc>)
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	4298      	cmp	r0, r3
 80145e0:	d106      	bne.n	80145f0 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80145e2:	7823      	ldrb	r3, [r4, #0]
 80145e4:	2b03      	cmp	r3, #3
 80145e6:	d82a      	bhi.n	801463e <SUBGRF_SetPacketParams+0x76>
 80145e8:	e8df f003 	tbb	[pc, r3]
 80145ec:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80145f0:	f7ff feba 	bl	8014368 <SUBGRF_SetPacketType>
 80145f4:	e7f5      	b.n	80145e2 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80145f6:	7a63      	ldrb	r3, [r4, #9]
 80145f8:	2bf1      	cmp	r3, #241	; 0xf1
 80145fa:	d022      	beq.n	8014642 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80145fc:	2bf2      	cmp	r3, #242	; 0xf2
 80145fe:	d02a      	beq.n	8014656 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8014600:	8862      	ldrh	r2, [r4, #2]
 8014602:	0a11      	lsrs	r1, r2, #8
 8014604:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8014608:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801460c:	7922      	ldrb	r2, [r4, #4]
 801460e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8014612:	7962      	ldrb	r2, [r4, #5]
 8014614:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8014618:	79a2      	ldrb	r2, [r4, #6]
 801461a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801461e:	79e2      	ldrb	r2, [r4, #7]
 8014620:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8014624:	7a22      	ldrb	r2, [r4, #8]
 8014626:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801462a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801462e:	7aa3      	ldrb	r3, [r4, #10]
 8014630:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8014634:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8014636:	a901      	add	r1, sp, #4
 8014638:	208c      	movs	r0, #140	; 0x8c
 801463a:	f7ff fc19 	bl	8013e70 <SUBGRF_WriteCommand>
}
 801463e:	b004      	add	sp, #16
 8014640:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8014642:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014646:	f7ff fbb2 	bl	8013dae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801464a:	f248 0005 	movw	r0, #32773	; 0x8005
 801464e:	f7ff fbc2 	bl	8013dd6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8014652:	2302      	movs	r3, #2
 8014654:	e7d4      	b.n	8014600 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8014656:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801465a:	f7ff fba8 	bl	8013dae <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801465e:	f241 0021 	movw	r0, #4129	; 0x1021
 8014662:	f7ff fbb8 	bl	8013dd6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8014666:	2306      	movs	r3, #6
 8014668:	e7ca      	b.n	8014600 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801466a:	7b23      	ldrb	r3, [r4, #12]
 801466c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8014670:	2201      	movs	r2, #1
        break;
 8014672:	e7e0      	b.n	8014636 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8014674:	89e3      	ldrh	r3, [r4, #14]
 8014676:	0a1a      	lsrs	r2, r3, #8
 8014678:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801467c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8014680:	7c23      	ldrb	r3, [r4, #16]
 8014682:	4a09      	ldr	r2, [pc, #36]	; (80146a8 <SUBGRF_SetPacketParams+0xe0>)
 8014684:	7013      	strb	r3, [r2, #0]
 8014686:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801468a:	7c63      	ldrb	r3, [r4, #17]
 801468c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8014690:	7ca3      	ldrb	r3, [r4, #18]
 8014692:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8014696:	7ce3      	ldrb	r3, [r4, #19]
 8014698:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 801469c:	2206      	movs	r2, #6
        break;
 801469e:	e7ca      	b.n	8014636 <SUBGRF_SetPacketParams+0x6e>
 80146a0:	08015730 	.word	0x08015730
 80146a4:	20003c03 	.word	0x20003c03
 80146a8:	20003c01 	.word	0x20003c01

080146ac <SUBGRF_SetBufferBaseAddress>:
{
 80146ac:	b500      	push	{lr}
 80146ae:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 80146b0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 80146b4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80146b8:	2202      	movs	r2, #2
 80146ba:	a901      	add	r1, sp, #4
 80146bc:	208f      	movs	r0, #143	; 0x8f
 80146be:	f7ff fbd7 	bl	8013e70 <SUBGRF_WriteCommand>
}
 80146c2:	b003      	add	sp, #12
 80146c4:	f85d fb04 	ldr.w	pc, [sp], #4

080146c8 <SUBGRF_ReadCommand>:
{
 80146c8:	b510      	push	{r4, lr}
 80146ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80146d0:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80146d2:	460a      	mov	r2, r1
 80146d4:	4601      	mov	r1, r0
 80146d6:	4803      	ldr	r0, [pc, #12]	; (80146e4 <SUBGRF_ReadCommand+0x1c>)
 80146d8:	f7f2 fba6 	bl	8006e28 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146dc:	f384 8810 	msr	PRIMASK, r4
}
 80146e0:	bd10      	pop	{r4, pc}
 80146e2:	bf00      	nop
 80146e4:	20000248 	.word	0x20000248

080146e8 <SUBGRF_GetRssiInst>:
{
 80146e8:	b500      	push	{lr}
 80146ea:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80146ec:	2201      	movs	r2, #1
 80146ee:	a901      	add	r1, sp, #4
 80146f0:	2015      	movs	r0, #21
 80146f2:	f7ff ffe9 	bl	80146c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80146f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80146fa:	4240      	negs	r0, r0
}
 80146fc:	1040      	asrs	r0, r0, #1
 80146fe:	b003      	add	sp, #12
 8014700:	f85d fb04 	ldr.w	pc, [sp], #4

08014704 <SUBGRF_GetRxBufferStatus>:
{
 8014704:	b530      	push	{r4, r5, lr}
 8014706:	b083      	sub	sp, #12
 8014708:	4605      	mov	r5, r0
 801470a:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801470c:	2202      	movs	r2, #2
 801470e:	a901      	add	r1, sp, #4
 8014710:	2013      	movs	r0, #19
 8014712:	f7ff ffd9 	bl	80146c8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8014716:	f7ff fadf 	bl	8013cd8 <SUBGRF_GetPacketType>
 801471a:	2801      	cmp	r0, #1
 801471c:	d007      	beq.n	801472e <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801471e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014722:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8014724:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014728:	7023      	strb	r3, [r4, #0]
}
 801472a:	b003      	add	sp, #12
 801472c:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801472e:	4b05      	ldr	r3, [pc, #20]	; (8014744 <SUBGRF_GetRxBufferStatus+0x40>)
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	b2db      	uxtb	r3, r3
 8014734:	2b01      	cmp	r3, #1
 8014736:	d1f2      	bne.n	801471e <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8014738:	f240 7002 	movw	r0, #1794	; 0x702
 801473c:	f7ff fae2 	bl	8013d04 <SUBGRF_ReadRegister>
 8014740:	7028      	strb	r0, [r5, #0]
 8014742:	e7ef      	b.n	8014724 <SUBGRF_GetRxBufferStatus+0x20>
 8014744:	20003c01 	.word	0x20003c01

08014748 <SUBGRF_GetPayload>:
{
 8014748:	b570      	push	{r4, r5, r6, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	4606      	mov	r6, r0
 801474e:	460c      	mov	r4, r1
 8014750:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8014752:	2300      	movs	r3, #0
 8014754:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8014758:	f10d 0107 	add.w	r1, sp, #7
 801475c:	4620      	mov	r0, r4
 801475e:	f7ff ffd1 	bl	8014704 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8014762:	7822      	ldrb	r2, [r4, #0]
 8014764:	42aa      	cmp	r2, r5
 8014766:	d902      	bls.n	801476e <SUBGRF_GetPayload+0x26>
        return 1;
 8014768:	2001      	movs	r0, #1
}
 801476a:	b002      	add	sp, #8
 801476c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801476e:	4631      	mov	r1, r6
 8014770:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014774:	f7ff fb6c 	bl	8013e50 <SUBGRF_ReadBuffer>
    return 0;
 8014778:	2000      	movs	r0, #0
 801477a:	e7f6      	b.n	801476a <SUBGRF_GetPayload+0x22>

0801477c <SUBGRF_GetPacketStatus>:
{
 801477c:	b510      	push	{r4, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8014782:	2203      	movs	r2, #3
 8014784:	a901      	add	r1, sp, #4
 8014786:	2014      	movs	r0, #20
 8014788:	f7ff ff9e 	bl	80146c8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 801478c:	f7ff faa4 	bl	8013cd8 <SUBGRF_GetPacketType>
 8014790:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8014792:	b148      	cbz	r0, 80147a8 <SUBGRF_GetPacketStatus+0x2c>
 8014794:	2801      	cmp	r0, #1
 8014796:	d018      	beq.n	80147ca <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8014798:	2214      	movs	r2, #20
 801479a:	2100      	movs	r1, #0
 801479c:	4620      	mov	r0, r4
 801479e:	f000 fb20 	bl	8014de2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80147a2:	230f      	movs	r3, #15
 80147a4:	7023      	strb	r3, [r4, #0]
}
 80147a6:	e00e      	b.n	80147c6 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80147a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80147ac:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80147ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80147b2:	425b      	negs	r3, r3
 80147b4:	105b      	asrs	r3, r3, #1
 80147b6:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80147b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80147bc:	425b      	negs	r3, r3
 80147be:	105b      	asrs	r3, r3, #1
 80147c0:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	60a3      	str	r3, [r4, #8]
}
 80147c6:	b002      	add	sp, #8
 80147c8:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80147ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80147ce:	425b      	negs	r3, r3
 80147d0:	105b      	asrs	r3, r3, #1
 80147d2:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80147d4:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80147d8:	3302      	adds	r3, #2
 80147da:	109b      	asrs	r3, r3, #2
 80147dc:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80147de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80147e2:	425b      	negs	r3, r3
 80147e4:	105b      	asrs	r3, r3, #1
 80147e6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80147e8:	4b01      	ldr	r3, [pc, #4]	; (80147f0 <SUBGRF_GetPacketStatus+0x74>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	6123      	str	r3, [r4, #16]
            break;
 80147ee:	e7ea      	b.n	80147c6 <SUBGRF_GetPacketStatus+0x4a>
 80147f0:	20003bfc 	.word	0x20003bfc

080147f4 <SUBGRF_SetSwitch>:
{
 80147f4:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80147f6:	2901      	cmp	r1, #1
 80147f8:	d003      	beq.n	8014802 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80147fa:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80147fc:	f7ee fb46 	bl	8002e8c <RBI_ConfigRFSwitch>
}
 8014800:	bd10      	pop	{r4, pc}
 8014802:	4604      	mov	r4, r0
 8014804:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8014806:	2c01      	cmp	r4, #1
 8014808:	d003      	beq.n	8014812 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801480a:	2c02      	cmp	r4, #2
 801480c:	d1f6      	bne.n	80147fc <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 801480e:	2003      	movs	r0, #3
 8014810:	e7f4      	b.n	80147fc <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8014812:	2004      	movs	r0, #4
 8014814:	f7ff fa86 	bl	8013d24 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8014818:	2002      	movs	r0, #2
 801481a:	e7f6      	b.n	801480a <SUBGRF_SetSwitch+0x16>

0801481c <SUBGRF_SetRfTxPower>:
{
 801481c:	b538      	push	{r3, r4, r5, lr}
 801481e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8014820:	f7ee fb38 	bl	8002e94 <RBI_GetTxConfig>
    switch (TxConfig)
 8014824:	b148      	cbz	r0, 801483a <SUBGRF_SetRfTxPower+0x1e>
 8014826:	2802      	cmp	r0, #2
 8014828:	d10d      	bne.n	8014846 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801482a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801482c:	2202      	movs	r2, #2
 801482e:	4621      	mov	r1, r4
 8014830:	4628      	mov	r0, r5
 8014832:	f7ff fdb3 	bl	801439c <SUBGRF_SetTxParams>
}
 8014836:	4628      	mov	r0, r5
 8014838:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801483a:	2c0f      	cmp	r4, #15
 801483c:	dc01      	bgt.n	8014842 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 801483e:	2501      	movs	r5, #1
 8014840:	e7f4      	b.n	801482c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8014842:	2502      	movs	r5, #2
 8014844:	e7f2      	b.n	801482c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8014846:	2501      	movs	r5, #1
 8014848:	e7f0      	b.n	801482c <SUBGRF_SetRfTxPower+0x10>

0801484a <SUBGRF_GetRadioWakeUpTime>:
}
 801484a:	2001      	movs	r0, #1
 801484c:	4770      	bx	lr
	...

08014850 <HAL_SUBGHZ_TxCpltCallback>:
{
 8014850:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8014852:	4b02      	ldr	r3, [pc, #8]	; (801485c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2001      	movs	r0, #1
 8014858:	4798      	blx	r3
}
 801485a:	bd08      	pop	{r3, pc}
 801485c:	20003c04 	.word	0x20003c04

08014860 <HAL_SUBGHZ_RxCpltCallback>:
{
 8014860:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8014862:	4b02      	ldr	r3, [pc, #8]	; (801486c <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2002      	movs	r0, #2
 8014868:	4798      	blx	r3
}
 801486a:	bd08      	pop	{r3, pc}
 801486c:	20003c04 	.word	0x20003c04

08014870 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8014870:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8014872:	4b02      	ldr	r3, [pc, #8]	; (801487c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	2040      	movs	r0, #64	; 0x40
 8014878:	4798      	blx	r3
}
 801487a:	bd08      	pop	{r3, pc}
 801487c:	20003c04 	.word	0x20003c04

08014880 <HAL_SUBGHZ_CADStatusCallback>:
{
 8014880:	b508      	push	{r3, lr}
    switch (cadstatus)
 8014882:	b111      	cbz	r1, 801488a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8014884:	2901      	cmp	r1, #1
 8014886:	d005      	beq.n	8014894 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8014888:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801488a:	4b05      	ldr	r3, [pc, #20]	; (80148a0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2080      	movs	r0, #128	; 0x80
 8014890:	4798      	blx	r3
            break;
 8014892:	e7f9      	b.n	8014888 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8014894:	4b02      	ldr	r3, [pc, #8]	; (80148a0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f44f 7080 	mov.w	r0, #256	; 0x100
 801489c:	4798      	blx	r3
}
 801489e:	e7f3      	b.n	8014888 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80148a0:	20003c04 	.word	0x20003c04

080148a4 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80148a4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80148a6:	4b03      	ldr	r3, [pc, #12]	; (80148b4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80148ae:	4798      	blx	r3
}
 80148b0:	bd08      	pop	{r3, pc}
 80148b2:	bf00      	nop
 80148b4:	20003c04 	.word	0x20003c04

080148b8 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80148b8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80148ba:	4b02      	ldr	r3, [pc, #8]	; (80148c4 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2020      	movs	r0, #32
 80148c0:	4798      	blx	r3
}
 80148c2:	bd08      	pop	{r3, pc}
 80148c4:	20003c04 	.word	0x20003c04

080148c8 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80148c8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80148ca:	4b02      	ldr	r3, [pc, #8]	; (80148d4 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	2004      	movs	r0, #4
 80148d0:	4798      	blx	r3
}
 80148d2:	bd08      	pop	{r3, pc}
 80148d4:	20003c04 	.word	0x20003c04

080148d8 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80148d8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80148da:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	2008      	movs	r0, #8
 80148e0:	4798      	blx	r3
}
 80148e2:	bd08      	pop	{r3, pc}
 80148e4:	20003c04 	.word	0x20003c04

080148e8 <HAL_SUBGHZ_HeaderValidCallback>:
{
 80148e8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80148ea:	4b02      	ldr	r3, [pc, #8]	; (80148f4 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2010      	movs	r0, #16
 80148f0:	4798      	blx	r3
}
 80148f2:	bd08      	pop	{r3, pc}
 80148f4:	20003c04 	.word	0x20003c04

080148f8 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80148f8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80148fa:	4b03      	ldr	r3, [pc, #12]	; (8014908 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014902:	4798      	blx	r3
}
 8014904:	bd08      	pop	{r3, pc}
 8014906:	bf00      	nop
 8014908:	20003c04 	.word	0x20003c04

0801490c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 801490c:	4601      	mov	r1, r0
 801490e:	b188      	cbz	r0, 8014934 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014910:	2300      	movs	r3, #0
 8014912:	2b15      	cmp	r3, #21
 8014914:	d80d      	bhi.n	8014932 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8014916:	4618      	mov	r0, r3
 8014918:	4a07      	ldr	r2, [pc, #28]	; (8014938 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801491a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801491e:	428a      	cmp	r2, r1
 8014920:	d802      	bhi.n	8014928 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014922:	3301      	adds	r3, #1
 8014924:	b2db      	uxtb	r3, r3
 8014926:	e7f4      	b.n	8014912 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8014928:	4b03      	ldr	r3, [pc, #12]	; (8014938 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801492a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801492e:	7918      	ldrb	r0, [r3, #4]
 8014930:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8014932:	e7fe      	b.n	8014932 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8014934:	201f      	movs	r0, #31
}
 8014936:	4770      	bx	lr
 8014938:	0801671c 	.word	0x0801671c

0801493c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801493c:	b570      	push	{r4, r5, r6, lr}
 801493e:	b082      	sub	sp, #8
 8014940:	4605      	mov	r5, r0
 8014942:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8014944:	4b1d      	ldr	r3, [pc, #116]	; (80149bc <SUBGRF_GetCFO+0x80>)
 8014946:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8014948:	f640 0007 	movw	r0, #2055	; 0x807
 801494c:	f7ff f9da 	bl	8013d04 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8014950:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8014954:	3308      	adds	r3, #8
 8014956:	446b      	add	r3, sp
 8014958:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 801495c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8014960:	3301      	adds	r3, #1
 8014962:	fa02 f303 	lsl.w	r3, r2, r3
 8014966:	4a16      	ldr	r2, [pc, #88]	; (80149c0 <SUBGRF_GetCFO+0x84>)
 8014968:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 801496c:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8014970:	2807      	cmp	r0, #7
 8014972:	d921      	bls.n	80149b8 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8014974:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8014976:	fb03 f000 	mul.w	r0, r3, r0
 801497a:	2803      	cmp	r0, #3
 801497c:	d800      	bhi.n	8014980 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801497e:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8014980:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8014984:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8014988:	f7ff f9bc 	bl	8013d04 <SUBGRF_ReadRegister>
 801498c:	0206      	lsls	r6, r0, #8
 801498e:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8014992:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8014996:	f7ff f9b5 	bl	8013d04 <SUBGRF_ReadRegister>
 801499a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801499c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80149a0:	d003      	beq.n	80149aa <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80149a2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80149a6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80149aa:	096b      	lsrs	r3, r5, #5
 80149ac:	fb03 f000 	mul.w	r0, r3, r0
 80149b0:	11c0      	asrs	r0, r0, #7
 80149b2:	6020      	str	r0, [r4, #0]
}
 80149b4:	b002      	add	sp, #8
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80149b8:	2302      	movs	r3, #2
 80149ba:	e7dc      	b.n	8014976 <SUBGRF_GetCFO+0x3a>
 80149bc:	0c0a0804 	.word	0x0c0a0804
 80149c0:	01e84800 	.word	0x01e84800

080149c4 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80149c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149c8:	4770      	bx	lr

080149ca <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80149ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149ce:	4770      	bx	lr

080149d0 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80149d0:	4770      	bx	lr

080149d2 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80149d2:	2000      	movs	r0, #0
 80149d4:	4770      	bx	lr

080149d6 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80149d6:	2000      	movs	r0, #0
 80149d8:	4770      	bx	lr

080149da <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80149da:	4770      	bx	lr

080149dc <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80149dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149e0:	4770      	bx	lr

080149e2 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80149e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149e6:	4770      	bx	lr

080149e8 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80149e8:	4770      	bx	lr

080149ea <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80149ea:	4770      	bx	lr

080149ec <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80149ec:	4770      	bx	lr
	...

080149f0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80149f0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149f2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149f6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80149f8:	4b1e      	ldr	r3, [pc, #120]	; (8014a74 <TRACE_AllocateBufer+0x84>)
 80149fa:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80149fe:	8a1a      	ldrh	r2, [r3, #16]
 8014a00:	4596      	cmp	lr, r2
 8014a02:	d011      	beq.n	8014a28 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014a04:	4596      	cmp	lr, r2
 8014a06:	d921      	bls.n	8014a4c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014a08:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014a0c:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8014a0e:	4283      	cmp	r3, r0
 8014a10:	d81f      	bhi.n	8014a52 <TRACE_AllocateBufer+0x62>
 8014a12:	4282      	cmp	r2, r0
 8014a14:	d91d      	bls.n	8014a52 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8014a16:	4b17      	ldr	r3, [pc, #92]	; (8014a74 <TRACE_AllocateBufer+0x84>)
 8014a18:	2401      	movs	r4, #1
 8014a1a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014a1c:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014a20:	2400      	movs	r4, #0
 8014a22:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8014a24:	4613      	mov	r3, r2
 8014a26:	e014      	b.n	8014a52 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014a28:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014a2c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8014a2e:	4298      	cmp	r0, r3
 8014a30:	d30f      	bcc.n	8014a52 <TRACE_AllocateBufer+0x62>
 8014a32:	4282      	cmp	r2, r0
 8014a34:	d90d      	bls.n	8014a52 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8014a36:	4b0f      	ldr	r3, [pc, #60]	; (8014a74 <TRACE_AllocateBufer+0x84>)
 8014a38:	2401      	movs	r4, #1
 8014a3a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014a3c:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014a40:	f04f 0e00 	mov.w	lr, #0
 8014a44:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8014a48:	4613      	mov	r3, r2
 8014a4a:	e002      	b.n	8014a52 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8014a4c:	eba2 020e 	sub.w	r2, r2, lr
 8014a50:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8014a52:	4283      	cmp	r3, r0
 8014a54:	d90a      	bls.n	8014a6c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8014a56:	4a07      	ldr	r2, [pc, #28]	; (8014a74 <TRACE_AllocateBufer+0x84>)
 8014a58:	8a53      	ldrh	r3, [r2, #18]
 8014a5a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014a5c:	4403      	add	r3, r0
 8014a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014a62:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8014a64:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a66:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8014a6a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8014a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a70:	e7f9      	b.n	8014a66 <TRACE_AllocateBufer+0x76>
 8014a72:	bf00      	nop
 8014a74:	20004008 	.word	0x20004008

08014a78 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a78:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014a7c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8014a7e:	4a03      	ldr	r2, [pc, #12]	; (8014a8c <TRACE_Lock+0x14>)
 8014a80:	8ad3      	ldrh	r3, [r2, #22]
 8014a82:	3301      	adds	r3, #1
 8014a84:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a86:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014a8a:	4770      	bx	lr
 8014a8c:	20004008 	.word	0x20004008

08014a90 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a90:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014a94:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8014a96:	4a03      	ldr	r2, [pc, #12]	; (8014aa4 <TRACE_UnLock+0x14>)
 8014a98:	8ad3      	ldrh	r3, [r2, #22]
 8014a9a:	3b01      	subs	r3, #1
 8014a9c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a9e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014aa2:	4770      	bx	lr
 8014aa4:	20004008 	.word	0x20004008

08014aa8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8014aa8:	4b02      	ldr	r3, [pc, #8]	; (8014ab4 <TRACE_IsLocked+0xc>)
 8014aaa:	8ad8      	ldrh	r0, [r3, #22]
}
 8014aac:	3800      	subs	r0, #0
 8014aae:	bf18      	it	ne
 8014ab0:	2001      	movne	r0, #1
 8014ab2:	4770      	bx	lr
 8014ab4:	20004008 	.word	0x20004008

08014ab8 <UTIL_ADV_TRACE_Init>:
{
 8014ab8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8014aba:	2218      	movs	r2, #24
 8014abc:	2100      	movs	r1, #0
 8014abe:	4807      	ldr	r0, [pc, #28]	; (8014adc <UTIL_ADV_TRACE_Init+0x24>)
 8014ac0:	f000 f98f 	bl	8014de2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8014ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ac8:	2100      	movs	r1, #0
 8014aca:	4805      	ldr	r0, [pc, #20]	; (8014ae0 <UTIL_ADV_TRACE_Init+0x28>)
 8014acc:	f000 f989 	bl	8014de2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8014ad0:	4b04      	ldr	r3, [pc, #16]	; (8014ae4 <UTIL_ADV_TRACE_Init+0x2c>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4804      	ldr	r0, [pc, #16]	; (8014ae8 <UTIL_ADV_TRACE_Init+0x30>)
 8014ad6:	4798      	blx	r3
}
 8014ad8:	bd08      	pop	{r3, pc}
 8014ada:	bf00      	nop
 8014adc:	20004008 	.word	0x20004008
 8014ae0:	20003c08 	.word	0x20003c08
 8014ae4:	080157d0 	.word	0x080157d0
 8014ae8:	08014c69 	.word	0x08014c69

08014aec <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8014aec:	4b01      	ldr	r3, [pc, #4]	; (8014af4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8014aee:	6058      	str	r0, [r3, #4]
}
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	20004008 	.word	0x20004008

08014af8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8014af8:	4b01      	ldr	r3, [pc, #4]	; (8014b00 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8014afa:	7218      	strb	r0, [r3, #8]
}
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	20004008 	.word	0x20004008

08014b04 <TRACE_Send>:
{
 8014b04:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b06:	f3ef 8310 	mrs	r3, PRIMASK
 8014b0a:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014b0c:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8014b0e:	f7ff ffcb 	bl	8014aa8 <TRACE_IsLocked>
 8014b12:	b118      	cbz	r0, 8014b1c <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b14:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014b18:	2000      	movs	r0, #0
}
 8014b1a:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8014b1c:	f7ff ffac 	bl	8014a78 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8014b20:	4b1c      	ldr	r3, [pc, #112]	; (8014b94 <TRACE_Send+0x90>)
 8014b22:	8a1a      	ldrh	r2, [r3, #16]
 8014b24:	8a5b      	ldrh	r3, [r3, #18]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d02e      	beq.n	8014b88 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014b2a:	491a      	ldr	r1, [pc, #104]	; (8014b94 <TRACE_Send+0x90>)
 8014b2c:	7889      	ldrb	r1, [r1, #2]
 8014b2e:	2901      	cmp	r1, #1
 8014b30:	d017      	beq.n	8014b62 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014b32:	4a18      	ldr	r2, [pc, #96]	; (8014b94 <TRACE_Send+0x90>)
 8014b34:	7892      	ldrb	r2, [r2, #2]
 8014b36:	b932      	cbnz	r2, 8014b46 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014b38:	4a16      	ldr	r2, [pc, #88]	; (8014b94 <TRACE_Send+0x90>)
 8014b3a:	8a12      	ldrh	r2, [r2, #16]
 8014b3c:	4293      	cmp	r3, r2
 8014b3e:	d91e      	bls.n	8014b7e <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014b40:	1a9b      	subs	r3, r3, r2
 8014b42:	4a14      	ldr	r2, [pc, #80]	; (8014b94 <TRACE_Send+0x90>)
 8014b44:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014b46:	4e13      	ldr	r6, [pc, #76]	; (8014b94 <TRACE_Send+0x90>)
 8014b48:	8a33      	ldrh	r3, [r6, #16]
 8014b4a:	4d13      	ldr	r5, [pc, #76]	; (8014b98 <TRACE_Send+0x94>)
 8014b4c:	441d      	add	r5, r3
 8014b4e:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8014b52:	f7ed f817 	bl	8001b84 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014b56:	4b11      	ldr	r3, [pc, #68]	; (8014b9c <TRACE_Send+0x98>)
 8014b58:	68db      	ldr	r3, [r3, #12]
 8014b5a:	8ab1      	ldrh	r1, [r6, #20]
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	4798      	blx	r3
 8014b60:	e7db      	b.n	8014b1a <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8014b62:	480c      	ldr	r0, [pc, #48]	; (8014b94 <TRACE_Send+0x90>)
 8014b64:	8801      	ldrh	r1, [r0, #0]
 8014b66:	1a8a      	subs	r2, r1, r2
 8014b68:	b292      	uxth	r2, r2
 8014b6a:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014b6c:	2102      	movs	r1, #2
 8014b6e:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014b70:	2100      	movs	r1, #0
 8014b72:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014b74:	2a00      	cmp	r2, #0
 8014b76:	d1dc      	bne.n	8014b32 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014b78:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014b7a:	8201      	strh	r1, [r0, #16]
 8014b7c:	e7d9      	b.n	8014b32 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014b7e:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014b82:	4b04      	ldr	r3, [pc, #16]	; (8014b94 <TRACE_Send+0x90>)
 8014b84:	829a      	strh	r2, [r3, #20]
 8014b86:	e7de      	b.n	8014b46 <TRACE_Send+0x42>
      TRACE_UnLock();
 8014b88:	f7ff ff82 	bl	8014a90 <TRACE_UnLock>
 8014b8c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014b90:	2000      	movs	r0, #0
}
 8014b92:	e7c2      	b.n	8014b1a <TRACE_Send+0x16>
 8014b94:	20004008 	.word	0x20004008
 8014b98:	20003c08 	.word	0x20003c08
 8014b9c:	080157d0 	.word	0x080157d0

08014ba0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8014ba0:	b408      	push	{r3}
 8014ba2:	b530      	push	{r4, r5, lr}
 8014ba4:	b086      	sub	sp, #24
 8014ba6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8014bae:	4b2b      	ldr	r3, [pc, #172]	; (8014c5c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014bb0:	7a1b      	ldrb	r3, [r3, #8]
 8014bb2:	4283      	cmp	r3, r0
 8014bb4:	d34c      	bcc.n	8014c50 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8014bb6:	4b29      	ldr	r3, [pc, #164]	; (8014c5c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	4399      	bics	r1, r3
 8014bbc:	d14b      	bne.n	8014c56 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014bbe:	4b27      	ldr	r3, [pc, #156]	; (8014c5c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	b123      	cbz	r3, 8014bce <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8014bc4:	b11a      	cbz	r2, 8014bce <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8014bc6:	f10d 0102 	add.w	r1, sp, #2
 8014bca:	a801      	add	r0, sp, #4
 8014bcc:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8014bce:	ab0a      	add	r3, sp, #40	; 0x28
 8014bd0:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014bd2:	4622      	mov	r2, r4
 8014bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014bd8:	4821      	ldr	r0, [pc, #132]	; (8014c60 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014bda:	f000 fbf7 	bl	80153cc <tiny_vsnprintf_like>
 8014bde:	b285      	uxth	r5, r0
  TRACE_Lock();
 8014be0:	f7ff ff4a 	bl	8014a78 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8014be4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014be8:	18e8      	adds	r0, r5, r3
 8014bea:	4669      	mov	r1, sp
 8014bec:	b280      	uxth	r0, r0
 8014bee:	f7ff feff 	bl	80149f0 <TRACE_AllocateBufer>
 8014bf2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014bf6:	d026      	beq.n	8014c46 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	e00d      	b.n	8014c18 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014bfc:	f8bd 2000 	ldrh.w	r2, [sp]
 8014c00:	f103 0118 	add.w	r1, r3, #24
 8014c04:	4469      	add	r1, sp
 8014c06:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8014c0a:	4916      	ldr	r1, [pc, #88]	; (8014c64 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014c0c:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8014c0e:	3201      	adds	r2, #1
 8014c10:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8014c14:	3301      	adds	r3, #1
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d8ed      	bhi.n	8014bfc <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014c20:	f8bd 0000 	ldrh.w	r0, [sp]
 8014c24:	9b05      	ldr	r3, [sp, #20]
 8014c26:	4622      	mov	r2, r4
 8014c28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c2c:	4c0d      	ldr	r4, [pc, #52]	; (8014c64 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014c2e:	4420      	add	r0, r4
 8014c30:	f000 fbcc 	bl	80153cc <tiny_vsnprintf_like>
    TRACE_UnLock();
 8014c34:	f7ff ff2c 	bl	8014a90 <TRACE_UnLock>
    return TRACE_Send();
 8014c38:	f7ff ff64 	bl	8014b04 <TRACE_Send>
}
 8014c3c:	b006      	add	sp, #24
 8014c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c42:	b001      	add	sp, #4
 8014c44:	4770      	bx	lr
  TRACE_UnLock();
 8014c46:	f7ff ff23 	bl	8014a90 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8014c4a:	f06f 0002 	mvn.w	r0, #2
 8014c4e:	e7f5      	b.n	8014c3c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8014c50:	f06f 0004 	mvn.w	r0, #4
 8014c54:	e7f2      	b.n	8014c3c <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8014c56:	f06f 0005 	mvn.w	r0, #5
 8014c5a:	e7ef      	b.n	8014c3c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8014c5c:	20004008 	.word	0x20004008
 8014c60:	20004020 	.word	0x20004020
 8014c64:	20003c08 	.word	0x20003c08

08014c68 <TRACE_TxCpltCallback>:
{
 8014c68:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8014c6e:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014c70:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8014c72:	4b26      	ldr	r3, [pc, #152]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014c74:	789b      	ldrb	r3, [r3, #2]
 8014c76:	2b02      	cmp	r3, #2
 8014c78:	d016      	beq.n	8014ca8 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014c7a:	4a24      	ldr	r2, [pc, #144]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014c7c:	8a13      	ldrh	r3, [r2, #16]
 8014c7e:	8a90      	ldrh	r0, [r2, #20]
 8014c80:	4403      	add	r3, r0
 8014c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014c86:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8014c88:	4b20      	ldr	r3, [pc, #128]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014c8a:	8a1a      	ldrh	r2, [r3, #16]
 8014c8c:	8a5b      	ldrh	r3, [r3, #18]
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d003      	beq.n	8014c9a <TRACE_TxCpltCallback+0x32>
 8014c92:	481e      	ldr	r0, [pc, #120]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014c94:	8ac0      	ldrh	r0, [r0, #22]
 8014c96:	2801      	cmp	r0, #1
 8014c98:	d00b      	beq.n	8014cb2 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c9a:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8014c9e:	f7ec ff77 	bl	8001b90 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8014ca2:	f7ff fef5 	bl	8014a90 <TRACE_UnLock>
}
 8014ca6:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014ca8:	4b18      	ldr	r3, [pc, #96]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014cae:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8014cb0:	e7ea      	b.n	8014c88 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014cb2:	4816      	ldr	r0, [pc, #88]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014cb4:	7880      	ldrb	r0, [r0, #2]
 8014cb6:	2801      	cmp	r0, #1
 8014cb8:	d014      	beq.n	8014ce4 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014cba:	4a14      	ldr	r2, [pc, #80]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014cbc:	7892      	ldrb	r2, [r2, #2]
 8014cbe:	b932      	cbnz	r2, 8014cce <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014cc0:	4a12      	ldr	r2, [pc, #72]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014cc2:	8a12      	ldrh	r2, [r2, #16]
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	d91b      	bls.n	8014d00 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014cc8:	1a9b      	subs	r3, r3, r2
 8014cca:	4a10      	ldr	r2, [pc, #64]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014ccc:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014cce:	4b0f      	ldr	r3, [pc, #60]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014cd0:	8a1a      	ldrh	r2, [r3, #16]
 8014cd2:	480f      	ldr	r0, [pc, #60]	; (8014d10 <TRACE_TxCpltCallback+0xa8>)
 8014cd4:	4410      	add	r0, r2
 8014cd6:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014cda:	4a0e      	ldr	r2, [pc, #56]	; (8014d14 <TRACE_TxCpltCallback+0xac>)
 8014cdc:	68d2      	ldr	r2, [r2, #12]
 8014cde:	8a99      	ldrh	r1, [r3, #20]
 8014ce0:	4790      	blx	r2
 8014ce2:	e7e0      	b.n	8014ca6 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8014ce4:	4c09      	ldr	r4, [pc, #36]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014ce6:	8820      	ldrh	r0, [r4, #0]
 8014ce8:	1a82      	subs	r2, r0, r2
 8014cea:	b292      	uxth	r2, r2
 8014cec:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014cee:	2002      	movs	r0, #2
 8014cf0:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014cf6:	2a00      	cmp	r2, #0
 8014cf8:	d1df      	bne.n	8014cba <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014cfa:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014cfc:	8220      	strh	r0, [r4, #16]
 8014cfe:	e7dc      	b.n	8014cba <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014d00:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014d04:	4b01      	ldr	r3, [pc, #4]	; (8014d0c <TRACE_TxCpltCallback+0xa4>)
 8014d06:	829a      	strh	r2, [r3, #20]
 8014d08:	e7e1      	b.n	8014cce <TRACE_TxCpltCallback+0x66>
 8014d0a:	bf00      	nop
 8014d0c:	20004008 	.word	0x20004008
 8014d10:	20003c08 	.word	0x20003c08
 8014d14:	080157d0 	.word	0x080157d0

08014d18 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	4a02      	ldr	r2, [pc, #8]	; (8014d24 <UTIL_LPM_Init+0xc>)
 8014d1c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014d1e:	4a02      	ldr	r2, [pc, #8]	; (8014d28 <UTIL_LPM_Init+0x10>)
 8014d20:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014d22:	4770      	bx	lr
 8014d24:	20004224 	.word	0x20004224
 8014d28:	20004220 	.word	0x20004220

08014d2c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d2c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d30:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8014d32:	b141      	cbz	r1, 8014d46 <UTIL_LPM_SetStopMode+0x1a>
 8014d34:	2901      	cmp	r1, #1
 8014d36:	d103      	bne.n	8014d40 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014d38:	4906      	ldr	r1, [pc, #24]	; (8014d54 <UTIL_LPM_SetStopMode+0x28>)
 8014d3a:	680a      	ldr	r2, [r1, #0]
 8014d3c:	4302      	orrs	r2, r0
 8014d3e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d40:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014d44:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8014d46:	4903      	ldr	r1, [pc, #12]	; (8014d54 <UTIL_LPM_SetStopMode+0x28>)
 8014d48:	680a      	ldr	r2, [r1, #0]
 8014d4a:	ea22 0200 	bic.w	r2, r2, r0
 8014d4e:	600a      	str	r2, [r1, #0]
      break;
 8014d50:	e7f6      	b.n	8014d40 <UTIL_LPM_SetStopMode+0x14>
 8014d52:	bf00      	nop
 8014d54:	20004224 	.word	0x20004224

08014d58 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d58:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d5c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8014d5e:	b141      	cbz	r1, 8014d72 <UTIL_LPM_SetOffMode+0x1a>
 8014d60:	2901      	cmp	r1, #1
 8014d62:	d103      	bne.n	8014d6c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014d64:	4906      	ldr	r1, [pc, #24]	; (8014d80 <UTIL_LPM_SetOffMode+0x28>)
 8014d66:	680a      	ldr	r2, [r1, #0]
 8014d68:	4302      	orrs	r2, r0
 8014d6a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d6c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014d70:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8014d72:	4903      	ldr	r1, [pc, #12]	; (8014d80 <UTIL_LPM_SetOffMode+0x28>)
 8014d74:	680a      	ldr	r2, [r1, #0]
 8014d76:	ea22 0200 	bic.w	r2, r2, r0
 8014d7a:	600a      	str	r2, [r1, #0]
      break;
 8014d7c:	e7f6      	b.n	8014d6c <UTIL_LPM_SetOffMode+0x14>
 8014d7e:	bf00      	nop
 8014d80:	20004220 	.word	0x20004220

08014d84 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8014d84:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d86:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014d8a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8014d8c:	4b0c      	ldr	r3, [pc, #48]	; (8014dc0 <UTIL_LPM_EnterLowPower+0x3c>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	b13b      	cbz	r3, 8014da2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8014d92:	4d0c      	ldr	r5, [pc, #48]	; (8014dc4 <UTIL_LPM_EnterLowPower+0x40>)
 8014d94:	682b      	ldr	r3, [r5, #0]
 8014d96:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8014d98:	686b      	ldr	r3, [r5, #4]
 8014d9a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d9c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8014da0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8014da2:	4b09      	ldr	r3, [pc, #36]	; (8014dc8 <UTIL_LPM_EnterLowPower+0x44>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	b12b      	cbz	r3, 8014db4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8014da8:	4d06      	ldr	r5, [pc, #24]	; (8014dc4 <UTIL_LPM_EnterLowPower+0x40>)
 8014daa:	68ab      	ldr	r3, [r5, #8]
 8014dac:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8014dae:	68eb      	ldr	r3, [r5, #12]
 8014db0:	4798      	blx	r3
 8014db2:	e7f3      	b.n	8014d9c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8014db4:	4d03      	ldr	r5, [pc, #12]	; (8014dc4 <UTIL_LPM_EnterLowPower+0x40>)
 8014db6:	692b      	ldr	r3, [r5, #16]
 8014db8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8014dba:	696b      	ldr	r3, [r5, #20]
 8014dbc:	4798      	blx	r3
 8014dbe:	e7ed      	b.n	8014d9c <UTIL_LPM_EnterLowPower+0x18>
 8014dc0:	20004224 	.word	0x20004224
 8014dc4:	0801576c 	.word	0x0801576c
 8014dc8:	20004220 	.word	0x20004220

08014dcc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8014dcc:	e004      	b.n	8014dd8 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8014dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014dd2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	1e53      	subs	r3, r2, #1
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	2a00      	cmp	r2, #0
 8014dde:	d1f6      	bne.n	8014dce <UTIL_MEM_cpy_8+0x2>
    }
}
 8014de0:	4770      	bx	lr

08014de2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8014de2:	e002      	b.n	8014dea <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8014de4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8014de8:	461a      	mov	r2, r3
 8014dea:	1e53      	subs	r3, r2, #1
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	2a00      	cmp	r2, #0
 8014df0:	d1f8      	bne.n	8014de4 <UTIL_MEM_set_8+0x2>
  }
}
 8014df2:	4770      	bx	lr

08014df4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8014df4:	b082      	sub	sp, #8
 8014df6:	b082      	sub	sp, #8
 8014df8:	f10d 0c08 	add.w	ip, sp, #8
 8014dfc:	e90c 0006 	stmdb	ip, {r1, r2}
 8014e00:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014e02:	2200      	movs	r2, #0
 8014e04:	6002      	str	r2, [r0, #0]
 8014e06:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8014e08:	440b      	add	r3, r1
 8014e0a:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014e0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014e10:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014e14:	440a      	add	r2, r1
 8014e16:	b291      	uxth	r1, r2
 8014e18:	b212      	sxth	r2, r2
 8014e1a:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8014e1c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8014e20:	db04      	blt.n	8014e2c <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8014e22:	3301      	adds	r3, #1
 8014e24:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8014e26:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8014e2a:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8014e2c:	b002      	add	sp, #8
 8014e2e:	b002      	add	sp, #8
 8014e30:	4770      	bx	lr

08014e32 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014e32:	b082      	sub	sp, #8
 8014e34:	b082      	sub	sp, #8
 8014e36:	f10d 0c08 	add.w	ip, sp, #8
 8014e3a:	e90c 0006 	stmdb	ip, {r1, r2}
 8014e3e:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014e40:	2200      	movs	r2, #0
 8014e42:	6002      	str	r2, [r0, #0]
 8014e44:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8014e46:	1acb      	subs	r3, r1, r3
 8014e48:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8014e4a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014e4e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014e52:	1a52      	subs	r2, r2, r1
 8014e54:	b291      	uxth	r1, r2
 8014e56:	b212      	sxth	r2, r2
 8014e58:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8014e5a:	2a00      	cmp	r2, #0
 8014e5c:	db02      	blt.n	8014e64 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8014e5e:	b002      	add	sp, #8
 8014e60:	b002      	add	sp, #8
 8014e62:	4770      	bx	lr
    c.Seconds--;
 8014e64:	3b01      	subs	r3, #1
 8014e66:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8014e68:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8014e6c:	8081      	strh	r1, [r0, #4]
  return c;
 8014e6e:	e7f6      	b.n	8014e5e <SysTimeSub+0x2c>

08014e70 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014e70:	b530      	push	{r4, r5, lr}
 8014e72:	b089      	sub	sp, #36	; 0x24
 8014e74:	ac02      	add	r4, sp, #8
 8014e76:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	9304      	str	r3, [sp, #16]
 8014e7e:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014e82:	4d0b      	ldr	r5, [pc, #44]	; (8014eb0 <SysTimeSet+0x40>)
 8014e84:	692b      	ldr	r3, [r5, #16]
 8014e86:	a805      	add	r0, sp, #20
 8014e88:	4798      	blx	r3
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014e8e:	9a05      	ldr	r2, [sp, #20]
 8014e90:	9200      	str	r2, [sp, #0]
 8014e92:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014e96:	a806      	add	r0, sp, #24
 8014e98:	f7ff ffcb 	bl	8014e32 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8014e9c:	682b      	ldr	r3, [r5, #0]
 8014e9e:	9806      	ldr	r0, [sp, #24]
 8014ea0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8014ea2:	68ab      	ldr	r3, [r5, #8]
 8014ea4:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014ea8:	4798      	blx	r3
}
 8014eaa:	b009      	add	sp, #36	; 0x24
 8014eac:	bd30      	pop	{r4, r5, pc}
 8014eae:	bf00      	nop
 8014eb0:	08015790 	.word	0x08015790

08014eb4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8014eb4:	b530      	push	{r4, r5, lr}
 8014eb6:	b087      	sub	sp, #28
 8014eb8:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014eba:	2300      	movs	r3, #0
 8014ebc:	9304      	str	r3, [sp, #16]
 8014ebe:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8014ec2:	6003      	str	r3, [r0, #0]
 8014ec4:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014ec6:	4d0b      	ldr	r5, [pc, #44]	; (8014ef4 <SysTimeGet+0x40>)
 8014ec8:	692b      	ldr	r3, [r5, #16]
 8014eca:	a805      	add	r0, sp, #20
 8014ecc:	4798      	blx	r3
 8014ece:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014ed0:	68eb      	ldr	r3, [r5, #12]
 8014ed2:	4798      	blx	r3
 8014ed4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014ed8:	686b      	ldr	r3, [r5, #4]
 8014eda:	4798      	blx	r3
 8014edc:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8014ede:	9b05      	ldr	r3, [sp, #20]
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	9b04      	ldr	r3, [sp, #16]
 8014ee4:	aa02      	add	r2, sp, #8
 8014ee6:	ca06      	ldmia	r2, {r1, r2}
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f7ff ff83 	bl	8014df4 <SysTimeAdd>

  return sysTime;
}
 8014eee:	4620      	mov	r0, r4
 8014ef0:	b007      	add	sp, #28
 8014ef2:	bd30      	pop	{r4, r5, pc}
 8014ef4:	08015790 	.word	0x08015790

08014ef8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8014ef8:	b530      	push	{r4, r5, lr}
 8014efa:	b083      	sub	sp, #12
 8014efc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014efe:	2300      	movs	r3, #0
 8014f00:	9300      	str	r3, [sp, #0]
 8014f02:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014f06:	4b06      	ldr	r3, [pc, #24]	; (8014f20 <SysTimeGetMcuTime+0x28>)
 8014f08:	691b      	ldr	r3, [r3, #16]
 8014f0a:	466d      	mov	r5, sp
 8014f0c:	a801      	add	r0, sp, #4
 8014f0e:	4798      	blx	r3
 8014f10:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8014f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f16:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	b003      	add	sp, #12
 8014f1e:	bd30      	pop	{r4, r5, pc}
 8014f20:	08015790 	.word	0x08015790

08014f24 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8014f24:	b530      	push	{r4, r5, lr}
 8014f26:	b089      	sub	sp, #36	; 0x24
 8014f28:	ac02      	add	r4, sp, #8
 8014f2a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014f2e:	4d0c      	ldr	r5, [pc, #48]	; (8014f60 <SysTimeToMs+0x3c>)
 8014f30:	68eb      	ldr	r3, [r5, #12]
 8014f32:	4798      	blx	r3
 8014f34:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014f38:	686b      	ldr	r3, [r5, #4]
 8014f3a:	4798      	blx	r3
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8014f40:	9a07      	ldr	r2, [sp, #28]
 8014f42:	9200      	str	r2, [sp, #0]
 8014f44:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014f48:	a804      	add	r0, sp, #16
 8014f4a:	f7ff ff72 	bl	8014e32 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8014f4e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8014f52:	9a04      	ldr	r2, [sp, #16]
 8014f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f58:	fb00 3002 	mla	r0, r0, r2, r3
 8014f5c:	b009      	add	sp, #36	; 0x24
 8014f5e:	bd30      	pop	{r4, r5, pc}
 8014f60:	08015790 	.word	0x08015790

08014f64 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8014f64:	b530      	push	{r4, r5, lr}
 8014f66:	b087      	sub	sp, #28
 8014f68:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8014f6a:	4b12      	ldr	r3, [pc, #72]	; (8014fb4 <SysTimeFromMs+0x50>)
 8014f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8014f70:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8014f72:	9304      	str	r3, [sp, #16]
 8014f74:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8014f78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014f7c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8014f80:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8014f84:	2300      	movs	r3, #0
 8014f86:	9302      	str	r3, [sp, #8]
 8014f88:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014f8a:	4d0b      	ldr	r5, [pc, #44]	; (8014fb8 <SysTimeFromMs+0x54>)
 8014f8c:	68eb      	ldr	r3, [r5, #12]
 8014f8e:	4798      	blx	r3
 8014f90:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014f94:	686b      	ldr	r3, [r5, #4]
 8014f96:	4798      	blx	r3
 8014f98:	4603      	mov	r3, r0
 8014f9a:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8014f9c:	9a03      	ldr	r2, [sp, #12]
 8014f9e:	9200      	str	r2, [sp, #0]
 8014fa0:	aa06      	add	r2, sp, #24
 8014fa2:	e912 0006 	ldmdb	r2, {r1, r2}
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f7ff ff24 	bl	8014df4 <SysTimeAdd>
}
 8014fac:	4620      	mov	r0, r4
 8014fae:	b007      	add	sp, #28
 8014fb0:	bd30      	pop	{r4, r5, pc}
 8014fb2:	bf00      	nop
 8014fb4:	10624dd3 	.word	0x10624dd3
 8014fb8:	08015790 	.word	0x08015790

08014fbc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8014fbc:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8014fbe:	4b03      	ldr	r3, [pc, #12]	; (8014fcc <UTIL_TIMER_Init+0x10>)
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8014fc4:	4b02      	ldr	r3, [pc, #8]	; (8014fd0 <UTIL_TIMER_Init+0x14>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	4798      	blx	r3
}
 8014fca:	bd08      	pop	{r3, pc}
 8014fcc:	20004228 	.word	0x20004228
 8014fd0:	080157a4 	.word	0x080157a4

08014fd4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8014fd4:	b1a8      	cbz	r0, 8015002 <UTIL_TIMER_Create+0x2e>
{
 8014fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd8:	4617      	mov	r7, r2
 8014fda:	461e      	mov	r6, r3
 8014fdc:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8014fde:	b193      	cbz	r3, 8015006 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8014fe0:	2500      	movs	r5, #0
 8014fe2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8014fe4:	4b09      	ldr	r3, [pc, #36]	; (801500c <UTIL_TIMER_Create+0x38>)
 8014fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe8:	4608      	mov	r0, r1
 8014fea:	4798      	blx	r3
 8014fec:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8014fee:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8014ff0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8014ff2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8014ff4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8014ff6:	9b06      	ldr	r3, [sp, #24]
 8014ff8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8014ffa:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8014ffc:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8014ffe:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8015000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8015002:	2001      	movs	r0, #1
}
 8015004:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8015006:	2001      	movs	r0, #1
 8015008:	e7fa      	b.n	8015000 <UTIL_TIMER_Create+0x2c>
 801500a:	bf00      	nop
 801500c:	080157a4 	.word	0x080157a4

08015010 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8015010:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8015012:	4c03      	ldr	r4, [pc, #12]	; (8015020 <UTIL_TIMER_GetCurrentTime+0x10>)
 8015014:	69e3      	ldr	r3, [r4, #28]
 8015016:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8015018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801501a:	4798      	blx	r3
}
 801501c:	bd10      	pop	{r4, pc}
 801501e:	bf00      	nop
 8015020:	080157a4 	.word	0x080157a4

08015024 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8015028:	4d05      	ldr	r5, [pc, #20]	; (8015040 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801502a:	69eb      	ldr	r3, [r5, #28]
 801502c:	4798      	blx	r3
 801502e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8015030:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015032:	4630      	mov	r0, r6
 8015034:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8015036:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015038:	1a20      	subs	r0, r4, r0
 801503a:	4798      	blx	r3
}
 801503c:	bd70      	pop	{r4, r5, r6, pc}
 801503e:	bf00      	nop
 8015040:	080157a4 	.word	0x080157a4

08015044 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015044:	4b05      	ldr	r3, [pc, #20]	; (801505c <TimerExists+0x18>)
 8015046:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8015048:	e000      	b.n	801504c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801504a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 801504c:	b11b      	cbz	r3, 8015056 <TimerExists+0x12>
    if( cur == TimerObject )
 801504e:	4283      	cmp	r3, r0
 8015050:	d1fb      	bne.n	801504a <TimerExists+0x6>
      return true;
 8015052:	2001      	movs	r0, #1
  }
  return false;
}
 8015054:	4770      	bx	lr
  return false;
 8015056:	2000      	movs	r0, #0
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	20004228 	.word	0x20004228

08015060 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8015060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015062:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8015064:	4e09      	ldr	r6, [pc, #36]	; (801508c <TimerSetTimeout+0x2c>)
 8015066:	6a33      	ldr	r3, [r6, #32]
 8015068:	4798      	blx	r3
 801506a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 801506c:	2301      	movs	r3, #1
 801506e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8015070:	6827      	ldr	r7, [r4, #0]
 8015072:	69b6      	ldr	r6, [r6, #24]
 8015074:	47b0      	blx	r6
 8015076:	4428      	add	r0, r5
 8015078:	4287      	cmp	r7, r0
 801507a:	d202      	bcs.n	8015082 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801507c:	47b0      	blx	r6
 801507e:	4428      	add	r0, r5
 8015080:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8015082:	4b02      	ldr	r3, [pc, #8]	; (801508c <TimerSetTimeout+0x2c>)
 8015084:	689b      	ldr	r3, [r3, #8]
 8015086:	6820      	ldr	r0, [r4, #0]
 8015088:	4798      	blx	r3
}
 801508a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801508c:	080157a4 	.word	0x080157a4

08015090 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8015090:	b368      	cbz	r0, 80150ee <UTIL_TIMER_Stop+0x5e>
{
 8015092:	b510      	push	{r4, lr}
 8015094:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015096:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801509a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801509c:	4b15      	ldr	r3, [pc, #84]	; (80150f4 <UTIL_TIMER_Stop+0x64>)
 801509e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80150a0:	2301      	movs	r3, #1
 80150a2:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80150a4:	b1e1      	cbz	r1, 80150e0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80150a6:	2300      	movs	r3, #0
 80150a8:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80150aa:	4288      	cmp	r0, r1
 80150ac:	d006      	beq.n	80150bc <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80150ae:	460b      	mov	r3, r1
        while( cur != NULL )
 80150b0:	b1b3      	cbz	r3, 80150e0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d011      	beq.n	80150da <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80150b6:	4619      	mov	r1, r3
            cur = cur->Next;
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	e7f9      	b.n	80150b0 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80150bc:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80150be:	6948      	ldr	r0, [r1, #20]
 80150c0:	b120      	cbz	r0, 80150cc <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80150c2:	4b0c      	ldr	r3, [pc, #48]	; (80150f4 <UTIL_TIMER_Stop+0x64>)
 80150c4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80150c6:	f7ff ffcb 	bl	8015060 <TimerSetTimeout>
 80150ca:	e009      	b.n	80150e0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80150cc:	4b0a      	ldr	r3, [pc, #40]	; (80150f8 <UTIL_TIMER_Stop+0x68>)
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	4798      	blx	r3
            TimerListHead = NULL;
 80150d2:	4b08      	ldr	r3, [pc, #32]	; (80150f4 <UTIL_TIMER_Stop+0x64>)
 80150d4:	2200      	movs	r2, #0
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	e002      	b.n	80150e0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80150da:	695b      	ldr	r3, [r3, #20]
 80150dc:	b123      	cbz	r3, 80150e8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80150de:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150e0:	f384 8810 	msr	PRIMASK, r4
}
 80150e4:	2000      	movs	r0, #0
}
 80150e6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80150e8:	2300      	movs	r3, #0
 80150ea:	614b      	str	r3, [r1, #20]
 80150ec:	e7f8      	b.n	80150e0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80150ee:	2001      	movs	r0, #1
}
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop
 80150f4:	20004228 	.word	0x20004228
 80150f8:	080157a4 	.word	0x080157a4

080150fc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80150fc:	4b09      	ldr	r3, [pc, #36]	; (8015124 <TimerInsertTimer+0x28>)
 80150fe:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8015100:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8015102:	e001      	b.n	8015108 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8015104:	461a      	mov	r2, r3
        next = next->Next;
 8015106:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8015108:	6951      	ldr	r1, [r2, #20]
 801510a:	b139      	cbz	r1, 801511c <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 801510c:	6819      	ldr	r1, [r3, #0]
 801510e:	f8d0 c000 	ldr.w	ip, [r0]
 8015112:	458c      	cmp	ip, r1
 8015114:	d8f6      	bhi.n	8015104 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8015116:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8015118:	6143      	str	r3, [r0, #20]
        return;
 801511a:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 801511c:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801511e:	2300      	movs	r3, #0
 8015120:	6143      	str	r3, [r0, #20]
}
 8015122:	4770      	bx	lr
 8015124:	20004228 	.word	0x20004228

08015128 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8015128:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801512a:	4b05      	ldr	r3, [pc, #20]	; (8015140 <TimerInsertNewHeadTimer+0x18>)
 801512c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801512e:	b10b      	cbz	r3, 8015134 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8015130:	2200      	movs	r2, #0
 8015132:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8015134:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8015136:	4b02      	ldr	r3, [pc, #8]	; (8015140 <TimerInsertNewHeadTimer+0x18>)
 8015138:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801513a:	f7ff ff91 	bl	8015060 <TimerSetTimeout>
}
 801513e:	bd08      	pop	{r3, pc}
 8015140:	20004228 	.word	0x20004228

08015144 <UTIL_TIMER_Start>:
{
 8015144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8015146:	2800      	cmp	r0, #0
 8015148:	d036      	beq.n	80151b8 <UTIL_TIMER_Start+0x74>
 801514a:	4604      	mov	r4, r0
 801514c:	f7ff ff7a 	bl	8015044 <TimerExists>
 8015150:	2800      	cmp	r0, #0
 8015152:	d134      	bne.n	80151be <UTIL_TIMER_Start+0x7a>
 8015154:	7a65      	ldrb	r5, [r4, #9]
 8015156:	2d00      	cmp	r5, #0
 8015158:	d133      	bne.n	80151c2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801515a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801515e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8015160:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8015162:	4b19      	ldr	r3, [pc, #100]	; (80151c8 <UTIL_TIMER_Start+0x84>)
 8015164:	6a1b      	ldr	r3, [r3, #32]
 8015166:	4798      	blx	r3
    if( ticks < minValue )
 8015168:	4287      	cmp	r7, r0
 801516a:	d300      	bcc.n	801516e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 801516c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 801516e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8015170:	2300      	movs	r3, #0
 8015172:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8015174:	2201      	movs	r2, #1
 8015176:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8015178:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801517a:	4b14      	ldr	r3, [pc, #80]	; (80151cc <UTIL_TIMER_Start+0x88>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	b183      	cbz	r3, 80151a2 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8015180:	4b11      	ldr	r3, [pc, #68]	; (80151c8 <UTIL_TIMER_Start+0x84>)
 8015182:	699b      	ldr	r3, [r3, #24]
 8015184:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8015186:	6823      	ldr	r3, [r4, #0]
 8015188:	4418      	add	r0, r3
 801518a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801518c:	4b0f      	ldr	r3, [pc, #60]	; (80151cc <UTIL_TIMER_Start+0x88>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4298      	cmp	r0, r3
 8015194:	d20c      	bcs.n	80151b0 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8015196:	4620      	mov	r0, r4
 8015198:	f7ff ffc6 	bl	8015128 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801519c:	f386 8810 	msr	PRIMASK, r6
}
 80151a0:	e00b      	b.n	80151ba <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80151a2:	4b09      	ldr	r3, [pc, #36]	; (80151c8 <UTIL_TIMER_Start+0x84>)
 80151a4:	691b      	ldr	r3, [r3, #16]
 80151a6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80151a8:	4620      	mov	r0, r4
 80151aa:	f7ff ffbd 	bl	8015128 <TimerInsertNewHeadTimer>
 80151ae:	e7f5      	b.n	801519c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80151b0:	4620      	mov	r0, r4
 80151b2:	f7ff ffa3 	bl	80150fc <TimerInsertTimer>
 80151b6:	e7f1      	b.n	801519c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80151b8:	2501      	movs	r5, #1
}
 80151ba:	4628      	mov	r0, r5
 80151bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80151be:	2501      	movs	r5, #1
 80151c0:	e7fb      	b.n	80151ba <UTIL_TIMER_Start+0x76>
 80151c2:	2501      	movs	r5, #1
 80151c4:	e7f9      	b.n	80151ba <UTIL_TIMER_Start+0x76>
 80151c6:	bf00      	nop
 80151c8:	080157a4 	.word	0x080157a4
 80151cc:	20004228 	.word	0x20004228

080151d0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80151d0:	b198      	cbz	r0, 80151fa <UTIL_TIMER_SetPeriod+0x2a>
{
 80151d2:	b510      	push	{r4, lr}
 80151d4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80151d6:	4b0a      	ldr	r3, [pc, #40]	; (8015200 <UTIL_TIMER_SetPeriod+0x30>)
 80151d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151da:	4608      	mov	r0, r1
 80151dc:	4798      	blx	r3
 80151de:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80151e0:	4620      	mov	r0, r4
 80151e2:	f7ff ff2f 	bl	8015044 <TimerExists>
 80151e6:	b908      	cbnz	r0, 80151ec <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80151e8:	2000      	movs	r0, #0
}
 80151ea:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80151ec:	4620      	mov	r0, r4
 80151ee:	f7ff ff4f 	bl	8015090 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80151f2:	4620      	mov	r0, r4
 80151f4:	f7ff ffa6 	bl	8015144 <UTIL_TIMER_Start>
 80151f8:	e7f7      	b.n	80151ea <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80151fa:	2001      	movs	r0, #1
}
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop
 8015200:	080157a4 	.word	0x080157a4

08015204 <UTIL_TIMER_IRQ_Handler>:
{
 8015204:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015206:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801520a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 801520c:	4c1e      	ldr	r4, [pc, #120]	; (8015288 <UTIL_TIMER_IRQ_Handler+0x84>)
 801520e:	6963      	ldr	r3, [r4, #20]
 8015210:	4798      	blx	r3
 8015212:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8015214:	6923      	ldr	r3, [r4, #16]
 8015216:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8015218:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801521a:	4b1c      	ldr	r3, [pc, #112]	; (801528c <UTIL_TIMER_IRQ_Handler+0x88>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	b923      	cbnz	r3, 801522a <UTIL_TIMER_IRQ_Handler+0x26>
 8015220:	e018      	b.n	8015254 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8015222:	2200      	movs	r2, #0
 8015224:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8015226:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8015228:	b1a3      	cbz	r3, 8015254 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801522a:	681a      	ldr	r2, [r3, #0]
 801522c:	42a2      	cmp	r2, r4
 801522e:	d9f8      	bls.n	8015222 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8015230:	1a31      	subs	r1, r6, r0
 8015232:	440a      	add	r2, r1
 8015234:	601a      	str	r2, [r3, #0]
 8015236:	e7f6      	b.n	8015226 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8015238:	4b14      	ldr	r3, [pc, #80]	; (801528c <UTIL_TIMER_IRQ_Handler+0x88>)
 801523a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 801523c:	6962      	ldr	r2, [r4, #20]
 801523e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8015244:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8015246:	68e3      	ldr	r3, [r4, #12]
 8015248:	6920      	ldr	r0, [r4, #16]
 801524a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801524c:	8963      	ldrh	r3, [r4, #10]
 801524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015252:	d012      	beq.n	801527a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8015254:	4b0d      	ldr	r3, [pc, #52]	; (801528c <UTIL_TIMER_IRQ_Handler+0x88>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	b13b      	cbz	r3, 801526a <UTIL_TIMER_IRQ_Handler+0x66>
 801525a:	681c      	ldr	r4, [r3, #0]
 801525c:	2c00      	cmp	r4, #0
 801525e:	d0eb      	beq.n	8015238 <UTIL_TIMER_IRQ_Handler+0x34>
 8015260:	4b09      	ldr	r3, [pc, #36]	; (8015288 <UTIL_TIMER_IRQ_Handler+0x84>)
 8015262:	699b      	ldr	r3, [r3, #24]
 8015264:	4798      	blx	r3
 8015266:	4284      	cmp	r4, r0
 8015268:	d3e6      	bcc.n	8015238 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801526a:	4b08      	ldr	r3, [pc, #32]	; (801528c <UTIL_TIMER_IRQ_Handler+0x88>)
 801526c:	6818      	ldr	r0, [r3, #0]
 801526e:	b108      	cbz	r0, 8015274 <UTIL_TIMER_IRQ_Handler+0x70>
 8015270:	7a03      	ldrb	r3, [r0, #8]
 8015272:	b133      	cbz	r3, 8015282 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015274:	f385 8810 	msr	PRIMASK, r5
}
 8015278:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801527a:	4620      	mov	r0, r4
 801527c:	f7ff ff62 	bl	8015144 <UTIL_TIMER_Start>
 8015280:	e7e8      	b.n	8015254 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8015282:	f7ff feed 	bl	8015060 <TimerSetTimeout>
 8015286:	e7f5      	b.n	8015274 <UTIL_TIMER_IRQ_Handler+0x70>
 8015288:	080157a4 	.word	0x080157a4
 801528c:	20004228 	.word	0x20004228

08015290 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8015290:	4601      	mov	r1, r0
  int i = 0;
 8015292:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8015294:	e008      	b.n	80152a8 <ee_skip_atoi+0x18>
 8015296:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801529a:	1c53      	adds	r3, r2, #1
 801529c:	600b      	str	r3, [r1, #0]
 801529e:	7813      	ldrb	r3, [r2, #0]
 80152a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80152a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80152a8:	680a      	ldr	r2, [r1, #0]
 80152aa:	7813      	ldrb	r3, [r2, #0]
 80152ac:	3b30      	subs	r3, #48	; 0x30
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	2b09      	cmp	r3, #9
 80152b2:	d9f0      	bls.n	8015296 <ee_skip_atoi+0x6>
  return i;
}
 80152b4:	4770      	bx	lr
	...

080152b8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80152b8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80152bc:	b093      	sub	sp, #76	; 0x4c
 80152be:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80152c0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80152c2:	f016 0f40 	tst.w	r6, #64	; 0x40
 80152c6:	d110      	bne.n	80152ea <ee_number+0x32>
  char *dig = lower_digits;
 80152c8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80153c4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80152cc:	1e9f      	subs	r7, r3, #2
 80152ce:	2f22      	cmp	r7, #34	; 0x22
 80152d0:	d875      	bhi.n	80153be <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80152d2:	f016 0401 	ands.w	r4, r6, #1
 80152d6:	d00b      	beq.n	80152f0 <ee_number+0x38>
 80152d8:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80152dc:	f016 0f02 	tst.w	r6, #2
 80152e0:	d00f      	beq.n	8015302 <ee_number+0x4a>
  {
    if (num < 0)
 80152e2:	2a00      	cmp	r2, #0
 80152e4:	db07      	blt.n	80152f6 <ee_number+0x3e>
  sign = 0;
 80152e6:	2700      	movs	r7, #0
 80152e8:	e00c      	b.n	8015304 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80152ea:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80153c8 <ee_number+0x110>
 80152ee:	e7ed      	b.n	80152cc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80152f0:	f04f 0e20 	mov.w	lr, #32
 80152f4:	e7f2      	b.n	80152dc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80152f6:	4252      	negs	r2, r2
      size--;
 80152f8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80152fa:	3e01      	subs	r6, #1
 80152fc:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80152fe:	272d      	movs	r7, #45	; 0x2d
 8015300:	e000      	b.n	8015304 <ee_number+0x4c>
  sign = 0;
 8015302:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8015304:	bb5a      	cbnz	r2, 801535e <ee_number+0xa6>
    tmp[i++] = '0';
 8015306:	2330      	movs	r3, #48	; 0x30
 8015308:	f88d 3004 	strb.w	r3, [sp, #4]
 801530c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8015310:	45ac      	cmp	ip, r5
 8015312:	dd00      	ble.n	8015316 <ee_number+0x5e>
 8015314:	4665      	mov	r5, ip
  size -= precision;
 8015316:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015318:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801531a:	b31c      	cbz	r4, 8015364 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 801531c:	b11f      	cbz	r7, 8015326 <ee_number+0x6e>
 801531e:	f800 7b01 	strb.w	r7, [r0], #1
 8015322:	3901      	subs	r1, #1
 8015324:	d007      	beq.n	8015336 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8015326:	2b00      	cmp	r3, #0
 8015328:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801532c:	dd24      	ble.n	8015378 <ee_number+0xc0>
 801532e:	f800 eb01 	strb.w	lr, [r0], #1
 8015332:	3901      	subs	r1, #1
 8015334:	d1f7      	bne.n	8015326 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8015336:	b013      	add	sp, #76	; 0x4c
 8015338:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801533c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015340:	fb03 2216 	mls	r2, r3, r6, r2
 8015344:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8015348:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801534c:	446a      	add	r2, sp
 801534e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8015352:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015354:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8015358:	2a00      	cmp	r2, #0
 801535a:	d1ef      	bne.n	801533c <ee_number+0x84>
 801535c:	e7d8      	b.n	8015310 <ee_number+0x58>
  i = 0;
 801535e:	f04f 0c00 	mov.w	ip, #0
 8015362:	e7f9      	b.n	8015358 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015364:	2b00      	cmp	r3, #0
 8015366:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801536a:	ddd7      	ble.n	801531c <ee_number+0x64>
 801536c:	2220      	movs	r2, #32
 801536e:	f800 2b01 	strb.w	r2, [r0], #1
 8015372:	3901      	subs	r1, #1
 8015374:	d1f6      	bne.n	8015364 <ee_number+0xac>
 8015376:	e7de      	b.n	8015336 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8015378:	4565      	cmp	r5, ip
 801537a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 801537e:	dd05      	ble.n	801538c <ee_number+0xd4>
 8015380:	2230      	movs	r2, #48	; 0x30
 8015382:	f800 2b01 	strb.w	r2, [r0], #1
 8015386:	3901      	subs	r1, #1
 8015388:	d1f6      	bne.n	8015378 <ee_number+0xc0>
 801538a:	e7d4      	b.n	8015336 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801538c:	4662      	mov	r2, ip
 801538e:	2a00      	cmp	r2, #0
 8015390:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8015394:	dd09      	ble.n	80153aa <ee_number+0xf2>
 8015396:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801539a:	446a      	add	r2, sp
 801539c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80153a0:	f800 2b01 	strb.w	r2, [r0], #1
 80153a4:	3901      	subs	r1, #1
 80153a6:	d1f1      	bne.n	801538c <ee_number+0xd4>
 80153a8:	e7c5      	b.n	8015336 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80153b0:	ddc1      	ble.n	8015336 <ee_number+0x7e>
 80153b2:	2220      	movs	r2, #32
 80153b4:	f800 2b01 	strb.w	r2, [r0], #1
 80153b8:	3901      	subs	r1, #1
 80153ba:	d1f6      	bne.n	80153aa <ee_number+0xf2>
 80153bc:	e7bb      	b.n	8015336 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80153be:	2000      	movs	r0, #0
 80153c0:	e7b9      	b.n	8015336 <ee_number+0x7e>
 80153c2:	bf00      	nop
 80153c4:	080167cc 	.word	0x080167cc
 80153c8:	080167f4 	.word	0x080167f4

080153cc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80153cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153d0:	b087      	sub	sp, #28
 80153d2:	9205      	str	r2, [sp, #20]
 80153d4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80153d6:	1e0f      	subs	r7, r1, #0
 80153d8:	f340 80b8 	ble.w	801554c <tiny_vsnprintf_like+0x180>
 80153dc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80153de:	4604      	mov	r4, r0
 80153e0:	e004      	b.n	80153ec <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80153e2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80153e6:	9b05      	ldr	r3, [sp, #20]
 80153e8:	3301      	adds	r3, #1
 80153ea:	9305      	str	r3, [sp, #20]
 80153ec:	9905      	ldr	r1, [sp, #20]
 80153ee:	780a      	ldrb	r2, [r1, #0]
 80153f0:	b922      	cbnz	r2, 80153fc <tiny_vsnprintf_like+0x30>
 80153f2:	1ba3      	subs	r3, r4, r6
 80153f4:	1e78      	subs	r0, r7, #1
 80153f6:	4283      	cmp	r3, r0
 80153f8:	f2c0 80a2 	blt.w	8015540 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80153fc:	1ba3      	subs	r3, r4, r6
 80153fe:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8015402:	4543      	cmp	r3, r8
 8015404:	f280 809c 	bge.w	8015540 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8015408:	2a25      	cmp	r2, #37	; 0x25
 801540a:	d1ea      	bne.n	80153e2 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801540c:	1c4b      	adds	r3, r1, #1
 801540e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8015410:	784b      	ldrb	r3, [r1, #1]
 8015412:	2b30      	cmp	r3, #48	; 0x30
 8015414:	d020      	beq.n	8015458 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8015416:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801541a:	3b30      	subs	r3, #48	; 0x30
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b09      	cmp	r3, #9
 8015420:	d91d      	bls.n	801545e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8015422:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8015426:	9b05      	ldr	r3, [sp, #20]
 8015428:	781a      	ldrb	r2, [r3, #0]
 801542a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801542e:	2b20      	cmp	r3, #32
 8015430:	d867      	bhi.n	8015502 <tiny_vsnprintf_like+0x136>
 8015432:	e8df f003 	tbb	[pc, r3]
 8015436:	664a      	.short	0x664a
 8015438:	66666666 	.word	0x66666666
 801543c:	66666666 	.word	0x66666666
 8015440:	66621e66 	.word	0x66621e66
 8015444:	62666666 	.word	0x62666666
 8015448:	66666666 	.word	0x66666666
 801544c:	66666666 	.word	0x66666666
 8015450:	19662866 	.word	0x19662866
 8015454:	6666      	.short	0x6666
 8015456:	7c          	.byte	0x7c
 8015457:	00          	.byte	0x00
      flags |= ZEROPAD;
 8015458:	f04f 0901 	mov.w	r9, #1
 801545c:	e7dd      	b.n	801541a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801545e:	a805      	add	r0, sp, #20
 8015460:	f7ff ff16 	bl	8015290 <ee_skip_atoi>
 8015464:	4605      	mov	r5, r0
 8015466:	e7de      	b.n	8015426 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8015468:	230a      	movs	r3, #10
 801546a:	e031      	b.n	80154d0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801546c:	2320      	movs	r3, #32
 801546e:	f804 3b01 	strb.w	r3, [r4], #1
 8015472:	3d01      	subs	r5, #1
 8015474:	2d00      	cmp	r5, #0
 8015476:	dcf9      	bgt.n	801546c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8015478:	9b04      	ldr	r3, [sp, #16]
 801547a:	1d1a      	adds	r2, r3, #4
 801547c:	9204      	str	r2, [sp, #16]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8015484:	e7af      	b.n	80153e6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8015486:	9b04      	ldr	r3, [sp, #16]
 8015488:	1d1a      	adds	r2, r3, #4
 801548a:	9204      	str	r2, [sp, #16]
 801548c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8015490:	f1b8 0f00 	cmp.w	r8, #0
 8015494:	d003      	beq.n	801549e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8015496:	4640      	mov	r0, r8
 8015498:	f7ea fe72 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801549c:	e006      	b.n	80154ac <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801549e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015550 <tiny_vsnprintf_like+0x184>
 80154a2:	e7f8      	b.n	8015496 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80154a4:	2220      	movs	r2, #32
 80154a6:	f804 2b01 	strb.w	r2, [r4], #1
 80154aa:	461d      	mov	r5, r3
 80154ac:	1e6b      	subs	r3, r5, #1
 80154ae:	4285      	cmp	r5, r0
 80154b0:	dcf8      	bgt.n	80154a4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80154b2:	2200      	movs	r2, #0
 80154b4:	e006      	b.n	80154c4 <tiny_vsnprintf_like+0xf8>
 80154b6:	4643      	mov	r3, r8
 80154b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80154bc:	f804 1b01 	strb.w	r1, [r4], #1
 80154c0:	3201      	adds	r2, #1
 80154c2:	4698      	mov	r8, r3
 80154c4:	4282      	cmp	r2, r0
 80154c6:	dbf6      	blt.n	80154b6 <tiny_vsnprintf_like+0xea>
 80154c8:	e78d      	b.n	80153e6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80154ca:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80154ce:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80154d0:	f019 0f02 	tst.w	r9, #2
 80154d4:	d02f      	beq.n	8015536 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80154d6:	9a04      	ldr	r2, [sp, #16]
 80154d8:	1d11      	adds	r1, r2, #4
 80154da:	9104      	str	r1, [sp, #16]
 80154dc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80154de:	1ba1      	subs	r1, r4, r6
 80154e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80154e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154e8:	9001      	str	r0, [sp, #4]
 80154ea:	9500      	str	r5, [sp, #0]
 80154ec:	eba8 0101 	sub.w	r1, r8, r1
 80154f0:	4620      	mov	r0, r4
 80154f2:	f7ff fee1 	bl	80152b8 <ee_number>
 80154f6:	4604      	mov	r4, r0
 80154f8:	e775      	b.n	80153e6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80154fa:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80154fe:	230a      	movs	r3, #10
 8015500:	e7e6      	b.n	80154d0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8015502:	2a25      	cmp	r2, #37	; 0x25
 8015504:	d002      	beq.n	801550c <tiny_vsnprintf_like+0x140>
 8015506:	2325      	movs	r3, #37	; 0x25
 8015508:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801550c:	1ba3      	subs	r3, r4, r6
 801550e:	4598      	cmp	r8, r3
 8015510:	dd0f      	ble.n	8015532 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8015512:	9b05      	ldr	r3, [sp, #20]
 8015514:	781a      	ldrb	r2, [r3, #0]
 8015516:	b13a      	cbz	r2, 8015528 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8015518:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 801551c:	1ba3      	subs	r3, r4, r6
 801551e:	4598      	cmp	r8, r3
 8015520:	f73f af61 	bgt.w	80153e6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8015524:	230a      	movs	r3, #10
 8015526:	e7d3      	b.n	80154d0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8015528:	3b01      	subs	r3, #1
 801552a:	9305      	str	r3, [sp, #20]
 801552c:	e7f6      	b.n	801551c <tiny_vsnprintf_like+0x150>
        base = 16;
 801552e:	2310      	movs	r3, #16
 8015530:	e7ce      	b.n	80154d0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8015532:	230a      	movs	r3, #10
 8015534:	e7cc      	b.n	80154d0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8015536:	9a04      	ldr	r2, [sp, #16]
 8015538:	1d11      	adds	r1, r2, #4
 801553a:	9104      	str	r1, [sp, #16]
 801553c:	6812      	ldr	r2, [r2, #0]
 801553e:	e7ce      	b.n	80154de <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8015540:	2300      	movs	r3, #0
 8015542:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8015544:	1ba0      	subs	r0, r4, r6
}
 8015546:	b007      	add	sp, #28
 8015548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 801554c:	2000      	movs	r0, #0
 801554e:	e7fa      	b.n	8015546 <tiny_vsnprintf_like+0x17a>
 8015550:	0801681c 	.word	0x0801681c

08015554 <memset>:
 8015554:	4402      	add	r2, r0
 8015556:	4603      	mov	r3, r0
 8015558:	4293      	cmp	r3, r2
 801555a:	d100      	bne.n	801555e <memset+0xa>
 801555c:	4770      	bx	lr
 801555e:	f803 1b01 	strb.w	r1, [r3], #1
 8015562:	e7f9      	b.n	8015558 <memset+0x4>

08015564 <__libc_init_array>:
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	4d0d      	ldr	r5, [pc, #52]	; (801559c <__libc_init_array+0x38>)
 8015568:	4c0d      	ldr	r4, [pc, #52]	; (80155a0 <__libc_init_array+0x3c>)
 801556a:	1b64      	subs	r4, r4, r5
 801556c:	10a4      	asrs	r4, r4, #2
 801556e:	2600      	movs	r6, #0
 8015570:	42a6      	cmp	r6, r4
 8015572:	d109      	bne.n	8015588 <__libc_init_array+0x24>
 8015574:	4d0b      	ldr	r5, [pc, #44]	; (80155a4 <__libc_init_array+0x40>)
 8015576:	4c0c      	ldr	r4, [pc, #48]	; (80155a8 <__libc_init_array+0x44>)
 8015578:	f000 f8a6 	bl	80156c8 <_init>
 801557c:	1b64      	subs	r4, r4, r5
 801557e:	10a4      	asrs	r4, r4, #2
 8015580:	2600      	movs	r6, #0
 8015582:	42a6      	cmp	r6, r4
 8015584:	d105      	bne.n	8015592 <__libc_init_array+0x2e>
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	f855 3b04 	ldr.w	r3, [r5], #4
 801558c:	4798      	blx	r3
 801558e:	3601      	adds	r6, #1
 8015590:	e7ee      	b.n	8015570 <__libc_init_array+0xc>
 8015592:	f855 3b04 	ldr.w	r3, [r5], #4
 8015596:	4798      	blx	r3
 8015598:	3601      	adds	r6, #1
 801559a:	e7f2      	b.n	8015582 <__libc_init_array+0x1e>
 801559c:	08016830 	.word	0x08016830
 80155a0:	08016830 	.word	0x08016830
 80155a4:	08016830 	.word	0x08016830
 80155a8:	08016834 	.word	0x08016834

080155ac <memcpy>:
 80155ac:	440a      	add	r2, r1
 80155ae:	4291      	cmp	r1, r2
 80155b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80155b4:	d100      	bne.n	80155b8 <memcpy+0xc>
 80155b6:	4770      	bx	lr
 80155b8:	b510      	push	{r4, lr}
 80155ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80155c2:	4291      	cmp	r1, r2
 80155c4:	d1f9      	bne.n	80155ba <memcpy+0xe>
 80155c6:	bd10      	pop	{r4, pc}

080155c8 <floor>:
 80155c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80155cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155d0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80155d4:	2e13      	cmp	r6, #19
 80155d6:	460b      	mov	r3, r1
 80155d8:	4607      	mov	r7, r0
 80155da:	460c      	mov	r4, r1
 80155dc:	4605      	mov	r5, r0
 80155de:	dc32      	bgt.n	8015646 <floor+0x7e>
 80155e0:	2e00      	cmp	r6, #0
 80155e2:	da14      	bge.n	801560e <floor+0x46>
 80155e4:	a334      	add	r3, pc, #208	; (adr r3, 80156b8 <floor+0xf0>)
 80155e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ea:	f7ea fdd7 	bl	800019c <__adddf3>
 80155ee:	2200      	movs	r2, #0
 80155f0:	2300      	movs	r3, #0
 80155f2:	f7eb f807 	bl	8000604 <__aeabi_dcmpgt>
 80155f6:	b138      	cbz	r0, 8015608 <floor+0x40>
 80155f8:	2c00      	cmp	r4, #0
 80155fa:	da56      	bge.n	80156aa <floor+0xe2>
 80155fc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015600:	4325      	orrs	r5, r4
 8015602:	d055      	beq.n	80156b0 <floor+0xe8>
 8015604:	4c2e      	ldr	r4, [pc, #184]	; (80156c0 <floor+0xf8>)
 8015606:	2500      	movs	r5, #0
 8015608:	4623      	mov	r3, r4
 801560a:	462f      	mov	r7, r5
 801560c:	e025      	b.n	801565a <floor+0x92>
 801560e:	4a2d      	ldr	r2, [pc, #180]	; (80156c4 <floor+0xfc>)
 8015610:	fa42 f806 	asr.w	r8, r2, r6
 8015614:	ea01 0208 	and.w	r2, r1, r8
 8015618:	4302      	orrs	r2, r0
 801561a:	d01e      	beq.n	801565a <floor+0x92>
 801561c:	a326      	add	r3, pc, #152	; (adr r3, 80156b8 <floor+0xf0>)
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	f7ea fdbb 	bl	800019c <__adddf3>
 8015626:	2200      	movs	r2, #0
 8015628:	2300      	movs	r3, #0
 801562a:	f7ea ffeb 	bl	8000604 <__aeabi_dcmpgt>
 801562e:	2800      	cmp	r0, #0
 8015630:	d0ea      	beq.n	8015608 <floor+0x40>
 8015632:	2c00      	cmp	r4, #0
 8015634:	bfbe      	ittt	lt
 8015636:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801563a:	4133      	asrlt	r3, r6
 801563c:	18e4      	addlt	r4, r4, r3
 801563e:	ea24 0408 	bic.w	r4, r4, r8
 8015642:	2500      	movs	r5, #0
 8015644:	e7e0      	b.n	8015608 <floor+0x40>
 8015646:	2e33      	cmp	r6, #51	; 0x33
 8015648:	dd0b      	ble.n	8015662 <floor+0x9a>
 801564a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801564e:	d104      	bne.n	801565a <floor+0x92>
 8015650:	4602      	mov	r2, r0
 8015652:	f7ea fda3 	bl	800019c <__adddf3>
 8015656:	4607      	mov	r7, r0
 8015658:	460b      	mov	r3, r1
 801565a:	4638      	mov	r0, r7
 801565c:	4619      	mov	r1, r3
 801565e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015662:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015666:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801566a:	fa28 f802 	lsr.w	r8, r8, r2
 801566e:	ea10 0f08 	tst.w	r0, r8
 8015672:	d0f2      	beq.n	801565a <floor+0x92>
 8015674:	a310      	add	r3, pc, #64	; (adr r3, 80156b8 <floor+0xf0>)
 8015676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801567a:	f7ea fd8f 	bl	800019c <__adddf3>
 801567e:	2200      	movs	r2, #0
 8015680:	2300      	movs	r3, #0
 8015682:	f7ea ffbf 	bl	8000604 <__aeabi_dcmpgt>
 8015686:	2800      	cmp	r0, #0
 8015688:	d0be      	beq.n	8015608 <floor+0x40>
 801568a:	2c00      	cmp	r4, #0
 801568c:	da0a      	bge.n	80156a4 <floor+0xdc>
 801568e:	2e14      	cmp	r6, #20
 8015690:	d101      	bne.n	8015696 <floor+0xce>
 8015692:	3401      	adds	r4, #1
 8015694:	e006      	b.n	80156a4 <floor+0xdc>
 8015696:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801569a:	2301      	movs	r3, #1
 801569c:	40b3      	lsls	r3, r6
 801569e:	441d      	add	r5, r3
 80156a0:	42af      	cmp	r7, r5
 80156a2:	d8f6      	bhi.n	8015692 <floor+0xca>
 80156a4:	ea25 0508 	bic.w	r5, r5, r8
 80156a8:	e7ae      	b.n	8015608 <floor+0x40>
 80156aa:	2500      	movs	r5, #0
 80156ac:	462c      	mov	r4, r5
 80156ae:	e7ab      	b.n	8015608 <floor+0x40>
 80156b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80156b4:	e7a8      	b.n	8015608 <floor+0x40>
 80156b6:	bf00      	nop
 80156b8:	8800759c 	.word	0x8800759c
 80156bc:	7e37e43c 	.word	0x7e37e43c
 80156c0:	bff00000 	.word	0xbff00000
 80156c4:	000fffff 	.word	0x000fffff

080156c8 <_init>:
 80156c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ca:	bf00      	nop
 80156cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ce:	bc08      	pop	{r3}
 80156d0:	469e      	mov	lr, r3
 80156d2:	4770      	bx	lr

080156d4 <_fini>:
 80156d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d6:	bf00      	nop
 80156d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156da:	bc08      	pop	{r3}
 80156dc:	469e      	mov	lr, r3
 80156de:	4770      	bx	lr
