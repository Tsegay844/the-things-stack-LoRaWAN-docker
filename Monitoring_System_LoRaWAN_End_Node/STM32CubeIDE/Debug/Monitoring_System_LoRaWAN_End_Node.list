
Monitoring_System_LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015800  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  08015940  08015940  00025940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016af8  08016af8  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08016af8  08016af8  00026af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b00  08016b00  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016b00  08016b00  00026b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08016b08  08016b08  00026b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000108  20000000  08016b10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000042f8  20000108  20000108  00040108  2**2
                  ALLOC
 12 RAM1_region   00000000  20004400  20004400  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004400  20004400  00040108  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY
 17 .debug_info   00069d73  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000da91  00000000  00000000  000a83b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00020051  00000000  00000000  000b5e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003740  00000000  00000000  000d5ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002d5c  00000000  00000000  000d95e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002ed06  00000000  00000000  000dc33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005e1bf  00000000  00000000  0010b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000ee3be  00000000  00000000  00169201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00009db0  00000000  00000000  002575c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000098  00000000  00000000  00261370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000108 	.word	0x20000108
 800015c:	00000000 	.word	0x00000000
 8000160:	08015928 	.word	0x08015928

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000010c 	.word	0x2000010c
 800017c:	08015928 	.word	0x08015928

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2iz>:
 8000b24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30f      	bcc.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_f2iz+0x30>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	bf18      	it	ne
 8000b4a:	4240      	negne	r0, r0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2iz+0x3a>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d105      	bne.n	8000b6a <__aeabi_f2iz+0x46>
 8000b5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b62:	bf08      	it	eq
 8000b64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_f2uiz>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	d20e      	bcs.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b78:	d30b      	bcc.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b82:	d409      	bmi.n	8000b98 <__aeabi_f2uiz+0x28>
 8000b84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b9c:	d101      	bne.n	8000ba2 <__aeabi_f2uiz+0x32>
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_f2uiz+0x38>
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b970 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	460f      	mov	r7, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14a      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4694      	mov	ip, r2
 8000bf4:	d965      	bls.n	8000cc2 <__udivmoddi4+0xe2>
 8000bf6:	fab2 f382 	clz	r3, r2
 8000bfa:	b143      	cbz	r3, 8000c0e <__udivmoddi4+0x2e>
 8000bfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0a:	4317      	orrs	r7, r2
 8000c0c:	409c      	lsls	r4, r3
 8000c0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c12:	fa1f f58c 	uxth.w	r5, ip
 8000c16:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c1a:	0c22      	lsrs	r2, r4, #16
 8000c1c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c24:	fb01 f005 	mul.w	r0, r1, r5
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c30:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c34:	f080 811b 	bcs.w	8000e6e <__udivmoddi4+0x28e>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f240 8118 	bls.w	8000e6e <__udivmoddi4+0x28e>
 8000c3e:	3902      	subs	r1, #2
 8000c40:	4462      	add	r2, ip
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	b2a4      	uxth	r4, r4
 8000c46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c52:	fb00 f505 	mul.w	r5, r0, r5
 8000c56:	42a5      	cmp	r5, r4
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x90>
 8000c5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c62:	f080 8106 	bcs.w	8000e72 <__udivmoddi4+0x292>
 8000c66:	42a5      	cmp	r5, r4
 8000c68:	f240 8103 	bls.w	8000e72 <__udivmoddi4+0x292>
 8000c6c:	4464      	add	r4, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11e      	cbz	r6, 8000c82 <__udivmoddi4+0xa2>
 8000c7a:	40dc      	lsrs	r4, r3
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0xbc>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80ec 	beq.w	8000e68 <__udivmoddi4+0x288>
 8000c90:	2100      	movs	r1, #0
 8000c92:	e9c6 0500 	strd	r0, r5, [r6]
 8000c96:	4608      	mov	r0, r1
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	fab3 f183 	clz	r1, r3
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	d149      	bne.n	8000d38 <__udivmoddi4+0x158>
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d302      	bcc.n	8000cae <__udivmoddi4+0xce>
 8000ca8:	4282      	cmp	r2, r0
 8000caa:	f200 80f7 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000cae:	1a84      	subs	r4, r0, r2
 8000cb0:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d0e2      	beq.n	8000c82 <__udivmoddi4+0xa2>
 8000cbc:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc0:	e7df      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000cc2:	b902      	cbnz	r2, 8000cc6 <__udivmoddi4+0xe6>
 8000cc4:	deff      	udf	#255	; 0xff
 8000cc6:	fab2 f382 	clz	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 808f 	bne.w	8000dee <__udivmoddi4+0x20e>
 8000cd0:	1a8a      	subs	r2, r1, r2
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce0:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce4:	0c22      	lsrs	r2, r4, #16
 8000ce6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cea:	fb0e f005 	mul.w	r0, lr, r5
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f200 80ca 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d02:	4645      	mov	r5, r8
 8000d04:	1a12      	subs	r2, r2, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d0c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x14e>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x14c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80ba 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d36:	e79f      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4e:	40fd      	lsrs	r5, r7
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f901 	lsl.w	r9, r0, r1
 8000d56:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000d5a:	fa1f fe8c 	uxth.w	lr, ip
 8000d5e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb00 5518 	mls	r5, r0, r8, r5
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4464      	add	r4, ip
 8000d90:	1b64      	subs	r4, r4, r5
 8000d92:	b29d      	uxth	r5, r3
 8000d94:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d98:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da4:	45a6      	cmp	lr, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a6      	cmp	lr, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000dbe:	fba0 8302 	umull	r8, r3, r0, r2
 8000dc2:	eba4 040e 	sub.w	r4, r4, lr
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	461d      	mov	r5, r3
 8000dcc:	d355      	bcc.n	8000e7a <__udivmoddi4+0x29a>
 8000dce:	d052      	beq.n	8000e76 <__udivmoddi4+0x296>
 8000dd0:	b156      	cbz	r6, 8000de8 <__udivmoddi4+0x208>
 8000dd2:	ebb9 030e 	subs.w	r3, r9, lr
 8000dd6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dda:	fa04 f707 	lsl.w	r7, r4, r7
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	431f      	orrs	r7, r3
 8000de4:	e9c6 7400 	strd	r7, r4, [r6]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	f1c3 0120 	rsb	r1, r3, #32
 8000df2:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df6:	fa20 f201 	lsr.w	r2, r0, r1
 8000dfa:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfe:	409d      	lsls	r5, r3
 8000e00:	432a      	orrs	r2, r5
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0e:	fb07 1510 	mls	r5, r7, r0, r1
 8000e12:	0c11      	lsrs	r1, r2, #16
 8000e14:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e18:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1c:	428d      	cmp	r5, r1
 8000e1e:	fa04 f403 	lsl.w	r4, r4, r3
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428d      	cmp	r5, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1b49      	subs	r1, r1, r5
 8000e38:	b292      	uxth	r2, r2
 8000e3a:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3e:	fb07 1115 	mls	r1, r7, r5, r1
 8000e42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e46:	fb05 f10e 	mul.w	r1, r5, lr
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x280>
 8000e4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e52:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e56:	d216      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d914      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5c:	3d02      	subs	r5, #2
 8000e5e:	4462      	add	r2, ip
 8000e60:	1a52      	subs	r2, r2, r1
 8000e62:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e66:	e739      	b.n	8000cdc <__udivmoddi4+0xfc>
 8000e68:	4631      	mov	r1, r6
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000e6e:	4639      	mov	r1, r7
 8000e70:	e6e7      	b.n	8000c42 <__udivmoddi4+0x62>
 8000e72:	4610      	mov	r0, r2
 8000e74:	e6fc      	b.n	8000c70 <__udivmoddi4+0x90>
 8000e76:	45c1      	cmp	r9, r8
 8000e78:	d2aa      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7e:	eb63 050c 	sbc.w	r5, r3, ip
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4645      	mov	r5, r8
 8000e88:	e7ea      	b.n	8000e60 <__udivmoddi4+0x280>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	46d0      	mov	r8, sl
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	e733      	b.n	8000d04 <__udivmoddi4+0x124>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xd8>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e743      	b.n	8000d2e <__udivmoddi4+0x14e>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC_Init+0x50>)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_ADC_Init+0x54>)
 8000eb2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000eb8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ec6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ec8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eca:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000ee6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ee8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000eec:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eee:	f002 f95f 	bl	80031b0 <HAL_ADC_Init>
 8000ef2:	b900      	cbnz	r0, 8000ef6 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ef4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ef6:	f000 fc29 	bl	800174c <Error_Handler>
}
 8000efa:	e7fb      	b.n	8000ef4 <MX_ADC_Init+0x48>
 8000efc:	20000124 	.word	0x20000124
 8000f00:	40012400 	.word	0x40012400

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_ADC_MspInit+0x28>)
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d000      	beq.n	8000f0e <HAL_ADC_MspInit+0xa>
 8000f0c:	4770      	bx	lr
{
 8000f0e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f22:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f24:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40012400 	.word	0x40012400

08000f30 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_ADC_MspDeInit+0x18>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d000      	beq.n	8000f3a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f38:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	e7f7      	b.n	8000f38 <HAL_ADC_MspDeInit+0x8>
 8000f48:	40012400 	.word	0x40012400

08000f4c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f5a:	f7ff ffa7 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f60:	f002 fd5e 	bl	8003a20 <HAL_ADCEx_Calibration_Start>
 8000f64:	b9f8      	cbnz	r0, 8000fa6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f66:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f6c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6e:	a901      	add	r1, sp, #4
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f72:	f002 fa97 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000f76:	b9c8      	cbnz	r0, 8000fac <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 fc55 	bl	8003828 <HAL_ADC_Start>
 8000f7e:	b9c0      	cbnz	r0, 8000fb2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f80:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <ADC_ReadChannels+0x6c>)
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f86:	4620      	mov	r0, r4
 8000f88:	f002 fa2a 	bl	80033e0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 fd27 	bl	80039e0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f92:	4620      	mov	r0, r4
 8000f94:	f002 fa83 	bl	800349e <HAL_ADC_GetValue>
 8000f98:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 fcc0 	bl	8003920 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	b005      	add	sp, #20
 8000fa4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fa6:	f000 fbd1 	bl	800174c <Error_Handler>
 8000faa:	e7dc      	b.n	8000f66 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fac:	f000 fbce 	bl	800174c <Error_Handler>
 8000fb0:	e7e2      	b.n	8000f78 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fb2:	f000 fbcb 	bl	800174c <Error_Handler>
 8000fb6:	e7e3      	b.n	8000f80 <ADC_ReadChannels+0x34>
 8000fb8:	20000124 	.word	0x20000124

08000fbc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SYS_InitMeasurement+0x8>)
 8000fbe:	4a02      	ldr	r2, [pc, #8]	; (8000fc8 <SYS_InitMeasurement+0xc>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000124 	.word	0x20000124
 8000fc8:	40012400 	.word	0x40012400

08000fcc <SYS_GetBatteryLevel>:
{
 8000fcc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <SYS_GetBatteryLevel+0x38>)
 8000fd0:	f7ff ffbc 	bl	8000f4c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fd4:	b1a0      	cbz	r0, 8001000 <SYS_GetBatteryLevel+0x34>
 8000fd6:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <SYS_GetBatteryLevel+0x3c>)
 8000fda:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	4290      	cmp	r0, r2
 8000fe4:	d007      	beq.n	8000ff6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fe6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000fea:	fb02 f000 	mul.w	r0, r2, r0
 8000fee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff2:	b280      	uxth	r0, r0
 8000ff4:	e005      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <SYS_GetBatteryLevel+0x40>)
 8000ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffc:	b280      	uxth	r0, r0
 8000ffe:	e000      	b.n	8001002 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001000:	2000      	movs	r0, #0
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	b4002000 	.word	0xb4002000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	004c08d8 	.word	0x004c08d8

08001010 <SYS_GetTemperatureLevel>:
{
 8001010:	b510      	push	{r4, lr}
 8001012:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800101a:	f7ff ffd7 	bl	8000fcc <SYS_GetBatteryLevel>
 800101e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <SYS_GetTemperatureLevel+0x98>)
 8001022:	f7ff ff93 	bl	8000f4c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SYS_GetTemperatureLevel+0x9c>)
 8001028:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800102c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001030:	428a      	cmp	r2, r1
 8001032:	d01d      	beq.n	8001070 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001034:	fb00 f304 	mul.w	r3, r0, r4
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	481d      	ldr	r0, [pc, #116]	; (80010b0 <SYS_GetTemperatureLevel+0xa0>)
 800103c:	fba0 0303 	umull	r0, r3, r0, r3
 8001040:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	fb00 f303 	mul.w	r3, r0, r3
 800104a:	1a52      	subs	r2, r2, r1
 800104c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001050:	331e      	adds	r3, #30
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800105c:	b21b      	sxth	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001066:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800106a:	b200      	sxth	r0, r0
 800106c:	b002      	add	sp, #8
 800106e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001070:	fb04 f000 	mul.w	r0, r4, r0
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SYS_GetTemperatureLevel+0xa4>)
 8001076:	fba3 2300 	umull	r2, r3, r3, r0
 800107a:	1ac4      	subs	r4, r0, r3
 800107c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001080:	0adb      	lsrs	r3, r3, #11
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800108e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <SYS_GetTemperatureLevel+0xa8>)
 8001094:	fb82 1203 	smull	r1, r2, r2, r3
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 800109e:	331e      	adds	r3, #30
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80010a6:	e7d7      	b.n	8001058 <SYS_GetTemperatureLevel+0x48>
 80010a8:	b0001000 	.word	0xb0001000
 80010ac:	1fff7500 	.word	0x1fff7500
 80010b0:	09ee009f 	.word	0x09ee009f
 80010b4:	00100101 	.word	0x00100101
 80010b8:	68db8bad 	.word	0x68db8bad

080010bc <WakeUpTimer_Cb>:
/* USER CODE BEGIN Application */
static void WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
  UNUSED(context);
}
 80010bc:	4770      	bx	lr

080010be <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 80010be:	4770      	bx	lr

080010c0 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 80010c0:	4770      	bx	lr

080010c2 <StartDefaultTask>:
{
 80010c2:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 80010c4:	f001 f8a4 	bl	8002210 <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	2101      	movs	r1, #1
 80010ce:	4608      	mov	r0, r1
 80010d0:	f007 fb1a 	bl	8008708 <osThreadFlagsWait>
  for(;;)
 80010d4:	e7f8      	b.n	80010c8 <StartDefaultTask+0x6>
	...

080010d8 <PreSleepProcessing>:
{
 80010d8:	b538      	push	{r3, r4, r5, lr}
 80010da:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 80010dc:	6800      	ldr	r0, [r0, #0]
 80010de:	f7ff ffef 	bl	80010c0 <app_freertos_tick_to_ms>
 80010e2:	4601      	mov	r1, r0
  UTIL_TIMER_SetPeriod(&WakeUpTimer, WakeUpTimer_timeOut_ms);
 80010e4:	4d0a      	ldr	r5, [pc, #40]	; (8001110 <PreSleepProcessing+0x38>)
 80010e6:	4628      	mov	r0, r5
 80010e8:	f014 f9a0 	bl	801542c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&WakeUpTimer);
 80010ec:	4628      	mov	r0, r5
 80010ee:	f014 f957 	bl	80153a0 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 80010f2:	f014 f8bb 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <PreSleepProcessing+0x3c>)
 80010f8:	6018      	str	r0, [r3, #0]
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80010fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80010fe:	6913      	ldr	r3, [r2, #16]
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	6113      	str	r3, [r2, #16]
  UTIL_LPM_EnterLowPower();
 8001106:	f013 ff6b 	bl	8014fe0 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	6023      	str	r3, [r4, #0]
}
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	2000018c 	.word	0x2000018c
 8001114:	20000188 	.word	0x20000188

08001118 <PostSleepProcessing>:
{
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <PostSleepProcessing+0x58>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f014 f8af 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
 8001122:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <PostSleepProcessing+0x5c>)
 8001126:	f014 f8e1 	bl	80152ec <UTIL_TIMER_Stop>
  if (portNVIC_SYSTICK_CURRENT_VALUE_REG > (SleepDuration * CORE_TICK_RATE))
 800112a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <PostSleepProcessing+0x60>)
 8001132:	681c      	ldr	r4, [r3, #0]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <PostSleepProcessing+0x64>)
 8001136:	fba3 3404 	umull	r3, r4, r3, r4
 800113a:	09a4      	lsrs	r4, r4, #6
 800113c:	fb05 f304 	mul.w	r3, r5, r4
 8001140:	429a      	cmp	r2, r3
 8001142:	d911      	bls.n	8001168 <PostSleepProcessing+0x50>
    portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG - (app_freertos_ms_to_tick(SleepDuration) * CORE_TICK_RATE);
 8001144:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
 8001148:	69be      	ldr	r6, [r7, #24]
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff ffb7 	bl	80010be <app_freertos_ms_to_tick>
 8001150:	fb00 6614 	mls	r6, r0, r4, r6
 8001154:	617e      	str	r6, [r7, #20]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001156:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	611a      	str	r2, [r3, #16]
}
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    portNVIC_SYSTICK_LOAD_REG = CORE_TICK_RATE;
 8001168:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800116c:	615c      	str	r4, [r3, #20]
 800116e:	e7f2      	b.n	8001156 <PostSleepProcessing+0x3e>
 8001170:	20000188 	.word	0x20000188
 8001174:	2000018c 	.word	0x2000018c
 8001178:	20000074 	.word	0x20000074
 800117c:	10624dd3 	.word	0x10624dd3

08001180 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001180:	b510      	push	{r4, lr}
 8001182:	b082      	sub	sp, #8
  UTIL_TIMER_Create(&WakeUpTimer, 0, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 8001184:	2400      	movs	r4, #0
 8001186:	9400      	str	r4, [sp, #0]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_FREERTOS_Init+0x28>)
 800118a:	4622      	mov	r2, r4
 800118c:	4621      	mov	r1, r4
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_FREERTOS_Init+0x2c>)
 8001190:	f014 f84e 	bl	8015230 <UTIL_TIMER_Create>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <MX_FREERTOS_Init+0x30>)
 8001196:	4621      	mov	r1, r4
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_FREERTOS_Init+0x34>)
 800119a:	f007 fa01 	bl	80085a0 <osThreadNew>
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_FREERTOS_Init+0x38>)
 80011a0:	6018      	str	r0, [r3, #0]
}
 80011a2:	b002      	add	sp, #8
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	bf00      	nop
 80011a8:	080010bd 	.word	0x080010bd
 80011ac:	2000018c 	.word	0x2000018c
 80011b0:	080159d4 	.word	0x080159d4
 80011b4:	080010c3 	.word	0x080010c3
 80011b8:	200001a4 	.word	0x200001a4

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011bc:	b500      	push	{lr}
 80011be:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011c6:	f042 0204 	orr.w	r2, r2, #4
 80011ca:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011ce:	f002 0204 	and.w	r2, r2, #4
 80011d2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011d4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d8:	f042 0201 	orr.w	r2, r2, #1
 80011dc:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011e6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2107      	movs	r1, #7
 80011ec:	200f      	movs	r0, #15
 80011ee:	f002 fcc9 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f002 fcfe 	bl	8003bf4 <HAL_NVIC_EnableIRQ>

}
 80011f8:	b003      	add	sp, #12
 80011fa:	f85d fb04 	ldr.w	pc, [sp], #4

080011fe <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80011fe:	2300      	movs	r3, #0
 8001200:	e001      	b.n	8001206 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001202:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001204:	3308      	adds	r3, #8
 8001206:	428b      	cmp	r3, r1
 8001208:	d20a      	bcs.n	8001220 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800120a:	6842      	ldr	r2, [r0, #4]
 800120c:	f8d0 c000 	ldr.w	ip, [r0]
 8001210:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8001214:	bf08      	it	eq
 8001216:	f1bc 3fff 	cmpeq.w	ip, #4294967295	; 0xffffffff
 800121a:	d0f2      	beq.n	8001202 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800121c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800121e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001220:	2000      	movs	r0, #0
 8001222:	4770      	bx	lr

08001224 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001224:	b130      	cbz	r0, 8001234 <FLASH_IF_INT_Read+0x10>
{
 8001226:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001228:	b139      	cbz	r1, 800123a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800122a:	b292      	uxth	r2, r2
 800122c:	f013 fefc 	bl	8015028 <UTIL_MEM_cpy_8>
  return ret_status;
 8001230:	2000      	movs	r0, #0
}
 8001232:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001234:	f06f 0005 	mvn.w	r0, #5
}
 8001238:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800123a:	f06f 0005 	mvn.w	r0, #5
 800123e:	e7f8      	b.n	8001232 <FLASH_IF_INT_Read+0xe>

08001240 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001240:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001242:	f002 ffa9 	bl	8004198 <HAL_FLASH_Unlock>
 8001246:	b978      	cbnz	r0, 8001268 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <FLASH_IF_INT_Clear_Error+0x30>)
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001250:	619a      	str	r2, [r3, #24]
 8001252:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001256:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001258:	f002 ffb6 	bl	80041c8 <HAL_FLASH_Lock>
 800125c:	b908      	cbnz	r0, 8001262 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800125e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001260:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001262:	f06f 0004 	mvn.w	r0, #4
 8001266:	e7fb      	b.n	8001260 <FLASH_IF_INT_Clear_Error+0x20>
 8001268:	f06f 0004 	mvn.w	r0, #4
 800126c:	e7f8      	b.n	8001260 <FLASH_IF_INT_Clear_Error+0x20>
 800126e:	bf00      	nop
 8001270:	58004000 	.word	0x58004000

08001274 <FLASH_IF_INT_Erase>:
{
 8001274:	b570      	push	{r4, r5, r6, lr}
 8001276:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800127c:	2800      	cmp	r0, #0
 800127e:	d039      	beq.n	80012f4 <FLASH_IF_INT_Erase+0x80>
 8001280:	460e      	mov	r6, r1
 8001282:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001284:	f7ff ffdc 	bl	8001240 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001288:	4605      	mov	r5, r0
 800128a:	b110      	cbz	r0, 8001292 <FLASH_IF_INT_Erase+0x1e>
}
 800128c:	4628      	mov	r0, r5
 800128e:	b004      	add	sp, #16
 8001290:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001292:	f002 ff81 	bl	8004198 <HAL_FLASH_Unlock>
 8001296:	bb80      	cbnz	r0, 80012fa <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001298:	2302      	movs	r3, #2
 800129a:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 800129c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <FLASH_IF_INT_Erase+0x8c>)
 80012a2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <FLASH_IF_INT_Erase+0x90>)
 80012a8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80012ac:	fbb3 fcf1 	udiv	ip, r3, r1
 80012b0:	fb01 331c 	mls	r3, r1, ip, r3
 80012b4:	0adb      	lsrs	r3, r3, #11
 80012b6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80012b8:	19a1      	adds	r1, r4, r6
 80012ba:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 80012be:	3901      	subs	r1, #1
 80012c0:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 80012c4:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 80012c8:	fbb1 f0f2 	udiv	r0, r1, r2
 80012cc:	fb02 1110 	mls	r1, r2, r0, r1
 80012d0:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 80012d4:	3301      	adds	r3, #1
 80012d6:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80012d8:	a903      	add	r1, sp, #12
 80012da:	4668      	mov	r0, sp
 80012dc:	f003 f840 	bl	8004360 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80012e0:	b118      	cbz	r0, 80012ea <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d004      	beq.n	80012f0 <FLASH_IF_INT_Erase+0x7c>
 80012e6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80012ea:	f002 ff6d 	bl	80041c8 <HAL_FLASH_Lock>
 80012ee:	e7cd      	b.n	800128c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80012f0:	2501      	movs	r5, #1
 80012f2:	e7fa      	b.n	80012ea <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80012f4:	f06f 0505 	mvn.w	r5, #5
 80012f8:	e7c8      	b.n	800128c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80012fa:	f06f 0504 	mvn.w	r5, #4
 80012fe:	e7c5      	b.n	800128c <FLASH_IF_INT_Erase+0x18>
 8001300:	1fff7000 	.word	0x1fff7000
 8001304:	03fffc00 	.word	0x03fffc00

08001308 <FLASH_IF_INT_Write>:
{
 8001308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130c:	b089      	sub	sp, #36	; 0x24
 800130e:	9003      	str	r0, [sp, #12]
 8001310:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001312:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001314:	2800      	cmp	r0, #0
 8001316:	f000 80a9 	beq.w	800146c <FLASH_IF_INT_Write+0x164>
 800131a:	4683      	mov	fp, r0
 800131c:	2900      	cmp	r1, #0
 800131e:	f000 80a9 	beq.w	8001474 <FLASH_IF_INT_Write+0x16c>
 8001322:	f012 0f07 	tst.w	r2, #7
 8001326:	f040 80a9 	bne.w	800147c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800132a:	f010 0307 	ands.w	r3, r0, #7
 800132e:	9305      	str	r3, [sp, #20]
 8001330:	f040 80a8 	bne.w	8001484 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001334:	f7ff ff84 	bl	8001240 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001338:	9002      	str	r0, [sp, #8]
 800133a:	b118      	cbz	r0, 8001344 <FLASH_IF_INT_Write+0x3c>
}
 800133c:	9802      	ldr	r0, [sp, #8]
 800133e:	b009      	add	sp, #36	; 0x24
 8001340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001344:	f002 ff28 	bl	8004198 <HAL_FLASH_Unlock>
 8001348:	2800      	cmp	r0, #0
 800134a:	f040 809f 	bne.w	800148c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800134e:	9c03      	ldr	r4, [sp, #12]
 8001350:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <FLASH_IF_INT_Write+0x18c>)
 8001356:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 800135a:	494f      	ldr	r1, [pc, #316]	; (8001498 <FLASH_IF_INT_Write+0x190>)
 800135c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001360:	fbb2 f3f1 	udiv	r3, r2, r1
 8001364:	fb01 2213 	mls	r2, r1, r3, r2
 8001368:	0ad3      	lsrs	r3, r2, #11
 800136a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800136c:	9b04      	ldr	r3, [sp, #16]
 800136e:	18e3      	adds	r3, r4, r3
 8001370:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001374:	3b01      	subs	r3, #1
 8001376:	fbb3 f0f1 	udiv	r0, r3, r1
 800137a:	fb01 3310 	mls	r3, r1, r0, r3
 800137e:	0adb      	lsrs	r3, r3, #11
 8001380:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001384:	3301      	adds	r3, #1
 8001386:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001388:	2b01      	cmp	r3, #1
 800138a:	d906      	bls.n	800139a <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800138c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001390:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001394:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001398:	e02f      	b.n	80013fa <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 800139a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800139e:	e7f9      	b.n	8001394 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80013a0:	46c8      	mov	r8, r9
          current_source = uSource;
 80013a2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80013a4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013a6:	9d05      	ldr	r5, [sp, #20]
 80013a8:	4545      	cmp	r5, r8
 80013aa:	d215      	bcs.n	80013d8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80013ac:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80013ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80013b2:	4621      	mov	r1, r4
 80013b4:	2001      	movs	r0, #1
 80013b6:	f002 ff4b 	bl	8004250 <HAL_FLASH_Program>
 80013ba:	b950      	cbnz	r0, 80013d2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	6862      	ldr	r2, [r4, #4]
 80013c0:	59e9      	ldr	r1, [r5, r7]
 80013c2:	6873      	ldr	r3, [r6, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	bf08      	it	eq
 80013c8:	4288      	cmpeq	r0, r1
 80013ca:	d141      	bne.n	8001450 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80013cc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80013ce:	3508      	adds	r5, #8
 80013d0:	e7ea      	b.n	80013a8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80013d2:	f06f 0303 	mvn.w	r3, #3
 80013d6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80013d8:	9b02      	ldr	r3, [sp, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d13f      	bne.n	800145e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80013de:	44cb      	add	fp, r9
        uSource += length;
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	444b      	add	r3, r9
 80013e4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80013e6:	9b04      	ldr	r3, [sp, #16]
 80013e8:	eba3 0909 	sub.w	r9, r3, r9
 80013ec:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80013f0:	bf28      	it	cs
 80013f2:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80013f6:	f10a 0a01 	add.w	sl, sl, #1
 80013fa:	9b06      	ldr	r3, [sp, #24]
 80013fc:	9a07      	ldr	r2, [sp, #28]
 80013fe:	4413      	add	r3, r2
 8001400:	4553      	cmp	r3, sl
 8001402:	d92c      	bls.n	800145e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001404:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001408:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800140a:	4649      	mov	r1, r9
 800140c:	9803      	ldr	r0, [sp, #12]
 800140e:	f7ff fef6 	bl	80011fe <FLASH_IF_INT_IsEmpty>
 8001412:	2800      	cmp	r0, #0
 8001414:	d0c4      	beq.n	80013a0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <FLASH_IF_INT_Write+0x194>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	b1e8      	cbz	r0, 8001458 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800141c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001420:	4621      	mov	r1, r4
 8001422:	f7ff feff 	bl	8001224 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <FLASH_IF_INT_Write+0x194>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800142e:	fa1f f289 	uxth.w	r2, r9
 8001432:	9901      	ldr	r1, [sp, #4]
 8001434:	4418      	add	r0, r3
 8001436:	f013 fdf7 	bl	8015028 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff ff18 	bl	8001274 <FLASH_IF_INT_Erase>
 8001444:	b970      	cbnz	r0, 8001464 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <FLASH_IF_INT_Write+0x194>)
 8001448:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800144a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800144e:	e7aa      	b.n	80013a6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001450:	f06f 0303 	mvn.w	r3, #3
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	e7bf      	b.n	80013d8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001458:	f06f 0305 	mvn.w	r3, #5
 800145c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800145e:	f002 feb3 	bl	80041c8 <HAL_FLASH_Lock>
 8001462:	e76b      	b.n	800133c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001464:	f06f 0301 	mvn.w	r3, #1
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	e7f8      	b.n	800145e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800146c:	f06f 0305 	mvn.w	r3, #5
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	e763      	b.n	800133c <FLASH_IF_INT_Write+0x34>
 8001474:	f06f 0305 	mvn.w	r3, #5
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	e75f      	b.n	800133c <FLASH_IF_INT_Write+0x34>
 800147c:	f06f 0305 	mvn.w	r3, #5
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	e75b      	b.n	800133c <FLASH_IF_INT_Write+0x34>
 8001484:	f06f 0305 	mvn.w	r3, #5
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	e757      	b.n	800133c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800148c:	f06f 0304 	mvn.w	r3, #4
 8001490:	9302      	str	r3, [sp, #8]
 8001492:	e753      	b.n	800133c <FLASH_IF_INT_Write+0x34>
 8001494:	1fff7000 	.word	0x1fff7000
 8001498:	03fffc00 	.word	0x03fffc00
 800149c:	200001a8 	.word	0x200001a8

080014a0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80014a0:	4b01      	ldr	r3, [pc, #4]	; (80014a8 <FLASH_IF_Init+0x8>)
 80014a2:	6018      	str	r0, [r3, #0]
}
 80014a4:	2000      	movs	r0, #0
 80014a6:	4770      	bx	lr
 80014a8:	200001a8 	.word	0x200001a8

080014ac <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80014ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80014b0:	d30e      	bcc.n	80014d0 <FLASH_IF_Write+0x24>
{
 80014b2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <FLASH_IF_Write+0x30>)
 80014b6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <FLASH_IF_Write+0x34>)
 80014bc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014c0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4298      	cmp	r0, r3
 80014c8:	d805      	bhi.n	80014d6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80014ca:	f7ff ff1d 	bl	8001308 <FLASH_IF_INT_Write>
}
 80014ce:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014d4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014da:	e7f8      	b.n	80014ce <FLASH_IF_Write+0x22>
 80014dc:	1fff7000 	.word	0x1fff7000
 80014e0:	03fffc00 	.word	0x03fffc00

080014e4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80014e8:	d30e      	bcc.n	8001508 <FLASH_IF_Read+0x24>
{
 80014ea:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <FLASH_IF_Read+0x30>)
 80014ee:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <FLASH_IF_Read+0x34>)
 80014f4:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80014f8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4299      	cmp	r1, r3
 8001500:	d805      	bhi.n	800150e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001502:	f7ff fe8f 	bl	8001224 <FLASH_IF_INT_Read>
}
 8001506:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800150c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800150e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001512:	e7f8      	b.n	8001506 <FLASH_IF_Read+0x22>
 8001514:	1fff7000 	.word	0x1fff7000
 8001518:	03fffc00 	.word	0x03fffc00

0800151c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800151c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001520:	d30e      	bcc.n	8001540 <FLASH_IF_Erase+0x24>
{
 8001522:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <FLASH_IF_Erase+0x30>)
 8001526:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <FLASH_IF_Erase+0x34>)
 800152c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001530:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001534:	3b01      	subs	r3, #1
 8001536:	4298      	cmp	r0, r3
 8001538:	d805      	bhi.n	8001546 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800153a:	f7ff fe9b 	bl	8001274 <FLASH_IF_INT_Erase>
}
 800153e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001544:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800154a:	e7f8      	b.n	800153e <FLASH_IF_Erase+0x22>
 800154c:	1fff7000 	.word	0x1fff7000
 8001550:	03fffc00 	.word	0x03fffc00

08001554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001558:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	2400      	movs	r4, #0
 800155c:	9403      	str	r4, [sp, #12]
 800155e:	9404      	str	r4, [sp, #16]
 8001560:	9405      	str	r4, [sp, #20]
 8001562:	9406      	str	r4, [sp, #24]
 8001564:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800156c:	f042 0202 	orr.w	r2, r2, #2
 8001570:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001574:	f002 0202 	and.w	r2, r2, #2
 8001578:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800157a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800157c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157e:	f042 0204 	orr.w	r2, r2, #4
 8001582:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001586:	f002 0204 	and.w	r2, r2, #4
 800158a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800158c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800158e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800159e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80015a0:	4e26      	ldr	r6, [pc, #152]	; (800163c <MX_GPIO_Init+0xe8>)
 80015a2:	4622      	mov	r2, r4
 80015a4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80015a8:	4630      	mov	r0, r6
 80015aa:	f003 f869 	bl	8004680 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80015ae:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80015b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2501      	movs	r5, #1
 80015b6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2302      	movs	r3, #2
 80015bc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	a903      	add	r1, sp, #12
 80015c0:	4630      	mov	r0, r6
 80015c2:	f002 ff0d 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80015c6:	f04f 0803 	mov.w	r8, #3
 80015ca:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ce:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80015d2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	a903      	add	r1, sp, #12
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f002 ff00 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015e4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	a903      	add	r1, sp, #12
 80015f0:	4630      	mov	r0, r6
 80015f2:	f002 fef5 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015fa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015fe:	a903      	add	r1, sp, #12
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <MX_GPIO_Init+0xec>)
 8001602:	f002 feed 	bl	80043e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001606:	4622      	mov	r2, r4
 8001608:	2105      	movs	r1, #5
 800160a:	2006      	movs	r0, #6
 800160c:	f002 faba 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001610:	2006      	movs	r0, #6
 8001612:	f002 faef 	bl	8003bf4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001616:	4622      	mov	r2, r4
 8001618:	2105      	movs	r1, #5
 800161a:	2007      	movs	r0, #7
 800161c:	f002 fab2 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001620:	2007      	movs	r0, #7
 8001622:	f002 fae7 	bl	8003bf4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001626:	4622      	mov	r2, r4
 8001628:	2105      	movs	r1, #5
 800162a:	2016      	movs	r0, #22
 800162c:	f002 faaa 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001630:	2016      	movs	r0, #22
 8001632:	f002 fadf 	bl	8003bf4 <HAL_NVIC_EnableIRQ>

}
 8001636:	b008      	add	sp, #32
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800

08001644 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001644:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001646:	4812      	ldr	r0, [pc, #72]	; (8001690 <MX_I2C1_Init+0x4c>)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_I2C1_Init+0x54>)
 800164e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	2201      	movs	r2, #1
 8001656:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800165c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001660:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001662:	f003 fa2a 	bl	8004aba <HAL_I2C_Init>
 8001666:	b950      	cbnz	r0, 800167e <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <MX_I2C1_Init+0x4c>)
 800166c:	f003 ffe5 	bl	800563a <HAL_I2CEx_ConfigAnalogFilter>
 8001670:	b940      	cbnz	r0, 8001684 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_I2C1_Init+0x4c>)
 8001676:	f004 f80e 	bl	8005696 <HAL_I2CEx_ConfigDigitalFilter>
 800167a:	b930      	cbnz	r0, 800168a <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800167e:	f000 f865 	bl	800174c <Error_Handler>
 8001682:	e7f1      	b.n	8001668 <MX_I2C1_Init+0x24>
    Error_Handler();
 8001684:	f000 f862 	bl	800174c <Error_Handler>
 8001688:	e7f3      	b.n	8001672 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800168a:	f000 f85f 	bl	800174c <Error_Handler>
}
 800168e:	e7f5      	b.n	800167c <MX_I2C1_Init+0x38>
 8001690:	200001ac 	.word	0x200001ac
 8001694:	40005400 	.word	0x40005400
 8001698:	20303e5d 	.word	0x20303e5d

0800169c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800169c:	b510      	push	{r4, lr}
 800169e:	b096      	sub	sp, #88	; 0x58
 80016a0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	2100      	movs	r1, #0
 80016a4:	9111      	str	r1, [sp, #68]	; 0x44
 80016a6:	9112      	str	r1, [sp, #72]	; 0x48
 80016a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80016aa:	9114      	str	r1, [sp, #80]	; 0x50
 80016ac:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ae:	2238      	movs	r2, #56	; 0x38
 80016b0:	a803      	add	r0, sp, #12
 80016b2:	f014 f87d 	bl	80157b0 <memset>
  if(i2cHandle->Instance==I2C1)
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_I2C_MspInit+0xa8>)
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016be:	b016      	add	sp, #88	; 0x58
 80016c0:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016ca:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016cc:	a803      	add	r0, sp, #12
 80016ce:	f004 fe2f 	bl	8006330 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d132      	bne.n	800173c <HAL_I2C_MspInit+0xa0>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80016da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80016ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016f0:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016fa:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fc:	2304      	movs	r3, #4
 80016fe:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	a911      	add	r1, sp, #68	; 0x44
 8001702:	4811      	ldr	r0, [pc, #68]	; (8001748 <HAL_I2C_MspInit+0xac>)
 8001704:	f002 fe6c 	bl	80043e0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800170a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170e:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001718:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	201e      	movs	r0, #30
 8001720:	f002 fa30 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001724:	201e      	movs	r0, #30
 8001726:	f002 fa65 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2105      	movs	r1, #5
 800172e:	201f      	movs	r0, #31
 8001730:	f002 fa28 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001734:	201f      	movs	r0, #31
 8001736:	f002 fa5d 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
}
 800173a:	e7c0      	b.n	80016be <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800173c:	f000 f806 	bl	800174c <Error_Handler>
 8001740:	e7c9      	b.n	80016d6 <HAL_I2C_MspInit+0x3a>
 8001742:	bf00      	nop
 8001744:	40005400 	.word	0x40005400
 8001748:	48000400 	.word	0x48000400

0800174c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174e:	e7fe      	b.n	800174e <Error_Handler+0x2>

08001750 <SystemClock_Config>:
{
 8001750:	b510      	push	{r4, lr}
 8001752:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001754:	2248      	movs	r2, #72	; 0x48
 8001756:	2100      	movs	r1, #0
 8001758:	a808      	add	r0, sp, #32
 800175a:	f014 f829 	bl	80157b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175e:	2400      	movs	r4, #0
 8001760:	9401      	str	r4, [sp, #4]
 8001762:	9402      	str	r4, [sp, #8]
 8001764:	9403      	str	r4, [sp, #12]
 8001766:	9404      	str	r4, [sp, #16]
 8001768:	9405      	str	r4, [sp, #20]
 800176a:	9406      	str	r4, [sp, #24]
 800176c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800176e:	f003 ffbf 	bl	80056f0 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001776:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800177a:	f023 0318 	bic.w	r3, r3, #24
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800179c:	2324      	movs	r3, #36	; 0x24
 800179e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017a0:	2381      	movs	r3, #129	; 0x81
 80017a2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017a8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017aa:	23b0      	movs	r3, #176	; 0xb0
 80017ac:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ae:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	a808      	add	r0, sp, #32
 80017b2:	f004 f937 	bl	8005a24 <HAL_RCC_OscConfig>
 80017b6:	b970      	cbnz	r0, 80017d6 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80017b8:	234f      	movs	r3, #79	; 0x4f
 80017ba:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017c6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c8:	2102      	movs	r1, #2
 80017ca:	a801      	add	r0, sp, #4
 80017cc:	f004 fc5c 	bl	8006088 <HAL_RCC_ClockConfig>
 80017d0:	b918      	cbnz	r0, 80017da <SystemClock_Config+0x8a>
}
 80017d2:	b01a      	add	sp, #104	; 0x68
 80017d4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017d6:	f7ff ffb9 	bl	800174c <Error_Handler>
    Error_Handler();
 80017da:	f7ff ffb7 	bl	800174c <Error_Handler>

080017de <main>:
{
 80017de:	b508      	push	{r3, lr}
  HAL_Init();
 80017e0:	f001 fc98 	bl	8003114 <HAL_Init>
  SystemClock_Config();
 80017e4:	f7ff ffb4 	bl	8001750 <SystemClock_Config>
  MX_GPIO_Init();
 80017e8:	f7ff feb4 	bl	8001554 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ec:	f7ff ff2a 	bl	8001644 <MX_I2C1_Init>
  osKernelInitialize();
 80017f0:	f006 fe94 	bl	800851c <osKernelInitialize>
  MX_FREERTOS_Init();
 80017f4:	f7ff fcc4 	bl	8001180 <MX_FREERTOS_Init>
  osKernelStart();
 80017f8:	f006 feae 	bl	8008558 <osKernelStart>
  while (1)
 80017fc:	e7fe      	b.n	80017fc <main+0x1e>
	...

08001800 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001800:	b500      	push	{lr}
 8001802:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001804:	222c      	movs	r2, #44	; 0x2c
 8001806:	2100      	movs	r1, #0
 8001808:	a801      	add	r0, sp, #4
 800180a:	f013 ffd1 	bl	80157b0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800180e:	4819      	ldr	r0, [pc, #100]	; (8001874 <MX_RTC_Init+0x74>)
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_RTC_Init+0x78>)
 8001812:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001814:	231f      	movs	r3, #31
 8001816:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800181c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800181e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001824:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001826:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800182e:	f004 ff8f 	bl	8006750 <HAL_RTC_Init>
 8001832:	b9a8      	cbnz	r0, 8001860 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <MX_RTC_Init+0x74>)
 8001836:	f005 f8cd 	bl	80069d4 <HAL_RTCEx_SetSSRU_IT>
 800183a:	b9a0      	cbnz	r0, 8001866 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800183c:	2200      	movs	r2, #0
 800183e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001840:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001842:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001844:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001848:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001850:	a901      	add	r1, sp, #4
 8001852:	4808      	ldr	r0, [pc, #32]	; (8001874 <MX_RTC_Init+0x74>)
 8001854:	f004 ffe2 	bl	800681c <HAL_RTC_SetAlarm_IT>
 8001858:	b940      	cbnz	r0, 800186c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800185a:	b00d      	add	sp, #52	; 0x34
 800185c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001860:	f7ff ff74 	bl	800174c <Error_Handler>
 8001864:	e7e6      	b.n	8001834 <MX_RTC_Init+0x34>
    Error_Handler();
 8001866:	f7ff ff71 	bl	800174c <Error_Handler>
 800186a:	e7e7      	b.n	800183c <MX_RTC_Init+0x3c>
    Error_Handler();
 800186c:	f7ff ff6e 	bl	800174c <Error_Handler>
}
 8001870:	e7f3      	b.n	800185a <MX_RTC_Init+0x5a>
 8001872:	bf00      	nop
 8001874:	20000200 	.word	0x20000200
 8001878:	40002800 	.word	0x40002800

0800187c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800187c:	b510      	push	{r4, lr}
 800187e:	b090      	sub	sp, #64	; 0x40
 8001880:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	2100      	movs	r1, #0
 8001886:	a802      	add	r0, sp, #8
 8001888:	f013 ff92 	bl	80157b0 <memset>
  if(rtcHandle->Instance==RTC)
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RTC_MspInit+0x7c>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001894:	b010      	add	sp, #64	; 0x40
 8001896:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800189e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a4:	a802      	add	r0, sp, #8
 80018a6:	f004 fd43 	bl	8006330 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	bb08      	cbnz	r0, 80018f0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80018b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2105      	movs	r1, #5
 80018d2:	2002      	movs	r0, #2
 80018d4:	f002 f956 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80018d8:	2002      	movs	r0, #2
 80018da:	f002 f98b 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	202a      	movs	r0, #42	; 0x2a
 80018e4:	f002 f94e 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018e8:	202a      	movs	r0, #42	; 0x2a
 80018ea:	f002 f983 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
}
 80018ee:	e7d1      	b.n	8001894 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80018f0:	f7ff ff2c 	bl	800174c <Error_Handler>
 80018f4:	e7da      	b.n	80018ac <HAL_RTC_MspInit+0x30>
 80018f6:	bf00      	nop
 80018f8:	40002800 	.word	0x40002800

080018fc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80018fc:	4770      	bx	lr

080018fe <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80018fe:	4770      	bx	lr

08001900 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001902:	f001 fc1d 	bl	8003140 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001906:	2001      	movs	r0, #1
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <PWR_EnterStopMode+0x14>)
 800190a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800190e:	f003 ff53 	bl	80057b8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001912:	bd08      	pop	{r3, pc}
 8001914:	58000400 	.word	0x58000400

08001918 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800191a:	f001 fc18 	bl	800314e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800191e:	bd08      	pop	{r3, pc}

08001920 <PWR_ExitStopMode>:
{
 8001920:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001922:	f001 fc14 	bl	800314e <HAL_ResumeTick>
  vcom_Resume();
 8001926:	f000 fc33 	bl	8002190 <vcom_Resume>
}
 800192a:	bd08      	pop	{r3, pc}

0800192c <PWR_EnterSleepMode>:
{
 800192c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800192e:	f001 fc07 	bl	8003140 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001932:	2101      	movs	r1, #1
 8001934:	2000      	movs	r0, #0
 8001936:	f003 fee3 	bl	8005700 <HAL_PWR_EnterSLEEPMode>
}
 800193a:	bd08      	pop	{r3, pc}

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	210f      	movs	r1, #15
 8001942:	f06f 0001 	mvn.w	r0, #1
 8001946:	f002 f91d 	bl	8003b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bd08      	pop	{r3, pc}

0800194c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler>

0800194e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler>

08001950 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler>

08001952 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler>

08001954 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>

08001956 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	4770      	bx	lr

08001958 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800195a:	4802      	ldr	r0, [pc, #8]	; (8001964 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 800195c:	f005 f866 	bl	8006a2c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001960:	bd08      	pop	{r3, pc}
 8001962:	bf00      	nop
 8001964:	20000200 	.word	0x20000200

08001968 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800196a:	2001      	movs	r0, #1
 800196c:	f002 fe96 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001970:	bd08      	pop	{r3, pc}

08001972 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001972:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001974:	2002      	movs	r0, #2
 8001976:	f002 fe91 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800197a:	bd08      	pop	{r3, pc}

0800197c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800197c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800197e:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA1_Channel5_IRQHandler+0xc>)
 8001980:	f002 fb56 	bl	8004030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001984:	bd08      	pop	{r3, pc}
 8001986:	bf00      	nop
 8001988:	2000024c 	.word	0x2000024c

0800198c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800198c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800198e:	2040      	movs	r0, #64	; 0x40
 8001990:	f002 fe84 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001994:	bd08      	pop	{r3, pc}
	...

08001998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <I2C1_EV_IRQHandler+0xc>)
 800199c:	f003 fb40 	bl	8005020 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019a0:	bd08      	pop	{r3, pc}
 80019a2:	bf00      	nop
 80019a4:	200001ac 	.word	0x200001ac

080019a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <I2C1_ER_IRQHandler+0xc>)
 80019ac:	f003 fe03 	bl	80055b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019b0:	bd08      	pop	{r3, pc}
 80019b2:	bf00      	nop
 80019b4:	200001ac 	.word	0x200001ac

080019b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ba:	4802      	ldr	r0, [pc, #8]	; (80019c4 <USART2_IRQHandler+0xc>)
 80019bc:	f005 fcf4 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c0:	bd08      	pop	{r3, pc}
 80019c2:	bf00      	nop
 80019c4:	200002ac 	.word	0x200002ac

080019c8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80019c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019ca:	4802      	ldr	r0, [pc, #8]	; (80019d4 <RTC_Alarm_IRQHandler+0xc>)
 80019cc:	f004 fe3a 	bl	8006644 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019d0:	bd08      	pop	{r3, pc}
 80019d2:	bf00      	nop
 80019d4:	20000200 	.word	0x20000200

080019d8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80019d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80019da:	4802      	ldr	r0, [pc, #8]	; (80019e4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80019dc:	f005 fada 	bl	8006f94 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80019e0:	bd08      	pop	{r3, pc}
 80019e2:	bf00      	nop
 80019e4:	20000238 	.word	0x20000238

080019e8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80019e8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_SUBGHZ_Init+0x18>)
 80019ec:	2308      	movs	r3, #8
 80019ee:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80019f0:	f005 f852 	bl	8006a98 <HAL_SUBGHZ_Init>
 80019f4:	b900      	cbnz	r0, 80019f8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80019f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80019f8:	f7ff fea8 	bl	800174c <Error_Handler>
}
 80019fc:	e7fb      	b.n	80019f6 <MX_SUBGHZ_Init+0xe>
 80019fe:	bf00      	nop
 8001a00:	20000238 	.word	0x20000238

08001a04 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a04:	b500      	push	{lr}
 8001a06:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2105      	movs	r1, #5
 8001a22:	2032      	movs	r0, #50	; 0x32
 8001a24:	f002 f8ae 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a28:	2032      	movs	r0, #50	; 0x32
 8001a2a:	f002 f8e3 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	f85d fb04 	ldr.w	pc, [sp], #4

08001a34 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001a34:	b40c      	push	{r2, r3}
 8001a36:	b500      	push	{lr}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	ab04      	add	r3, sp, #16
 8001a3c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a40:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a42:	f013 fdf1 	bl	8015628 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a46:	b003      	add	sp, #12
 8001a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a4c:	b002      	add	sp, #8
 8001a4e:	4770      	bx	lr

08001a50 <TimestampNow>:
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	4604      	mov	r4, r0
 8001a56:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001a58:	a802      	add	r0, sp, #8
 8001a5a:	f013 fb59 	bl	8015110 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a5e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	9b02      	ldr	r3, [sp, #8]
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <TimestampNow+0x2c>)
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff ffe2 	bl	8001a34 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7fe fb85 	bl	8000180 <strlen>
 8001a76:	8028      	strh	r0, [r5, #0]
}
 8001a78:	b005      	add	sp, #20
 8001a7a:	bd30      	pop	{r4, r5, pc}
 8001a7c:	08015a10 	.word	0x08015a10

08001a80 <SystemApp_Init>:
{
 8001a80:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a86:	6893      	ldr	r3, [r2, #8]
 8001a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a8c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001a8e:	f013 fbc3 	bl	8015218 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a92:	2401      	movs	r4, #1
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <SystemApp_Init+0x4c>)
 8001a96:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001a98:	f000 f8b8 	bl	8001c0c <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001a9c:	f013 f93a 	bl	8014d14 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <SystemApp_Init+0x50>)
 8001aa2:	f013 f951 	bl	8014d48 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <SystemApp_Init+0x54>)
 8001aa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aac:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f013 f950 	bl	8014d54 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001ab4:	f7ff fa82 	bl	8000fbc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001ab8:	f000 f908 	bl	8001ccc <EnvSensors_Init>
  UTIL_LPM_Init();
 8001abc:	f013 fa5a 	bl	8014f74 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f013 fa76 	bl	8014fb4 <UTIL_LPM_SetOffMode>
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	20000244 	.word	0x20000244
 8001ad0:	08001a51 	.word	0x08001a51
 8001ad4:	58004000 	.word	0x58004000

08001ad8 <GetBatteryLevel>:
{
 8001ad8:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001ada:	f7ff fa77 	bl	8000fcc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001ade:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	d80d      	bhi.n	8001b02 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001ae6:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001aea:	d30c      	bcc.n	8001b06 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001aec:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001af0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001af4:	0040      	lsls	r0, r0, #1
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <GetBatteryLevel+0x34>)
 8001af8:	fba3 3000 	umull	r3, r0, r3, r0
 8001afc:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b00:	e000      	b.n	8001b04 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b02:	20fe      	movs	r0, #254	; 0xfe
}
 8001b04:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b06:	2000      	movs	r0, #0
 8001b08:	e7fc      	b.n	8001b04 <GetBatteryLevel+0x2c>
 8001b0a:	bf00      	nop
 8001b0c:	1b4e81b5 	.word	0x1b4e81b5

08001b10 <GetTemperatureLevel>:
{
 8001b10:	b500      	push	{lr}
 8001b12:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001b14:	4668      	mov	r0, sp
 8001b16:	f000 f8bd 	bl	8001c94 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b1a:	9801      	ldr	r0, [sp, #4]
 8001b1c:	f7ff f802 	bl	8000b24 <__aeabi_f2iz>
}
 8001b20:	b200      	sxth	r0, r0
 8001b22:	b007      	add	sp, #28
 8001b24:	f85d fb04 	ldr.w	pc, [sp], #4

08001b28 <GetUniqueId>:
{
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <GetUniqueId+0x68>)
 8001b2e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b36:	d013      	beq.n	8001b60 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001b38:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001b3a:	0a1a      	lsrs	r2, r3, #8
 8001b3c:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001b3e:	0c1a      	lsrs	r2, r3, #16
 8001b40:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b42:	0e1b      	lsrs	r3, r3, #24
 8001b44:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <GetUniqueId+0x68>)
 8001b48:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001b4c:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b4e:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001b52:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001b54:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001b56:	0c1a      	lsrs	r2, r3, #16
 8001b58:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001b5a:	0e1b      	lsrs	r3, r3, #24
 8001b5c:	7003      	strb	r3, [r0, #0]
}
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b60:	f001 fafc 	bl	800315c <HAL_GetUIDw0>
 8001b64:	4605      	mov	r5, r0
 8001b66:	f001 fb05 	bl	8003174 <HAL_GetUIDw2>
 8001b6a:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b6c:	f001 fafc 	bl	8003168 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001b70:	0e2b      	lsrs	r3, r5, #24
 8001b72:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001b74:	0c2b      	lsrs	r3, r5, #16
 8001b76:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001b78:	0a2b      	lsrs	r3, r5, #8
 8001b7a:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001b7c:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001b7e:	0e03      	lsrs	r3, r0, #24
 8001b80:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001b82:	0c03      	lsrs	r3, r0, #16
 8001b84:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001b86:	0a03      	lsrs	r3, r0, #8
 8001b88:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001b8a:	7020      	strb	r0, [r4, #0]
 8001b8c:	e7e7      	b.n	8001b5e <GetUniqueId+0x36>
 8001b8e:	bf00      	nop
 8001b90:	1fff7000 	.word	0x1fff7000

08001b94 <GetDevAddr>:
{
 8001b94:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <GetDevAddr+0x2c>)
 8001b98:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001b9c:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba2:	d000      	beq.n	8001ba6 <GetDevAddr+0x12>
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
 8001ba6:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ba8:	f001 fad8 	bl	800315c <HAL_GetUIDw0>
 8001bac:	4605      	mov	r5, r0
 8001bae:	f001 fadb 	bl	8003168 <HAL_GetUIDw1>
 8001bb2:	4045      	eors	r5, r0
 8001bb4:	f001 fade 	bl	8003174 <HAL_GetUIDw2>
 8001bb8:	4045      	eors	r5, r0
 8001bba:	6025      	str	r5, [r4, #0]
}
 8001bbc:	e7f2      	b.n	8001ba4 <GetDevAddr+0x10>
 8001bbe:	bf00      	nop
 8001bc0:	1fff7000 	.word	0x1fff7000

08001bc4 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001bc4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f013 f9dd 	bl	8014f88 <UTIL_LPM_SetStopMode>
}
 8001bce:	bd08      	pop	{r3, pc}

08001bd0 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001bd0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f013 f9d7 	bl	8014f88 <UTIL_LPM_SetStopMode>
}
 8001bda:	bd08      	pop	{r3, pc}

08001bdc <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bdc:	2000      	movs	r0, #0
 8001bde:	4770      	bx	lr

08001be0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001be0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b90b      	cbnz	r3, 8001bec <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001be8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001bea:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001bec:	f000 f89a 	bl	8001d24 <TIMER_IF_GetTimerValue>
 8001bf0:	e7fb      	b.n	8001bea <HAL_GetTick+0xa>
 8001bf2:	bf00      	nop
 8001bf4:	20000244 	.word	0x20000244

08001bf8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bf8:	b500      	push	{lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001bfe:	9801      	ldr	r0, [sp, #4]
 8001c00:	f000 f976 	bl	8001ef0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c04:	b003      	add	sp, #12
 8001c06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c0c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c10:	f001 fab6 	bl	8003180 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c14:	f001 fabc 	bl	8003190 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c18:	f001 fac2 	bl	80031a0 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	9403      	str	r4, [sp, #12]
 8001c20:	9404      	str	r4, [sp, #16]
 8001c22:	9405      	str	r4, [sp, #20]
 8001c24:	9406      	str	r4, [sp, #24]
 8001c26:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c36:	f042 0202 	orr.w	r2, r2, #2
 8001c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3e:	f002 0202 	and.w	r2, r2, #2
 8001c42:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c44:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c48:	f042 0202 	orr.w	r2, r2, #2
 8001c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c56:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001c58:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001c5c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001c5e:	4d0c      	ldr	r5, [pc, #48]	; (8001c90 <DBG_Init+0x84>)
 8001c60:	a903      	add	r1, sp, #12
 8001c62:	4628      	mov	r0, r5
 8001c64:	f002 fbbc 	bl	80043e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001c68:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001c6c:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001c6e:	a903      	add	r1, sp, #12
 8001c70:	4628      	mov	r0, r5
 8001c72:	f002 fbb5 	bl	80043e0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001c76:	4622      	mov	r2, r4
 8001c78:	4639      	mov	r1, r7
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f002 fd00 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001c80:	4622      	mov	r2, r4
 8001c82:	4631      	mov	r1, r6
 8001c84:	4628      	mov	r0, r5
 8001c86:	f002 fcfb 	bl	8004680 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c8a:	b009      	add	sp, #36	; 0x24
 8001c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	48000400 	.word	0x48000400

08001c94 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c98:	f7ff f9ba 	bl	8001010 <SYS_GetTemperatureLevel>
 8001c9c:	f340 200f 	sbfx	r0, r0, #8, #16
 8001ca0:	f7fe fd9c 	bl	80007dc <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <EnvSensors_Read+0x28>)
 8001ca6:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001ca8:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <EnvSensors_Read+0x2c>)
 8001cac:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <EnvSensors_Read+0x30>)
 8001cb0:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <EnvSensors_Read+0x34>)
 8001cb4:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	42480000 	.word	0x42480000
 8001cc0:	447a0000 	.word	0x447a0000
 8001cc4:	003e090d 	.word	0x003e090d
 8001cc8:	000503ab 	.word	0x000503ab

08001ccc <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001ccc:	2000      	movs	r0, #0
 8001cce:	4770      	bx	lr

08001cd0 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <TIMER_IF_SetTimerContext+0x1c>)
 8001cd2:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001cd4:	e001      	b.n	8001cda <TIMER_IF_SetTimerContext+0xa>
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <TIMER_IF_SetTimerContext+0x1c>)
 8001cd8:	6898      	ldr	r0, [r3, #8]
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <TIMER_IF_SetTimerContext+0x1c>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4283      	cmp	r3, r0
 8001ce0:	d1f9      	bne.n	8001cd6 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001ce2:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <TIMER_IF_SetTimerContext+0x20>)
 8001ce6:	6018      	str	r0, [r3, #0]
}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40002800 	.word	0x40002800
 8001cf0:	20000248 	.word	0x20000248

08001cf4 <TIMER_IF_GetTimerContext>:
}
 8001cf4:	4b01      	ldr	r3, [pc, #4]	; (8001cfc <TIMER_IF_GetTimerContext+0x8>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000248 	.word	0x20000248

08001d00 <TIMER_IF_GetTimerElapsedTime>:
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d02:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d04:	e001      	b.n	8001d0a <TIMER_IF_GetTimerElapsedTime+0xa>
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d08:	6898      	ldr	r0, [r3, #8]
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4283      	cmp	r3, r0
 8001d10:	d1f9      	bne.n	8001d06 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001d12:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	1ac0      	subs	r0, r0, r3
 8001d1a:	4770      	bx	lr
 8001d1c:	40002800 	.word	0x40002800
 8001d20:	20000248 	.word	0x20000248

08001d24 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <TIMER_IF_GetTimerValue+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b153      	cbz	r3, 8001d40 <TIMER_IF_GetTimerValue+0x1c>
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <TIMER_IF_GetTimerValue+0x24>)
 8001d2c:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d2e:	e001      	b.n	8001d34 <TIMER_IF_GetTimerValue+0x10>
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <TIMER_IF_GetTimerValue+0x24>)
 8001d32:	6898      	ldr	r0, [r3, #8]
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <TIMER_IF_GetTimerValue+0x24>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4283      	cmp	r3, r0
 8001d3a:	d1f9      	bne.n	8001d30 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001d3c:	43c0      	mvns	r0, r0
 8001d3e:	4770      	bx	lr
  uint32_t ret = 0;
 8001d40:	2000      	movs	r0, #0
}
 8001d42:	4770      	bx	lr
 8001d44:	20000245 	.word	0x20000245
 8001d48:	40002800 	.word	0x40002800

08001d4c <TIMER_IF_GetMinimumTimeout>:
}
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	4770      	bx	lr

08001d50 <TIMER_IF_Convert_ms2Tick>:
{
 8001d50:	b508      	push	{r3, lr}
 8001d52:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d58:	2300      	movs	r3, #0
 8001d5a:	0280      	lsls	r0, r0, #10
 8001d5c:	0d89      	lsrs	r1, r1, #22
 8001d5e:	f7fe ff27 	bl	8000bb0 <__aeabi_uldivmod>
}
 8001d62:	bd08      	pop	{r3, pc}

08001d64 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001d64:	0ec2      	lsrs	r2, r0, #27
 8001d66:	0143      	lsls	r3, r0, #5
 8001d68:	1a1b      	subs	r3, r3, r0
 8001d6a:	f162 0200 	sbc.w	r2, r2, #0
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	181b      	adds	r3, r3, r0
 8001d78:	f142 0000 	adc.w	r0, r2, #0
 8001d7c:	00c0      	lsls	r0, r0, #3
 8001d7e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001d82:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001d86:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001d8a:	4770      	bx	lr

08001d8c <TIMER_IF_StopTimer>:
{
 8001d8c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <TIMER_IF_StopTimer+0x20>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d94:	4c06      	ldr	r4, [pc, #24]	; (8001db0 <TIMER_IF_StopTimer+0x24>)
 8001d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f004 fc12 	bl	80065c4 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da4:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	bf00      	nop
 8001dac:	40002800 	.word	0x40002800
 8001db0:	20000200 	.word	0x20000200

08001db4 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001db4:	b508      	push	{r3, lr}
 8001db6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001db8:	2102      	movs	r1, #2
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001dbc:	f004 fe4b 	bl	8006a56 <HAL_RTCEx_BKUPWrite>
}
 8001dc0:	bd08      	pop	{r3, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000200 	.word	0x20000200

08001dc8 <TIMER_IF_Init>:
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <TIMER_IF_Init+0x40>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b10b      	cbz	r3, 8001dd4 <TIMER_IF_Init+0xc>
}
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dd4:	4c0d      	ldr	r4, [pc, #52]	; (8001e0c <TIMER_IF_Init+0x44>)
 8001dd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001dda:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001ddc:	f7ff fd10 	bl	8001800 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001de0:	f7ff ffd4 	bl	8001d8c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de8:	4620      	mov	r0, r4
 8001dea:	f004 fbeb 	bl	80065c4 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dee:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001df0:	4620      	mov	r0, r4
 8001df2:	f004 fdcf 	bl	8006994 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff ffdc 	bl	8001db4 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001dfc:	f7ff ff68 	bl	8001cd0 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001e00:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <TIMER_IF_Init+0x40>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e7e3      	b.n	8001dd0 <TIMER_IF_Init+0x8>
 8001e08:	20000245 	.word	0x20000245
 8001e0c:	20000200 	.word	0x20000200

08001e10 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001e10:	b508      	push	{r3, lr}
 8001e12:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e14:	2100      	movs	r1, #0
 8001e16:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001e18:	f004 fe1d 	bl	8006a56 <HAL_RTCEx_BKUPWrite>
}
 8001e1c:	bd08      	pop	{r3, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000200 	.word	0x20000200

08001e24 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001e24:	b508      	push	{r3, lr}
 8001e26:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001e2c:	f004 fe13 	bl	8006a56 <HAL_RTCEx_BKUPWrite>
}
 8001e30:	bd08      	pop	{r3, pc}
 8001e32:	bf00      	nop
 8001e34:	20000200 	.word	0x20000200

08001e38 <TIMER_IF_StartTimer>:
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	b08c      	sub	sp, #48	; 0x30
 8001e3c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001e3e:	222c      	movs	r2, #44	; 0x2c
 8001e40:	2100      	movs	r1, #0
 8001e42:	a801      	add	r0, sp, #4
 8001e44:	f013 fcb4 	bl	80157b0 <memset>
  TIMER_IF_StopTimer();
 8001e48:	f7ff ffa0 	bl	8001d8c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <TIMER_IF_StartTimer+0x48>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e52:	2300      	movs	r3, #0
 8001e54:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001e56:	43e4      	mvns	r4, r4
 8001e58:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e5a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001e5c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e60:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e66:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	a901      	add	r1, sp, #4
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <TIMER_IF_StartTimer+0x4c>)
 8001e6e:	f004 fcd5 	bl	800681c <HAL_RTC_SetAlarm_IT>
 8001e72:	b910      	cbnz	r0, 8001e7a <TIMER_IF_StartTimer+0x42>
}
 8001e74:	2000      	movs	r0, #0
 8001e76:	b00c      	add	sp, #48	; 0x30
 8001e78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e7a:	f7ff fc67 	bl	800174c <Error_Handler>
 8001e7e:	e7f9      	b.n	8001e74 <TIMER_IF_StartTimer+0x3c>
 8001e80:	20000248 	.word	0x20000248
 8001e84:	20000200 	.word	0x20000200

08001e88 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001e88:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	4801      	ldr	r0, [pc, #4]	; (8001e94 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001e8e:	f004 fde9 	bl	8006a64 <HAL_RTCEx_BKUPRead>
}
 8001e92:	bd08      	pop	{r3, pc}
 8001e94:	20000200 	.word	0x20000200

08001e98 <TIMER_IF_GetTime>:
{
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <TIMER_IF_GetTime+0x34>)
 8001e9e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ea0:	e001      	b.n	8001ea6 <TIMER_IF_GetTime+0xe>
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <TIMER_IF_GetTime+0x34>)
 8001ea4:	689c      	ldr	r4, [r3, #8]
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <TIMER_IF_GetTime+0x34>)
 8001ea8:	6892      	ldr	r2, [r2, #8]
 8001eaa:	42a2      	cmp	r2, r4
 8001eac:	d1f9      	bne.n	8001ea2 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001eae:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001eb0:	f7ff ffea 	bl	8001e88 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001eb4:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001eb6:	0aa4      	lsrs	r4, r4, #10
 8001eb8:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001ebc:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001ec0:	f7ff ff50 	bl	8001d64 <TIMER_IF_Convert_Tick2ms>
 8001ec4:	8028      	strh	r0, [r5, #0]
}
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
 8001eca:	bf00      	nop
 8001ecc:	40002800 	.word	0x40002800

08001ed0 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001ed0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4801      	ldr	r0, [pc, #4]	; (8001edc <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001ed6:	f004 fdc5 	bl	8006a64 <HAL_RTCEx_BKUPRead>
}
 8001eda:	bd08      	pop	{r3, pc}
 8001edc:	20000200 	.word	0x20000200

08001ee0 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001ee0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4801      	ldr	r0, [pc, #4]	; (8001eec <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001ee6:	f004 fdbd 	bl	8006a64 <HAL_RTCEx_BKUPRead>
}
 8001eea:	bd08      	pop	{r3, pc}
 8001eec:	20000200 	.word	0x20000200

08001ef0 <TIMER_IF_DelayMs>:
{
 8001ef0:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001ef2:	f7ff ff2d 	bl	8001d50 <TIMER_IF_Convert_ms2Tick>
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001ef8:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001efa:	e001      	b.n	8001f00 <TIMER_IF_DelayMs+0x10>
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001f02:	6892      	ldr	r2, [r2, #8]
 8001f04:	428a      	cmp	r2, r1
 8001f06:	d1f9      	bne.n	8001efc <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001f08:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f0a:	e00a      	b.n	8001f22 <TIMER_IF_DelayMs+0x32>
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001f12:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1f9      	bne.n	8001f0c <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001f18:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	4283      	cmp	r3, r0
 8001f1e:	d203      	bcs.n	8001f28 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001f20:	bf00      	nop
 8001f22:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <TIMER_IF_DelayMs+0x3c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f26:	e7f3      	b.n	8001f10 <TIMER_IF_DelayMs+0x20>
}
 8001f28:	bd08      	pop	{r3, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40002800 	.word	0x40002800

08001f30 <HAL_RTC_AlarmAEventCallback>:
{
 8001f30:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f32:	f013 fa95 	bl	8015460 <UTIL_TIMER_IRQ_Handler>
}
 8001f36:	bd08      	pop	{r3, pc}

08001f38 <HAL_RTCEx_SSRUEventCallback>:
{
 8001f38:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f3a:	f7ff ffa5 	bl	8001e88 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001f3e:	3001      	adds	r0, #1
 8001f40:	f7ff ff38 	bl	8001db4 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001f44:	bd08      	pop	{r3, pc}
	...

08001f48 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f48:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f4a:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <MX_USART2_UART_Init+0x60>)
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_USART2_UART_Init+0x64>)
 8001f4e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001f50:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001f54:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	2300      	movs	r3, #0
 8001f58:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f5a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f5e:	220c      	movs	r2, #12
 8001f60:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f66:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f68:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6c:	f006 f8d6 	bl	800811c <HAL_UART_Init>
 8001f70:	b970      	cbnz	r0, 8001f90 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_USART2_UART_Init+0x60>)
 8001f76:	f006 fa86 	bl	8008486 <HAL_UARTEx_SetTxFifoThreshold>
 8001f7a:	b960      	cbnz	r0, 8001f96 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <MX_USART2_UART_Init+0x60>)
 8001f80:	f006 faa6 	bl	80084d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f84:	b950      	cbnz	r0, 8001f9c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <MX_USART2_UART_Init+0x60>)
 8001f88:	f006 fa59 	bl	800843e <HAL_UARTEx_EnableFifoMode>
 8001f8c:	b948      	cbnz	r0, 8001fa2 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001f90:	f7ff fbdc 	bl	800174c <Error_Handler>
 8001f94:	e7ed      	b.n	8001f72 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001f96:	f7ff fbd9 	bl	800174c <Error_Handler>
 8001f9a:	e7ef      	b.n	8001f7c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001f9c:	f7ff fbd6 	bl	800174c <Error_Handler>
 8001fa0:	e7f1      	b.n	8001f86 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001fa2:	f7ff fbd3 	bl	800174c <Error_Handler>
}
 8001fa6:	e7f2      	b.n	8001f8e <MX_USART2_UART_Init+0x46>
 8001fa8:	200002ac 	.word	0x200002ac
 8001fac:	40004400 	.word	0x40004400

08001fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb0:	b530      	push	{r4, r5, lr}
 8001fb2:	b097      	sub	sp, #92	; 0x5c
 8001fb4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	9111      	str	r1, [sp, #68]	; 0x44
 8001fba:	9112      	str	r1, [sp, #72]	; 0x48
 8001fbc:	9113      	str	r1, [sp, #76]	; 0x4c
 8001fbe:	9114      	str	r1, [sp, #80]	; 0x50
 8001fc0:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	a803      	add	r0, sp, #12
 8001fc6:	f013 fbf3 	bl	80157b0 <memset>
  if(uartHandle->Instance==USART2)
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_UART_MspInit+0xd4>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd2:	b017      	add	sp, #92	; 0x5c
 8001fd4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_UART_MspInit+0xd8>)
 8001fdc:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fde:	a803      	add	r0, sp, #12
 8001fe0:	f004 f9a6 	bl	8006330 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d144      	bne.n	8002072 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ffa:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001ffc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800200e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002010:	230c      	movs	r3, #12
 8002012:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2500      	movs	r5, #0
 800201a:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002020:	2307      	movs	r3, #7
 8002022:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	a911      	add	r1, sp, #68	; 0x44
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202a:	f002 f9d9 	bl	80043e0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800202e:	4817      	ldr	r0, [pc, #92]	; (800208c <HAL_UART_MspInit+0xdc>)
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_UART_MspInit+0xe0>)
 8002032:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002034:	2314      	movs	r3, #20
 8002036:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002038:	2310      	movs	r3, #16
 800203a:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002042:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002044:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002046:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002048:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800204a:	f001 fe63 	bl	8003d14 <HAL_DMA_Init>
 800204e:	b998      	cbnz	r0, 8002078 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002050:	2110      	movs	r1, #16
 8002052:	480e      	ldr	r0, [pc, #56]	; (800208c <HAL_UART_MspInit+0xdc>)
 8002054:	f002 f863 	bl	800411e <HAL_DMA_ConfigChannelAttributes>
 8002058:	b988      	cbnz	r0, 800207e <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_UART_MspInit+0xdc>)
 800205c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800205e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2107      	movs	r1, #7
 8002064:	2025      	movs	r0, #37	; 0x25
 8002066:	f001 fd8d 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800206a:	2025      	movs	r0, #37	; 0x25
 800206c:	f001 fdc2 	bl	8003bf4 <HAL_NVIC_EnableIRQ>
}
 8002070:	e7af      	b.n	8001fd2 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002072:	f7ff fb6b 	bl	800174c <Error_Handler>
 8002076:	e7b7      	b.n	8001fe8 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002078:	f7ff fb68 	bl	800174c <Error_Handler>
 800207c:	e7e8      	b.n	8002050 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800207e:	f7ff fb65 	bl	800174c <Error_Handler>
 8002082:	e7ea      	b.n	800205a <HAL_UART_MspInit+0xaa>
 8002084:	40004400 	.word	0x40004400
 8002088:	000c0004 	.word	0x000c0004
 800208c:	2000024c 	.word	0x2000024c
 8002090:	40020058 	.word	0x40020058

08002094 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002094:	6802      	ldr	r2, [r0, #0]
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_UART_MspDeInit+0x34>)
 8002098:	429a      	cmp	r2, r3
 800209a:	d000      	beq.n	800209e <HAL_UART_MspDeInit+0xa>
 800209c:	4770      	bx	lr
{
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80020a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80020ae:	210c      	movs	r1, #12
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f002 fa66 	bl	8004584 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80020ba:	f001 fe9d 	bl	8003df8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80020be:	2025      	movs	r0, #37	; 0x25
 80020c0:	f001 fda6 	bl	8003c10 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80020c4:	bd10      	pop	{r4, pc}
 80020c6:	bf00      	nop
 80020c8:	40004400 	.word	0x40004400

080020cc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80020cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <vcom_Init+0x20>)
 80020d0:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80020d2:	f7ff f873 	bl	80011bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020d6:	f7ff ff37 	bl	8001f48 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <vcom_Init+0x24>)
 80020dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80020e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80020e8:	2000      	movs	r0, #0
 80020ea:	bd08      	pop	{r3, pc}
 80020ec:	20000344 	.word	0x20000344
 80020f0:	58000800 	.word	0x58000800

080020f4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80020f4:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002104:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800210a:	4804      	ldr	r0, [pc, #16]	; (800211c <vcom_DeInit+0x28>)
 800210c:	f7ff ffc2 	bl	8002094 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002110:	200f      	movs	r0, #15
 8002112:	f001 fd7d 	bl	8003c10 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002116:	2000      	movs	r0, #0
 8002118:	bd08      	pop	{r3, pc}
 800211a:	bf00      	nop
 800211c:	200002ac 	.word	0x200002ac

08002120 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002120:	b508      	push	{r3, lr}
 8002122:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002124:	4601      	mov	r1, r0
 8002126:	4802      	ldr	r0, [pc, #8]	; (8002130 <vcom_Trace_DMA+0x10>)
 8002128:	f005 f87a 	bl	8007220 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800212c:	2000      	movs	r0, #0
 800212e:	bd08      	pop	{r3, pc}
 8002130:	200002ac 	.word	0x200002ac

08002134 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002134:	b510      	push	{r4, lr}
 8002136:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <vcom_ReceiveInit+0x50>)
 800213a:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800213c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002140:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002142:	ab02      	add	r3, sp, #8
 8002144:	e913 0006 	ldmdb	r3, {r1, r2}
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <vcom_ReceiveInit+0x54>)
 800214a:	f006 f920 	bl	800838e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <vcom_ReceiveInit+0x54>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002158:	d1f9      	bne.n	800214e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8002160:	d0fb      	beq.n	800215a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002168:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800216a:	4c07      	ldr	r4, [pc, #28]	; (8002188 <vcom_ReceiveInit+0x54>)
 800216c:	4620      	mov	r0, r4
 800216e:	f006 f94f 	bl	8008410 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002172:	2201      	movs	r2, #1
 8002174:	4905      	ldr	r1, [pc, #20]	; (800218c <vcom_ReceiveInit+0x58>)
 8002176:	4620      	mov	r0, r4
 8002178:	f006 f8a2 	bl	80082c0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800217c:	2000      	movs	r0, #0
 800217e:	b002      	add	sp, #8
 8002180:	bd10      	pop	{r4, pc}
 8002182:	bf00      	nop
 8002184:	20000340 	.word	0x20000340
 8002188:	200002ac 	.word	0x200002ac
 800218c:	20000348 	.word	0x20000348

08002190 <vcom_Resume>:

void vcom_Resume(void)
{
 8002190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002192:	4807      	ldr	r0, [pc, #28]	; (80021b0 <vcom_Resume+0x20>)
 8002194:	f005 ffc2 	bl	800811c <HAL_UART_Init>
 8002198:	b920      	cbnz	r0, 80021a4 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <vcom_Resume+0x24>)
 800219c:	f001 fdba 	bl	8003d14 <HAL_DMA_Init>
 80021a0:	b918      	cbnz	r0, 80021aa <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80021a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021a4:	f7ff fad2 	bl	800174c <Error_Handler>
 80021a8:	e7f7      	b.n	800219a <vcom_Resume+0xa>
    Error_Handler();
 80021aa:	f7ff facf 	bl	800174c <Error_Handler>
}
 80021ae:	e7f8      	b.n	80021a2 <vcom_Resume+0x12>
 80021b0:	200002ac 	.word	0x200002ac
 80021b4:	2000024c 	.word	0x2000024c

080021b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80021ba:	6802      	ldr	r2, [r0, #0]
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_UART_TxCpltCallback+0x18>)
 80021be:	429a      	cmp	r2, r3
 80021c0:	d000      	beq.n	80021c4 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80021c2:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_UART_TxCpltCallback+0x1c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2000      	movs	r0, #0
 80021ca:	4798      	blx	r3
}
 80021cc:	e7f9      	b.n	80021c2 <HAL_UART_TxCpltCallback+0xa>
 80021ce:	bf00      	nop
 80021d0:	40004400 	.word	0x40004400
 80021d4:	20000344 	.word	0x20000344

080021d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80021d8:	6802      	ldr	r2, [r0, #0]
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_UART_RxCpltCallback+0x2c>)
 80021dc:	429a      	cmp	r2, r3
 80021de:	d000      	beq.n	80021e2 <HAL_UART_RxCpltCallback+0xa>
 80021e0:	4770      	bx	lr
{
 80021e2:	b510      	push	{r4, lr}
 80021e4:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_UART_RxCpltCallback+0x30>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b12b      	cbz	r3, 80021f8 <HAL_UART_RxCpltCallback+0x20>
 80021ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80021f0:	b912      	cbnz	r2, 80021f8 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80021f2:	2101      	movs	r1, #1
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <HAL_UART_RxCpltCallback+0x34>)
 80021f6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80021f8:	2201      	movs	r2, #1
 80021fa:	4904      	ldr	r1, [pc, #16]	; (800220c <HAL_UART_RxCpltCallback+0x34>)
 80021fc:	4620      	mov	r0, r4
 80021fe:	f006 f85f 	bl	80082c0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002202:	bd10      	pop	{r4, pc}
 8002204:	40004400 	.word	0x40004400
 8002208:	20000340 	.word	0x20000340
 800220c:	20000348 	.word	0x20000348

08002210 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002212:	f7ff fc35 	bl	8001a80 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002216:	f000 fc2d 	bl	8002a74 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800221a:	bd08      	pop	{r3, pc}

0800221c <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800221c:	4770      	bx	lr
	...

08002220 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <OnTxFrameCtrlChanged+0x8>)
 8002222:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000058 	.word	0x20000058

0800222c <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <OnPingSlotPeriodicityChanged+0x8>)
 800222e:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000058 	.word	0x20000058

08002238 <OnBeaconStatusChange>:
  if (params != NULL)
 8002238:	2800      	cmp	r0, #0
 800223a:	d03f      	beq.n	80022bc <OnBeaconStatusChange+0x84>
{
 800223c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002240:	b08c      	sub	sp, #48	; 0x30
 8002242:	4603      	mov	r3, r0
    switch (params->State)
 8002244:	7842      	ldrb	r2, [r0, #1]
 8002246:	2a02      	cmp	r2, #2
 8002248:	d00a      	beq.n	8002260 <OnBeaconStatusChange+0x28>
 800224a:	2a03      	cmp	r2, #3
 800224c:	d02f      	beq.n	80022ae <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <OnBeaconStatusChange+0x88>)
 8002250:	2200      	movs	r2, #0
 8002252:	4611      	mov	r1, r2
 8002254:	2002      	movs	r0, #2
 8002256:	f012 fdd1 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 800225a:	b00c      	add	sp, #48	; 0x30
 800225c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002260:	7c02      	ldrb	r2, [r0, #16]
 8002262:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002266:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800226a:	7d9c      	ldrb	r4, [r3, #22]
 800226c:	7ddd      	ldrb	r5, [r3, #23]
 800226e:	7e1e      	ldrb	r6, [r3, #24]
 8002270:	7e5f      	ldrb	r7, [r3, #25]
 8002272:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002276:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800227a:	f893 801c 	ldrb.w	r8, [r3, #28]
 800227e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002282:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002286:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800228a:	9708      	str	r7, [sp, #32]
 800228c:	9607      	str	r6, [sp, #28]
 800228e:	9506      	str	r5, [sp, #24]
 8002290:	9405      	str	r4, [sp, #20]
 8002292:	685c      	ldr	r4, [r3, #4]
 8002294:	9404      	str	r4, [sp, #16]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	9303      	str	r3, [sp, #12]
 800229a:	9002      	str	r0, [sp, #8]
 800229c:	9101      	str	r1, [sp, #4]
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <OnBeaconStatusChange+0x8c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	4611      	mov	r1, r2
 80022a6:	2002      	movs	r0, #2
 80022a8:	f012 fda8 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        break;
 80022ac:	e7d5      	b.n	800225a <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <OnBeaconStatusChange+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	4611      	mov	r1, r2
 80022b4:	2002      	movs	r0, #2
 80022b6:	f012 fda1 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 80022ba:	e7ce      	b.n	800225a <OnBeaconStatusChange+0x22>
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	08015a6c 	.word	0x08015a6c
 80022c4:	08015a84 	.word	0x08015a84
 80022c8:	08015af8 	.word	0x08015af8

080022cc <OnClassChange>:
{
 80022cc:	b500      	push	{lr}
 80022ce:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <OnClassChange+0x1c>)
 80022d2:	5c1b      	ldrb	r3, [r3, r0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <OnClassChange+0x20>)
 80022d8:	2200      	movs	r2, #0
 80022da:	4611      	mov	r1, r2
 80022dc:	2002      	movs	r0, #2
 80022de:	f012 fd8d 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 80022e2:	b003      	add	sp, #12
 80022e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e8:	08015b34 	.word	0x08015b34
 80022ec:	08015b18 	.word	0x08015b18

080022f0 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80022f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80022f2:	2801      	cmp	r0, #1
 80022f4:	d006      	beq.n	8002304 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <OnNvmDataChange+0x24>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	4611      	mov	r1, r2
 80022fc:	2002      	movs	r0, #2
 80022fe:	f012 fd7d 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002302:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <OnNvmDataChange+0x28>)
 8002306:	2200      	movs	r2, #0
 8002308:	4611      	mov	r1, r2
 800230a:	2002      	movs	r0, #2
 800230c:	f012 fd76 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 8002310:	e7f7      	b.n	8002302 <OnNvmDataChange+0x12>
 8002312:	bf00      	nop
 8002314:	08015b4c 	.word	0x08015b4c
 8002318:	08015b38 	.word	0x08015b38

0800231c <OnTxTimerEvent>:
{
 800231c:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 800231e:	2101      	movs	r1, #1
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <OnTxTimerEvent+0x14>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	f006 f9a8 	bl	8008678 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <OnTxTimerEvent+0x18>)
 800232a:	f013 f839 	bl	80153a0 <UTIL_TIMER_Start>
}
 800232e:	bd08      	pop	{r3, pc}
 8002330:	2000048c 	.word	0x2000048c
 8002334:	200004b4 	.word	0x200004b4

08002338 <OnMacProcessNotify>:
{
 8002338:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 800233a:	2101      	movs	r1, #1
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <OnMacProcessNotify+0x10>)
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	f006 f99a 	bl	8008678 <osThreadFlagsSet>
}
 8002344:	bd08      	pop	{r3, pc}
 8002346:	bf00      	nop
 8002348:	20000488 	.word	0x20000488

0800234c <OnTxData>:
  if ((params != NULL))
 800234c:	2800      	cmp	r0, #0
 800234e:	d042      	beq.n	80023d6 <OnTxData+0x8a>
{
 8002350:	b510      	push	{r4, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8002356:	7803      	ldrb	r3, [r0, #0]
 8002358:	b90b      	cbnz	r3, 800235e <OnTxData+0x12>
}
 800235a:	b004      	add	sp, #16
 800235c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800235e:	2201      	movs	r2, #1
 8002360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002364:	481c      	ldr	r0, [pc, #112]	; (80023d8 <OnTxData+0x8c>)
 8002366:	f002 f98b 	bl	8004680 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800236a:	481c      	ldr	r0, [pc, #112]	; (80023dc <OnTxData+0x90>)
 800236c:	f013 f818 	bl	80153a0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <OnTxData+0x94>)
 8002372:	2200      	movs	r2, #0
 8002374:	4611      	mov	r1, r2
 8002376:	2002      	movs	r0, #2
 8002378:	f012 fd40 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800237c:	7c23      	ldrb	r3, [r4, #16]
 800237e:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002382:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002386:	9103      	str	r1, [sp, #12]
 8002388:	9202      	str	r2, [sp, #8]
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	68e3      	ldr	r3, [r4, #12]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <OnTxData+0x98>)
 8002392:	2200      	movs	r2, #0
 8002394:	4611      	mov	r1, r2
 8002396:	2003      	movs	r0, #3
 8002398:	f012 fd30 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <OnTxData+0x9c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	4611      	mov	r1, r2
 80023a2:	2003      	movs	r0, #3
 80023a4:	f012 fd2a 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80023a8:	7a23      	ldrb	r3, [r4, #8]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10c      	bne.n	80023c8 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80023ae:	7a63      	ldrb	r3, [r4, #9]
 80023b0:	b143      	cbz	r3, 80023c4 <OnTxData+0x78>
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <OnTxData+0xa0>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <OnTxData+0xa4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	4611      	mov	r1, r2
 80023bc:	2003      	movs	r0, #3
 80023be:	f012 fd1d 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 80023c2:	e7ca      	b.n	800235a <OnTxData+0xe>
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <OnTxData+0xa8>)
 80023c6:	e7f5      	b.n	80023b4 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <OnTxData+0xac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	4611      	mov	r1, r2
 80023ce:	2003      	movs	r0, #3
 80023d0:	f012 fd14 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 80023d4:	e7c1      	b.n	800235a <OnTxData+0xe>
 80023d6:	4770      	bx	lr
 80023d8:	48000400 	.word	0x48000400
 80023dc:	2000049c 	.word	0x2000049c
 80023e0:	08015b6c 	.word	0x08015b6c
 80023e4:	08015ba0 	.word	0x08015ba0
 80023e8:	08015bd4 	.word	0x08015bd4
 80023ec:	08015b60 	.word	0x08015b60
 80023f0:	08015be4 	.word	0x08015be4
 80023f4:	08015b64 	.word	0x08015b64
 80023f8:	08015bf8 	.word	0x08015bf8

080023fc <OnStopJoinTimerEvent>:
{
 80023fc:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <OnStopJoinTimerEvent+0x40>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d013      	beq.n	800242e <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002406:	4c0e      	ldr	r4, [pc, #56]	; (8002440 <OnStopJoinTimerEvent+0x44>)
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240e:	4620      	mov	r0, r4
 8002410:	f002 f936 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800241a:	4620      	mov	r0, r4
 800241c:	f002 f930 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002426:	4620      	mov	r0, r4
 8002428:	f002 f92a 	bl	8004680 <HAL_GPIO_WritePin>
}
 800242c:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 800242e:	2101      	movs	r1, #1
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <OnStopJoinTimerEvent+0x48>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f006 f920 	bl	8008678 <osThreadFlagsSet>
 8002438:	e7e5      	b.n	8002406 <OnStopJoinTimerEvent+0xa>
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000
 8002440:	48000400 	.word	0x48000400
 8002444:	20000490 	.word	0x20000490

08002448 <OnRxTimerLedEvent>:
{
 8002448:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002450:	4801      	ldr	r0, [pc, #4]	; (8002458 <OnRxTimerLedEvent+0x10>)
 8002452:	f002 f915 	bl	8004680 <HAL_GPIO_WritePin>
}
 8002456:	bd08      	pop	{r3, pc}
 8002458:	48000400 	.word	0x48000400

0800245c <OnTxTimerLedEvent>:
{
 800245c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002464:	4801      	ldr	r0, [pc, #4]	; (800246c <OnTxTimerLedEvent+0x10>)
 8002466:	f002 f90b 	bl	8004680 <HAL_GPIO_WritePin>
}
 800246a:	bd08      	pop	{r3, pc}
 800246c:	48000400 	.word	0x48000400

08002470 <Thd_Read_Sensor>:
static void Thd_Read_Sensor(void *argument){
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b083      	sub	sp, #12
	  uint8_t batteryLevel = GetBatteryLevel();
 8002474:	f7ff fb30 	bl	8001ad8 <GetBatteryLevel>
 8002478:	4605      	mov	r5, r0
      APP_LOG(TS_OFF, VLEVEL_M, "\r\nREAD SENSOR TRIGGER\r\n");
 800247a:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <Thd_Read_Sensor+0xc8>)
 800247c:	2200      	movs	r2, #0
 800247e:	4611      	mov	r1, r2
 8002480:	2002      	movs	r0, #2
 8002482:	f012 fcbb 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      app_read_sensor_data(&sensor_data_buff);
 8002486:	4c2d      	ldr	r4, [pc, #180]	; (800253c <Thd_Read_Sensor+0xcc>)
 8002488:	4620      	mov	r0, r4
 800248a:	f000 fd47 	bl	8002f1c <app_read_sensor_data>
      int int_temp_data = (int)sensor_data_buff.temp;
 800248e:	6827      	ldr	r7, [r4, #0]
 8002490:	4638      	mov	r0, r7
 8002492:	f7fe fb47 	bl	8000b24 <__aeabi_f2iz>
 8002496:	4606      	mov	r6, r0
      int decimal_temp_data = (int)((sensor_data_buff.temp - int_temp_data) * 100);
 8002498:	f7fe f9a0 	bl	80007dc <__aeabi_i2f>
 800249c:	4601      	mov	r1, r0
 800249e:	4638      	mov	r0, r7
 80024a0:	f7fe f8e6 	bl	8000670 <__aeabi_fsub>
 80024a4:	4926      	ldr	r1, [pc, #152]	; (8002540 <Thd_Read_Sensor+0xd0>)
 80024a6:	f7fe f9ed 	bl	8000884 <__aeabi_fmul>
 80024aa:	f7fe fb3b 	bl	8000b24 <__aeabi_f2iz>
      APP_LOG(TS_OFF, VLEVEL_M, "TEMP: %d.%02d \r\n", int_temp_data, decimal_temp_data);
 80024ae:	9001      	str	r0, [sp, #4]
 80024b0:	9600      	str	r6, [sp, #0]
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <Thd_Read_Sensor+0xd4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	4611      	mov	r1, r2
 80024b8:	2002      	movs	r0, #2
 80024ba:	f012 fc9f 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      int int_hum_data = (int)sensor_data_buff.r_hum;
 80024be:	6867      	ldr	r7, [r4, #4]
 80024c0:	4638      	mov	r0, r7
 80024c2:	f7fe fb2f 	bl	8000b24 <__aeabi_f2iz>
 80024c6:	4606      	mov	r6, r0
      int decimal_hum_data = (int)((sensor_data_buff.r_hum - int_hum_data) * 100);
 80024c8:	f7fe f988 	bl	80007dc <__aeabi_i2f>
 80024cc:	4601      	mov	r1, r0
 80024ce:	4638      	mov	r0, r7
 80024d0:	f7fe f8ce 	bl	8000670 <__aeabi_fsub>
 80024d4:	491a      	ldr	r1, [pc, #104]	; (8002540 <Thd_Read_Sensor+0xd0>)
 80024d6:	f7fe f9d5 	bl	8000884 <__aeabi_fmul>
 80024da:	f7fe fb23 	bl	8000b24 <__aeabi_f2iz>
      APP_LOG(TS_OFF, VLEVEL_M, "HUM: %d.%02d \r\n", int_hum_data, decimal_hum_data);
 80024de:	9001      	str	r0, [sp, #4]
 80024e0:	9600      	str	r6, [sp, #0]
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <Thd_Read_Sensor+0xd8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	4611      	mov	r1, r2
 80024e8:	2002      	movs	r0, #2
 80024ea:	f012 fc87 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "STATUS REG: %04X \r\n", sensor_data_buff.status_reg);
 80024ee:	8923      	ldrh	r3, [r4, #8]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <Thd_Read_Sensor+0xdc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	4611      	mov	r1, r2
 80024f8:	2002      	movs	r0, #2
 80024fa:	f012 fc7f 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel); /* 1 (very low) to 254 (fully charged) */
 80024fe:	9500      	str	r5, [sp, #0]
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <Thd_Read_Sensor+0xe0>)
 8002502:	2201      	movs	r2, #1
 8002504:	2100      	movs	r1, #0
 8002506:	2002      	movs	r0, #2
 8002508:	f012 fc78 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); // GREEN Led
 800250c:	4c11      	ldr	r4, [pc, #68]	; (8002554 <Thd_Read_Sensor+0xe4>)
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002514:	4620      	mov	r0, r4
 8002516:	f002 f8b3 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_Delay(50);
 800251a:	2032      	movs	r0, #50	; 0x32
 800251c:	f7ff fb6c 	bl	8001bf8 <HAL_Delay>
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); // GREEN Led
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002526:	4620      	mov	r0, r4
 8002528:	f002 f8aa 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 800252c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002530:	f7ff fb62 	bl	8001bf8 <HAL_Delay>
	for (;;)
 8002534:	e79e      	b.n	8002474 <Thd_Read_Sensor+0x4>
 8002536:	bf00      	nop
 8002538:	08015c08 	.word	0x08015c08
 800253c:	200004cc 	.word	0x200004cc
 8002540:	42c80000 	.word	0x42c80000
 8002544:	08015c20 	.word	0x08015c20
 8002548:	08015c34 	.word	0x08015c34
 800254c:	08015c44 	.word	0x08015c44
 8002550:	08015c58 	.word	0x08015c58
 8002554:	48000400 	.word	0x48000400

08002558 <OnSystemReset>:
{
 8002558:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800255a:	f008 fdad 	bl	800b0b8 <LmHandlerHalt>
 800255e:	b100      	cbz	r0, 8002562 <OnSystemReset+0xa>
}
 8002560:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002562:	f008 fa67 	bl	800aa34 <LmHandlerJoinStatus>
 8002566:	2801      	cmp	r0, #1
 8002568:	d1fa      	bne.n	8002560 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800256a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800256e:	4905      	ldr	r1, [pc, #20]	; (8002584 <OnSystemReset+0x2c>)
 8002570:	68ca      	ldr	r2, [r1, #12]
 8002572:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <OnSystemReset+0x30>)
 8002578:	4313      	orrs	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
 800257c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002580:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002582:	e7fd      	b.n	8002580 <OnSystemReset+0x28>
 8002584:	e000ed00 	.word	0xe000ed00
 8002588:	05fa0004 	.word	0x05fa0004

0800258c <OnJoinRequest>:
  if (joinParams != NULL)
 800258c:	2800      	cmp	r0, #0
 800258e:	d039      	beq.n	8002604 <OnJoinRequest+0x78>
{
 8002590:	b510      	push	{r4, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002596:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800259a:	b9fb      	cbnz	r3, 80025dc <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800259c:	481a      	ldr	r0, [pc, #104]	; (8002608 <OnJoinRequest+0x7c>)
 800259e:	f012 fea5 	bl	80152ec <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025a8:	4818      	ldr	r0, [pc, #96]	; (800260c <OnJoinRequest+0x80>)
 80025aa:	f002 f869 	bl	8004680 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <OnJoinRequest+0x84>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	4611      	mov	r1, r2
 80025b4:	2002      	movs	r0, #2
 80025b6:	f012 fc21 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80025ba:	79e3      	ldrb	r3, [r4, #7]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d006      	beq.n	80025ce <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <OnJoinRequest+0x88>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	4611      	mov	r1, r2
 80025c6:	2002      	movs	r0, #2
 80025c8:	f012 fc18 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 80025cc:	e00c      	b.n	80025e8 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <OnJoinRequest+0x8c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	4611      	mov	r1, r2
 80025d4:	2002      	movs	r0, #2
 80025d6:	f012 fc11 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 80025da:	e005      	b.n	80025e8 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <OnJoinRequest+0x90>)
 80025de:	2200      	movs	r2, #0
 80025e0:	4611      	mov	r1, r2
 80025e2:	2002      	movs	r0, #2
 80025e4:	f012 fc0a 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 80025e8:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80025ec:	f994 2005 	ldrsb.w	r2, [r4, #5]
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <OnJoinRequest+0x94>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	4611      	mov	r1, r2
 80025fa:	2003      	movs	r0, #3
 80025fc:	f012 fbfe 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 8002600:	b002      	add	sp, #8
 8002602:	bd10      	pop	{r4, pc}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000440 	.word	0x20000440
 800260c:	48000400 	.word	0x48000400
 8002610:	08015c64 	.word	0x08015c64
 8002614:	08015c9c 	.word	0x08015c9c
 8002618:	08015c7c 	.word	0x08015c7c
 800261c:	08015cbc 	.word	0x08015cbc
 8002620:	08015cd8 	.word	0x08015cd8

08002624 <OnTxPeriodicityChanged>:
{
 8002624:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <OnTxPeriodicityChanged+0x28>)
 8002628:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800262a:	b910      	cbnz	r0, 8002632 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800262c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002630:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002632:	4c07      	ldr	r4, [pc, #28]	; (8002650 <OnTxPeriodicityChanged+0x2c>)
 8002634:	4620      	mov	r0, r4
 8002636:	f012 fe59 	bl	80152ec <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <OnTxPeriodicityChanged+0x28>)
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	4620      	mov	r0, r4
 8002640:	f012 fef4 	bl	801542c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002644:	4620      	mov	r0, r4
 8002646:	f012 feab 	bl	80153a0 <UTIL_TIMER_Start>
}
 800264a:	bd10      	pop	{r4, pc}
 800264c:	20000070 	.word	0x20000070
 8002650:	200004b4 	.word	0x200004b4

08002654 <OnRxData>:
  if (params != NULL)
 8002654:	2900      	cmp	r1, #0
 8002656:	d06e      	beq.n	8002736 <OnRxData+0xe2>
{
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	4604      	mov	r4, r0
 800265e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002666:	4834      	ldr	r0, [pc, #208]	; (8002738 <OnRxData+0xe4>)
 8002668:	f002 f80a 	bl	8004680 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800266c:	4833      	ldr	r0, [pc, #204]	; (800273c <OnRxData+0xe8>)
 800266e:	f012 fe97 	bl	80153a0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002672:	782e      	ldrb	r6, [r5, #0]
 8002674:	2e00      	cmp	r6, #0
 8002676:	d042      	beq.n	80026fe <OnRxData+0xaa>
      if (appData != NULL)
 8002678:	2c00      	cmp	r4, #0
 800267a:	d03f      	beq.n	80026fc <OnRxData+0xa8>
        RxPort = appData->Port;
 800267c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800267e:	6863      	ldr	r3, [r4, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d03c      	beq.n	80026fe <OnRxData+0xaa>
          switch (appData->Port)
 8002684:	2e02      	cmp	r6, #2
 8002686:	d016      	beq.n	80026b6 <OnRxData+0x62>
 8002688:	2e03      	cmp	r6, #3
 800268a:	d138      	bne.n	80026fe <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800268c:	7862      	ldrb	r2, [r4, #1]
 800268e:	2a01      	cmp	r2, #1
 8002690:	d135      	bne.n	80026fe <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d006      	beq.n	80026a6 <OnRxData+0x52>
 8002698:	2b02      	cmp	r3, #2
 800269a:	d008      	beq.n	80026ae <OnRxData+0x5a>
 800269c:	bb7b      	cbnz	r3, 80026fe <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800269e:	2000      	movs	r0, #0
 80026a0:	f008 fa9a 	bl	800abd8 <LmHandlerRequestClass>
                    break;
 80026a4:	e02b      	b.n	80026fe <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f008 fa96 	bl	800abd8 <LmHandlerRequestClass>
                    break;
 80026ac:	e027      	b.n	80026fe <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 80026ae:	2002      	movs	r0, #2
 80026b0:	f008 fa92 	bl	800abd8 <LmHandlerRequestClass>
                    break;
 80026b4:	e023      	b.n	80026fe <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80026b6:	7862      	ldrb	r2, [r4, #1]
 80026b8:	2a01      	cmp	r2, #1
 80026ba:	d120      	bne.n	80026fe <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <OnRxData+0xec>)
 80026c4:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80026c6:	b963      	cbnz	r3, 80026e2 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <OnRxData+0xf0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	4611      	mov	r1, r2
 80026ce:	2003      	movs	r0, #3
 80026d0:	f012 fb94 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026da:	4817      	ldr	r0, [pc, #92]	; (8002738 <OnRxData+0xe4>)
 80026dc:	f001 ffd0 	bl	8004680 <HAL_GPIO_WritePin>
 80026e0:	e00d      	b.n	80026fe <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <OnRxData+0xf4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	4611      	mov	r1, r2
 80026e8:	2003      	movs	r0, #3
 80026ea:	f012 fb87 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026f4:	4810      	ldr	r0, [pc, #64]	; (8002738 <OnRxData+0xe4>)
 80026f6:	f001 ffc3 	bl	8004680 <HAL_GPIO_WritePin>
 80026fa:	e000      	b.n	80026fe <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80026fc:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80026fe:	7c2b      	ldrb	r3, [r5, #16]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d901      	bls.n	8002708 <OnRxData+0xb4>
}
 8002704:	b006      	add	sp, #24
 8002706:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002708:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800270c:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002710:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002714:	9005      	str	r0, [sp, #20]
 8002716:	9104      	str	r1, [sp, #16]
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <OnRxData+0xf8>)
 800271a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	9202      	str	r2, [sp, #8]
 8002722:	9601      	str	r6, [sp, #4]
 8002724:	68eb      	ldr	r3, [r5, #12]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <OnRxData+0xfc>)
 800272a:	2200      	movs	r2, #0
 800272c:	4611      	mov	r1, r2
 800272e:	2003      	movs	r0, #3
 8002730:	f012 fb64 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 8002734:	e7e6      	b.n	8002704 <OnRxData+0xb0>
 8002736:	4770      	bx	lr
 8002738:	48000400 	.word	0x48000400
 800273c:	20000458 	.word	0x20000458
 8002740:	2000043e 	.word	0x2000043e
 8002744:	08015d04 	.word	0x08015d04
 8002748:	08015d10 	.word	0x08015d10
 800274c:	08016008 	.word	0x08016008
 8002750:	08015d1c 	.word	0x08015d1c

08002754 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800275a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <OnStoreContextRequest+0x20>)
 8002760:	f7fe fedc 	bl	800151c <FLASH_IF_Erase>
 8002764:	b100      	cbz	r0, 8002768 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002766:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002768:	462a      	mov	r2, r5
 800276a:	4621      	mov	r1, r4
 800276c:	4801      	ldr	r0, [pc, #4]	; (8002774 <OnStoreContextRequest+0x20>)
 800276e:	f7fe fe9d 	bl	80014ac <FLASH_IF_Write>
}
 8002772:	e7f8      	b.n	8002766 <OnStoreContextRequest+0x12>
 8002774:	0803f000 	.word	0x0803f000

08002778 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002778:	b508      	push	{r3, lr}
 800277a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800277c:	4901      	ldr	r1, [pc, #4]	; (8002784 <OnRestoreContextRequest+0xc>)
 800277e:	f7fe feb1 	bl	80014e4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002782:	bd08      	pop	{r3, pc}
 8002784:	0803f000 	.word	0x0803f000

08002788 <StopJoin>:
{
 8002788:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800278a:	4c1e      	ldr	r4, [pc, #120]	; (8002804 <StopJoin+0x7c>)
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002792:	4620      	mov	r0, r4
 8002794:	f001 ff74 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800279e:	4620      	mov	r0, r4
 80027a0:	f001 ff6e 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027aa:	4620      	mov	r0, r4
 80027ac:	f001 ff68 	bl	8004680 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80027b0:	4815      	ldr	r0, [pc, #84]	; (8002808 <StopJoin+0x80>)
 80027b2:	f012 fd9b 	bl	80152ec <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80027b6:	f008 fc77 	bl	800b0a8 <LmHandlerStop>
 80027ba:	b148      	cbz	r0, 80027d0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <StopJoin+0x84>)
 80027be:	2200      	movs	r2, #0
 80027c0:	4611      	mov	r1, r2
 80027c2:	2002      	movs	r0, #2
 80027c4:	f012 fb1a 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80027c8:	4811      	ldr	r0, [pc, #68]	; (8002810 <StopJoin+0x88>)
 80027ca:	f012 fde9 	bl	80153a0 <UTIL_TIMER_Start>
}
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <StopJoin+0x8c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	4611      	mov	r1, r2
 80027d6:	2002      	movs	r0, #2
 80027d8:	f012 fb10 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80027dc:	4c0e      	ldr	r4, [pc, #56]	; (8002818 <StopJoin+0x90>)
 80027de:	2501      	movs	r5, #1
 80027e0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <StopJoin+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	4611      	mov	r1, r2
 80027e8:	2002      	movs	r0, #2
 80027ea:	f012 fb07 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80027ee:	480c      	ldr	r0, [pc, #48]	; (8002820 <StopJoin+0x98>)
 80027f0:	f008 fad2 	bl	800ad98 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80027f4:	4629      	mov	r1, r5
 80027f6:	7820      	ldrb	r0, [r4, #0]
 80027f8:	f008 f88a 	bl	800a910 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <StopJoin+0x80>)
 80027fe:	f012 fdcf 	bl	80153a0 <UTIL_TIMER_Start>
 8002802:	e7e1      	b.n	80027c8 <StopJoin+0x40>
 8002804:	48000400 	.word	0x48000400
 8002808:	200004b4 	.word	0x200004b4
 800280c:	08015d64 	.word	0x08015d64
 8002810:	20000470 	.word	0x20000470
 8002814:	08015d84 	.word	0x08015d84
 8002818:	20000000 	.word	0x20000000
 800281c:	08015d98 	.word	0x08015d98
 8002820:	20000058 	.word	0x20000058

08002824 <Thd_LoraStopJoin>:
{
 8002824:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800282a:	2100      	movs	r1, #0
 800282c:	2001      	movs	r0, #1
 800282e:	f005 ff6b 	bl	8008708 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 8002832:	f7ff ffa9 	bl	8002788 <StopJoin>
  for (;;)
 8002836:	e7f6      	b.n	8002826 <Thd_LoraStopJoin+0x2>

08002838 <StoreContext>:
{
 8002838:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800283a:	f008 fcc7 	bl	800b1cc <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800283e:	f110 0f08 	cmn.w	r0, #8
 8002842:	d003      	beq.n	800284c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002844:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002848:	d007      	beq.n	800285a <StoreContext+0x22>
}
 800284a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <StoreContext+0x30>)
 800284e:	2200      	movs	r2, #0
 8002850:	4611      	mov	r1, r2
 8002852:	2002      	movs	r0, #2
 8002854:	f012 fad2 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 8002858:	e7f7      	b.n	800284a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <StoreContext+0x34>)
 800285c:	2200      	movs	r2, #0
 800285e:	4611      	mov	r1, r2
 8002860:	2002      	movs	r0, #2
 8002862:	f012 facb 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 8002866:	e7f0      	b.n	800284a <StoreContext+0x12>
 8002868:	08015db8 	.word	0x08015db8
 800286c:	08015dd0 	.word	0x08015dd0

08002870 <Thd_LoraStoreContext>:
{
 8002870:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002876:	2100      	movs	r1, #0
 8002878:	2001      	movs	r0, #1
 800287a:	f005 ff45 	bl	8008708 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 800287e:	f7ff ffdb 	bl	8002838 <StoreContext>
  for (;;)
 8002882:	e7f6      	b.n	8002872 <Thd_LoraStoreContext+0x2>

08002884 <SendTxData>:
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002888:	f7ff f926 	bl	8001ad8 <GetBatteryLevel>
 800288c:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 800288e:	f008 f8e3 	bl	800aa58 <LmHandlerIsBusy>
 8002892:	b188      	cbz	r0, 80028b8 <SendTxData+0x34>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002894:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002896:	4c5a      	ldr	r4, [pc, #360]	; (8002a00 <SendTxData+0x17c>)
 8002898:	4620      	mov	r0, r4
 800289a:	f012 fd27 	bl	80152ec <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800289e:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <SendTxData+0x180>)
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	42a9      	cmp	r1, r5
 80028a4:	bf38      	it	cc
 80028a6:	4629      	movcc	r1, r5
 80028a8:	4620      	mov	r0, r4
 80028aa:	f012 fdbf 	bl	801542c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f012 fd76 	bl	80153a0 <UTIL_TIMER_Start>
}
 80028b4:	b009      	add	sp, #36	; 0x24
 80028b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EnvSensors_Read(&sensor_data);
 80028b8:	a802      	add	r0, sp, #8
 80028ba:	f7ff f9eb 	bl	8001c94 <EnvSensors_Read>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 80028be:	9400      	str	r4, [sp, #0]
 80028c0:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <SendTxData+0x184>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	2100      	movs	r1, #0
 80028c6:	2002      	movs	r0, #2
 80028c8:	f012 fa98 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80028cc:	9803      	ldr	r0, [sp, #12]
 80028ce:	f7fe f929 	bl	8000b24 <__aeabi_f2iz>
 80028d2:	b200      	sxth	r0, r0
 80028d4:	9000      	str	r0, [sp, #0]
 80028d6:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <SendTxData+0x188>)
 80028d8:	2201      	movs	r2, #1
 80028da:	2100      	movs	r1, #0
 80028dc:	2002      	movs	r0, #2
 80028de:	f012 fa8d 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 80028e2:	4c4b      	ldr	r4, [pc, #300]	; (8002a10 <SendTxData+0x18c>)
 80028e4:	2302      	movs	r3, #2
 80028e6:	7023      	strb	r3, [r4, #0]
    humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80028e8:	494a      	ldr	r1, [pc, #296]	; (8002a14 <SendTxData+0x190>)
 80028ea:	9804      	ldr	r0, [sp, #16]
 80028ec:	f7fd ffca 	bl	8000884 <__aeabi_fmul>
 80028f0:	f7fe f93e 	bl	8000b70 <__aeabi_f2uiz>
 80028f4:	b285      	uxth	r5, r0
    temperature = (int16_t)(sensor_data.temperature);
 80028f6:	9803      	ldr	r0, [sp, #12]
 80028f8:	f7fe f914 	bl	8000b24 <__aeabi_f2iz>
 80028fc:	b206      	sxth	r6, r0
    pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80028fe:	4946      	ldr	r1, [pc, #280]	; (8002a18 <SendTxData+0x194>)
 8002900:	9802      	ldr	r0, [sp, #8]
 8002902:	f7fd ffbf 	bl	8000884 <__aeabi_fmul>
 8002906:	4943      	ldr	r1, [pc, #268]	; (8002a14 <SendTxData+0x190>)
 8002908:	f7fe f870 	bl	80009ec <__aeabi_fdiv>
 800290c:	f7fe f930 	bl	8000b70 <__aeabi_f2uiz>
    AppData.Buffer[i++] = AppLedStateOn;
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <SendTxData+0x198>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002918:	6863      	ldr	r3, [r4, #4]
 800291a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800291e:	705a      	strb	r2, [r3, #1]
    AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002920:	6863      	ldr	r3, [r4, #4]
 8002922:	7098      	strb	r0, [r3, #2]
    AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002924:	6863      	ldr	r3, [r4, #4]
 8002926:	70de      	strb	r6, [r3, #3]
    AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002928:	6863      	ldr	r3, [r4, #4]
 800292a:	0a2a      	lsrs	r2, r5, #8
 800292c:	711a      	strb	r2, [r3, #4]
    AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800292e:	6863      	ldr	r3, [r4, #4]
 8002930:	715d      	strb	r5, [r3, #5]
    if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <SendTxData+0x19c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d002      	beq.n	8002940 <SendTxData+0xbc>
 800293a:	2b01      	cmp	r3, #1
 800293c:	d000      	beq.n	8002940 <SendTxData+0xbc>
        || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800293e:	b9d3      	cbnz	r3, 8002976 <SendTxData+0xf2>
      AppData.Buffer[i++] = 0;
 8002940:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <SendTxData+0x18c>)
 8002942:	6851      	ldr	r1, [r2, #4]
 8002944:	2300      	movs	r3, #0
 8002946:	718b      	strb	r3, [r1, #6]
      AppData.Buffer[i++] = 0;
 8002948:	6851      	ldr	r1, [r2, #4]
 800294a:	71cb      	strb	r3, [r1, #7]
      AppData.Buffer[i++] = 0;
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	7213      	strb	r3, [r2, #8]
      AppData.Buffer[i++] = 0;
 8002950:	7253      	strb	r3, [r2, #9]
 8002952:	220a      	movs	r2, #10
    AppData.BufferSize = i;
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <SendTxData+0x18c>)
 8002956:	705a      	strb	r2, [r3, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <SendTxData+0x1a0>)
 800295a:	7a5b      	ldrb	r3, [r3, #9]
 800295c:	bb3b      	cbnz	r3, 80029ae <SendTxData+0x12a>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800295e:	2200      	movs	r2, #0
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <SendTxData+0x19c>)
 8002962:	78d9      	ldrb	r1, [r3, #3]
 8002964:	482a      	ldr	r0, [pc, #168]	; (8002a10 <SendTxData+0x18c>)
 8002966:	f008 f88d 	bl	800aa84 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 800296a:	b370      	cbz	r0, 80029ca <SendTxData+0x146>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800296c:	f110 0f06 	cmn.w	r0, #6
 8002970:	d033      	beq.n	80029da <SendTxData+0x156>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002972:	2500      	movs	r5, #0
 8002974:	e78f      	b.n	8002896 <SendTxData+0x12>
      latitude = sensor_data.latitude;
 8002976:	9d05      	ldr	r5, [sp, #20]
      longitude = sensor_data.longitude;
 8002978:	9c06      	ldr	r4, [sp, #24]
      AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800297a:	4e25      	ldr	r6, [pc, #148]	; (8002a10 <SendTxData+0x18c>)
 800297c:	6877      	ldr	r7, [r6, #4]
 800297e:	f7ff f8ab 	bl	8001ad8 <GetBatteryLevel>
 8002982:	71b8      	strb	r0, [r7, #6]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002984:	6873      	ldr	r3, [r6, #4]
 8002986:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800298a:	71da      	strb	r2, [r3, #7]
      AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800298c:	6873      	ldr	r3, [r6, #4]
 800298e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002992:	721a      	strb	r2, [r3, #8]
      AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002994:	725d      	strb	r5, [r3, #9]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002996:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800299a:	729a      	strb	r2, [r3, #10]
      AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800299c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80029a0:	72da      	strb	r2, [r3, #11]
      AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 80029a2:	731c      	strb	r4, [r3, #12]
      AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 80029a4:	2200      	movs	r2, #0
 80029a6:	735a      	strb	r2, [r3, #13]
      AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 80029a8:	739a      	strb	r2, [r3, #14]
 80029aa:	220f      	movs	r2, #15
 80029ac:	e7d2      	b.n	8002954 <SendTxData+0xd0>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80029ae:	f008 f841 	bl	800aa34 <LmHandlerJoinStatus>
 80029b2:	2801      	cmp	r0, #1
 80029b4:	d1d3      	bne.n	800295e <SendTxData+0xda>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80029b6:	481b      	ldr	r0, [pc, #108]	; (8002a24 <SendTxData+0x1a0>)
 80029b8:	f012 fc98 	bl	80152ec <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c2:	4819      	ldr	r0, [pc, #100]	; (8002a28 <SendTxData+0x1a4>)
 80029c4:	f001 fe5c 	bl	8004680 <HAL_GPIO_WritePin>
 80029c8:	e7c9      	b.n	800295e <SendTxData+0xda>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <SendTxData+0x1a8>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	2100      	movs	r1, #0
 80029d0:	4610      	mov	r0, r2
 80029d2:	f012 fa13 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80029d6:	2500      	movs	r5, #0
 80029d8:	e75d      	b.n	8002896 <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 80029da:	f008 f825 	bl	800aa28 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 80029de:	4605      	mov	r5, r0
 80029e0:	2800      	cmp	r0, #0
 80029e2:	f43f af58 	beq.w	8002896 <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <SendTxData+0x1ac>)
 80029e8:	fba3 2300 	umull	r2, r3, r3, r0
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <SendTxData+0x1b0>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	2100      	movs	r1, #0
 80029f6:	4610      	mov	r0, r2
 80029f8:	f012 fa00 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 80029fc:	e74b      	b.n	8002896 <SendTxData+0x12>
 80029fe:	bf00      	nop
 8002a00:	200004b4 	.word	0x200004b4
 8002a04:	20000070 	.word	0x20000070
 8002a08:	08015c58 	.word	0x08015c58
 8002a0c:	08015de8 	.word	0x08015de8
 8002a10:	20000004 	.word	0x20000004
 8002a14:	41200000 	.word	0x41200000
 8002a18:	42c80000 	.word	0x42c80000
 8002a1c:	2000043e 	.word	0x2000043e
 8002a20:	20000058 	.word	0x20000058
 8002a24:	20000440 	.word	0x20000440
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	08015df4 	.word	0x08015df4
 8002a30:	10624dd3 	.word	0x10624dd3
 8002a34:	08015e04 	.word	0x08015e04

08002a38 <Thd_LoraSendProcess>:
{
 8002a38:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2001      	movs	r0, #1
 8002a42:	f005 fe61 	bl	8008708 <osThreadFlagsWait>
    SendTxData();  /*what you want to do*/
 8002a46:	f7ff ff1d 	bl	8002884 <SendTxData>
  for (;;)
 8002a4a:	e7f6      	b.n	8002a3a <Thd_LoraSendProcess+0x2>

08002a4c <Thd_LmHandlerProcess>:
{
 8002a4c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a52:	2100      	movs	r1, #0
 8002a54:	2001      	movs	r0, #1
 8002a56:	f005 fe57 	bl	8008708 <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 8002a5a:	f008 f899 	bl	800ab90 <LmHandlerProcess>
  for (;;)
 8002a5e:	e7f6      	b.n	8002a4e <Thd_LmHandlerProcess+0x2>

08002a60 <OnJoinTimerLedEvent>:
{
 8002a60:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a66:	4802      	ldr	r0, [pc, #8]	; (8002a70 <OnJoinTimerLedEvent+0x10>)
 8002a68:	f001 fe0f 	bl	800468a <HAL_GPIO_TogglePin>
}
 8002a6c:	bd08      	pop	{r3, pc}
 8002a6e:	bf00      	nop
 8002a70:	48000400 	.word	0x48000400

08002a74 <LoRaWAN_Init>:
{
 8002a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a76:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002a78:	2400      	movs	r4, #0
 8002a7a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002a7c:	9402      	str	r4, [sp, #8]
 8002a7e:	2703      	movs	r7, #3
 8002a80:	9701      	str	r7, [sp, #4]
 8002a82:	2601      	movs	r6, #1
 8002a84:	9600      	str	r6, [sp, #0]
 8002a86:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <LoRaWAN_Init+0x19c>)
 8002a88:	4622      	mov	r2, r4
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f012 f9b5 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002a92:	9402      	str	r4, [sp, #8]
 8002a94:	2305      	movs	r3, #5
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	2502      	movs	r5, #2
 8002a9a:	9500      	str	r5, [sp, #0]
 8002a9c:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <LoRaWAN_Init+0x1a0>)
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f012 f9aa 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002aa8:	9402      	str	r4, [sp, #8]
 8002aaa:	9701      	str	r7, [sp, #4]
 8002aac:	9600      	str	r6, [sp, #0]
 8002aae:	4b5a      	ldr	r3, [pc, #360]	; (8002c18 <LoRaWAN_Init+0x1a4>)
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f012 f9a1 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002aba:	a905      	add	r1, sp, #20
 8002abc:	4620      	mov	r0, r4
 8002abe:	f008 fadd 	bl	800b07c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002ac2:	9b05      	ldr	r3, [sp, #20]
 8002ac4:	0e1a      	lsrs	r2, r3, #24
 8002ac6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002aca:	9102      	str	r1, [sp, #8]
 8002acc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <LoRaWAN_Init+0x1a8>)
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4628      	mov	r0, r5
 8002adc:	f012 f98e 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002ae0:	a905      	add	r1, sp, #20
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f008 faca 	bl	800b07c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002ae8:	9b05      	ldr	r3, [sp, #20]
 8002aea:	0e1a      	lsrs	r2, r3, #24
 8002aec:	b2d9      	uxtb	r1, r3
 8002aee:	9103      	str	r1, [sp, #12]
 8002af0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002af4:	9102      	str	r1, [sp, #8]
 8002af6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	9200      	str	r2, [sp, #0]
 8002afe:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <LoRaWAN_Init+0x1ac>)
 8002b00:	4622      	mov	r2, r4
 8002b02:	4621      	mov	r1, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f012 f979 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002b0a:	9400      	str	r4, [sp, #0]
 8002b0c:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <LoRaWAN_Init+0x1b0>)
 8002b0e:	4622      	mov	r2, r4
 8002b10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b14:	4844      	ldr	r0, [pc, #272]	; (8002c28 <LoRaWAN_Init+0x1b4>)
 8002b16:	f012 fb8b 	bl	8015230 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002b1a:	9400      	str	r4, [sp, #0]
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <LoRaWAN_Init+0x1b8>)
 8002b1e:	4622      	mov	r2, r4
 8002b20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b24:	4842      	ldr	r0, [pc, #264]	; (8002c30 <LoRaWAN_Init+0x1bc>)
 8002b26:	f012 fb83 	bl	8015230 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002b2a:	9400      	str	r4, [sp, #0]
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <LoRaWAN_Init+0x1c0>)
 8002b2e:	4632      	mov	r2, r6
 8002b30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b34:	4840      	ldr	r0, [pc, #256]	; (8002c38 <LoRaWAN_Init+0x1c4>)
 8002b36:	f012 fb7b 	bl	8015230 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fe fcb0 	bl	80014a0 <FLASH_IF_Init>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d153      	bne.n	8002bec <LoRaWAN_Init+0x178>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002b44:	2400      	movs	r4, #0
 8002b46:	9400      	str	r4, [sp, #0]
 8002b48:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <LoRaWAN_Init+0x1c8>)
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002b50:	483b      	ldr	r0, [pc, #236]	; (8002c40 <LoRaWAN_Init+0x1cc>)
 8002b52:	f012 fb6d 	bl	8015230 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8002b56:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <LoRaWAN_Init+0x1d0>)
 8002b58:	4621      	mov	r1, r4
 8002b5a:	483b      	ldr	r0, [pc, #236]	; (8002c48 <LoRaWAN_Init+0x1d4>)
 8002b5c:	f005 fd20 	bl	80085a0 <osThreadNew>
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <LoRaWAN_Init+0x1d8>)
 8002b62:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d044      	beq.n	8002bf2 <LoRaWAN_Init+0x17e>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 8002b68:	4a39      	ldr	r2, [pc, #228]	; (8002c50 <LoRaWAN_Init+0x1dc>)
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4839      	ldr	r0, [pc, #228]	; (8002c54 <LoRaWAN_Init+0x1e0>)
 8002b6e:	f005 fd17 	bl	80085a0 <osThreadNew>
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <LoRaWAN_Init+0x1e4>)
 8002b74:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d03e      	beq.n	8002bf8 <LoRaWAN_Init+0x184>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 8002b7a:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <LoRaWAN_Init+0x1e8>)
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4838      	ldr	r0, [pc, #224]	; (8002c60 <LoRaWAN_Init+0x1ec>)
 8002b80:	f005 fd0e 	bl	80085a0 <osThreadNew>
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <LoRaWAN_Init+0x1f0>)
 8002b86:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d038      	beq.n	8002bfe <LoRaWAN_Init+0x18a>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 8002b8c:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <LoRaWAN_Init+0x1f4>)
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4836      	ldr	r0, [pc, #216]	; (8002c6c <LoRaWAN_Init+0x1f8>)
 8002b92:	f005 fd05 	bl	80085a0 <osThreadNew>
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <LoRaWAN_Init+0x1fc>)
 8002b98:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d032      	beq.n	8002c04 <LoRaWAN_Init+0x190>
  LoraInfo_Init();
 8002b9e:	f000 f893 	bl	8002cc8 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002ba2:	4934      	ldr	r1, [pc, #208]	; (8002c74 <LoRaWAN_Init+0x200>)
 8002ba4:	4834      	ldr	r0, [pc, #208]	; (8002c78 <LoRaWAN_Init+0x204>)
 8002ba6:	f008 fa1d 	bl	800afe4 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002baa:	4834      	ldr	r0, [pc, #208]	; (8002c7c <LoRaWAN_Init+0x208>)
 8002bac:	f008 f8f4 	bl	800ad98 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002bb0:	4821      	ldr	r0, [pc, #132]	; (8002c38 <LoRaWAN_Init+0x1c4>)
 8002bb2:	f012 fbf5 	bl	80153a0 <UTIL_TIMER_Start>
  Thd_Read_SensorId = osThreadNew(Thd_Read_Sensor, NULL, &Thd_Read_Sensor_attr);
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <LoRaWAN_Init+0x20c>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4832      	ldr	r0, [pc, #200]	; (8002c84 <LoRaWAN_Init+0x210>)
 8002bbc:	f005 fcf0 	bl	80085a0 <osThreadNew>
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <LoRaWAN_Init+0x214>)
 8002bc2:	6018      	str	r0, [r3, #0]
  if (Thd_Read_SensorId == NULL)
 8002bc4:	b308      	cbz	r0, 8002c0a <LoRaWAN_Init+0x196>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <LoRaWAN_Init+0x218>)
 8002bca:	7818      	ldrb	r0, [r3, #0]
 8002bcc:	f007 fea0 	bl	800a910 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002bd0:	4c2f      	ldr	r4, [pc, #188]	; (8002c90 <LoRaWAN_Init+0x21c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	9200      	str	r2, [sp, #0]
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <LoRaWAN_Init+0x220>)
 8002bd8:	492f      	ldr	r1, [pc, #188]	; (8002c98 <LoRaWAN_Init+0x224>)
 8002bda:	6809      	ldr	r1, [r1, #0]
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f012 fb27 	bl	8015230 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f012 fbdc 	bl	80153a0 <UTIL_TIMER_Start>
}
 8002be8:	b007      	add	sp, #28
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002bec:	f7fe fdae 	bl	800174c <Error_Handler>
 8002bf0:	e7a8      	b.n	8002b44 <LoRaWAN_Init+0xd0>
    Error_Handler();
 8002bf2:	f7fe fdab 	bl	800174c <Error_Handler>
 8002bf6:	e7b7      	b.n	8002b68 <LoRaWAN_Init+0xf4>
    Error_Handler();
 8002bf8:	f7fe fda8 	bl	800174c <Error_Handler>
 8002bfc:	e7bd      	b.n	8002b7a <LoRaWAN_Init+0x106>
    Error_Handler();
 8002bfe:	f7fe fda5 	bl	800174c <Error_Handler>
 8002c02:	e7c3      	b.n	8002b8c <LoRaWAN_Init+0x118>
    Error_Handler();
 8002c04:	f7fe fda2 	bl	800174c <Error_Handler>
 8002c08:	e7c9      	b.n	8002b9e <LoRaWAN_Init+0x12a>
    Error_Handler();
 8002c0a:	f7fe fd9f 	bl	800174c <Error_Handler>
 8002c0e:	e7da      	b.n	8002bc6 <LoRaWAN_Init+0x152>
 8002c10:	08015e24 	.word	0x08015e24
 8002c14:	08015e48 	.word	0x08015e48
 8002c18:	08015e6c 	.word	0x08015e6c
 8002c1c:	08015e90 	.word	0x08015e90
 8002c20:	08015eb4 	.word	0x08015eb4
 8002c24:	0800245d 	.word	0x0800245d
 8002c28:	2000049c 	.word	0x2000049c
 8002c2c:	08002449 	.word	0x08002449
 8002c30:	20000458 	.word	0x20000458
 8002c34:	08002a61 	.word	0x08002a61
 8002c38:	20000440 	.word	0x20000440
 8002c3c:	080023fd 	.word	0x080023fd
 8002c40:	20000470 	.word	0x20000470
 8002c44:	08015f54 	.word	0x08015f54
 8002c48:	08002a4d 	.word	0x08002a4d
 8002c4c:	20000488 	.word	0x20000488
 8002c50:	08015f78 	.word	0x08015f78
 8002c54:	08002a39 	.word	0x08002a39
 8002c58:	2000048c 	.word	0x2000048c
 8002c5c:	08015fc0 	.word	0x08015fc0
 8002c60:	08002871 	.word	0x08002871
 8002c64:	20000494 	.word	0x20000494
 8002c68:	08015f9c 	.word	0x08015f9c
 8002c6c:	08002825 	.word	0x08002825
 8002c70:	20000490 	.word	0x20000490
 8002c74:	01030000 	.word	0x01030000
 8002c78:	2000000c 	.word	0x2000000c
 8002c7c:	20000058 	.word	0x20000058
 8002c80:	08015fe4 	.word	0x08015fe4
 8002c84:	08002471 	.word	0x08002471
 8002c88:	20000498 	.word	0x20000498
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	200004b4 	.word	0x200004b4
 8002c94:	0800231d 	.word	0x0800231d
 8002c98:	20000070 	.word	0x20000070

08002c9c <HAL_GPIO_EXTI_Callback>:
{
 8002c9c:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002c9e:	2802      	cmp	r0, #2
 8002ca0:	d002      	beq.n	8002ca8 <HAL_GPIO_EXTI_Callback+0xc>
 8002ca2:	2840      	cmp	r0, #64	; 0x40
 8002ca4:	d006      	beq.n	8002cb4 <HAL_GPIO_EXTI_Callback+0x18>
}
 8002ca6:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_GPIO_EXTI_Callback+0x24>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	f005 fce3 	bl	8008678 <osThreadFlagsSet>
      break;
 8002cb2:	e7f8      	b.n	8002ca6 <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	f005 fcdd 	bl	8008678 <osThreadFlagsSet>
}
 8002cbe:	e7f2      	b.n	8002ca6 <HAL_GPIO_EXTI_Callback+0xa>
 8002cc0:	20000490 	.word	0x20000490
 8002cc4:	20000494 	.word	0x20000494

08002cc8 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <LoraInfo_Init+0x1c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002cce:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002cd0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002cd2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002cd8:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002cdc:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002ce2:	4770      	bx	lr
 8002ce4:	200004d8 	.word	0x200004d8

08002ce8 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002ce8:	4800      	ldr	r0, [pc, #0]	; (8002cec <LoraInfo_GetPtr+0x4>)
 8002cea:	4770      	bx	lr
 8002cec:	200004d8 	.word	0x200004d8

08002cf0 <sht30_uint8_to_uint16>:
/**
 * Converts two uint8_t vars into one uint16_t var
 */
static uint16_t sht30_uint8_to_uint16(uint8_t msb, uint8_t lsb){
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
}
 8002cf0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8002cf4:	4770      	bx	lr
	...

08002cf8 <sht30_calculate_crc>:
sensor_status_t sht30_calculate_crc(const uint8_t *data, size_t length){
 8002cf8:	b508      	push	{r3, lr}
	for (size_t i = 0; i < length; i++) {
 8002cfa:	f04f 0c00 	mov.w	ip, #0
	uint8_t crc = 0xff;
 8002cfe:	23ff      	movs	r3, #255	; 0xff
	for (size_t i = 0; i < length; i++) {
 8002d00:	e00e      	b.n	8002d20 <sht30_calculate_crc+0x28>
				crc <<= 1u;
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < 8; j++) {
 8002d06:	3201      	adds	r2, #1
 8002d08:	2a07      	cmp	r2, #7
 8002d0a:	d807      	bhi.n	8002d1c <sht30_calculate_crc+0x24>
			if ((crc & 0x80u) != 0) {
 8002d0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d10:	d0f7      	beq.n	8002d02 <sht30_calculate_crc+0xa>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002d1a:	e7f4      	b.n	8002d06 <sht30_calculate_crc+0xe>
	for (size_t i = 0; i < length; i++) {
 8002d1c:	f10c 0c01 	add.w	ip, ip, #1
 8002d20:	458c      	cmp	ip, r1
 8002d22:	d204      	bcs.n	8002d2e <sht30_calculate_crc+0x36>
		crc ^= data[i];
 8002d24:	f810 200c 	ldrb.w	r2, [r0, ip]
 8002d28:	4053      	eors	r3, r2
		for (size_t j = 0; j < 8; j++) {
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	e7ec      	b.n	8002d08 <sht30_calculate_crc+0x10>
	if (crc != data[length]) {
 8002d2e:	5c42      	ldrb	r2, [r0, r1]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d101      	bne.n	8002d38 <sht30_calculate_crc+0x40>
		return SENSOR_STATUS_OK;
 8002d34:	2001      	movs	r0, #1
}
 8002d36:	bd08      	pop	{r3, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 CRC Check ERROR\r\n");
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <sht30_calculate_crc+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f012 f85c 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002d44:	2002      	movs	r0, #2
 8002d46:	e7f6      	b.n	8002d36 <sht30_calculate_crc+0x3e>
 8002d48:	08016020 	.word	0x08016020

08002d4c <sht30_check_status_register>:
sensor_status_t sht30_check_status_register(struct sensor_data_t* data_buff){
 8002d4c:	b530      	push	{r4, r5, lr}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	4605      	mov	r5, r0
	if (HAL_I2C_Mem_Read(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, SHT30_COMMAND_READ_STATUS, 2, (uint8_t*)&buff,
 8002d52:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	2303      	movs	r3, #3
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	ab05      	add	r3, sp, #20
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2302      	movs	r3, #2
 8002d62:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8002d66:	218a      	movs	r1, #138	; 0x8a
 8002d68:	4816      	ldr	r0, [pc, #88]	; (8002dc4 <sht30_check_status_register+0x78>)
 8002d6a:	f002 f881 	bl	8004e70 <HAL_I2C_Mem_Read>
 8002d6e:	b950      	cbnz	r0, 8002d86 <sht30_check_status_register+0x3a>
	if(sht30_calculate_crc(buff, 2) == SENSOR_STATUS_OK){
 8002d70:	2102      	movs	r1, #2
 8002d72:	a805      	add	r0, sp, #20
 8002d74:	f7ff ffc0 	bl	8002cf8 <sht30_calculate_crc>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	2801      	cmp	r0, #1
 8002d7c:	d00b      	beq.n	8002d96 <sht30_check_status_register+0x4a>
		return SENSOR_STATUS_ERROR;
 8002d7e:	2402      	movs	r4, #2
}
 8002d80:	4620      	mov	r0, r4
 8002d82:	b007      	add	sp, #28
 8002d84:	bd30      	pop	{r4, r5, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Mem_Read ERROR\r\n");
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <sht30_check_status_register+0x7c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f012 f835 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002d92:	2402      	movs	r4, #2
 8002d94:	e7f4      	b.n	8002d80 <sht30_check_status_register+0x34>
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Status register and CRC: %02X %02X %02X\r\n", buff[0], buff[1], buff[2]);
 8002d96:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002d9a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002d9e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002da2:	9102      	str	r1, [sp, #8]
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <sht30_check_status_register+0x80>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	4611      	mov	r1, r2
 8002dae:	2002      	movs	r0, #2
 8002db0:	f012 f824 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		data_buff->status_reg = sht30_uint8_to_uint16(buff[0], buff[1]);
 8002db4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8002db8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002dbc:	f7ff ff98 	bl	8002cf0 <sht30_uint8_to_uint16>
 8002dc0:	8128      	strh	r0, [r5, #8]
		return SENSOR_STATUS_OK;
 8002dc2:	e7dd      	b.n	8002d80 <sht30_check_status_register+0x34>
 8002dc4:	200001ac 	.word	0x200001ac
 8002dc8:	08016038 	.word	0x08016038
 8002dcc:	08016058 	.word	0x08016058

08002dd0 <sht30_send_command>:
sensor_status_t sht30_send_command(sht30_command_t command){
 8002dd0:	b500      	push	{lr}
 8002dd2:	b085      	sub	sp, #20
	uint8_t command_buff[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8002dd4:	0a03      	lsrs	r3, r0, #8
 8002dd6:	f88d 300c 	strb.w	r3, [sp, #12]
 8002dda:	f88d 000d 	strb.w	r0, [sp, #13]
	if (HAL_I2C_Master_Transmit(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, command_buff, sizeof(command_buff),
 8002dde:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2302      	movs	r3, #2
 8002de6:	aa03      	add	r2, sp, #12
 8002de8:	218a      	movs	r1, #138	; 0x8a
 8002dea:	4808      	ldr	r0, [pc, #32]	; (8002e0c <sht30_send_command+0x3c>)
 8002dec:	f001 fec4 	bl	8004b78 <HAL_I2C_Master_Transmit>
 8002df0:	b918      	cbnz	r0, 8002dfa <sht30_send_command+0x2a>
		return SENSOR_STATUS_OK;
 8002df2:	2001      	movs	r0, #1
}
 8002df4:	b005      	add	sp, #20
 8002df6:	f85d fb04 	ldr.w	pc, [sp], #4
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Master_Transmit ERROR\r\n");
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <sht30_send_command+0x40>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	4611      	mov	r1, r2
 8002e00:	2002      	movs	r0, #2
 8002e02:	f011 fffb 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002e06:	2002      	movs	r0, #2
 8002e08:	e7f4      	b.n	8002df4 <sht30_send_command+0x24>
 8002e0a:	bf00      	nop
 8002e0c:	200001ac 	.word	0x200001ac
 8002e10:	08016088 	.word	0x08016088

08002e14 <sht30_read_temperature_and_humidity>:
sensor_status_t sht30_read_temperature_and_humidity(struct sensor_data_t* data_buff){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b087      	sub	sp, #28
 8002e18:	4604      	mov	r4, r0
	sht30_send_command(SHT30_COMMAND_MEASURE_SINGLE);
 8002e1a:	f642 4006 	movw	r0, #11270	; 0x2c06
 8002e1e:	f7ff ffd7 	bl	8002dd0 <sht30_send_command>
	HAL_Delay(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f7fe fee8 	bl	8001bf8 <HAL_Delay>
	if (HAL_I2C_Master_Receive(&hi2c1, SHT30_I2C_ADDR_PIN_HIGH << 1u, buff, sizeof(buff), SHT30_I2C_TIMEOUT) != HAL_OK) {
 8002e28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2306      	movs	r3, #6
 8002e30:	aa04      	add	r2, sp, #16
 8002e32:	218a      	movs	r1, #138	; 0x8a
 8002e34:	4831      	ldr	r0, [pc, #196]	; (8002efc <sht30_read_temperature_and_humidity+0xe8>)
 8002e36:	f001 ff5d 	bl	8004cf4 <HAL_I2C_Master_Receive>
 8002e3a:	b908      	cbnz	r0, 8002e40 <sht30_read_temperature_and_humidity+0x2c>
	for(int i=0; i<3; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e016      	b.n	8002e6e <sht30_read_temperature_and_humidity+0x5a>
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 HAL_I2C_Master_Receive ERROR\r\n");
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <sht30_read_temperature_and_humidity+0xec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	4611      	mov	r1, r2
 8002e46:	2002      	movs	r0, #2
 8002e48:	f011 ffd8 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002e4c:	2502      	movs	r5, #2
 8002e4e:	e042      	b.n	8002ed6 <sht30_read_temperature_and_humidity+0xc2>
		temp_buff[i] = buff[i];
 8002e50:	f103 0218 	add.w	r2, r3, #24
 8002e54:	446a      	add	r2, sp
 8002e56:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8002e5a:	f802 1c0c 	strb.w	r1, [r2, #-12]
		r_hum_buff[i] = buff[i+3];
 8002e5e:	f103 011b 	add.w	r1, r3, #27
 8002e62:	4469      	add	r1, sp
 8002e64:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8002e68:	f802 1c10 	strb.w	r1, [r2, #-16]
	for(int i=0; i<3; i++){
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	ddee      	ble.n	8002e50 <sht30_read_temperature_and_humidity+0x3c>
	if (sht30_calculate_crc(temp_buff, 2) != SENSOR_STATUS_OK){
 8002e72:	2102      	movs	r1, #2
 8002e74:	a803      	add	r0, sp, #12
 8002e76:	f7ff ff3f 	bl	8002cf8 <sht30_calculate_crc>
 8002e7a:	2801      	cmp	r0, #1
 8002e7c:	d12e      	bne.n	8002edc <sht30_read_temperature_and_humidity+0xc8>
		if (sht30_calculate_crc(r_hum_buff, 2) != SENSOR_STATUS_OK){
 8002e7e:	2102      	movs	r1, #2
 8002e80:	a802      	add	r0, sp, #8
 8002e82:	f7ff ff39 	bl	8002cf8 <sht30_calculate_crc>
 8002e86:	4605      	mov	r5, r0
 8002e88:	2801      	cmp	r0, #1
 8002e8a:	d12f      	bne.n	8002eec <sht30_read_temperature_and_humidity+0xd8>
			temperature_raw = sht30_uint8_to_uint16(buff[0], buff[1]);
 8002e8c:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8002e90:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002e94:	f7ff ff2c 	bl	8002cf0 <sht30_uint8_to_uint16>
 8002e98:	4607      	mov	r7, r0
			humidity_raw = sht30_uint8_to_uint16(buff[3], buff[4]);
 8002e9a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8002e9e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002ea2:	f7ff ff25 	bl	8002cf0 <sht30_uint8_to_uint16>
 8002ea6:	4606      	mov	r6, r0
			data_buff->temp = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	f7fd fc93 	bl	80007d4 <__aeabi_ui2f>
 8002eae:	4915      	ldr	r1, [pc, #84]	; (8002f04 <sht30_read_temperature_and_humidity+0xf0>)
 8002eb0:	f7fd fce8 	bl	8000884 <__aeabi_fmul>
 8002eb4:	4914      	ldr	r1, [pc, #80]	; (8002f08 <sht30_read_temperature_and_humidity+0xf4>)
 8002eb6:	f7fd fd99 	bl	80009ec <__aeabi_fdiv>
 8002eba:	4914      	ldr	r1, [pc, #80]	; (8002f0c <sht30_read_temperature_and_humidity+0xf8>)
 8002ebc:	f7fd fbd8 	bl	8000670 <__aeabi_fsub>
 8002ec0:	6020      	str	r0, [r4, #0]
			data_buff->r_hum = 100.0f * (float)humidity_raw / 65535.0f;
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f7fd fc86 	bl	80007d4 <__aeabi_ui2f>
 8002ec8:	4911      	ldr	r1, [pc, #68]	; (8002f10 <sht30_read_temperature_and_humidity+0xfc>)
 8002eca:	f7fd fcdb 	bl	8000884 <__aeabi_fmul>
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <sht30_read_temperature_and_humidity+0xf4>)
 8002ed0:	f7fd fd8c 	bl	80009ec <__aeabi_fdiv>
 8002ed4:	6060      	str	r0, [r4, #4]
}
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	b007      	add	sp, #28
 8002eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Temperature data CRC ERROR\r\n");
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <sht30_read_temperature_and_humidity+0x100>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	2002      	movs	r0, #2
 8002ee4:	f011 ff8a 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
		return SENSOR_STATUS_ERROR;
 8002ee8:	2502      	movs	r5, #2
 8002eea:	e7f4      	b.n	8002ed6 <sht30_read_temperature_and_humidity+0xc2>
			APP_LOG(TS_OFF, VLEVEL_M, "SHT30 Humidity data CRC ERROR\r\n");
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <sht30_read_temperature_and_humidity+0x104>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	2002      	movs	r0, #2
 8002ef4:	f011 ff82 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
			return SENSOR_STATUS_ERROR;
 8002ef8:	2502      	movs	r5, #2
 8002efa:	e7ec      	b.n	8002ed6 <sht30_read_temperature_and_humidity+0xc2>
 8002efc:	200001ac 	.word	0x200001ac
 8002f00:	080160b0 	.word	0x080160b0
 8002f04:	432f0000 	.word	0x432f0000
 8002f08:	477fff00 	.word	0x477fff00
 8002f0c:	42340000 	.word	0x42340000
 8002f10:	42c80000 	.word	0x42c80000
 8002f14:	080160d8 	.word	0x080160d8
 8002f18:	080160fc 	.word	0x080160fc

08002f1c <app_read_sensor_data>:
sensor_status_t app_read_sensor_data(struct sensor_data_t* data_buff){
 8002f1c:	b510      	push	{r4, lr}
	if (data_buff != NULL){
 8002f1e:	b1a8      	cbz	r0, 8002f4c <app_read_sensor_data+0x30>
 8002f20:	4604      	mov	r4, r0
		if (sht30_status == SENSOR_STATUS_UNINITIALIZED){
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <app_read_sensor_data+0x38>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b133      	cbz	r3, 8002f36 <app_read_sensor_data+0x1a>
		if (sht30_status == SENSOR_STATUS_OK){
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <app_read_sensor_data+0x38>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d007      	beq.n	8002f40 <app_read_sensor_data+0x24>
}
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <app_read_sensor_data+0x38>)
 8002f32:	7818      	ldrb	r0, [r3, #0]
 8002f34:	bd10      	pop	{r4, pc}
			sht30_status = sht30_check_status_register(data_buff);
 8002f36:	f7ff ff09 	bl	8002d4c <sht30_check_status_register>
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <app_read_sensor_data+0x38>)
 8002f3c:	7018      	strb	r0, [r3, #0]
 8002f3e:	e7f3      	b.n	8002f28 <app_read_sensor_data+0xc>
			sht30_status = sht30_read_temperature_and_humidity(data_buff);
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ff67 	bl	8002e14 <sht30_read_temperature_and_humidity>
 8002f46:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <app_read_sensor_data+0x38>)
 8002f48:	7018      	strb	r0, [r3, #0]
 8002f4a:	e7f1      	b.n	8002f30 <app_read_sensor_data+0x14>
		Error_Handler();
 8002f4c:	f7fe fbfe 	bl	800174c <Error_Handler>
 8002f50:	e7ee      	b.n	8002f30 <app_read_sensor_data+0x14>
 8002f52:	bf00      	nop
 8002f54:	200004e8 	.word	0x200004e8

08002f58 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002f58:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002f5a:	f000 f83f 	bl	8002fdc <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002f5e:	bd08      	pop	{r3, pc}

08002f60 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002f60:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002f62:	f000 f87d 	bl	8003060 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002f66:	bd08      	pop	{r3, pc}

08002f68 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002f68:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002f6a:	f000 f8c7 	bl	80030fc <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002f6e:	bd08      	pop	{r3, pc}

08002f70 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002f70:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002f72:	f000 f8c5 	bl	8003100 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002f76:	bd08      	pop	{r3, pc}

08002f78 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002f78:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002f7a:	f000 f8c3 	bl	8003104 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002f7e:	bd08      	pop	{r3, pc}

08002f80 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002f80:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002f82:	f000 f8c1 	bl	8003108 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002f86:	bd08      	pop	{r3, pc}

08002f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f8c:	f000 f8c1 	bl	8003112 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f92:	490d      	ldr	r1, [pc, #52]	; (8002fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <LoopForever+0xe>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f98:	e002      	b.n	8002fa0 <LoopCopyDataInit>

08002f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9e:	3304      	adds	r3, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa4:	d3f9      	bcc.n	8002f9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fa8:	4c0a      	ldr	r4, [pc, #40]	; (8002fd4 <LoopForever+0x16>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fac:	e001      	b.n	8002fb2 <LoopFillZerobss>

08002fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb0:	3204      	adds	r2, #4

08002fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb4:	d3fb      	bcc.n	8002fae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fb6:	f012 fc03 	bl	80157c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fba:	f7fe fc10 	bl	80017de <main>

08002fbe <LoopForever>:

LoopForever:
    b LoopForever
 8002fbe:	e7fe      	b.n	8002fbe <LoopForever>
  ldr   r0, =_estack
 8002fc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8002fcc:	08016b10 	.word	0x08016b10
  ldr r2, =_sbss
 8002fd0:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002fd4:	20004400 	.word	0x20004400

08002fd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe0:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002fe2:	2400      	movs	r4, #0
 8002fe4:	9401      	str	r4, [sp, #4]
 8002fe6:	9402      	str	r4, [sp, #8]
 8002fe8:	9403      	str	r4, [sp, #12]
 8002fea:	9404      	str	r4, [sp, #16]
 8002fec:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003002:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003004:	2710      	movs	r7, #16
 8003006:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003008:	2301      	movs	r3, #1
 800300a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003010:	4d12      	ldr	r5, [pc, #72]	; (800305c <BSP_RADIO_Init+0x80>)
 8003012:	a901      	add	r1, sp, #4
 8003014:	4628      	mov	r0, r5
 8003016:	f001 f9e3 	bl	80043e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800301a:	f04f 0820 	mov.w	r8, #32
 800301e:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003022:	a901      	add	r1, sp, #4
 8003024:	4628      	mov	r0, r5
 8003026:	f001 f9db 	bl	80043e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800302a:	2608      	movs	r6, #8
 800302c:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800302e:	a901      	add	r1, sp, #4
 8003030:	4628      	mov	r0, r5
 8003032:	f001 f9d5 	bl	80043e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003036:	4622      	mov	r2, r4
 8003038:	4641      	mov	r1, r8
 800303a:	4628      	mov	r0, r5
 800303c:	f001 fb20 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003040:	4622      	mov	r2, r4
 8003042:	4639      	mov	r1, r7
 8003044:	4628      	mov	r0, r5
 8003046:	f001 fb1b 	bl	8004680 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 800304a:	4622      	mov	r2, r4
 800304c:	4631      	mov	r1, r6
 800304e:	4628      	mov	r0, r5
 8003050:	f001 fb16 	bl	8004680 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003054:	4620      	mov	r0, r4
 8003056:	b006      	add	sp, #24
 8003058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305c:	48000800 	.word	0x48000800

08003060 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003060:	b510      	push	{r4, lr}
  switch (Config)
 8003062:	2803      	cmp	r0, #3
 8003064:	d813      	bhi.n	800308e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003066:	e8df f000 	tbb	[pc, r0]
 800306a:	1402      	.short	0x1402
 800306c:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800306e:	4c22      	ldr	r4, [pc, #136]	; (80030f8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003070:	2200      	movs	r2, #0
 8003072:	2108      	movs	r1, #8
 8003074:	4620      	mov	r0, r4
 8003076:	f001 fb03 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800307a:	2200      	movs	r2, #0
 800307c:	2110      	movs	r1, #16
 800307e:	4620      	mov	r0, r4
 8003080:	f001 fafe 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	2120      	movs	r1, #32
 8003088:	4620      	mov	r0, r4
 800308a:	f001 faf9 	bl	8004680 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800308e:	2000      	movs	r0, #0
 8003090:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003092:	4c19      	ldr	r4, [pc, #100]	; (80030f8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003094:	2201      	movs	r2, #1
 8003096:	2108      	movs	r1, #8
 8003098:	4620      	mov	r0, r4
 800309a:	f001 faf1 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800309e:	2201      	movs	r2, #1
 80030a0:	2110      	movs	r1, #16
 80030a2:	4620      	mov	r0, r4
 80030a4:	f001 faec 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80030a8:	2200      	movs	r2, #0
 80030aa:	2120      	movs	r1, #32
 80030ac:	4620      	mov	r0, r4
 80030ae:	f001 fae7 	bl	8004680 <HAL_GPIO_WritePin>
      break;
 80030b2:	e7ec      	b.n	800308e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80030b4:	4c10      	ldr	r4, [pc, #64]	; (80030f8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	2108      	movs	r1, #8
 80030ba:	4620      	mov	r0, r4
 80030bc:	f001 fae0 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80030c0:	2201      	movs	r2, #1
 80030c2:	2110      	movs	r1, #16
 80030c4:	4620      	mov	r0, r4
 80030c6:	f001 fadb 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80030ca:	2201      	movs	r2, #1
 80030cc:	2120      	movs	r1, #32
 80030ce:	4620      	mov	r0, r4
 80030d0:	f001 fad6 	bl	8004680 <HAL_GPIO_WritePin>
      break;
 80030d4:	e7db      	b.n	800308e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80030d6:	4c08      	ldr	r4, [pc, #32]	; (80030f8 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80030d8:	2201      	movs	r2, #1
 80030da:	2108      	movs	r1, #8
 80030dc:	4620      	mov	r0, r4
 80030de:	f001 facf 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80030e2:	2200      	movs	r2, #0
 80030e4:	2110      	movs	r1, #16
 80030e6:	4620      	mov	r0, r4
 80030e8:	f001 faca 	bl	8004680 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80030ec:	2201      	movs	r2, #1
 80030ee:	2120      	movs	r1, #32
 80030f0:	4620      	mov	r0, r4
 80030f2:	f001 fac5 	bl	8004680 <HAL_GPIO_WritePin>
      break;
 80030f6:	e7ca      	b.n	800308e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80030f8:	48000800 	.word	0x48000800

080030fc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80030fc:	2000      	movs	r0, #0
 80030fe:	4770      	bx	lr

08003100 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003100:	2001      	movs	r0, #1
 8003102:	4770      	bx	lr

08003104 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003104:	2001      	movs	r0, #1
 8003106:	4770      	bx	lr

08003108 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003108:	b908      	cbnz	r0, 800310e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800310a:	200f      	movs	r0, #15
 800310c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800310e:	2016      	movs	r0, #22
  }

  return ret;
}
 8003110:	4770      	bx	lr

08003112 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003112:	4770      	bx	lr

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003116:	2003      	movs	r0, #3
 8003118:	f000 fd22 	bl	8003b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800311c:	f002 fc72 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_Init+0x28>)
 8003122:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003124:	200f      	movs	r0, #15
 8003126:	f7fe fd59 	bl	8001bdc <HAL_InitTick>
 800312a:	b110      	cbz	r0, 8003132 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800312c:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800312e:	4620      	mov	r0, r4
 8003130:	bd10      	pop	{r4, pc}
 8003132:	4604      	mov	r4, r0
    HAL_MspInit();
 8003134:	f7fe fc02 	bl	800193c <HAL_MspInit>
 8003138:	e7f9      	b.n	800312e <HAL_Init+0x1a>
 800313a:	bf00      	nop
 800313c:	20000074 	.word	0x20000074

08003140 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003140:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003144:	6913      	ldr	r3, [r2, #16]
 8003146:	f023 0302 	bic.w	r3, r3, #2
 800314a:	6113      	str	r3, [r2, #16]
}
 800314c:	4770      	bx	lr

0800314e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800314e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003152:	6913      	ldr	r3, [r2, #16]
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6113      	str	r3, [r2, #16]
}
 800315a:	4770      	bx	lr

0800315c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <HAL_GetUIDw0+0x8>)
 800315e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003162:	4770      	bx	lr
 8003164:	1fff7000 	.word	0x1fff7000

08003168 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <HAL_GetUIDw1+0x8>)
 800316a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 800316e:	4770      	bx	lr
 8003170:	1fff7000 	.word	0x1fff7000

08003174 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003174:	4b01      	ldr	r3, [pc, #4]	; (800317c <HAL_GetUIDw2+0x8>)
 8003176:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800317a:	4770      	bx	lr
 800317c:	1fff7000 	.word	0x1fff7000

08003180 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003180:	4a02      	ldr	r2, [pc, #8]	; (800318c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003182:	6853      	ldr	r3, [r2, #4]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800318a:	4770      	bx	lr
 800318c:	e0042000 	.word	0xe0042000

08003190 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003190:	4a02      	ldr	r2, [pc, #8]	; (800319c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003192:	6853      	ldr	r3, [r2, #4]
 8003194:	f023 0302 	bic.w	r3, r3, #2
 8003198:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800319a:	4770      	bx	lr
 800319c:	e0042000 	.word	0xe0042000

080031a0 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80031a0:	4a02      	ldr	r2, [pc, #8]	; (80031ac <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80031a2:	6853      	ldr	r3, [r2, #4]
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 80031aa:	4770      	bx	lr
 80031ac:	e0042000 	.word	0xe0042000

080031b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b0:	b530      	push	{r4, r5, lr}
 80031b2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f000 8106 	beq.w	80033ca <HAL_ADC_Init+0x21a>
 80031be:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80031c2:	b1bb      	cbz	r3, 80031f4 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031c4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c6:	6893      	ldr	r3, [r2, #8]
 80031c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031cc:	d11f      	bne.n	800320e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 80031ce:	6893      	ldr	r3, [r2, #8]
 80031d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031d4:	f023 0317 	bic.w	r3, r3, #23
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031de:	4b7c      	ldr	r3, [pc, #496]	; (80033d0 <HAL_ADC_Init+0x220>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	4a7b      	ldr	r2, [pc, #492]	; (80033d4 <HAL_ADC_Init+0x224>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	3301      	adds	r3, #1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80031f2:	e009      	b.n	8003208 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80031f4:	f7fd fe86 	bl	8000f04 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80031f8:	2300      	movs	r3, #0
 80031fa:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80031fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003200:	e7e0      	b.n	80031c4 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003202:	9b01      	ldr	r3, [sp, #4]
 8003204:	3b01      	subs	r3, #1
 8003206:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003208:	9b01      	ldr	r3, [sp, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800320e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003210:	6893      	ldr	r3, [r2, #8]
 8003212:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003216:	f040 809a 	bne.w	800334e <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800321c:	f043 0310 	orr.w	r3, r3, #16
 8003220:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800322a:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322c:	6893      	ldr	r3, [r2, #8]
 800322e:	f013 0304 	ands.w	r3, r3, #4
 8003232:	d000      	beq.n	8003236 <HAL_ADC_Init+0x86>
 8003234:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003236:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003238:	f011 0f10 	tst.w	r1, #16
 800323c:	f040 80be 	bne.w	80033bc <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 80bb 	bne.w	80033bc <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003252:	6893      	ldr	r3, [r2, #8]
 8003254:	f013 0f01 	tst.w	r3, #1
 8003258:	d14f      	bne.n	80032fa <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800325a:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800325c:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800325e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003262:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003264:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003268:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800326a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800326e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003270:	b109      	cbz	r1, 8003276 <HAL_ADC_Init+0xc6>
 8003272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003276:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003278:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800327a:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800327c:	6921      	ldr	r1, [r4, #16]
 800327e:	2900      	cmp	r1, #0
 8003280:	db67      	blt.n	8003352 <HAL_ADC_Init+0x1a2>
 8003282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003286:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003288:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800328c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003290:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003294:	2901      	cmp	r1, #1
 8003296:	d05f      	beq.n	8003358 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003298:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800329a:	b121      	cbz	r1, 80032a6 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800329c:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80032a0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80032a2:	4329      	orrs	r1, r5
 80032a4:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80032a6:	68d1      	ldr	r1, [r2, #12]
 80032a8:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80032ac:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80032b0:	4319      	orrs	r1, r3
 80032b2:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80032ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80032bc:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80032be:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80032c2:	2901      	cmp	r1, #1
 80032c4:	d055      	beq.n	8003372 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80032c6:	6821      	ldr	r1, [r4, #0]
 80032c8:	690d      	ldr	r5, [r1, #16]
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_ADC_Init+0x228>)
 80032cc:	402b      	ands	r3, r5
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80032d8:	d00f      	beq.n	80032fa <HAL_ADC_Init+0x14a>
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d00c      	beq.n	80032fa <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80032e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032e4:	d009      	beq.n	80032fa <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80032e6:	493d      	ldr	r1, [pc, #244]	; (80033dc <HAL_ADC_Init+0x22c>)
 80032e8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 80032ec:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80032f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80032fa:	6821      	ldr	r1, [r4, #0]
 80032fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 80032fe:	694a      	ldr	r2, [r1, #20]
 8003300:	f022 0207 	bic.w	r2, r2, #7
 8003304:	4313      	orrs	r3, r2
 8003306:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800330c:	6953      	ldr	r3, [r2, #20]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003316:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003318:	6923      	ldr	r3, [r4, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d133      	bne.n	8003386 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003322:	f063 030f 	orn	r3, r3, #15
 8003326:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003328:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003330:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003332:	429a      	cmp	r2, r3
 8003334:	d039      	beq.n	80033aa <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003338:	f023 0312 	bic.w	r3, r3, #18
 800333c:	f043 0310 	orr.w	r3, r3, #16
 8003340:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800334a:	2001      	movs	r0, #1
 800334c:	e03b      	b.n	80033c6 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334e:	2000      	movs	r0, #0
 8003350:	e76c      	b.n	800322c <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003352:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003356:	e796      	b.n	8003286 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003358:	b915      	cbnz	r5, 8003360 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800335a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335e:	e79b      	b.n	8003298 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003360:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003362:	f041 0120 	orr.w	r1, r1, #32
 8003366:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800336a:	f041 0101 	orr.w	r1, r1, #1
 800336e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003370:	e792      	b.n	8003298 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003372:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003374:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003376:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003378:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800337a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800337c:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800337e:	431a      	orrs	r2, r3
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	e79f      	b.n	80032c6 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800338a:	d1cd      	bne.n	8003328 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 800338c:	6821      	ldr	r1, [r4, #0]
 800338e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003390:	69e3      	ldr	r3, [r4, #28]
 8003392:	3b01      	subs	r3, #1
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f003 031c 	and.w	r3, r3, #28
 800339a:	f06f 020f 	mvn.w	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033a4:	4313      	orrs	r3, r2
 80033a6:	628b      	str	r3, [r1, #40]	; 0x28
 80033a8:	e7be      	b.n	8003328 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80033aa:	2300      	movs	r3, #0
 80033ac:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80033ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b0:	f023 0303 	bic.w	r3, r3, #3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033be:	f043 0310 	orr.w	r3, r3, #16
 80033c2:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 80033c6:	b003      	add	sp, #12
 80033c8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80033ca:	2001      	movs	r0, #1
 80033cc:	e7fb      	b.n	80033c6 <HAL_ADC_Init+0x216>
 80033ce:	bf00      	nop
 80033d0:	20000074 	.word	0x20000074
 80033d4:	053e2d63 	.word	0x053e2d63
 80033d8:	1ffffc02 	.word	0x1ffffc02
 80033dc:	40012000 	.word	0x40012000

080033e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	4604      	mov	r4, r0
 80033e4:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033e6:	6946      	ldr	r6, [r0, #20]
 80033e8:	2e08      	cmp	r6, #8
 80033ea:	d005      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033ec:	6803      	ldr	r3, [r0, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f013 0f01 	tst.w	r3, #1
 80033f4:	d11e      	bne.n	8003434 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033f6:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033f8:	f7fe fbf2 	bl	8001be0 <HAL_GetTick>
 80033fc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4232      	tst	r2, r6
 8003404:	d11c      	bne.n	8003440 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800340a:	d0f8      	beq.n	80033fe <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800340c:	f7fe fbe8 	bl	8001be0 <HAL_GetTick>
 8003410:	1bc3      	subs	r3, r0, r7
 8003412:	42ab      	cmp	r3, r5
 8003414:	d801      	bhi.n	800341a <HAL_ADC_PollForConversion+0x3a>
 8003416:	2d00      	cmp	r5, #0
 8003418:	d1f1      	bne.n	80033fe <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4233      	tst	r3, r6
 8003420:	d1ed      	bne.n	80033fe <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800342a:	2300      	movs	r3, #0
 800342c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8003430:	2003      	movs	r0, #3
 8003432:	e028      	b.n	8003486 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003434:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003436:	f043 0320 	orr.w	r3, r3, #32
 800343a:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
 800343e:	e022      	b.n	8003486 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003440:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800344e:	d115      	bne.n	800347c <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003450:	7ea2      	ldrb	r2, [r4, #26]
 8003452:	b99a      	cbnz	r2, 800347c <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f012 0f08 	tst.w	r2, #8
 800345a:	d00f      	beq.n	800347c <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	f012 0f04 	tst.w	r2, #4
 8003462:	d111      	bne.n	8003488 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	f022 020c 	bic.w	r2, r2, #12
 800346a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800346c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800346e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800347c:	7e20      	ldrb	r0, [r4, #24]
 800347e:	b960      	cbnz	r0, 800349a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	220c      	movs	r2, #12
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800348a:	f043 0320 	orr.w	r3, r3, #32
 800348e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003490:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003498:	e7f0      	b.n	800347c <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800349a:	2000      	movs	r0, #0
 800349c:	e7f3      	b.n	8003486 <HAL_ADC_PollForConversion+0xa6>

0800349e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034a4:	b470      	push	{r4, r5, r6}
 80034a6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034a8:	2200      	movs	r2, #0
 80034aa:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034ac:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034ae:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80034b2:	2a01      	cmp	r2, #1
 80034b4:	f000 8103 	beq.w	80036be <HAL_ADC_ConfigChannel+0x21a>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2201      	movs	r2, #1
 80034bc:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c0:	6802      	ldr	r2, [r0, #0]
 80034c2:	6890      	ldr	r0, [r2, #8]
 80034c4:	f010 0f04 	tst.w	r0, #4
 80034c8:	d00a      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80034da:	b003      	add	sp, #12
 80034dc:	bc70      	pop	{r4, r5, r6}
 80034de:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80034e0:	6848      	ldr	r0, [r1, #4]
 80034e2:	2802      	cmp	r0, #2
 80034e4:	f000 809c 	beq.w	8003620 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034e8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80034ec:	d027      	beq.n	800353e <HAL_ADC_ConfigChannel+0x9a>
 80034ee:	4d75      	ldr	r5, [pc, #468]	; (80036c4 <HAL_ADC_ConfigChannel+0x220>)
 80034f0:	42ac      	cmp	r4, r5
 80034f2:	d024      	beq.n	800353e <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80034f4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80034f6:	f000 001f 	and.w	r0, r0, #31
 80034fa:	250f      	movs	r5, #15
 80034fc:	4085      	lsls	r5, r0
 80034fe:	ea24 0505 	bic.w	r5, r4, r5
 8003502:	680c      	ldr	r4, [r1, #0]
 8003504:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003508:	2e00      	cmp	r6, #0
 800350a:	d131      	bne.n	8003570 <HAL_ADC_ConfigChannel+0xcc>
 800350c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003510:	4084      	lsls	r4, r0
 8003512:	432c      	orrs	r4, r5
 8003514:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003516:	684c      	ldr	r4, [r1, #4]
 8003518:	08a0      	lsrs	r0, r4, #2
 800351a:	3001      	adds	r0, #1
 800351c:	69dd      	ldr	r5, [r3, #28]
 800351e:	42a8      	cmp	r0, r5
 8003520:	d813      	bhi.n	800354a <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003522:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003524:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003526:	f004 041f 	and.w	r4, r4, #31
 800352a:	260f      	movs	r6, #15
 800352c:	40a6      	lsls	r6, r4
 800352e:	ea20 0006 	bic.w	r0, r0, r6
 8003532:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003536:	40a5      	lsls	r5, r4
 8003538:	4328      	orrs	r0, r5
 800353a:	6290      	str	r0, [r2, #40]	; 0x28
}
 800353c:	e005      	b.n	800354a <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800353e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003540:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003542:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003546:	4320      	orrs	r0, r4
 8003548:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800354a:	681c      	ldr	r4, [r3, #0]
 800354c:	680d      	ldr	r5, [r1, #0]
 800354e:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003550:	6960      	ldr	r0, [r4, #20]
 8003552:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003556:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800355a:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800355e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003562:	4302      	orrs	r2, r0
 8003564:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003566:	680a      	ldr	r2, [r1, #0]
 8003568:	2a00      	cmp	r2, #0
 800356a:	db09      	blt.n	8003580 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356c:	2000      	movs	r0, #0
 800356e:	e7b1      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003574:	b114      	cbz	r4, 800357c <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003576:	fab4 f484 	clz	r4, r4
 800357a:	e7c9      	b.n	8003510 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800357c:	2420      	movs	r4, #32
 800357e:	e7c7      	b.n	8003510 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003580:	4951      	ldr	r1, [pc, #324]	; (80036c8 <HAL_ADC_ConfigChannel+0x224>)
 8003582:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8003586:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800358a:	4c50      	ldr	r4, [pc, #320]	; (80036cc <HAL_ADC_ConfigChannel+0x228>)
 800358c:	42a2      	cmp	r2, r4
 800358e:	d007      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003590:	4c4f      	ldr	r4, [pc, #316]	; (80036d0 <HAL_ADC_ConfigChannel+0x22c>)
 8003592:	42a2      	cmp	r2, r4
 8003594:	d026      	beq.n	80035e4 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003596:	4c4f      	ldr	r4, [pc, #316]	; (80036d4 <HAL_ADC_ConfigChannel+0x230>)
 8003598:	42a2      	cmp	r2, r4
 800359a:	d032      	beq.n	8003602 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359c:	2000      	movs	r0, #0
 800359e:	e799      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80035a4:	d1f4      	bne.n	8003590 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035aa:	4847      	ldr	r0, [pc, #284]	; (80036c8 <HAL_ADC_ConfigChannel+0x224>)
 80035ac:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80035b0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035b4:	4311      	orrs	r1, r2
 80035b6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ba:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <HAL_ADC_ConfigChannel+0x234>)
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	0992      	lsrs	r2, r2, #6
 80035c0:	4946      	ldr	r1, [pc, #280]	; (80036dc <HAL_ADC_ConfigChannel+0x238>)
 80035c2:	fba1 1202 	umull	r1, r2, r1, r2
 80035c6:	0992      	lsrs	r2, r2, #6
 80035c8:	3201      	adds	r2, #1
 80035ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035d2:	e002      	b.n	80035da <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80035d4:	9a01      	ldr	r2, [sp, #4]
 80035d6:	3a01      	subs	r2, #1
 80035d8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80035da:	9a01      	ldr	r2, [sp, #4]
 80035dc:	2a00      	cmp	r2, #0
 80035de:	d1f9      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2000      	movs	r0, #0
 80035e2:	e777      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035e4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80035e8:	d1d5      	bne.n	8003596 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80035ee:	4836      	ldr	r0, [pc, #216]	; (80036c8 <HAL_ADC_ConfigChannel+0x224>)
 80035f0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80035f4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035f8:	4311      	orrs	r1, r2
 80035fa:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fe:	2000      	movs	r0, #0
}
 8003600:	e768      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003602:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003606:	d158      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003608:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800360c:	482e      	ldr	r0, [pc, #184]	; (80036c8 <HAL_ADC_ConfigChannel+0x224>)
 800360e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003612:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003616:	430a      	orrs	r2, r1
 8003618:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361c:	2000      	movs	r0, #0
}
 800361e:	e759      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003620:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003624:	d002      	beq.n	800362c <HAL_ADC_ConfigChannel+0x188>
 8003626:	4827      	ldr	r0, [pc, #156]	; (80036c4 <HAL_ADC_ConfigChannel+0x220>)
 8003628:	4284      	cmp	r4, r0
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800362c:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800362e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003630:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003634:	ea20 0004 	bic.w	r0, r0, r4
 8003638:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800363a:	680a      	ldr	r2, [r1, #0]
 800363c:	2a00      	cmp	r2, #0
 800363e:	db01      	blt.n	8003644 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003640:	2000      	movs	r0, #0
 8003642:	e747      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003644:	4920      	ldr	r1, [pc, #128]	; (80036c8 <HAL_ADC_ConfigChannel+0x224>)
 8003646:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800364a:	4820      	ldr	r0, [pc, #128]	; (80036cc <HAL_ADC_ConfigChannel+0x228>)
 800364c:	4282      	cmp	r2, r0
 800364e:	d007      	beq.n	8003660 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003650:	481f      	ldr	r0, [pc, #124]	; (80036d0 <HAL_ADC_ConfigChannel+0x22c>)
 8003652:	4282      	cmp	r2, r0
 8003654:	d013      	beq.n	800367e <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003656:	481f      	ldr	r0, [pc, #124]	; (80036d4 <HAL_ADC_ConfigChannel+0x230>)
 8003658:	4282      	cmp	r2, r0
 800365a:	d01f      	beq.n	800369c <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2000      	movs	r0, #0
 800365e:	e739      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003664:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003668:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800366c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003670:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003674:	4311      	orrs	r1, r2
 8003676:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367a:	2000      	movs	r0, #0
}
 800367c:	e72a      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367e:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003682:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003686:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800368a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800368e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003692:	430a      	orrs	r2, r1
 8003694:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003698:	2000      	movs	r0, #0
}
 800369a:	e71b      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800369c:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036a0:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80036a4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80036a8:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80036ac:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80036b0:	430a      	orrs	r2, r1
 80036b2:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b6:	2000      	movs	r0, #0
}
 80036b8:	e70c      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
 80036ba:	2000      	movs	r0, #0
 80036bc:	e70a      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80036be:	2002      	movs	r0, #2
 80036c0:	e70b      	b.n	80034da <HAL_ADC_ConfigChannel+0x36>
 80036c2:	bf00      	nop
 80036c4:	80000004 	.word	0x80000004
 80036c8:	40012000 	.word	0x40012000
 80036cc:	b0001000 	.word	0xb0001000
 80036d0:	b8004000 	.word	0xb8004000
 80036d4:	b4002000 	.word	0xb4002000
 80036d8:	20000074 	.word	0x20000074
 80036dc:	053e2d63 	.word	0x053e2d63

080036e0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80036e0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036e2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	f012 0f04 	tst.w	r2, #4
 80036ea:	d02a      	beq.n	8003742 <ADC_ConversionStop+0x62>
 80036ec:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	f012 0f02 	tst.w	r2, #2
 80036f4:	d107      	bne.n	8003706 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036fc:	f022 0217 	bic.w	r2, r2, #23
 8003700:	f042 0210 	orr.w	r2, r2, #16
 8003704:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003706:	f7fe fa6b 	bl	8001be0 <HAL_GetTick>
 800370a:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f013 0f04 	tst.w	r3, #4
 8003714:	d013      	beq.n	800373e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003716:	f7fe fa63 	bl	8001be0 <HAL_GetTick>
 800371a:	1b43      	subs	r3, r0, r5
 800371c:	2b02      	cmp	r3, #2
 800371e:	d9f5      	bls.n	800370c <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f013 0f04 	tst.w	r3, #4
 8003728:	d0f0      	beq.n	800370c <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e002      	b.n	8003744 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800373e:	2000      	movs	r0, #0
 8003740:	e000      	b.n	8003744 <ADC_ConversionStop+0x64>
 8003742:	2000      	movs	r0, #0
}
 8003744:	bd38      	pop	{r3, r4, r5, pc}
	...

08003748 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003748:	b530      	push	{r4, r5, lr}
 800374a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003750:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	f012 0f01 	tst.w	r2, #1
 8003758:	d15b      	bne.n	8003812 <ADC_Enable+0xca>
 800375a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <ADC_Enable+0xd0>)
 8003760:	4211      	tst	r1, r2
 8003762:	d117      	bne.n	8003794 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800376a:	f022 0217 	bic.w	r2, r2, #23
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <ADC_Enable+0xd4>)
 8003776:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800377a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800377e:	d019      	beq.n	80037b4 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <ADC_Enable+0xd8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	4a27      	ldr	r2, [pc, #156]	; (8003824 <ADC_Enable+0xdc>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003790:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003792:	e00c      	b.n	80037ae <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003794:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003796:	f043 0310 	orr.w	r3, r3, #16
 800379a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
 80037a6:	e035      	b.n	8003814 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80037a8:	9b01      	ldr	r3, [sp, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f9      	bne.n	80037a8 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037b4:	7e63      	ldrb	r3, [r4, #25]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ba:	2000      	movs	r0, #0
 80037bc:	e02a      	b.n	8003814 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80037be:	f7fe fa0f 	bl	8001be0 <HAL_GetTick>
 80037c2:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	f012 0f01 	tst.w	r2, #1
 80037cc:	d11f      	bne.n	800380e <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	f012 0f01 	tst.w	r2, #1
 80037d4:	d107      	bne.n	80037e6 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037dc:	f022 0217 	bic.w	r2, r2, #23
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037e6:	f7fe f9fb 	bl	8001be0 <HAL_GetTick>
 80037ea:	1b40      	subs	r0, r0, r5
 80037ec:	2802      	cmp	r0, #2
 80037ee:	d9e9      	bls.n	80037c4 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f013 0f01 	tst.w	r3, #1
 80037f8:	d1e4      	bne.n	80037c4 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037fc:	f043 0310 	orr.w	r3, r3, #16
 8003800:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003802:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
 800380c:	e002      	b.n	8003814 <ADC_Enable+0xcc>
  return HAL_OK;
 800380e:	2000      	movs	r0, #0
 8003810:	e000      	b.n	8003814 <ADC_Enable+0xcc>
 8003812:	2000      	movs	r0, #0
}
 8003814:	b003      	add	sp, #12
 8003816:	bd30      	pop	{r4, r5, pc}
 8003818:	80000017 	.word	0x80000017
 800381c:	40012000 	.word	0x40012000
 8003820:	20000074 	.word	0x20000074
 8003824:	053e2d63 	.word	0x053e2d63

08003828 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003828:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f013 0f04 	tst.w	r3, #4
 8003830:	d128      	bne.n	8003884 <HAL_ADC_Start+0x5c>
{
 8003832:	b510      	push	{r4, lr}
 8003834:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003836:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800383a:	2b01      	cmp	r3, #1
 800383c:	d024      	beq.n	8003888 <HAL_ADC_Start+0x60>
 800383e:	2301      	movs	r3, #1
 8003840:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003844:	f7ff ff80 	bl	8003748 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003848:	b9c0      	cbnz	r0, 800387c <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800384a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800384c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800385a:	2300      	movs	r3, #0
 800385c:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	211c      	movs	r1, #28
 8003862:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003864:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003868:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800386a:	6893      	ldr	r3, [r2, #8]
 800386c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003870:	f023 0317 	bic.w	r3, r3, #23
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6093      	str	r3, [r2, #8]
}
 800387a:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800387c:	2300      	movs	r3, #0
 800387e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003882:	e7fa      	b.n	800387a <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003884:	2002      	movs	r0, #2
}
 8003886:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003888:	2002      	movs	r0, #2
 800388a:	e7f6      	b.n	800387a <HAL_ADC_Start+0x52>

0800388c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003890:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003892:	6893      	ldr	r3, [r2, #8]
 8003894:	f013 0302 	ands.w	r3, r3, #2
 8003898:	d000      	beq.n	800389c <ADC_Disable+0x10>
 800389a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800389c:	6891      	ldr	r1, [r2, #8]
 800389e:	f011 0f01 	tst.w	r1, #1
 80038a2:	d039      	beq.n	8003918 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d139      	bne.n	800391c <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038a8:	6893      	ldr	r3, [r2, #8]
 80038aa:	f003 0305 	and.w	r3, r3, #5
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d009      	beq.n	80038c6 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038b4:	f043 0310 	orr.w	r3, r3, #16
 80038b8:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80038c2:	2001      	movs	r0, #1
 80038c4:	e029      	b.n	800391a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80038c6:	6893      	ldr	r3, [r2, #8]
 80038c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038cc:	f023 0317 	bic.w	r3, r3, #23
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	2203      	movs	r2, #3
 80038da:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038dc:	f7fe f980 	bl	8001be0 <HAL_GetTick>
 80038e0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f013 0f01 	tst.w	r3, #1
 80038ea:	d013      	beq.n	8003914 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ec:	f7fe f978 	bl	8001be0 <HAL_GetTick>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	2802      	cmp	r0, #2
 80038f4:	d9f5      	bls.n	80038e2 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f013 0f01 	tst.w	r3, #1
 80038fe:	d0f0      	beq.n	80038e2 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003902:	f043 0310 	orr.w	r3, r3, #16
 8003906:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003908:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	e002      	b.n	800391a <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2000      	movs	r0, #0
 8003916:	e000      	b.n	800391a <ADC_Disable+0x8e>
 8003918:	2000      	movs	r0, #0
}
 800391a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800391c:	2000      	movs	r0, #0
 800391e:	e7fc      	b.n	800391a <ADC_Disable+0x8e>

08003920 <HAL_ADC_DeInit>:
{
 8003920:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003922:	2800      	cmp	r0, #0
 8003924:	d056      	beq.n	80039d4 <HAL_ADC_DeInit+0xb4>
 8003926:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003928:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800392a:	f043 0302 	orr.w	r3, r3, #2
 800392e:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003930:	f7ff fed6 	bl	80036e0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003934:	4606      	mov	r6, r0
 8003936:	2800      	cmp	r0, #0
 8003938:	d03d      	beq.n	80039b6 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800393a:	6822      	ldr	r2, [r4, #0]
 800393c:	6853      	ldr	r3, [r2, #4]
 800393e:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f240 329f 	movw	r2, #927	; 0x39f
 800394e:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	68d1      	ldr	r1, [r2, #12]
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_ADC_DeInit+0xb8>)
 8003956:	400b      	ands	r3, r1
 8003958:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	6913      	ldr	r3, [r2, #16]
 800395e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003962:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	6953      	ldr	r3, [r2, #20]
 8003968:	f023 0307 	bic.w	r3, r3, #7
 800396c:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	6a13      	ldr	r3, [r2, #32]
 8003972:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003976:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800397c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003980:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003986:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800398a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003990:	2500      	movs	r5, #0
 8003992:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <HAL_ADC_DeInit+0xbc>)
 8003996:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800399a:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800399e:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fd fac4 	bl	8000f30 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80039a8:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80039aa:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80039ac:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80039ae:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80039b2:	4630      	mov	r0, r6
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f7ff ff68 	bl	800388c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80039bc:	4606      	mov	r6, r0
 80039be:	b908      	cbnz	r0, 80039c4 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80039c0:	2301      	movs	r3, #1
 80039c2:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80039c4:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80039c6:	6893      	ldr	r3, [r2, #8]
 80039c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039cc:	f023 0317 	bic.w	r3, r3, #23
 80039d0:	6093      	str	r3, [r2, #8]
}
 80039d2:	e7b2      	b.n	800393a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80039d4:	2601      	movs	r6, #1
 80039d6:	e7ec      	b.n	80039b2 <HAL_ADC_DeInit+0x92>
 80039d8:	833e0200 	.word	0x833e0200
 80039dc:	40012000 	.word	0x40012000

080039e0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80039e0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d019      	beq.n	8003a1c <HAL_ADC_Stop+0x3c>
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80039ec:	2301      	movs	r3, #1
 80039ee:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039f2:	f7ff fe75 	bl	80036e0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80039f6:	b118      	cbz	r0, 8003a00 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80039fe:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ff43 	bl	800388c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d1f6      	bne.n	80039f8 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a1a:	e7ed      	b.n	80039f8 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003a1c:	2002      	movs	r0, #2
}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a28:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f000 8094 	beq.w	8003b5a <HAL_ADCEx_Calibration_Start+0x13a>
 8003a32:	4604      	mov	r4, r0
 8003a34:	2301      	movs	r3, #1
 8003a36:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a3a:	f7ff ff27 	bl	800388c <ADC_Disable>
 8003a3e:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a40:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f012 0201 	ands.w	r2, r2, #1
 8003a48:	d009      	beq.n	8003a5e <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003a52:	2300      	movs	r3, #0
 8003a54:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003a58:	4628      	mov	r0, r5
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a60:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003a64:	f041 0102 	orr.w	r1, r1, #2
 8003a68:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a6a:	68de      	ldr	r6, [r3, #12]
 8003a6c:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003a70:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003a74:	0436      	lsls	r6, r6, #16
 8003a76:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003a7e:	f021 0103 	bic.w	r1, r1, #3
 8003a82:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003a84:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a86:	e005      	b.n	8003a94 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003a88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a90:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a92:	3201      	adds	r2, #1
 8003a94:	2a07      	cmp	r2, #7
 8003a96:	d81e      	bhi.n	8003ad6 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003a98:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a9a:	688b      	ldr	r3, [r1, #8]
 8003a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aa0:	f023 0317 	bic.w	r3, r3, #23
 8003aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003aa8:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aaa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	daea      	bge.n	8003a88 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003ab2:	9b01      	ldr	r3, [sp, #4]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ab8:	9b01      	ldr	r3, [sp, #4]
 8003aba:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003abe:	d3f4      	bcc.n	8003aaa <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003ac0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ac2:	f023 0312 	bic.w	r3, r3, #18
 8003ac6:	f043 0310 	orr.w	r3, r3, #16
 8003aca:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003acc:	2300      	movs	r3, #0
 8003ace:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003ad2:	2501      	movs	r5, #1
 8003ad4:	e7c0      	b.n	8003a58 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003ad6:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003ada:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003adc:	6893      	ldr	r3, [r2, #8]
 8003ade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ae2:	f023 0317 	bic.w	r3, r3, #23
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003aec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003aee:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8003af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003af6:	4318      	orrs	r0, r3
 8003af8:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003afc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003afe:	6893      	ldr	r3, [r2, #8]
 8003b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b04:	f023 0317 	bic.w	r3, r3, #23
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003b0e:	f7fe f867 	bl	8001be0 <HAL_GetTick>
 8003b12:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	f012 0f01 	tst.w	r2, #1
 8003b1c:	d109      	bne.n	8003b32 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	4332      	orrs	r2, r6
 8003b22:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b30:	e78f      	b.n	8003a52 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b32:	f7fe f855 	bl	8001be0 <HAL_GetTick>
 8003b36:	1bc3      	subs	r3, r0, r7
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d9eb      	bls.n	8003b14 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f013 0f01 	tst.w	r3, #1
 8003b44:	d0e6      	beq.n	8003b14 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003b56:	2501      	movs	r5, #1
 8003b58:	e77e      	b.n	8003a58 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003b5a:	2502      	movs	r5, #2
 8003b5c:	e77c      	b.n	8003a58 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003b60 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b60:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b6c:	0200      	lsls	r0, r0, #8
 8003b6e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b72:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003b7c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b84:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_NVIC_SetPriority+0x68>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b8e:	f1c3 0c07 	rsb	ip, r3, #7
 8003b92:	f1bc 0f04 	cmp.w	ip, #4
 8003b96:	bf28      	it	cs
 8003b98:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b9c:	f103 0e04 	add.w	lr, r3, #4
 8003ba0:	f1be 0f06 	cmp.w	lr, #6
 8003ba4:	d918      	bls.n	8003bd8 <HAL_NVIC_SetPriority+0x54>
 8003ba6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003bac:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003bb0:	ea21 010c 	bic.w	r1, r1, ip
 8003bb4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb6:	fa0e fe03 	lsl.w	lr, lr, r3
 8003bba:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbe:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	db0b      	blt.n	8003bdc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	0112      	lsls	r2, r2, #4
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003bcc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003bd0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e7e5      	b.n	8003ba8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	f000 000f 	and.w	r0, r0, #15
 8003be0:	0112      	lsls	r2, r2, #4
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <HAL_NVIC_SetPriority+0x6c>)
 8003be6:	541a      	strb	r2, [r3, r0]
 8003be8:	e7f4      	b.n	8003bd4 <HAL_NVIC_SetPriority+0x50>
 8003bea:	bf00      	nop
 8003bec:	e000ed00 	.word	0xe000ed00
 8003bf0:	e000ed14 	.word	0xe000ed14

08003bf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	db07      	blt.n	8003c08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf8:	f000 021f 	and.w	r2, r0, #31
 8003bfc:	0940      	lsrs	r0, r0, #5
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4093      	lsls	r3, r2
 8003c02:	4a02      	ldr	r2, [pc, #8]	; (8003c0c <HAL_NVIC_EnableIRQ+0x18>)
 8003c04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c10:	2800      	cmp	r0, #0
 8003c12:	db0c      	blt.n	8003c2e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c14:	f000 021f 	and.w	r2, r0, #31
 8003c18:	0940      	lsrs	r0, r0, #5
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4093      	lsls	r3, r2
 8003c1e:	3020      	adds	r0, #32
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_NVIC_DisableIRQ+0x20>)
 8003c22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c2a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003c2e:	4770      	bx	lr
 8003c30:	e000e100 	.word	0xe000e100

08003c34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c36:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003c38:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003c3c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003c40:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003c42:	b124      	cbz	r4, 8003c4e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c44:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003c46:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003c4a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c4e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003c50:	f004 0c1c 	and.w	ip, r4, #28
 8003c54:	2401      	movs	r4, #1
 8003c56:	fa04 f40c 	lsl.w	r4, r4, ip
 8003c5a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003c5e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c62:	6804      	ldr	r4, [r0, #0]
 8003c64:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c66:	6883      	ldr	r3, [r0, #8]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d005      	beq.n	8003c78 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003c6c:	6803      	ldr	r3, [r0, #0]
 8003c6e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003c70:	6803      	ldr	r3, [r0, #0]
 8003c72:	60da      	str	r2, [r3, #12]
  }
}
 8003c74:	bc10      	pop	{r4}
 8003c76:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003c78:	6803      	ldr	r3, [r0, #0]
 8003c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003c7c:	6803      	ldr	r3, [r0, #0]
 8003c7e:	60d9      	str	r1, [r3, #12]
 8003c80:	e7f8      	b.n	8003c74 <DMA_SetConfig+0x40>
	...

08003c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d816      	bhi.n	8003cba <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c8e:	f022 0203 	bic.w	r2, r2, #3
 8003c92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003c96:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003c9a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b08      	subs	r3, #8
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003caa:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003cb8:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cbc:	f022 0103 	bic.w	r1, r2, #3
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003cc2:	440a      	add	r2, r1
 8003cc4:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	3b08      	subs	r3, #8
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	3307      	adds	r3, #7
 8003cd4:	e7e8      	b.n	8003ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003cd6:	bf00      	nop
 8003cd8:	40020407 	.word	0x40020407
 8003cdc:	cccccccd 	.word	0xcccccccd
 8003ce0:	40020880 	.word	0x40020880
 8003ce4:	4002081c 	.word	0x4002081c

08003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ce8:	6843      	ldr	r3, [r0, #4]
 8003cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cee:	4a07      	ldr	r2, [pc, #28]	; (8003d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003cf0:	441a      	add	r2, r3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf6:	4a06      	ldr	r2, [pc, #24]	; (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003cf8:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	1000823f 	.word	0x1000823f
 8003d10:	40020940 	.word	0x40020940

08003d14 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d060      	beq.n	8003dda <HAL_DMA_Init+0xc6>
{
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_DMA_Init+0xcc>)
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d842      	bhi.n	8003daa <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d24:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_DMA_Init+0xd0>)
 8003d26:	4413      	add	r3, r2
 8003d28:	492f      	ldr	r1, [pc, #188]	; (8003de8 <HAL_DMA_Init+0xd4>)
 8003d2a:	fba1 1303 	umull	r1, r3, r1, r3
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_DMA_Init+0xd8>)
 8003d36:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d48:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003d4a:	6821      	ldr	r1, [r4, #0]
 8003d4c:	680a      	ldr	r2, [r1, #0]
 8003d4e:	68a3      	ldr	r3, [r4, #8]
 8003d50:	68e0      	ldr	r0, [r4, #12]
 8003d52:	4303      	orrs	r3, r0
 8003d54:	6920      	ldr	r0, [r4, #16]
 8003d56:	4303      	orrs	r3, r0
 8003d58:	6960      	ldr	r0, [r4, #20]
 8003d5a:	4303      	orrs	r3, r0
 8003d5c:	69a0      	ldr	r0, [r4, #24]
 8003d5e:	4303      	orrs	r3, r0
 8003d60:	69e0      	ldr	r0, [r4, #28]
 8003d62:	4303      	orrs	r3, r0
 8003d64:	6a20      	ldr	r0, [r4, #32]
 8003d66:	4303      	orrs	r3, r0
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f7ff ff89 	bl	8003c84 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d72:	68a3      	ldr	r3, [r4, #8]
 8003d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d7a:	6863      	ldr	r3, [r4, #4]
 8003d7c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003d86:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003d88:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d919      	bls.n	8003dc6 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003d96:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d98:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003da4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003da8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_DMA_Init+0xdc>)
 8003dac:	4413      	add	r3, r2
 8003dae:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_DMA_Init+0xd4>)
 8003db0:	fba1 1303 	umull	r1, r3, r1, r3
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_DMA_Init+0xe0>)
 8003dbc:	6403      	str	r3, [r0, #64]	; 0x40
 8003dbe:	e7bb      	b.n	8003d38 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6063      	str	r3, [r4, #4]
 8003dc4:	e7d9      	b.n	8003d7a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff ff8e 	bl	8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dd4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	e7df      	b.n	8003d9a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003dda:	2001      	movs	r0, #1
}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40020407 	.word	0x40020407
 8003de4:	bffdfff8 	.word	0xbffdfff8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020000 	.word	0x40020000
 8003df0:	bffdfbf8 	.word	0xbffdfbf8
 8003df4:	40020400 	.word	0x40020400

08003df8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d04b      	beq.n	8003e94 <HAL_DMA_DeInit+0x9c>
{
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003e00:	6802      	ldr	r2, [r0, #0]
 8003e02:	6813      	ldr	r3, [r2, #0]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e0a:	6802      	ldr	r2, [r0, #0]
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_DMA_DeInit+0xa0>)
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d82c      	bhi.n	8003e6c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e12:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <HAL_DMA_DeInit+0xa4>)
 8003e14:	4413      	add	r3, r2
 8003e16:	4922      	ldr	r1, [pc, #136]	; (8003ea0 <HAL_DMA_DeInit+0xa8>)
 8003e18:	fba1 1303 	umull	r1, r3, r1, r3
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_DMA_DeInit+0xac>)
 8003e24:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003e26:	2500      	movs	r5, #0
 8003e28:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e2c:	f003 021c 	and.w	r2, r3, #28
 8003e30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e32:	2301      	movs	r3, #1
 8003e34:	4093      	lsls	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff ff23 	bl	8003c84 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003e3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003e40:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003e44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e46:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d918      	bls.n	8003e82 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003e50:	2000      	movs	r0, #0
 8003e52:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003e54:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e56:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003e58:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e5a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003e5c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003e5e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e60:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003e62:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003e66:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <HAL_DMA_DeInit+0xb0>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	490b      	ldr	r1, [pc, #44]	; (8003ea0 <HAL_DMA_DeInit+0xa8>)
 8003e72:	fba1 1303 	umull	r1, r3, r1, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_DMA_DeInit+0xb4>)
 8003e7e:	6403      	str	r3, [r0, #64]	; 0x40
 8003e80:	e7d1      	b.n	8003e26 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e82:	4620      	mov	r0, r4
 8003e84:	f7ff ff30 	bl	8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e8a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e8e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	e7dd      	b.n	8003e50 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003e94:	2001      	movs	r0, #1
}
 8003e96:	4770      	bx	lr
 8003e98:	40020407 	.word	0x40020407
 8003e9c:	bffdfff8 	.word	0xbffdfff8
 8003ea0:	cccccccd 	.word	0xcccccccd
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	bffdfbf8 	.word	0xbffdfbf8
 8003eac:	40020400 	.word	0x40020400

08003eb0 <HAL_DMA_Start_IT>:
{
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003eb4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003eb8:	2801      	cmp	r0, #1
 8003eba:	d043      	beq.n	8003f44 <HAL_DMA_Start_IT+0x94>
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003ec2:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003ec6:	b2c0      	uxtb	r0, r0
 8003ec8:	2801      	cmp	r0, #1
 8003eca:	d006      	beq.n	8003eda <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
}
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eda:	2002      	movs	r0, #2
 8003edc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	6828      	ldr	r0, [r5, #0]
 8003ee8:	f020 0001 	bic.w	r0, r0, #1
 8003eec:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f7ff fea0 	bl	8003c34 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ef6:	b1d3      	cbz	r3, 8003f2e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	6813      	ldr	r3, [r2, #0]
 8003efc:	f043 030e 	orr.w	r3, r3, #14
 8003f00:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003f0a:	d003      	beq.n	8003f14 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8003f14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f16:	b11b      	cbz	r3, 8003f20 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e7d4      	b.n	8003ed8 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	6813      	ldr	r3, [r2, #0]
 8003f32:	f023 0304 	bic.w	r3, r3, #4
 8003f36:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	f043 030a 	orr.w	r3, r3, #10
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e7de      	b.n	8003f02 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003f44:	2002      	movs	r0, #2
 8003f46:	e7c7      	b.n	8003ed8 <HAL_DMA_Start_IT+0x28>

08003f48 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d034      	beq.n	8003fb8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f4e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	2a02      	cmp	r2, #2
 8003f56:	d006      	beq.n	8003f66 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f58:	2204      	movs	r2, #4
 8003f5a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003f62:	2001      	movs	r0, #1
 8003f64:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f66:	6801      	ldr	r1, [r0, #0]
 8003f68:	680a      	ldr	r2, [r1, #0]
 8003f6a:	f022 020e 	bic.w	r2, r2, #14
 8003f6e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f70:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f72:	680a      	ldr	r2, [r1, #0]
 8003f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f78:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f7a:	6801      	ldr	r1, [r0, #0]
 8003f7c:	680a      	ldr	r2, [r1, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f86:	f002 011c 	and.w	r1, r2, #28
 8003f8a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	408a      	lsls	r2, r1
 8003f90:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f96:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f9a:	b132      	cbz	r2, 8003faa <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003fa2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fa6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003fa8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003fb6:	4770      	bx	lr
    return HAL_ERROR;
 8003fb8:	2001      	movs	r0, #1
}
 8003fba:	4770      	bx	lr

08003fbc <HAL_DMA_Abort_IT>:
{
 8003fbc:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fbe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d003      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003fcc:	2001      	movs	r0, #1
}
 8003fce:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f023 030e 	bic.w	r3, r3, #14
 8003fd8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003fda:	6802      	ldr	r2, [r0, #0]
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fe4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ff0:	f003 021c 	and.w	r2, r3, #28
 8003ff4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ffc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ffe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004000:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004002:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004004:	b133      	cbz	r3, 8004014 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800400e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004010:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004012:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004014:	2301      	movs	r3, #1
 8004016:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800401a:	2300      	movs	r3, #0
 800401c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004020:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004022:	b113      	cbz	r3, 800402a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004024:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2000      	movs	r0, #0
 8004028:	e7d1      	b.n	8003fce <HAL_DMA_Abort_IT+0x12>
 800402a:	2000      	movs	r0, #0
 800402c:	e7cf      	b.n	8003fce <HAL_DMA_Abort_IT+0x12>
	...

08004030 <HAL_DMA_IRQHandler>:
{
 8004030:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004032:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004034:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004036:	6804      	ldr	r4, [r0, #0]
 8004038:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800403a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800403c:	f003 031c 	and.w	r3, r3, #28
 8004040:	2204      	movs	r2, #4
 8004042:	409a      	lsls	r2, r3
 8004044:	420a      	tst	r2, r1
 8004046:	d015      	beq.n	8004074 <HAL_DMA_IRQHandler+0x44>
 8004048:	f015 0f04 	tst.w	r5, #4
 800404c:	d012      	beq.n	8004074 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	f013 0f20 	tst.w	r3, #32
 8004054:	d103      	bne.n	800405e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800405e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004060:	f003 021c 	and.w	r2, r3, #28
 8004064:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004066:	2304      	movs	r3, #4
 8004068:	4093      	lsls	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800406c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800406e:	b103      	cbz	r3, 8004072 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004070:	4798      	blx	r3
}
 8004072:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004074:	2202      	movs	r2, #2
 8004076:	409a      	lsls	r2, r3
 8004078:	420a      	tst	r2, r1
 800407a:	d028      	beq.n	80040ce <HAL_DMA_IRQHandler+0x9e>
 800407c:	f015 0f02 	tst.w	r5, #2
 8004080:	d025      	beq.n	80040ce <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f013 0f20 	tst.w	r3, #32
 8004088:	d106      	bne.n	8004098 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	f023 030a 	bic.w	r3, r3, #10
 8004090:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004092:	2301      	movs	r3, #1
 8004094:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004098:	6802      	ldr	r2, [r0, #0]
 800409a:	4b1c      	ldr	r3, [pc, #112]	; (800410c <HAL_DMA_IRQHandler+0xdc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d90e      	bls.n	80040be <HAL_DMA_IRQHandler+0x8e>
 80040a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80040a2:	f003 021c 	and.w	r2, r3, #28
 80040a6:	2302      	movs	r3, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_DMA_IRQHandler+0xe0>)
 80040ac:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80040ae:	2300      	movs	r3, #0
 80040b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 80040b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0db      	beq.n	8004072 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80040ba:	4798      	blx	r3
 80040bc:	e7d9      	b.n	8004072 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80040be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80040c0:	f003 021c 	and.w	r2, r3, #28
 80040c4:	2302      	movs	r3, #2
 80040c6:	4093      	lsls	r3, r2
 80040c8:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_DMA_IRQHandler+0xe4>)
 80040ca:	6053      	str	r3, [r2, #4]
 80040cc:	e7ef      	b.n	80040ae <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80040ce:	2208      	movs	r2, #8
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	420b      	tst	r3, r1
 80040d6:	d0cc      	beq.n	8004072 <HAL_DMA_IRQHandler+0x42>
 80040d8:	f015 0f08 	tst.w	r5, #8
 80040dc:	d0c9      	beq.n	8004072 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f023 030e 	bic.w	r3, r3, #14
 80040e4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80040e8:	f003 031c 	and.w	r3, r3, #28
 80040ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80040ee:	2201      	movs	r2, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040f6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80040f8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80040fc:	2300      	movs	r3, #0
 80040fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0b4      	beq.n	8004072 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004108:	4798      	blx	r3
  return;
 800410a:	e7b2      	b.n	8004072 <HAL_DMA_IRQHandler+0x42>
 800410c:	40020080 	.word	0x40020080
 8004110:	40020400 	.word	0x40020400
 8004114:	40020000 	.word	0x40020000

08004118 <HAL_DMA_GetState>:
  return hdma->State;
 8004118:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 800411c:	4770      	bx	lr

0800411e <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 800411e:	b178      	cbz	r0, 8004140 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004120:	6803      	ldr	r3, [r0, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004124:	f011 0f10 	tst.w	r1, #16
 8004128:	d004      	beq.n	8004134 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800412a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800412e:	d004      	beq.n	800413a <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004130:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004134:	601a      	str	r2, [r3, #0]
  return status;
 8004136:	2000      	movs	r0, #0
 8004138:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800413a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800413e:	e7f9      	b.n	8004134 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004140:	2001      	movs	r0, #1
}
 8004142:	4770      	bx	lr

08004144 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004144:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004146:	4c05      	ldr	r4, [pc, #20]	; (800415c <FLASH_Program_DoubleWord+0x18>)
 8004148:	6961      	ldr	r1, [r4, #20]
 800414a:	f041 0101 	orr.w	r1, r1, #1
 800414e:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004150:	6002      	str	r2, [r0, #0]
 8004152:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004156:	6043      	str	r3, [r0, #4]
}
 8004158:	bc10      	pop	{r4}
 800415a:	4770      	bx	lr
 800415c:	58004000 	.word	0x58004000

08004160 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <FLASH_Program_Fast+0x34>)
 8004162:	6953      	ldr	r3, [r2, #20]
 8004164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004168:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800416e:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004170:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004172:	f851 2b04 	ldr.w	r2, [r1], #4
 8004176:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800417a:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 800417c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004180:	d1f7      	bne.n	8004172 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <FLASH_Program_Fast+0x34>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800418a:	d1fa      	bne.n	8004182 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58004000 	.word	0x58004000

08004198 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_FLASH_Unlock+0x28>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	db01      	blt.n	80041a4 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2000      	movs	r0, #0
 80041a2:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_FLASH_Unlock+0x28>)
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <HAL_FLASH_Unlock+0x2c>)
 80041a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041aa:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80041ae:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db01      	blt.n	80041ba <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2000      	movs	r0, #0
 80041b8:	4770      	bx	lr
      status = HAL_ERROR;
 80041ba:	2001      	movs	r0, #1
}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	58004000 	.word	0x58004000
 80041c4:	45670123 	.word	0x45670123

080041c8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_FLASH_Lock+0x18>)
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041d0:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db01      	blt.n	80041dc <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 80041d8:	2001      	movs	r0, #1
}
 80041da:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2000      	movs	r0, #0
 80041de:	4770      	bx	lr
 80041e0:	58004000 	.word	0x58004000

080041e4 <FLASH_WaitForLastOperation>:
{
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7fd fcfa 	bl	8001be0 <HAL_GetTick>
 80041ec:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <FLASH_WaitForLastOperation+0x64>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80041f6:	d006      	beq.n	8004206 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80041f8:	f7fd fcf2 	bl	8001be0 <HAL_GetTick>
 80041fc:	1b00      	subs	r0, r0, r4
 80041fe:	42a8      	cmp	r0, r5
 8004200:	d3f5      	bcc.n	80041ee <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004202:	2003      	movs	r0, #3
}
 8004204:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <FLASH_WaitForLastOperation+0x64>)
 8004208:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800420a:	f013 0f01 	tst.w	r3, #1
 800420e:	d002      	beq.n	8004216 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <FLASH_WaitForLastOperation+0x64>)
 8004212:	2101      	movs	r1, #1
 8004214:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004216:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800421a:	4013      	ands	r3, r2
 800421c:	d001      	beq.n	8004222 <FLASH_WaitForLastOperation+0x3e>
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <FLASH_WaitForLastOperation+0x64>)
 8004220:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004222:	b95b      	cbnz	r3, 800423c <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <FLASH_WaitForLastOperation+0x64>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800422c:	d00a      	beq.n	8004244 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800422e:	f7fd fcd7 	bl	8001be0 <HAL_GetTick>
 8004232:	1b00      	subs	r0, r0, r4
 8004234:	42a8      	cmp	r0, r5
 8004236:	d3f5      	bcc.n	8004224 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004238:	2003      	movs	r0, #3
 800423a:	e7e3      	b.n	8004204 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 800423c:	4a03      	ldr	r2, [pc, #12]	; (800424c <FLASH_WaitForLastOperation+0x68>)
 800423e:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
 8004242:	e7df      	b.n	8004204 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004244:	2000      	movs	r0, #0
 8004246:	e7dd      	b.n	8004204 <FLASH_WaitForLastOperation+0x20>
 8004248:	58004000 	.word	0x58004000
 800424c:	200004ec 	.word	0x200004ec

08004250 <HAL_FLASH_Program>:
{
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004254:	4b15      	ldr	r3, [pc, #84]	; (80042ac <HAL_FLASH_Program+0x5c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d025      	beq.n	80042a8 <HAL_FLASH_Program+0x58>
 800425c:	4604      	mov	r4, r0
 800425e:	460d      	mov	r5, r1
 8004260:	4616      	mov	r6, r2
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_FLASH_Program+0x5c>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004268:	2200      	movs	r2, #0
 800426a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800426c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004270:	f7ff ffb8 	bl	80041e4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004274:	b970      	cbnz	r0, 8004294 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004276:	2c01      	cmp	r4, #1
 8004278:	d010      	beq.n	800429c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	f7ff ff6f 	bl	8004160 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004286:	f7ff ffad 	bl	80041e4 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_FLASH_Program+0x60>)
 800428c:	6953      	ldr	r3, [r2, #20]
 800428e:	ea23 0304 	bic.w	r3, r3, r4
 8004292:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_FLASH_Program+0x5c>)
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
}
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 800429c:	4632      	mov	r2, r6
 800429e:	463b      	mov	r3, r7
 80042a0:	4628      	mov	r0, r5
 80042a2:	f7ff ff4f 	bl	8004144 <FLASH_Program_DoubleWord>
 80042a6:	e7ec      	b.n	8004282 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80042a8:	2002      	movs	r0, #2
 80042aa:	e7f6      	b.n	800429a <HAL_FLASH_Program+0x4a>
 80042ac:	200004ec 	.word	0x200004ec
 80042b0:	58004000 	.word	0x58004000

080042b4 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80042b4:	4a03      	ldr	r2, [pc, #12]	; (80042c4 <FLASH_MassErase+0x10>)
 80042b6:	6953      	ldr	r3, [r2, #20]
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	6153      	str	r3, [r2, #20]
#endif
}
 80042c2:	4770      	bx	lr
 80042c4:	58004000 	.word	0x58004000

080042c8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80042c8:	4b18      	ldr	r3, [pc, #96]	; (800432c <FLASH_FlushCaches+0x64>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d006      	beq.n	80042e2 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <FLASH_FlushCaches+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d012      	beq.n	8004306 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 80042e0:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <FLASH_FlushCaches+0x64>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e7e6      	b.n	80042d4 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <FLASH_FlushCaches+0x64>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800431e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004326:	601a      	str	r2, [r3, #0]
}
 8004328:	e7da      	b.n	80042e0 <FLASH_FlushCaches+0x18>
 800432a:	bf00      	nop
 800432c:	58004000 	.word	0x58004000

08004330 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <FLASH_AcknowledgePageErase+0x10>)
 8004332:	6953      	ldr	r3, [r2, #20]
 8004334:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	6153      	str	r3, [r2, #20]
#endif
}
 800433e:	4770      	bx	lr
 8004340:	58004000 	.word	0x58004000

08004344 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004344:	4a05      	ldr	r2, [pc, #20]	; (800435c <FLASH_PageErase+0x18>)
 8004346:	6953      	ldr	r3, [r2, #20]
 8004348:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800434c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004350:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004354:	f040 0002 	orr.w	r0, r0, #2
 8004358:	6150      	str	r0, [r2, #20]
}
 800435a:	4770      	bx	lr
 800435c:	58004000 	.word	0x58004000

08004360 <HAL_FLASHEx_Erase>:
{
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004362:	4b1e      	ldr	r3, [pc, #120]	; (80043dc <HAL_FLASHEx_Erase+0x7c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d035      	beq.n	80043d6 <HAL_FLASHEx_Erase+0x76>
 800436a:	4605      	mov	r5, r0
 800436c:	460f      	mov	r7, r1
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_FLASHEx_Erase+0x7c>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004374:	2200      	movs	r2, #0
 8004376:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800437c:	f7ff ff32 	bl	80041e4 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004380:	4606      	mov	r6, r0
 8004382:	bb18      	cbnz	r0, 80043cc <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d013      	beq.n	80043b2 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800438e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004390:	686c      	ldr	r4, [r5, #4]
 8004392:	686b      	ldr	r3, [r5, #4]
 8004394:	68aa      	ldr	r2, [r5, #8]
 8004396:	4413      	add	r3, r2
 8004398:	42a3      	cmp	r3, r4
 800439a:	d913      	bls.n	80043c4 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ffd1 	bl	8004344 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043a6:	f7ff ff1d 	bl	80041e4 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80043aa:	4606      	mov	r6, r0
 80043ac:	b948      	cbnz	r0, 80043c2 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80043ae:	3401      	adds	r4, #1
 80043b0:	e7ef      	b.n	8004392 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80043b2:	f7ff ff7f 	bl	80042b4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043ba:	f7ff ff13 	bl	80041e4 <FLASH_WaitForLastOperation>
 80043be:	4606      	mov	r6, r0
 80043c0:	e002      	b.n	80043c8 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 80043c2:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 80043c4:	f7ff ffb4 	bl	8004330 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 80043c8:	f7ff ff7e 	bl	80042c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_FLASHEx_Erase+0x7c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
}
 80043d2:	4630      	mov	r0, r6
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80043d6:	2602      	movs	r6, #2
 80043d8:	e7fb      	b.n	80043d2 <HAL_FLASHEx_Erase+0x72>
 80043da:	bf00      	nop
 80043dc:	200004ec 	.word	0x200004ec

080043e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80043e2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e4:	e069      	b.n	80044ba <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043e6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043e8:	005e      	lsls	r6, r3, #1
 80043ea:	2403      	movs	r4, #3
 80043ec:	40b4      	lsls	r4, r6
 80043ee:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043f2:	68cc      	ldr	r4, [r1, #12]
 80043f4:	40b4      	lsls	r4, r6
 80043f6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80043f8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fa:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043fc:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004400:	684c      	ldr	r4, [r1, #4]
 8004402:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004406:	409c      	lsls	r4, r3
 8004408:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800440a:	6044      	str	r4, [r0, #4]
 800440c:	e066      	b.n	80044dc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800440e:	08dd      	lsrs	r5, r3, #3
 8004410:	3508      	adds	r5, #8
 8004412:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004416:	f003 0c07 	and.w	ip, r3, #7
 800441a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800441e:	f04f 0e0f 	mov.w	lr, #15
 8004422:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004426:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800442a:	690c      	ldr	r4, [r1, #16]
 800442c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004430:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004434:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004438:	e067      	b.n	800450a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800443a:	2402      	movs	r4, #2
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x60>
 800443e:	2400      	movs	r4, #0
 8004440:	fa04 f40e 	lsl.w	r4, r4, lr
 8004444:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004446:	f10c 0c02 	add.w	ip, ip, #2
 800444a:	4d4b      	ldr	r5, [pc, #300]	; (8004578 <HAL_GPIO_Init+0x198>)
 800444c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004450:	4c4a      	ldr	r4, [pc, #296]	; (800457c <HAL_GPIO_Init+0x19c>)
 8004452:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004454:	43d4      	mvns	r4, r2
 8004456:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800445a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800445e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004462:	d001      	beq.n	8004468 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004464:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004468:	4d44      	ldr	r5, [pc, #272]	; (800457c <HAL_GPIO_Init+0x19c>)
 800446a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800446c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800446e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004472:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004476:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 800447a:	d001      	beq.n	8004480 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 800447c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004480:	4d3e      	ldr	r5, [pc, #248]	; (800457c <HAL_GPIO_Init+0x19c>)
 8004482:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004484:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004488:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800448c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004490:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004494:	d001      	beq.n	800449a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004496:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800449a:	4d38      	ldr	r5, [pc, #224]	; (800457c <HAL_GPIO_Init+0x19c>)
 800449c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80044a0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80044a4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044a6:	684e      	ldr	r6, [r1, #4]
 80044a8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80044ac:	d001      	beq.n	80044b2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80044ae:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80044b2:	4a32      	ldr	r2, [pc, #200]	; (800457c <HAL_GPIO_Init+0x19c>)
 80044b4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80044b8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	680a      	ldr	r2, [r1, #0]
 80044bc:	fa32 f403 	lsrs.w	r4, r2, r3
 80044c0:	d058      	beq.n	8004574 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044c2:	f04f 0c01 	mov.w	ip, #1
 80044c6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80044ca:	ea1c 0202 	ands.w	r2, ip, r2
 80044ce:	d0f3      	beq.n	80044b8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d0:	684c      	ldr	r4, [r1, #4]
 80044d2:	f004 0403 	and.w	r4, r4, #3
 80044d6:	3c01      	subs	r4, #1
 80044d8:	2c01      	cmp	r4, #1
 80044da:	d984      	bls.n	80043e6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044dc:	684c      	ldr	r4, [r1, #4]
 80044de:	f004 0403 	and.w	r4, r4, #3
 80044e2:	2c03      	cmp	r4, #3
 80044e4:	d00c      	beq.n	8004500 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80044e6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044e8:	005d      	lsls	r5, r3, #1
 80044ea:	f04f 0c03 	mov.w	ip, #3
 80044ee:	fa0c fc05 	lsl.w	ip, ip, r5
 80044f2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f6:	688c      	ldr	r4, [r1, #8]
 80044f8:	40ac      	lsls	r4, r5
 80044fa:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80044fe:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004500:	684c      	ldr	r4, [r1, #4]
 8004502:	f004 0403 	and.w	r4, r4, #3
 8004506:	2c02      	cmp	r4, #2
 8004508:	d081      	beq.n	800440e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800450a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800450c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004510:	f04f 0c03 	mov.w	ip, #3
 8004514:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004518:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800451c:	684c      	ldr	r4, [r1, #4]
 800451e:	f004 0403 	and.w	r4, r4, #3
 8004522:	fa04 f40e 	lsl.w	r4, r4, lr
 8004526:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800452a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800452c:	684c      	ldr	r4, [r1, #4]
 800452e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004532:	d0c1      	beq.n	80044b8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004534:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004538:	f10c 0502 	add.w	r5, ip, #2
 800453c:	4c0e      	ldr	r4, [pc, #56]	; (8004578 <HAL_GPIO_Init+0x198>)
 800453e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004542:	f003 0e03 	and.w	lr, r3, #3
 8004546:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800454a:	2407      	movs	r4, #7
 800454c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004550:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004554:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004558:	f43f af71 	beq.w	800443e <HAL_GPIO_Init+0x5e>
 800455c:	4c08      	ldr	r4, [pc, #32]	; (8004580 <HAL_GPIO_Init+0x1a0>)
 800455e:	42a0      	cmp	r0, r4
 8004560:	d006      	beq.n	8004570 <HAL_GPIO_Init+0x190>
 8004562:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004566:	42a0      	cmp	r0, r4
 8004568:	f43f af67 	beq.w	800443a <HAL_GPIO_Init+0x5a>
 800456c:	2407      	movs	r4, #7
 800456e:	e767      	b.n	8004440 <HAL_GPIO_Init+0x60>
 8004570:	2401      	movs	r4, #1
 8004572:	e765      	b.n	8004440 <HAL_GPIO_Init+0x60>
  }
}
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	58000800 	.word	0x58000800
 8004580:	48000400 	.word	0x48000400

08004584 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004584:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004586:	fa31 f203 	lsrs.w	r2, r1, r3
 800458a:	d071      	beq.n	8004670 <HAL_GPIO_DeInit+0xec>
{
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	e02e      	b.n	80045ee <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004590:	2502      	movs	r5, #2
 8004592:	e000      	b.n	8004596 <HAL_GPIO_DeInit+0x12>
 8004594:	2500      	movs	r5, #0
 8004596:	fa05 f50c 	lsl.w	r5, r5, ip
 800459a:	42a5      	cmp	r5, r4
 800459c:	d049      	beq.n	8004632 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800459e:	6804      	ldr	r4, [r0, #0]
 80045a0:	005d      	lsls	r5, r3, #1
 80045a2:	f04f 0c03 	mov.w	ip, #3
 80045a6:	fa0c fc05 	lsl.w	ip, ip, r5
 80045aa:	ea44 040c 	orr.w	r4, r4, ip
 80045ae:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80045b0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80045b4:	f10e 0e08 	add.w	lr, lr, #8
 80045b8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80045bc:	f003 0607 	and.w	r6, r3, #7
 80045c0:	00b6      	lsls	r6, r6, #2
 80045c2:	250f      	movs	r5, #15
 80045c4:	40b5      	lsls	r5, r6
 80045c6:	ea24 0405 	bic.w	r4, r4, r5
 80045ca:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ce:	6884      	ldr	r4, [r0, #8]
 80045d0:	ea24 040c 	bic.w	r4, r4, ip
 80045d4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d6:	6844      	ldr	r4, [r0, #4]
 80045d8:	ea24 0202 	bic.w	r2, r4, r2
 80045dc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045de:	68c2      	ldr	r2, [r0, #12]
 80045e0:	ea22 020c 	bic.w	r2, r2, ip
 80045e4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80045e6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80045e8:	fa31 f203 	lsrs.w	r2, r1, r3
 80045ec:	d03f      	beq.n	800466e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80045ee:	2201      	movs	r2, #1
 80045f0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80045f2:	ea12 0701 	ands.w	r7, r2, r1
 80045f6:	d0f6      	beq.n	80045e6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80045f8:	089e      	lsrs	r6, r3, #2
 80045fa:	1cb5      	adds	r5, r6, #2
 80045fc:	4c1d      	ldr	r4, [pc, #116]	; (8004674 <HAL_GPIO_DeInit+0xf0>)
 80045fe:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004602:	f003 0c03 	and.w	ip, r3, #3
 8004606:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800460a:	f04f 0e07 	mov.w	lr, #7
 800460e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004612:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004616:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800461a:	d0bb      	beq.n	8004594 <HAL_GPIO_DeInit+0x10>
 800461c:	4d16      	ldr	r5, [pc, #88]	; (8004678 <HAL_GPIO_DeInit+0xf4>)
 800461e:	42a8      	cmp	r0, r5
 8004620:	d005      	beq.n	800462e <HAL_GPIO_DeInit+0xaa>
 8004622:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004626:	42a8      	cmp	r0, r5
 8004628:	d0b2      	beq.n	8004590 <HAL_GPIO_DeInit+0xc>
 800462a:	2507      	movs	r5, #7
 800462c:	e7b3      	b.n	8004596 <HAL_GPIO_DeInit+0x12>
 800462e:	2501      	movs	r5, #1
 8004630:	e7b1      	b.n	8004596 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004632:	4c12      	ldr	r4, [pc, #72]	; (800467c <HAL_GPIO_DeInit+0xf8>)
 8004634:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004638:	ea25 0507 	bic.w	r5, r5, r7
 800463c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004640:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004644:	ea25 0507 	bic.w	r5, r5, r7
 8004648:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	ea25 0507 	bic.w	r5, r5, r7
 8004652:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004654:	6865      	ldr	r5, [r4, #4]
 8004656:	ea25 0507 	bic.w	r5, r5, r7
 800465a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800465c:	4d05      	ldr	r5, [pc, #20]	; (8004674 <HAL_GPIO_DeInit+0xf0>)
 800465e:	3602      	adds	r6, #2
 8004660:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004664:	ea24 040e 	bic.w	r4, r4, lr
 8004668:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800466c:	e797      	b.n	800459e <HAL_GPIO_DeInit+0x1a>
  }
}
 800466e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	48000400 	.word	0x48000400
 800467c:	58000800 	.word	0x58000800

08004680 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004680:	b10a      	cbz	r2, 8004686 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004682:	6181      	str	r1, [r0, #24]
 8004684:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004686:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004688:	4770      	bx	lr

0800468a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800468a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800468c:	ea01 0203 	and.w	r2, r1, r3
 8004690:	ea21 0103 	bic.w	r1, r1, r3
 8004694:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004698:	6181      	str	r1, [r0, #24]
}
 800469a:	4770      	bx	lr

0800469c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800469c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	4203      	tst	r3, r0
 80046a4:	d100      	bne.n	80046a8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80046a6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80046aa:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046ac:	f7fe faf6 	bl	8002c9c <HAL_GPIO_EXTI_Callback>
}
 80046b0:	e7f9      	b.n	80046a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80046b2:	bf00      	nop
 80046b4:	58000800 	.word	0x58000800

080046b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046b8:	6803      	ldr	r3, [r0, #0]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	f012 0f02 	tst.w	r2, #2
 80046c0:	d001      	beq.n	80046c6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046c2:	2200      	movs	r2, #0
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	f012 0f01 	tst.w	r2, #1
 80046ce:	d103      	bne.n	80046d8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	619a      	str	r2, [r3, #24]
  }
}
 80046d8:	4770      	bx	lr

080046da <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046da:	b410      	push	{r4}
 80046dc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80046e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046e6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046e8:	4321      	orrs	r1, r4
 80046ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	6853      	ldr	r3, [r2, #4]
 80046f2:	0d64      	lsrs	r4, r4, #21
 80046f4:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80046f8:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80046fc:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8004700:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004704:	f044 0403 	orr.w	r4, r4, #3
 8004708:	ea23 0304 	bic.w	r3, r3, r4
 800470c:	430b      	orrs	r3, r1
 800470e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004710:	bc10      	pop	{r4}
 8004712:	4770      	bx	lr

08004714 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004714:	f011 0f01 	tst.w	r1, #1
 8004718:	d009      	beq.n	800472e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800471a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800471e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004722:	2b28      	cmp	r3, #40	; 0x28
 8004724:	d001      	beq.n	800472a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004726:	23f2      	movs	r3, #242	; 0xf2
 8004728:	e002      	b.n	8004730 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800472a:	2342      	movs	r3, #66	; 0x42
 800472c:	e000      	b.n	8004730 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800472e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004730:	f011 0f02 	tst.w	r1, #2
 8004734:	d009      	beq.n	800474a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004736:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800473a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800473e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004742:	2a28      	cmp	r2, #40	; 0x28
 8004744:	d010      	beq.n	8004768 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004746:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800474a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800474e:	d10d      	bne.n	800476c <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004750:	2910      	cmp	r1, #16
 8004752:	d00e      	beq.n	8004772 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004754:	2920      	cmp	r1, #32
 8004756:	d00f      	beq.n	8004778 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004758:	2940      	cmp	r1, #64	; 0x40
 800475a:	d010      	beq.n	800477e <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800475c:	6801      	ldr	r1, [r0, #0]
 800475e:	680a      	ldr	r2, [r1, #0]
 8004760:	ea22 0303 	bic.w	r3, r2, r3
 8004764:	600b      	str	r3, [r1, #0]
}
 8004766:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004768:	4663      	mov	r3, ip
 800476a:	e7ee      	b.n	800474a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800476c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004770:	e7ee      	b.n	8004750 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004772:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004776:	e7ed      	b.n	8004754 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004778:	f043 0320 	orr.w	r3, r3, #32
 800477c:	e7ec      	b.n	8004758 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	e7eb      	b.n	800475c <I2C_Disable_IRQ+0x48>

08004784 <I2C_IsErrorOccurred>:
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800478a:	6803      	ldr	r3, [r0, #0]
 800478c:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800478e:	f016 0610 	ands.w	r6, r6, #16
 8004792:	d07c      	beq.n	800488e <I2C_IsErrorOccurred+0x10a>
 8004794:	460d      	mov	r5, r1
 8004796:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004798:	2210      	movs	r2, #16
 800479a:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800479c:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	6998      	ldr	r0, [r3, #24]
 80047a4:	f010 0f20 	tst.w	r0, #32
 80047a8:	d130      	bne.n	800480c <I2C_IsErrorOccurred+0x88>
 80047aa:	bb7f      	cbnz	r7, 800480c <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 80047ac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80047b0:	d0f6      	beq.n	80047a0 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fd fa15 	bl	8001be0 <HAL_GetTick>
 80047b6:	eba0 0008 	sub.w	r0, r0, r8
 80047ba:	42a8      	cmp	r0, r5
 80047bc:	d801      	bhi.n	80047c2 <I2C_IsErrorOccurred+0x3e>
 80047be:	2d00      	cmp	r5, #0
 80047c0:	d1ee      	bne.n	80047a0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047c2:	6821      	ldr	r1, [r4, #0]
 80047c4:	684b      	ldr	r3, [r1, #4]
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80047ca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80047ce:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d0:	6988      	ldr	r0, [r1, #24]
 80047d2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80047d6:	d002      	beq.n	80047de <I2C_IsErrorOccurred+0x5a>
 80047d8:	b90b      	cbnz	r3, 80047de <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80047da:	2a20      	cmp	r2, #32
 80047dc:	d10e      	bne.n	80047fc <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f013 0f20 	tst.w	r3, #32
 80047e6:	d1db      	bne.n	80047a0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e8:	f7fd f9fa 	bl	8001be0 <HAL_GetTick>
 80047ec:	eba0 0008 	sub.w	r0, r0, r8
 80047f0:	2819      	cmp	r0, #25
 80047f2:	d9f4      	bls.n	80047de <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80047f4:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80047f8:	2701      	movs	r7, #1
              break;
 80047fa:	e7d1      	b.n	80047a0 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047fc:	684b      	ldr	r3, [r1, #4]
 80047fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004802:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8004804:	f7fd f9ec 	bl	8001be0 <HAL_GetTick>
 8004808:	4680      	mov	r8, r0
 800480a:	e7e8      	b.n	80047de <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800480c:	b90f      	cbnz	r7, 8004812 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	2220      	movs	r2, #32
 8004810:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004812:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8004816:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800481c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004820:	d005      	beq.n	800482e <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8004822:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800482a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800482c:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800482e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004832:	d006      	beq.n	8004842 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8004834:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800483e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8004840:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004842:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004846:	d024      	beq.n	8004892 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8004848:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004852:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8004854:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8004856:	4620      	mov	r0, r4
 8004858:	f7ff ff2e 	bl	80046b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	6853      	ldr	r3, [r2, #4]
 8004860:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004864:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004868:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004872:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004874:	4333      	orrs	r3, r6
 8004876:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004878:	2320      	movs	r3, #32
 800487a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004884:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004888:	4628      	mov	r0, r5
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800488e:	2500      	movs	r5, #0
 8004890:	e7c2      	b.n	8004818 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8004892:	2d00      	cmp	r5, #0
 8004894:	d0f8      	beq.n	8004888 <I2C_IsErrorOccurred+0x104>
 8004896:	e7de      	b.n	8004856 <I2C_IsErrorOccurred+0xd2>

08004898 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4604      	mov	r4, r0
 800489c:	460d      	mov	r5, r1
 800489e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f013 0f02 	tst.w	r3, #2
 80048a8:	d11d      	bne.n	80048e6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048aa:	4632      	mov	r2, r6
 80048ac:	4629      	mov	r1, r5
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff ff68 	bl	8004784 <I2C_IsErrorOccurred>
 80048b4:	b9c8      	cbnz	r0, 80048ea <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80048ba:	d0f1      	beq.n	80048a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048bc:	f7fd f990 	bl	8001be0 <HAL_GetTick>
 80048c0:	1b80      	subs	r0, r0, r6
 80048c2:	42a8      	cmp	r0, r5
 80048c4:	d801      	bhi.n	80048ca <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80048c6:	2d00      	cmp	r5, #0
 80048c8:	d1ea      	bne.n	80048a0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	2320      	movs	r3, #32
 80048d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	2300      	movs	r3, #0
 80048da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80048de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80048e2:	2001      	movs	r0, #1
 80048e4:	e000      	b.n	80048e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80048e6:	2000      	movs	r0, #0
}
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7fc      	b.n	80048e8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080048ee <I2C_WaitOnFlagUntilTimeout>:
{
 80048ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	4606      	mov	r6, r0
 80048f4:	4688      	mov	r8, r1
 80048f6:	4617      	mov	r7, r2
 80048f8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fa:	6834      	ldr	r4, [r6, #0]
 80048fc:	69a4      	ldr	r4, [r4, #24]
 80048fe:	ea38 0404 	bics.w	r4, r8, r4
 8004902:	bf0c      	ite	eq
 8004904:	2401      	moveq	r4, #1
 8004906:	2400      	movne	r4, #0
 8004908:	42bc      	cmp	r4, r7
 800490a:	d118      	bne.n	800493e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800490c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004910:	d0f3      	beq.n	80048fa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	f7fd f965 	bl	8001be0 <HAL_GetTick>
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	1ac0      	subs	r0, r0, r3
 800491a:	42a8      	cmp	r0, r5
 800491c:	d801      	bhi.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x34>
 800491e:	2d00      	cmp	r5, #0
 8004920:	d1eb      	bne.n	80048fa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004922:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800492a:	2320      	movs	r3, #32
 800492c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004936:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800493a:	2001      	movs	r0, #1
 800493c:	e000      	b.n	8004940 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 800493e:	2000      	movs	r0, #0
}
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004944 <I2C_RequestMemoryRead>:
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	4604      	mov	r4, r0
 800494c:	4690      	mov	r8, r2
 800494e:	461d      	mov	r5, r3
 8004950:	9e08      	ldr	r6, [sp, #32]
 8004952:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004954:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <I2C_RequestMemoryRead+0x74>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	b2ea      	uxtb	r2, r5
 800495c:	f7ff febd 	bl	80046da <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004960:	463a      	mov	r2, r7
 8004962:	4631      	mov	r1, r6
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ff97 	bl	8004898 <I2C_WaitOnTXISFlagUntilTimeout>
 800496a:	b9f8      	cbnz	r0, 80049ac <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496c:	2d01      	cmp	r5, #1
 800496e:	d10e      	bne.n	800498e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	fa5f f288 	uxtb.w	r2, r8
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	9700      	str	r7, [sp, #0]
 800497a:	4633      	mov	r3, r6
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	; 0x40
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff ffb4 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004986:	b9a8      	cbnz	r0, 80049b4 <I2C_RequestMemoryRead+0x70>
}
 8004988:	b002      	add	sp, #8
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	463a      	mov	r2, r7
 8004998:	4631      	mov	r1, r6
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff ff7c 	bl	8004898 <I2C_WaitOnTXISFlagUntilTimeout>
 80049a0:	b930      	cbnz	r0, 80049b0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	fa5f f288 	uxtb.w	r2, r8
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
 80049aa:	e7e5      	b.n	8004978 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80049ac:	2001      	movs	r0, #1
 80049ae:	e7eb      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80049b0:	2001      	movs	r0, #1
 80049b2:	e7e9      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80049b4:	2001      	movs	r0, #1
 80049b6:	e7e7      	b.n	8004988 <I2C_RequestMemoryRead+0x44>
 80049b8:	80002000 	.word	0x80002000

080049bc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4605      	mov	r5, r0
 80049c0:	460c      	mov	r4, r1
 80049c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f013 0f20 	tst.w	r3, #32
 80049cc:	d11a      	bne.n	8004a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ce:	4632      	mov	r2, r6
 80049d0:	4621      	mov	r1, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff fed6 	bl	8004784 <I2C_IsErrorOccurred>
 80049d8:	b9b0      	cbnz	r0, 8004a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7fd f901 	bl	8001be0 <HAL_GetTick>
 80049de:	1b80      	subs	r0, r0, r6
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d801      	bhi.n	80049e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80049e4:	2c00      	cmp	r4, #0
 80049e6:	d1ed      	bne.n	80049c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80049ea:	f043 0320 	orr.w	r3, r3, #32
 80049ee:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	2320      	movs	r3, #32
 80049f2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80049fc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004a00:	2001      	movs	r0, #1
}
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e7fc      	b.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7fa      	b.n	8004a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f013 0f04 	tst.w	r3, #4
 8004a1c:	d149      	bne.n	8004ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	4632      	mov	r2, r6
 8004a20:	4629      	mov	r1, r5
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff feae 	bl	8004784 <I2C_IsErrorOccurred>
 8004a28:	4601      	mov	r1, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d143      	bne.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	f012 0f20 	tst.w	r2, #32
 8004a36:	d113      	bne.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7fd f8d2 	bl	8001be0 <HAL_GetTick>
 8004a3c:	1b80      	subs	r0, r0, r6
 8004a3e:	42a8      	cmp	r0, r5
 8004a40:	d801      	bhi.n	8004a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	d1e6      	bne.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a48:	f043 0320 	orr.w	r3, r3, #32
 8004a4c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	2320      	movs	r3, #32
 8004a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004a54:	2300      	movs	r3, #0
 8004a56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004a5a:	2101      	movs	r1, #1
}
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	f012 0f04 	tst.w	r2, #4
 8004a66:	d002      	beq.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004a68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d1f6      	bne.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	f012 0f10 	tst.w	r2, #16
 8004a74:	d01a      	beq.n	8004aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a76:	2210      	movs	r2, #16
 8004a78:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	2220      	movs	r2, #32
 8004a82:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004a84:	6821      	ldr	r1, [r4, #0]
 8004a86:	684b      	ldr	r3, [r1, #4]
 8004a88:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004a8c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004a90:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004aa4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	e7d7      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	6463      	str	r3, [r4, #68]	; 0x44
 8004ab0:	e7e5      	b.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	e7d2      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	e7d0      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08004aba <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d059      	beq.n	8004b72 <HAL_I2C_Init+0xb8>
{
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ac2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d043      	beq.n	8004b52 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aca:	2324      	movs	r3, #36	; 0x24
 8004acc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ada:	6863      	ldr	r3, [r4, #4]
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004ae2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ae4:	6822      	ldr	r2, [r4, #0]
 8004ae6:	6893      	ldr	r3, [r2, #8]
 8004ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aec:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aee:	68e3      	ldr	r3, [r4, #12]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d033      	beq.n	8004b5c <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004afc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d031      	beq.n	8004b68 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6853      	ldr	r3, [r2, #4]
 8004b08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b10:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	68d3      	ldr	r3, [r2, #12]
 8004b16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b1a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	6962      	ldr	r2, [r4, #20]
 8004b20:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b22:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b2a:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b2c:	69e3      	ldr	r3, [r4, #28]
 8004b2e:	6a21      	ldr	r1, [r4, #32]
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	430b      	orrs	r3, r1
 8004b34:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b40:	2000      	movs	r0, #0
 8004b42:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	2320      	movs	r3, #32
 8004b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b50:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b56:	f7fc fda1 	bl	800169c <HAL_I2C_MspInit>
 8004b5a:	e7b6      	b.n	8004aca <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b64:	6093      	str	r3, [r2, #8]
 8004b66:	e7ca      	b.n	8004afe <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6e:	605a      	str	r2, [r3, #4]
 8004b70:	e7c8      	b.n	8004b04 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004b72:	2001      	movs	r0, #1
}
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_I2C_Master_Transmit>:
{
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	460f      	mov	r7, r1
 8004b80:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b82:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004b86:	b2c9      	uxtb	r1, r1
 8004b88:	2920      	cmp	r1, #32
 8004b8a:	f040 80a3 	bne.w	8004cd4 <HAL_I2C_Master_Transmit+0x15c>
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4690      	mov	r8, r2
 8004b92:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004b94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f000 809f 	beq.w	8004cdc <HAL_I2C_Master_Transmit+0x164>
 8004b9e:	f04f 0a01 	mov.w	sl, #1
 8004ba2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004ba6:	f7fd f81b 	bl	8001be0 <HAL_GetTick>
 8004baa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bac:	9000      	str	r0, [sp, #0]
 8004bae:	2319      	movs	r3, #25
 8004bb0:	4652      	mov	r2, sl
 8004bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff fe99 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f040 808f 	bne.w	8004ce0 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc2:	2321      	movs	r3, #33	; 0x21
 8004bc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004bd2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bd6:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bda:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2bff      	cmp	r3, #255	; 0xff
 8004be2:	d90a      	bls.n	8004bfa <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004be8:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_I2C_Master_Transmit+0x178>)
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff fd71 	bl	80046da <I2C_TransferConfig>
 8004bf8:	e018      	b.n	8004c2c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004bfa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_I2C_Master_Transmit+0x178>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f7ff fd64 	bl	80046da <I2C_TransferConfig>
 8004c12:	e00b      	b.n	8004c2c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8004c14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c16:	b292      	uxth	r2, r2
 8004c18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	4639      	mov	r1, r7
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7ff fd57 	bl	80046da <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d033      	beq.n	8004c9c <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	462a      	mov	r2, r5
 8004c36:	4631      	mov	r1, r6
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f7ff fe2d 	bl	8004898 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d150      	bne.n	8004ce4 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004c50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004c5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004c64:	b292      	uxth	r2, r2
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d0e0      	beq.n	8004c2c <HAL_I2C_Master_Transmit+0xb4>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1de      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c6e:	9500      	str	r5, [sp, #0]
 8004c70:	4633      	mov	r3, r6
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7ff fe39 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	bba0      	cbnz	r0, 8004ce8 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2bff      	cmp	r3, #255	; 0xff
 8004c84:	d9c6      	bls.n	8004c14 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c86:	22ff      	movs	r2, #255	; 0xff
 8004c88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c92:	4639      	mov	r1, r7
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff fd20 	bl	80046da <I2C_TransferConfig>
 8004c9a:	e7c7      	b.n	8004c2c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f7ff fe8b 	bl	80049bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ca6:	bb08      	cbnz	r0, 8004cec <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004cae:	6821      	ldr	r1, [r4, #0]
 8004cb0:	684b      	ldr	r3, [r1, #4]
 8004cb2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004cb6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004cba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004cce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8004cd4:	2002      	movs	r0, #2
}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004cdc:	2002      	movs	r0, #2
 8004cde:	e7fa      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	e7f8      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7f6      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e7f4      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8004cec:	2001      	movs	r0, #1
 8004cee:	e7f2      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x15e>
 8004cf0:	80002000 	.word	0x80002000

08004cf4 <HAL_I2C_Master_Receive>:
{
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	460f      	mov	r7, r1
 8004cfc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004d02:	b2c9      	uxtb	r1, r1
 8004d04:	2920      	cmp	r1, #32
 8004d06:	f040 80a2 	bne.w	8004e4e <HAL_I2C_Master_Receive+0x15a>
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4690      	mov	r8, r2
 8004d0e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8004d10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f000 809e 	beq.w	8004e56 <HAL_I2C_Master_Receive+0x162>
 8004d1a:	f04f 0a01 	mov.w	sl, #1
 8004d1e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004d22:	f7fc ff5d 	bl	8001be0 <HAL_GetTick>
 8004d26:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d28:	9000      	str	r0, [sp, #0]
 8004d2a:	2319      	movs	r3, #25
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff fddb 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	f040 808e 	bne.w	8004e5a <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d3e:	2322      	movs	r3, #34	; 0x22
 8004d40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d44:	2310      	movs	r3, #16
 8004d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004d4e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d52:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d56:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2bff      	cmp	r3, #255	; 0xff
 8004d5e:	d90a      	bls.n	8004d76 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_I2C_Master_Receive+0x178>)
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f7ff fcb3 	bl	80046da <I2C_TransferConfig>
 8004d74:	e018      	b.n	8004da8 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8004d76:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_I2C_Master_Receive+0x178>)
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	4639      	mov	r1, r7
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff fca6 	bl	80046da <I2C_TransferConfig>
 8004d8e:	e00b      	b.n	8004da8 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8004d90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004d92:	b292      	uxth	r2, r2
 8004d94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	4639      	mov	r1, r7
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7ff fc99 	bl	80046da <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004da8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d032      	beq.n	8004e16 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	462a      	mov	r2, r5
 8004db2:	4631      	mov	r1, r6
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7ff fe29 	bl	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d14f      	bne.n	8004e5e <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dc8:	3301      	adds	r3, #1
 8004dca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004dcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004dce:	3a01      	subs	r2, #1
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0e0      	beq.n	8004da8 <HAL_I2C_Master_Receive+0xb4>
 8004de6:	2a00      	cmp	r2, #0
 8004de8:	d1de      	bne.n	8004da8 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dea:	9500      	str	r5, [sp, #0]
 8004dec:	4633      	mov	r3, r6
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff fd7c 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004df6:	bba0      	cbnz	r0, 8004e62 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2bff      	cmp	r3, #255	; 0xff
 8004dfe:	d9c7      	bls.n	8004d90 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e00:	22ff      	movs	r2, #255	; 0xff
 8004e02:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff fc63 	bl	80046da <I2C_TransferConfig>
 8004e14:	e7c8      	b.n	8004da8 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e16:	462a      	mov	r2, r5
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff fdce 	bl	80049bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e20:	bb08      	cbnz	r0, 8004e66 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	2220      	movs	r2, #32
 8004e26:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004e28:	6821      	ldr	r1, [r4, #0]
 8004e2a:	684b      	ldr	r3, [r1, #4]
 8004e2c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004e30:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004e34:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004e48:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8004e4c:	e000      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8004e4e:	2002      	movs	r0, #2
}
 8004e50:	b002      	add	sp, #8
 8004e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8004e56:	2002      	movs	r0, #2
 8004e58:	e7fa      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	e7f8      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8004e5e:	2001      	movs	r0, #1
 8004e60:	e7f6      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8004e62:	2001      	movs	r0, #1
 8004e64:	e7f4      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8004e66:	2001      	movs	r0, #1
 8004e68:	e7f2      	b.n	8004e50 <HAL_I2C_Master_Receive+0x15c>
 8004e6a:	bf00      	nop
 8004e6c:	80002400 	.word	0x80002400

08004e70 <HAL_I2C_Mem_Read>:
{
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	b083      	sub	sp, #12
 8004e76:	460e      	mov	r6, r1
 8004e78:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004e7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e7e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8004e82:	b2c9      	uxtb	r1, r1
 8004e84:	2920      	cmp	r1, #32
 8004e86:	f040 80bc 	bne.w	8005002 <HAL_I2C_Mem_Read+0x192>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4690      	mov	r8, r2
 8004e8e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e92:	b1cb      	cbz	r3, 8004ec8 <HAL_I2C_Mem_Read+0x58>
 8004e94:	f1ba 0f00 	cmp.w	sl, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004e9a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	f000 80b3 	beq.w	800500a <HAL_I2C_Mem_Read+0x19a>
 8004ea4:	f04f 0b01 	mov.w	fp, #1
 8004ea8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004eac:	f7fc fe98 	bl	8001be0 <HAL_GetTick>
 8004eb0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eb2:	9000      	str	r0, [sp, #0]
 8004eb4:	2319      	movs	r3, #25
 8004eb6:	465a      	mov	r2, fp
 8004eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff fd16 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	b130      	cbz	r0, 8004ed2 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	e09d      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ecc:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8004ece:	2001      	movs	r0, #1
 8004ed0:	e098      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ed2:	2322      	movs	r3, #34	; 0x22
 8004ed4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ee4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ee6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004eea:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eec:	9701      	str	r7, [sp, #4]
 8004eee:	9500      	str	r5, [sp, #0]
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	4642      	mov	r2, r8
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fd24 	bl	8004944 <I2C_RequestMemoryRead>
 8004efc:	b970      	cbnz	r0, 8004f1c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004efe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2bff      	cmp	r3, #255	; 0xff
 8004f04:	d90f      	bls.n	8004f26 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f0a:	4b44      	ldr	r3, [pc, #272]	; (800501c <HAL_I2C_Mem_Read+0x1ac>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f12:	4631      	mov	r1, r6
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff fbe0 	bl	80046da <I2C_TransferConfig>
 8004f1a:	e021      	b.n	8004f60 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004f22:	4658      	mov	r0, fp
 8004f24:	e06e      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8004f26:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f2c:	4b3b      	ldr	r3, [pc, #236]	; (800501c <HAL_I2C_Mem_Read+0x1ac>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4631      	mov	r1, r6
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff fbce 	bl	80046da <I2C_TransferConfig>
 8004f3e:	e00f      	b.n	8004f60 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004f40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f42:	b292      	uxth	r2, r2
 8004f44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	4631      	mov	r1, r6
 8004f52:	4620      	mov	r0, r4
 8004f54:	f7ff fbc1 	bl	80046da <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004f58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d034      	beq.n	8004fca <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f60:	9700      	str	r7, [sp, #0]
 8004f62:	462b      	mov	r3, r5
 8004f64:	2200      	movs	r2, #0
 8004f66:	2104      	movs	r1, #4
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7ff fcc0 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	d14d      	bne.n	800500e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f78:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004f80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004f82:	3a01      	subs	r2, #1
 8004f84:	b292      	uxth	r2, r2
 8004f86:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004f88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0de      	beq.n	8004f58 <HAL_I2C_Mem_Read+0xe8>
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d1dc      	bne.n	8004f58 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f9e:	9700      	str	r7, [sp, #0]
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff fca2 	bl	80048ee <I2C_WaitOnFlagUntilTimeout>
 8004faa:	bb90      	cbnz	r0, 8005012 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2bff      	cmp	r3, #255	; 0xff
 8004fb2:	d9c5      	bls.n	8004f40 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff fb89 	bl	80046da <I2C_TransferConfig>
 8004fc8:	e7c6      	b.n	8004f58 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fca:	463a      	mov	r2, r7
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7ff fcf4 	bl	80049bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fd4:	b9f8      	cbnz	r0, 8005016 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004fdc:	6821      	ldr	r1, [r4, #0]
 8004fde:	684b      	ldr	r3, [r1, #4]
 8004fe0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004fe4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004fe8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004ffc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005000:	e000      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8005002:	2002      	movs	r0, #2
}
 8005004:	b003      	add	sp, #12
 8005006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800500a:	2002      	movs	r0, #2
 800500c:	e7fa      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
 8005010:	e7f8      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8005012:	2001      	movs	r0, #1
 8005014:	e7f6      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8005016:	2001      	movs	r0, #1
 8005018:	e7f4      	b.n	8005004 <HAL_I2C_Mem_Read+0x194>
 800501a:	bf00      	nop
 800501c:	80002400 	.word	0x80002400

08005020 <HAL_I2C_EV_IRQHandler>:
{
 8005020:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005022:	6803      	ldr	r3, [r0, #0]
 8005024:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005026:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005028:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800502a:	b103      	cbz	r3, 800502e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800502c:	4798      	blx	r3
}
 800502e:	bd08      	pop	{r3, pc}

08005030 <HAL_I2C_SlaveTxCpltCallback>:
}
 8005030:	4770      	bx	lr

08005032 <HAL_I2C_SlaveRxCpltCallback>:
}
 8005032:	4770      	bx	lr

08005034 <I2C_ITSlaveSeqCplt>:
{
 8005034:	b510      	push	{r4, lr}
 8005036:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005038:	6803      	ldr	r3, [r0, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	2100      	movs	r1, #0
 800503e:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005042:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005046:	d00e      	beq.n	8005066 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800504e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005050:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b29      	cmp	r3, #41	; 0x29
 8005058:	d00d      	beq.n	8005076 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800505a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b2a      	cmp	r3, #42	; 0x2a
 8005062:	d018      	beq.n	8005096 <I2C_ITSlaveSeqCplt+0x62>
}
 8005064:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005066:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800506a:	d0f1      	beq.n	8005050 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e7ec      	b.n	8005050 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005076:	2328      	movs	r3, #40	; 0x28
 8005078:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800507c:	2321      	movs	r3, #33	; 0x21
 800507e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005080:	2101      	movs	r1, #1
 8005082:	4620      	mov	r0, r4
 8005084:	f7ff fb46 	bl	8004714 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005088:	2300      	movs	r3, #0
 800508a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff ffce 	bl	8005030 <HAL_I2C_SlaveTxCpltCallback>
 8005094:	e7e6      	b.n	8005064 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005096:	2328      	movs	r3, #40	; 0x28
 8005098:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800509c:	2322      	movs	r3, #34	; 0x22
 800509e:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80050a0:	2102      	movs	r1, #2
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff fb36 	bl	8004714 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80050a8:	2300      	movs	r3, #0
 80050aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff ffbf 	bl	8005032 <HAL_I2C_SlaveRxCpltCallback>
}
 80050b4:	e7d6      	b.n	8005064 <I2C_ITSlaveSeqCplt+0x30>

080050b6 <HAL_I2C_AddrCallback>:
}
 80050b6:	4770      	bx	lr

080050b8 <I2C_ITAddrCplt>:
{
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050c4:	2b28      	cmp	r3, #40	; 0x28
 80050c6:	d006      	beq.n	80050d6 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050c8:	6803      	ldr	r3, [r0, #0]
 80050ca:	2208      	movs	r2, #8
 80050cc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80050ce:	2300      	movs	r3, #0
 80050d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80050d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80050d6:	6803      	ldr	r3, [r0, #0]
 80050d8:	699e      	ldr	r6, [r3, #24]
 80050da:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	0c12      	lsrs	r2, r2, #16
 80050e2:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80050ec:	68df      	ldr	r7, [r3, #12]
 80050ee:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050f2:	68c1      	ldr	r1, [r0, #12]
 80050f4:	2902      	cmp	r1, #2
 80050f6:	d122      	bne.n	800513e <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80050f8:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80050fc:	f015 0f06 	tst.w	r5, #6
 8005100:	d110      	bne.n	8005124 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8005102:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005104:	3101      	adds	r1, #1
 8005106:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005108:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800510a:	2902      	cmp	r1, #2
 800510c:	d1e2      	bne.n	80050d4 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800510e:	2100      	movs	r1, #0
 8005110:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005112:	2008      	movs	r0, #8
 8005114:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005116:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800511a:	4631      	mov	r1, r6
 800511c:	4620      	mov	r0, r4
 800511e:	f7ff ffca 	bl	80050b6 <HAL_I2C_AddrCallback>
 8005122:	e7d7      	b.n	80050d4 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005128:	f7ff faf4 	bl	8004714 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800512c:	2300      	movs	r3, #0
 800512e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005132:	463a      	mov	r2, r7
 8005134:	4631      	mov	r1, r6
 8005136:	4620      	mov	r0, r4
 8005138:	f7ff ffbd 	bl	80050b6 <HAL_I2C_AddrCallback>
 800513c:	e7ca      	b.n	80050d4 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800513e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005142:	f7ff fae7 	bl	8004714 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005146:	2300      	movs	r3, #0
 8005148:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800514c:	462a      	mov	r2, r5
 800514e:	4631      	mov	r1, r6
 8005150:	4620      	mov	r0, r4
 8005152:	f7ff ffb0 	bl	80050b6 <HAL_I2C_AddrCallback>
 8005156:	e7bd      	b.n	80050d4 <I2C_ITAddrCplt+0x1c>

08005158 <HAL_I2C_ListenCpltCallback>:
}
 8005158:	4770      	bx	lr
	...

0800515c <I2C_ITListenCplt>:
{
 800515c:	b510      	push	{r4, lr}
 800515e:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <I2C_ITListenCplt+0x64>)
 8005162:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	2300      	movs	r3, #0
 8005166:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005168:	2220      	movs	r2, #32
 800516a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005172:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005174:	f011 0f04 	tst.w	r1, #4
 8005178:	d013      	beq.n	80051a2 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800517a:	6803      	ldr	r3, [r0, #0]
 800517c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005182:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005188:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800518a:	b153      	cbz	r3, 80051a2 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 800518c:	3b01      	subs	r3, #1
 800518e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8005190:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800519a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff fab4 	bl	8004714 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	2210      	movs	r2, #16
 80051b0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80051b2:	2300      	movs	r3, #0
 80051b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff ffcd 	bl	8005158 <HAL_I2C_ListenCpltCallback>
}
 80051be:	bd10      	pop	{r4, pc}
 80051c0:	ffff0000 	.word	0xffff0000

080051c4 <HAL_I2C_ErrorCallback>:
}
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2C_AbortCpltCallback>:
}
 80051c6:	4770      	bx	lr

080051c8 <I2C_TreatErrorCallback>:
{
 80051c8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d006      	beq.n	80051e2 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80051dc:	f7ff fff2 	bl	80051c4 <HAL_I2C_ErrorCallback>
}
 80051e0:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	2320      	movs	r3, #32
 80051e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80051ec:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80051f0:	f7ff ffe9 	bl	80051c6 <HAL_I2C_AbortCpltCallback>
 80051f4:	e7f4      	b.n	80051e0 <I2C_TreatErrorCallback+0x18>
	...

080051f8 <I2C_ITError>:
{
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005200:	2200      	movs	r2, #0
 8005202:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005206:	483b      	ldr	r0, [pc, #236]	; (80052f4 <I2C_ITError+0xfc>)
 8005208:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800520a:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800520c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800520e:	430a      	orrs	r2, r1
 8005210:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005212:	3b28      	subs	r3, #40	; 0x28
 8005214:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005216:	2b02      	cmp	r3, #2
 8005218:	d819      	bhi.n	800524e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800521a:	2103      	movs	r1, #3
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff fa79 	bl	8004714 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005222:	2328      	movs	r3, #40	; 0x28
 8005224:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005228:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <I2C_ITError+0x100>)
 800522a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 800522c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800522e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005230:	b11a      	cbz	r2, 800523a <I2C_ITError+0x42>
 8005232:	2b11      	cmp	r3, #17
 8005234:	d01b      	beq.n	800526e <I2C_ITError+0x76>
 8005236:	2b21      	cmp	r3, #33	; 0x21
 8005238:	d019      	beq.n	800526e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800523a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800523c:	b11a      	cbz	r2, 8005246 <I2C_ITError+0x4e>
 800523e:	2b12      	cmp	r3, #18
 8005240:	d036      	beq.n	80052b0 <I2C_ITError+0xb8>
 8005242:	2b22      	cmp	r3, #34	; 0x22
 8005244:	d034      	beq.n	80052b0 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff ffbe 	bl	80051c8 <I2C_TreatErrorCallback>
}
 800524c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800524e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005252:	4620      	mov	r0, r4
 8005254:	f7ff fa5e 	bl	8004714 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005258:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b60      	cmp	r3, #96	; 0x60
 8005260:	d002      	beq.n	8005268 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8005262:	2320      	movs	r3, #32
 8005264:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	6363      	str	r3, [r4, #52]	; 0x34
 800526c:	e7de      	b.n	800522c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005276:	d003      	beq.n	8005280 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800527e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005280:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005282:	f7fe ff49 	bl	8004118 <HAL_DMA_GetState>
 8005286:	2801      	cmp	r0, #1
 8005288:	d00e      	beq.n	80052a8 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800528a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800528c:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <I2C_ITError+0x104>)
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8005290:	2300      	movs	r3, #0
 8005292:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005296:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005298:	f7fe fe90 	bl	8003fbc <HAL_DMA_Abort_IT>
 800529c:	2800      	cmp	r0, #0
 800529e:	d0d5      	beq.n	800524c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80052a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052a4:	4798      	blx	r3
 80052a6:	e7d1      	b.n	800524c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff ff8d 	bl	80051c8 <I2C_TreatErrorCallback>
 80052ae:	e7cd      	b.n	800524c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80052b8:	d003      	beq.n	80052c2 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052c0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052c4:	f7fe ff28 	bl	8004118 <HAL_DMA_GetState>
 80052c8:	2801      	cmp	r0, #1
 80052ca:	d00e      	beq.n	80052ea <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052ce:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <I2C_ITError+0x104>)
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052da:	f7fe fe6f 	bl	8003fbc <HAL_DMA_Abort_IT>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d0b4      	beq.n	800524c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80052e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80052e6:	4798      	blx	r3
 80052e8:	e7b0      	b.n	800524c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff ff6c 	bl	80051c8 <I2C_TreatErrorCallback>
 80052f0:	e7ac      	b.n	800524c <I2C_ITError+0x54>
 80052f2:	bf00      	nop
 80052f4:	ffff0000 	.word	0xffff0000
 80052f8:	08005469 	.word	0x08005469
 80052fc:	08005621 	.word	0x08005621

08005300 <I2C_ITSlaveCplt>:
{
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4604      	mov	r4, r0
 8005304:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005306:	6802      	ldr	r2, [r0, #0]
 8005308:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800530a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800530e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005310:	2120      	movs	r1, #32
 8005312:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005314:	2b21      	cmp	r3, #33	; 0x21
 8005316:	d00d      	beq.n	8005334 <I2C_ITSlaveCplt+0x34>
 8005318:	2b29      	cmp	r3, #41	; 0x29
 800531a:	d00b      	beq.n	8005334 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800531c:	2b22      	cmp	r3, #34	; 0x22
 800531e:	d001      	beq.n	8005324 <I2C_ITSlaveCplt+0x24>
 8005320:	2b2a      	cmp	r3, #42	; 0x2a
 8005322:	d10e      	bne.n	8005342 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005324:	f248 0102 	movw	r1, #32770	; 0x8002
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff f9f3 	bl	8004714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800532e:	2322      	movs	r3, #34	; 0x22
 8005330:	6323      	str	r3, [r4, #48]	; 0x30
 8005332:	e006      	b.n	8005342 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005334:	f248 0101 	movw	r1, #32769	; 0x8001
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff f9eb 	bl	8004714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800533e:	2321      	movs	r3, #33	; 0x21
 8005340:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	6853      	ldr	r3, [r2, #4]
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	6853      	ldr	r3, [r2, #4]
 8005350:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005354:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005358:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005362:	4620      	mov	r0, r4
 8005364:	f7ff f9a8 	bl	80046b8 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005368:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800536c:	d040      	beq.n	80053f0 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8005378:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800537a:	b11b      	cbz	r3, 8005384 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	b29b      	uxth	r3, r3
 8005382:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005384:	f015 0f04 	tst.w	r5, #4
 8005388:	d011      	beq.n	80053ae <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800538a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005398:	3301      	adds	r3, #1
 800539a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800539c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800539e:	b133      	cbz	r3, 80053ae <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80053a0:	3b01      	subs	r3, #1
 80053a2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80053ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b11b      	cbz	r3, 80053bc <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053bc:	2300      	movs	r3, #0
 80053be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80053c2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053c6:	bb1b      	cbnz	r3, 8005410 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ce:	d12d      	bne.n	800542c <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b22      	cmp	r3, #34	; 0x22
 80053d8:	d038      	beq.n	800544c <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 80053da:	2320      	movs	r3, #32
 80053dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff fe21 	bl	8005030 <HAL_I2C_SlaveTxCpltCallback>
}
 80053ee:	e02c      	b.n	800544a <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053f0:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80053f4:	d0c6      	beq.n	8005384 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	6813      	ldr	r3, [r2, #0]
 80053fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053fe:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8005400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0be      	beq.n	8005384 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	b29b      	uxth	r3, r3
 800540c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800540e:	e7b9      	b.n	8005384 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005410:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff fef0 	bl	80051f8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005418:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b28      	cmp	r3, #40	; 0x28
 8005420:	d113      	bne.n	800544a <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005422:	4629      	mov	r1, r5
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff fe99 	bl	800515c <I2C_ITListenCplt>
 800542a:	e00e      	b.n	800544a <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff fe01 	bl	8005034 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <I2C_ITSlaveCplt+0x164>)
 8005434:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005436:	2320      	movs	r3, #32
 8005438:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800543c:	2300      	movs	r3, #0
 800543e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005440:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff fe87 	bl	8005158 <HAL_I2C_ListenCpltCallback>
}
 800544a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	2320      	movs	r3, #32
 800544e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005456:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800545a:	4620      	mov	r0, r4
 800545c:	f7ff fde9 	bl	8005032 <HAL_I2C_SlaveRxCpltCallback>
 8005460:	e7f3      	b.n	800544a <I2C_ITSlaveCplt+0x14a>
 8005462:	bf00      	nop
 8005464:	ffff0000 	.word	0xffff0000

08005468 <I2C_Slave_ISR_IT>:
{
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800546a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800546c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005470:	2b01      	cmp	r3, #1
 8005472:	f000 809e 	beq.w	80055b2 <I2C_Slave_ISR_IT+0x14a>
 8005476:	4604      	mov	r4, r0
 8005478:	460d      	mov	r5, r1
 800547a:	4616      	mov	r6, r2
 800547c:	2301      	movs	r3, #1
 800547e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005482:	f011 0f20 	tst.w	r1, #32
 8005486:	d002      	beq.n	800548e <I2C_Slave_ISR_IT+0x26>
 8005488:	f012 0f20 	tst.w	r2, #32
 800548c:	d119      	bne.n	80054c2 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800548e:	f015 0f10 	tst.w	r5, #16
 8005492:	d03e      	beq.n	8005512 <I2C_Slave_ISR_IT+0xaa>
 8005494:	f016 0f10 	tst.w	r6, #16
 8005498:	d03b      	beq.n	8005512 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 800549a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	bb43      	cbnz	r3, 80054f2 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b28      	cmp	r3, #40	; 0x28
 80054a8:	d00e      	beq.n	80054c8 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b29      	cmp	r3, #41	; 0x29
 80054b2:	d011      	beq.n	80054d8 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	2210      	movs	r2, #16
 80054b8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80054ba:	2000      	movs	r0, #0
 80054bc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80054c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80054c2:	f7ff ff1d 	bl	8005300 <I2C_ITSlaveCplt>
 80054c6:	e7e2      	b.n	800548e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054c8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80054cc:	d1ed      	bne.n	80054aa <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80054ce:	4629      	mov	r1, r5
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7ff fe43 	bl	800515c <I2C_ITListenCplt>
 80054d6:	e7f0      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054d8:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80054dc:	d0ea      	beq.n	80054b4 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	2210      	movs	r2, #16
 80054e2:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80054e4:	4620      	mov	r0, r4
 80054e6:	f7ff f8e7 	bl	80046b8 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80054ea:	4620      	mov	r0, r4
 80054ec:	f7ff fda2 	bl	8005034 <I2C_ITSlaveSeqCplt>
 80054f0:	e7e3      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	2210      	movs	r2, #16
 80054f6:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054fa:	f043 0304 	orr.w	r3, r3, #4
 80054fe:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005500:	b117      	cbz	r7, 8005508 <I2C_Slave_ISR_IT+0xa0>
 8005502:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005506:	d1d8      	bne.n	80054ba <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005508:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff fe74 	bl	80051f8 <I2C_ITError>
 8005510:	e7d3      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005512:	f015 0f04 	tst.w	r5, #4
 8005516:	d01f      	beq.n	8005558 <I2C_Slave_ISR_IT+0xf0>
 8005518:	f016 0f04 	tst.w	r6, #4
 800551c:	d01c      	beq.n	8005558 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800551e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	b173      	cbz	r3, 8005542 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800552c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005532:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005534:	3b01      	subs	r3, #1
 8005536:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1b7      	bne.n	80054ba <I2C_Slave_ISR_IT+0x52>
 800554a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800554e:	d0b4      	beq.n	80054ba <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005550:	4620      	mov	r0, r4
 8005552:	f7ff fd6f 	bl	8005034 <I2C_ITSlaveSeqCplt>
 8005556:	e7b0      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005558:	f015 0f08 	tst.w	r5, #8
 800555c:	d002      	beq.n	8005564 <I2C_Slave_ISR_IT+0xfc>
 800555e:	f016 0f08 	tst.w	r6, #8
 8005562:	d118      	bne.n	8005596 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005564:	f015 0f02 	tst.w	r5, #2
 8005568:	d0a7      	beq.n	80054ba <I2C_Slave_ISR_IT+0x52>
 800556a:	f016 0f02 	tst.w	r6, #2
 800556e:	d0a4      	beq.n	80054ba <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8005570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	b1a3      	cbz	r3, 80055a0 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005576:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	7812      	ldrb	r2, [r2, #0]
 800557c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800557e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005580:	3301      	adds	r3, #1
 8005582:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29b      	uxth	r3, r3
 800558c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800558e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005590:	3b01      	subs	r3, #1
 8005592:	8523      	strh	r3, [r4, #40]	; 0x28
 8005594:	e791      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005596:	4629      	mov	r1, r5
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff fd8d 	bl	80050b8 <I2C_ITAddrCplt>
 800559e:	e78c      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80055a0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80055a4:	d001      	beq.n	80055aa <I2C_Slave_ISR_IT+0x142>
 80055a6:	2f00      	cmp	r7, #0
 80055a8:	d187      	bne.n	80054ba <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff fd42 	bl	8005034 <I2C_ITSlaveSeqCplt>
 80055b0:	e783      	b.n	80054ba <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80055b2:	2002      	movs	r0, #2
 80055b4:	e784      	b.n	80054c0 <I2C_Slave_ISR_IT+0x58>

080055b6 <HAL_I2C_ER_IRQHandler>:
{
 80055b6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80055b8:	6802      	ldr	r2, [r0, #0]
 80055ba:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80055bc:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80055be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055c2:	d009      	beq.n	80055d8 <HAL_I2C_ER_IRQHandler+0x22>
 80055c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055c8:	d006      	beq.n	80055d8 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80055ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80055cc:	f044 0401 	orr.w	r4, r4, #1
 80055d0:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055d2:	f44f 7480 	mov.w	r4, #256	; 0x100
 80055d6:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80055d8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80055dc:	d00a      	beq.n	80055f4 <HAL_I2C_ER_IRQHandler+0x3e>
 80055de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055e2:	d007      	beq.n	80055f4 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80055e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055e6:	f042 0208 	orr.w	r2, r2, #8
 80055ea:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055ec:	6802      	ldr	r2, [r0, #0]
 80055ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80055f2:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80055f4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80055f8:	d00a      	beq.n	8005610 <HAL_I2C_ER_IRQHandler+0x5a>
 80055fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80055fe:	d007      	beq.n	8005610 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005600:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005608:	6803      	ldr	r3, [r0, #0]
 800560a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8005610:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005612:	f011 0f0b 	tst.w	r1, #11
 8005616:	d100      	bne.n	800561a <HAL_I2C_ER_IRQHandler+0x64>
}
 8005618:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800561a:	f7ff fded 	bl	80051f8 <I2C_ITError>
}
 800561e:	e7fb      	b.n	8005618 <HAL_I2C_ER_IRQHandler+0x62>

08005620 <I2C_DMAAbort>:
{
 8005620:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005622:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 8005624:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005626:	b10b      	cbz	r3, 800562c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 800562c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800562e:	b10b      	cbz	r3, 8005634 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005630:	2200      	movs	r2, #0
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 8005634:	f7ff fdc8 	bl	80051c8 <I2C_TreatErrorCallback>
}
 8005638:	bd08      	pop	{r3, pc}

0800563a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800563a:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800563c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	2a20      	cmp	r2, #32
 8005644:	d123      	bne.n	800568e <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005646:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800564a:	2a01      	cmp	r2, #1
 800564c:	d021      	beq.n	8005692 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800564e:	2201      	movs	r2, #1
 8005650:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005654:	2224      	movs	r2, #36	; 0x24
 8005656:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6802      	ldr	r2, [r0, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	6802      	ldr	r2, [r0, #0]
 8005668:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800566c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	6802      	ldr	r2, [r0, #0]
 8005672:	4311      	orrs	r1, r2
 8005674:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	680a      	ldr	r2, [r1, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005680:	2220      	movs	r2, #32
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	2000      	movs	r0, #0
 8005688:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800568c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800568e:	2002      	movs	r0, #2
 8005690:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005692:	2002      	movs	r0, #2
  }
}
 8005694:	4770      	bx	lr

08005696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005696:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005698:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	2a20      	cmp	r2, #32
 80056a0:	d121      	bne.n	80056e6 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80056a6:	2a01      	cmp	r2, #1
 80056a8:	d01f      	beq.n	80056ea <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80056aa:	2201      	movs	r2, #1
 80056ac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b0:	2224      	movs	r2, #36	; 0x24
 80056b2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056b6:	6800      	ldr	r0, [r0, #0]
 80056b8:	6802      	ldr	r2, [r0, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056c4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056cc:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	680a      	ldr	r2, [r1, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	2000      	movs	r0, #0
 80056e0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80056e4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2002      	movs	r0, #2
 80056e8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80056ea:	2002      	movs	r0, #2
  }
}
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f0:	4a02      	ldr	r2, [pc, #8]	; (80056fc <HAL_PWR_EnableBkUpAccess+0xc>)
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]
}
 80056fa:	4770      	bx	lr
 80056fc:	58000400 	.word	0x58000400

08005700 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005700:	b510      	push	{r4, lr}
 8005702:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005704:	b9a0      	cbnz	r0, 8005730 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800570e:	d10a      	bne.n	8005726 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005710:	4a0d      	ldr	r2, [pc, #52]	; (8005748 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005712:	6913      	ldr	r3, [r2, #16]
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800571a:	2c01      	cmp	r4, #1
 800571c:	d010      	beq.n	8005740 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800571e:	bf40      	sev
    __WFE();
 8005720:	bf20      	wfe
    __WFE();
 8005722:	bf20      	wfe
  }
}
 8005724:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005726:	f000 f821 	bl	800576c <HAL_PWREx_DisableLowPowerRunMode>
 800572a:	2800      	cmp	r0, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_PWR_EnterSLEEPMode+0x10>
 800572e:	e7f9      	b.n	8005724 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005738:	d1ea      	bne.n	8005710 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800573a:	f000 f80f 	bl	800575c <HAL_PWREx_EnableLowPowerRunMode>
 800573e:	e7e7      	b.n	8005710 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005740:	bf30      	wfi
 8005742:	e7ef      	b.n	8005724 <HAL_PWR_EnterSLEEPMode+0x24>
 8005744:	58000400 	.word	0x58000400
 8005748:	e000ed00 	.word	0xe000ed00

0800574c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <HAL_PWREx_GetVoltageRange+0xc>)
 800574e:	6818      	ldr	r0, [r3, #0]
}
 8005750:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	58000400 	.word	0x58000400

0800575c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800575c:	4a02      	ldr	r2, [pc, #8]	; (8005768 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005764:	6013      	str	r3, [r2, #0]
}
 8005766:	4770      	bx	lr
 8005768:	58000400 	.word	0x58000400

0800576c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800576c:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005774:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2232      	movs	r2, #50	; 0x32
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005788:	e000      	b.n	800578c <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800578a:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800578e:	6952      	ldr	r2, [r2, #20]
 8005790:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005794:	d001      	beq.n	800579a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f7      	bne.n	800578a <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800579a:	4b04      	ldr	r3, [pc, #16]	; (80057ac <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80057a2:	d101      	bne.n	80057a8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80057a4:	2000      	movs	r0, #0
 80057a6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80057a8:	2003      	movs	r0, #3
}
 80057aa:	4770      	bx	lr
 80057ac:	58000400 	.word	0x58000400
 80057b0:	20000074 	.word	0x20000074
 80057b4:	431bde83 	.word	0x431bde83

080057b8 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057b8:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80057c8:	6913      	ldr	r3, [r2, #16]
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80057d0:	2801      	cmp	r0, #1
 80057d2:	d008      	beq.n	80057e6 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057d4:	bf40      	sev
    __WFE();
 80057d6:	bf20      	wfe
    __WFE();
 80057d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057da:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80057dc:	6913      	ldr	r3, [r2, #16]
 80057de:	f023 0304 	bic.w	r3, r3, #4
 80057e2:	6113      	str	r3, [r2, #16]
}
 80057e4:	4770      	bx	lr
    __WFI();
 80057e6:	bf30      	wfi
 80057e8:	e7f7      	b.n	80057da <HAL_PWREx_EnterSTOP2Mode+0x22>
 80057ea:	bf00      	nop
 80057ec:	58000400 	.word	0x58000400
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057f4:	b530      	push	{r4, r5, lr}
 80057f6:	b089      	sub	sp, #36	; 0x24
 80057f8:	4604      	mov	r4, r0
 80057fa:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <RCC_SetFlashLatency+0xb4>)
 80057fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005802:	9006      	str	r0, [sp, #24]
 8005804:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005808:	f103 0208 	add.w	r2, r3, #8
 800580c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005810:	9004      	str	r0, [sp, #16]
 8005812:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005816:	ad01      	add	r5, sp, #4
 8005818:	3310      	adds	r3, #16
 800581a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800581e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005822:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005826:	d007      	beq.n	8005838 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005828:	2300      	movs	r3, #0
 800582a:	e014      	b.n	8005856 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 800582c:	aa08      	add	r2, sp, #32
 800582e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005832:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005836:	e01e      	b.n	8005876 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005838:	2300      	movs	r3, #0
 800583a:	2b02      	cmp	r3, #2
 800583c:	d808      	bhi.n	8005850 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800583e:	aa08      	add	r2, sp, #32
 8005840:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005844:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005848:	42a2      	cmp	r2, r4
 800584a:	d2ef      	bcs.n	800582c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800584c:	3301      	adds	r3, #1
 800584e:	e7f4      	b.n	800583a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005850:	2500      	movs	r5, #0
 8005852:	e010      	b.n	8005876 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005854:	3301      	adds	r3, #1
 8005856:	2b02      	cmp	r3, #2
 8005858:	d80c      	bhi.n	8005874 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800585a:	aa08      	add	r2, sp, #32
 800585c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005860:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005864:	42a2      	cmp	r2, r4
 8005866:	d3f5      	bcc.n	8005854 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005868:	aa08      	add	r2, sp, #32
 800586a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800586e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005872:	e000      	b.n	8005876 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005874:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005876:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <RCC_SetFlashLatency+0xb8>)
 8005878:	6813      	ldr	r3, [r2, #0]
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	432b      	orrs	r3, r5
 8005880:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005882:	f7fc f9ad 	bl	8001be0 <HAL_GetTick>
 8005886:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005888:	4b08      	ldr	r3, [pc, #32]	; (80058ac <RCC_SetFlashLatency+0xb8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	42ab      	cmp	r3, r5
 8005892:	d006      	beq.n	80058a2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005894:	f7fc f9a4 	bl	8001be0 <HAL_GetTick>
 8005898:	1b00      	subs	r0, r0, r4
 800589a:	2802      	cmp	r0, #2
 800589c:	d9f4      	bls.n	8005888 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800589e:	2003      	movs	r0, #3
 80058a0:	e000      	b.n	80058a4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80058a2:	2000      	movs	r0, #0
}
 80058a4:	b009      	add	sp, #36	; 0x24
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	08015940 	.word	0x08015940
 80058ac:	58004000 	.word	0x58004000

080058b0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80058b0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80058b2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80058b8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	4a08      	ldr	r2, [pc, #32]	; (80058ec <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80058d2:	f7ff ff3b 	bl	800574c <HAL_PWREx_GetVoltageRange>
 80058d6:	4601      	mov	r1, r0
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80058da:	fba3 3404 	umull	r3, r4, r3, r4
 80058de:	0ca0      	lsrs	r0, r4, #18
 80058e0:	f7ff ff88 	bl	80057f4 <RCC_SetFlashLatency>
}
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	0801617c 	.word	0x0801617c
 80058ec:	0801611c 	.word	0x0801611c
 80058f0:	431bde83 	.word	0x431bde83

080058f4 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005900:	f011 010c 	ands.w	r1, r1, #12
 8005904:	d00a      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x28>
 8005906:	290c      	cmp	r1, #12
 8005908:	d006      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800590a:	2904      	cmp	r1, #4
 800590c:	d047      	beq.n	800599e <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800590e:	2908      	cmp	r1, #8
 8005910:	d03b      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005912:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005914:	4610      	mov	r0, r2
 8005916:	e026      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005918:	2b01      	cmp	r3, #1
 800591a:	d1f6      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f013 0308 	ands.w	r3, r3, #8
 8005926:	d00d      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x50>
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f013 0308 	ands.w	r3, r3, #8
 8005932:	d124      	bne.n	800597e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005938:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800593c:	4a2e      	ldr	r2, [pc, #184]	; (80059f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800593e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005942:	e00e      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	f012 0f08 	tst.w	r2, #8
 800594e:	d112      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800595e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005962:	b1d1      	cbz	r1, 800599a <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005964:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d01a      	beq.n	80059aa <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005974:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	e7ee      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x68>
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005982:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005984:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005988:	e7d8      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005996:	4819      	ldr	r0, [pc, #100]	; (80059fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005998:	e7e5      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800599a:	4610      	mov	r0, r2
 800599c:	e7e3      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800599e:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80059a0:	4817      	ldr	r0, [pc, #92]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059a2:	e7e0      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80059a4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80059a6:	4816      	ldr	r0, [pc, #88]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059a8:	e7dd      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d009      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0xd8>
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d108      	bne.n	80059ce <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80059c6:	d115      	bne.n	80059f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80059c8:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <HAL_RCC_GetSysClockFreq+0x108>)
 80059ca:	e000      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80059ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d2:	68cb      	ldr	r3, [r1, #12]
 80059d4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80059d8:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059dc:	68cb      	ldr	r3, [r1, #12]
 80059de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80059e2:	3301      	adds	r3, #1
 80059e4:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80059e8:	68c8      	ldr	r0, [r1, #12]
 80059ea:	0f40      	lsrs	r0, r0, #29
 80059ec:	3001      	adds	r0, #1
 80059ee:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80059f2:	e7bf      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80059f4:	4a02      	ldr	r2, [pc, #8]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059f6:	e7ea      	b.n	80059ce <HAL_RCC_GetSysClockFreq+0xda>
 80059f8:	0801617c 	.word	0x0801617c
 80059fc:	01e84800 	.word	0x01e84800
 8005a00:	00f42400 	.word	0x00f42400

08005a04 <HAL_RCC_GetHCLKFreq>:
{
 8005a04:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a06:	f7ff ff75 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005a1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a1e:	bd08      	pop	{r3, pc}
 8005a20:	0801611c 	.word	0x0801611c

08005a24 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f000 8311 	beq.w	800604c <HAL_RCC_OscConfig+0x628>
{
 8005a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	689d      	ldr	r5, [r3, #8]
 8005a34:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a38:	68de      	ldr	r6, [r3, #12]
 8005a3a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a3e:	6803      	ldr	r3, [r0, #0]
 8005a40:	f013 0f20 	tst.w	r3, #32
 8005a44:	d02a      	beq.n	8005a9c <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	d065      	beq.n	8005b16 <HAL_RCC_OscConfig+0xf2>
 8005a4a:	2d0c      	cmp	r5, #12
 8005a4c:	d061      	beq.n	8005b12 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a4e:	6a23      	ldr	r3, [r4, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80bf 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a62:	f7fc f8bd 	bl	8001be0 <HAL_GetTick>
 8005a66:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f013 0f02 	tst.w	r3, #2
 8005a72:	f000 80a7 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f042 0208 	orr.w	r2, r2, #8
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005a88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005a96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a9a:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f013 0f01 	tst.w	r3, #1
 8005aa2:	f000 80b5 	beq.w	8005c10 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005aa6:	2d08      	cmp	r5, #8
 8005aa8:	f000 80ae 	beq.w	8005c08 <HAL_RCC_OscConfig+0x1e4>
 8005aac:	2d0c      	cmp	r5, #12
 8005aae:	f000 80a8 	beq.w	8005c02 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab6:	6813      	ldr	r3, [r2, #0]
 8005ab8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005abc:	68a1      	ldr	r1, [r4, #8]
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac8:	f000 80c4 	beq.w	8005c54 <HAL_RCC_OscConfig+0x230>
 8005acc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005ad0:	f000 80c5 	beq.w	8005c5e <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ade:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005ae6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae8:	6863      	ldr	r3, [r4, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80c2 	beq.w	8005c74 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8005af0:	f7fc f876 	bl	8001be0 <HAL_GetTick>
 8005af4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005b00:	f040 8086 	bne.w	8005c10 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b04:	f7fc f86c 	bl	8001be0 <HAL_GetTick>
 8005b08:	1bc0      	subs	r0, r0, r7
 8005b0a:	2864      	cmp	r0, #100	; 0x64
 8005b0c:	d9f3      	bls.n	8005af6 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8005b0e:	2003      	movs	r0, #3
 8005b10:	e2a9      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b12:	2e01      	cmp	r6, #1
 8005b14:	d19b      	bne.n	8005a4e <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b16:	6a23      	ldr	r3, [r4, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8299 	beq.w	8006050 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f013 0f08 	tst.w	r3, #8
 8005b2a:	d029      	beq.n	8005b80 <HAL_RCC_OscConfig+0x15c>
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b36:	4298      	cmp	r0, r3
 8005b38:	d92a      	bls.n	8005b90 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b3a:	f7ff feb9 	bl	80058b0 <RCC_SetFlashLatencyFromMSIRange>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 8288 	bne.w	8006054 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005b56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005b64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b68:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b6a:	f7ff ff4b 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 8005b6e:	4bba      	ldr	r3, [pc, #744]	; (8005e58 <HAL_RCC_OscConfig+0x434>)
 8005b70:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005b72:	4bba      	ldr	r3, [pc, #744]	; (8005e5c <HAL_RCC_OscConfig+0x438>)
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f7fc f831 	bl	8001bdc <HAL_InitTick>
        if (status != HAL_OK)
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d08e      	beq.n	8005a9c <HAL_RCC_OscConfig+0x78>
 8005b7e:	e272      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8e:	e7d2      	b.n	8005b36 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ba2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005bb0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005bb4:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005bb8:	f7ff fe7a 	bl	80058b0 <RCC_SetFlashLatencyFromMSIRange>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d0d4      	beq.n	8005b6a <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e250      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bc4:	f7fc f80c 	bl	8001be0 <HAL_GetTick>
 8005bc8:	1bc0      	subs	r0, r0, r7
 8005bca:	2802      	cmp	r0, #2
 8005bcc:	f67f af4c 	bls.w	8005a68 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005bd0:	2003      	movs	r0, #3
 8005bd2:	e248      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd8:	6813      	ldr	r3, [r2, #0]
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005be0:	f7fb fffe 	bl	8001be0 <HAL_GetTick>
 8005be4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f013 0f02 	tst.w	r3, #2
 8005bf0:	f43f af54 	beq.w	8005a9c <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bf4:	f7fb fff4 	bl	8001be0 <HAL_GetTick>
 8005bf8:	1bc0      	subs	r0, r0, r7
 8005bfa:	2802      	cmp	r0, #2
 8005bfc:	d9f3      	bls.n	8005be6 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005bfe:	2003      	movs	r0, #3
 8005c00:	e231      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c02:	2e03      	cmp	r6, #3
 8005c04:	f47f af55 	bne.w	8005ab2 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8224 	beq.w	8006058 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f013 0f02 	tst.w	r3, #2
 8005c16:	d056      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c18:	2d04      	cmp	r5, #4
 8005c1a:	d03d      	beq.n	8005c98 <HAL_RCC_OscConfig+0x274>
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	d039      	beq.n	8005c94 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 808a 	beq.w	8005d3c <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005c34:	f7fb ffd4 	bl	8001be0 <HAL_GetTick>
 8005c38:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005c44:	d136      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c46:	f7fb ffcb 	bl	8001be0 <HAL_GetTick>
 8005c4a:	1b80      	subs	r0, r0, r6
 8005c4c:	2802      	cmp	r0, #2
 8005c4e:	d9f4      	bls.n	8005c3a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005c50:	2003      	movs	r0, #3
 8005c52:	e208      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c54:	6813      	ldr	r3, [r2, #0]
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	e744      	b.n	8005ae8 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005c68:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c70:	601a      	str	r2, [r3, #0]
}
 8005c72:	e739      	b.n	8005ae8 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005c74:	f7fb ffb4 	bl	8001be0 <HAL_GetTick>
 8005c78:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c84:	d0c4      	beq.n	8005c10 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c86:	f7fb ffab 	bl	8001be0 <HAL_GetTick>
 8005c8a:	1bc0      	subs	r0, r0, r7
 8005c8c:	2864      	cmp	r0, #100	; 0x64
 8005c8e:	d9f4      	bls.n	8005c7a <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8005c90:	2003      	movs	r0, #3
 8005c92:	e1e8      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c94:	2e02      	cmp	r6, #2
 8005c96:	d1c3      	bne.n	8005c20 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 81de 	beq.w	800605c <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca6:	6853      	ldr	r3, [r2, #4]
 8005ca8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005cb0:	6053      	str	r3, [r2, #4]
}
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cba:	6853      	ldr	r3, [r2, #4]
 8005cbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005cc4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f013 0f08 	tst.w	r3, #8
 8005ccc:	d07e      	beq.n	8005dcc <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cce:	69a3      	ldr	r3, [r4, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d062      	beq.n	8005d9a <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005cdc:	69e1      	ldr	r1, [r4, #28]
 8005cde:	f003 0210 	and.w	r2, r3, #16
 8005ce2:	4291      	cmp	r1, r2
 8005ce4:	d011      	beq.n	8005d0a <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ce6:	f003 0203 	and.w	r2, r3, #3
 8005cea:	2a02      	cmp	r2, #2
 8005cec:	f000 81b8 	beq.w	8006060 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005cf0:	f013 0f01 	tst.w	r3, #1
 8005cf4:	d138      	bne.n	8005d68 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	69e1      	ldr	r1, [r4, #28]
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d0e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005d1a:	f7fb ff61 	bl	8001be0 <HAL_GetTick>
 8005d1e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d28:	f013 0f02 	tst.w	r3, #2
 8005d2c:	d14e      	bne.n	8005dcc <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2e:	f7fb ff57 	bl	8001be0 <HAL_GetTick>
 8005d32:	1b80      	subs	r0, r0, r6
 8005d34:	2811      	cmp	r0, #17
 8005d36:	d9f3      	bls.n	8005d20 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005d38:	2003      	movs	r0, #3
 8005d3a:	e194      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d46:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005d48:	f7fb ff4a 	bl	8001be0 <HAL_GetTick>
 8005d4c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005d58:	d0b5      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7fb ff41 	bl	8001be0 <HAL_GetTick>
 8005d5e:	1b80      	subs	r0, r0, r6
 8005d60:	2802      	cmp	r0, #2
 8005d62:	d9f4      	bls.n	8005d4e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005d64:	2003      	movs	r0, #3
 8005d66:	e17e      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005d78:	f7fb ff32 	bl	8001be0 <HAL_GetTick>
 8005d7c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d86:	f013 0f02 	tst.w	r3, #2
 8005d8a:	d0b4      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d8c:	f7fb ff28 	bl	8001be0 <HAL_GetTick>
 8005d90:	1b80      	subs	r0, r0, r6
 8005d92:	2811      	cmp	r0, #17
 8005d94:	d9f3      	bls.n	8005d7e <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005d96:	2003      	movs	r0, #3
 8005d98:	e165      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d9e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005daa:	f7fb ff19 	bl	8001be0 <HAL_GetTick>
 8005dae:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005db8:	f013 0f02 	tst.w	r3, #2
 8005dbc:	d006      	beq.n	8005dcc <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbe:	f7fb ff0f 	bl	8001be0 <HAL_GetTick>
 8005dc2:	1b80      	subs	r0, r0, r6
 8005dc4:	2811      	cmp	r0, #17
 8005dc6:	d9f3      	bls.n	8005db0 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005dc8:	2003      	movs	r0, #3
 8005dca:	e14c      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	f013 0f04 	tst.w	r3, #4
 8005dd2:	f000 80b8 	beq.w	8005f46 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005dd6:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <HAL_RCC_OscConfig+0x43c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005dde:	d110      	bne.n	8005e02 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8005de0:	f7ff fc86 	bl	80056f0 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8005de4:	f7fb fefc 	bl	8001be0 <HAL_GetTick>
 8005de8:	4606      	mov	r6, r0
 8005dea:	4b1d      	ldr	r3, [pc, #116]	; (8005e60 <HAL_RCC_OscConfig+0x43c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005df2:	d106      	bne.n	8005e02 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df4:	f7fb fef4 	bl	8001be0 <HAL_GetTick>
 8005df8:	1b80      	subs	r0, r0, r6
 8005dfa:	2802      	cmp	r0, #2
 8005dfc:	d9f5      	bls.n	8005dea <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005dfe:	2003      	movs	r0, #3
 8005e00:	e131      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d068      	beq.n	8005eda <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005e08:	2b85      	cmp	r3, #133	; 0x85
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005e0c:	2b05      	cmp	r3, #5
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e18:	f043 0304 	orr.w	r3, r3, #4
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005e20:	f7fb fede 	bl	8001be0 <HAL_GetTick>
 8005e24:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3e:	f013 0f02 	tst.w	r3, #2
 8005e42:	d10f      	bne.n	8005e64 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e44:	f7fb fecc 	bl	8001be0 <HAL_GetTick>
 8005e48:	1b80      	subs	r0, r0, r6
 8005e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	d9f1      	bls.n	8005e36 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005e52:	2003      	movs	r0, #3
 8005e54:	e107      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
 8005e56:	bf00      	nop
 8005e58:	20000074 	.word	0x20000074
 8005e5c:	20000078 	.word	0x20000078
 8005e60:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e64:	68e3      	ldr	r3, [r4, #12]
 8005e66:	2b81      	cmp	r3, #129	; 0x81
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e6a:	2b85      	cmp	r3, #133	; 0x85
 8005e6c:	d11a      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005e6e:	f7fb feb7 	bl	8001be0 <HAL_GetTick>
 8005e72:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e78:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e90:	d159      	bne.n	8005f46 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fb fea5 	bl	8001be0 <HAL_GetTick>
 8005e96:	1b80      	subs	r0, r0, r6
 8005e98:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	d9f1      	bls.n	8005e84 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8005ea0:	2003      	movs	r0, #3
 8005ea2:	e0e0      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fe9c 	bl	8001be0 <HAL_GetTick>
 8005ea8:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ec6:	d03e      	beq.n	8005f46 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec8:	f7fb fe8a 	bl	8001be0 <HAL_GetTick>
 8005ecc:	1b80      	subs	r0, r0, r6
 8005ece:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ed2:	4298      	cmp	r0, r3
 8005ed4:	d9f1      	bls.n	8005eba <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8005ed6:	2003      	movs	r0, #3
 8005ed8:	e0c5      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005eda:	f7fb fe81 	bl	8001be0 <HAL_GetTick>
 8005ede:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005efc:	d008      	beq.n	8005f10 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efe:	f7fb fe6f 	bl	8001be0 <HAL_GetTick>
 8005f02:	1b80      	subs	r0, r0, r6
 8005f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f08:	4298      	cmp	r0, r3
 8005f0a:	d9f1      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005f0c:	2003      	movs	r0, #3
 8005f0e:	e0aa      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005f10:	f7fb fe66 	bl	8001be0 <HAL_GetTick>
 8005f14:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f013 0f02 	tst.w	r3, #2
 8005f32:	d008      	beq.n	8005f46 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f34:	f7fb fe54 	bl	8001be0 <HAL_GetTick>
 8005f38:	1b80      	subs	r0, r0, r6
 8005f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f3e:	4298      	cmp	r0, r3
 8005f40:	d9f1      	bls.n	8005f26 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005f42:	2003      	movs	r0, #3
 8005f44:	e08f      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 808b 	beq.w	8006064 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f4e:	2d0c      	cmp	r5, #12
 8005f50:	d060      	beq.n	8006014 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d016      	beq.n	8005f84 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f62:	f7fb fe3d 	bl	8001be0 <HAL_GetTick>
 8005f66:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f72:	d148      	bne.n	8006006 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f78:	68d1      	ldr	r1, [r2, #12]
 8005f7a:	4b41      	ldr	r3, [pc, #260]	; (8006080 <HAL_RCC_OscConfig+0x65c>)
 8005f7c:	400b      	ands	r3, r1
 8005f7e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005f80:	2000      	movs	r0, #0
 8005f82:	e070      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f88:	6813      	ldr	r3, [r2, #0]
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f90:	f7fb fe26 	bl	8001be0 <HAL_GetTick>
 8005f94:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005fa0:	d12a      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa6:	68d3      	ldr	r3, [r2, #12]
 8005fa8:	4936      	ldr	r1, [pc, #216]	; (8006084 <HAL_RCC_OscConfig+0x660>)
 8005faa:	4019      	ands	r1, r3
 8005fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005fb0:	4303      	orrs	r3, r0
 8005fb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005fb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005fb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005fba:	4303      	orrs	r3, r0
 8005fbc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005fbe:	4303      	orrs	r3, r0
 8005fc0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005fc2:	4303      	orrs	r3, r0
 8005fc4:	4319      	orrs	r1, r3
 8005fc6:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005fc8:	6813      	ldr	r3, [r2, #0]
 8005fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fce:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fd0:	68d3      	ldr	r3, [r2, #12]
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005fd8:	f7fb fe02 	bl	8001be0 <HAL_GetTick>
 8005fdc:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005fe8:	d13e      	bne.n	8006068 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fea:	f7fb fdf9 	bl	8001be0 <HAL_GetTick>
 8005fee:	1b00      	subs	r0, r0, r4
 8005ff0:	280a      	cmp	r0, #10
 8005ff2:	d9f4      	bls.n	8005fde <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005ff4:	2003      	movs	r0, #3
 8005ff6:	e036      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fb fdf2 	bl	8001be0 <HAL_GetTick>
 8005ffc:	1b40      	subs	r0, r0, r5
 8005ffe:	280a      	cmp	r0, #10
 8006000:	d9c9      	bls.n	8005f96 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8006002:	2003      	movs	r0, #3
 8006004:	e02f      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006006:	f7fb fdeb 	bl	8001be0 <HAL_GetTick>
 800600a:	1b00      	subs	r0, r0, r4
 800600c:	280a      	cmp	r0, #10
 800600e:	d9ab      	bls.n	8005f68 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8006010:	2003      	movs	r0, #3
 8006012:	e028      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006014:	2b01      	cmp	r3, #1
 8006016:	d029      	beq.n	800606c <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800601e:	f003 0103 	and.w	r1, r3, #3
 8006022:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006024:	4291      	cmp	r1, r2
 8006026:	d123      	bne.n	8006070 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800602c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602e:	428a      	cmp	r2, r1
 8006030:	d120      	bne.n	8006074 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006032:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006036:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006038:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800603c:	d11c      	bne.n	8006078 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800603e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8006042:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006044:	4293      	cmp	r3, r2
 8006046:	d119      	bne.n	800607c <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8006048:	2000      	movs	r0, #0
 800604a:	e00c      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 800604c:	2001      	movs	r0, #1
}
 800604e:	4770      	bx	lr
        return HAL_ERROR;
 8006050:	2001      	movs	r0, #1
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8006054:	2001      	movs	r0, #1
 8006056:	e006      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
 800605a:	e004      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800605c:	2001      	movs	r0, #1
 800605e:	e002      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006060:	2001      	movs	r0, #1
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006064:	2000      	movs	r0, #0
}
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006068:	2000      	movs	r0, #0
 800606a:	e7fc      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800606c:	2001      	movs	r0, #1
 800606e:	e7fa      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006070:	2001      	movs	r0, #1
 8006072:	e7f8      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
 8006074:	2001      	movs	r0, #1
 8006076:	e7f6      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
 8006078:	2001      	movs	r0, #1
 800607a:	e7f4      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
 800607c:	2001      	movs	r0, #1
 800607e:	e7f2      	b.n	8006066 <HAL_RCC_OscConfig+0x642>
 8006080:	eefefffc 	.word	0xeefefffc
 8006084:	11c1808c 	.word	0x11c1808c

08006088 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006088:	2800      	cmp	r0, #0
 800608a:	f000 8127 	beq.w	80062dc <HAL_RCC_ClockConfig+0x254>
{
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006094:	4b93      	ldr	r3, [pc, #588]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	428b      	cmp	r3, r1
 800609e:	d32d      	bcc.n	80060fc <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	f013 0f02 	tst.w	r3, #2
 80060a6:	d13f      	bne.n	8006128 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	f013 0f20 	tst.w	r3, #32
 80060ae:	d153      	bne.n	8006158 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80060b6:	d16a      	bne.n	800618e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	f013 0f04 	tst.w	r3, #4
 80060be:	f040 8083 	bne.w	80061c8 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	f013 0f08 	tst.w	r3, #8
 80060c8:	f040 8097 	bne.w	80061fa <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	f013 0f01 	tst.w	r3, #1
 80060d2:	f000 80de 	beq.w	8006292 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d6:	686b      	ldr	r3, [r5, #4]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	f000 80a8 	beq.w	800622e <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060de:	2b03      	cmp	r3, #3
 80060e0:	f000 80ad 	beq.w	800623e <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 80b2 	bne.w	800624e <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f012 0f02 	tst.w	r2, #2
 80060f4:	f040 80b1 	bne.w	800625a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80060f8:	2001      	movs	r0, #1
 80060fa:	e0ee      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fc:	4a79      	ldr	r2, [pc, #484]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	f023 0307 	bic.w	r3, r3, #7
 8006104:	430b      	orrs	r3, r1
 8006106:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006108:	f7fb fd6a 	bl	8001be0 <HAL_GetTick>
 800610c:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800610e:	4b75      	ldr	r3, [pc, #468]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	42a3      	cmp	r3, r4
 8006118:	d0c2      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800611a:	f7fb fd61 	bl	8001be0 <HAL_GetTick>
 800611e:	1b80      	subs	r0, r0, r6
 8006120:	2802      	cmp	r0, #2
 8006122:	d9f4      	bls.n	800610e <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006124:	2003      	movs	r0, #3
 8006126:	e0d8      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006128:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800612a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800612e:	688a      	ldr	r2, [r1, #8]
 8006130:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006134:	4313      	orrs	r3, r2
 8006136:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006138:	f7fb fd52 	bl	8001be0 <HAL_GetTick>
 800613c:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006148:	d1ae      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800614a:	f7fb fd49 	bl	8001be0 <HAL_GetTick>
 800614e:	1b80      	subs	r0, r0, r6
 8006150:	2802      	cmp	r0, #2
 8006152:	d9f4      	bls.n	800613e <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006154:	2003      	movs	r0, #3
 8006156:	e0c0      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006158:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800615a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615e:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8006162:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800616c:	f7fb fd38 	bl	8001be0 <HAL_GetTick>
 8006170:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800617a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800617e:	d197      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006180:	f7fb fd2e 	bl	8001be0 <HAL_GetTick>
 8006184:	1b80      	subs	r0, r0, r6
 8006186:	2802      	cmp	r0, #2
 8006188:	d9f3      	bls.n	8006172 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800618a:	2003      	movs	r0, #3
 800618c:	e0a5      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800618e:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006194:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8006198:	f023 030f 	bic.w	r3, r3, #15
 800619c:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80061a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80061a4:	f7fb fd1c 	bl	8001be0 <HAL_GetTick>
 80061a8:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80061aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80061b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80061b6:	f47f af7f 	bne.w	80060b8 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ba:	f7fb fd11 	bl	8001be0 <HAL_GetTick>
 80061be:	1b80      	subs	r0, r0, r6
 80061c0:	2802      	cmp	r0, #2
 80061c2:	d9f2      	bls.n	80061aa <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80061c4:	2003      	movs	r0, #3
 80061c6:	e088      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80061c8:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80061ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ce:	688a      	ldr	r2, [r1, #8]
 80061d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80061d8:	f7fb fd02 	bl	8001be0 <HAL_GetTick>
 80061dc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80061e8:	f47f af6b 	bne.w	80060c2 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061ec:	f7fb fcf8 	bl	8001be0 <HAL_GetTick>
 80061f0:	1b80      	subs	r0, r0, r6
 80061f2:	2802      	cmp	r0, #2
 80061f4:	d9f3      	bls.n	80061de <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80061f6:	2003      	movs	r0, #3
 80061f8:	e06f      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061fa:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80061fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006200:	6893      	ldr	r3, [r2, #8]
 8006202:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006206:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800620a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800620c:	f7fb fce8 	bl	8001be0 <HAL_GetTick>
 8006210:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800621c:	f47f af56 	bne.w	80060cc <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006220:	f7fb fcde 	bl	8001be0 <HAL_GetTick>
 8006224:	1b80      	subs	r0, r0, r6
 8006226:	2802      	cmp	r0, #2
 8006228:	d9f3      	bls.n	8006212 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800622a:	2003      	movs	r0, #3
 800622c:	e055      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800622e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006238:	d10f      	bne.n	800625a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800623a:	2001      	movs	r0, #1
 800623c:	e04d      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800623e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006248:	d107      	bne.n	800625a <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800624a:	2001      	movs	r0, #1
 800624c:	e045      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800624e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006258:	d042      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800625a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625e:	688a      	ldr	r2, [r1, #8]
 8006260:	f022 0203 	bic.w	r2, r2, #3
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006268:	f7fb fcba 	bl	8001be0 <HAL_GetTick>
 800626c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800626e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006278:	686a      	ldr	r2, [r5, #4]
 800627a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800627e:	d008      	beq.n	8006292 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fb fcae 	bl	8001be0 <HAL_GetTick>
 8006284:	1b80      	subs	r0, r0, r6
 8006286:	f241 3388 	movw	r3, #5000	; 0x1388
 800628a:	4298      	cmp	r0, r3
 800628c:	d9ef      	bls.n	800626e <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800628e:	2003      	movs	r0, #3
 8006290:	e023      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	42a3      	cmp	r3, r4
 800629c:	d915      	bls.n	80062ca <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629e:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062a0:	6813      	ldr	r3, [r2, #0]
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	4323      	orrs	r3, r4
 80062a8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80062aa:	f7fb fc99 	bl	8001be0 <HAL_GetTick>
 80062ae:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d006      	beq.n	80062ca <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062bc:	f7fb fc90 	bl	8001be0 <HAL_GetTick>
 80062c0:	1b40      	subs	r0, r0, r5
 80062c2:	2802      	cmp	r0, #2
 80062c4:	d9f4      	bls.n	80062b0 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80062c6:	2003      	movs	r0, #3
 80062c8:	e007      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062ca:	f7ff fb9b 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80062d0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80062d2:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_RCC_ClockConfig+0x264>)
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	f7fb fc81 	bl	8001bdc <HAL_InitTick>
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
}
 80062de:	4770      	bx	lr
        return HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
 80062e2:	e7fa      	b.n	80062da <HAL_RCC_ClockConfig+0x252>
 80062e4:	58004000 	.word	0x58004000
 80062e8:	20000074 	.word	0x20000074
 80062ec:	20000078 	.word	0x20000078

080062f0 <HAL_RCC_GetPCLK1Freq>:
{
 80062f0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80062f2:	f7ff fb87 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006300:	4a02      	ldr	r2, [pc, #8]	; (800630c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006306:	40d8      	lsrs	r0, r3
 8006308:	bd08      	pop	{r3, pc}
 800630a:	bf00      	nop
 800630c:	0801615c 	.word	0x0801615c

08006310 <HAL_RCC_GetPCLK2Freq>:
{
 8006310:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006312:	f7ff fb77 	bl	8005a04 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006320:	4a02      	ldr	r2, [pc, #8]	; (800632c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006326:	40d8      	lsrs	r0, r3
 8006328:	bd08      	pop	{r3, pc}
 800632a:	bf00      	nop
 800632c:	0801615c 	.word	0x0801615c

08006330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006334:	6803      	ldr	r3, [r0, #0]
 8006336:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800633a:	f040 80ab 	bne.w	8006494 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800633e:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	f013 0f01 	tst.w	r3, #1
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006348:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800634a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800634e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006352:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006356:	b292      	uxth	r2, r2
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f013 0f02 	tst.w	r3, #2
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006366:	68a2      	ldr	r2, [r4, #8]
 8006368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800636c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006370:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006374:	b292      	uxth	r2, r2
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	f013 0f20 	tst.w	r3, #32
 8006382:	d009      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006384:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800638e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800639e:	d00c      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a0:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80063aa:	0c02      	lsrs	r2, r0, #16
 80063ac:	0412      	lsls	r2, r2, #16
 80063ae:	ea23 0302 	bic.w	r3, r3, r2
 80063b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80063c0:	d00c      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063c8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80063cc:	0c02      	lsrs	r2, r0, #16
 80063ce:	0412      	lsls	r2, r2, #16
 80063d0:	ea23 0302 	bic.w	r3, r3, r2
 80063d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80063e2:	d00c      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80063e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80063e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80063ee:	0c02      	lsrs	r2, r0, #16
 80063f0:	0412      	lsls	r2, r2, #16
 80063f2:	ea23 0302 	bic.w	r3, r3, r2
 80063f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006404:	f040 809e 	bne.w	8006544 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800640e:	f040 80aa 	bne.w	8006566 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006418:	f040 80b6 	bne.w	8006588 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f013 0f10 	tst.w	r3, #16
 8006422:	d00e      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006424:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800642a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800642e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643e:	f000 80b4 	beq.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006448:	d00f      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800644c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006450:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006454:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800645e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006460:	b91b      	cbnz	r3, 800646a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006462:	68cb      	ldr	r3, [r1, #12]
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006468:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006470:	d00e      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006478:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800647c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	f000 8092 	beq.w	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006490:	4628      	mov	r0, r5
 8006492:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006494:	f7ff f92c 	bl	80056f0 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006498:	f7fb fba2 	bl	8001be0 <HAL_GetTick>
 800649c:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800649e:	4b48      	ldr	r3, [pc, #288]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a8:	f7fb fb9a 	bl	8001be0 <HAL_GetTick>
 80064ac:	1b40      	subs	r0, r0, r5
 80064ae:	2802      	cmp	r0, #2
 80064b0:	d9f5      	bls.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80064b2:	2503      	movs	r5, #3
 80064b4:	e000      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80064b6:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	f47f af41 	bne.w	8006340 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80064ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d024      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80064d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064dc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80064e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80064e4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064e8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80064ec:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80064f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80064f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80064f8:	f012 0f02 	tst.w	r2, #2
 80064fc:	d10f      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 80064fe:	2d00      	cmp	r5, #0
 8006500:	f47f af1e 	bne.w	8006340 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006504:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800650a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800650e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006518:	e712      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800651a:	2200      	movs	r2, #0
 800651c:	e7ec      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800651e:	f7fb fb5f 	bl	8001be0 <HAL_GetTick>
 8006522:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	f013 0f02 	tst.w	r3, #2
 8006530:	d1e5      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fb fb55 	bl	8001be0 <HAL_GetTick>
 8006536:	1b80      	subs	r0, r0, r6
 8006538:	f241 3388 	movw	r3, #5000	; 0x1388
 800653c:	4298      	cmp	r0, r3
 800653e:	d9f1      	bls.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8006540:	2503      	movs	r5, #3
 8006542:	e7dc      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006544:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006546:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800654a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800654e:	0919      	lsrs	r1, r3, #4
 8006550:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006554:	ea22 0201 	bic.w	r2, r2, r1
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006564:	e750      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006566:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006568:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800656c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006570:	0919      	lsrs	r1, r3, #4
 8006572:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006576:	ea22 0201 	bic.w	r2, r2, r1
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006586:	e744      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006588:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800658a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800658e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006592:	0919      	lsrs	r1, r3, #4
 8006594:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006598:	ea22 0201 	bic.w	r2, r2, r1
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80065a8:	e738      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80065aa:	68cb      	ldr	r3, [r1, #12]
 80065ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065b0:	60cb      	str	r3, [r1, #12]
 80065b2:	e746      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065b4:	68cb      	ldr	r3, [r1, #12]
 80065b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ba:	60cb      	str	r3, [r1, #12]
 80065bc:	e768      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80065be:	bf00      	nop
 80065c0:	58000400 	.word	0x58000400

080065c4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80065c4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065c6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80065ca:	2a01      	cmp	r2, #1
 80065cc:	d035      	beq.n	800663a <HAL_RTC_DeactivateAlarm+0x76>
 80065ce:	2201      	movs	r2, #1
 80065d0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065d4:	2202      	movs	r2, #2
 80065d6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065da:	4a19      	ldr	r2, [pc, #100]	; (8006640 <HAL_RTC_DeactivateAlarm+0x7c>)
 80065dc:	20ca      	movs	r0, #202	; 0xca
 80065de:	6250      	str	r0, [r2, #36]	; 0x24
 80065e0:	2053      	movs	r0, #83	; 0x53
 80065e2:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80065e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80065e8:	d018      	beq.n	800661c <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80065ea:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_RTC_DeactivateAlarm+0x7c>)
 80065ec:	6991      	ldr	r1, [r2, #24]
 80065ee:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 80065f2:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80065f4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80065f6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80065fa:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80065fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065fe:	f021 0102 	bic.w	r1, r1, #2
 8006602:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006604:	2102      	movs	r1, #2
 8006606:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006608:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <HAL_RTC_DeactivateAlarm+0x7c>)
 800660a:	21ff      	movs	r1, #255	; 0xff
 800660c:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800660e:	2201      	movs	r2, #1
 8006610:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006614:	2000      	movs	r0, #0
 8006616:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 800661a:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800661c:	6991      	ldr	r1, [r2, #24]
 800661e:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8006622:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006624:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006626:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800662a:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800662c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800662e:	f021 0101 	bic.w	r1, r1, #1
 8006632:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006634:	2101      	movs	r1, #1
 8006636:	65d1      	str	r1, [r2, #92]	; 0x5c
 8006638:	e7e6      	b.n	8006608 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800663a:	2002      	movs	r0, #2
}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40002800 	.word	0x40002800

08006644 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800664a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800664c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800664e:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006650:	f015 0f01 	tst.w	r5, #1
 8006654:	d106      	bne.n	8006664 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006656:	f015 0f02 	tst.w	r5, #2
 800665a:	d109      	bne.n	8006670 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800665c:	2301      	movs	r3, #1
 800665e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006662:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006666:	2201      	movs	r2, #1
 8006668:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800666a:	f7fb fc61 	bl	8001f30 <HAL_RTC_AlarmAEventCallback>
 800666e:	e7f2      	b.n	8006656 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006672:	2202      	movs	r2, #2
 8006674:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f9ec 	bl	8006a54 <HAL_RTCEx_AlarmBEventCallback>
 800667c:	e7ee      	b.n	800665c <HAL_RTC_AlarmIRQHandler+0x18>
 800667e:	bf00      	nop
 8006680:	40002800 	.word	0x40002800

08006684 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006684:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006686:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <HAL_RTC_WaitForSynchro+0x30>)
 8006688:	68d3      	ldr	r3, [r2, #12]
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006690:	f7fb faa6 	bl	8001be0 <HAL_GetTick>
 8006694:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <HAL_RTC_WaitForSynchro+0x30>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f013 0f20 	tst.w	r3, #32
 800669e:	d107      	bne.n	80066b0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066a0:	f7fb fa9e 	bl	8001be0 <HAL_GetTick>
 80066a4:	1b00      	subs	r0, r0, r4
 80066a6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80066aa:	d9f4      	bls.n	8006696 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80066ac:	2003      	movs	r0, #3
 80066ae:	e000      	b.n	80066b2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80066b0:	2000      	movs	r0, #0
}
 80066b2:	bd10      	pop	{r4, pc}
 80066b4:	40002800 	.word	0x40002800

080066b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <RTC_EnterInitMode+0x48>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066c2:	d002      	beq.n	80066ca <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80066c4:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80066c6:	4620      	mov	r0, r4
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <RTC_EnterInitMode+0x48>)
 80066ce:	68d3      	ldr	r3, [r2, #12]
 80066d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80066d6:	f7fb fa83 	bl	8001be0 <HAL_GetTick>
 80066da:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066de:	4b08      	ldr	r3, [pc, #32]	; (8006700 <RTC_EnterInitMode+0x48>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066e6:	d1ee      	bne.n	80066c6 <RTC_EnterInitMode+0xe>
 80066e8:	2c03      	cmp	r4, #3
 80066ea:	d0ec      	beq.n	80066c6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066ec:	f7fb fa78 	bl	8001be0 <HAL_GetTick>
 80066f0:	1b43      	subs	r3, r0, r5
 80066f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f6:	d9f2      	bls.n	80066de <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f8:	2403      	movs	r4, #3
 80066fa:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80066fe:	e7ee      	b.n	80066de <RTC_EnterInitMode+0x26>
 8006700:	40002800 	.word	0x40002800

08006704 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006708:	4b10      	ldr	r3, [pc, #64]	; (800674c <RTC_ExitInitMode+0x48>)
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006710:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	f013 0f20 	tst.w	r3, #32
 8006718:	d106      	bne.n	8006728 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800671a:	f7ff ffb3 	bl	8006684 <HAL_RTC_WaitForSynchro>
 800671e:	b198      	cbz	r0, 8006748 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006720:	2003      	movs	r0, #3
 8006722:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006726:	e00f      	b.n	8006748 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006728:	4a08      	ldr	r2, [pc, #32]	; (800674c <RTC_ExitInitMode+0x48>)
 800672a:	6993      	ldr	r3, [r2, #24]
 800672c:	f023 0320 	bic.w	r3, r3, #32
 8006730:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006732:	f7ff ffa7 	bl	8006684 <HAL_RTC_WaitForSynchro>
 8006736:	b110      	cbz	r0, 800673e <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006738:	2003      	movs	r0, #3
 800673a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800673e:	4a03      	ldr	r2, [pc, #12]	; (800674c <RTC_ExitInitMode+0x48>)
 8006740:	6993      	ldr	r3, [r2, #24]
 8006742:	f043 0320 	orr.w	r3, r3, #32
 8006746:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	40002800 	.word	0x40002800

08006750 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006750:	2800      	cmp	r0, #0
 8006752:	d052      	beq.n	80067fa <HAL_RTC_Init+0xaa>
{
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006758:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800675c:	b163      	cbz	r3, 8006778 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800675e:	2302      	movs	r3, #2
 8006760:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006764:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RTC_Init+0xb0>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f013 0f10 	tst.w	r3, #16
 800676c:	d009      	beq.n	8006782 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800676e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006770:	2301      	movs	r3, #1
 8006772:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006776:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006778:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800677c:	f7fb f87e 	bl	800187c <HAL_RTC_MspInit>
 8006780:	e7ed      	b.n	800675e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006782:	4b1f      	ldr	r3, [pc, #124]	; (8006800 <HAL_RTC_Init+0xb0>)
 8006784:	22ca      	movs	r2, #202	; 0xca
 8006786:	625a      	str	r2, [r3, #36]	; 0x24
 8006788:	2253      	movs	r2, #83	; 0x53
 800678a:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff ff93 	bl	80066b8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006792:	b128      	cbz	r0, 80067a0 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006794:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RTC_Init+0xb0>)
 8006796:	22ff      	movs	r2, #255	; 0xff
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800679a:	2800      	cmp	r0, #0
 800679c:	d1eb      	bne.n	8006776 <HAL_RTC_Init+0x26>
 800679e:	e7e7      	b.n	8006770 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <HAL_RTC_Init+0xb0>)
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80067a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ac:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80067ae:	6999      	ldr	r1, [r3, #24]
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	6920      	ldr	r0, [r4, #16]
 80067b4:	4302      	orrs	r2, r0
 80067b6:	69a0      	ldr	r0, [r4, #24]
 80067b8:	4302      	orrs	r2, r0
 80067ba:	430a      	orrs	r2, r1
 80067bc:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80067be:	68e2      	ldr	r2, [r4, #12]
 80067c0:	68a1      	ldr	r1, [r4, #8]
 80067c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80067c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80067ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80067d2:	4301      	orrs	r1, r0
 80067d4:	430a      	orrs	r2, r1
 80067d6:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80067d8:	4620      	mov	r0, r4
 80067da:	f7ff ff93 	bl	8006704 <RTC_ExitInitMode>
        if (status == HAL_OK)
 80067de:	2800      	cmp	r0, #0
 80067e0:	d1d8      	bne.n	8006794 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 80067e2:	4907      	ldr	r1, [pc, #28]	; (8006800 <HAL_RTC_Init+0xb0>)
 80067e4:	698b      	ldr	r3, [r1, #24]
 80067e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80067ea:	6a22      	ldr	r2, [r4, #32]
 80067ec:	69e5      	ldr	r5, [r4, #28]
 80067ee:	432a      	orrs	r2, r5
 80067f0:	6965      	ldr	r5, [r4, #20]
 80067f2:	432a      	orrs	r2, r5
 80067f4:	4313      	orrs	r3, r2
 80067f6:	618b      	str	r3, [r1, #24]
 80067f8:	e7cc      	b.n	8006794 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 80067fa:	2001      	movs	r0, #1
}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40002800 	.word	0x40002800

08006804 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006804:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006806:	e002      	b.n	800680e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006808:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800680a:	380a      	subs	r0, #10
 800680c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800680e:	2809      	cmp	r0, #9
 8006810:	d8fa      	bhi.n	8006808 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	b2db      	uxtb	r3, r3
}
 8006816:	4318      	orrs	r0, r3
 8006818:	4770      	bx	lr
	...

0800681c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800681c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006820:	2b01      	cmp	r3, #1
 8006822:	f000 80b0 	beq.w	8006986 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800682e:	2301      	movs	r3, #1
 8006830:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006834:	2302      	movs	r3, #2
 8006836:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800683a:	4b54      	ldr	r3, [pc, #336]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 800683c:	68de      	ldr	r6, [r3, #12]
 800683e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006842:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006846:	d043      	beq.n	80068d0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006848:	bb12      	cbnz	r2, 8006890 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006850:	d101      	bne.n	8006856 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006852:	2300      	movs	r3, #0
 8006854:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006856:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800685a:	7820      	ldrb	r0, [r4, #0]
 800685c:	f7ff ffd2 	bl	8006804 <RTC_ByteToBcd2>
 8006860:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006862:	7860      	ldrb	r0, [r4, #1]
 8006864:	f7ff ffce 	bl	8006804 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006868:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800686c:	78a0      	ldrb	r0, [r4, #2]
 800686e:	f7ff ffc9 	bl	8006804 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006872:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006874:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006876:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800687a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800687e:	f7ff ffc1 	bl	8006804 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006882:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006886:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006888:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800688a:	ea48 0000 	orr.w	r0, r8, r0
 800688e:	e020      	b.n	80068d2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006890:	6948      	ldr	r0, [r1, #20]
 8006892:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006896:	d009      	beq.n	80068ac <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006898:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800689c:	d006      	beq.n	80068ac <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800689e:	4b3b      	ldr	r3, [pc, #236]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80068a6:	d101      	bne.n	80068ac <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ac:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068ae:	7863      	ldrb	r3, [r4, #1]
 80068b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068b6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068b8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068ba:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068bc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80068c8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068ca:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068cc:	4318      	orrs	r0, r3
 80068ce:	e000      	b.n	80068d2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80068d0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 80068d4:	22ca      	movs	r2, #202	; 0xca
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
 80068d8:	2253      	movs	r2, #83	; 0x53
 80068da:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d02a      	beq.n	800693a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068e4:	4b29      	ldr	r3, [pc, #164]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80068ec:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068ee:	2202      	movs	r2, #2
 80068f0:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80068f2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80068f6:	d040      	beq.n	800697a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80068f8:	4b24      	ldr	r3, [pc, #144]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 80068fa:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80068fc:	69a2      	ldr	r2, [r4, #24]
 80068fe:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006900:	6862      	ldr	r2, [r4, #4]
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 8006904:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006906:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006908:	f042 0202 	orr.w	r2, r2, #2
 800690c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006914:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006916:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_RTC_SetAlarm_IT+0x174>)
 8006918:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800691c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800692a:	2301      	movs	r3, #1
 800692c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006930:	2000      	movs	r0, #0
 8006932:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006942:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006944:	2201      	movs	r2, #1
 8006946:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006948:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800694c:	d00f      	beq.n	800696e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 8006950:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006952:	69a2      	ldr	r2, [r4, #24]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006956:	6862      	ldr	r2, [r4, #4]
 8006958:	4b0c      	ldr	r3, [pc, #48]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 800695a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800695c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800696a:	619a      	str	r2, [r3, #24]
 800696c:	e7d3      	b.n	8006916 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800696e:	69a3      	ldr	r3, [r4, #24]
 8006970:	69e2      	ldr	r2, [r4, #28]
 8006972:	4313      	orrs	r3, r2
 8006974:	4a05      	ldr	r2, [pc, #20]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 8006976:	6453      	str	r3, [r2, #68]	; 0x44
 8006978:	e7ed      	b.n	8006956 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800697a:	69a3      	ldr	r3, [r4, #24]
 800697c:	69e2      	ldr	r2, [r4, #28]
 800697e:	4313      	orrs	r3, r2
 8006980:	4a02      	ldr	r2, [pc, #8]	; (800698c <HAL_RTC_SetAlarm_IT+0x170>)
 8006982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006984:	e7bc      	b.n	8006900 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006986:	2002      	movs	r0, #2
}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40002800 	.word	0x40002800
 8006990:	58000800 	.word	0x58000800

08006994 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006994:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d017      	beq.n	80069cc <HAL_RTCEx_EnableBypassShadow+0x38>
 800699c:	2101      	movs	r1, #1
 800699e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069a2:	2302      	movs	r3, #2
 80069a4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80069aa:	22ca      	movs	r2, #202	; 0xca
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24
 80069ae:	2253      	movs	r2, #83	; 0x53
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	f042 0220 	orr.w	r2, r2, #32
 80069b8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ba:	22ff      	movs	r2, #255	; 0xff
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069be:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069c2:	2300      	movs	r3, #0
 80069c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80069c8:	4618      	mov	r0, r3
 80069ca:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80069cc:	2002      	movs	r0, #2
}
 80069ce:	4770      	bx	lr
 80069d0:	40002800 	.word	0x40002800

080069d4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d020      	beq.n	8006a1e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80069dc:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80069de:	2101      	movs	r1, #1
 80069e0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069e4:	2302      	movs	r3, #2
 80069e6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80069ec:	22ca      	movs	r2, #202	; 0xca
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24
 80069f0:	2253      	movs	r2, #83	; 0x53
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069fa:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80069fc:	4c0a      	ldr	r4, [pc, #40]	; (8006a28 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80069fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006a02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006a06:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a0a:	22ff      	movs	r2, #255	; 0xff
 8006a0c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a0e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a12:	2300      	movs	r3, #0
 8006a14:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006a18:	4618      	mov	r0, r3
}
 8006a1a:	bc10      	pop	{r4}
 8006a1c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006a1e:	2002      	movs	r0, #2
}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40002800 	.word	0x40002800
 8006a28:	58000800 	.word	0x58000800

08006a2c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a38:	d103      	bne.n	8006a42 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006a40:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006a42:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006a48:	f7fb fa76 	bl	8001f38 <HAL_RTCEx_SSRUEventCallback>
 8006a4c:	e7f5      	b.n	8006a3a <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006a4e:	bf00      	nop
 8006a50:	40002800 	.word	0x40002800

08006a54 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006a54:	4770      	bx	lr

08006a56 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006a56:	0089      	lsls	r1, r1, #2
 8006a58:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006a5c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006a60:	600a      	str	r2, [r1, #0]
}
 8006a62:	4770      	bx	lr

08006a64 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006a64:	0089      	lsls	r1, r1, #2
 8006a66:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006a6a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a6e:	6808      	ldr	r0, [r1, #0]
}
 8006a70:	4770      	bx	lr
	...

08006a74 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <SUBGHZSPI_Init+0x20>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006a7e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006a82:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006a84:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006a88:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a90:	601a      	str	r2, [r3, #0]
}
 8006a92:	4770      	bx	lr
 8006a94:	58010000 	.word	0x58010000

08006a98 <HAL_SUBGHZ_Init>:
{
 8006a98:	b530      	push	{r4, r5, lr}
 8006a9a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d058      	beq.n	8006b52 <HAL_SUBGHZ_Init+0xba>
 8006aa0:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006aa2:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006aa4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006aa8:	b10b      	cbz	r3, 8006aae <HAL_SUBGHZ_Init+0x16>
 8006aaa:	2d03      	cmp	r5, #3
 8006aac:	d10b      	bne.n	8006ac6 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f7fa ffa6 	bl	8001a04 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ab8:	4a27      	ldr	r2, [pc, #156]	; (8006b58 <HAL_SUBGHZ_Init+0xc0>)
 8006aba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ac6:	b185      	cbz	r5, 8006aea <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_SUBGHZ_Init+0xc4>)
 8006aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ace:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006ad0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	f7ff ffce 	bl	8006a74 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	71a3      	strb	r3, [r4, #6]
}
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	b003      	add	sp, #12
 8006ae8:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006aea:	2302      	movs	r3, #2
 8006aec:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006af6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <HAL_SUBGHZ_Init+0xc8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b06:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b0a:	2264      	movs	r2, #100	; 0x64
 8006b0c:	fb02 f303 	mul.w	r3, r2, r3
 8006b10:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006b12:	9b01      	ldr	r3, [sp, #4]
 8006b14:	b1d3      	cbz	r3, 8006b4c <HAL_SUBGHZ_Init+0xb4>
      count--;
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b24:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006b28:	d1f3      	bne.n	8006b12 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <HAL_SUBGHZ_Init+0xc4>)
 8006b2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b44:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	d1ca      	bne.n	8006ae0 <HAL_SUBGHZ_Init+0x48>
 8006b4a:	e7c2      	b.n	8006ad2 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b4c:	2501      	movs	r5, #1
 8006b4e:	60a5      	str	r5, [r4, #8]
        break;
 8006b50:	e7eb      	b.n	8006b2a <HAL_SUBGHZ_Init+0x92>
    return status;
 8006b52:	2501      	movs	r5, #1
 8006b54:	e7c6      	b.n	8006ae4 <HAL_SUBGHZ_Init+0x4c>
 8006b56:	bf00      	nop
 8006b58:	58000800 	.word	0x58000800
 8006b5c:	58000400 	.word	0x58000400
 8006b60:	20000074 	.word	0x20000074

08006b64 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006b64:	b082      	sub	sp, #8
 8006b66:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b68:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <SUBGHZSPI_Transmit+0x70>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b70:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006b74:	2064      	movs	r0, #100	; 0x64
 8006b76:	fb00 f303 	mul.w	r3, r0, r3
 8006b7a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	b14b      	cbz	r3, 8006b94 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006b80:	9b01      	ldr	r3, [sp, #4]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006b86:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <SUBGHZSPI_Transmit+0x74>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f013 0f02 	tst.w	r3, #2
 8006b8e:	d0f5      	beq.n	8006b7c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006b90:	2000      	movs	r0, #0
 8006b92:	e001      	b.n	8006b98 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006b94:	2001      	movs	r0, #1
 8006b96:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <SUBGHZSPI_Transmit+0x74>)
 8006b9a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <SUBGHZSPI_Transmit+0x70>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ba4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006ba8:	2164      	movs	r1, #100	; 0x64
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	b143      	cbz	r3, 8006bc6 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <SUBGHZSPI_Transmit+0x74>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f013 0f01 	tst.w	r3, #1
 8006bc2:	d0f5      	beq.n	8006bb0 <SUBGHZSPI_Transmit+0x4c>
 8006bc4:	e001      	b.n	8006bca <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <SUBGHZSPI_Transmit+0x74>)
 8006bcc:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006bce:	b002      	add	sp, #8
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000074 	.word	0x20000074
 8006bd8:	58010000 	.word	0x58010000

08006bdc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006bdc:	b082      	sub	sp, #8
 8006bde:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006be0:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <SUBGHZSPI_Receive+0x78>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006be8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006bec:	2064      	movs	r0, #100	; 0x64
 8006bee:	fb00 f303 	mul.w	r3, r0, r3
 8006bf2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	b14b      	cbz	r3, 8006c0c <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006bfe:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <SUBGHZSPI_Receive+0x7c>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f013 0f02 	tst.w	r3, #2
 8006c06:	d0f5      	beq.n	8006bf4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e001      	b.n	8006c10 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006c10:	4b11      	ldr	r3, [pc, #68]	; (8006c58 <SUBGHZSPI_Receive+0x7c>)
 8006c12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006c16:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c1a:	4b0e      	ldr	r3, [pc, #56]	; (8006c54 <SUBGHZSPI_Receive+0x78>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c22:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006c26:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006c2a:	fb0c f303 	mul.w	r3, ip, r3
 8006c2e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	b143      	cbz	r3, 8006c46 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006c3a:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <SUBGHZSPI_Receive+0x7c>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f013 0f01 	tst.w	r3, #1
 8006c42:	d0f5      	beq.n	8006c30 <SUBGHZSPI_Receive+0x54>
 8006c44:	e001      	b.n	8006c4a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c46:	2001      	movs	r0, #1
 8006c48:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006c4a:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <SUBGHZSPI_Receive+0x7c>)
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006c50:	b002      	add	sp, #8
 8006c52:	4770      	bx	lr
 8006c54:	20000074 	.word	0x20000074
 8006c58:	58010000 	.word	0x58010000

08006c5c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006c5c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <SUBGHZ_WaitOnBusy+0x50>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c66:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006c6a:	2264      	movs	r2, #100	; 0x64
 8006c6c:	fb02 f303 	mul.w	r3, r2, r3
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	e006      	b.n	8006c82 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006c74:	2302      	movs	r3, #2
 8006c76:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006c78:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006c7a:	b002      	add	sp, #8
 8006c7c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006c7e:	4213      	tst	r3, r2
 8006c80:	d012      	beq.n	8006ca8 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <SUBGHZ_WaitOnBusy+0x54>)
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f013 0304 	ands.w	r3, r3, #4
 8006c8a:	d000      	beq.n	8006c8e <SUBGHZ_WaitOnBusy+0x32>
 8006c8c:	2301      	movs	r3, #1
    if (count == 0U)
 8006c8e:	9a01      	ldr	r2, [sp, #4]
 8006c90:	2a00      	cmp	r2, #0
 8006c92:	d0ef      	beq.n	8006c74 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006c94:	9a01      	ldr	r2, [sp, #4]
 8006c96:	3a01      	subs	r2, #1
 8006c98:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c9a:	4a05      	ldr	r2, [pc, #20]	; (8006cb0 <SUBGHZ_WaitOnBusy+0x54>)
 8006c9c:	6952      	ldr	r2, [r2, #20]
 8006c9e:	f012 0202 	ands.w	r2, r2, #2
 8006ca2:	d0ec      	beq.n	8006c7e <SUBGHZ_WaitOnBusy+0x22>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	e7ea      	b.n	8006c7e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e7e6      	b.n	8006c7a <SUBGHZ_WaitOnBusy+0x1e>
 8006cac:	20000074 	.word	0x20000074
 8006cb0:	58000400 	.word	0x58000400

08006cb4 <SUBGHZ_CheckDeviceReady>:
{
 8006cb4:	b500      	push	{lr}
 8006cb6:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006cb8:	7903      	ldrb	r3, [r0, #4]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d004      	beq.n	8006cc8 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006cbe:	f7ff ffcd 	bl	8006c5c <SUBGHZ_WaitOnBusy>
}
 8006cc2:	b003      	add	sp, #12
 8006cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006cd0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006cd4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cd6:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <SUBGHZ_CheckDeviceReady+0x50>)
 8006cd8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006ce4:	9b01      	ldr	r3, [sp, #4]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f9      	bne.n	8006ce4 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006cf0:	4a04      	ldr	r2, [pc, #16]	; (8006d04 <SUBGHZ_CheckDeviceReady+0x50>)
 8006cf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cfe:	e7de      	b.n	8006cbe <SUBGHZ_CheckDeviceReady+0xa>
 8006d00:	20000074 	.word	0x20000074
 8006d04:	58000400 	.word	0x58000400

08006d08 <HAL_SUBGHZ_WriteRegisters>:
{
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d0e:	7980      	ldrb	r0, [r0, #6]
 8006d10:	fa5f f880 	uxtb.w	r8, r0
 8006d14:	f1b8 0f01 	cmp.w	r8, #1
 8006d18:	d13e      	bne.n	8006d98 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4617      	mov	r7, r2
 8006d1e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006d20:	796b      	ldrb	r3, [r5, #5]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d03b      	beq.n	8006d9e <HAL_SUBGHZ_WriteRegisters+0x96>
 8006d26:	2301      	movs	r3, #1
 8006d28:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7ff ffc0 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006d36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006d42:	210d      	movs	r1, #13
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7ff ff0d 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d4a:	0a21      	lsrs	r1, r4, #8
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f7ff ff09 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d52:	b2e1      	uxtb	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff ff05 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d5a:	2400      	movs	r4, #0
 8006d5c:	e005      	b.n	8006d6a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d5e:	5d39      	ldrb	r1, [r7, r4]
 8006d60:	4628      	mov	r0, r5
 8006d62:	f7ff feff 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d66:	3401      	adds	r4, #1
 8006d68:	b2a4      	uxth	r4, r4
 8006d6a:	42b4      	cmp	r4, r6
 8006d6c:	d3f7      	bcc.n	8006d5e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006d70:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f7ff ff6d 	bl	8006c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d82:	68ab      	ldr	r3, [r5, #8]
 8006d84:	b90b      	cbnz	r3, 8006d8a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006d86:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	716b      	strb	r3, [r5, #5]
}
 8006d92:	4640      	mov	r0, r8
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006d98:	f04f 0802 	mov.w	r8, #2
 8006d9c:	e7f9      	b.n	8006d92 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006d9e:	f04f 0802 	mov.w	r8, #2
 8006da2:	e7f6      	b.n	8006d92 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006da4:	58000400 	.word	0x58000400

08006da8 <HAL_SUBGHZ_ReadRegisters>:
{
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dae:	7980      	ldrb	r0, [r0, #6]
 8006db0:	fa5f f880 	uxtb.w	r8, r0
 8006db4:	f1b8 0f01 	cmp.w	r8, #1
 8006db8:	d141      	bne.n	8006e3e <HAL_SUBGHZ_ReadRegisters+0x96>
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006dc0:	7973      	ldrb	r3, [r6, #5]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d03e      	beq.n	8006e44 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7ff ff72 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006dd0:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006dd2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006dd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006dde:	211d      	movs	r1, #29
 8006de0:	4630      	mov	r0, r6
 8006de2:	f7ff febf 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006de6:	0a21      	lsrs	r1, r4, #8
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff febb 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006dee:	b2e1      	uxtb	r1, r4
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff feb7 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006df6:	2100      	movs	r1, #0
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff feb3 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006dfe:	2400      	movs	r4, #0
 8006e00:	e006      	b.n	8006e10 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006e02:	4629      	mov	r1, r5
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff fee9 	bl	8006bdc <SUBGHZSPI_Receive>
      pData++;
 8006e0a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	b2a4      	uxth	r4, r4
 8006e10:	42bc      	cmp	r4, r7
 8006e12:	d3f6      	bcc.n	8006e02 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006e16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ff1a 	bl	8006c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e28:	68b3      	ldr	r3, [r6, #8]
 8006e2a:	b90b      	cbnz	r3, 8006e30 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006e2c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e30:	2301      	movs	r3, #1
 8006e32:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006e34:	2300      	movs	r3, #0
 8006e36:	7173      	strb	r3, [r6, #5]
}
 8006e38:	4640      	mov	r0, r8
 8006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006e3e:	f04f 0802 	mov.w	r8, #2
 8006e42:	e7f9      	b.n	8006e38 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006e44:	f04f 0802 	mov.w	r8, #2
 8006e48:	e7f6      	b.n	8006e38 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006e4a:	bf00      	nop
 8006e4c:	58000400 	.word	0x58000400

08006e50 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e56:	7980      	ldrb	r0, [r0, #6]
 8006e58:	fa5f f980 	uxtb.w	r9, r0
 8006e5c:	f1b9 0f01 	cmp.w	r9, #1
 8006e60:	d143      	bne.n	8006eea <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006e62:	4688      	mov	r8, r1
 8006e64:	4617      	mov	r7, r2
 8006e66:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006e68:	796b      	ldrb	r3, [r5, #5]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d040      	beq.n	8006ef0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e72:	4628      	mov	r0, r5
 8006e74:	f7ff ff1e 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006e78:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006e7c:	d005      	beq.n	8006e8a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006e7e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006e82:	d002      	beq.n	8006e8a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	712b      	strb	r3, [r5, #4]
 8006e88:	e001      	b.n	8006e8e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006e90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006e94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f7ff fe60 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	e005      	b.n	8006eb4 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006ea8:	5d39      	ldrb	r1, [r7, r4]
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7ff fe5a 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	b2a4      	uxth	r4, r4
 8006eb4:	42b4      	cmp	r4, r6
 8006eb6:	d3f7      	bcc.n	8006ea8 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006eb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006eba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006ec6:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006eca:	d10a      	bne.n	8006ee2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ecc:	68ab      	ldr	r3, [r5, #8]
 8006ece:	b90b      	cbnz	r3, 8006ed4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8006ed0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	716b      	strb	r3, [r5, #5]
}
 8006edc:	4648      	mov	r0, r9
 8006ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7ff feba 	bl	8006c5c <SUBGHZ_WaitOnBusy>
 8006ee8:	e7f0      	b.n	8006ecc <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006eea:	f04f 0902 	mov.w	r9, #2
 8006eee:	e7f5      	b.n	8006edc <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006ef0:	f04f 0902 	mov.w	r9, #2
 8006ef4:	e7f2      	b.n	8006edc <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006ef6:	bf00      	nop
 8006ef8:	58000400 	.word	0x58000400

08006efc <HAL_SUBGHZ_ExecGetCmd>:
{
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f02:	7980      	ldrb	r0, [r0, #6]
 8006f04:	fa5f f880 	uxtb.w	r8, r0
 8006f08:	f1b8 0f01 	cmp.w	r8, #1
 8006f0c:	d139      	bne.n	8006f82 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4615      	mov	r5, r2
 8006f12:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006f14:	7973      	ldrb	r3, [r6, #5]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d036      	beq.n	8006f88 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff fec8 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f24:	4a1a      	ldr	r2, [pc, #104]	; (8006f90 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006f26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f32:	4621      	mov	r1, r4
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff fe15 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff fe11 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f42:	2400      	movs	r4, #0
 8006f44:	e006      	b.n	8006f54 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f46:	4629      	mov	r1, r5
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7ff fe47 	bl	8006bdc <SUBGHZSPI_Receive>
      pData++;
 8006f4e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006f50:	3401      	adds	r4, #1
 8006f52:	b2a4      	uxth	r4, r4
 8006f54:	42bc      	cmp	r4, r7
 8006f56:	d3f6      	bcc.n	8006f46 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f58:	4a0d      	ldr	r2, [pc, #52]	; (8006f90 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006f5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff fe78 	bl	8006c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f6c:	68b3      	ldr	r3, [r6, #8]
 8006f6e:	b90b      	cbnz	r3, 8006f74 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006f70:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f74:	2301      	movs	r3, #1
 8006f76:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	7173      	strb	r3, [r6, #5]
}
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006f82:	f04f 0802 	mov.w	r8, #2
 8006f86:	e7f9      	b.n	8006f7c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006f88:	f04f 0802 	mov.w	r8, #2
 8006f8c:	e7f6      	b.n	8006f7c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006f8e:	bf00      	nop
 8006f90:	58000400 	.word	0x58000400

08006f94 <HAL_SUBGHZ_IRQHandler>:
{
 8006f94:	b530      	push	{r4, r5, lr}
 8006f96:	b083      	sub	sp, #12
 8006f98:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	aa01      	add	r2, sp, #4
 8006fa4:	2112      	movs	r1, #18
 8006fa6:	f7ff ffa9 	bl	8006efc <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006faa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006fae:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006fb2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	aa01      	add	r2, sp, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff ff47 	bl	8006e50 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006fc2:	f014 0f01 	tst.w	r4, #1
 8006fc6:	d123      	bne.n	8007010 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006fc8:	f014 0f02 	tst.w	r4, #2
 8006fcc:	d124      	bne.n	8007018 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006fce:	f014 0f04 	tst.w	r4, #4
 8006fd2:	d125      	bne.n	8007020 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006fd4:	f014 0f08 	tst.w	r4, #8
 8006fd8:	d126      	bne.n	8007028 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006fda:	f014 0f10 	tst.w	r4, #16
 8006fde:	d127      	bne.n	8007030 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006fe0:	f014 0f20 	tst.w	r4, #32
 8006fe4:	d128      	bne.n	8007038 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006fe6:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006fea:	d129      	bne.n	8007040 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006fec:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006ff0:	d006      	beq.n	8007000 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006ff2:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006ff6:	d027      	beq.n	8007048 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f00d fd6e 	bl	8014adc <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007000:	f414 7f00 	tst.w	r4, #512	; 0x200
 8007004:	d125      	bne.n	8007052 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007006:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800700a:	d126      	bne.n	800705a <HAL_SUBGHZ_IRQHandler+0xc6>
}
 800700c:	b003      	add	sp, #12
 800700e:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007010:	4628      	mov	r0, r5
 8007012:	f00d fd4b 	bl	8014aac <HAL_SUBGHZ_TxCpltCallback>
 8007016:	e7d7      	b.n	8006fc8 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007018:	4628      	mov	r0, r5
 800701a:	f00d fd4f 	bl	8014abc <HAL_SUBGHZ_RxCpltCallback>
 800701e:	e7d6      	b.n	8006fce <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007020:	4628      	mov	r0, r5
 8007022:	f00d fd7f 	bl	8014b24 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007026:	e7d5      	b.n	8006fd4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007028:	4628      	mov	r0, r5
 800702a:	f00d fd83 	bl	8014b34 <HAL_SUBGHZ_SyncWordValidCallback>
 800702e:	e7d4      	b.n	8006fda <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007030:	4628      	mov	r0, r5
 8007032:	f00d fd87 	bl	8014b44 <HAL_SUBGHZ_HeaderValidCallback>
 8007036:	e7d3      	b.n	8006fe0 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007038:	4628      	mov	r0, r5
 800703a:	f00d fd6b 	bl	8014b14 <HAL_SUBGHZ_HeaderErrorCallback>
 800703e:	e7d2      	b.n	8006fe6 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007040:	4628      	mov	r0, r5
 8007042:	f00d fd43 	bl	8014acc <HAL_SUBGHZ_CRCErrorCallback>
 8007046:	e7d1      	b.n	8006fec <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007048:	2100      	movs	r1, #0
 800704a:	4628      	mov	r0, r5
 800704c:	f00d fd46 	bl	8014adc <HAL_SUBGHZ_CADStatusCallback>
 8007050:	e7d6      	b.n	8007000 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007052:	4628      	mov	r0, r5
 8007054:	f00d fd54 	bl	8014b00 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007058:	e7d5      	b.n	8007006 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800705a:	4628      	mov	r0, r5
 800705c:	f00d fd7a 	bl	8014b54 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8007060:	e7d4      	b.n	800700c <HAL_SUBGHZ_IRQHandler+0x78>
	...

08007064 <HAL_SUBGHZ_WriteBuffer>:
{
 8007064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007068:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800706a:	7980      	ldrb	r0, [r0, #6]
 800706c:	fa5f f880 	uxtb.w	r8, r0
 8007070:	f1b8 0f01 	cmp.w	r8, #1
 8007074:	d138      	bne.n	80070e8 <HAL_SUBGHZ_WriteBuffer+0x84>
 8007076:	460c      	mov	r4, r1
 8007078:	4617      	mov	r7, r2
 800707a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800707c:	796b      	ldrb	r3, [r5, #5]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d035      	beq.n	80070ee <HAL_SUBGHZ_WriteBuffer+0x8a>
 8007082:	2301      	movs	r3, #1
 8007084:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007086:	4628      	mov	r0, r5
 8007088:	f7ff fe14 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800708c:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800708e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800709a:	210e      	movs	r1, #14
 800709c:	4628      	mov	r0, r5
 800709e:	f7ff fd61 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff fd5d 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070aa:	2400      	movs	r4, #0
 80070ac:	e005      	b.n	80070ba <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070ae:	5d39      	ldrb	r1, [r7, r4]
 80070b0:	4628      	mov	r0, r5
 80070b2:	f7ff fd57 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070b6:	3401      	adds	r4, #1
 80070b8:	b2a4      	uxth	r4, r4
 80070ba:	42b4      	cmp	r4, r6
 80070bc:	d3f7      	bcc.n	80070ae <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070be:	4a0d      	ldr	r2, [pc, #52]	; (80070f4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80070c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070cc:	4628      	mov	r0, r5
 80070ce:	f7ff fdc5 	bl	8006c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070d2:	68ab      	ldr	r3, [r5, #8]
 80070d4:	b90b      	cbnz	r3, 80070da <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80070d6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070da:	2301      	movs	r3, #1
 80070dc:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80070de:	2300      	movs	r3, #0
 80070e0:	716b      	strb	r3, [r5, #5]
}
 80070e2:	4640      	mov	r0, r8
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80070e8:	f04f 0802 	mov.w	r8, #2
 80070ec:	e7f9      	b.n	80070e2 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80070ee:	f04f 0802 	mov.w	r8, #2
 80070f2:	e7f6      	b.n	80070e2 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80070f4:	58000400 	.word	0x58000400

080070f8 <HAL_SUBGHZ_ReadBuffer>:
{
 80070f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070fe:	7980      	ldrb	r0, [r0, #6]
 8007100:	fa5f f880 	uxtb.w	r8, r0
 8007104:	f1b8 0f01 	cmp.w	r8, #1
 8007108:	d13d      	bne.n	8007186 <HAL_SUBGHZ_ReadBuffer+0x8e>
 800710a:	460c      	mov	r4, r1
 800710c:	4615      	mov	r5, r2
 800710e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007110:	7973      	ldrb	r3, [r6, #5]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d03a      	beq.n	800718c <HAL_SUBGHZ_ReadBuffer+0x94>
 8007116:	2301      	movs	r3, #1
 8007118:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff fdca 	bl	8006cb4 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007122:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007126:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800712a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800712e:	211e      	movs	r1, #30
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff fd17 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007136:	4621      	mov	r1, r4
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff fd13 	bl	8006b64 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800713e:	2100      	movs	r1, #0
 8007140:	4630      	mov	r0, r6
 8007142:	f7ff fd0f 	bl	8006b64 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007146:	2400      	movs	r4, #0
 8007148:	e006      	b.n	8007158 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800714a:	4629      	mov	r1, r5
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fd45 	bl	8006bdc <SUBGHZSPI_Receive>
      pData++;
 8007152:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007154:	3401      	adds	r4, #1
 8007156:	b2a4      	uxth	r4, r4
 8007158:	42bc      	cmp	r4, r7
 800715a:	d3f6      	bcc.n	800714a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800715c:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800715e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff fd76 	bl	8006c5c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007170:	68b3      	ldr	r3, [r6, #8]
 8007172:	b90b      	cbnz	r3, 8007178 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007174:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007178:	2301      	movs	r3, #1
 800717a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800717c:	2300      	movs	r3, #0
 800717e:	7173      	strb	r3, [r6, #5]
}
 8007180:	4640      	mov	r0, r8
 8007182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007186:	f04f 0802 	mov.w	r8, #2
 800718a:	e7f9      	b.n	8007180 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800718c:	f04f 0802 	mov.w	r8, #2
 8007190:	e7f6      	b.n	8007180 <HAL_SUBGHZ_ReadBuffer+0x88>
 8007192:	bf00      	nop
 8007194:	58000400 	.word	0x58000400

08007198 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007198:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	e852 3f00 	ldrex	r3, [r2]
 800719e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	e842 3100 	strex	r1, r3, [r2]
 80071a6:	2900      	cmp	r1, #0
 80071a8:	d1f6      	bne.n	8007198 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80071aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	f102 0308 	add.w	r3, r2, #8
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	3208      	adds	r2, #8
 80071ba:	e842 3100 	strex	r1, r3, [r2]
 80071be:	2900      	cmp	r1, #0
 80071c0:	d1f3      	bne.n	80071aa <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c2:	2320      	movs	r3, #32
 80071c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80071c8:	4770      	bx	lr

080071ca <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	e852 3f00 	ldrex	r3, [r2]
 80071d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	e842 3100 	strex	r1, r3, [r2]
 80071d8:	2900      	cmp	r1, #0
 80071da:	d1f6      	bne.n	80071ca <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	f102 0308 	add.w	r3, r2, #8
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	3208      	adds	r2, #8
 80071f0:	e842 3100 	strex	r1, r3, [r2]
 80071f4:	2900      	cmp	r1, #0
 80071f6:	d1f1      	bne.n	80071dc <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d006      	beq.n	800720c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fe:	2320      	movs	r3, #32
 8007200:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007204:	2300      	movs	r3, #0
 8007206:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007208:	6743      	str	r3, [r0, #116]	; 0x74
}
 800720a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	e852 3f00 	ldrex	r3, [r2]
 8007212:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	e842 3100 	strex	r1, r3, [r2]
 800721a:	2900      	cmp	r1, #0
 800721c:	d1f6      	bne.n	800720c <UART_EndRxTransfer+0x42>
 800721e:	e7ee      	b.n	80071fe <UART_EndRxTransfer+0x34>

08007220 <HAL_UART_Transmit_DMA>:
{
 8007220:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007222:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8007226:	2a20      	cmp	r2, #32
 8007228:	d13d      	bne.n	80072a6 <HAL_UART_Transmit_DMA+0x86>
{
 800722a:	b510      	push	{r4, lr}
 800722c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800722e:	2900      	cmp	r1, #0
 8007230:	d03b      	beq.n	80072aa <HAL_UART_Transmit_DMA+0x8a>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03b      	beq.n	80072ae <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007236:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007238:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800723c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	2200      	movs	r2, #0
 8007242:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007246:	2221      	movs	r2, #33	; 0x21
 8007248:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 800724c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800724e:	b1ca      	cbz	r2, 8007284 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007250:	4918      	ldr	r1, [pc, #96]	; (80072b4 <HAL_UART_Transmit_DMA+0x94>)
 8007252:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007254:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007256:	4918      	ldr	r1, [pc, #96]	; (80072b8 <HAL_UART_Transmit_DMA+0x98>)
 8007258:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800725a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800725c:	4917      	ldr	r1, [pc, #92]	; (80072bc <HAL_UART_Transmit_DMA+0x9c>)
 800725e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007260:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8007262:	2100      	movs	r1, #0
 8007264:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007266:	6802      	ldr	r2, [r0, #0]
 8007268:	3228      	adds	r2, #40	; 0x28
 800726a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800726c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800726e:	f7fc fe1f 	bl	8003eb0 <HAL_DMA_Start_IT>
 8007272:	b138      	cbz	r0, 8007284 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007274:	2310      	movs	r3, #16
 8007276:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800727a:	2320      	movs	r3, #32
 800727c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8007280:	2001      	movs	r0, #1
 8007282:	e00f      	b.n	80072a4 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800728a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	f102 0308 	add.w	r3, r2, #8
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	3208      	adds	r2, #8
 800729a:	e842 3100 	strex	r1, r3, [r2]
 800729e:	2900      	cmp	r1, #0
 80072a0:	d1f3      	bne.n	800728a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80072a2:	2000      	movs	r0, #0
}
 80072a4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80072a6:	2002      	movs	r0, #2
}
 80072a8:	4770      	bx	lr
      return HAL_ERROR;
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7fa      	b.n	80072a4 <HAL_UART_Transmit_DMA+0x84>
 80072ae:	2001      	movs	r0, #1
 80072b0:	e7f8      	b.n	80072a4 <HAL_UART_Transmit_DMA+0x84>
 80072b2:	bf00      	nop
 80072b4:	080072c1 	.word	0x080072c1
 80072b8:	0800732f 	.word	0x0800732f
 80072bc:	0800733b 	.word	0x0800733b

080072c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072c0:	b508      	push	{r3, lr}
 80072c2:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072c4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f013 0f20 	tst.w	r3, #32
 80072ce:	d118      	bne.n	8007302 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	f102 0308 	add.w	r3, r2, #8
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	3208      	adds	r2, #8
 80072e6:	e842 3100 	strex	r1, r3, [r2]
 80072ea:	2900      	cmp	r1, #0
 80072ec:	d1f3      	bne.n	80072d6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	e852 3f00 	ldrex	r3, [r2]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	e842 3100 	strex	r1, r3, [r2]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d1f6      	bne.n	80072ee <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007300:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007302:	f7fa ff59 	bl	80021b8 <HAL_UART_TxCpltCallback>
}
 8007306:	e7fb      	b.n	8007300 <UART_DMATransmitCplt+0x40>

08007308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007308:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800730a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	e852 3f00 	ldrex	r3, [r2]
 8007310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	e842 3100 	strex	r1, r3, [r2]
 8007318:	2900      	cmp	r1, #0
 800731a:	d1f6      	bne.n	800730a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800731c:	2320      	movs	r3, #32
 800731e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007326:	f7fa ff47 	bl	80021b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800732a:	bd08      	pop	{r3, pc}

0800732c <HAL_UART_TxHalfCpltCallback>:
}
 800732c:	4770      	bx	lr

0800732e <UART_DMATxHalfCplt>:
{
 800732e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007330:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007332:	f7ff fffb 	bl	800732c <HAL_UART_TxHalfCpltCallback>
}
 8007336:	bd08      	pop	{r3, pc}

08007338 <HAL_UART_ErrorCallback>:
}
 8007338:	4770      	bx	lr

0800733a <UART_DMAError>:
{
 800733a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800733c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800733e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007342:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800734e:	d001      	beq.n	8007354 <UART_DMAError+0x1a>
 8007350:	2a21      	cmp	r2, #33	; 0x21
 8007352:	d010      	beq.n	8007376 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f013 0f40 	tst.w	r3, #64	; 0x40
 800735c:	d001      	beq.n	8007362 <UART_DMAError+0x28>
 800735e:	2d22      	cmp	r5, #34	; 0x22
 8007360:	d010      	beq.n	8007384 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007362:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007366:	f043 0310 	orr.w	r3, r3, #16
 800736a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff ffe2 	bl	8007338 <HAL_UART_ErrorCallback>
}
 8007374:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff ff0b 	bl	8007198 <UART_EndTxTransfer>
 8007382:	e7e7      	b.n	8007354 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800738a:	4620      	mov	r0, r4
 800738c:	f7ff ff1d 	bl	80071ca <UART_EndRxTransfer>
 8007390:	e7e7      	b.n	8007362 <UART_DMAError+0x28>

08007392 <UART_DMAAbortOnError>:
{
 8007392:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007394:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800739c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80073a0:	f7ff ffca 	bl	8007338 <HAL_UART_ErrorCallback>
}
 80073a4:	bd08      	pop	{r3, pc}

080073a6 <HAL_UARTEx_RxEventCallback>:
}
 80073a6:	4770      	bx	lr

080073a8 <HAL_UART_IRQHandler>:
{
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073ac:	6801      	ldr	r1, [r0, #0]
 80073ae:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b0:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b2:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073b4:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80073b8:	401a      	ands	r2, r3
 80073ba:	d108      	bne.n	80073ce <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073bc:	f013 0f20 	tst.w	r3, #32
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073c2:	f010 0f20 	tst.w	r0, #32
 80073c6:	d134      	bne.n	8007432 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073c8:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80073cc:	d131      	bne.n	8007432 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80073ce:	b12a      	cbz	r2, 80073dc <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073d0:	4a99      	ldr	r2, [pc, #612]	; (8007638 <HAL_UART_IRQHandler+0x290>)
 80073d2:	402a      	ands	r2, r5
 80073d4:	d133      	bne.n	800743e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073d6:	4e99      	ldr	r6, [pc, #612]	; (800763c <HAL_UART_IRQHandler+0x294>)
 80073d8:	4230      	tst	r0, r6
 80073da:	d130      	bne.n	800743e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80073de:	2a01      	cmp	r2, #1
 80073e0:	f000 80c6 	beq.w	8007570 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80073e8:	d003      	beq.n	80073f2 <HAL_UART_IRQHandler+0x4a>
 80073ea:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80073ee:	f040 8165 	bne.w	80076bc <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80073f6:	d007      	beq.n	8007408 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80073fc:	f040 8165 	bne.w	80076ca <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007400:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007404:	f040 8161 	bne.w	80076ca <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007408:	f013 0f40 	tst.w	r3, #64	; 0x40
 800740c:	d003      	beq.n	8007416 <HAL_UART_IRQHandler+0x6e>
 800740e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007412:	f040 8161 	bne.w	80076d8 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007416:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800741a:	d003      	beq.n	8007424 <HAL_UART_IRQHandler+0x7c>
 800741c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007420:	f040 815e 	bne.w	80076e0 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007424:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007428:	d002      	beq.n	8007430 <HAL_UART_IRQHandler+0x88>
 800742a:	2800      	cmp	r0, #0
 800742c:	f2c0 815c 	blt.w	80076e8 <HAL_UART_IRQHandler+0x340>
}
 8007430:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007432:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0fb      	beq.n	8007430 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007438:	4620      	mov	r0, r4
 800743a:	4798      	blx	r3
      return;
 800743c:	e7f8      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800743e:	f013 0f01 	tst.w	r3, #1
 8007442:	d009      	beq.n	8007458 <HAL_UART_IRQHandler+0xb0>
 8007444:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007448:	d006      	beq.n	8007458 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800744a:	2601      	movs	r6, #1
 800744c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800744e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007452:	4331      	orrs	r1, r6
 8007454:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007458:	f013 0f02 	tst.w	r3, #2
 800745c:	d00b      	beq.n	8007476 <HAL_UART_IRQHandler+0xce>
 800745e:	f015 0f01 	tst.w	r5, #1
 8007462:	d008      	beq.n	8007476 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007464:	6821      	ldr	r1, [r4, #0]
 8007466:	2602      	movs	r6, #2
 8007468:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800746a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800746e:	f041 0104 	orr.w	r1, r1, #4
 8007472:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007476:	f013 0f04 	tst.w	r3, #4
 800747a:	d00b      	beq.n	8007494 <HAL_UART_IRQHandler+0xec>
 800747c:	f015 0f01 	tst.w	r5, #1
 8007480:	d008      	beq.n	8007494 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007482:	6821      	ldr	r1, [r4, #0]
 8007484:	2604      	movs	r6, #4
 8007486:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007488:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800748c:	f041 0102 	orr.w	r1, r1, #2
 8007490:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007494:	f013 0f08 	tst.w	r3, #8
 8007498:	d00b      	beq.n	80074b2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800749a:	f010 0f20 	tst.w	r0, #32
 800749e:	d100      	bne.n	80074a2 <HAL_UART_IRQHandler+0xfa>
 80074a0:	b13a      	cbz	r2, 80074b2 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	2108      	movs	r1, #8
 80074a6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074ac:	430a      	orrs	r2, r1
 80074ae:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80074b6:	d00c      	beq.n	80074d2 <HAL_UART_IRQHandler+0x12a>
 80074b8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80074bc:	d009      	beq.n	80074d2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074c4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074c6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074ca:	f042 0220 	orr.w	r2, r2, #32
 80074ce:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d0aa      	beq.n	8007430 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074da:	f013 0f20 	tst.w	r3, #32
 80074de:	d009      	beq.n	80074f4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074e0:	f010 0f20 	tst.w	r0, #32
 80074e4:	d102      	bne.n	80074ec <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074e6:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80074ea:	d003      	beq.n	80074f4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80074ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80074ee:	b10b      	cbz	r3, 80074f4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80074f0:	4620      	mov	r0, r4
 80074f2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80074f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007500:	d102      	bne.n	8007508 <HAL_UART_IRQHandler+0x160>
 8007502:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007506:	d02c      	beq.n	8007562 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff fe5e 	bl	80071ca <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007516:	d020      	beq.n	800755a <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007518:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	f102 0308 	add.w	r3, r2, #8
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	3208      	adds	r2, #8
 8007528:	e842 3100 	strex	r1, r3, [r2]
 800752c:	2900      	cmp	r1, #0
 800752e:	d1f3      	bne.n	8007518 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007530:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007534:	b16b      	cbz	r3, 8007552 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007536:	4a42      	ldr	r2, [pc, #264]	; (8007640 <HAL_UART_IRQHandler+0x298>)
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800753a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800753e:	f7fc fd3d 	bl	8003fbc <HAL_DMA_Abort_IT>
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f af74 	beq.w	8007430 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007548:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800754c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800754e:	4798      	blx	r3
 8007550:	e76e      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff fef0 	bl	8007338 <HAL_UART_ErrorCallback>
 8007558:	e76a      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800755a:	4620      	mov	r0, r4
 800755c:	f7ff feec 	bl	8007338 <HAL_UART_ErrorCallback>
 8007560:	e766      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007562:	4620      	mov	r0, r4
 8007564:	f7ff fee8 	bl	8007338 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	2300      	movs	r3, #0
 800756a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800756e:	e75f      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007570:	f013 0f10 	tst.w	r3, #16
 8007574:	f43f af36 	beq.w	80073e4 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007578:	f010 0f10 	tst.w	r0, #16
 800757c:	f43f af32 	beq.w	80073e4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007580:	2310      	movs	r3, #16
 8007582:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f013 0f40 	tst.w	r3, #64	; 0x40
 800758c:	d05a      	beq.n	8007644 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007598:	2b00      	cmp	r3, #0
 800759a:	f43f af49 	beq.w	8007430 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800759e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80075a2:	4299      	cmp	r1, r3
 80075a4:	f67f af44 	bls.w	8007430 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80075a8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075ac:	6813      	ldr	r3, [r2, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f013 0f20 	tst.w	r3, #32
 80075b4:	d132      	bne.n	800761c <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	e852 3f00 	ldrex	r3, [r2]
 80075bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	e842 3100 	strex	r1, r3, [r2]
 80075c4:	2900      	cmp	r1, #0
 80075c6:	d1f6      	bne.n	80075b6 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	f102 0308 	add.w	r3, r2, #8
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	3208      	adds	r2, #8
 80075d8:	e842 3100 	strex	r1, r3, [r2]
 80075dc:	2900      	cmp	r1, #0
 80075de:	d1f3      	bne.n	80075c8 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	f102 0308 	add.w	r3, r2, #8
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	3208      	adds	r2, #8
 80075f0:	e842 3100 	strex	r1, r3, [r2]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d1f3      	bne.n	80075e0 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 80075f8:	2320      	movs	r3, #32
 80075fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fe:	2300      	movs	r3, #0
 8007600:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	e852 3f00 	ldrex	r3, [r2]
 8007608:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	e842 3100 	strex	r1, r3, [r2]
 8007610:	2900      	cmp	r1, #0
 8007612:	d1f6      	bne.n	8007602 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007614:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007618:	f7fc fc96 	bl	8003f48 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800761c:	2302      	movs	r3, #2
 800761e:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007620:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007624:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007628:	b29b      	uxth	r3, r3
 800762a:	1ac9      	subs	r1, r1, r3
 800762c:	b289      	uxth	r1, r1
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff feb9 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
      return;
 8007634:	e6fc      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
 8007636:	bf00      	nop
 8007638:	10000001 	.word	0x10000001
 800763c:	04000120 	.word	0x04000120
 8007640:	08007393 	.word	0x08007393
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007644:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007648:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800764c:	b29b      	uxth	r3, r3
 800764e:	1ac9      	subs	r1, r1, r3
 8007650:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007652:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	f43f aee9 	beq.w	8007430 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800765e:	2900      	cmp	r1, #0
 8007660:	f43f aee6 	beq.w	8007430 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007664:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	e852 3f00 	ldrex	r3, [r2]
 800766a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	e842 3000 	strex	r0, r3, [r2]
 8007672:	2800      	cmp	r0, #0
 8007674:	d1f6      	bne.n	8007664 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007676:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	f102 0308 	add.w	r3, r2, #8
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007684:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	3208      	adds	r2, #8
 800768a:	e842 3000 	strex	r0, r3, [r2]
 800768e:	2800      	cmp	r0, #0
 8007690:	d1f1      	bne.n	8007676 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8007692:	2320      	movs	r3, #32
 8007694:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	2300      	movs	r3, #0
 800769a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800769c:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	e852 3f00 	ldrex	r3, [r2]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	e842 3000 	strex	r0, r3, [r2]
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d1f6      	bne.n	800769e <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076b0:	2302      	movs	r3, #2
 80076b2:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff fe76 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
      return;
 80076ba:	e6b9      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80076c0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fe60 	bl	8008388 <HAL_UARTEx_WakeupCallback>
    return;
 80076c8:	e6b2      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80076ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f43f aeaf 	beq.w	8007430 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80076d2:	4620      	mov	r0, r4
 80076d4:	4798      	blx	r3
    return;
 80076d6:	e6ab      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fe15 	bl	8007308 <UART_EndTransmit_IT>
    return;
 80076de:	e6a7      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fe53 	bl	800838c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80076e6:	e6a3      	b.n	8007430 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fe4e 	bl	800838a <HAL_UARTEx_RxFifoFullCallback>
    return;
 80076ee:	e69f      	b.n	8007430 <HAL_UART_IRQHandler+0x88>

080076f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076f0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80076f2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80076fa:	2a22      	cmp	r2, #34	; 0x22
 80076fc:	d005      	beq.n	800770a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076fe:	6802      	ldr	r2, [r0, #0]
 8007700:	6993      	ldr	r3, [r2, #24]
 8007702:	f043 0308 	orr.w	r3, r3, #8
 8007706:	6193      	str	r3, [r2, #24]
  }
}
 8007708:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800770a:	6802      	ldr	r2, [r0, #0]
 800770c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800770e:	b2db      	uxtb	r3, r3
 8007710:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007712:	400b      	ands	r3, r1
 8007714:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8007716:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007718:	3301      	adds	r3, #1
 800771a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800771c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29b      	uxth	r3, r3
 8007726:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800772a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e9      	bne.n	8007708 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007734:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	e852 3f00 	ldrex	r3, [r2]
 800773a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	e842 3100 	strex	r1, r3, [r2]
 8007742:	2900      	cmp	r1, #0
 8007744:	d1f6      	bne.n	8007734 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	f102 0308 	add.w	r3, r2, #8
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	3208      	adds	r2, #8
 8007756:	e842 3100 	strex	r1, r3, [r2]
 800775a:	2900      	cmp	r1, #0
 800775c:	d1f3      	bne.n	8007746 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800775e:	2320      	movs	r3, #32
 8007760:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007768:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800776a:	6803      	ldr	r3, [r0, #0]
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <UART_RxISR_8BIT+0xd8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00c      	beq.n	800778c <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007778:	d008      	beq.n	800778c <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800777a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	e852 3f00 	ldrex	r3, [r2]
 8007780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	e842 3100 	strex	r1, r3, [r2]
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f6      	bne.n	800777a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d116      	bne.n	80077c0 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	2300      	movs	r3, #0
 8007794:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	e852 3f00 	ldrex	r3, [r2]
 800779c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	e842 3100 	strex	r1, r3, [r2]
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d1f6      	bne.n	8007796 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a8:	6803      	ldr	r3, [r0, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	f012 0f10 	tst.w	r2, #16
 80077b0:	d001      	beq.n	80077b6 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b2:	2210      	movs	r2, #16
 80077b4:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80077ba:	f7ff fdf4 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
 80077be:	e7a3      	b.n	8007708 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80077c0:	f7fa fd0a 	bl	80021d8 <HAL_UART_RxCpltCallback>
 80077c4:	e7a0      	b.n	8007708 <UART_RxISR_8BIT+0x18>
 80077c6:	bf00      	nop
 80077c8:	40008000 	.word	0x40008000

080077cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077cc:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077ce:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80077d6:	2b22      	cmp	r3, #34	; 0x22
 80077d8:	d005      	beq.n	80077e6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077da:	6802      	ldr	r2, [r0, #0]
 80077dc:	6993      	ldr	r3, [r2, #24]
 80077de:	f043 0308 	orr.w	r3, r3, #8
 80077e2:	6193      	str	r3, [r2, #24]
  }
}
 80077e4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e6:	6803      	ldr	r3, [r0, #0]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ea:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80077ec:	4013      	ands	r3, r2
 80077ee:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80077f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80077f2:	3302      	adds	r3, #2
 80077f4:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80077f6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8007804:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1ea      	bne.n	80077e4 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	e852 3f00 	ldrex	r3, [r2]
 8007814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	e842 3100 	strex	r1, r3, [r2]
 800781c:	2900      	cmp	r1, #0
 800781e:	d1f6      	bne.n	800780e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007820:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	f102 0308 	add.w	r3, r2, #8
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	3208      	adds	r2, #8
 8007830:	e842 3100 	strex	r1, r3, [r2]
 8007834:	2900      	cmp	r1, #0
 8007836:	d1f3      	bne.n	8007820 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007838:	2320      	movs	r3, #32
 800783a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007842:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007844:	6803      	ldr	r3, [r0, #0]
 8007846:	4a16      	ldr	r2, [pc, #88]	; (80078a0 <UART_RxISR_16BIT+0xd4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00c      	beq.n	8007866 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007852:	d008      	beq.n	8007866 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007854:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	e852 3f00 	ldrex	r3, [r2]
 800785a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	e842 3100 	strex	r1, r3, [r2]
 8007862:	2900      	cmp	r1, #0
 8007864:	d1f6      	bne.n	8007854 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007866:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d116      	bne.n	800789a <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	2300      	movs	r3, #0
 800786e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007870:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	e852 3f00 	ldrex	r3, [r2]
 8007876:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	e842 3100 	strex	r1, r3, [r2]
 800787e:	2900      	cmp	r1, #0
 8007880:	d1f6      	bne.n	8007870 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007882:	6803      	ldr	r3, [r0, #0]
 8007884:	69da      	ldr	r2, [r3, #28]
 8007886:	f012 0f10 	tst.w	r2, #16
 800788a:	d001      	beq.n	8007890 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788c:	2210      	movs	r2, #16
 800788e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007890:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007894:	f7ff fd87 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
 8007898:	e7a4      	b.n	80077e4 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800789a:	f7fa fc9d 	bl	80021d8 <HAL_UART_RxCpltCallback>
 800789e:	e7a1      	b.n	80077e4 <UART_RxISR_16BIT+0x18>
 80078a0:	40008000 	.word	0x40008000

080078a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80078a8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078ac:	6803      	ldr	r3, [r0, #0]
 80078ae:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80078b0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80078b4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078b8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80078bc:	2a22      	cmp	r2, #34	; 0x22
 80078be:	d005      	beq.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	f042 0208 	orr.w	r2, r2, #8
 80078c6:	619a      	str	r2, [r3, #24]
  }
}
 80078c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078cc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80078ce:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078d2:	e008      	b.n	80078e6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d14c      	bne.n	8007976 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80078dc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d04e      	beq.n	8007984 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078e6:	2f00      	cmp	r7, #0
 80078e8:	f000 809a 	beq.w	8007a20 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80078ec:	f015 0f20 	tst.w	r5, #32
 80078f0:	f000 8096 	beq.w	8007a20 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078f8:	b2f3      	uxtb	r3, r6
 80078fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80078fc:	400b      	ands	r3, r1
 80078fe:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007902:	3301      	adds	r3, #1
 8007904:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007906:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007918:	f015 0f07 	tst.w	r5, #7
 800791c:	d0de      	beq.n	80078dc <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800791e:	f015 0f01 	tst.w	r5, #1
 8007922:	d009      	beq.n	8007938 <UART_RxISR_8BIT_FIFOEN+0x94>
 8007924:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007928:	d006      	beq.n	8007938 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800792a:	2201      	movs	r2, #1
 800792c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800792e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007938:	f015 0f02 	tst.w	r5, #2
 800793c:	d00b      	beq.n	8007956 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800793e:	f018 0f01 	tst.w	r8, #1
 8007942:	d008      	beq.n	8007956 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	2202      	movs	r2, #2
 8007948:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800794a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800794e:	f043 0304 	orr.w	r3, r3, #4
 8007952:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007956:	f015 0f04 	tst.w	r5, #4
 800795a:	d0bb      	beq.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800795c:	f018 0f01 	tst.w	r8, #1
 8007960:	d0b8      	beq.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	2204      	movs	r2, #4
 8007966:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007968:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007974:	e7ae      	b.n	80078d4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff fcde 	bl	8007338 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	2300      	movs	r3, #0
 800797e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007982:	e7ab      	b.n	80078dc <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007984:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	e852 3f00 	ldrex	r3, [r2]
 800798a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	e842 3100 	strex	r1, r3, [r2]
 8007992:	2900      	cmp	r1, #0
 8007994:	d1f6      	bne.n	8007984 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007996:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	f102 0308 	add.w	r3, r2, #8
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	3208      	adds	r2, #8
 80079aa:	e842 3100 	strex	r1, r3, [r2]
 80079ae:	2900      	cmp	r1, #0
 80079b0:	d1f1      	bne.n	8007996 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80079b2:	2320      	movs	r3, #32
 80079b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079bc:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	4a29      	ldr	r2, [pc, #164]	; (8007a68 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d003      	beq.n	80079ce <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80079cc:	d106      	bne.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d00d      	beq.n	80079f0 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7fa fbff 	bl	80021d8 <HAL_UART_RxCpltCallback>
 80079da:	e784      	b.n	80078e6 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	e852 3f00 	ldrex	r3, [r2]
 80079e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	e842 3100 	strex	r1, r3, [r2]
 80079ea:	2900      	cmp	r1, #0
 80079ec:	d1f6      	bne.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x138>
 80079ee:	e7ee      	b.n	80079ce <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f0:	2300      	movs	r3, #0
 80079f2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	e852 3f00 	ldrex	r3, [r2]
 80079fa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	e842 3100 	strex	r1, r3, [r2]
 8007a02:	2900      	cmp	r1, #0
 8007a04:	d1f6      	bne.n	80079f4 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	69da      	ldr	r2, [r3, #28]
 8007a0a:	f012 0f10 	tst.w	r2, #16
 8007a0e:	d001      	beq.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a10:	2210      	movs	r2, #16
 8007a12:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a14:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f7ff fcc4 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
 8007a1e:	e762      	b.n	80078e6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007a20:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007a24:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f43f af4e 	beq.w	80078c8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007a2c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007a30:	429a      	cmp	r2, r3
 8007a32:	f67f af49 	bls.w	80078c8 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f102 0308 	add.w	r3, r2, #8
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	3208      	adds	r2, #8
 8007a46:	e842 3100 	strex	r1, r3, [r2]
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d1f3      	bne.n	8007a36 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007a50:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	e852 3f00 	ldrex	r3, [r2]
 8007a58:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	e842 3100 	strex	r1, r3, [r2]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d1f6      	bne.n	8007a52 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007a64:	e730      	b.n	80078c8 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007a66:	bf00      	nop
 8007a68:	40008000 	.word	0x40008000
 8007a6c:	080076f1 	.word	0x080076f1

08007a70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a74:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a78:	6803      	ldr	r3, [r0, #0]
 8007a7a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a7c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a80:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a84:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007a88:	2a22      	cmp	r2, #34	; 0x22
 8007a8a:	d005      	beq.n	8007a98 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	f042 0208 	orr.w	r2, r2, #8
 8007a92:	619a      	str	r2, [r3, #24]
  }
}
 8007a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a98:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8007a9a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a9e:	e008      	b.n	8007ab2 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aa0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d14b      	bne.n	8007b40 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007aa8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04d      	beq.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	f000 8099 	beq.w	8007bea <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007ab8:	f015 0f20 	tst.w	r5, #32
 8007abc:	f000 8095 	beq.w	8007bea <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ac4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ac6:	4033      	ands	r3, r6
 8007ac8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8007aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007acc:	3302      	adds	r3, #2
 8007ace:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007ad0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ae2:	f015 0f07 	tst.w	r5, #7
 8007ae6:	d0df      	beq.n	8007aa8 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ae8:	f015 0f01 	tst.w	r5, #1
 8007aec:	d009      	beq.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007aee:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007af2:	d006      	beq.n	8007b02 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007af4:	2201      	movs	r2, #1
 8007af6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007af8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b02:	f015 0f02 	tst.w	r5, #2
 8007b06:	d00b      	beq.n	8007b20 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8007b08:	f018 0f01 	tst.w	r8, #1
 8007b0c:	d008      	beq.n	8007b20 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	2202      	movs	r2, #2
 8007b12:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b14:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b18:	f043 0304 	orr.w	r3, r3, #4
 8007b1c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b20:	f015 0f04 	tst.w	r5, #4
 8007b24:	d0bc      	beq.n	8007aa0 <UART_RxISR_16BIT_FIFOEN+0x30>
 8007b26:	f018 0f01 	tst.w	r8, #1
 8007b2a:	d0b9      	beq.n	8007aa0 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	2204      	movs	r2, #4
 8007b30:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007b3e:	e7af      	b.n	8007aa0 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7ff fbf9 	bl	8007338 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007b4c:	e7ac      	b.n	8007aa8 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	e852 3f00 	ldrex	r3, [r2]
 8007b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	e842 3100 	strex	r1, r3, [r2]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d1f6      	bne.n	8007b4e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b60:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	f102 0308 	add.w	r3, r2, #8
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	3208      	adds	r2, #8
 8007b74:	e842 3100 	strex	r1, r3, [r2]
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	d1f1      	bne.n	8007b60 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b86:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	4a29      	ldr	r2, [pc, #164]	; (8007c30 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007b96:	d106      	bne.n	8007ba6 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d00d      	beq.n	8007bba <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7fa fb1a 	bl	80021d8 <HAL_UART_RxCpltCallback>
 8007ba4:	e785      	b.n	8007ab2 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ba6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	e852 3f00 	ldrex	r3, [r2]
 8007bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	e842 3100 	strex	r1, r3, [r2]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d1f6      	bne.n	8007ba6 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007bb8:	e7ee      	b.n	8007b98 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	e852 3f00 	ldrex	r3, [r2]
 8007bc4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	e842 3100 	strex	r1, r3, [r2]
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d1f6      	bne.n	8007bbe <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	f012 0f10 	tst.w	r2, #16
 8007bd8:	d001      	beq.n	8007bde <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bda:	2210      	movs	r2, #16
 8007bdc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bde:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fbdf 	bl	80073a6 <HAL_UARTEx_RxEventCallback>
 8007be8:	e763      	b.n	8007ab2 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007bea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007bee:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f43f af4f 	beq.w	8007a94 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007bf6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	f67f af4a 	bls.w	8007a94 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	f102 0308 	add.w	r3, r2, #8
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	3208      	adds	r2, #8
 8007c10:	e842 3100 	strex	r1, r3, [r2]
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d1f3      	bne.n	8007c00 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007c18:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007c1a:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	e852 3f00 	ldrex	r3, [r2]
 8007c22:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	e842 3100 	strex	r1, r3, [r2]
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d1f6      	bne.n	8007c1c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007c2e:	e731      	b.n	8007a94 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007c30:	40008000 	.word	0x40008000
 8007c34:	080077cd 	.word	0x080077cd

08007c38 <UART_SetConfig>:
{
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c3c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c3e:	6883      	ldr	r3, [r0, #8]
 8007c40:	6902      	ldr	r2, [r0, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	6942      	ldr	r2, [r0, #20]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	69c2      	ldr	r2, [r0, #28]
 8007c4a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c4c:	6808      	ldr	r0, [r1, #0]
 8007c4e:	4a9d      	ldr	r2, [pc, #628]	; (8007ec4 <UART_SetConfig+0x28c>)
 8007c50:	4002      	ands	r2, r0
 8007c52:	431a      	orrs	r2, r3
 8007c54:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c56:	6822      	ldr	r2, [r4, #0]
 8007c58:	6853      	ldr	r3, [r2, #4]
 8007c5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c5e:	68e1      	ldr	r1, [r4, #12]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c64:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	4b97      	ldr	r3, [pc, #604]	; (8007ec8 <UART_SetConfig+0x290>)
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d001      	beq.n	8007c72 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007c6e:	6a23      	ldr	r3, [r4, #32]
 8007c70:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c72:	6893      	ldr	r3, [r2, #8]
 8007c74:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007c78:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c80:	6822      	ldr	r2, [r4, #0]
 8007c82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c84:	f023 030f 	bic.w	r3, r3, #15
 8007c88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	4a8e      	ldr	r2, [pc, #568]	; (8007ecc <UART_SetConfig+0x294>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01c      	beq.n	8007cd0 <UART_SetConfig+0x98>
 8007c96:	4a8e      	ldr	r2, [pc, #568]	; (8007ed0 <UART_SetConfig+0x298>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d031      	beq.n	8007d00 <UART_SetConfig+0xc8>
 8007c9c:	4a8a      	ldr	r2, [pc, #552]	; (8007ec8 <UART_SetConfig+0x290>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d04b      	beq.n	8007d3a <UART_SetConfig+0x102>
 8007ca2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca4:	4988      	ldr	r1, [pc, #544]	; (8007ec8 <UART_SetConfig+0x290>)
 8007ca6:	428b      	cmp	r3, r1
 8007ca8:	d068      	beq.n	8007d7c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007caa:	69e0      	ldr	r0, [r4, #28]
 8007cac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007cb0:	f000 80a5 	beq.w	8007dfe <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007cb4:	2a08      	cmp	r2, #8
 8007cb6:	f200 811f 	bhi.w	8007ef8 <UART_SetConfig+0x2c0>
 8007cba:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007cbe:	00d3      	.short	0x00d3
 8007cc0:	00d100f5 	.word	0x00d100f5
 8007cc4:	00f8011d 	.word	0x00f8011d
 8007cc8:	011d011d 	.word	0x011d011d
 8007ccc:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007cd8:	f002 0203 	and.w	r2, r2, #3
 8007cdc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ce0:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007ce4:	2a03      	cmp	r2, #3
 8007ce6:	d809      	bhi.n	8007cfc <UART_SetConfig+0xc4>
 8007ce8:	e8df f002 	tbb	[pc, r2]
 8007cec:	063c0402 	.word	0x063c0402
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	e7d7      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	e7d5      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	e7d3      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	e7d1      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d04:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007d08:	f002 020c 	and.w	r2, r2, #12
 8007d0c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007d10:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007d14:	2a0c      	cmp	r2, #12
 8007d16:	d80e      	bhi.n	8007d36 <UART_SetConfig+0xfe>
 8007d18:	e8df f002 	tbb	[pc, r2]
 8007d1c:	0d0d0d07 	.word	0x0d0d0d07
 8007d20:	0d0d0d09 	.word	0x0d0d0d09
 8007d24:	0d0d0d26 	.word	0x0d0d0d26
 8007d28:	0b          	.byte	0x0b
 8007d29:	00          	.byte	0x00
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	e7ba      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d2e:	2204      	movs	r2, #4
 8007d30:	e7b8      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d32:	2208      	movs	r2, #8
 8007d34:	e7b6      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d36:	2210      	movs	r2, #16
 8007d38:	e7b4      	b.n	8007ca4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007d42:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007d46:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007d4a:	d00f      	beq.n	8007d6c <UART_SetConfig+0x134>
 8007d4c:	d805      	bhi.n	8007d5a <UART_SetConfig+0x122>
 8007d4e:	b17a      	cbz	r2, 8007d70 <UART_SetConfig+0x138>
 8007d50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007d54:	d10e      	bne.n	8007d74 <UART_SetConfig+0x13c>
 8007d56:	2204      	movs	r2, #4
 8007d58:	e7a4      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d5a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007d5e:	d10b      	bne.n	8007d78 <UART_SetConfig+0x140>
 8007d60:	2208      	movs	r2, #8
 8007d62:	e79f      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d64:	2202      	movs	r2, #2
 8007d66:	e79d      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d68:	2202      	movs	r2, #2
 8007d6a:	e79b      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	e799      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d70:	2200      	movs	r2, #0
 8007d72:	e797      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d74:	2210      	movs	r2, #16
 8007d76:	e795      	b.n	8007ca4 <UART_SetConfig+0x6c>
 8007d78:	2210      	movs	r2, #16
 8007d7a:	e793      	b.n	8007ca4 <UART_SetConfig+0x6c>
    switch (clocksource)
 8007d7c:	2a08      	cmp	r2, #8
 8007d7e:	f200 809c 	bhi.w	8007eba <UART_SetConfig+0x282>
 8007d82:	e8df f002 	tbb	[pc, r2]
 8007d86:	9a08      	.short	0x9a08
 8007d88:	9a379a3a 	.word	0x9a379a3a
 8007d8c:	9a9a      	.short	0x9a9a
 8007d8e:	05          	.byte	0x05
 8007d8f:	00          	.byte	0x00
 8007d90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d94:	e004      	b.n	8007da0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d96:	f7fe faab 	bl	80062f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	f000 808f 	beq.w	8007ebe <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007da2:	4b4c      	ldr	r3, [pc, #304]	; (8007ed4 <UART_SetConfig+0x29c>)
 8007da4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007da8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dac:	6865      	ldr	r5, [r4, #4]
 8007dae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007db2:	4299      	cmp	r1, r3
 8007db4:	f200 8094 	bhi.w	8007ee0 <UART_SetConfig+0x2a8>
 8007db8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007dbc:	f200 8092 	bhi.w	8007ee4 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	4633      	mov	r3, r6
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	f7f8 fef3 	bl	8000bb0 <__aeabi_uldivmod>
 8007dca:	0209      	lsls	r1, r1, #8
 8007dcc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007dd0:	0200      	lsls	r0, r0, #8
 8007dd2:	086b      	lsrs	r3, r5, #1
 8007dd4:	18c0      	adds	r0, r0, r3
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4633      	mov	r3, r6
 8007dda:	f141 0100 	adc.w	r1, r1, #0
 8007dde:	f7f8 fee7 	bl	8000bb0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007de2:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007de6:	4b3c      	ldr	r3, [pc, #240]	; (8007ed8 <UART_SetConfig+0x2a0>)
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d87d      	bhi.n	8007ee8 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	60d8      	str	r0, [r3, #12]
 8007df0:	4630      	mov	r0, r6
 8007df2:	e050      	b.n	8007e96 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007df4:	f7fd fd7e 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
        break;
 8007df8:	e7cf      	b.n	8007d9a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007dfa:	4838      	ldr	r0, [pc, #224]	; (8007edc <UART_SetConfig+0x2a4>)
 8007dfc:	e7d0      	b.n	8007da0 <UART_SetConfig+0x168>
    switch (clocksource)
 8007dfe:	2a08      	cmp	r2, #8
 8007e00:	d874      	bhi.n	8007eec <UART_SetConfig+0x2b4>
 8007e02:	e8df f002 	tbb	[pc, r2]
 8007e06:	2707      	.short	0x2707
 8007e08:	732a7305 	.word	0x732a7305
 8007e0c:	7373      	.short	0x7373
 8007e0e:	0b          	.byte	0x0b
 8007e0f:	00          	.byte	0x00
 8007e10:	4832      	ldr	r0, [pc, #200]	; (8007edc <UART_SetConfig+0x2a4>)
 8007e12:	e003      	b.n	8007e1c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7fe fa6c 	bl	80062f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d069      	beq.n	8007ef0 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ed4 <UART_SetConfig+0x29c>)
 8007e20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007e24:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e28:	6862      	ldr	r2, [r4, #4]
 8007e2a:	0853      	lsrs	r3, r2, #1
 8007e2c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007e30:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e34:	f1a3 0110 	sub.w	r1, r3, #16
 8007e38:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007e3c:	4291      	cmp	r1, r2
 8007e3e:	d859      	bhi.n	8007ef4 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e46:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007e4a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8007e4c:	6822      	ldr	r2, [r4, #0]
 8007e4e:	60d3      	str	r3, [r2, #12]
 8007e50:	2000      	movs	r0, #0
 8007e52:	e020      	b.n	8007e96 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e54:	f7fe fa5c 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
        break;
 8007e58:	e7de      	b.n	8007e18 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007e5a:	f7fd fd4b 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
        break;
 8007e5e:	e7db      	b.n	8007e18 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007e60:	481e      	ldr	r0, [pc, #120]	; (8007edc <UART_SetConfig+0x2a4>)
 8007e62:	e003      	b.n	8007e6c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e64:	f7fe fa44 	bl	80062f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d047      	beq.n	8007efc <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e6e:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <UART_SetConfig+0x29c>)
 8007e70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007e7e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e82:	f1a0 0210 	sub.w	r2, r0, #16
 8007e86:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d838      	bhi.n	8007f00 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	b280      	uxth	r0, r0
 8007e92:	60d8      	str	r0, [r3, #12]
 8007e94:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007e96:	2301      	movs	r3, #1
 8007e98:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e9c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007ea4:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea8:	f7fe fa32 	bl	8006310 <HAL_RCC_GetPCLK2Freq>
        break;
 8007eac:	e7dc      	b.n	8007e68 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fd fd21 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
        break;
 8007eb2:	e7d9      	b.n	8007e68 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007eb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007eb8:	e7d8      	b.n	8007e6c <UART_SetConfig+0x234>
    switch (clocksource)
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7eb      	b.n	8007e96 <UART_SetConfig+0x25e>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e7e9      	b.n	8007e96 <UART_SetConfig+0x25e>
 8007ec2:	bf00      	nop
 8007ec4:	cfff69f3 	.word	0xcfff69f3
 8007ec8:	40008000 	.word	0x40008000
 8007ecc:	40013800 	.word	0x40013800
 8007ed0:	40004400 	.word	0x40004400
 8007ed4:	080161bc 	.word	0x080161bc
 8007ed8:	000ffcff 	.word	0x000ffcff
 8007edc:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	e7d8      	b.n	8007e96 <UART_SetConfig+0x25e>
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	e7d6      	b.n	8007e96 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007ee8:	2001      	movs	r0, #1
 8007eea:	e7d4      	b.n	8007e96 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007eec:	2001      	movs	r0, #1
 8007eee:	e7d2      	b.n	8007e96 <UART_SetConfig+0x25e>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e7d0      	b.n	8007e96 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	e7ce      	b.n	8007e96 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007ef8:	2001      	movs	r0, #1
 8007efa:	e7cc      	b.n	8007e96 <UART_SetConfig+0x25e>
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7ca      	b.n	8007e96 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007f00:	2001      	movs	r0, #1
 8007f02:	e7c8      	b.n	8007e96 <UART_SetConfig+0x25e>

08007f04 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f06:	f013 0f01 	tst.w	r3, #1
 8007f0a:	d006      	beq.n	8007f1a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f0c:	6802      	ldr	r2, [r0, #0]
 8007f0e:	6853      	ldr	r3, [r2, #4]
 8007f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007f16:	430b      	orrs	r3, r1
 8007f18:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f1c:	f013 0f02 	tst.w	r3, #2
 8007f20:	d006      	beq.n	8007f30 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f22:	6802      	ldr	r2, [r0, #0]
 8007f24:	6853      	ldr	r3, [r2, #4]
 8007f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f32:	f013 0f04 	tst.w	r3, #4
 8007f36:	d006      	beq.n	8007f46 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f38:	6802      	ldr	r2, [r0, #0]
 8007f3a:	6853      	ldr	r3, [r2, #4]
 8007f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f40:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f48:	f013 0f08 	tst.w	r3, #8
 8007f4c:	d006      	beq.n	8007f5c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f4e:	6802      	ldr	r2, [r0, #0]
 8007f50:	6853      	ldr	r3, [r2, #4]
 8007f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f56:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f5e:	f013 0f10 	tst.w	r3, #16
 8007f62:	d006      	beq.n	8007f72 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f64:	6802      	ldr	r2, [r0, #0]
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f74:	f013 0f20 	tst.w	r3, #32
 8007f78:	d006      	beq.n	8007f88 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f7a:	6802      	ldr	r2, [r0, #0]
 8007f7c:	6893      	ldr	r3, [r2, #8]
 8007f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f82:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f8e:	d00a      	beq.n	8007fa6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f90:	6802      	ldr	r2, [r0, #0]
 8007f92:	6853      	ldr	r3, [r2, #4]
 8007f94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f98:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007f9a:	430b      	orrs	r3, r1
 8007f9c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f9e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa4:	d00b      	beq.n	8007fbe <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fac:	d006      	beq.n	8007fbc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fae:	6802      	ldr	r2, [r0, #0]
 8007fb0:	6853      	ldr	r3, [r2, #4]
 8007fb2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007fb6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6053      	str	r3, [r2, #4]
}
 8007fbc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fbe:	6802      	ldr	r2, [r0, #0]
 8007fc0:	6853      	ldr	r3, [r2, #4]
 8007fc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007fc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6053      	str	r3, [r2, #4]
 8007fcc:	e7eb      	b.n	8007fa6 <UART_AdvFeatureConfig+0xa2>

08007fce <UART_WaitOnFlagUntilTimeout>:
{
 8007fce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	4616      	mov	r6, r2
 8007fd8:	4699      	mov	r9, r3
 8007fda:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	69dc      	ldr	r4, [r3, #28]
 8007fe2:	ea37 0404 	bics.w	r4, r7, r4
 8007fe6:	bf0c      	ite	eq
 8007fe8:	2401      	moveq	r4, #1
 8007fea:	2400      	movne	r4, #0
 8007fec:	42b4      	cmp	r4, r6
 8007fee:	d157      	bne.n	80080a0 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007ff0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007ff4:	d0f3      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff6:	f7f9 fdf3 	bl	8001be0 <HAL_GetTick>
 8007ffa:	eba0 0009 	sub.w	r0, r0, r9
 8007ffe:	4540      	cmp	r0, r8
 8008000:	d82f      	bhi.n	8008062 <UART_WaitOnFlagUntilTimeout+0x94>
 8008002:	f1b8 0f00 	cmp.w	r8, #0
 8008006:	d02c      	beq.n	8008062 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	f012 0f04 	tst.w	r2, #4
 8008010:	d0e5      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008018:	d0e1      	beq.n	8007fde <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800801a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800801e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008020:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	e852 3f00 	ldrex	r3, [r2]
 8008026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	e842 3100 	strex	r1, r3, [r2]
 800802e:	2900      	cmp	r1, #0
 8008030:	d1f6      	bne.n	8008020 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	f102 0308 	add.w	r3, r2, #8
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	3208      	adds	r2, #8
 8008042:	e842 3100 	strex	r1, r3, [r2]
 8008046:	2900      	cmp	r1, #0
 8008048:	d1f3      	bne.n	8008032 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800804a:	2320      	movs	r3, #32
 800804c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008050:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008054:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8008058:	2300      	movs	r3, #0
 800805a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800805e:	2003      	movs	r0, #3
 8008060:	e01f      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008062:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	e852 3f00 	ldrex	r3, [r2]
 8008068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	e842 3100 	strex	r1, r3, [r2]
 8008070:	2900      	cmp	r1, #0
 8008072:	d1f6      	bne.n	8008062 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008074:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	f102 0308 	add.w	r3, r2, #8
 800807a:	e853 3f00 	ldrex	r3, [r3]
 800807e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	3208      	adds	r2, #8
 8008084:	e842 3100 	strex	r1, r3, [r2]
 8008088:	2900      	cmp	r1, #0
 800808a:	d1f3      	bne.n	8008074 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800808c:	2320      	movs	r3, #32
 800808e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008092:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8008096:	2300      	movs	r3, #0
 8008098:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 800809c:	2003      	movs	r0, #3
 800809e:	e000      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 80080a0:	2000      	movs	r0, #0
}
 80080a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080080a6 <UART_CheckIdleState>:
{
 80080a6:	b530      	push	{r4, r5, lr}
 80080a8:	b083      	sub	sp, #12
 80080aa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80080b2:	f7f9 fd95 	bl	8001be0 <HAL_GetTick>
 80080b6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	6812      	ldr	r2, [r2, #0]
 80080bc:	f012 0f08 	tst.w	r2, #8
 80080c0:	d110      	bne.n	80080e4 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f013 0f04 	tst.w	r3, #4
 80080ca:	d119      	bne.n	8008100 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80080cc:	2320      	movs	r3, #32
 80080ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d6:	2000      	movs	r0, #0
 80080d8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080da:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80080dc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80080e0:	b003      	add	sp, #12
 80080e2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4603      	mov	r3, r0
 80080ec:	2200      	movs	r2, #0
 80080ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff ff6b 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d0e2      	beq.n	80080c2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80080fc:	2003      	movs	r0, #3
 80080fe:	e7ef      	b.n	80080e0 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	462b      	mov	r3, r5
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff ff5d 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8008114:	2800      	cmp	r0, #0
 8008116:	d0d9      	beq.n	80080cc <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008118:	2003      	movs	r0, #3
 800811a:	e7e1      	b.n	80080e0 <UART_CheckIdleState+0x3a>

0800811c <HAL_UART_Init>:
  if (huart == NULL)
 800811c:	b378      	cbz	r0, 800817e <HAL_UART_Init+0x62>
{
 800811e:	b510      	push	{r4, lr}
 8008120:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008122:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008126:	b30b      	cbz	r3, 800816c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008128:	2324      	movs	r3, #36	; 0x24
 800812a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	6813      	ldr	r3, [r2, #0]
 8008132:	f023 0301 	bic.w	r3, r3, #1
 8008136:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008138:	4620      	mov	r0, r4
 800813a:	f7ff fd7d 	bl	8007c38 <UART_SetConfig>
 800813e:	2801      	cmp	r0, #1
 8008140:	d013      	beq.n	800816a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008144:	b9bb      	cbnz	r3, 8008176 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	6853      	ldr	r3, [r2, #4]
 800814a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800814e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	6893      	ldr	r3, [r2, #8]
 8008154:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8008158:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800815a:	6822      	ldr	r2, [r4, #0]
 800815c:	6813      	ldr	r3, [r2, #0]
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff ff9e 	bl	80080a6 <UART_CheckIdleState>
}
 800816a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800816c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8008170:	f7f9 ff1e 	bl	8001fb0 <HAL_UART_MspInit>
 8008174:	e7d8      	b.n	8008128 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008176:	4620      	mov	r0, r4
 8008178:	f7ff fec4 	bl	8007f04 <UART_AdvFeatureConfig>
 800817c:	e7e3      	b.n	8008146 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800817e:	2001      	movs	r0, #1
}
 8008180:	4770      	bx	lr
	...

08008184 <UART_Start_Receive_IT>:
{
 8008184:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8008186:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008188:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800818c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008190:	2300      	movs	r3, #0
 8008192:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8008194:	6883      	ldr	r3, [r0, #8]
 8008196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800819a:	d006      	beq.n	80081aa <UART_Start_Receive_IT+0x26>
 800819c:	b9a3      	cbnz	r3, 80081c8 <UART_Start_Receive_IT+0x44>
 800819e:	6903      	ldr	r3, [r0, #16]
 80081a0:	b973      	cbnz	r3, 80081c0 <UART_Start_Receive_IT+0x3c>
 80081a2:	23ff      	movs	r3, #255	; 0xff
 80081a4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80081a8:	e014      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
 80081aa:	6903      	ldr	r3, [r0, #16]
 80081ac:	b923      	cbnz	r3, 80081b8 <UART_Start_Receive_IT+0x34>
 80081ae:	f240 13ff 	movw	r3, #511	; 0x1ff
 80081b2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80081b6:	e00d      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
 80081b8:	23ff      	movs	r3, #255	; 0xff
 80081ba:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80081be:	e009      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
 80081c0:	237f      	movs	r3, #127	; 0x7f
 80081c2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80081c6:	e005      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
 80081c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081cc:	d02d      	beq.n	800822a <UART_Start_Receive_IT+0xa6>
 80081ce:	2300      	movs	r3, #0
 80081d0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081da:	2322      	movs	r3, #34	; 0x22
 80081dc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	f101 0308 	add.w	r3, r1, #8
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	3108      	adds	r1, #8
 80081f0:	e841 3400 	strex	r4, r3, [r1]
 80081f4:	2c00      	cmp	r4, #0
 80081f6:	d1f3      	bne.n	80081e0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80081f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80081fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fe:	d01e      	beq.n	800823e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008200:	6883      	ldr	r3, [r0, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008206:	d042      	beq.n	800828e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008208:	4b29      	ldr	r3, [pc, #164]	; (80082b0 <UART_Start_Receive_IT+0x12c>)
 800820a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800820c:	6903      	ldr	r3, [r0, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d043      	beq.n	800829a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008212:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	e852 3f00 	ldrex	r3, [r2]
 8008218:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	e842 3100 	strex	r1, r3, [r2]
 8008220:	2900      	cmp	r1, #0
 8008222:	d1f6      	bne.n	8008212 <UART_Start_Receive_IT+0x8e>
}
 8008224:	2000      	movs	r0, #0
 8008226:	bc10      	pop	{r4}
 8008228:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800822a:	6903      	ldr	r3, [r0, #16]
 800822c:	b91b      	cbnz	r3, 8008236 <UART_Start_Receive_IT+0xb2>
 800822e:	237f      	movs	r3, #127	; 0x7f
 8008230:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008234:	e7ce      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
 8008236:	233f      	movs	r3, #63	; 0x3f
 8008238:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800823c:	e7ca      	b.n	80081d4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800823e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008242:	4293      	cmp	r3, r2
 8008244:	d8dc      	bhi.n	8008200 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008246:	6883      	ldr	r3, [r0, #8]
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824c:	d019      	beq.n	8008282 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800824e:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <UART_Start_Receive_IT+0x130>)
 8008250:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008252:	6903      	ldr	r3, [r0, #16]
 8008254:	b143      	cbz	r3, 8008268 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008256:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	e852 3f00 	ldrex	r3, [r2]
 800825c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	e842 3100 	strex	r1, r3, [r2]
 8008264:	2900      	cmp	r1, #0
 8008266:	d1f6      	bne.n	8008256 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008268:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	f102 0308 	add.w	r3, r2, #8
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	3208      	adds	r2, #8
 8008278:	e842 3100 	strex	r1, r3, [r2]
 800827c:	2900      	cmp	r1, #0
 800827e:	d1f3      	bne.n	8008268 <UART_Start_Receive_IT+0xe4>
 8008280:	e7d0      	b.n	8008224 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008282:	6903      	ldr	r3, [r0, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e2      	bne.n	800824e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <UART_Start_Receive_IT+0x134>)
 800828a:	6743      	str	r3, [r0, #116]	; 0x74
 800828c:	e7e1      	b.n	8008252 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800828e:	6903      	ldr	r3, [r0, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1b9      	bne.n	8008208 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <UART_Start_Receive_IT+0x138>)
 8008296:	6743      	str	r3, [r0, #116]	; 0x74
 8008298:	e7b8      	b.n	800820c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800829a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	e852 3f00 	ldrex	r3, [r2]
 80082a0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	e842 3100 	strex	r1, r3, [r2]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d1f6      	bne.n	800829a <UART_Start_Receive_IT+0x116>
 80082ac:	e7ba      	b.n	8008224 <UART_Start_Receive_IT+0xa0>
 80082ae:	bf00      	nop
 80082b0:	080076f1 	.word	0x080076f1
 80082b4:	080078a5 	.word	0x080078a5
 80082b8:	08007a71 	.word	0x08007a71
 80082bc:	080077cd 	.word	0x080077cd

080082c0 <HAL_UART_Receive_IT>:
{
 80082c0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80082c2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d117      	bne.n	80082fa <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80082ca:	b1c1      	cbz	r1, 80082fe <HAL_UART_Receive_IT+0x3e>
 80082cc:	b1ca      	cbz	r2, 8008302 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ce:	2300      	movs	r3, #0
 80082d0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082d2:	6803      	ldr	r3, [r0, #0]
 80082d4:	4c0c      	ldr	r4, [pc, #48]	; (8008308 <HAL_UART_Receive_IT+0x48>)
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	d00c      	beq.n	80082f4 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80082e0:	d008      	beq.n	80082f4 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082e2:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	e854 3f00 	ldrex	r3, [r4]
 80082e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	e844 3500 	strex	r5, r3, [r4]
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	d1f6      	bne.n	80082e2 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80082f4:	f7ff ff46 	bl	8008184 <UART_Start_Receive_IT>
 80082f8:	e000      	b.n	80082fc <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80082fa:	2002      	movs	r0, #2
}
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80082fe:	2001      	movs	r0, #1
 8008300:	e7fc      	b.n	80082fc <HAL_UART_Receive_IT+0x3c>
 8008302:	2001      	movs	r0, #1
 8008304:	e7fa      	b.n	80082fc <HAL_UART_Receive_IT+0x3c>
 8008306:	bf00      	nop
 8008308:	40008000 	.word	0x40008000

0800830c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800830c:	b082      	sub	sp, #8
 800830e:	ab02      	add	r3, sp, #8
 8008310:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	6853      	ldr	r3, [r2, #4]
 8008318:	f023 0310 	bic.w	r3, r3, #16
 800831c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008320:	430b      	orrs	r3, r1
 8008322:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008324:	6802      	ldr	r2, [r0, #0]
 8008326:	6853      	ldr	r3, [r2, #4]
 8008328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008330:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008334:	6053      	str	r3, [r2, #4]
}
 8008336:	b002      	add	sp, #8
 8008338:	4770      	bx	lr
	...

0800833c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800833c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800833e:	b92b      	cbnz	r3, 800834c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008340:	2301      	movs	r3, #1
 8008342:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008346:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800834a:	4770      	bx	lr
{
 800834c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800834e:	6803      	ldr	r3, [r0, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008356:	6899      	ldr	r1, [r3, #8]
 8008358:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800835a:	4d09      	ldr	r5, [pc, #36]	; (8008380 <UARTEx_SetNbDataToProcess+0x44>)
 800835c:	5c6b      	ldrb	r3, [r5, r1]
 800835e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008360:	4c08      	ldr	r4, [pc, #32]	; (8008384 <UARTEx_SetNbDataToProcess+0x48>)
 8008362:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008364:	fb93 f3f1 	sdiv	r3, r3, r1
 8008368:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800836c:	5cab      	ldrb	r3, [r5, r2]
 800836e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008370:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008372:	fb93 f3f2 	sdiv	r3, r3, r2
 8008376:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800837a:	bc30      	pop	{r4, r5}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	080161dc 	.word	0x080161dc
 8008384:	080161d4 	.word	0x080161d4

08008388 <HAL_UARTEx_WakeupCallback>:
}
 8008388:	4770      	bx	lr

0800838a <HAL_UARTEx_RxFifoFullCallback>:
}
 800838a:	4770      	bx	lr

0800838c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800838c:	4770      	bx	lr

0800838e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800838e:	b510      	push	{r4, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	ab04      	add	r3, sp, #16
 8008394:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008398:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800839c:	2b01      	cmp	r3, #1
 800839e:	d035      	beq.n	800840c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80083a0:	4604      	mov	r4, r0
 80083a2:	2301      	movs	r3, #1
 80083a4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80083a8:	2324      	movs	r3, #36	; 0x24
 80083aa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80083ae:	6802      	ldr	r2, [r0, #0]
 80083b0:	6813      	ldr	r3, [r2, #0]
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80083b8:	6801      	ldr	r1, [r0, #0]
 80083ba:	688b      	ldr	r3, [r1, #8]
 80083bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80083c0:	9a02      	ldr	r2, [sp, #8]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80083c6:	b1aa      	cbz	r2, 80083f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80083d2:	f7f9 fc05 	bl	8001be0 <HAL_GetTick>
 80083d6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80083dc:	9200      	str	r2, [sp, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff fdf2 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 80083ea:	b948      	cbnz	r0, 8008400 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80083ec:	2320      	movs	r3, #32
 80083ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80083f2:	e006      	b.n	8008402 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80083f4:	ab04      	add	r3, sp, #16
 80083f6:	e913 0006 	ldmdb	r3, {r1, r2}
 80083fa:	f7ff ff87 	bl	800830c <UARTEx_Wakeup_AddressConfig>
 80083fe:	e7e3      	b.n	80083c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008400:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008402:	2300      	movs	r3, #0
 8008404:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8008408:	b004      	add	sp, #16
 800840a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800840c:	2002      	movs	r0, #2
 800840e:	e7fb      	b.n	8008408 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008410 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008410:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008414:	2b01      	cmp	r3, #1
 8008416:	d010      	beq.n	800843a <HAL_UARTEx_EnableStopMode+0x2a>
 8008418:	2301      	movs	r3, #1
 800841a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800841e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	e852 3f00 	ldrex	r3, [r2]
 8008424:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	e842 3100 	strex	r1, r3, [r2]
 800842c:	2900      	cmp	r1, #0
 800842e:	d1f6      	bne.n	800841e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008430:	2300      	movs	r3, #0
 8008432:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8008436:	4618      	mov	r0, r3
 8008438:	4770      	bx	lr
  __HAL_LOCK(huart);
 800843a:	2002      	movs	r0, #2
}
 800843c:	4770      	bx	lr

0800843e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800843e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008442:	2b01      	cmp	r3, #1
 8008444:	d01d      	beq.n	8008482 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800844a:	2301      	movs	r3, #1
 800844c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008450:	2324      	movs	r3, #36	; 0x24
 8008452:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008456:	6802      	ldr	r2, [r0, #0]
 8008458:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800845a:	6811      	ldr	r1, [r2, #0]
 800845c:	f021 0101 	bic.w	r1, r1, #1
 8008460:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008466:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800846a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008470:	f7ff ff64 	bl	800833c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008474:	2320      	movs	r3, #32
 8008476:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800847a:	2000      	movs	r0, #0
 800847c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008480:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008482:	2002      	movs	r0, #2
}
 8008484:	4770      	bx	lr

08008486 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008486:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008488:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800848c:	2b01      	cmp	r3, #1
 800848e:	d01d      	beq.n	80084cc <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008490:	4604      	mov	r4, r0
 8008492:	2301      	movs	r3, #1
 8008494:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008498:	2324      	movs	r3, #36	; 0x24
 800849a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849e:	6803      	ldr	r3, [r0, #0]
 80084a0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	f022 0201 	bic.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084aa:	6802      	ldr	r2, [r0, #0]
 80084ac:	6893      	ldr	r3, [r2, #8]
 80084ae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80084b2:	4319      	orrs	r1, r3
 80084b4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80084b6:	f7ff ff41 	bl	800833c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80084be:	2320      	movs	r3, #32
 80084c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80084c4:	2000      	movs	r0, #0
 80084c6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80084cc:	2002      	movs	r0, #2
 80084ce:	e7fc      	b.n	80084ca <HAL_UARTEx_SetTxFifoThreshold+0x44>

080084d0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80084d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80084d2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d01d      	beq.n	8008516 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80084da:	4604      	mov	r4, r0
 80084dc:	2301      	movs	r3, #1
 80084de:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80084e2:	2324      	movs	r3, #36	; 0x24
 80084e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	f022 0201 	bic.w	r2, r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084f4:	6802      	ldr	r2, [r0, #0]
 80084f6:	6893      	ldr	r3, [r2, #8]
 80084f8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80084fc:	4319      	orrs	r1, r3
 80084fe:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008500:	f7ff ff1c 	bl	800833c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008508:	2320      	movs	r3, #32
 800850a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800850e:	2000      	movs	r0, #0
 8008510:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8008514:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008516:	2002      	movs	r0, #2
 8008518:	e7fc      	b.n	8008514 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800851c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800851c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008520:	b97b      	cbnz	r3, 8008542 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008522:	f3ef 8310 	mrs	r3, PRIMASK
 8008526:	b913      	cbnz	r3, 800852e <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008528:	f3ef 8311 	mrs	r3, BASEPRI
 800852c:	b11b      	cbz	r3, 8008536 <osKernelInitialize+0x1a>
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <osKernelInitialize+0x38>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d008      	beq.n	8008548 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <osKernelInitialize+0x38>)
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	b940      	cbnz	r0, 800854e <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008540:	4770      	bx	lr
    stat = osErrorISR;
 8008542:	f06f 0005 	mvn.w	r0, #5
 8008546:	4770      	bx	lr
 8008548:	f06f 0005 	mvn.w	r0, #5
 800854c:	4770      	bx	lr
    } else {
      stat = osError;
 800854e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8008552:	4770      	bx	lr
 8008554:	20000760 	.word	0x20000760

08008558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008558:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800855a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800855e:	b9a3      	cbnz	r3, 800858a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	b913      	cbnz	r3, 800856c <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008566:	f3ef 8311 	mrs	r3, BASEPRI
 800856a:	b11b      	cbz	r3, 8008574 <osKernelStart+0x1c>
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <osKernelStart+0x44>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d00d      	beq.n	8008590 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008574:	4b09      	ldr	r3, [pc, #36]	; (800859c <osKernelStart+0x44>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d10c      	bne.n	8008596 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800857c:	4b07      	ldr	r3, [pc, #28]	; (800859c <osKernelStart+0x44>)
 800857e:	2202      	movs	r2, #2
 8008580:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008582:	f001 fa09 	bl	8009998 <vTaskStartScheduler>
      stat = osOK;
 8008586:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8008588:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800858a:	f06f 0005 	mvn.w	r0, #5
 800858e:	e7fb      	b.n	8008588 <osKernelStart+0x30>
 8008590:	f06f 0005 	mvn.w	r0, #5
 8008594:	e7f8      	b.n	8008588 <osKernelStart+0x30>
      stat = osError;
 8008596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 800859a:	e7f5      	b.n	8008588 <osKernelStart+0x30>
 800859c:	20000760 	.word	0x20000760

080085a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085a4:	2400      	movs	r4, #0
 80085a6:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d138      	bne.n	8008622 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b0:	f3ef 8310 	mrs	r3, PRIMASK
 80085b4:	b913      	cbnz	r3, 80085bc <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085b6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ba:	b11b      	cbz	r3, 80085c4 <osThreadNew+0x24>
 80085bc:	4b2d      	ldr	r3, [pc, #180]	; (8008674 <osThreadNew+0xd4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d02e      	beq.n	8008622 <osThreadNew+0x82>
 80085c4:	b368      	cbz	r0, 8008622 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80085c6:	b322      	cbz	r2, 8008612 <osThreadNew+0x72>
      if (attr->name != NULL) {
 80085c8:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80085ca:	6993      	ldr	r3, [r2, #24]
 80085cc:	b903      	cbnz	r3, 80085d0 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 80085ce:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085d0:	1e5c      	subs	r4, r3, #1
 80085d2:	2c37      	cmp	r4, #55	; 0x37
 80085d4:	d849      	bhi.n	800866a <osThreadNew+0xca>
 80085d6:	6854      	ldr	r4, [r2, #4]
 80085d8:	f014 0f01 	tst.w	r4, #1
 80085dc:	d147      	bne.n	800866e <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80085de:	6956      	ldr	r6, [r2, #20]
 80085e0:	b16e      	cbz	r6, 80085fe <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085e2:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085e6:	6894      	ldr	r4, [r2, #8]
 80085e8:	b12c      	cbz	r4, 80085f6 <osThreadNew+0x56>
 80085ea:	68d7      	ldr	r7, [r2, #12]
 80085ec:	2f5b      	cmp	r7, #91	; 0x5b
 80085ee:	d902      	bls.n	80085f6 <osThreadNew+0x56>
 80085f0:	6917      	ldr	r7, [r2, #16]
 80085f2:	b107      	cbz	r7, 80085f6 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085f4:	b9c6      	cbnz	r6, 8008628 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085f6:	b12c      	cbz	r4, 8008604 <osThreadNew+0x64>
    mem  = -1;
 80085f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085fc:	e00e      	b.n	800861c <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 80085fe:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8008602:	e7f0      	b.n	80085e6 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008604:	68d4      	ldr	r4, [r2, #12]
 8008606:	b98c      	cbnz	r4, 800862c <osThreadNew+0x8c>
 8008608:	6914      	ldr	r4, [r2, #16]
 800860a:	b194      	cbz	r4, 8008632 <osThreadNew+0x92>
    mem  = -1;
 800860c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008610:	e004      	b.n	800861c <osThreadNew+0x7c>
    name = NULL;
 8008612:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008614:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008616:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008618:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800861c:	2c01      	cmp	r4, #1
 800861e:	d00a      	beq.n	8008636 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8008620:	b1ac      	cbz	r4, 800864e <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008622:	9805      	ldr	r0, [sp, #20]
}
 8008624:	b007      	add	sp, #28
 8008626:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008628:	2401      	movs	r4, #1
 800862a:	e7f7      	b.n	800861c <osThreadNew+0x7c>
    mem  = -1;
 800862c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008630:	e7f4      	b.n	800861c <osThreadNew+0x7c>
          mem = 0;
 8008632:	2400      	movs	r4, #0
 8008634:	e7f2      	b.n	800861c <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008636:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008638:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800863a:	9202      	str	r2, [sp, #8]
 800863c:	9401      	str	r4, [sp, #4]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	460b      	mov	r3, r1
 8008642:	4662      	mov	r2, ip
 8008644:	4629      	mov	r1, r5
 8008646:	f001 f937 	bl	80098b8 <xTaskCreateStatic>
 800864a:	9005      	str	r0, [sp, #20]
 800864c:	e7e9      	b.n	8008622 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800864e:	aa05      	add	r2, sp, #20
 8008650:	9201      	str	r2, [sp, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	460b      	mov	r3, r1
 8008656:	fa1f f28c 	uxth.w	r2, ip
 800865a:	4629      	mov	r1, r5
 800865c:	f001 f967 	bl	800992e <xTaskCreate>
 8008660:	2801      	cmp	r0, #1
 8008662:	d0de      	beq.n	8008622 <osThreadNew+0x82>
          hTask = NULL;
 8008664:	2300      	movs	r3, #0
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	e7db      	b.n	8008622 <osThreadNew+0x82>
        return (NULL);
 800866a:	2000      	movs	r0, #0
 800866c:	e7da      	b.n	8008624 <osThreadNew+0x84>
 800866e:	2000      	movs	r0, #0
 8008670:	e7d8      	b.n	8008624 <osThreadNew+0x84>
 8008672:	bf00      	nop
 8008674:	20000760 	.word	0x20000760

08008678 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008678:	b530      	push	{r4, r5, lr}
 800867a:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800867c:	b1f0      	cbz	r0, 80086bc <osThreadFlagsSet+0x44>
 800867e:	4604      	mov	r4, r0
 8008680:	2900      	cmp	r1, #0
 8008682:	db1b      	blt.n	80086bc <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8008684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008688:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800868a:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 800868e:	b9db      	cbnz	r3, 80086c8 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008690:	f3ef 8310 	mrs	r3, PRIMASK
 8008694:	b913      	cbnz	r3, 800869c <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008696:	f3ef 8311 	mrs	r3, BASEPRI
 800869a:	b11b      	cbz	r3, 80086a4 <osThreadFlagsSet+0x2c>
 800869c:	4b19      	ldr	r3, [pc, #100]	; (8008704 <osThreadFlagsSet+0x8c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d011      	beq.n	80086c8 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80086a4:	2300      	movs	r3, #0
 80086a6:	2201      	movs	r2, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 fd07 	bl	800a0bc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80086ae:	ab03      	add	r3, sp, #12
 80086b0:	2200      	movs	r2, #0
 80086b2:	4611      	mov	r1, r2
 80086b4:	4620      	mov	r0, r4
 80086b6:	f001 fd01 	bl	800a0bc <xTaskGenericNotify>
 80086ba:	e002      	b.n	80086c2 <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 80086bc:	f06f 0303 	mvn.w	r3, #3
 80086c0:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 80086c2:	9803      	ldr	r0, [sp, #12]
 80086c4:	b005      	add	sp, #20
 80086c6:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 80086c8:	2500      	movs	r5, #0
 80086ca:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80086cc:	ab02      	add	r3, sp, #8
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	462b      	mov	r3, r5
 80086d2:	2201      	movs	r2, #1
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 fd73 	bl	800a1c0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80086da:	9500      	str	r5, [sp, #0]
 80086dc:	ab03      	add	r3, sp, #12
 80086de:	462a      	mov	r2, r5
 80086e0:	4629      	mov	r1, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	f001 fd6c 	bl	800a1c0 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0e9      	beq.n	80086c2 <osThreadFlagsSet+0x4a>
 80086ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	e7de      	b.n	80086c2 <osThreadFlagsSet+0x4a>
 8008704:	20000760 	.word	0x20000760

08008708 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800870e:	f3ef 8305 	mrs	r3, IPSR
 8008712:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008714:	2b00      	cmp	r3, #0
 8008716:	d14c      	bne.n	80087b2 <osThreadFlagsWait+0xaa>
 8008718:	4681      	mov	r9, r0
 800871a:	468a      	mov	sl, r1
 800871c:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800871e:	f3ef 8310 	mrs	r3, PRIMASK
 8008722:	b913      	cbnz	r3, 800872a <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008724:	f3ef 8311 	mrs	r3, BASEPRI
 8008728:	b11b      	cbz	r3, 8008732 <osThreadFlagsWait+0x2a>
 800872a:	4b29      	ldr	r3, [pc, #164]	; (80087d0 <osThreadFlagsWait+0xc8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d045      	beq.n	80087be <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008732:	f1b9 0f00 	cmp.w	r9, #0
 8008736:	db45      	blt.n	80087c4 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008738:	f01a 0f02 	tst.w	sl, #2
 800873c:	d007      	beq.n	800874e <osThreadFlagsWait+0x46>
      clear = 0U;
 800873e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8008742:	f001 f97f 	bl	8009a44 <xTaskGetTickCount>
 8008746:	4683      	mov	fp, r0
    tout   = timeout;
 8008748:	463e      	mov	r6, r7
    rflags = 0U;
 800874a:	9d01      	ldr	r5, [sp, #4]
 800874c:	e023      	b.n	8008796 <osThreadFlagsWait+0x8e>
      clear = flags;
 800874e:	46c8      	mov	r8, r9
 8008750:	e7f7      	b.n	8008742 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8008752:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800875a:	f01a 0f01 	tst.w	sl, #1
 800875e:	d00d      	beq.n	800877c <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8008760:	ea39 0305 	bics.w	r3, r9, r5
 8008764:	d027      	beq.n	80087b6 <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8008766:	b387      	cbz	r7, 80087ca <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008768:	f001 f96c 	bl	8009a44 <xTaskGetTickCount>
 800876c:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8008770:	429e      	cmp	r6, r3
 8008772:	d30b      	bcc.n	800878c <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8008774:	ebab 0000 	sub.w	r0, fp, r0
 8008778:	4406      	add	r6, r0
 800877a:	e00b      	b.n	8008794 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 800877c:	ea19 0f05 	tst.w	r9, r5
 8008780:	d119      	bne.n	80087b6 <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8008782:	2f00      	cmp	r7, #0
 8008784:	d1f0      	bne.n	8008768 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 8008786:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800878a:	e014      	b.n	80087b6 <osThreadFlagsWait+0xae>
          tout  = 0;
 800878c:	9e01      	ldr	r6, [sp, #4]
 800878e:	e001      	b.n	8008794 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8008790:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8008794:	b17c      	cbz	r4, 80087b6 <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008796:	4633      	mov	r3, r6
 8008798:	aa03      	add	r2, sp, #12
 800879a:	4641      	mov	r1, r8
 800879c:	2000      	movs	r0, #0
 800879e:	f001 fc41 	bl	800a024 <xTaskNotifyWait>
 80087a2:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 80087a4:	2801      	cmp	r0, #1
 80087a6:	d0d4      	beq.n	8008752 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 80087a8:	2f00      	cmp	r7, #0
 80087aa:	d1f1      	bne.n	8008790 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 80087ac:	f06f 0502 	mvn.w	r5, #2
 80087b0:	e7f0      	b.n	8008794 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 80087b2:	f06f 0505 	mvn.w	r5, #5
}
 80087b6:	4628      	mov	r0, r5
 80087b8:	b005      	add	sp, #20
 80087ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 80087be:	f06f 0505 	mvn.w	r5, #5
 80087c2:	e7f8      	b.n	80087b6 <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 80087c4:	f06f 0503 	mvn.w	r5, #3
 80087c8:	e7f5      	b.n	80087b6 <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 80087ca:	f06f 0502 	mvn.w	r5, #2
 80087ce:	e7f2      	b.n	80087b6 <osThreadFlagsWait+0xae>
 80087d0:	20000760 	.word	0x20000760

080087d4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087d4:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <vApplicationGetIdleTaskMemory+0x10>)
 80087d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <vApplicationGetIdleTaskMemory+0x14>)
 80087da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	6013      	str	r3, [r2, #0]
}
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000704 	.word	0x20000704
 80087e8:	20000504 	.word	0x20000504

080087ec <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087ec:	4b03      	ldr	r3, [pc, #12]	; (80087fc <vApplicationGetTimerTaskMemory+0x10>)
 80087ee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087f0:	4b03      	ldr	r3, [pc, #12]	; (8008800 <vApplicationGetTimerTaskMemory+0x14>)
 80087f2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f8:	6013      	str	r3, [r2, #0]
}
 80087fa:	4770      	bx	lr
 80087fc:	20000b64 	.word	0x20000b64
 8008800:	20000764 	.word	0x20000764

08008804 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008804:	4a12      	ldr	r2, [pc, #72]	; (8008850 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008806:	f012 0f07 	tst.w	r2, #7
 800880a:	d01e      	beq.n	800884a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800880e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008812:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8008816:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881a:	480e      	ldr	r0, [pc, #56]	; (8008854 <prvHeapInit+0x50>)
 800881c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800881e:	2100      	movs	r1, #0
 8008820:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008822:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008824:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008826:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800882a:	480b      	ldr	r0, [pc, #44]	; (8008858 <prvHeapInit+0x54>)
 800882c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800882e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008830:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008832:	1a99      	subs	r1, r3, r2
 8008834:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008836:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008838:	4b08      	ldr	r3, [pc, #32]	; (800885c <prvHeapInit+0x58>)
 800883a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800883c:	4b08      	ldr	r3, [pc, #32]	; (8008860 <prvHeapInit+0x5c>)
 800883e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008840:	4b08      	ldr	r3, [pc, #32]	; (8008864 <prvHeapInit+0x60>)
 8008842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800884e:	e7e4      	b.n	800881a <prvHeapInit+0x16>
 8008850:	20000bc4 	.word	0x20000bc4
 8008854:	20002bd0 	.word	0x20002bd0
 8008858:	20000bc0 	.word	0x20000bc0
 800885c:	20002bcc 	.word	0x20002bcc
 8008860:	20002bc8 	.word	0x20002bc8
 8008864:	20002bc4 	.word	0x20002bc4

08008868 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008868:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <prvInsertBlockIntoFreeList+0x58>)
 800886a:	461a      	mov	r2, r3
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4283      	cmp	r3, r0
 8008870:	d3fb      	bcc.n	800886a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008872:	6851      	ldr	r1, [r2, #4]
 8008874:	eb02 0c01 	add.w	ip, r2, r1
 8008878:	4584      	cmp	ip, r0
 800887a:	d009      	beq.n	8008890 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800887c:	6841      	ldr	r1, [r0, #4]
 800887e:	eb00 0c01 	add.w	ip, r0, r1
 8008882:	4563      	cmp	r3, ip
 8008884:	d009      	beq.n	800889a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008886:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008888:	4290      	cmp	r0, r2
 800888a:	d018      	beq.n	80088be <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800888c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800888e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008890:	6840      	ldr	r0, [r0, #4]
 8008892:	4401      	add	r1, r0
 8008894:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008896:	4610      	mov	r0, r2
 8008898:	e7f0      	b.n	800887c <prvInsertBlockIntoFreeList+0x14>
{
 800889a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800889c:	4c09      	ldr	r4, [pc, #36]	; (80088c4 <prvInsertBlockIntoFreeList+0x5c>)
 800889e:	6824      	ldr	r4, [r4, #0]
 80088a0:	42a3      	cmp	r3, r4
 80088a2:	d00a      	beq.n	80088ba <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	4419      	add	r1, r3
 80088a8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80088b0:	4290      	cmp	r0, r2
 80088b2:	d000      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088b4:	6010      	str	r0, [r2, #0]
	}
}
 80088b6:	bc10      	pop	{r4}
 80088b8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088ba:	6004      	str	r4, [r0, #0]
 80088bc:	e7f8      	b.n	80088b0 <prvInsertBlockIntoFreeList+0x48>
 80088be:	4770      	bx	lr
 80088c0:	20002bd0 	.word	0x20002bd0
 80088c4:	20000bc0 	.word	0x20000bc0

080088c8 <pvPortMalloc>:
{
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80088cc:	f001 f8b2 	bl	8009a34 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80088d0:	4b34      	ldr	r3, [pc, #208]	; (80089a4 <pvPortMalloc+0xdc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b1a3      	cbz	r3, 8008900 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088d6:	4b34      	ldr	r3, [pc, #208]	; (80089a8 <pvPortMalloc+0xe0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	421d      	tst	r5, r3
 80088dc:	d14a      	bne.n	8008974 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80088de:	b135      	cbz	r5, 80088ee <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80088e0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088e2:	f015 0f07 	tst.w	r5, #7
 80088e6:	d002      	beq.n	80088ee <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088e8:	f025 0507 	bic.w	r5, r5, #7
 80088ec:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d042      	beq.n	8008978 <pvPortMalloc+0xb0>
 80088f2:	4b2e      	ldr	r3, [pc, #184]	; (80089ac <pvPortMalloc+0xe4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	42ab      	cmp	r3, r5
 80088f8:	d34d      	bcc.n	8008996 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 80088fa:	4a2d      	ldr	r2, [pc, #180]	; (80089b0 <pvPortMalloc+0xe8>)
 80088fc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088fe:	e004      	b.n	800890a <pvPortMalloc+0x42>
			prvHeapInit();
 8008900:	f7ff ff80 	bl	8008804 <prvHeapInit>
 8008904:	e7e7      	b.n	80088d6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008906:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008908:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800890a:	6863      	ldr	r3, [r4, #4]
 800890c:	42ab      	cmp	r3, r5
 800890e:	d202      	bcs.n	8008916 <pvPortMalloc+0x4e>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f7      	bne.n	8008906 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <pvPortMalloc+0xdc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	42a3      	cmp	r3, r4
 800891c:	d03d      	beq.n	800899a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800891e:	6816      	ldr	r6, [r2, #0]
 8008920:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008926:	6863      	ldr	r3, [r4, #4]
 8008928:	1b5b      	subs	r3, r3, r5
 800892a:	2b10      	cmp	r3, #16
 800892c:	d910      	bls.n	8008950 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800892e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008930:	f010 0f07 	tst.w	r0, #7
 8008934:	d008      	beq.n	8008948 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	e7fe      	b.n	8008946 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008948:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800894a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800894c:	f7ff ff8c 	bl	8008868 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008950:	6862      	ldr	r2, [r4, #4]
 8008952:	4916      	ldr	r1, [pc, #88]	; (80089ac <pvPortMalloc+0xe4>)
 8008954:	680b      	ldr	r3, [r1, #0]
 8008956:	1a9b      	subs	r3, r3, r2
 8008958:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800895a:	4916      	ldr	r1, [pc, #88]	; (80089b4 <pvPortMalloc+0xec>)
 800895c:	6809      	ldr	r1, [r1, #0]
 800895e:	428b      	cmp	r3, r1
 8008960:	d201      	bcs.n	8008966 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008962:	4914      	ldr	r1, [pc, #80]	; (80089b4 <pvPortMalloc+0xec>)
 8008964:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008966:	4b10      	ldr	r3, [pc, #64]	; (80089a8 <pvPortMalloc+0xe0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4313      	orrs	r3, r2
 800896c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	e002      	b.n	800897a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008974:	2600      	movs	r6, #0
 8008976:	e000      	b.n	800897a <pvPortMalloc+0xb2>
 8008978:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800897a:	f001 f90f 	bl	8009b9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800897e:	f016 0f07 	tst.w	r6, #7
 8008982:	d00c      	beq.n	800899e <pvPortMalloc+0xd6>
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	e7fe      	b.n	8008994 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8008996:	2600      	movs	r6, #0
 8008998:	e7ef      	b.n	800897a <pvPortMalloc+0xb2>
 800899a:	2600      	movs	r6, #0
 800899c:	e7ed      	b.n	800897a <pvPortMalloc+0xb2>
}
 800899e:	4630      	mov	r0, r6
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
 80089a2:	bf00      	nop
 80089a4:	20000bc0 	.word	0x20000bc0
 80089a8:	20002bc4 	.word	0x20002bc4
 80089ac:	20002bc8 	.word	0x20002bc8
 80089b0:	20002bd0 	.word	0x20002bd0
 80089b4:	20002bcc 	.word	0x20002bcc

080089b8 <vPortFree>:
	if( pv != NULL )
 80089b8:	b380      	cbz	r0, 8008a1c <vPortFree+0x64>
{
 80089ba:	b538      	push	{r3, r4, r5, lr}
 80089bc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80089be:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80089c6:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <vPortFree+0x68>)
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	4213      	tst	r3, r2
 80089cc:	d108      	bne.n	80089e0 <vPortFree+0x28>
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	e7fe      	b.n	80089de <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089e0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80089e4:	b141      	cbz	r1, 80089f8 <vPortFree+0x40>
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	e7fe      	b.n	80089f6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089f8:	ea23 0302 	bic.w	r3, r3, r2
 80089fc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008a00:	f001 f818 	bl	8009a34 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a04:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008a08:	4a06      	ldr	r2, [pc, #24]	; (8008a24 <vPortFree+0x6c>)
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	440b      	add	r3, r1
 8008a0e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a10:	4628      	mov	r0, r5
 8008a12:	f7ff ff29 	bl	8008868 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008a16:	f001 f8c1 	bl	8009b9c <xTaskResumeAll>
}
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	20002bc4 	.word	0x20002bc4
 8008a24:	20002bc8 	.word	0x20002bc8

08008a28 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a28:	f100 0308 	add.w	r3, r0, #8
 8008a2c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a32:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a34:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a36:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a3c:	4770      	bx	lr

08008a3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a42:	4770      	bx	lr

08008a44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a44:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a46:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a4c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a4e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a50:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008a52:	6803      	ldr	r3, [r0, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	6003      	str	r3, [r0, #0]
}
 8008a58:	4770      	bx	lr

08008a5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a5a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a5c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a5e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008a62:	d011      	beq.n	8008a88 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a64:	f100 0308 	add.w	r3, r0, #8
 8008a68:	461c      	mov	r4, r3
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	42aa      	cmp	r2, r5
 8008a70:	d9fa      	bls.n	8008a68 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a76:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a78:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a7a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a7c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	3301      	adds	r3, #1
 8008a82:	6003      	str	r3, [r0, #0]
}
 8008a84:	bc30      	pop	{r4, r5}
 8008a86:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a88:	6904      	ldr	r4, [r0, #16]
 8008a8a:	e7f2      	b.n	8008a72 <vListInsert+0x18>

08008a8c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a8c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a8e:	6841      	ldr	r1, [r0, #4]
 8008a90:	6882      	ldr	r2, [r0, #8]
 8008a92:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a94:	6841      	ldr	r1, [r0, #4]
 8008a96:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	4282      	cmp	r2, r0
 8008a9c:	d006      	beq.n	8008aac <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	3a01      	subs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008aa8:	6818      	ldr	r0, [r3, #0]
}
 8008aaa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008aac:	6882      	ldr	r2, [r0, #8]
 8008aae:	605a      	str	r2, [r3, #4]
 8008ab0:	e7f5      	b.n	8008a9e <uxListRemove+0x12>
	...

08008ab4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ab4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aba:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <prvTaskExitError+0x3c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac2:	d008      	beq.n	8008ad6 <prvTaskExitError+0x22>
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	e7fe      	b.n	8008ad4 <prvTaskExitError+0x20>
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0fc      	beq.n	8008ae6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008aec:	b002      	add	sp, #8
 8008aee:	4770      	bx	lr
 8008af0:	2000007c 	.word	0x2000007c

08008af4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008af4:	4806      	ldr	r0, [pc, #24]	; (8008b10 <prvPortStartFirstTask+0x1c>)
 8008af6:	6800      	ldr	r0, [r0, #0]
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	f380 8808 	msr	MSP, r0
 8008afe:	b662      	cpsie	i
 8008b00:	b661      	cpsie	f
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	df00      	svc	0
 8008b0c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b0e:	0000      	.short	0x0000
 8008b10:	e000ed08 	.word	0xe000ed08

08008b14 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b18:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b1c:	f021 0101 	bic.w	r1, r1, #1
 8008b20:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <pxPortInitialiseStack+0x20>)
 8008b26:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b2a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008b2e:	3840      	subs	r0, #64	; 0x40
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	08008ab5 	.word	0x08008ab5
	...

08008b40 <SVC_Handler>:
	__asm volatile (
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <pxCurrentTCBConst2>)
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	6808      	ldr	r0, [r1, #0]
 8008b46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b4a:	f380 8809 	msr	PSP, r0
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8811 	msr	BASEPRI, r0
 8008b5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008b5e:	4770      	bx	lr

08008b60 <pxCurrentTCBConst2>:
 8008b60:	20002c2c 	.word	0x20002c2c

08008b64 <vPortEnterCritical>:
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b74:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <vPortEnterCritical+0x40>)
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d000      	beq.n	8008b82 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008b80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008b8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b8e:	d0f7      	beq.n	8008b80 <vPortEnterCritical+0x1c>
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	e7fe      	b.n	8008ba0 <vPortEnterCritical+0x3c>
 8008ba2:	bf00      	nop
 8008ba4:	2000007c 	.word	0x2000007c

08008ba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <vPortExitCritical+0x28>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	b943      	cbnz	r3, 8008bc0 <vPortExitCritical+0x18>
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	e7fe      	b.n	8008bbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	4a03      	ldr	r2, [pc, #12]	; (8008bd0 <vPortExitCritical+0x28>)
 8008bc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bc6:	b90b      	cbnz	r3, 8008bcc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bc8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	2000007c 	.word	0x2000007c
	...

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bf0:	6010      	str	r0, [r2, #0]
 8008bf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008bf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bfa:	f380 8811 	msr	BASEPRI, r0
 8008bfe:	f001 f881 	bl	8009d04 <vTaskSwitchContext>
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c16:	f380 8809 	msr	PSP, r0
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	4770      	bx	lr

08008c20 <pxCurrentTCBConst>:
 8008c20:	20002c2c 	.word	0x20002c2c

08008c24 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c24:	b508      	push	{r3, lr}
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c36:	f000 ff25 	bl	8009a84 <xTaskIncrementTick>
 8008c3a:	b128      	cbz	r0, 8008c48 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c4e:	bd08      	pop	{r3, pc}

08008c50 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8008c50:	b510      	push	{r4, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008c56:	4b46      	ldr	r3, [pc, #280]	; (8008d70 <vPortSuppressTicksAndSleep+0x120>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4298      	cmp	r0, r3
 8008c5c:	d900      	bls.n	8008c60 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8008c5e:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8008c60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	f022 0201 	bic.w	r2, r2, #1
 8008c6a:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008c6c:	699c      	ldr	r4, [r3, #24]
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	4a40      	ldr	r2, [pc, #256]	; (8008d74 <vPortSuppressTicksAndSleep+0x124>)
 8008c74:	6812      	ldr	r2, [r2, #0]
 8008c76:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008c7a:	4b3f      	ldr	r3, [pc, #252]	; (8008d78 <vPortSuppressTicksAndSleep+0x128>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	42a3      	cmp	r3, r4
 8008c80:	d200      	bcs.n	8008c84 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8008c82:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8008c84:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8008c86:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8008c8a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8008c8e:	f001 f953 	bl	8009f38 <eTaskConfirmSleepModeStatus>
 8008c92:	b970      	cbnz	r0, 8008cb2 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008c94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008c9c:	691a      	ldr	r2, [r3, #16]
 8008c9e:	f042 0201 	orr.w	r2, r2, #1
 8008ca2:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008ca4:	4a33      	ldr	r2, [pc, #204]	; (8008d74 <vPortSuppressTicksAndSleep+0x124>)
 8008ca6:	6812      	ldr	r2, [r2, #0]
 8008ca8:	3a01      	subs	r2, #1
 8008caa:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8008cac:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8008cae:	b004      	add	sp, #16
 8008cb0:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008cb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cb6:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cb8:	2200      	movs	r2, #0
 8008cba:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8008cc8:	a803      	add	r0, sp, #12
 8008cca:	f7f8 fa05 	bl	80010d8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	b123      	cbz	r3, 8008cdc <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8008cd2:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8008cd6:	bf30      	wfi
				__asm volatile( "isb" );
 8008cd8:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8008cdc:	a801      	add	r0, sp, #4
 8008cde:	f7f8 fa1b 	bl	8001118 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008ce2:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8008ce4:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008ce8:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8008cec:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8008cee:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008cf2:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8008cf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cfa:	2206      	movs	r2, #6
 8008cfc:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008d04:	d023      	beq.n	8008d4e <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008d06:	4b1b      	ldr	r3, [pc, #108]	; (8008d74 <vPortSuppressTicksAndSleep+0x124>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	1b1b      	subs	r3, r3, r4
 8008d12:	4413      	add	r3, r2
 8008d14:	3b01      	subs	r3, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008d16:	4918      	ldr	r1, [pc, #96]	; (8008d78 <vPortSuppressTicksAndSleep+0x128>)
 8008d18:	6809      	ldr	r1, [r1, #0]
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	d801      	bhi.n	8008d22 <vPortSuppressTicksAndSleep+0xd2>
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d200      	bcs.n	8008d24 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008d22:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8008d24:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008d28:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008d2a:	9801      	ldr	r0, [sp, #4]
 8008d2c:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d2e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008d32:	2300      	movs	r3, #0
 8008d34:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 8008d3e:	f000 fe87 	bl	8009a50 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <vPortSuppressTicksAndSleep+0x124>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 8008d4a:	b662      	cpsie	i
	}
 8008d4c:	e7af      	b.n	8008cae <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <vPortSuppressTicksAndSleep+0x124>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	9901      	ldr	r1, [sp, #4]
 8008d54:	fb02 f101 	mul.w	r1, r2, r1
 8008d58:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008d5c:	69a3      	ldr	r3, [r4, #24]
 8008d5e:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008d60:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008d64:	fb00 2202 	mla	r2, r0, r2, r2
 8008d68:	1a5b      	subs	r3, r3, r1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	6163      	str	r3, [r4, #20]
 8008d6e:	e7de      	b.n	8008d2e <vPortSuppressTicksAndSleep+0xde>
 8008d70:	20002be8 	.word	0x20002be8
 8008d74:	20002be4 	.word	0x20002be4
 8008d78:	20002be0 	.word	0x20002be0

08008d7c <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8008d7c:	480f      	ldr	r0, [pc, #60]	; (8008dbc <vPortSetupTimerInterrupt+0x40>)
 8008d7e:	6803      	ldr	r3, [r0, #0]
 8008d80:	490f      	ldr	r1, [pc, #60]	; (8008dc0 <vPortSetupTimerInterrupt+0x44>)
 8008d82:	fba1 2303 	umull	r2, r3, r1, r3
 8008d86:	099b      	lsrs	r3, r3, #6
 8008d88:	4a0e      	ldr	r2, [pc, #56]	; (8008dc4 <vPortSetupTimerInterrupt+0x48>)
 8008d8a:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8008d8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d94:	4a0c      	ldr	r2, [pc, #48]	; (8008dc8 <vPortSetupTimerInterrupt+0x4c>)
 8008d96:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <vPortSetupTimerInterrupt+0x50>)
 8008d9a:	222d      	movs	r2, #45	; 0x2d
 8008d9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d9e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008da2:	2300      	movs	r3, #0
 8008da4:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008da6:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008da8:	6803      	ldr	r3, [r0, #0]
 8008daa:	fba1 1303 	umull	r1, r3, r1, r3
 8008dae:	099b      	lsrs	r3, r3, #6
 8008db0:	3b01      	subs	r3, #1
 8008db2:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008db4:	2307      	movs	r3, #7
 8008db6:	6113      	str	r3, [r2, #16]
}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20000074 	.word	0x20000074
 8008dc0:	10624dd3 	.word	0x10624dd3
 8008dc4:	20002be4 	.word	0x20002be4
 8008dc8:	20002be8 	.word	0x20002be8
 8008dcc:	20002be0 	.word	0x20002be0

08008dd0 <xPortStartScheduler>:
{
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dd4:	4b2a      	ldr	r3, [pc, #168]	; (8008e80 <xPortStartScheduler+0xb0>)
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ddc:	22ff      	movs	r2, #255	; 0xff
 8008dde:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008de8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008dec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008df0:	4a24      	ldr	r2, [pc, #144]	; (8008e84 <xPortStartScheduler+0xb4>)
 8008df2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008df4:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <xPortStartScheduler+0xb8>)
 8008df6:	2207      	movs	r2, #7
 8008df8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dfa:	e009      	b.n	8008e10 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8008dfc:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <xPortStartScheduler+0xb8>)
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e04:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e10:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008e14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e18:	d1f0      	bne.n	8008dfc <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <xPortStartScheduler+0xb8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d008      	beq.n	8008e34 <xPortStartScheduler+0x64>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	e7fe      	b.n	8008e32 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	4a14      	ldr	r2, [pc, #80]	; (8008e88 <xPortStartScheduler+0xb8>)
 8008e38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e3e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	4a0e      	ldr	r2, [pc, #56]	; (8008e80 <xPortStartScheduler+0xb0>)
 8008e46:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e4c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008e50:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008e54:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e58:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008e5c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008e60:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008e64:	f7ff ff8a 	bl	8008d7c <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008e68:	2400      	movs	r4, #0
 8008e6a:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <xPortStartScheduler+0xbc>)
 8008e6c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8008e6e:	f7ff fe41 	bl	8008af4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008e72:	f000 ff47 	bl	8009d04 <vTaskSwitchContext>
	prvTaskExitError();
 8008e76:	f7ff fe1d 	bl	8008ab4 <prvTaskExitError>
}
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	b002      	add	sp, #8
 8008e7e:	bd10      	pop	{r4, pc}
 8008e80:	e000e400 	.word	0xe000e400
 8008e84:	20002bd8 	.word	0x20002bd8
 8008e88:	20002bdc 	.word	0x20002bdc
 8008e8c:	2000007c 	.word	0x2000007c

08008e90 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e90:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d90f      	bls.n	8008eb8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e98:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <vPortValidateInterruptPriority+0x50>)
 8008e9a:	5c9b      	ldrb	r3, [r3, r2]
 8008e9c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e9e:	4a11      	ldr	r2, [pc, #68]	; (8008ee4 <vPortValidateInterruptPriority+0x54>)
 8008ea0:	7812      	ldrb	r2, [r2, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d908      	bls.n	8008eb8 <vPortValidateInterruptPriority+0x28>
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	e7fe      	b.n	8008eb6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008eb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ebc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ec4:	4a08      	ldr	r2, [pc, #32]	; (8008ee8 <vPortValidateInterruptPriority+0x58>)
 8008ec6:	6812      	ldr	r2, [r2, #0]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d908      	bls.n	8008ede <vPortValidateInterruptPriority+0x4e>
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	e7fe      	b.n	8008edc <vPortValidateInterruptPriority+0x4c>
	}
 8008ede:	4770      	bx	lr
 8008ee0:	e000e3f0 	.word	0xe000e3f0
 8008ee4:	20002bd8 	.word	0x20002bd8
 8008ee8:	20002bdc 	.word	0x20002bdc

08008eec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eec:	b510      	push	{r4, lr}
 8008eee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ef0:	f7ff fe38 	bl	8008b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ef4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d004      	beq.n	8008f06 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008efc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f7ff fe53 	bl	8008ba8 <vPortExitCritical>

	return xReturn;
}
 8008f02:	4620      	mov	r0, r4
 8008f04:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008f06:	2401      	movs	r4, #1
 8008f08:	e7f9      	b.n	8008efe <prvIsQueueFull+0x12>

08008f0a <prvIsQueueEmpty>:
{
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f0e:	f7ff fe29 	bl	8008b64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f14:	b923      	cbnz	r3, 8008f20 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008f16:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008f18:	f7ff fe46 	bl	8008ba8 <vPortExitCritical>
}
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008f20:	2400      	movs	r4, #0
 8008f22:	e7f9      	b.n	8008f18 <prvIsQueueEmpty+0xe>

08008f24 <prvCopyDataToQueue>:
{
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	4604      	mov	r4, r0
 8008f28:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f2a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008f2e:	b95a      	cbnz	r2, 8008f48 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f30:	6803      	ldr	r3, [r0, #0]
 8008f32:	b11b      	cbz	r3, 8008f3c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008f34:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f36:	3601      	adds	r6, #1
 8008f38:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f3c:	6880      	ldr	r0, [r0, #8]
 8008f3e:	f001 f829 	bl	8009f94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	e7f6      	b.n	8008f36 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008f48:	b96d      	cbnz	r5, 8008f66 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f4a:	6840      	ldr	r0, [r0, #4]
 8008f4c:	f00c fc5c 	bl	8015808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f52:	6863      	ldr	r3, [r4, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f58:	68a2      	ldr	r2, [r4, #8]
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d319      	bcc.n	8008f92 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008f62:	4628      	mov	r0, r5
 8008f64:	e7e7      	b.n	8008f36 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f66:	68c0      	ldr	r0, [r0, #12]
 8008f68:	f00c fc4e 	bl	8015808 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f6e:	4251      	negs	r1, r2
 8008f70:	68e3      	ldr	r3, [r4, #12]
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d202      	bcs.n	8008f82 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f7c:	68a3      	ldr	r3, [r4, #8]
 8008f7e:	440b      	add	r3, r1
 8008f80:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008f82:	2d02      	cmp	r5, #2
 8008f84:	d001      	beq.n	8008f8a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008f86:	2000      	movs	r0, #0
 8008f88:	e7d5      	b.n	8008f36 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f8a:	b126      	cbz	r6, 8008f96 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008f8c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e7d1      	b.n	8008f36 <prvCopyDataToQueue+0x12>
 8008f92:	4628      	mov	r0, r5
 8008f94:	e7cf      	b.n	8008f36 <prvCopyDataToQueue+0x12>
 8008f96:	2000      	movs	r0, #0
 8008f98:	e7cd      	b.n	8008f36 <prvCopyDataToQueue+0x12>

08008f9a <prvCopyDataFromQueue>:
{
 8008f9a:	b508      	push	{r3, lr}
 8008f9c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008fa0:	b162      	cbz	r2, 8008fbc <prvCopyDataFromQueue+0x22>
 8008fa2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa4:	68d9      	ldr	r1, [r3, #12]
 8008fa6:	4411      	add	r1, r2
 8008fa8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008faa:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008fae:	4561      	cmp	r1, ip
 8008fb0:	d301      	bcc.n	8008fb6 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	f00c fc26 	bl	8015808 <memcpy>
}
 8008fbc:	bd08      	pop	{r3, pc}

08008fbe <prvUnlockQueue>:
{
 8008fbe:	b538      	push	{r3, r4, r5, lr}
 8008fc0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008fc2:	f7ff fdcf 	bl	8008b64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008fc6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008fca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fcc:	e001      	b.n	8008fd2 <prvUnlockQueue+0x14>
			--cTxLock;
 8008fce:	3c01      	subs	r4, #1
 8008fd0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd2:	2c00      	cmp	r4, #0
 8008fd4:	dd0a      	ble.n	8008fec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd8:	b143      	cbz	r3, 8008fec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fda:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008fde:	f000 ff0f 	bl	8009e00 <xTaskRemoveFromEventList>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0f3      	beq.n	8008fce <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008fe6:	f000 ffa1 	bl	8009f2c <vTaskMissedYield>
 8008fea:	e7f0      	b.n	8008fce <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008fec:	23ff      	movs	r3, #255	; 0xff
 8008fee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008ff2:	f7ff fdd9 	bl	8008ba8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008ff6:	f7ff fdb5 	bl	8008b64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008ffa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008ffe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009000:	e001      	b.n	8009006 <prvUnlockQueue+0x48>
				--cRxLock;
 8009002:	3c01      	subs	r4, #1
 8009004:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009006:	2c00      	cmp	r4, #0
 8009008:	dd0a      	ble.n	8009020 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800900a:	692b      	ldr	r3, [r5, #16]
 800900c:	b143      	cbz	r3, 8009020 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800900e:	f105 0010 	add.w	r0, r5, #16
 8009012:	f000 fef5 	bl	8009e00 <xTaskRemoveFromEventList>
 8009016:	2800      	cmp	r0, #0
 8009018:	d0f3      	beq.n	8009002 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800901a:	f000 ff87 	bl	8009f2c <vTaskMissedYield>
 800901e:	e7f0      	b.n	8009002 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009020:	23ff      	movs	r3, #255	; 0xff
 8009022:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009026:	f7ff fdbf 	bl	8008ba8 <vPortExitCritical>
}
 800902a:	bd38      	pop	{r3, r4, r5, pc}

0800902c <xQueueGenericReset>:
{
 800902c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800902e:	b1e0      	cbz	r0, 800906a <xQueueGenericReset+0x3e>
 8009030:	460d      	mov	r5, r1
 8009032:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009034:	f7ff fd96 	bl	8008b64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800903c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800903e:	fb01 3002 	mla	r0, r1, r2, r3
 8009042:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009044:	2000      	movs	r0, #0
 8009046:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009048:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800904a:	3a01      	subs	r2, #1
 800904c:	fb02 3301 	mla	r3, r2, r1, r3
 8009050:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009052:	23ff      	movs	r3, #255	; 0xff
 8009054:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800905c:	b9fd      	cbnz	r5, 800909e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800905e:	6923      	ldr	r3, [r4, #16]
 8009060:	b963      	cbnz	r3, 800907c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009062:	f7ff fda1 	bl	8008ba8 <vPortExitCritical>
}
 8009066:	2001      	movs	r0, #1
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800907a:	e7fe      	b.n	800907a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907c:	f104 0010 	add.w	r0, r4, #16
 8009080:	f000 febe 	bl	8009e00 <xTaskRemoveFromEventList>
 8009084:	2800      	cmp	r0, #0
 8009086:	d0ec      	beq.n	8009062 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009088:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800908c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009090:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	e7e1      	b.n	8009062 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800909e:	f104 0010 	add.w	r0, r4, #16
 80090a2:	f7ff fcc1 	bl	8008a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80090aa:	f7ff fcbd 	bl	8008a28 <vListInitialise>
 80090ae:	e7d8      	b.n	8009062 <xQueueGenericReset+0x36>

080090b0 <prvInitialiseNewQueue>:
{
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	461d      	mov	r5, r3
 80090b4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80090b6:	460b      	mov	r3, r1
 80090b8:	b949      	cbnz	r1, 80090ce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090ba:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80090bc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090be:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090c0:	2101      	movs	r1, #1
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ffb2 	bl	800902c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80090c8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	e7f4      	b.n	80090bc <prvInitialiseNewQueue+0xc>

080090d2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090d2:	b940      	cbnz	r0, 80090e6 <xQueueGenericCreateStatic+0x14>
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	e7fe      	b.n	80090e4 <xQueueGenericCreateStatic+0x12>
	{
 80090e6:	b510      	push	{r4, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	461c      	mov	r4, r3
 80090ec:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80090ee:	b153      	cbz	r3, 8009106 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090f0:	b192      	cbz	r2, 8009118 <xQueueGenericCreateStatic+0x46>
 80090f2:	b989      	cbnz	r1, 8009118 <xQueueGenericCreateStatic+0x46>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	e7fe      	b.n	8009104 <xQueueGenericCreateStatic+0x32>
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009116:	e7fe      	b.n	8009116 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009118:	b16a      	cbz	r2, 8009136 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800911a:	2350      	movs	r3, #80	; 0x50
 800911c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	2b50      	cmp	r3, #80	; 0x50
 8009122:	d013      	beq.n	800914c <xQueueGenericCreateStatic+0x7a>
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	e7fe      	b.n	8009134 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009136:	2900      	cmp	r1, #0
 8009138:	d0ef      	beq.n	800911a <xQueueGenericCreateStatic+0x48>
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	e7fe      	b.n	800914a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800914c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800914e:	2301      	movs	r3, #1
 8009150:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009154:	9400      	str	r4, [sp, #0]
 8009156:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800915a:	4660      	mov	r0, ip
 800915c:	f7ff ffa8 	bl	80090b0 <prvInitialiseNewQueue>
	}
 8009160:	4620      	mov	r0, r4
 8009162:	b004      	add	sp, #16
 8009164:	bd10      	pop	{r4, pc}

08009166 <xQueueGenericSend>:
{
 8009166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009168:	b085      	sub	sp, #20
 800916a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800916c:	b188      	cbz	r0, 8009192 <xQueueGenericSend+0x2c>
 800916e:	460f      	mov	r7, r1
 8009170:	461d      	mov	r5, r3
 8009172:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009174:	b1b1      	cbz	r1, 80091a4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009176:	2d02      	cmp	r5, #2
 8009178:	d120      	bne.n	80091bc <xQueueGenericSend+0x56>
 800917a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d01d      	beq.n	80091bc <xQueueGenericSend+0x56>
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	e7fe      	b.n	8009190 <xQueueGenericSend+0x2a>
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80091a2:	e7fe      	b.n	80091a2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0e5      	beq.n	8009176 <xQueueGenericSend+0x10>
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	e7fe      	b.n	80091ba <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091bc:	f000 feda 	bl	8009f74 <xTaskGetSchedulerState>
 80091c0:	4606      	mov	r6, r0
 80091c2:	b958      	cbnz	r0, 80091dc <xQueueGenericSend+0x76>
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d048      	beq.n	800925c <xQueueGenericSend+0xf6>
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	e7fe      	b.n	80091da <xQueueGenericSend+0x74>
 80091dc:	2600      	movs	r6, #0
 80091de:	e03d      	b.n	800925c <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091e0:	462a      	mov	r2, r5
 80091e2:	4639      	mov	r1, r7
 80091e4:	4620      	mov	r0, r4
 80091e6:	f7ff fe9d 	bl	8008f24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ec:	b97b      	cbnz	r3, 800920e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80091ee:	b148      	cbz	r0, 8009204 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80091f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009204:	f7ff fcd0 	bl	8008ba8 <vPortExitCritical>
				return pdPASS;
 8009208:	2001      	movs	r0, #1
}
 800920a:	b005      	add	sp, #20
 800920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009212:	f000 fdf5 	bl	8009e00 <xTaskRemoveFromEventList>
 8009216:	2800      	cmp	r0, #0
 8009218:	d0f4      	beq.n	8009204 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800921a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800921e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009222:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	e7e9      	b.n	8009204 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009230:	f7ff fcba 	bl	8008ba8 <vPortExitCritical>
					return errQUEUE_FULL;
 8009234:	2000      	movs	r0, #0
 8009236:	e7e8      	b.n	800920a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009238:	a802      	add	r0, sp, #8
 800923a:	f000 fe29 	bl	8009e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800923e:	2601      	movs	r6, #1
 8009240:	e019      	b.n	8009276 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009242:	2300      	movs	r3, #0
 8009244:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009248:	e021      	b.n	800928e <xQueueGenericSend+0x128>
 800924a:	2300      	movs	r3, #0
 800924c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009250:	e023      	b.n	800929a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009252:	4620      	mov	r0, r4
 8009254:	f7ff feb3 	bl	8008fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009258:	f000 fca0 	bl	8009b9c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800925c:	f7ff fc82 	bl	8008b64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009260:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009264:	429a      	cmp	r2, r3
 8009266:	d3bb      	bcc.n	80091e0 <xQueueGenericSend+0x7a>
 8009268:	2d02      	cmp	r5, #2
 800926a:	d0b9      	beq.n	80091e0 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0de      	beq.n	8009230 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8009272:	2e00      	cmp	r6, #0
 8009274:	d0e0      	beq.n	8009238 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009276:	f7ff fc97 	bl	8008ba8 <vPortExitCritical>
		vTaskSuspendAll();
 800927a:	f000 fbdb 	bl	8009a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800927e:	f7ff fc71 	bl	8008b64 <vPortEnterCritical>
 8009282:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009286:	b252      	sxtb	r2, r2
 8009288:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800928c:	d0d9      	beq.n	8009242 <xQueueGenericSend+0xdc>
 800928e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009292:	b252      	sxtb	r2, r2
 8009294:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009298:	d0d7      	beq.n	800924a <xQueueGenericSend+0xe4>
 800929a:	f7ff fc85 	bl	8008ba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800929e:	a901      	add	r1, sp, #4
 80092a0:	a802      	add	r0, sp, #8
 80092a2:	f000 fe01 	bl	8009ea8 <xTaskCheckForTimeOut>
 80092a6:	b9d8      	cbnz	r0, 80092e0 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7ff fe1f 	bl	8008eec <prvIsQueueFull>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d0cf      	beq.n	8009252 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092b2:	9901      	ldr	r1, [sp, #4]
 80092b4:	f104 0010 	add.w	r0, r4, #16
 80092b8:	f000 fd6e 	bl	8009d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fe7e 	bl	8008fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092c2:	f000 fc6b 	bl	8009b9c <xTaskResumeAll>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1c8      	bne.n	800925c <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80092ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80092ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	e7bd      	b.n	800925c <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7ff fe6c 	bl	8008fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092e6:	f000 fc59 	bl	8009b9c <xTaskResumeAll>
			return errQUEUE_FULL;
 80092ea:	2000      	movs	r0, #0
 80092ec:	e78d      	b.n	800920a <xQueueGenericSend+0xa4>

080092ee <xQueueGenericSendFromISR>:
{
 80092ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80092f2:	b190      	cbz	r0, 800931a <xQueueGenericSendFromISR+0x2c>
 80092f4:	460f      	mov	r7, r1
 80092f6:	4616      	mov	r6, r2
 80092f8:	461c      	mov	r4, r3
 80092fa:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092fc:	b1b1      	cbz	r1, 800932c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092fe:	2c02      	cmp	r4, #2
 8009300:	d120      	bne.n	8009344 <xQueueGenericSendFromISR+0x56>
 8009302:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d01d      	beq.n	8009344 <xQueueGenericSendFromISR+0x56>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSendFromISR+0x2a>
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800932a:	e7fe      	b.n	800932a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0e5      	beq.n	80092fe <xQueueGenericSendFromISR+0x10>
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	e7fe      	b.n	8009342 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009344:	f7ff fda4 	bl	8008e90 <vPortValidateInterruptPriority>
	__asm volatile
 8009348:	f3ef 8811 	mrs	r8, BASEPRI
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800935c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800935e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009360:	429a      	cmp	r2, r3
 8009362:	d306      	bcc.n	8009372 <xQueueGenericSendFromISR+0x84>
 8009364:	2c02      	cmp	r4, #2
 8009366:	d004      	beq.n	8009372 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009368:	2000      	movs	r0, #0
	__asm volatile
 800936a:	f388 8811 	msr	BASEPRI, r8
}
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009372:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8009376:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937a:	4622      	mov	r2, r4
 800937c:	4639      	mov	r1, r7
 800937e:	4628      	mov	r0, r5
 8009380:	f7ff fdd0 	bl	8008f24 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009384:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009388:	d006      	beq.n	8009398 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800938a:	f109 0301 	add.w	r3, r9, #1
 800938e:	b25b      	sxtb	r3, r3
 8009390:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009394:	2001      	movs	r0, #1
 8009396:	e7e8      	b.n	800936a <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009398:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800939a:	b90b      	cbnz	r3, 80093a0 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 800939c:	2001      	movs	r0, #1
 800939e:	e7e4      	b.n	800936a <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093a0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80093a4:	f000 fd2c 	bl	8009e00 <xTaskRemoveFromEventList>
 80093a8:	b118      	cbz	r0, 80093b2 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80093aa:	b126      	cbz	r6, 80093b6 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093ac:	2001      	movs	r0, #1
 80093ae:	6030      	str	r0, [r6, #0]
 80093b0:	e7db      	b.n	800936a <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7d9      	b.n	800936a <xQueueGenericSendFromISR+0x7c>
 80093b6:	2001      	movs	r0, #1
 80093b8:	e7d7      	b.n	800936a <xQueueGenericSendFromISR+0x7c>

080093ba <xQueueReceive>:
{
 80093ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093bc:	b085      	sub	sp, #20
 80093be:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80093c0:	b190      	cbz	r0, 80093e8 <xQueueReceive+0x2e>
 80093c2:	460f      	mov	r7, r1
 80093c4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093c6:	b1c1      	cbz	r1, 80093fa <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093c8:	f000 fdd4 	bl	8009f74 <xTaskGetSchedulerState>
 80093cc:	4606      	mov	r6, r0
 80093ce:	bb00      	cbnz	r0, 8009412 <xQueueReceive+0x58>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d05e      	beq.n	8009494 <xQueueReceive+0xda>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	e7fe      	b.n	80093e6 <xQueueReceive+0x2c>
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80093f8:	e7fe      	b.n	80093f8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0e3      	beq.n	80093c8 <xQueueReceive+0xe>
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	e7fe      	b.n	8009410 <xQueueReceive+0x56>
 8009412:	2600      	movs	r6, #0
 8009414:	e03e      	b.n	8009494 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009416:	4639      	mov	r1, r7
 8009418:	4620      	mov	r0, r4
 800941a:	f7ff fdbe 	bl	8008f9a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800941e:	3d01      	subs	r5, #1
 8009420:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009422:	6923      	ldr	r3, [r4, #16]
 8009424:	b923      	cbnz	r3, 8009430 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009426:	f7ff fbbf 	bl	8008ba8 <vPortExitCritical>
				return pdPASS;
 800942a:	2001      	movs	r0, #1
}
 800942c:	b005      	add	sp, #20
 800942e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	f104 0010 	add.w	r0, r4, #16
 8009434:	f000 fce4 	bl	8009e00 <xTaskRemoveFromEventList>
 8009438:	2800      	cmp	r0, #0
 800943a:	d0f4      	beq.n	8009426 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800943c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	e7e9      	b.n	8009426 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009452:	f7ff fba9 	bl	8008ba8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009456:	2000      	movs	r0, #0
 8009458:	e7e8      	b.n	800942c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800945a:	a802      	add	r0, sp, #8
 800945c:	f000 fd18 	bl	8009e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009460:	2601      	movs	r6, #1
 8009462:	e021      	b.n	80094a8 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009464:	2300      	movs	r3, #0
 8009466:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800946a:	e029      	b.n	80094c0 <xQueueReceive+0x106>
 800946c:	2300      	movs	r3, #0
 800946e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009472:	e02b      	b.n	80094cc <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009474:	4620      	mov	r0, r4
 8009476:	f7ff fda2 	bl	8008fbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800947a:	f000 fb8f 	bl	8009b9c <xTaskResumeAll>
 800947e:	e009      	b.n	8009494 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff fd9c 	bl	8008fbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009486:	f000 fb89 	bl	8009b9c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800948a:	4620      	mov	r0, r4
 800948c:	f7ff fd3d 	bl	8008f0a <prvIsQueueEmpty>
 8009490:	2800      	cmp	r0, #0
 8009492:	d13f      	bne.n	8009514 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009494:	f7ff fb66 	bl	8008b64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009498:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800949a:	2d00      	cmp	r5, #0
 800949c:	d1bb      	bne.n	8009416 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0d6      	beq.n	8009452 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80094a4:	2e00      	cmp	r6, #0
 80094a6:	d0d8      	beq.n	800945a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80094a8:	f7ff fb7e 	bl	8008ba8 <vPortExitCritical>
		vTaskSuspendAll();
 80094ac:	f000 fac2 	bl	8009a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094b0:	f7ff fb58 	bl	8008b64 <vPortEnterCritical>
 80094b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80094b8:	b25b      	sxtb	r3, r3
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094be:	d0d1      	beq.n	8009464 <xQueueReceive+0xaa>
 80094c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80094c4:	b25b      	sxtb	r3, r3
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ca:	d0cf      	beq.n	800946c <xQueueReceive+0xb2>
 80094cc:	f7ff fb6c 	bl	8008ba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d0:	a901      	add	r1, sp, #4
 80094d2:	a802      	add	r0, sp, #8
 80094d4:	f000 fce8 	bl	8009ea8 <xTaskCheckForTimeOut>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d1d1      	bne.n	8009480 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094dc:	4620      	mov	r0, r4
 80094de:	f7ff fd14 	bl	8008f0a <prvIsQueueEmpty>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d0c6      	beq.n	8009474 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094e6:	9901      	ldr	r1, [sp, #4]
 80094e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094ec:	f000 fc54 	bl	8009d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7ff fd64 	bl	8008fbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094f6:	f000 fb51 	bl	8009b9c <xTaskResumeAll>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d1ca      	bne.n	8009494 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80094fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	e7bf      	b.n	8009494 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8009514:	2000      	movs	r0, #0
 8009516:	e789      	b.n	800942c <xQueueReceive+0x72>

08009518 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009518:	2300      	movs	r3, #0
 800951a:	2b07      	cmp	r3, #7
 800951c:	d80c      	bhi.n	8009538 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <vQueueAddToRegistry+0x24>)
 8009520:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009524:	b10a      	cbz	r2, 800952a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009526:	3301      	adds	r3, #1
 8009528:	e7f7      	b.n	800951a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800952a:	4a04      	ldr	r2, [pc, #16]	; (800953c <vQueueAddToRegistry+0x24>)
 800952c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009530:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009534:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009536:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20002bec 	.word	0x20002bec

08009540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4604      	mov	r4, r0
 8009544:	460d      	mov	r5, r1
 8009546:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009548:	f7ff fb0c 	bl	8008b64 <vPortEnterCritical>
 800954c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009550:	b25b      	sxtb	r3, r3
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009556:	d00d      	beq.n	8009574 <vQueueWaitForMessageRestricted+0x34>
 8009558:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800955c:	b25b      	sxtb	r3, r3
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009562:	d00b      	beq.n	800957c <vQueueWaitForMessageRestricted+0x3c>
 8009564:	f7ff fb20 	bl	8008ba8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800956a:	b15b      	cbz	r3, 8009584 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800956c:	4620      	mov	r0, r4
 800956e:	f7ff fd26 	bl	8008fbe <prvUnlockQueue>
	}
 8009572:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009574:	2300      	movs	r3, #0
 8009576:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800957a:	e7ed      	b.n	8009558 <vQueueWaitForMessageRestricted+0x18>
 800957c:	2300      	movs	r3, #0
 800957e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009582:	e7ef      	b.n	8009564 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009584:	4632      	mov	r2, r6
 8009586:	4629      	mov	r1, r5
 8009588:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800958c:	f000 fc1c 	bl	8009dc8 <vTaskPlaceOnEventListRestricted>
 8009590:	e7ec      	b.n	800956c <vQueueWaitForMessageRestricted+0x2c>
	...

08009594 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8009594:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <prvGetExpectedIdleTime+0x2c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	b103      	cbz	r3, 800959c <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800959a:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800959c:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <prvGetExpectedIdleTime+0x30>)
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80095a2:	b950      	cbnz	r0, 80095ba <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80095a4:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <prvGetExpectedIdleTime+0x34>)
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	2a01      	cmp	r2, #1
 80095aa:	d807      	bhi.n	80095bc <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80095ac:	b933      	cbnz	r3, 80095bc <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80095ae:	4b07      	ldr	r3, [pc, #28]	; (80095cc <prvGetExpectedIdleTime+0x38>)
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <prvGetExpectedIdleTime+0x3c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	1ac0      	subs	r0, r0, r3
 80095b8:	4770      	bx	lr
			xReturn = 0;
 80095ba:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	200030ac 	.word	0x200030ac
 80095c4:	20002c2c 	.word	0x20002c2c
 80095c8:	20002c38 	.word	0x20002c38
 80095cc:	200030dc 	.word	0x200030dc
 80095d0:	20003124 	.word	0x20003124

080095d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d4:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <prvResetNextTaskUnblockTime+0x24>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	b923      	cbnz	r3, 80095e6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <prvResetNextTaskUnblockTime+0x28>)
 80095de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e6:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <prvResetNextTaskUnblockTime+0x24>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <prvResetNextTaskUnblockTime+0x28>)
 80095f2:	601a      	str	r2, [r3, #0]
	}
}
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20002c30 	.word	0x20002c30
 80095fc:	200030dc 	.word	0x200030dc

08009600 <prvInitialiseNewTask>:
{
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	4680      	mov	r8, r0
 8009606:	460d      	mov	r5, r1
 8009608:	4617      	mov	r7, r2
 800960a:	4699      	mov	r9, r3
 800960c:	9e08      	ldr	r6, [sp, #32]
 800960e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009614:	0092      	lsls	r2, r2, #2
 8009616:	21a5      	movs	r1, #165	; 0xa5
 8009618:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800961a:	f00c f8c9 	bl	80157b0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800961e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009620:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8009624:	3a01      	subs	r2, #1
 8009626:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800962a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800962e:	b3a5      	cbz	r5, 800969a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009630:	f04f 0c00 	mov.w	ip, #0
 8009634:	f1bc 0f0f 	cmp.w	ip, #15
 8009638:	d809      	bhi.n	800964e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800963a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800963e:	eb04 020c 	add.w	r2, r4, ip
 8009642:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009646:	b113      	cbz	r3, 800964e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009648:	f10c 0c01 	add.w	ip, ip, #1
 800964c:	e7f2      	b.n	8009634 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800964e:	2300      	movs	r3, #0
 8009650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009654:	2e37      	cmp	r6, #55	; 0x37
 8009656:	d900      	bls.n	800965a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009658:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800965a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800965c:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800965e:	2500      	movs	r5, #0
 8009660:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009662:	1d20      	adds	r0, r4, #4
 8009664:	f7ff f9eb 	bl	8008a3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009668:	f104 0018 	add.w	r0, r4, #24
 800966c:	f7ff f9e7 	bl	8008a3e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009670:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009672:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009676:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009678:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800967a:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800967c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009680:	464a      	mov	r2, r9
 8009682:	4641      	mov	r1, r8
 8009684:	4638      	mov	r0, r7
 8009686:	f7ff fa45 	bl	8008b14 <pxPortInitialiseStack>
 800968a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800968c:	f1ba 0f00 	cmp.w	sl, #0
 8009690:	d001      	beq.n	8009696 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009692:	f8ca 4000 	str.w	r4, [sl]
}
 8009696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800969a:	2300      	movs	r3, #0
 800969c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80096a0:	e7d8      	b.n	8009654 <prvInitialiseNewTask+0x54>
	...

080096a4 <prvInitialiseTaskLists>:
{
 80096a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096a6:	2400      	movs	r4, #0
 80096a8:	e007      	b.n	80096ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80096ae:	0093      	lsls	r3, r2, #2
 80096b0:	480e      	ldr	r0, [pc, #56]	; (80096ec <prvInitialiseTaskLists+0x48>)
 80096b2:	4418      	add	r0, r3
 80096b4:	f7ff f9b8 	bl	8008a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096b8:	3401      	adds	r4, #1
 80096ba:	2c37      	cmp	r4, #55	; 0x37
 80096bc:	d9f5      	bls.n	80096aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80096be:	4d0c      	ldr	r5, [pc, #48]	; (80096f0 <prvInitialiseTaskLists+0x4c>)
 80096c0:	4628      	mov	r0, r5
 80096c2:	f7ff f9b1 	bl	8008a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096c6:	4c0b      	ldr	r4, [pc, #44]	; (80096f4 <prvInitialiseTaskLists+0x50>)
 80096c8:	4620      	mov	r0, r4
 80096ca:	f7ff f9ad 	bl	8008a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096ce:	480a      	ldr	r0, [pc, #40]	; (80096f8 <prvInitialiseTaskLists+0x54>)
 80096d0:	f7ff f9aa 	bl	8008a28 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80096d4:	4809      	ldr	r0, [pc, #36]	; (80096fc <prvInitialiseTaskLists+0x58>)
 80096d6:	f7ff f9a7 	bl	8008a28 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80096da:	4809      	ldr	r0, [pc, #36]	; (8009700 <prvInitialiseTaskLists+0x5c>)
 80096dc:	f7ff f9a4 	bl	8008a28 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <prvInitialiseTaskLists+0x60>)
 80096e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096e4:	4b08      	ldr	r3, [pc, #32]	; (8009708 <prvInitialiseTaskLists+0x64>)
 80096e6:	601c      	str	r4, [r3, #0]
}
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	bf00      	nop
 80096ec:	20002c38 	.word	0x20002c38
 80096f0:	200030b0 	.word	0x200030b0
 80096f4:	200030c4 	.word	0x200030c4
 80096f8:	200030e4 	.word	0x200030e4
 80096fc:	20003110 	.word	0x20003110
 8009700:	200030fc 	.word	0x200030fc
 8009704:	20002c30 	.word	0x20002c30
 8009708:	20002c34 	.word	0x20002c34

0800970c <prvAddNewTaskToReadyList>:
{
 800970c:	b510      	push	{r4, lr}
 800970e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009710:	f7ff fa28 	bl	8008b64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009714:	4a22      	ldr	r2, [pc, #136]	; (80097a0 <prvAddNewTaskToReadyList+0x94>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	3301      	adds	r3, #1
 800971a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800971c:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <prvAddNewTaskToReadyList+0x98>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	b15b      	cbz	r3, 800973a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009722:	4b21      	ldr	r3, [pc, #132]	; (80097a8 <prvAddNewTaskToReadyList+0x9c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	b96b      	cbnz	r3, 8009744 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009728:	4b1e      	ldr	r3, [pc, #120]	; (80097a4 <prvAddNewTaskToReadyList+0x98>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009730:	429a      	cmp	r2, r3
 8009732:	d807      	bhi.n	8009744 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009734:	4b1b      	ldr	r3, [pc, #108]	; (80097a4 <prvAddNewTaskToReadyList+0x98>)
 8009736:	601c      	str	r4, [r3, #0]
 8009738:	e004      	b.n	8009744 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800973a:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <prvAddNewTaskToReadyList+0x98>)
 800973c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800973e:	6813      	ldr	r3, [r2, #0]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d029      	beq.n	8009798 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009744:	4a19      	ldr	r2, [pc, #100]	; (80097ac <prvAddNewTaskToReadyList+0xa0>)
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	3301      	adds	r3, #1
 800974a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800974c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800974e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <prvAddNewTaskToReadyList+0xa4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4298      	cmp	r0, r3
 8009756:	d901      	bls.n	800975c <prvAddNewTaskToReadyList+0x50>
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <prvAddNewTaskToReadyList+0xa4>)
 800975a:	6018      	str	r0, [r3, #0]
 800975c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009760:	1d21      	adds	r1, r4, #4
 8009762:	4b14      	ldr	r3, [pc, #80]	; (80097b4 <prvAddNewTaskToReadyList+0xa8>)
 8009764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009768:	f7ff f96c 	bl	8008a44 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800976c:	f7ff fa1c 	bl	8008ba8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <prvAddNewTaskToReadyList+0x9c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	b17b      	cbz	r3, 8009796 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <prvAddNewTaskToReadyList+0x98>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800977e:	429a      	cmp	r2, r3
 8009780:	d209      	bcs.n	8009796 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8009782:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
}
 8009796:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009798:	f7ff ff84 	bl	80096a4 <prvInitialiseTaskLists>
 800979c:	e7d2      	b.n	8009744 <prvAddNewTaskToReadyList+0x38>
 800979e:	bf00      	nop
 80097a0:	20003098 	.word	0x20003098
 80097a4:	20002c2c 	.word	0x20002c2c
 80097a8:	200030f8 	.word	0x200030f8
 80097ac:	200030a8 	.word	0x200030a8
 80097b0:	200030ac 	.word	0x200030ac
 80097b4:	20002c38 	.word	0x20002c38

080097b8 <prvDeleteTCB>:
	{
 80097b8:	b510      	push	{r4, lr}
 80097ba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097bc:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80097c0:	b163      	cbz	r3, 80097dc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d011      	beq.n	80097ea <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d00e      	beq.n	80097e8 <prvDeleteTCB+0x30>
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	e7fe      	b.n	80097da <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80097dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80097de:	f7ff f8eb 	bl	80089b8 <vPortFree>
				vPortFree( pxTCB );
 80097e2:	4620      	mov	r0, r4
 80097e4:	f7ff f8e8 	bl	80089b8 <vPortFree>
	}
 80097e8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80097ea:	f7ff f8e5 	bl	80089b8 <vPortFree>
 80097ee:	e7fb      	b.n	80097e8 <prvDeleteTCB+0x30>

080097f0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f0:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <prvCheckTasksWaitingTermination+0x40>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	b1d3      	cbz	r3, 800982c <prvCheckTasksWaitingTermination+0x3c>
{
 80097f6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80097f8:	f7ff f9b4 	bl	8008b64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <prvCheckTasksWaitingTermination+0x44>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009802:	1d20      	adds	r0, r4, #4
 8009804:	f7ff f942 	bl	8008a8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009808:	4a0b      	ldr	r2, [pc, #44]	; (8009838 <prvCheckTasksWaitingTermination+0x48>)
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	3b01      	subs	r3, #1
 800980e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009810:	4a07      	ldr	r2, [pc, #28]	; (8009830 <prvCheckTasksWaitingTermination+0x40>)
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	3b01      	subs	r3, #1
 8009816:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009818:	f7ff f9c6 	bl	8008ba8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff ffcb 	bl	80097b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009822:	4b03      	ldr	r3, [pc, #12]	; (8009830 <prvCheckTasksWaitingTermination+0x40>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e6      	bne.n	80097f8 <prvCheckTasksWaitingTermination+0x8>
}
 800982a:	bd10      	pop	{r4, pc}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	2000309c 	.word	0x2000309c
 8009834:	20003110 	.word	0x20003110
 8009838:	20003098 	.word	0x20003098

0800983c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <prvAddCurrentTaskToDelayedList+0x64>)
 8009844:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009846:	4b17      	ldr	r3, [pc, #92]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	3004      	adds	r0, #4
 800984c:	f7ff f91e 	bl	8008a8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009850:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009854:	d00d      	beq.n	8009872 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009856:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x68>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800985e:	42a6      	cmp	r6, r4
 8009860:	d910      	bls.n	8009884 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009862:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	3104      	adds	r1, #4
 800986c:	f7ff f8f5 	bl	8008a5a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009870:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009872:	2d00      	cmp	r5, #0
 8009874:	d0ef      	beq.n	8009856 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009876:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	3104      	adds	r1, #4
 800987c:	480b      	ldr	r0, [pc, #44]	; (80098ac <prvAddCurrentTaskToDelayedList+0x70>)
 800987e:	f7ff f8e1 	bl	8008a44 <vListInsertEnd>
 8009882:	e7f5      	b.n	8009870 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <prvAddCurrentTaskToDelayedList+0x74>)
 8009886:	6818      	ldr	r0, [r3, #0]
 8009888:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <prvAddCurrentTaskToDelayedList+0x68>)
 800988a:	6819      	ldr	r1, [r3, #0]
 800988c:	3104      	adds	r1, #4
 800988e:	f7ff f8e4 	bl	8008a5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009892:	4b08      	ldr	r3, [pc, #32]	; (80098b4 <prvAddCurrentTaskToDelayedList+0x78>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	42a3      	cmp	r3, r4
 8009898:	d9ea      	bls.n	8009870 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800989a:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <prvAddCurrentTaskToDelayedList+0x78>)
 800989c:	601c      	str	r4, [r3, #0]
}
 800989e:	e7e7      	b.n	8009870 <prvAddCurrentTaskToDelayedList+0x34>
 80098a0:	20003124 	.word	0x20003124
 80098a4:	20002c2c 	.word	0x20002c2c
 80098a8:	20002c34 	.word	0x20002c34
 80098ac:	200030fc 	.word	0x200030fc
 80098b0:	20002c30 	.word	0x20002c30
 80098b4:	200030dc 	.word	0x200030dc

080098b8 <xTaskCreateStatic>:
	{
 80098b8:	b530      	push	{r4, r5, lr}
 80098ba:	b087      	sub	sp, #28
 80098bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80098be:	b17c      	cbz	r4, 80098e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098c2:	b1b5      	cbz	r5, 80098f2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80098c4:	255c      	movs	r5, #92	; 0x5c
 80098c6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098c8:	9d04      	ldr	r5, [sp, #16]
 80098ca:	2d5c      	cmp	r5, #92	; 0x5c
 80098cc:	d01a      	beq.n	8009904 <xTaskCreateStatic+0x4c>
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	e7fe      	b.n	80098de <xTaskCreateStatic+0x26>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80098f0:	e7fe      	b.n	80098f0 <xTaskCreateStatic+0x38>
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009902:	e7fe      	b.n	8009902 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009904:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009908:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800990a:	2402      	movs	r4, #2
 800990c:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009910:	2400      	movs	r4, #0
 8009912:	9403      	str	r4, [sp, #12]
 8009914:	9502      	str	r5, [sp, #8]
 8009916:	ac05      	add	r4, sp, #20
 8009918:	9401      	str	r4, [sp, #4]
 800991a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800991c:	9400      	str	r4, [sp, #0]
 800991e:	f7ff fe6f 	bl	8009600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009922:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009924:	f7ff fef2 	bl	800970c <prvAddNewTaskToReadyList>
	}
 8009928:	9805      	ldr	r0, [sp, #20]
 800992a:	b007      	add	sp, #28
 800992c:	bd30      	pop	{r4, r5, pc}

0800992e <xTaskCreate>:
	{
 800992e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009932:	b085      	sub	sp, #20
 8009934:	4607      	mov	r7, r0
 8009936:	4688      	mov	r8, r1
 8009938:	4614      	mov	r4, r2
 800993a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800993c:	0090      	lsls	r0, r2, #2
 800993e:	f7fe ffc3 	bl	80088c8 <pvPortMalloc>
			if( pxStack != NULL )
 8009942:	b300      	cbz	r0, 8009986 <xTaskCreate+0x58>
 8009944:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009946:	205c      	movs	r0, #92	; 0x5c
 8009948:	f7fe ffbe 	bl	80088c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800994c:	4605      	mov	r5, r0
 800994e:	b1b0      	cbz	r0, 800997e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009950:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009954:	b1e5      	cbz	r5, 8009990 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009956:	2300      	movs	r3, #0
 8009958:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800995c:	9303      	str	r3, [sp, #12]
 800995e:	9502      	str	r5, [sp, #8]
 8009960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4633      	mov	r3, r6
 800996a:	4622      	mov	r2, r4
 800996c:	4641      	mov	r1, r8
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff fe46 	bl	8009600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009974:	4628      	mov	r0, r5
 8009976:	f7ff fec9 	bl	800970c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800997a:	2001      	movs	r0, #1
 800997c:	e005      	b.n	800998a <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800997e:	4648      	mov	r0, r9
 8009980:	f7ff f81a 	bl	80089b8 <vPortFree>
 8009984:	e7e6      	b.n	8009954 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 800998a:	b005      	add	sp, #20
 800998c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8009994:	e7f9      	b.n	800998a <xTaskCreate+0x5c>
	...

08009998 <vTaskStartScheduler>:
{
 8009998:	b510      	push	{r4, lr}
 800999a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800999c:	2400      	movs	r4, #0
 800999e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099a0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099a2:	aa07      	add	r2, sp, #28
 80099a4:	a906      	add	r1, sp, #24
 80099a6:	a805      	add	r0, sp, #20
 80099a8:	f7fe ff14 	bl	80087d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	9302      	str	r3, [sp, #8]
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	9400      	str	r4, [sp, #0]
 80099b6:	4623      	mov	r3, r4
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	4918      	ldr	r1, [pc, #96]	; (8009a1c <vTaskStartScheduler+0x84>)
 80099bc:	4818      	ldr	r0, [pc, #96]	; (8009a20 <vTaskStartScheduler+0x88>)
 80099be:	f7ff ff7b 	bl	80098b8 <xTaskCreateStatic>
 80099c2:	4b18      	ldr	r3, [pc, #96]	; (8009a24 <vTaskStartScheduler+0x8c>)
 80099c4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80099c6:	b140      	cbz	r0, 80099da <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 80099c8:	f000 fd00 	bl	800a3cc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80099cc:	2801      	cmp	r0, #1
 80099ce:	d006      	beq.n	80099de <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80099d4:	d018      	beq.n	8009a08 <vTaskStartScheduler+0x70>
}
 80099d6:	b008      	add	sp, #32
 80099d8:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80099da:	2000      	movs	r0, #0
 80099dc:	e7f6      	b.n	80099cc <vTaskStartScheduler+0x34>
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80099ee:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <vTaskStartScheduler+0x90>)
 80099f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <vTaskStartScheduler+0x94>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099fc:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <vTaskStartScheduler+0x98>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009a02:	f7ff f9e5 	bl	8008dd0 <xPortStartScheduler>
 8009a06:	e7e6      	b.n	80099d6 <vTaskStartScheduler+0x3e>
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a18:	e7fe      	b.n	8009a18 <vTaskStartScheduler+0x80>
 8009a1a:	bf00      	nop
 8009a1c:	080161e4 	.word	0x080161e4
 8009a20:	08009c95 	.word	0x08009c95
 8009a24:	200030d8 	.word	0x200030d8
 8009a28:	200030dc 	.word	0x200030dc
 8009a2c:	200030f8 	.word	0x200030f8
 8009a30:	20003124 	.word	0x20003124

08009a34 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009a34:	4a02      	ldr	r2, [pc, #8]	; (8009a40 <vTaskSuspendAll+0xc>)
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	200030a4 	.word	0x200030a4

08009a44 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009a44:	4b01      	ldr	r3, [pc, #4]	; (8009a4c <xTaskGetTickCount+0x8>)
 8009a46:	6818      	ldr	r0, [r3, #0]
}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20003124 	.word	0x20003124

08009a50 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <vTaskStepTick+0x2c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4403      	add	r3, r0
 8009a56:	4a0a      	ldr	r2, [pc, #40]	; (8009a80 <vTaskStepTick+0x30>)
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d908      	bls.n	8009a70 <vTaskStepTick+0x20>
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	e7fe      	b.n	8009a6e <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 8009a70:	4a02      	ldr	r2, [pc, #8]	; (8009a7c <vTaskStepTick+0x2c>)
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	4403      	add	r3, r0
 8009a76:	6013      	str	r3, [r2, #0]
	}
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	20003124 	.word	0x20003124
 8009a80:	200030dc 	.word	0x200030dc

08009a84 <xTaskIncrementTick>:
{
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a86:	4b3a      	ldr	r3, [pc, #232]	; (8009b70 <xTaskIncrementTick+0xec>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d164      	bne.n	8009b58 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a8e:	4b39      	ldr	r3, [pc, #228]	; (8009b74 <xTaskIncrementTick+0xf0>)
 8009a90:	681d      	ldr	r5, [r3, #0]
 8009a92:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009a94:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a96:	b9c5      	cbnz	r5, 8009aca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009a98:	4b37      	ldr	r3, [pc, #220]	; (8009b78 <xTaskIncrementTick+0xf4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	b143      	cbz	r3, 8009ab2 <xTaskIncrementTick+0x2e>
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	e7fe      	b.n	8009ab0 <xTaskIncrementTick+0x2c>
 8009ab2:	4a31      	ldr	r2, [pc, #196]	; (8009b78 <xTaskIncrementTick+0xf4>)
 8009ab4:	6811      	ldr	r1, [r2, #0]
 8009ab6:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <xTaskIncrementTick+0xf8>)
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	6019      	str	r1, [r3, #0]
 8009abe:	4a30      	ldr	r2, [pc, #192]	; (8009b80 <xTaskIncrementTick+0xfc>)
 8009ac0:	6813      	ldr	r3, [r2, #0]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	f7ff fd85 	bl	80095d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aca:	4b2e      	ldr	r3, [pc, #184]	; (8009b84 <xTaskIncrementTick+0x100>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	42ab      	cmp	r3, r5
 8009ad0:	d938      	bls.n	8009b44 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009ad2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <xTaskIncrementTick+0x104>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ade:	009a      	lsls	r2, r3, #2
 8009ae0:	4b2a      	ldr	r3, [pc, #168]	; (8009b8c <xTaskIncrementTick+0x108>)
 8009ae2:	589b      	ldr	r3, [r3, r2]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d93c      	bls.n	8009b62 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009ae8:	2701      	movs	r7, #1
 8009aea:	e03a      	b.n	8009b62 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009aec:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aee:	4b22      	ldr	r3, [pc, #136]	; (8009b78 <xTaskIncrementTick+0xf4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	b343      	cbz	r3, 8009b48 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af6:	4b20      	ldr	r3, [pc, #128]	; (8009b78 <xTaskIncrementTick+0xf4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009afe:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009b00:	429d      	cmp	r5, r3
 8009b02:	d326      	bcc.n	8009b52 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b04:	1d26      	adds	r6, r4, #4
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7fe ffc0 	bl	8008a8c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b0e:	b11b      	cbz	r3, 8009b18 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b10:	f104 0018 	add.w	r0, r4, #24
 8009b14:	f7fe ffba 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b1a:	4a1d      	ldr	r2, [pc, #116]	; (8009b90 <xTaskIncrementTick+0x10c>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d901      	bls.n	8009b26 <xTaskIncrementTick+0xa2>
 8009b22:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <xTaskIncrementTick+0x10c>)
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009b2a:	009a      	lsls	r2, r3, #2
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4817      	ldr	r0, [pc, #92]	; (8009b8c <xTaskIncrementTick+0x108>)
 8009b30:	4410      	add	r0, r2
 8009b32:	f7fe ff87 	bl	8008a44 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b38:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <xTaskIncrementTick+0x104>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d2d4      	bcs.n	8009aec <xTaskIncrementTick+0x68>
 8009b42:	e7d4      	b.n	8009aee <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009b44:	2700      	movs	r7, #0
 8009b46:	e7d2      	b.n	8009aee <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b48:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <xTaskIncrementTick+0x100>)
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b4e:	601a      	str	r2, [r3, #0]
					break;
 8009b50:	e7c0      	b.n	8009ad4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009b52:	4a0c      	ldr	r2, [pc, #48]	; (8009b84 <xTaskIncrementTick+0x100>)
 8009b54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b56:	e7bd      	b.n	8009ad4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009b58:	4a0e      	ldr	r2, [pc, #56]	; (8009b94 <xTaskIncrementTick+0x110>)
 8009b5a:	6813      	ldr	r3, [r2, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009b60:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <xTaskIncrementTick+0x114>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009b68:	2701      	movs	r7, #1
}
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200030a4 	.word	0x200030a4
 8009b74:	20003124 	.word	0x20003124
 8009b78:	20002c30 	.word	0x20002c30
 8009b7c:	20002c34 	.word	0x20002c34
 8009b80:	200030e0 	.word	0x200030e0
 8009b84:	200030dc 	.word	0x200030dc
 8009b88:	20002c2c 	.word	0x20002c2c
 8009b8c:	20002c38 	.word	0x20002c38
 8009b90:	200030ac 	.word	0x200030ac
 8009b94:	200030a0 	.word	0x200030a0
 8009b98:	20003128 	.word	0x20003128

08009b9c <xTaskResumeAll>:
{
 8009b9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009b9e:	4b35      	ldr	r3, [pc, #212]	; (8009c74 <xTaskResumeAll+0xd8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	b943      	cbnz	r3, 8009bb6 <xTaskResumeAll+0x1a>
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	e7fe      	b.n	8009bb4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009bb6:	f7fe ffd5 	bl	8008b64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009bba:	4b2e      	ldr	r3, [pc, #184]	; (8009c74 <xTaskResumeAll+0xd8>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d14f      	bne.n	8009c68 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bc8:	4b2b      	ldr	r3, [pc, #172]	; (8009c78 <xTaskResumeAll+0xdc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	b90b      	cbnz	r3, 8009bd2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009bce:	2400      	movs	r4, #0
 8009bd0:	e04b      	b.n	8009c6a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009bd2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bd4:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <xTaskResumeAll+0xe0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	b31b      	cbz	r3, 8009c22 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bda:	4b28      	ldr	r3, [pc, #160]	; (8009c7c <xTaskResumeAll+0xe0>)
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009be0:	f104 0018 	add.w	r0, r4, #24
 8009be4:	f7fe ff52 	bl	8008a8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be8:	1d25      	adds	r5, r4, #4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f7fe ff4e 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009bf2:	4b23      	ldr	r3, [pc, #140]	; (8009c80 <xTaskResumeAll+0xe4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4298      	cmp	r0, r3
 8009bf8:	d901      	bls.n	8009bfe <xTaskResumeAll+0x62>
 8009bfa:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <xTaskResumeAll+0xe4>)
 8009bfc:	6018      	str	r0, [r3, #0]
 8009bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009c02:	4629      	mov	r1, r5
 8009c04:	4b1f      	ldr	r3, [pc, #124]	; (8009c84 <xTaskResumeAll+0xe8>)
 8009c06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c0a:	f7fe ff1b 	bl	8008a44 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c10:	4b1d      	ldr	r3, [pc, #116]	; (8009c88 <xTaskResumeAll+0xec>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3dc      	bcc.n	8009bd4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <xTaskResumeAll+0xf0>)
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e7d8      	b.n	8009bd4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009c22:	b10c      	cbz	r4, 8009c28 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009c24:	f7ff fcd6 	bl	80095d4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c28:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <xTaskResumeAll+0xf4>)
 8009c2a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c2c:	b984      	cbnz	r4, 8009c50 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009c2e:	4b17      	ldr	r3, [pc, #92]	; (8009c8c <xTaskResumeAll+0xf0>)
 8009c30:	681c      	ldr	r4, [r3, #0]
 8009c32:	b1d4      	cbz	r4, 8009c6a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009c34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009c48:	2401      	movs	r4, #1
 8009c4a:	e00e      	b.n	8009c6a <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c4c:	3c01      	subs	r4, #1
 8009c4e:	d007      	beq.n	8009c60 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009c50:	f7ff ff18 	bl	8009a84 <xTaskIncrementTick>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d0f9      	beq.n	8009c4c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009c58:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <xTaskResumeAll+0xf0>)
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	e7f5      	b.n	8009c4c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <xTaskResumeAll+0xf4>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	e7e2      	b.n	8009c2e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009c68:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009c6a:	f7fe ff9d 	bl	8008ba8 <vPortExitCritical>
}
 8009c6e:	4620      	mov	r0, r4
 8009c70:	bd38      	pop	{r3, r4, r5, pc}
 8009c72:	bf00      	nop
 8009c74:	200030a4 	.word	0x200030a4
 8009c78:	20003098 	.word	0x20003098
 8009c7c:	200030e4 	.word	0x200030e4
 8009c80:	200030ac 	.word	0x200030ac
 8009c84:	20002c38 	.word	0x20002c38
 8009c88:	20002c2c 	.word	0x20002c2c
 8009c8c:	20003128 	.word	0x20003128
 8009c90:	200030a0 	.word	0x200030a0

08009c94 <prvIdleTask>:
{
 8009c94:	b508      	push	{r3, lr}
 8009c96:	e003      	b.n	8009ca0 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009c98:	f7ff fc7c 	bl	8009594 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009c9c:	2801      	cmp	r0, #1
 8009c9e:	d810      	bhi.n	8009cc2 <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 8009ca0:	f7ff fda6 	bl	80097f0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ca4:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <prvIdleTask+0x64>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d9f5      	bls.n	8009c98 <prvIdleTask+0x4>
				taskYIELD();
 8009cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	e7ea      	b.n	8009c98 <prvIdleTask+0x4>
				vTaskSuspendAll();
 8009cc2:	f7ff feb7 	bl	8009a34 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009cc6:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <prvIdleTask+0x68>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <prvIdleTask+0x6c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d306      	bcc.n	8009ce0 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009cd2:	f7ff fc5f 	bl	8009594 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009cd6:	2801      	cmp	r0, #1
 8009cd8:	d80b      	bhi.n	8009cf2 <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 8009cda:	f7ff ff5f 	bl	8009b9c <xTaskResumeAll>
 8009cde:	e7df      	b.n	8009ca0 <prvIdleTask+0xc>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009cf0:	e7fe      	b.n	8009cf0 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009cf2:	f7fe ffad 	bl	8008c50 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 8009cf6:	e7f0      	b.n	8009cda <prvIdleTask+0x46>
 8009cf8:	20002c38 	.word	0x20002c38
 8009cfc:	200030dc 	.word	0x200030dc
 8009d00:	20003124 	.word	0x20003124

08009d04 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d04:	4b1f      	ldr	r3, [pc, #124]	; (8009d84 <vTaskSwitchContext+0x80>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	b11b      	cbz	r3, 8009d12 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009d0a:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <vTaskSwitchContext+0x84>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009d12:	4b1d      	ldr	r3, [pc, #116]	; (8009d88 <vTaskSwitchContext+0x84>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d18:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <vTaskSwitchContext+0x88>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009d20:	008a      	lsls	r2, r1, #2
 8009d22:	491b      	ldr	r1, [pc, #108]	; (8009d90 <vTaskSwitchContext+0x8c>)
 8009d24:	588a      	ldr	r2, [r1, r2]
 8009d26:	b95a      	cbnz	r2, 8009d40 <vTaskSwitchContext+0x3c>
 8009d28:	b10b      	cbz	r3, 8009d2e <vTaskSwitchContext+0x2a>
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	e7f6      	b.n	8009d1c <vTaskSwitchContext+0x18>
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	e7fe      	b.n	8009d3e <vTaskSwitchContext+0x3a>
 8009d40:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009d44:	0082      	lsls	r2, r0, #2
 8009d46:	440a      	add	r2, r1
 8009d48:	6850      	ldr	r0, [r2, #4]
 8009d4a:	6840      	ldr	r0, [r0, #4]
 8009d4c:	6050      	str	r0, [r2, #4]
 8009d4e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009d52:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8009d56:	3208      	adds	r2, #8
 8009d58:	4411      	add	r1, r2
 8009d5a:	4288      	cmp	r0, r1
 8009d5c:	d00b      	beq.n	8009d76 <vTaskSwitchContext+0x72>
 8009d5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009d62:	0091      	lsls	r1, r2, #2
 8009d64:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <vTaskSwitchContext+0x8c>)
 8009d66:	440a      	add	r2, r1
 8009d68:	6852      	ldr	r2, [r2, #4]
 8009d6a:	68d1      	ldr	r1, [r2, #12]
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <vTaskSwitchContext+0x90>)
 8009d6e:	6011      	str	r1, [r2, #0]
 8009d70:	4a06      	ldr	r2, [pc, #24]	; (8009d8c <vTaskSwitchContext+0x88>)
 8009d72:	6013      	str	r3, [r2, #0]
}
 8009d74:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d76:	6840      	ldr	r0, [r0, #4]
 8009d78:	4662      	mov	r2, ip
 8009d7a:	0091      	lsls	r1, r2, #2
 8009d7c:	4a04      	ldr	r2, [pc, #16]	; (8009d90 <vTaskSwitchContext+0x8c>)
 8009d7e:	440a      	add	r2, r1
 8009d80:	6050      	str	r0, [r2, #4]
 8009d82:	e7ec      	b.n	8009d5e <vTaskSwitchContext+0x5a>
 8009d84:	200030a4 	.word	0x200030a4
 8009d88:	20003128 	.word	0x20003128
 8009d8c:	200030ac 	.word	0x200030ac
 8009d90:	20002c38 	.word	0x20002c38
 8009d94:	20002c2c 	.word	0x20002c2c

08009d98 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009d98:	b158      	cbz	r0, 8009db2 <vTaskPlaceOnEventList+0x1a>
{
 8009d9a:	b510      	push	{r4, lr}
 8009d9c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d9e:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <vTaskPlaceOnEventList+0x2c>)
 8009da0:	6811      	ldr	r1, [r2, #0]
 8009da2:	3118      	adds	r1, #24
 8009da4:	f7fe fe59 	bl	8008a5a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009da8:	2101      	movs	r1, #1
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff fd46 	bl	800983c <prvAddCurrentTaskToDelayedList>
}
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009dc2:	e7fe      	b.n	8009dc2 <vTaskPlaceOnEventList+0x2a>
 8009dc4:	20002c2c 	.word	0x20002c2c

08009dc8 <vTaskPlaceOnEventListRestricted>:
	{
 8009dc8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009dca:	b170      	cbz	r0, 8009dea <vTaskPlaceOnEventListRestricted+0x22>
 8009dcc:	460d      	mov	r5, r1
 8009dce:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <vTaskPlaceOnEventListRestricted+0x34>)
 8009dd2:	6811      	ldr	r1, [r2, #0]
 8009dd4:	3118      	adds	r1, #24
 8009dd6:	f7fe fe35 	bl	8008a44 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009dda:	b10c      	cbz	r4, 8009de0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009ddc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009de0:	4621      	mov	r1, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	f7ff fd2a 	bl	800983c <prvAddCurrentTaskToDelayedList>
	}
 8009de8:	bd38      	pop	{r3, r4, r5, pc}
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009dfa:	e7fe      	b.n	8009dfa <vTaskPlaceOnEventListRestricted+0x32>
 8009dfc:	20002c2c 	.word	0x20002c2c

08009e00 <xTaskRemoveFromEventList>:
{
 8009e00:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e02:	68c3      	ldr	r3, [r0, #12]
 8009e04:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009e06:	b334      	cbz	r4, 8009e56 <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e08:	f104 0518 	add.w	r5, r4, #24
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7fe fe3d 	bl	8008a8c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e12:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <xTaskRemoveFromEventList+0x78>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	bb3b      	cbnz	r3, 8009e68 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e18:	1d25      	adds	r5, r4, #4
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7fe fe36 	bl	8008a8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e22:	4b16      	ldr	r3, [pc, #88]	; (8009e7c <xTaskRemoveFromEventList+0x7c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4298      	cmp	r0, r3
 8009e28:	d901      	bls.n	8009e2e <xTaskRemoveFromEventList+0x2e>
 8009e2a:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <xTaskRemoveFromEventList+0x7c>)
 8009e2c:	6018      	str	r0, [r3, #0]
 8009e2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e32:	4629      	mov	r1, r5
 8009e34:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <xTaskRemoveFromEventList+0x80>)
 8009e36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e3a:	f7fe fe03 	bl	8008a44 <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 8009e3e:	f7ff fbc9 	bl	80095d4 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e44:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <xTaskRemoveFromEventList+0x84>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d911      	bls.n	8009e72 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 8009e4e:	2001      	movs	r0, #1
 8009e50:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <xTaskRemoveFromEventList+0x88>)
 8009e52:	6018      	str	r0, [r3, #0]
}
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009e66:	e7fe      	b.n	8009e66 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4808      	ldr	r0, [pc, #32]	; (8009e8c <xTaskRemoveFromEventList+0x8c>)
 8009e6c:	f7fe fdea 	bl	8008a44 <vListInsertEnd>
 8009e70:	e7e7      	b.n	8009e42 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 8009e72:	2000      	movs	r0, #0
	return xReturn;
 8009e74:	e7ee      	b.n	8009e54 <xTaskRemoveFromEventList+0x54>
 8009e76:	bf00      	nop
 8009e78:	200030a4 	.word	0x200030a4
 8009e7c:	200030ac 	.word	0x200030ac
 8009e80:	20002c38 	.word	0x20002c38
 8009e84:	20002c2c 	.word	0x20002c2c
 8009e88:	20003128 	.word	0x20003128
 8009e8c:	200030e4 	.word	0x200030e4

08009e90 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <vTaskInternalSetTimeOutState+0x10>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e96:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <vTaskInternalSetTimeOutState+0x14>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6043      	str	r3, [r0, #4]
}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	200030e0 	.word	0x200030e0
 8009ea4:	20003124 	.word	0x20003124

08009ea8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8009ea8:	b1d8      	cbz	r0, 8009ee2 <xTaskCheckForTimeOut+0x3a>
{
 8009eaa:	b570      	push	{r4, r5, r6, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009eb0:	b301      	cbz	r1, 8009ef4 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8009eb2:	f7fe fe57 	bl	8008b64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <xTaskCheckForTimeOut+0x7c>)
 8009eb8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009eba:	686b      	ldr	r3, [r5, #4]
 8009ebc:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009ec4:	d027      	beq.n	8009f16 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ec6:	4e18      	ldr	r6, [pc, #96]	; (8009f28 <xTaskCheckForTimeOut+0x80>)
 8009ec8:	6836      	ldr	r6, [r6, #0]
 8009eca:	f8d5 c000 	ldr.w	ip, [r5]
 8009ece:	45b4      	cmp	ip, r6
 8009ed0:	d001      	beq.n	8009ed6 <xTaskCheckForTimeOut+0x2e>
 8009ed2:	428b      	cmp	r3, r1
 8009ed4:	d924      	bls.n	8009f20 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ed6:	4282      	cmp	r2, r0
 8009ed8:	d815      	bhi.n	8009f06 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009ede:	2401      	movs	r4, #1
 8009ee0:	e01a      	b.n	8009f18 <xTaskCheckForTimeOut+0x70>
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009ef2:	e7fe      	b.n	8009ef2 <xTaskCheckForTimeOut+0x4a>
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009f04:	e7fe      	b.n	8009f04 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8009f06:	1a5b      	subs	r3, r3, r1
 8009f08:	4413      	add	r3, r2
 8009f0a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f7ff ffbf 	bl	8009e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f12:	2400      	movs	r4, #0
 8009f14:	e000      	b.n	8009f18 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8009f16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009f18:	f7fe fe46 	bl	8008ba8 <vPortExitCritical>
}
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8009f20:	2401      	movs	r4, #1
 8009f22:	e7f9      	b.n	8009f18 <xTaskCheckForTimeOut+0x70>
 8009f24:	20003124 	.word	0x20003124
 8009f28:	200030e0 	.word	0x200030e0

08009f2c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009f2c:	4b01      	ldr	r3, [pc, #4]	; (8009f34 <vTaskMissedYield+0x8>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
}
 8009f32:	4770      	bx	lr
 8009f34:	20003128 	.word	0x20003128

08009f38 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <eTaskConfirmSleepModeStatus+0x2c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	b95b      	cbnz	r3, 8009f56 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 8009f3e:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <eTaskConfirmSleepModeStatus+0x30>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	b953      	cbnz	r3, 8009f5a <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009f44:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <eTaskConfirmSleepModeStatus+0x34>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <eTaskConfirmSleepModeStatus+0x38>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d005      	beq.n	8009f5e <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 8009f52:	2001      	movs	r0, #1
 8009f54:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009f56:	2000      	movs	r0, #0
 8009f58:	4770      	bx	lr
			eReturn = eAbortSleep;
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 8009f5e:	2002      	movs	r0, #2
	}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	200030e4 	.word	0x200030e4
 8009f68:	20003128 	.word	0x20003128
 8009f6c:	200030fc 	.word	0x200030fc
 8009f70:	20003098 	.word	0x20003098

08009f74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009f74:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <xTaskGetSchedulerState+0x18>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	b133      	cbz	r3, 8009f88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <xTaskGetSchedulerState+0x1c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	b10b      	cbz	r3, 8009f84 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f80:	2000      	movs	r0, #0
	}
 8009f82:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009f84:	2002      	movs	r0, #2
 8009f86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f88:	2001      	movs	r0, #1
 8009f8a:	4770      	bx	lr
 8009f8c:	200030f8 	.word	0x200030f8
 8009f90:	200030a4 	.word	0x200030a4

08009f94 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d03b      	beq.n	800a010 <xTaskPriorityDisinherit+0x7c>
	{
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <xTaskPriorityDisinherit+0x84>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4283      	cmp	r3, r0
 8009fa2:	d008      	beq.n	8009fb6 <xTaskPriorityDisinherit+0x22>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	e7fe      	b.n	8009fb4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009fb6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009fb8:	b943      	cbnz	r3, 8009fcc <xTaskPriorityDisinherit+0x38>
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	e7fe      	b.n	8009fca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009fd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009fd4:	4291      	cmp	r1, r2
 8009fd6:	d01d      	beq.n	800a014 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fd8:	b10b      	cbz	r3, 8009fde <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009fda:	2000      	movs	r0, #0
	}
 8009fdc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fde:	1d05      	adds	r5, r0, #4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f7fe fd53 	bl	8008a8c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fe6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009fe8:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fea:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8009fee:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <xTaskPriorityDisinherit+0x88>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4298      	cmp	r0, r3
 8009ff6:	d901      	bls.n	8009ffc <xTaskPriorityDisinherit+0x68>
 8009ff8:	4b08      	ldr	r3, [pc, #32]	; (800a01c <xTaskPriorityDisinherit+0x88>)
 8009ffa:	6018      	str	r0, [r3, #0]
 8009ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a000:	4629      	mov	r1, r5
 800a002:	4b07      	ldr	r3, [pc, #28]	; (800a020 <xTaskPriorityDisinherit+0x8c>)
 800a004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a008:	f7fe fd1c 	bl	8008a44 <vListInsertEnd>
					xReturn = pdTRUE;
 800a00c:	2001      	movs	r0, #1
 800a00e:	e7e5      	b.n	8009fdc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a010:	2000      	movs	r0, #0
	}
 800a012:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a014:	2000      	movs	r0, #0
 800a016:	e7e1      	b.n	8009fdc <xTaskPriorityDisinherit+0x48>
 800a018:	20002c2c 	.word	0x20002c2c
 800a01c:	200030ac 	.word	0x200030ac
 800a020:	20002c38 	.word	0x20002c38

0800a024 <xTaskNotifyWait>:
	{
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	4614      	mov	r4, r2
 800a02c:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800a02e:	f7fe fd99 	bl	8008b64 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a032:	4b21      	ldr	r3, [pc, #132]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	2a02      	cmp	r2, #2
 800a03e:	d00a      	beq.n	800a056 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a040:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a042:	6811      	ldr	r1, [r2, #0]
 800a044:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a046:	ea23 0306 	bic.w	r3, r3, r6
 800a04a:	654b      	str	r3, [r1, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a04c:	6813      	ldr	r3, [r2, #0]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800a054:	b9cd      	cbnz	r5, 800a08a <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800a056:	f7fe fda7 	bl	8008ba8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a05a:	f7fe fd83 	bl	8008b64 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a05e:	b11c      	cbz	r4, 800a068 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a060:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a066:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a068:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d018      	beq.n	800a0a8 <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 800a076:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a078:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800a082:	f7fe fd91 	bl	8008ba8 <vPortExitCritical>
	}
 800a086:	4620      	mov	r0, r4
 800a088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a08a:	4611      	mov	r1, r2
 800a08c:	4628      	mov	r0, r5
 800a08e:	f7ff fbd5 	bl	800983c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a092:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	e7d6      	b.n	800a056 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <xTaskNotifyWait+0x94>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a0ae:	ea23 0307 	bic.w	r3, r3, r7
 800a0b2:	6553      	str	r3, [r2, #84]	; 0x54
				xReturn = pdTRUE;
 800a0b4:	2401      	movs	r4, #1
 800a0b6:	e7df      	b.n	800a078 <xTaskNotifyWait+0x54>
 800a0b8:	20002c2c 	.word	0x20002c2c

0800a0bc <xTaskGenericNotify>:
	{
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a0be:	b1a8      	cbz	r0, 800a0ec <xTaskGenericNotify+0x30>
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	4614      	mov	r4, r2
 800a0c4:	461d      	mov	r5, r3
 800a0c6:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 800a0c8:	f7fe fd4c 	bl	8008b64 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800a0cc:	b10d      	cbz	r5, 800a0d2 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a0ce:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800a0d0:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a0d2:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800a0d6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a0d8:	2202      	movs	r2, #2
 800a0da:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 800a0de:	2c04      	cmp	r4, #4
 800a0e0:	d81f      	bhi.n	800a122 <xTaskGenericNotify+0x66>
 800a0e2:	e8df f004 	tbb	[pc, r4]
 800a0e6:	0c2b      	.short	0x0c2b
 800a0e8:	1611      	.short	0x1611
 800a0ea:	19          	.byte	0x19
 800a0eb:	00          	.byte	0x00
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a0fc:	e7fe      	b.n	800a0fc <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800a0fe:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a100:	433a      	orrs	r2, r7
 800a102:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a104:	2401      	movs	r4, #1
					break;
 800a106:	e01a      	b.n	800a13e <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 800a108:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a10a:	3201      	adds	r2, #1
 800a10c:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a10e:	2401      	movs	r4, #1
					break;
 800a110:	e015      	b.n	800a13e <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 800a112:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a114:	2401      	movs	r4, #1
					break;
 800a116:	e012      	b.n	800a13e <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d016      	beq.n	800a14a <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 800a11c:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a11e:	2401      	movs	r4, #1
 800a120:	e00d      	b.n	800a13e <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a122:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800a124:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a128:	d011      	beq.n	800a14e <xTaskGenericNotify+0x92>
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	e7fe      	b.n	800a13a <xTaskGenericNotify+0x7e>
			switch( eAction )
 800a13c:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d007      	beq.n	800a152 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 800a142:	f7fe fd31 	bl	8008ba8 <vPortExitCritical>
	}
 800a146:	4620      	mov	r0, r4
 800a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800a14a:	2400      	movs	r4, #0
 800a14c:	e7f7      	b.n	800a13e <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 800a14e:	2401      	movs	r4, #1
 800a150:	e7f5      	b.n	800a13e <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a152:	1d35      	adds	r5, r6, #4
 800a154:	4628      	mov	r0, r5
 800a156:	f7fe fc99 	bl	8008a8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a15a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a15c:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <xTaskGenericNotify+0xf8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4298      	cmp	r0, r3
 800a162:	d901      	bls.n	800a168 <xTaskGenericNotify+0xac>
 800a164:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <xTaskGenericNotify+0xf8>)
 800a166:	6018      	str	r0, [r3, #0]
 800a168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a16c:	4629      	mov	r1, r5
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <xTaskGenericNotify+0xfc>)
 800a170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a174:	f7fe fc66 	bl	8008a44 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a178:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800a17a:	b143      	cbz	r3, 800a18e <xTaskGenericNotify+0xd2>
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	e7fe      	b.n	800a18c <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 800a18e:	f7ff fa21 	bl	80095d4 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a192:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a194:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <xTaskGenericNotify+0x100>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d9d1      	bls.n	800a142 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800a19e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	e7c6      	b.n	800a142 <xTaskGenericNotify+0x86>
 800a1b4:	200030ac 	.word	0x200030ac
 800a1b8:	20002c38 	.word	0x20002c38
 800a1bc:	20002c2c 	.word	0x20002c2c

0800a1c0 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800a1c0:	b310      	cbz	r0, 800a208 <xTaskGenericNotifyFromISR+0x48>
	{
 800a1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c6:	460e      	mov	r6, r1
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ce:	f7fe fe5f 	bl	8008e90 <vPortValidateInterruptPriority>
	__asm volatile
 800a1d2:	f3ef 8311 	mrs	r3, BASEPRI
 800a1d6:	f04f 0250 	mov.w	r2, #80	; 0x50
 800a1da:	f382 8811 	msr	BASEPRI, r2
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	4698      	mov	r8, r3
			if( pulPreviousNotificationValue != NULL )
 800a1e8:	b10d      	cbz	r5, 800a1ee <xTaskGenericNotifyFromISR+0x2e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ec:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1ee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800a1f2:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 800a1fa:	2c04      	cmp	r4, #4
 800a1fc:	d81f      	bhi.n	800a23e <xTaskGenericNotifyFromISR+0x7e>
 800a1fe:	e8df f004 	tbb	[pc, r4]
 800a202:	0c2b      	.short	0x0c2b
 800a204:	1611      	.short	0x1611
 800a206:	19          	.byte	0x19
 800a207:	00          	.byte	0x00
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a218:	e7fe      	b.n	800a218 <xTaskGenericNotifyFromISR+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 800a21a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a21c:	4332      	orrs	r2, r6
 800a21e:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a220:	2401      	movs	r4, #1
					break;
 800a222:	e01a      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
					( pxTCB->ulNotifiedValue )++;
 800a224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a226:	3201      	adds	r2, #1
 800a228:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a22a:	2401      	movs	r4, #1
					break;
 800a22c:	e015      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
					pxTCB->ulNotifiedValue = ulValue;
 800a22e:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a230:	2401      	movs	r4, #1
					break;
 800a232:	e012      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a234:	2b02      	cmp	r3, #2
 800a236:	d017      	beq.n	800a268 <xTaskGenericNotifyFromISR+0xa8>
						pxTCB->ulNotifiedValue = ulValue;
 800a238:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800a23a:	2401      	movs	r4, #1
 800a23c:	e00d      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a23e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a240:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a244:	d012      	beq.n	800a26c <xTaskGenericNotifyFromISR+0xac>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	e7fe      	b.n	800a256 <xTaskGenericNotifyFromISR+0x96>
			switch( eAction )
 800a258:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d008      	beq.n	800a270 <xTaskGenericNotifyFromISR+0xb0>
	__asm volatile
 800a25e:	f388 8811 	msr	BASEPRI, r8
	}
 800a262:	4620      	mov	r0, r4
 800a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 800a268:	2400      	movs	r4, #0
 800a26a:	e7f6      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
	BaseType_t xReturn = pdPASS;
 800a26c:	2401      	movs	r4, #1
 800a26e:	e7f4      	b.n	800a25a <xTaskGenericNotifyFromISR+0x9a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	b143      	cbz	r3, 800a286 <xTaskGenericNotifyFromISR+0xc6>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	e7fe      	b.n	800a284 <xTaskGenericNotifyFromISR+0xc4>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <xTaskGenericNotifyFromISR+0x11c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	bb0b      	cbnz	r3, 800a2d0 <xTaskGenericNotifyFromISR+0x110>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a28c:	1d3d      	adds	r5, r7, #4
 800a28e:	4628      	mov	r0, r5
 800a290:	f7fe fbfc 	bl	8008a8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <xTaskGenericNotifyFromISR+0x120>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4298      	cmp	r0, r3
 800a29c:	d901      	bls.n	800a2a2 <xTaskGenericNotifyFromISR+0xe2>
 800a29e:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <xTaskGenericNotifyFromISR+0x120>)
 800a2a0:	6018      	str	r0, [r3, #0]
 800a2a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <xTaskGenericNotifyFromISR+0x124>)
 800a2aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2ae:	f7fe fbc9 	bl	8008a44 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b4:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <xTaskGenericNotifyFromISR+0x128>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d9cf      	bls.n	800a25e <xTaskGenericNotifyFromISR+0x9e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	b113      	cbz	r3, 800a2c8 <xTaskGenericNotifyFromISR+0x108>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	9a06      	ldr	r2, [sp, #24]
 800a2c6:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800a2c8:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <xTaskGenericNotifyFromISR+0x12c>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	e7c6      	b.n	800a25e <xTaskGenericNotifyFromISR+0x9e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a2d0:	f107 0118 	add.w	r1, r7, #24
 800a2d4:	4806      	ldr	r0, [pc, #24]	; (800a2f0 <xTaskGenericNotifyFromISR+0x130>)
 800a2d6:	f7fe fbb5 	bl	8008a44 <vListInsertEnd>
 800a2da:	e7ea      	b.n	800a2b2 <xTaskGenericNotifyFromISR+0xf2>
 800a2dc:	200030a4 	.word	0x200030a4
 800a2e0:	200030ac 	.word	0x200030ac
 800a2e4:	20002c38 	.word	0x20002c38
 800a2e8:	20002c2c 	.word	0x20002c2c
 800a2ec:	20003128 	.word	0x20003128
 800a2f0:	200030e4 	.word	0x200030e4

0800a2f4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2f4:	4b06      	ldr	r3, [pc, #24]	; (800a310 <prvGetNextExpireTime+0x1c>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	6813      	ldr	r3, [r2, #0]
 800a2fa:	b92b      	cbnz	r3, 800a308 <prvGetNextExpireTime+0x14>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a300:	b923      	cbnz	r3, 800a30c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a302:	68d3      	ldr	r3, [r2, #12]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a308:	2300      	movs	r3, #0
 800a30a:	e7f8      	b.n	800a2fe <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a30c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a30e:	4770      	bx	lr
 800a310:	2000312c 	.word	0x2000312c

0800a314 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a314:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a316:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a318:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a31a:	4291      	cmp	r1, r2
 800a31c:	d80c      	bhi.n	800a338 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	6983      	ldr	r3, [r0, #24]
 800a322:	429a      	cmp	r2, r3
 800a324:	d301      	bcc.n	800a32a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a326:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a328:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a32a:	1d01      	adds	r1, r0, #4
 800a32c:	4b09      	ldr	r3, [pc, #36]	; (800a354 <prvInsertTimerInActiveList+0x40>)
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	f7fe fb93 	bl	8008a5a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a334:	2000      	movs	r0, #0
 800a336:	e7f7      	b.n	800a328 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a338:	429a      	cmp	r2, r3
 800a33a:	d201      	bcs.n	800a340 <prvInsertTimerInActiveList+0x2c>
 800a33c:	4299      	cmp	r1, r3
 800a33e:	d206      	bcs.n	800a34e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a340:	1d01      	adds	r1, r0, #4
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <prvInsertTimerInActiveList+0x44>)
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f7fe fb88 	bl	8008a5a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a34a:	2000      	movs	r0, #0
 800a34c:	e7ec      	b.n	800a328 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a34e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a350:	e7ea      	b.n	800a328 <prvInsertTimerInActiveList+0x14>
 800a352:	bf00      	nop
 800a354:	20003130 	.word	0x20003130
 800a358:	2000312c 	.word	0x2000312c

0800a35c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a35c:	b530      	push	{r4, r5, lr}
 800a35e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a360:	f7fe fc00 	bl	8008b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a364:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <prvCheckForValidListAndQueue+0x50>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	b11b      	cbz	r3, 800a372 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a36a:	f7fe fc1d 	bl	8008ba8 <vPortExitCritical>
}
 800a36e:	b003      	add	sp, #12
 800a370:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a372:	4d0f      	ldr	r5, [pc, #60]	; (800a3b0 <prvCheckForValidListAndQueue+0x54>)
 800a374:	4628      	mov	r0, r5
 800a376:	f7fe fb57 	bl	8008a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a37a:	4c0e      	ldr	r4, [pc, #56]	; (800a3b4 <prvCheckForValidListAndQueue+0x58>)
 800a37c:	4620      	mov	r0, r4
 800a37e:	f7fe fb53 	bl	8008a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a382:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <prvCheckForValidListAndQueue+0x5c>)
 800a384:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a386:	4b0d      	ldr	r3, [pc, #52]	; (800a3bc <prvCheckForValidListAndQueue+0x60>)
 800a388:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a38a:	2300      	movs	r3, #0
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <prvCheckForValidListAndQueue+0x64>)
 800a390:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <prvCheckForValidListAndQueue+0x68>)
 800a392:	2110      	movs	r1, #16
 800a394:	200a      	movs	r0, #10
 800a396:	f7fe fe9c 	bl	80090d2 <xQueueGenericCreateStatic>
 800a39a:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <prvCheckForValidListAndQueue+0x50>)
 800a39c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0e3      	beq.n	800a36a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3a2:	4909      	ldr	r1, [pc, #36]	; (800a3c8 <prvCheckForValidListAndQueue+0x6c>)
 800a3a4:	f7ff f8b8 	bl	8009518 <vQueueAddToRegistry>
 800a3a8:	e7df      	b.n	800a36a <prvCheckForValidListAndQueue+0xe>
 800a3aa:	bf00      	nop
 800a3ac:	20003250 	.word	0x20003250
 800a3b0:	200031d4 	.word	0x200031d4
 800a3b4:	200031e8 	.word	0x200031e8
 800a3b8:	2000312c 	.word	0x2000312c
 800a3bc:	20003130 	.word	0x20003130
 800a3c0:	20003200 	.word	0x20003200
 800a3c4:	20003134 	.word	0x20003134
 800a3c8:	080161ec 	.word	0x080161ec

0800a3cc <xTimerCreateTimerTask>:
{
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a3d0:	f7ff ffc4 	bl	800a35c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a3d4:	4b12      	ldr	r3, [pc, #72]	; (800a420 <xTimerCreateTimerTask+0x54>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	b1cb      	cbz	r3, 800a40e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3da:	2400      	movs	r4, #0
 800a3dc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3de:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3e0:	aa07      	add	r2, sp, #28
 800a3e2:	a906      	add	r1, sp, #24
 800a3e4:	a805      	add	r0, sp, #20
 800a3e6:	f7fe fa01 	bl	80087ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	9302      	str	r3, [sp, #8]
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	9a07      	ldr	r2, [sp, #28]
 800a3fa:	490a      	ldr	r1, [pc, #40]	; (800a424 <xTimerCreateTimerTask+0x58>)
 800a3fc:	480a      	ldr	r0, [pc, #40]	; (800a428 <xTimerCreateTimerTask+0x5c>)
 800a3fe:	f7ff fa5b 	bl	80098b8 <xTaskCreateStatic>
 800a402:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <xTimerCreateTimerTask+0x60>)
 800a404:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a406:	b110      	cbz	r0, 800a40e <xTimerCreateTimerTask+0x42>
}
 800a408:	2001      	movs	r0, #1
 800a40a:	b008      	add	sp, #32
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a41e:	e7fe      	b.n	800a41e <xTimerCreateTimerTask+0x52>
 800a420:	20003250 	.word	0x20003250
 800a424:	080161f4 	.word	0x080161f4
 800a428:	0800a731 	.word	0x0800a731
 800a42c:	20003254 	.word	0x20003254

0800a430 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a430:	b1b8      	cbz	r0, 800a462 <xTimerGenericCommand+0x32>
 800a432:	469c      	mov	ip, r3
 800a434:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a436:	4818      	ldr	r0, [pc, #96]	; (800a498 <xTimerGenericCommand+0x68>)
 800a438:	6800      	ldr	r0, [r0, #0]
 800a43a:	b358      	cbz	r0, 800a494 <xTimerGenericCommand+0x64>
{
 800a43c:	b500      	push	{lr}
 800a43e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a440:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a442:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a444:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a446:	2905      	cmp	r1, #5
 800a448:	dc1c      	bgt.n	800a484 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a44a:	f7ff fd93 	bl	8009f74 <xTaskGetSchedulerState>
 800a44e:	2802      	cmp	r0, #2
 800a450:	d010      	beq.n	800a474 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a452:	2300      	movs	r3, #0
 800a454:	461a      	mov	r2, r3
 800a456:	4669      	mov	r1, sp
 800a458:	480f      	ldr	r0, [pc, #60]	; (800a498 <xTimerGenericCommand+0x68>)
 800a45a:	6800      	ldr	r0, [r0, #0]
 800a45c:	f7fe fe83 	bl	8009166 <xQueueGenericSend>
 800a460:	e015      	b.n	800a48e <xTimerGenericCommand+0x5e>
 800a462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a472:	e7fe      	b.n	800a472 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a474:	2300      	movs	r3, #0
 800a476:	9a06      	ldr	r2, [sp, #24]
 800a478:	4669      	mov	r1, sp
 800a47a:	4807      	ldr	r0, [pc, #28]	; (800a498 <xTimerGenericCommand+0x68>)
 800a47c:	6800      	ldr	r0, [r0, #0]
 800a47e:	f7fe fe72 	bl	8009166 <xQueueGenericSend>
 800a482:	e004      	b.n	800a48e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a484:	2300      	movs	r3, #0
 800a486:	4662      	mov	r2, ip
 800a488:	4669      	mov	r1, sp
 800a48a:	f7fe ff30 	bl	80092ee <xQueueGenericSendFromISR>
}
 800a48e:	b005      	add	sp, #20
 800a490:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a494:	2000      	movs	r0, #0
}
 800a496:	4770      	bx	lr
 800a498:	20003250 	.word	0x20003250

0800a49c <prvSwitchTimerLists>:
{
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4a0:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <prvSwitchTimerLists+0x74>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	b362      	cbz	r2, 800a502 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ac:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4ae:	1d25      	adds	r5, r4, #4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f7fe faeb 	bl	8008a8c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4b6:	6a23      	ldr	r3, [r4, #32]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a4c0:	f013 0f04 	tst.w	r3, #4
 800a4c4:	d0ec      	beq.n	800a4a0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4c6:	69a3      	ldr	r3, [r4, #24]
 800a4c8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a4ca:	429e      	cmp	r6, r3
 800a4cc:	d207      	bcs.n	800a4de <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a4ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <prvSwitchTimerLists+0x74>)
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	f7fe fabf 	bl	8008a5a <vListInsert>
 800a4dc:	e7e0      	b.n	800a4a0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4de:	2100      	movs	r1, #0
 800a4e0:	9100      	str	r1, [sp, #0]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7ff ffa2 	bl	800a430 <xTimerGenericCommand>
				configASSERT( xResult );
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d1d7      	bne.n	800a4a0 <prvSwitchTimerLists+0x4>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	e7fe      	b.n	800a500 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800a502:	4a04      	ldr	r2, [pc, #16]	; (800a514 <prvSwitchTimerLists+0x78>)
 800a504:	6810      	ldr	r0, [r2, #0]
 800a506:	4902      	ldr	r1, [pc, #8]	; (800a510 <prvSwitchTimerLists+0x74>)
 800a508:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a50a:	6013      	str	r3, [r2, #0]
}
 800a50c:	b002      	add	sp, #8
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	2000312c 	.word	0x2000312c
 800a514:	20003130 	.word	0x20003130

0800a518 <prvSampleTimeNow>:
{
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a51c:	f7ff fa92 	bl	8009a44 <xTaskGetTickCount>
 800a520:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <prvSampleTimeNow+0x28>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4283      	cmp	r3, r0
 800a528:	d805      	bhi.n	800a536 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a52e:	4b04      	ldr	r3, [pc, #16]	; (800a540 <prvSampleTimeNow+0x28>)
 800a530:	601c      	str	r4, [r3, #0]
}
 800a532:	4620      	mov	r0, r4
 800a534:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a536:	f7ff ffb1 	bl	800a49c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	602b      	str	r3, [r5, #0]
 800a53e:	e7f6      	b.n	800a52e <prvSampleTimeNow+0x16>
 800a540:	200031fc 	.word	0x200031fc

0800a544 <prvProcessExpiredTimer>:
{
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	4606      	mov	r6, r0
 800a54a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54c:	4917      	ldr	r1, [pc, #92]	; (800a5ac <prvProcessExpiredTimer+0x68>)
 800a54e:	6809      	ldr	r1, [r1, #0]
 800a550:	68c9      	ldr	r1, [r1, #12]
 800a552:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a554:	1d20      	adds	r0, r4, #4
 800a556:	f7fe fa99 	bl	8008a8c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a55a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800a55e:	f01c 0f04 	tst.w	ip, #4
 800a562:	d108      	bne.n	800a576 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a564:	f02c 0c01 	bic.w	ip, ip, #1
 800a568:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a56c:	6a23      	ldr	r3, [r4, #32]
 800a56e:	4620      	mov	r0, r4
 800a570:	4798      	blx	r3
}
 800a572:	b002      	add	sp, #8
 800a574:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a576:	69a1      	ldr	r1, [r4, #24]
 800a578:	4633      	mov	r3, r6
 800a57a:	462a      	mov	r2, r5
 800a57c:	4431      	add	r1, r6
 800a57e:	4620      	mov	r0, r4
 800a580:	f7ff fec8 	bl	800a314 <prvInsertTimerInActiveList>
 800a584:	2800      	cmp	r0, #0
 800a586:	d0f1      	beq.n	800a56c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a588:	2100      	movs	r1, #0
 800a58a:	9100      	str	r1, [sp, #0]
 800a58c:	460b      	mov	r3, r1
 800a58e:	4632      	mov	r2, r6
 800a590:	4620      	mov	r0, r4
 800a592:	f7ff ff4d 	bl	800a430 <xTimerGenericCommand>
			configASSERT( xResult );
 800a596:	2800      	cmp	r0, #0
 800a598:	d1e8      	bne.n	800a56c <prvProcessExpiredTimer+0x28>
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	e7fe      	b.n	800a5aa <prvProcessExpiredTimer+0x66>
 800a5ac:	2000312c 	.word	0x2000312c

0800a5b0 <prvProcessTimerOrBlockTask>:
{
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a5b8:	f7ff fa3c 	bl	8009a34 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5bc:	a801      	add	r0, sp, #4
 800a5be:	f7ff ffab 	bl	800a518 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	bb33      	cbnz	r3, 800a614 <prvProcessTimerOrBlockTask+0x64>
 800a5c6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5c8:	b90c      	cbnz	r4, 800a5ce <prvProcessTimerOrBlockTask+0x1e>
 800a5ca:	42b0      	cmp	r0, r6
 800a5cc:	d219      	bcs.n	800a602 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 800a5ce:	b124      	cbz	r4, 800a5da <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5d0:	4a12      	ldr	r2, [pc, #72]	; (800a61c <prvProcessTimerOrBlockTask+0x6c>)
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	6812      	ldr	r2, [r2, #0]
 800a5d6:	b9da      	cbnz	r2, 800a610 <prvProcessTimerOrBlockTask+0x60>
 800a5d8:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5da:	4622      	mov	r2, r4
 800a5dc:	1b71      	subs	r1, r6, r5
 800a5de:	4b10      	ldr	r3, [pc, #64]	; (800a620 <prvProcessTimerOrBlockTask+0x70>)
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f7fe ffad 	bl	8009540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5e6:	f7ff fad9 	bl	8009b9c <xTaskResumeAll>
 800a5ea:	b9a8      	cbnz	r0, 800a618 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800a5ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	e00a      	b.n	800a618 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800a602:	f7ff facb 	bl	8009b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a606:	4629      	mov	r1, r5
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff ff9b 	bl	800a544 <prvProcessExpiredTimer>
 800a60e:	e003      	b.n	800a618 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a610:	461c      	mov	r4, r3
 800a612:	e7e2      	b.n	800a5da <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800a614:	f7ff fac2 	bl	8009b9c <xTaskResumeAll>
}
 800a618:	b002      	add	sp, #8
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	20003130 	.word	0x20003130
 800a620:	20003250 	.word	0x20003250

0800a624 <prvProcessReceivedCommands>:
{
 800a624:	b510      	push	{r4, lr}
 800a626:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a628:	e002      	b.n	800a630 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	da0f      	bge.n	800a650 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a630:	2200      	movs	r2, #0
 800a632:	a904      	add	r1, sp, #16
 800a634:	4b3d      	ldr	r3, [pc, #244]	; (800a72c <prvProcessReceivedCommands+0x108>)
 800a636:	6818      	ldr	r0, [r3, #0]
 800a638:	f7fe febf 	bl	80093ba <xQueueReceive>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d073      	beq.n	800a728 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a640:	9b04      	ldr	r3, [sp, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	daf1      	bge.n	800a62a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a646:	9907      	ldr	r1, [sp, #28]
 800a648:	9806      	ldr	r0, [sp, #24]
 800a64a:	9b05      	ldr	r3, [sp, #20]
 800a64c:	4798      	blx	r3
 800a64e:	e7ec      	b.n	800a62a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a650:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a652:	6963      	ldr	r3, [r4, #20]
 800a654:	b113      	cbz	r3, 800a65c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a656:	1d20      	adds	r0, r4, #4
 800a658:	f7fe fa18 	bl	8008a8c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a65c:	a803      	add	r0, sp, #12
 800a65e:	f7ff ff5b 	bl	800a518 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a662:	9b04      	ldr	r3, [sp, #16]
 800a664:	2b09      	cmp	r3, #9
 800a666:	d8e3      	bhi.n	800a630 <prvProcessReceivedCommands+0xc>
 800a668:	e8df f003 	tbb	[pc, r3]
 800a66c:	30050505 	.word	0x30050505
 800a670:	05055037 	.word	0x05055037
 800a674:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a676:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	69a1      	ldr	r1, [r4, #24]
 800a686:	4602      	mov	r2, r0
 800a688:	4419      	add	r1, r3
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff fe42 	bl	800a314 <prvInsertTimerInActiveList>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0cd      	beq.n	800a630 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a694:	6a23      	ldr	r3, [r4, #32]
 800a696:	4620      	mov	r0, r4
 800a698:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a69a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a69e:	f013 0f04 	tst.w	r3, #4
 800a6a2:	d0c5      	beq.n	800a630 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6a4:	69a2      	ldr	r2, [r4, #24]
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	9100      	str	r1, [sp, #0]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	9805      	ldr	r0, [sp, #20]
 800a6ae:	4402      	add	r2, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7ff febd 	bl	800a430 <xTimerGenericCommand>
							configASSERT( xResult );
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d1ba      	bne.n	800a630 <prvProcessReceivedCommands+0xc>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	e7fe      	b.n	800a6ca <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800a6d8:	e7aa      	b.n	800a630 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6e6:	9905      	ldr	r1, [sp, #20]
 800a6e8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6ea:	b131      	cbz	r1, 800a6fa <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	4401      	add	r1, r0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7ff fe0e 	bl	800a314 <prvInsertTimerInActiveList>
					break;
 800a6f8:	e79a      	b.n	800a630 <prvProcessReceivedCommands+0xc>
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a70a:	e7fe      	b.n	800a70a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a70c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a710:	f013 0f02 	tst.w	r3, #2
 800a714:	d004      	beq.n	800a720 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a716:	f023 0301 	bic.w	r3, r3, #1
 800a71a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a71e:	e787      	b.n	800a630 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800a720:	4620      	mov	r0, r4
 800a722:	f7fe f949 	bl	80089b8 <vPortFree>
 800a726:	e783      	b.n	800a630 <prvProcessReceivedCommands+0xc>
}
 800a728:	b008      	add	sp, #32
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	20003250 	.word	0x20003250

0800a730 <prvTimerTask>:
{
 800a730:	b500      	push	{lr}
 800a732:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a734:	a801      	add	r0, sp, #4
 800a736:	f7ff fddd 	bl	800a2f4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a73a:	9901      	ldr	r1, [sp, #4]
 800a73c:	f7ff ff38 	bl	800a5b0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a740:	f7ff ff70 	bl	800a624 <prvProcessReceivedCommands>
	for( ;; )
 800a744:	e7f6      	b.n	800a734 <prvTimerTask+0x4>
	...

0800a748 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a748:	2804      	cmp	r0, #4
 800a74a:	d807      	bhi.n	800a75c <LmHandlerPackageIsInitialized+0x14>
{
 800a74c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <LmHandlerPackageIsInitialized+0x1c>)
 800a750:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	b11b      	cbz	r3, 800a760 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800a758:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800a75a:	bd08      	pop	{r3, pc}
        return false;
 800a75c:	2000      	movs	r0, #0
}
 800a75e:	4770      	bx	lr
        return false;
 800a760:	2000      	movs	r0, #0
 800a762:	e7fa      	b.n	800a75a <LmHandlerPackageIsInitialized+0x12>
 800a764:	20003374 	.word	0x20003374

0800a768 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4605      	mov	r5, r0
 800a76c:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a76e:	2400      	movs	r4, #0
 800a770:	e005      	b.n	800a77e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	b10b      	cbz	r3, 800a77a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a776:	4630      	mov	r0, r6
 800a778:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a77a:	3401      	adds	r4, #1
 800a77c:	b264      	sxtb	r4, r4
 800a77e:	2c04      	cmp	r4, #4
 800a780:	dc24      	bgt.n	800a7cc <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800a782:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <LmHandlerPackagesNotify+0x68>)
 800a784:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0f6      	beq.n	800a77a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800a78c:	2d03      	cmp	r5, #3
 800a78e:	d8f4      	bhi.n	800a77a <LmHandlerPackagesNotify+0x12>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <LmHandlerPackagesNotify+0x30>)
 800a792:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a773 	.word	0x0800a773
 800a79c:	0800a7a9 	.word	0x0800a7a9
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7c1 	.word	0x0800a7c1
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0e5      	beq.n	800a77a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4798      	blx	r3
 800a7b2:	e7e2      	b.n	800a77a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0df      	beq.n	800a77a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4798      	blx	r3
 800a7be:	e7dc      	b.n	800a77a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0d9      	beq.n	800a77a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	4798      	blx	r3
 800a7ca:	e7d6      	b.n	800a77a <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20003374 	.word	0x20003374

0800a7d4 <MlmeIndication>:
{
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <MlmeIndication+0x4c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a7de:	7842      	ldrb	r2, [r0, #1]
 800a7e0:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a7e2:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800a7e6:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a7e8:	f9b1 2000 	ldrsh.w	r2, [r1]
 800a7ec:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a7ee:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800a7f2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a7f4:	78ca      	ldrb	r2, [r1, #3]
 800a7f6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a7f8:	6842      	ldr	r2, [r0, #4]
 800a7fa:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800a7fc:	4b09      	ldr	r3, [pc, #36]	; (800a824 <MlmeIndication+0x50>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a802:	b13b      	cbz	r3, 800a814 <MlmeIndication+0x40>
 800a804:	7802      	ldrb	r2, [r0, #0]
 800a806:	2a0a      	cmp	r2, #10
 800a808:	d004      	beq.n	800a814 <MlmeIndication+0x40>
 800a80a:	2a0e      	cmp	r2, #14
 800a80c:	d002      	beq.n	800a814 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a80e:	4904      	ldr	r1, [pc, #16]	; (800a820 <MlmeIndication+0x4c>)
 800a810:	2000      	movs	r0, #0
 800a812:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800a814:	4621      	mov	r1, r4
 800a816:	2003      	movs	r0, #3
 800a818:	f7ff ffa6 	bl	800a768 <LmHandlerPackagesNotify>
}
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	bf00      	nop
 800a820:	2000008c 	.word	0x2000008c
 800a824:	20003370 	.word	0x20003370

0800a828 <McpsConfirm>:
{
 800a828:	b510      	push	{r4, lr}
 800a82a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <McpsConfirm+0x3c>)
 800a82e:	2201      	movs	r2, #1
 800a830:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a832:	7842      	ldrb	r2, [r0, #1]
 800a834:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a836:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800a83a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a83c:	68c2      	ldr	r2, [r0, #12]
 800a83e:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a840:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800a844:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a846:	6902      	ldr	r2, [r0, #16]
 800a848:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a84a:	7902      	ldrb	r2, [r0, #4]
 800a84c:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a84e:	4b06      	ldr	r3, [pc, #24]	; (800a868 <McpsConfirm+0x40>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a854:	b10b      	cbz	r3, 800a85a <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a856:	4803      	ldr	r0, [pc, #12]	; (800a864 <McpsConfirm+0x3c>)
 800a858:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800a85a:	4621      	mov	r1, r4
 800a85c:	2000      	movs	r0, #0
 800a85e:	f7ff ff83 	bl	800a768 <LmHandlerPackagesNotify>
}
 800a862:	bd10      	pop	{r4, pc}
 800a864:	200000a0 	.word	0x200000a0
 800a868:	20003370 	.word	0x20003370

0800a86c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800a86c:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a86e:	2400      	movs	r4, #0
 800a870:	e001      	b.n	800a876 <LmHandlerPackageIsTxPending+0xa>
 800a872:	3401      	adds	r4, #1
 800a874:	b264      	sxtb	r4, r4
 800a876:	2c04      	cmp	r4, #4
 800a878:	dc0a      	bgt.n	800a890 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800a87a:	4b07      	ldr	r3, [pc, #28]	; (800a898 <LmHandlerPackageIsTxPending+0x2c>)
 800a87c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0f6      	beq.n	800a872 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	4798      	blx	r3
 800a888:	4603      	mov	r3, r0
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d0f1      	beq.n	800a872 <LmHandlerPackageIsTxPending+0x6>
 800a88e:	e000      	b.n	800a892 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	bd10      	pop	{r4, pc}
 800a896:	bf00      	nop
 800a898:	20003374 	.word	0x20003374

0800a89c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800a89c:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a89e:	2400      	movs	r4, #0
 800a8a0:	e001      	b.n	800a8a6 <LmHandlerPackagesProcess+0xa>
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	b264      	sxtb	r4, r4
 800a8a6:	2c04      	cmp	r4, #4
 800a8a8:	dc12      	bgt.n	800a8d0 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a8aa:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <LmHandlerPackagesProcess+0x38>)
 800a8ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0f6      	beq.n	800a8a2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a8b4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f3      	beq.n	800a8a2 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800a8ba:	b2e0      	uxtb	r0, r4
 800a8bc:	f7ff ff44 	bl	800a748 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0ee      	beq.n	800a8a2 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800a8c4:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <LmHandlerPackagesProcess+0x38>)
 800a8c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	4798      	blx	r3
 800a8ce:	e7e8      	b.n	800a8a2 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20003374 	.word	0x20003374

0800a8d8 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800a8d8:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a8da:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <LmHandlerOnTxFrameCtrlChanged+0x14>)
 800a8dc:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	b103      	cbz	r3, 800a8e8 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800a8e6:	4798      	blx	r3
    }
}
 800a8e8:	bd08      	pop	{r3, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20003388 	.word	0x20003388
 800a8f0:	20003370 	.word	0x20003370

0800a8f4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800a8f4:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a8f6:	4b04      	ldr	r3, [pc, #16]	; (800a908 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 800a8f8:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800a8fa:	4b04      	ldr	r3, [pc, #16]	; (800a90c <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a900:	b103      	cbz	r3, 800a904 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800a902:	4798      	blx	r3
    }
}
 800a904:	bd08      	pop	{r3, pc}
 800a906:	bf00      	nop
 800a908:	20003388 	.word	0x20003388
 800a90c:	20003370 	.word	0x20003370

0800a910 <LmHandlerJoin>:
{
 800a910:	b530      	push	{r4, r5, lr}
 800a912:	b091      	sub	sp, #68	; 0x44
 800a914:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800a916:	2301      	movs	r3, #1
 800a918:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800a91c:	4b33      	ldr	r3, [pc, #204]	; (800a9ec <LmHandlerJoin+0xdc>)
 800a91e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a922:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800a926:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800a92a:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800a92e:	2802      	cmp	r0, #2
 800a930:	d022      	beq.n	800a978 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a932:	2001      	movs	r0, #1
 800a934:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800a938:	4b2d      	ldr	r3, [pc, #180]	; (800a9f0 <LmHandlerJoin+0xe0>)
 800a93a:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800a93c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800a93e:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a940:	2100      	movs	r1, #0
 800a942:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800a944:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800a946:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <LmHandlerJoin+0xe4>)
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b1f3      	cbz	r3, 800a98a <LmHandlerJoin+0x7a>
        LoRaMacStart();
 800a94c:	f003 fb0c 	bl	800df68 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a950:	2301      	movs	r3, #1
 800a952:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a956:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a95a:	a801      	add	r0, sp, #4
 800a95c:	f003 fd42 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800a960:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <LmHandlerJoin+0xe4>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	b103      	cbz	r3, 800a968 <LmHandlerJoin+0x58>
 800a966:	b114      	cbz	r4, 800a96e <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 800a968:	a80b      	add	r0, sp, #44	; 0x2c
 800a96a:	f003 ffef 	bl	800e94c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a96e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a970:	4b21      	ldr	r3, [pc, #132]	; (800a9f8 <LmHandlerJoin+0xe8>)
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	b011      	add	sp, #68	; 0x44
 800a976:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a978:	2202      	movs	r2, #2
 800a97a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800a97e:	4b1c      	ldr	r3, [pc, #112]	; (800a9f0 <LmHandlerJoin+0xe0>)
 800a980:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800a982:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 800a984:	f003 faf0 	bl	800df68 <LoRaMacStart>
 800a988:	e7ea      	b.n	800a960 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800a98a:	231f      	movs	r3, #31
 800a98c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800a990:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a994:	a801      	add	r0, sp, #4
 800a996:	f003 fd25 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800a99a:	2320      	movs	r3, #32
 800a99c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800a9a0:	4d12      	ldr	r5, [pc, #72]	; (800a9ec <LmHandlerJoin+0xdc>)
 800a9a2:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800a9a6:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9aa:	a801      	add	r0, sp, #4
 800a9ac:	f003 fd1a 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800a9b0:	2322      	movs	r3, #34	; 0x22
 800a9b2:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800a9b6:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800a9ba:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9be:	a801      	add	r0, sp, #4
 800a9c0:	f003 fd10 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a9c4:	2321      	movs	r3, #33	; 0x21
 800a9c6:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800a9ca:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800a9ce:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9d2:	a801      	add	r0, sp, #4
 800a9d4:	f003 fd06 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800a9d8:	2329      	movs	r3, #41	; 0x29
 800a9da:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <LmHandlerJoin+0xec>)
 800a9e0:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800a9e2:	a801      	add	r0, sp, #4
 800a9e4:	f003 fcfe 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800a9e8:	e7b0      	b.n	800a94c <LmHandlerJoin+0x3c>
 800a9ea:	bf00      	nop
 800a9ec:	20003388 	.word	0x20003388
 800a9f0:	20000080 	.word	0x20000080
 800a9f4:	20003364 	.word	0x20003364
 800a9f8:	20003368 	.word	0x20003368
 800a9fc:	01000400 	.word	0x01000400

0800aa00 <LmHandlerDeviceTimeReq>:
{
 800aa00:	b500      	push	{lr}
 800aa02:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800aa04:	2309      	movs	r3, #9
 800aa06:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800aa0a:	a801      	add	r0, sp, #4
 800aa0c:	f003 ff9e 	bl	800e94c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800aa10:	9a05      	ldr	r2, [sp, #20]
 800aa12:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <LmHandlerDeviceTimeReq+0x24>)
 800aa14:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800aa16:	b910      	cbnz	r0, 800aa1e <LmHandlerDeviceTimeReq+0x1e>
}
 800aa18:	b007      	add	sp, #28
 800aa1a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800aa1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa22:	e7f9      	b.n	800aa18 <LmHandlerDeviceTimeReq+0x18>
 800aa24:	20003368 	.word	0x20003368

0800aa28 <LmHandlerGetDutyCycleWaitTime>:
}
 800aa28:	4b01      	ldr	r3, [pc, #4]	; (800aa30 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20003368 	.word	0x20003368

0800aa34 <LmHandlerJoinStatus>:
{
 800aa34:	b500      	push	{lr}
 800aa36:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800aa3e:	4668      	mov	r0, sp
 800aa40:	f003 fb5c 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800aa44:	b920      	cbnz	r0, 800aa50 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800aa46:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800aa4a:	b110      	cbz	r0, 800aa52 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	e000      	b.n	800aa52 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800aa50:	2000      	movs	r0, #0
}
 800aa52:	b00b      	add	sp, #44	; 0x2c
 800aa54:	f85d fb04 	ldr.w	pc, [sp], #4

0800aa58 <LmHandlerIsBusy>:
{
 800aa58:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800aa5a:	f003 f833 	bl	800dac4 <LoRaMacIsBusy>
 800aa5e:	b100      	cbz	r0, 800aa62 <LmHandlerIsBusy+0xa>
}
 800aa60:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aa62:	f7ff ffe7 	bl	800aa34 <LmHandlerJoinStatus>
 800aa66:	2801      	cmp	r0, #1
 800aa68:	d006      	beq.n	800aa78 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800aa6a:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <LmHandlerIsBusy+0x28>)
 800aa6c:	7a19      	ldrb	r1, [r3, #8]
 800aa6e:	79d8      	ldrb	r0, [r3, #7]
 800aa70:	f7ff ff4e 	bl	800a910 <LmHandlerJoin>
        return true;
 800aa74:	2001      	movs	r0, #1
 800aa76:	e7f3      	b.n	800aa60 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800aa78:	f7ff fef8 	bl	800a86c <LmHandlerPackageIsTxPending>
 800aa7c:	e7f0      	b.n	800aa60 <LmHandlerIsBusy+0x8>
 800aa7e:	bf00      	nop
 800aa80:	20000080 	.word	0x20000080

0800aa84 <LmHandlerSend>:
{
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800aa8e:	f003 f819 	bl	800dac4 <LoRaMacIsBusy>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d168      	bne.n	800ab68 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800aa96:	f003 f833 	bl	800db00 <LoRaMacIsStopped>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d167      	bne.n	800ab6e <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800aa9e:	f7ff ffc9 	bl	800aa34 <LmHandlerJoinStatus>
 800aaa2:	2801      	cmp	r0, #1
 800aaa4:	d137      	bne.n	800ab16 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800aaa6:	4b35      	ldr	r3, [pc, #212]	; (800ab7c <LmHandlerSend+0xf8>)
 800aaa8:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800aaaa:	3d00      	subs	r5, #0
 800aaac:	bf18      	it	ne
 800aaae:	2501      	movne	r5, #1
 800aab0:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800aab4:	4b32      	ldr	r3, [pc, #200]	; (800ab80 <LmHandlerSend+0xfc>)
 800aab6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800aaba:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800aabe:	4669      	mov	r1, sp
 800aac0:	7860      	ldrb	r0, [r4, #1]
 800aac2:	f003 fab1 	bl	800e028 <LoRaMacQueryTxPossible>
 800aac6:	b370      	cbz	r0, 800ab26 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800aac8:	2300      	movs	r3, #0
 800aaca:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800aace:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800aad0:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800aad4:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800aad8:	4b28      	ldr	r3, [pc, #160]	; (800ab7c <LmHandlerSend+0xf8>)
 800aada:	f103 0c10 	add.w	ip, r3, #16
 800aade:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aae2:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800aae6:	4a26      	ldr	r2, [pc, #152]	; (800ab80 <LmHandlerSend+0xfc>)
 800aae8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aaec:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800aaee:	4631      	mov	r1, r6
 800aaf0:	a801      	add	r0, sp, #4
 800aaf2:	f004 f82f 	bl	800eb54 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800aaf6:	9a05      	ldr	r2, [sp, #20]
 800aaf8:	4b22      	ldr	r3, [pc, #136]	; (800ab84 <LmHandlerSend+0x100>)
 800aafa:	601a      	str	r2, [r3, #0]
    switch( status )
 800aafc:	2811      	cmp	r0, #17
 800aafe:	d830      	bhi.n	800ab62 <LmHandlerSend+0xde>
 800ab00:	e8df f000 	tbb	[pc, r0]
 800ab04:	2f2f1c21 	.word	0x2f2f1c21
 800ab08:	382f2f2f 	.word	0x382f2f2f
 800ab0c:	2c2f2f2f 	.word	0x2c2f2f2f
 800ab10:	1c1c2f2f 	.word	0x1c1c2f2f
 800ab14:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ab16:	4b1c      	ldr	r3, [pc, #112]	; (800ab88 <LmHandlerSend+0x104>)
 800ab18:	7a19      	ldrb	r1, [r3, #8]
 800ab1a:	79d8      	ldrb	r0, [r3, #7]
 800ab1c:	f7ff fef8 	bl	800a910 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab20:	f06f 0502 	mvn.w	r5, #2
 800ab24:	e00c      	b.n	800ab40 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ab26:	7823      	ldrb	r3, [r4, #0]
 800ab28:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ab2c:	7863      	ldrb	r3, [r4, #1]
 800ab2e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ab32:	6863      	ldr	r3, [r4, #4]
 800ab34:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ab36:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ab3a:	e7cd      	b.n	800aad8 <LmHandlerSend+0x54>
    switch( status )
 800ab3c:	f06f 0501 	mvn.w	r5, #1
}
 800ab40:	4628      	mov	r0, r5
 800ab42:	b006      	add	sp, #24
 800ab44:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800ab46:	4b11      	ldr	r3, [pc, #68]	; (800ab8c <LmHandlerSend+0x108>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ab4c:	f115 0f07 	cmn.w	r5, #7
 800ab50:	d0f6      	beq.n	800ab40 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ab52:	2500      	movs	r5, #0
 800ab54:	e7f4      	b.n	800ab40 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ab56:	f06f 0504 	mvn.w	r5, #4
            break;
 800ab5a:	e7f1      	b.n	800ab40 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ab5c:	f06f 0505 	mvn.w	r5, #5
            break;
 800ab60:	e7ee      	b.n	800ab40 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ab62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            break;
 800ab66:	e7eb      	b.n	800ab40 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ab68:	f06f 0501 	mvn.w	r5, #1
 800ab6c:	e7e8      	b.n	800ab40 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab6e:	f06f 0502 	mvn.w	r5, #2
 800ab72:	e7e5      	b.n	800ab40 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ab74:	f06f 0502 	mvn.w	r5, #2
 800ab78:	e7e2      	b.n	800ab40 <LmHandlerSend+0xbc>
 800ab7a:	bf00      	nop
 800ab7c:	200000a0 	.word	0x200000a0
 800ab80:	20003388 	.word	0x20003388
 800ab84:	20003368 	.word	0x20003368
 800ab88:	20000080 	.word	0x20000080
 800ab8c:	2000336c 	.word	0x2000336c

0800ab90 <LmHandlerProcess>:
{
 800ab90:	b500      	push	{lr}
 800ab92:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800ab94:	f002 ffc0 	bl	800db18 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800ab98:	f7ff fe80 	bl	800a89c <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800ab9c:	f7ff fe66 	bl	800a86c <LmHandlerPackageIsTxPending>
 800aba0:	b910      	cbnz	r0, 800aba8 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800aba2:	4b0b      	ldr	r3, [pc, #44]	; (800abd0 <LmHandlerProcess+0x40>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	b913      	cbnz	r3, 800abae <LmHandlerProcess+0x1e>
}
 800aba8:	b003      	add	sp, #12
 800abaa:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800abae:	2200      	movs	r2, #0
 800abb0:	f88d 2000 	strb.w	r2, [sp]
 800abb4:	f88d 2001 	strb.w	r2, [sp, #1]
 800abb8:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <LmHandlerProcess+0x44>)
 800abbc:	78d9      	ldrb	r1, [r3, #3]
 800abbe:	4668      	mov	r0, sp
 800abc0:	f7ff ff60 	bl	800aa84 <LmHandlerSend>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d1ef      	bne.n	800aba8 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800abc8:	4b01      	ldr	r3, [pc, #4]	; (800abd0 <LmHandlerProcess+0x40>)
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	e7eb      	b.n	800aba8 <LmHandlerProcess+0x18>
 800abd0:	2000336c 	.word	0x2000336c
 800abd4:	20003388 	.word	0x20003388

0800abd8 <LmHandlerRequestClass>:
{
 800abd8:	b510      	push	{r4, lr}
 800abda:	b08a      	sub	sp, #40	; 0x28
 800abdc:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800abde:	f002 ff71 	bl	800dac4 <LoRaMacIsBusy>
 800abe2:	bbb0      	cbnz	r0, 800ac52 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800abe4:	f7ff ff26 	bl	800aa34 <LmHandlerJoinStatus>
 800abe8:	2801      	cmp	r0, #1
 800abea:	d135      	bne.n	800ac58 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 800abec:	2300      	movs	r3, #0
 800abee:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800abf2:	4668      	mov	r0, sp
 800abf4:	f003 fa82 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
 800abf8:	bb88      	cbnz	r0, 800ac5e <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800abfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	d030      	beq.n	800ac64 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800ac02:	2c01      	cmp	r4, #1
 800ac04:	d030      	beq.n	800ac68 <LmHandlerRequestClass+0x90>
 800ac06:	2c02      	cmp	r4, #2
 800ac08:	d014      	beq.n	800ac34 <LmHandlerRequestClass+0x5c>
 800ac0a:	b114      	cbz	r4, 800ac12 <LmHandlerRequestClass+0x3a>
 800ac0c:	2000      	movs	r0, #0
}
 800ac0e:	b00a      	add	sp, #40	; 0x28
 800ac10:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800ac12:	b90b      	cbnz	r3, 800ac18 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac14:	2000      	movs	r0, #0
 800ac16:	e7fa      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800ac18:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ac1c:	4668      	mov	r0, sp
 800ac1e:	f003 fbe1 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800ac22:	bb20      	cbnz	r0, 800ac6e <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ac24:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <LmHandlerRequestClass+0xb0>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	b31b      	cbz	r3, 800ac74 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac30:	2000      	movs	r0, #0
 800ac32:	e7ec      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 800ac34:	bb03      	cbnz	r3, 800ac78 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800ac36:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ac3a:	4668      	mov	r0, sp
 800ac3c:	f003 fbd2 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800ac40:	b9e8      	cbnz	r0, 800ac7e <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <LmHandlerRequestClass+0xb0>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac48:	b1e3      	cbz	r3, 800ac84 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac4e:	2000      	movs	r0, #0
 800ac50:	e7dd      	b.n	800ac0e <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ac52:	f06f 0001 	mvn.w	r0, #1
 800ac56:	e7da      	b.n	800ac0e <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ac58:	f06f 0002 	mvn.w	r0, #2
 800ac5c:	e7d7      	b.n	800ac0e <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac62:	e7d4      	b.n	800ac0e <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac64:	2000      	movs	r0, #0
 800ac66:	e7d2      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac6c:	e7cf      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ac6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac72:	e7cc      	b.n	800ac0e <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7ca      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac7c:	e7c7      	b.n	800ac0e <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac82:	e7c4      	b.n	800ac0e <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ac84:	2000      	movs	r0, #0
 800ac86:	e7c2      	b.n	800ac0e <LmHandlerRequestClass+0x36>
 800ac88:	20003370 	.word	0x20003370

0800ac8c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800ac8c:	b170      	cbz	r0, 800acac <LmHandlerGetCurrentClass+0x20>
{
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	b08a      	sub	sp, #40	; 0x28
 800ac92:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800ac94:	2300      	movs	r3, #0
 800ac96:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ac9a:	4668      	mov	r0, sp
 800ac9c:	f003 fa2e 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
 800aca0:	b938      	cbnz	r0, 800acb2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800aca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aca6:	7023      	strb	r3, [r4, #0]
}
 800aca8:	b00a      	add	sp, #40	; 0x28
 800acaa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800acac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800acb0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb6:	e7f7      	b.n	800aca8 <LmHandlerGetCurrentClass+0x1c>

0800acb8 <McpsIndication>:
{
 800acb8:	b510      	push	{r4, lr}
 800acba:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800acc2:	4a1d      	ldr	r2, [pc, #116]	; (800ad38 <McpsIndication+0x80>)
 800acc4:	2301      	movs	r3, #1
 800acc6:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800acc8:	7843      	ldrb	r3, [r0, #1]
 800acca:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800accc:	2b00      	cmp	r3, #0
 800acce:	d131      	bne.n	800ad34 <McpsIndication+0x7c>
 800acd0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800acd2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800acd6:	4b18      	ldr	r3, [pc, #96]	; (800ad38 <McpsIndication+0x80>)
 800acd8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800acda:	f9b1 2000 	ldrsh.w	r2, [r1]
 800acde:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ace0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800ace4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ace6:	78ca      	ldrb	r2, [r1, #3]
 800ace8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800acea:	6902      	ldr	r2, [r0, #16]
 800acec:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800acee:	78c3      	ldrb	r3, [r0, #3]
 800acf0:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800acf4:	7b03      	ldrb	r3, [r0, #12]
 800acf6:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800acfa:	6883      	ldr	r3, [r0, #8]
 800acfc:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800acfe:	4b0f      	ldr	r3, [pc, #60]	; (800ad3c <McpsIndication+0x84>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad04:	b113      	cbz	r3, 800ad0c <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ad06:	490c      	ldr	r1, [pc, #48]	; (800ad38 <McpsIndication+0x80>)
 800ad08:	a802      	add	r0, sp, #8
 800ad0a:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <McpsIndication+0x84>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	b113      	cbz	r3, 800ad1a <McpsIndication+0x62>
 800ad14:	7e22      	ldrb	r2, [r4, #24]
 800ad16:	b102      	cbz	r2, 800ad1a <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ad18:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	2001      	movs	r0, #1
 800ad1e:	f7ff fd23 	bl	800a768 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800ad22:	f10d 0007 	add.w	r0, sp, #7
 800ad26:	f7ff ffb1 	bl	800ac8c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ad2a:	7963      	ldrb	r3, [r4, #5]
 800ad2c:	b113      	cbz	r3, 800ad34 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <McpsIndication+0x88>)
 800ad30:	2201      	movs	r2, #1
 800ad32:	701a      	strb	r2, [r3, #0]
}
 800ad34:	b004      	add	sp, #16
 800ad36:	bd10      	pop	{r4, pc}
 800ad38:	2000008c 	.word	0x2000008c
 800ad3c:	20003370 	.word	0x20003370
 800ad40:	2000336c 	.word	0x2000336c

0800ad44 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800ad44:	b180      	cbz	r0, 800ad68 <LmHandlerGetTxDatarate+0x24>
{
 800ad46:	b510      	push	{r4, lr}
 800ad48:	b08a      	sub	sp, #40	; 0x28
 800ad4a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ad52:	4668      	mov	r0, sp
 800ad54:	f003 f9d2 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
 800ad58:	b948      	cbnz	r0, 800ad6e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ad5a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800ad5e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ad60:	4a04      	ldr	r2, [pc, #16]	; (800ad74 <LmHandlerGetTxDatarate+0x30>)
 800ad62:	7113      	strb	r3, [r2, #4]
}
 800ad64:	b00a      	add	sp, #40	; 0x28
 800ad66:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ad6c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ad6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad72:	e7f7      	b.n	800ad64 <LmHandlerGetTxDatarate+0x20>
 800ad74:	20003388 	.word	0x20003388

0800ad78 <LmHandlerSetSystemMaxRxError>:
{
 800ad78:	b500      	push	{lr}
 800ad7a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ad7c:	2323      	movs	r3, #35	; 0x23
 800ad7e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ad82:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ad84:	4668      	mov	r0, sp
 800ad86:	f003 fb2d 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800ad8a:	b910      	cbnz	r0, 800ad92 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800ad8c:	b00b      	add	sp, #44	; 0x2c
 800ad8e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800ad92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad96:	e7f9      	b.n	800ad8c <LmHandlerSetSystemMaxRxError+0x14>

0800ad98 <LmHandlerConfigure>:
{
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	b08e      	sub	sp, #56	; 0x38
 800ad9c:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800ad9e:	4c6d      	ldr	r4, [pc, #436]	; (800af54 <LmHandlerConfigure+0x1bc>)
 800ada0:	2218      	movs	r2, #24
 800ada2:	4620      	mov	r0, r4
 800ada4:	f008 f94d 	bl	8013042 <memcpy1>
    IsUplinkTxPending = false;
 800ada8:	4b6b      	ldr	r3, [pc, #428]	; (800af58 <LmHandlerConfigure+0x1c0>)
 800adaa:	2200      	movs	r2, #0
 800adac:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800adae:	f7f7 ff9b 	bl	8002ce8 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800adb2:	7822      	ldrb	r2, [r4, #0]
 800adb4:	2301      	movs	r3, #1
 800adb6:	4093      	lsls	r3, r2
 800adb8:	6841      	ldr	r1, [r0, #4]
 800adba:	420b      	tst	r3, r1
 800adbc:	d106      	bne.n	800adcc <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800adbe:	4b67      	ldr	r3, [pc, #412]	; (800af5c <LmHandlerConfigure+0x1c4>)
 800adc0:	2201      	movs	r2, #1
 800adc2:	2100      	movs	r1, #0
 800adc4:	4608      	mov	r0, r1
 800adc6:	f00a f819 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800adca:	e7fe      	b.n	800adca <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800adcc:	4964      	ldr	r1, [pc, #400]	; (800af60 <LmHandlerConfigure+0x1c8>)
 800adce:	4865      	ldr	r0, [pc, #404]	; (800af64 <LmHandlerConfigure+0x1cc>)
 800add0:	f002 feea 	bl	800dba8 <LoRaMacInitialization>
 800add4:	2800      	cmp	r0, #0
 800add6:	f040 80b7 	bne.w	800af48 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 800adda:	2327      	movs	r3, #39	; 0x27
 800addc:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ade0:	a804      	add	r0, sp, #16
 800ade2:	f003 faff 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d17c      	bne.n	800aee4 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 800adea:	4b5f      	ldr	r3, [pc, #380]	; (800af68 <LmHandlerConfigure+0x1d0>)
 800adec:	2201      	movs	r2, #1
 800adee:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 800adf0:	4b5d      	ldr	r3, [pc, #372]	; (800af68 <LmHandlerConfigure+0x1d0>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 809e 	beq.w	800af36 <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800adfa:	4b5c      	ldr	r3, [pc, #368]	; (800af6c <LmHandlerConfigure+0x1d4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	b10b      	cbz	r3, 800ae06 <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ae02:	2000      	movs	r0, #0
 800ae04:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800ae06:	2327      	movs	r3, #39	; 0x27
 800ae08:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ae0c:	a804      	add	r0, sp, #16
 800ae0e:	f003 f975 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800ae12:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800ae14:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800ae18:	4b4e      	ldr	r3, [pc, #312]	; (800af54 <LmHandlerConfigure+0x1bc>)
 800ae1a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800ae1c:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 800ae20:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800ae22:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800ae26:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800ae28:	4b4d      	ldr	r3, [pc, #308]	; (800af60 <LmHandlerConfigure+0x1c8>)
 800ae2a:	68d9      	ldr	r1, [r3, #12]
 800ae2c:	6898      	ldr	r0, [r3, #8]
 800ae2e:	f008 f81b 	bl	8012e68 <SecureElementInitMcuID>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f040 808b 	bne.w	800af4e <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 800ae38:	2306      	movs	r3, #6
 800ae3a:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ae3e:	a804      	add	r0, sp, #16
 800ae40:	f003 f95c 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ae44:	4c4a      	ldr	r4, [pc, #296]	; (800af70 <LmHandlerConfigure+0x1d8>)
 800ae46:	9b05      	ldr	r3, [sp, #20]
 800ae48:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ae4a:	a804      	add	r0, sp, #16
 800ae4c:	f003 faca 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800ae50:	2302      	movs	r3, #2
 800ae52:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800ae56:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ae58:	a804      	add	r0, sp, #16
 800ae5a:	f003 f94f 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800ae64:	3408      	adds	r4, #8
 800ae66:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800ae68:	a804      	add	r0, sp, #16
 800ae6a:	f003 f947 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800ae6e:	f008 f895 	bl	8012f9c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800ae72:	260f      	movs	r6, #15
 800ae74:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ae7e:	a804      	add	r0, sp, #16
 800ae80:	f003 fab0 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800ae84:	2310      	movs	r3, #16
 800ae86:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800ae8a:	2500      	movs	r5, #0
 800ae8c:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800ae90:	eb0d 0003 	add.w	r0, sp, r3
 800ae94:	f003 faa6 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800ae98:	2304      	movs	r3, #4
 800ae9a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800ae9e:	4c2d      	ldr	r4, [pc, #180]	; (800af54 <LmHandlerConfigure+0x1bc>)
 800aea0:	78a3      	ldrb	r3, [r4, #2]
 800aea2:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800aea6:	a804      	add	r0, sp, #16
 800aea8:	f003 fa9c 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800aeac:	233a      	movs	r3, #58	; 0x3a
 800aeae:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800aeb2:	6963      	ldr	r3, [r4, #20]
 800aeb4:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800aeb6:	a804      	add	r0, sp, #16
 800aeb8:	f003 fa94 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800aebc:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800aec0:	a902      	add	r1, sp, #8
 800aec2:	7820      	ldrb	r0, [r4, #0]
 800aec4:	f004 ffea 	bl	800fe9c <RegionGetPhyParam>
 800aec8:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800aeca:	1b43      	subs	r3, r0, r5
 800aecc:	bf18      	it	ne
 800aece:	2301      	movne	r3, #1
 800aed0:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800aed2:	2014      	movs	r0, #20
 800aed4:	f7ff ff50 	bl	800ad78 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800aed8:	79e0      	ldrb	r0, [r4, #7]
 800aeda:	f003 ff29 	bl	800ed30 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800aede:	4628      	mov	r0, r5
}
 800aee0:	b00e      	add	sp, #56	; 0x38
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800aee4:	2328      	movs	r3, #40	; 0x28
 800aee6:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800aeea:	4b20      	ldr	r3, [pc, #128]	; (800af6c <LmHandlerConfigure+0x1d4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	b14b      	cbz	r3, 800af06 <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800aef2:	a804      	add	r0, sp, #16
 800aef4:	f003 f902 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800aef8:	4b1c      	ldr	r3, [pc, #112]	; (800af6c <LmHandlerConfigure+0x1d4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800af02:	9805      	ldr	r0, [sp, #20]
 800af04:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800af06:	2327      	movs	r3, #39	; 0x27
 800af08:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800af0c:	a804      	add	r0, sp, #16
 800af0e:	f003 fa69 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800af12:	2800      	cmp	r0, #0
 800af14:	f47f af6c 	bne.w	800adf0 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800af18:	2301      	movs	r3, #1
 800af1a:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800af1e:	a804      	add	r0, sp, #16
 800af20:	f003 f8ec 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800af24:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f43f af61 	beq.w	800adf0 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 800af2e:	4b0e      	ldr	r3, [pc, #56]	; (800af68 <LmHandlerConfigure+0x1d0>)
 800af30:	2201      	movs	r2, #1
 800af32:	701a      	strb	r2, [r3, #0]
 800af34:	e75c      	b.n	800adf0 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 800af36:	2305      	movs	r3, #5
 800af38:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800af3c:	2300      	movs	r3, #0
 800af3e:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800af40:	a804      	add	r0, sp, #16
 800af42:	f003 fa4f 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
 800af46:	e76f      	b.n	800ae28 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 800af48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af4c:	e7c8      	b.n	800aee0 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 800af4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af52:	e7c5      	b.n	800aee0 <LmHandlerConfigure+0x148>
 800af54:	20003388 	.word	0x20003388
 800af58:	2000336c 	.word	0x2000336c
 800af5c:	080161fc 	.word	0x080161fc
 800af60:	200033b0 	.word	0x200033b0
 800af64:	200033c8 	.word	0x200033c8
 800af68:	20003364 	.word	0x20003364
 800af6c:	20003370 	.word	0x20003370
 800af70:	2000334c 	.word	0x2000334c

0800af74 <LmHandlerPackageRegister>:
{
 800af74:	b530      	push	{r4, r5, lr}
 800af76:	b083      	sub	sp, #12
 800af78:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	9301      	str	r3, [sp, #4]
    switch( id )
 800af7e:	4604      	mov	r4, r0
 800af80:	b9d8      	cbnz	r0, 800afba <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800af82:	f000 fc1b 	bl	800b7bc <LmhpCompliancePackageFactory>
 800af86:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800af88:	9b01      	ldr	r3, [sp, #4]
 800af8a:	b1f3      	cbz	r3, 800afca <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 800af8c:	4a10      	ldr	r2, [pc, #64]	; (800afd0 <LmHandlerPackageRegister+0x5c>)
 800af8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800af92:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <LmHandlerPackageRegister+0x60>)
 800af94:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800af96:	4a10      	ldr	r2, [pc, #64]	; (800afd8 <LmHandlerPackageRegister+0x64>)
 800af98:	6812      	ldr	r2, [r2, #0]
 800af9a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800af9c:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800af9e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800afa0:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800afa2:	490e      	ldr	r1, [pc, #56]	; (800afdc <LmHandlerPackageRegister+0x68>)
 800afa4:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800afa6:	6992      	ldr	r2, [r2, #24]
 800afa8:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	22f2      	movs	r2, #242	; 0xf2
 800afae:	490c      	ldr	r1, [pc, #48]	; (800afe0 <LmHandlerPackageRegister+0x6c>)
 800afb0:	4628      	mov	r0, r5
 800afb2:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800afb4:	2000      	movs	r0, #0
}
 800afb6:	b003      	add	sp, #12
 800afb8:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800afba:	a901      	add	r1, sp, #4
 800afbc:	f000 fc04 	bl	800b7c8 <LmhpPackagesRegister>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d0e1      	beq.n	800af88 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800afc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc8:	e7f5      	b.n	800afb6 <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 800afca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afce:	e7f2      	b.n	800afb6 <LmHandlerPackageRegister+0x42>
 800afd0:	20003374 	.word	0x20003374
 800afd4:	0800a911 	.word	0x0800a911
 800afd8:	20003370 	.word	0x20003370
 800afdc:	0800aa01 	.word	0x0800aa01
 800afe0:	20003258 	.word	0x20003258

0800afe4 <LmHandlerInit>:
{
 800afe4:	b500      	push	{lr}
 800afe6:	b083      	sub	sp, #12
 800afe8:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800afea:	4b19      	ldr	r3, [pc, #100]	; (800b050 <LmHandlerInit+0x6c>)
 800afec:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800afee:	4b19      	ldr	r3, [pc, #100]	; (800b054 <LmHandlerInit+0x70>)
 800aff0:	4a19      	ldr	r2, [pc, #100]	; (800b058 <LmHandlerInit+0x74>)
 800aff2:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800aff4:	4a19      	ldr	r2, [pc, #100]	; (800b05c <LmHandlerInit+0x78>)
 800aff6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800aff8:	4a19      	ldr	r2, [pc, #100]	; (800b060 <LmHandlerInit+0x7c>)
 800affa:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800affc:	4a19      	ldr	r2, [pc, #100]	; (800b064 <LmHandlerInit+0x80>)
 800affe:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b000:	6802      	ldr	r2, [r0, #0]
 800b002:	4b19      	ldr	r3, [pc, #100]	; (800b068 <LmHandlerInit+0x84>)
 800b004:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b006:	6842      	ldr	r2, [r0, #4]
 800b008:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b00a:	6882      	ldr	r2, [r0, #8]
 800b00c:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800b00e:	68c2      	ldr	r2, [r0, #12]
 800b010:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b012:	4a16      	ldr	r2, [pc, #88]	; (800b06c <LmHandlerInit+0x88>)
 800b014:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b016:	6982      	ldr	r2, [r0, #24]
 800b018:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <LmHandlerInit+0x8c>)
 800b01c:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800b01e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b020:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800b022:	4a14      	ldr	r2, [pc, #80]	; (800b074 <LmHandlerInit+0x90>)
 800b024:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800b026:	4a14      	ldr	r2, [pc, #80]	; (800b078 <LmHandlerInit+0x94>)
 800b028:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800b02a:	4619      	mov	r1, r3
 800b02c:	2000      	movs	r0, #0
 800b02e:	f7ff ffa1 	bl	800af74 <LmHandlerPackageRegister>
 800b032:	b930      	cbnz	r0, 800b042 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800b034:	a801      	add	r0, sp, #4
 800b036:	f000 fbc5 	bl	800b7c4 <LmhpPackagesRegistrationInit>
 800b03a:	b928      	cbnz	r0, 800b048 <LmHandlerInit+0x64>
}
 800b03c:	b003      	add	sp, #12
 800b03e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b046:	e7f9      	b.n	800b03c <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 800b048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04c:	e7f6      	b.n	800b03c <LmHandlerInit+0x58>
 800b04e:	bf00      	nop
 800b050:	20003370 	.word	0x20003370
 800b054:	200033c8 	.word	0x200033c8
 800b058:	0800a829 	.word	0x0800a829
 800b05c:	0800acb9 	.word	0x0800acb9
 800b060:	0800b0fd 	.word	0x0800b0fd
 800b064:	0800a7d5 	.word	0x0800a7d5
 800b068:	200033b0 	.word	0x200033b0
 800b06c:	0800fe45 	.word	0x0800fe45
 800b070:	200033a0 	.word	0x200033a0
 800b074:	0800a8d9 	.word	0x0800a8d9
 800b078:	0800a8f5 	.word	0x0800a8f5

0800b07c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800b07c:	b161      	cbz	r1, 800b098 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800b07e:	b118      	cbz	r0, 800b088 <LmHandlerGetVersion+0xc>
 800b080:	2801      	cmp	r0, #1
 800b082:	d005      	beq.n	800b090 <LmHandlerGetVersion+0x14>
 800b084:	2000      	movs	r0, #0
 800b086:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800b088:	4a05      	ldr	r2, [pc, #20]	; (800b0a0 <LmHandlerGetVersion+0x24>)
 800b08a:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800b08c:	2000      	movs	r0, #0
            break;
 800b08e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800b090:	4a04      	ldr	r2, [pc, #16]	; (800b0a4 <LmHandlerGetVersion+0x28>)
 800b092:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800b094:	2000      	movs	r0, #0
            break;
 800b096:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	01000400 	.word	0x01000400
 800b0a4:	02010001 	.word	0x02010001

0800b0a8 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800b0a8:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800b0aa:	f003 fe5f 	bl	800ed6c <LoRaMacDeInitialization>
 800b0ae:	b900      	cbnz	r0, 800b0b2 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800b0b0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b0b2:	f06f 0001 	mvn.w	r0, #1
 800b0b6:	e7fb      	b.n	800b0b0 <LmHandlerStop+0x8>

0800b0b8 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800b0b8:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800b0ba:	f002 ff83 	bl	800dfc4 <LoRaMacHalt>
 800b0be:	b900      	cbnz	r0, 800b0c2 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800b0c0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b0c2:	f06f 0001 	mvn.w	r0, #1
 800b0c6:	e7fb      	b.n	800b0c0 <LmHandlerHalt+0x8>

0800b0c8 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800b0c8:	b180      	cbz	r0, 800b0ec <LmHandlerGetTxPower+0x24>
{
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	b08a      	sub	sp, #40	; 0x28
 800b0ce:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b0d0:	2321      	movs	r3, #33	; 0x21
 800b0d2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b0d6:	4668      	mov	r0, sp
 800b0d8:	f003 f810 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
 800b0dc:	b948      	cbnz	r0, 800b0f2 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800b0de:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800b0e2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800b0e4:	4a04      	ldr	r2, [pc, #16]	; (800b0f8 <LmHandlerGetTxPower+0x30>)
 800b0e6:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800b0e8:	b00a      	add	sp, #40	; 0x28
 800b0ea:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b0f0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b0f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0f6:	e7f7      	b.n	800b0e8 <LmHandlerGetTxPower+0x20>
 800b0f8:	20003388 	.word	0x20003388

0800b0fc <MlmeConfirm>:
{
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	b08a      	sub	sp, #40	; 0x28
 800b100:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800b102:	4b2c      	ldr	r3, [pc, #176]	; (800b1b4 <MlmeConfirm+0xb8>)
 800b104:	2200      	movs	r2, #0
 800b106:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800b108:	7842      	ldrb	r2, [r0, #1]
 800b10a:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b10c:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <MlmeConfirm+0xbc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	b10b      	cbz	r3, 800b118 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b114:	4827      	ldr	r0, [pc, #156]	; (800b1b4 <MlmeConfirm+0xb8>)
 800b116:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800b118:	4621      	mov	r1, r4
 800b11a:	2002      	movs	r0, #2
 800b11c:	f7ff fb24 	bl	800a768 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800b120:	7823      	ldrb	r3, [r4, #0]
 800b122:	2b05      	cmp	r3, #5
 800b124:	d037      	beq.n	800b196 <MlmeConfirm+0x9a>
 800b126:	2b0b      	cmp	r3, #11
 800b128:	d03d      	beq.n	800b1a6 <MlmeConfirm+0xaa>
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d001      	beq.n	800b132 <MlmeConfirm+0x36>
}
 800b12e:	b00a      	add	sp, #40	; 0x28
 800b130:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800b132:	2306      	movs	r3, #6
 800b134:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800b138:	4668      	mov	r0, sp
 800b13a:	f002 ffdf 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800b13e:	9901      	ldr	r1, [sp, #4]
 800b140:	4b1e      	ldr	r3, [pc, #120]	; (800b1bc <MlmeConfirm+0xc0>)
 800b142:	79d8      	ldrb	r0, [r3, #7]
 800b144:	f007 fe6e 	bl	8012e24 <SecureElementSetDevAddr>
 800b148:	b910      	cbnz	r0, 800b150 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b14a:	9a01      	ldr	r2, [sp, #4]
 800b14c:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <MlmeConfirm+0xc4>)
 800b14e:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800b150:	4c1a      	ldr	r4, [pc, #104]	; (800b1bc <MlmeConfirm+0xc0>)
 800b152:	1d20      	adds	r0, r4, #4
 800b154:	f7ff fdf6 	bl	800ad44 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800b158:	1d60      	adds	r0, r4, #5
 800b15a:	f7ff ffb5 	bl	800b0c8 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <MlmeConfirm+0xb8>)
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	b18b      	cbz	r3, 800b188 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800b164:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <MlmeConfirm+0xc0>)
 800b166:	22ff      	movs	r2, #255	; 0xff
 800b168:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800b16a:	4b13      	ldr	r3, [pc, #76]	; (800b1b8 <MlmeConfirm+0xbc>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	b10b      	cbz	r3, 800b176 <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b172:	4812      	ldr	r0, [pc, #72]	; (800b1bc <MlmeConfirm+0xc0>)
 800b174:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b176:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <MlmeConfirm+0xb8>)
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1d7      	bne.n	800b12e <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800b17e:	4b0f      	ldr	r3, [pc, #60]	; (800b1bc <MlmeConfirm+0xc0>)
 800b180:	79d8      	ldrb	r0, [r3, #7]
 800b182:	f007 ff1d 	bl	8012fc0 <SecureElementPrintSessionKeys>
            break;
 800b186:	e7d2      	b.n	800b12e <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b188:	2200      	movs	r2, #0
 800b18a:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <MlmeConfirm+0xc8>)
 800b18e:	7858      	ldrb	r0, [r3, #1]
 800b190:	f7ff fd22 	bl	800abd8 <LmHandlerRequestClass>
 800b194:	e7e9      	b.n	800b16a <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <MlmeConfirm+0xcc>)
 800b198:	2201      	movs	r2, #1
 800b19a:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800b19c:	7a22      	ldrb	r2, [r4, #8]
 800b19e:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800b1a0:	7a62      	ldrb	r2, [r4, #9]
 800b1a2:	74da      	strb	r2, [r3, #19]
            break;
 800b1a4:	e7c3      	b.n	800b12e <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b1a6:	7863      	ldrb	r3, [r4, #1]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0c0      	beq.n	800b12e <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800b1ac:	f7ff fc28 	bl	800aa00 <LmHandlerDeviceTimeReq>
}
 800b1b0:	e7bd      	b.n	800b12e <MlmeConfirm+0x32>
 800b1b2:	bf00      	nop
 800b1b4:	200000a0 	.word	0x200000a0
 800b1b8:	20003370 	.word	0x20003370
 800b1bc:	20000080 	.word	0x20000080
 800b1c0:	2000334c 	.word	0x2000334c
 800b1c4:	20003388 	.word	0x20003388
 800b1c8:	2000008c 	.word	0x2000008c

0800b1cc <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800b1d0:	f7ff ff72 	bl	800b0b8 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	b148      	cbz	r0, 800b1ec <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800b1d8:	b92c      	cbnz	r4, 800b1e6 <LmHandlerNvmDataStore+0x1a>
 800b1da:	4b18      	ldr	r3, [pc, #96]	; (800b23c <LmHandlerNvmDataStore+0x70>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	b10b      	cbz	r3, 800b1e6 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800b1e2:	2001      	movs	r0, #1
 800b1e4:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	b00a      	add	sp, #40	; 0x28
 800b1ea:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800b1ec:	f004 fe32 	bl	800fe54 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800b1f0:	f110 0f02 	cmn.w	r0, #2
 800b1f4:	d012      	beq.n	800b21c <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800b1f6:	b9d0      	cbnz	r0, 800b22e <LmHandlerNvmDataStore+0x62>
 800b1f8:	4b10      	ldr	r3, [pc, #64]	; (800b23c <LmHandlerNvmDataStore+0x70>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	b1cb      	cbz	r3, 800b234 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 800b200:	2327      	movs	r3, #39	; 0x27
 800b202:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b206:	4668      	mov	r0, sp
 800b208:	f002 ff78 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800b20c:	4b0b      	ldr	r3, [pc, #44]	; (800b23c <LmHandlerNvmDataStore+0x70>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 800b216:	9801      	ldr	r0, [sp, #4]
 800b218:	4798      	blx	r3
 800b21a:	e001      	b.n	800b220 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800b21c:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800b220:	f004 fe28 	bl	800fe74 <NvmDataMgmtStoreEnd>
 800b224:	2800      	cmp	r0, #0
 800b226:	d0d7      	beq.n	800b1d8 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b228:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b22c:	e7db      	b.n	800b1e6 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b22e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b232:	e7f5      	b.n	800b220 <LmHandlerNvmDataStore+0x54>
 800b234:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b238:	e7f2      	b.n	800b220 <LmHandlerNvmDataStore+0x54>
 800b23a:	bf00      	nop
 800b23c:	20003370 	.word	0x20003370

0800b240 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800b240:	4b01      	ldr	r3, [pc, #4]	; (800b248 <LmhpComplianceIsInitialized+0x8>)
 800b242:	7818      	ldrb	r0, [r3, #0]
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	200033dc 	.word	0x200033dc

0800b24c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800b24c:	4b01      	ldr	r3, [pc, #4]	; (800b254 <LmhpComplianceIsTxPending+0x8>)
 800b24e:	7858      	ldrb	r0, [r3, #1]
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	200033dc 	.word	0x200033dc

0800b258 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800b258:	4770      	bx	lr

0800b25a <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800b25a:	4770      	bx	lr

0800b25c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800b25c:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <OnProcessTimer+0x18>)
 800b260:	7a9b      	ldrb	r3, [r3, #10]
 800b262:	b113      	cbz	r3, 800b26a <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800b264:	4b03      	ldr	r3, [pc, #12]	; (800b274 <OnProcessTimer+0x18>)
 800b266:	2201      	movs	r2, #1
 800b268:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800b26a:	4b03      	ldr	r3, [pc, #12]	; (800b278 <OnProcessTimer+0x1c>)
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	b103      	cbz	r3, 800b272 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 800b270:	4798      	blx	r3
    }
}
 800b272:	bd08      	pop	{r3, pc}
 800b274:	200033dc 	.word	0x200033dc
 800b278:	200000bc 	.word	0x200000bc

0800b27c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800b27c:	4b8c      	ldr	r3, [pc, #560]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 8205 	beq.w	800b690 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800b286:	78c3      	ldrb	r3, [r0, #3]
 800b288:	b90b      	cbnz	r3, 800b28e <LmhpComplianceOnMcpsIndication+0x12>
 800b28a:	7b83      	ldrb	r3, [r0, #14]
 800b28c:	b11b      	cbz	r3, 800b296 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800b28e:	4a88      	ldr	r2, [pc, #544]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b290:	8a13      	ldrh	r3, [r2, #16]
 800b292:	3301      	adds	r3, #1
 800b294:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800b296:	7b43      	ldrb	r3, [r0, #13]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 81f9 	beq.w	800b690 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800b29e:	78c3      	ldrb	r3, [r0, #3]
 800b2a0:	2be0      	cmp	r3, #224	; 0xe0
 800b2a2:	f040 81f5 	bne.w	800b690 <LmhpComplianceOnMcpsIndication+0x414>
{
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 800b2aa:	4b81      	ldr	r3, [pc, #516]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800b2b0:	6884      	ldr	r4, [r0, #8]
 800b2b2:	7823      	ldrb	r3, [r4, #0]
 800b2b4:	2b7f      	cmp	r3, #127	; 0x7f
 800b2b6:	f200 8093 	bhi.w	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
 800b2ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b2be:	0080      	.short	0x0080
 800b2c0:	00a2009d 	.word	0x00a2009d
 800b2c4:	00b200aa 	.word	0x00b200aa
 800b2c8:	00c600bf 	.word	0x00c600bf
 800b2cc:	00f000df 	.word	0x00f000df
 800b2d0:	0131011d 	.word	0x0131011d
 800b2d4:	00910091 	.word	0x00910091
 800b2d8:	00910091 	.word	0x00910091
 800b2dc:	00910091 	.word	0x00910091
 800b2e0:	00910091 	.word	0x00910091
 800b2e4:	00910091 	.word	0x00910091
 800b2e8:	00910091 	.word	0x00910091
 800b2ec:	00910091 	.word	0x00910091
 800b2f0:	00910091 	.word	0x00910091
 800b2f4:	00910091 	.word	0x00910091
 800b2f8:	00910091 	.word	0x00910091
 800b2fc:	01350091 	.word	0x01350091
 800b300:	0140013c 	.word	0x0140013c
 800b304:	00910091 	.word	0x00910091
 800b308:	00910091 	.word	0x00910091
 800b30c:	00910091 	.word	0x00910091
 800b310:	00910091 	.word	0x00910091
 800b314:	00910091 	.word	0x00910091
 800b318:	00910091 	.word	0x00910091
 800b31c:	00910091 	.word	0x00910091
 800b320:	00910091 	.word	0x00910091
 800b324:	00910091 	.word	0x00910091
 800b328:	00910091 	.word	0x00910091
 800b32c:	00910091 	.word	0x00910091
 800b330:	00910091 	.word	0x00910091
 800b334:	00910091 	.word	0x00910091
 800b338:	00910091 	.word	0x00910091
 800b33c:	00910091 	.word	0x00910091
 800b340:	00910091 	.word	0x00910091
 800b344:	00910091 	.word	0x00910091
 800b348:	00910091 	.word	0x00910091
 800b34c:	00910091 	.word	0x00910091
 800b350:	00910091 	.word	0x00910091
 800b354:	00910091 	.word	0x00910091
 800b358:	00910091 	.word	0x00910091
 800b35c:	00910091 	.word	0x00910091
 800b360:	00910091 	.word	0x00910091
 800b364:	00910091 	.word	0x00910091
 800b368:	00910091 	.word	0x00910091
 800b36c:	00910091 	.word	0x00910091
 800b370:	00910091 	.word	0x00910091
 800b374:	00910091 	.word	0x00910091
 800b378:	00910091 	.word	0x00910091
 800b37c:	00910091 	.word	0x00910091
 800b380:	00910091 	.word	0x00910091
 800b384:	00910091 	.word	0x00910091
 800b388:	00910091 	.word	0x00910091
 800b38c:	00910091 	.word	0x00910091
 800b390:	00910091 	.word	0x00910091
 800b394:	00910091 	.word	0x00910091
 800b398:	00910091 	.word	0x00910091
 800b39c:	00910091 	.word	0x00910091
 800b3a0:	00910091 	.word	0x00910091
 800b3a4:	00910091 	.word	0x00910091
 800b3a8:	00910091 	.word	0x00910091
 800b3ac:	00910091 	.word	0x00910091
 800b3b0:	00910091 	.word	0x00910091
 800b3b4:	00910091 	.word	0x00910091
 800b3b8:	016c014b 	.word	0x016c014b
 800b3bc:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800b3be:	4b3c      	ldr	r3, [pc, #240]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	7299      	strb	r1, [r3, #10]
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800b3ca:	68d8      	ldr	r0, [r3, #12]
 800b3cc:	7a9a      	ldrb	r2, [r3, #10]
 800b3ce:	1854      	adds	r4, r2, r1
 800b3d0:	729c      	strb	r4, [r3, #10]
 800b3d2:	2406      	movs	r4, #6
 800b3d4:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800b3d6:	68d8      	ldr	r0, [r3, #12]
 800b3d8:	7a9a      	ldrb	r2, [r3, #10]
 800b3da:	1854      	adds	r4, r2, r1
 800b3dc:	729c      	strb	r4, [r3, #10]
 800b3de:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800b3e0:	4b33      	ldr	r3, [pc, #204]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b3e2:	7a9b      	ldrb	r3, [r3, #10]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 814c 	beq.w	800b682 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 800b3ea:	4b32      	ldr	r3, [pc, #200]	; (800b4b4 <LmhpComplianceOnMcpsIndication+0x238>)
 800b3ec:	7a5b      	ldrb	r3, [r3, #9]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 813d 	beq.w	800b66e <LmhpComplianceOnMcpsIndication+0x3f2>
}
 800b3f4:	b016      	add	sp, #88	; 0x58
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 800b3f8:	4b2d      	ldr	r3, [pc, #180]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800b400:	e7ee      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 800b402:	4b2d      	ldr	r3, [pc, #180]	; (800b4b8 <LmhpComplianceOnMcpsIndication+0x23c>)
 800b404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0ea      	beq.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800b40a:	2101      	movs	r1, #1
 800b40c:	2002      	movs	r0, #2
 800b40e:	4798      	blx	r3
 800b410:	e7e6      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800b412:	7862      	ldrb	r2, [r4, #1]
 800b414:	4b26      	ldr	r3, [pc, #152]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b416:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800b420:	e7de      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 800b422:	2304      	movs	r3, #4
 800b424:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800b428:	7863      	ldrb	r3, [r4, #1]
 800b42a:	3b00      	subs	r3, #0
 800b42c:	bf18      	it	ne
 800b42e:	2301      	movne	r3, #1
 800b430:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800b434:	a801      	add	r0, sp, #4
 800b436:	f002 ffd5 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
                break;
 800b43a:	e7d1      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800b43c:	7860      	ldrb	r0, [r4, #1]
 800b43e:	3800      	subs	r0, #0
 800b440:	bf18      	it	ne
 800b442:	2001      	movne	r0, #1
 800b444:	f003 fc74 	bl	800ed30 <LoRaMacTestSetDutyCycleOn>
                break;
 800b448:	e7ca      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800b44a:	ad01      	add	r5, sp, #4
 800b44c:	4e1b      	ldr	r6, [pc, #108]	; (800b4bc <LmhpComplianceOnMcpsIndication+0x240>)
 800b44e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b452:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b456:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b45a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800b45e:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800b460:	2b0a      	cmp	r3, #10
 800b462:	d8bd      	bhi.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800b464:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x244>)
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	6852      	ldr	r2, [r2, #4]
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	d0b8      	beq.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800b46e:	a916      	add	r1, sp, #88	; 0x58
 800b470:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b474:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800b478:	4790      	blx	r2
                break;
 800b47a:	e7b1      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800b47c:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800b47e:	1e53      	subs	r3, r2, #1
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b01      	cmp	r3, #1
 800b484:	d8ac      	bhi.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800b486:	1e50      	subs	r0, r2, #1
 800b488:	bf18      	it	ne
 800b48a:	2001      	movne	r0, #1
 800b48c:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b48e:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800b490:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <LmhpComplianceOnMcpsIndication+0x244>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0a2      	beq.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800b49a:	4798      	blx	r3
 800b49c:	e7a0      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <LmhpComplianceOnMcpsIndication+0x234>)
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	7299      	strb	r1, [r3, #10]
 800b4a6:	2308      	movs	r3, #8
 800b4a8:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	e01b      	b.n	800b4e6 <LmhpComplianceOnMcpsIndication+0x26a>
 800b4ae:	bf00      	nop
 800b4b0:	200033dc 	.word	0x200033dc
 800b4b4:	20003414 	.word	0x20003414
 800b4b8:	200000bc 	.word	0x200000bc
 800b4bc:	0801595c 	.word	0x0801595c
 800b4c0:	200033d8 	.word	0x200033d8
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800b4c4:	6882      	ldr	r2, [r0, #8]
 800b4c6:	f101 0c01 	add.w	ip, r1, #1
 800b4ca:	5c52      	ldrb	r2, [r2, r1]
 800b4cc:	4971      	ldr	r1, [pc, #452]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b4ce:	68cd      	ldr	r5, [r1, #12]
 800b4d0:	7a8c      	ldrb	r4, [r1, #10]
 800b4d2:	f104 0e01 	add.w	lr, r4, #1
 800b4d6:	f881 e00a 	strb.w	lr, [r1, #10]
 800b4da:	3201      	adds	r2, #1
 800b4dc:	552a      	strb	r2, [r5, r4]
                     i++ )
 800b4de:	3301      	adds	r3, #1
 800b4e0:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800b4e2:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800b4e6:	4a6b      	ldr	r2, [pc, #428]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b4e8:	7a52      	ldrb	r2, [r2, #9]
 800b4ea:	7b04      	ldrb	r4, [r0, #12]
 800b4ec:	42a2      	cmp	r2, r4
 800b4ee:	bf28      	it	cs
 800b4f0:	4622      	movcs	r2, r4
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d8e6      	bhi.n	800b4c4 <LmhpComplianceOnMcpsIndication+0x248>
 800b4f6:	e773      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800b4f8:	4b66      	ldr	r3, [pc, #408]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b4fa:	68da      	ldr	r2, [r3, #12]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	7299      	strb	r1, [r3, #10]
 800b500:	2109      	movs	r1, #9
 800b502:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800b504:	8a18      	ldrh	r0, [r3, #16]
 800b506:	68d9      	ldr	r1, [r3, #12]
 800b508:	7a9a      	ldrb	r2, [r3, #10]
 800b50a:	1c54      	adds	r4, r2, #1
 800b50c:	729c      	strb	r4, [r3, #10]
 800b50e:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800b510:	8a1a      	ldrh	r2, [r3, #16]
 800b512:	68d8      	ldr	r0, [r3, #12]
 800b514:	7a99      	ldrb	r1, [r3, #10]
 800b516:	1c4c      	adds	r4, r1, #1
 800b518:	729c      	strb	r4, [r3, #10]
 800b51a:	0a13      	lsrs	r3, r2, #8
 800b51c:	5443      	strb	r3, [r0, r1]
                break;
 800b51e:	e75f      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 800b520:	4b5c      	ldr	r3, [pc, #368]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b522:	2200      	movs	r2, #0
 800b524:	821a      	strh	r2, [r3, #16]
                break;
 800b526:	e75b      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 800b528:	2305      	movs	r3, #5
 800b52a:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800b52e:	a801      	add	r0, sp, #4
 800b530:	f003 fa0c 	bl	800e94c <LoRaMacMlmeRequest>
                break;
 800b534:	e754      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 800b536:	4b58      	ldr	r3, [pc, #352]	; (800b698 <LmhpComplianceOnMcpsIndication+0x41c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	4798      	blx	r3
                break;
 800b53c:	e750      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800b53e:	7860      	ldrb	r0, [r4, #1]
 800b540:	4b54      	ldr	r3, [pc, #336]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b542:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800b544:	4b55      	ldr	r3, [pc, #340]	; (800b69c <LmhpComplianceOnMcpsIndication+0x420>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f43f af48 	beq.w	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800b550:	4798      	blx	r3
 800b552:	e745      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800b554:	7b03      	ldrb	r3, [r0, #12]
 800b556:	2b07      	cmp	r3, #7
 800b558:	f47f af42 	bne.w	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 800b55c:	2306      	movs	r3, #6
 800b55e:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800b562:	7863      	ldrb	r3, [r4, #1]
 800b564:	78a2      	ldrb	r2, [r4, #2]
 800b566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800b56a:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800b56e:	78e3      	ldrb	r3, [r4, #3]
 800b570:	7922      	ldrb	r2, [r4, #4]
 800b572:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800b576:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800b578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800b57c:	2264      	movs	r2, #100	; 0x64
 800b57e:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800b582:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800b584:	6883      	ldr	r3, [r0, #8]
 800b586:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800b58a:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800b58e:	a801      	add	r0, sp, #4
 800b590:	f003 f9dc 	bl	800e94c <LoRaMacMlmeRequest>
                break;
 800b594:	e724      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800b596:	233b      	movs	r3, #59	; 0x3b
 800b598:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800b5a2:	a80c      	add	r0, sp, #48	; 0x30
 800b5a4:	f002 ff1e 	bl	800e3e4 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 800b5a8:	4b3a      	ldr	r3, [pc, #232]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800b5b0:	e716      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800b5b2:	232a      	movs	r3, #42	; 0x2a
 800b5b4:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800b5b8:	a801      	add	r0, sp, #4
 800b5ba:	f002 fd9f 	bl	800e0fc <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800b5be:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800b5c0:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800b5c2:	4b34      	ldr	r3, [pc, #208]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b5c4:	68dc      	ldr	r4, [r3, #12]
 800b5c6:	7a98      	ldrb	r0, [r3, #10]
 800b5c8:	1c45      	adds	r5, r0, #1
 800b5ca:	729d      	strb	r5, [r3, #10]
 800b5cc:	257f      	movs	r5, #127	; 0x7f
 800b5ce:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800b5d0:	4832      	ldr	r0, [pc, #200]	; (800b69c <LmhpComplianceOnMcpsIndication+0x420>)
 800b5d2:	6800      	ldr	r0, [r0, #0]
 800b5d4:	68dd      	ldr	r5, [r3, #12]
 800b5d6:	7a9c      	ldrb	r4, [r3, #10]
 800b5d8:	1c66      	adds	r6, r4, #1
 800b5da:	729e      	strb	r6, [r3, #10]
 800b5dc:	78c6      	ldrb	r6, [r0, #3]
 800b5de:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800b5e0:	68dd      	ldr	r5, [r3, #12]
 800b5e2:	7a9c      	ldrb	r4, [r3, #10]
 800b5e4:	1c66      	adds	r6, r4, #1
 800b5e6:	729e      	strb	r6, [r3, #10]
 800b5e8:	7886      	ldrb	r6, [r0, #2]
 800b5ea:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800b5ec:	68dd      	ldr	r5, [r3, #12]
 800b5ee:	7a9c      	ldrb	r4, [r3, #10]
 800b5f0:	1c66      	adds	r6, r4, #1
 800b5f2:	729e      	strb	r6, [r3, #10]
 800b5f4:	7846      	ldrb	r6, [r0, #1]
 800b5f6:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800b5f8:	68dd      	ldr	r5, [r3, #12]
 800b5fa:	7a9c      	ldrb	r4, [r3, #10]
 800b5fc:	1c66      	adds	r6, r4, #1
 800b5fe:	729e      	strb	r6, [r3, #10]
 800b600:	7800      	ldrb	r0, [r0, #0]
 800b602:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800b604:	68dc      	ldr	r4, [r3, #12]
 800b606:	7a98      	ldrb	r0, [r3, #10]
 800b608:	1c45      	adds	r5, r0, #1
 800b60a:	729d      	strb	r5, [r3, #10]
 800b60c:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800b610:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800b612:	68dc      	ldr	r4, [r3, #12]
 800b614:	7a98      	ldrb	r0, [r3, #10]
 800b616:	1c45      	adds	r5, r0, #1
 800b618:	729d      	strb	r5, [r3, #10]
 800b61a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800b61e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800b620:	68dc      	ldr	r4, [r3, #12]
 800b622:	7a98      	ldrb	r0, [r3, #10]
 800b624:	1c45      	adds	r5, r0, #1
 800b626:	729d      	strb	r5, [r3, #10]
 800b628:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800b62c:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800b62e:	68dc      	ldr	r4, [r3, #12]
 800b630:	7a98      	ldrb	r0, [r3, #10]
 800b632:	1c45      	adds	r5, r0, #1
 800b634:	729d      	strb	r5, [r3, #10]
 800b636:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800b638:	68d8      	ldr	r0, [r3, #12]
 800b63a:	7a99      	ldrb	r1, [r3, #10]
 800b63c:	1c4c      	adds	r4, r1, #1
 800b63e:	729c      	strb	r4, [r3, #10]
 800b640:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800b644:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800b646:	68d8      	ldr	r0, [r3, #12]
 800b648:	7a99      	ldrb	r1, [r3, #10]
 800b64a:	1c4c      	adds	r4, r1, #1
 800b64c:	729c      	strb	r4, [r3, #10]
 800b64e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b652:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800b654:	68d8      	ldr	r0, [r3, #12]
 800b656:	7a99      	ldrb	r1, [r3, #10]
 800b658:	1c4c      	adds	r4, r1, #1
 800b65a:	729c      	strb	r4, [r3, #10]
 800b65c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800b660:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800b662:	68d8      	ldr	r0, [r3, #12]
 800b664:	7a99      	ldrb	r1, [r3, #10]
 800b666:	1c4c      	adds	r4, r1, #1
 800b668:	729c      	strb	r4, [r3, #10]
 800b66a:	5442      	strb	r2, [r0, r1]
                break;
 800b66c:	e6b8      	b.n	800b3e0 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800b66e:	4c0c      	ldr	r4, [pc, #48]	; (800b6a0 <LmhpComplianceOnMcpsIndication+0x424>)
 800b670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b674:	4620      	mov	r0, r4
 800b676:	f009 fed9 	bl	801542c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800b67a:	4620      	mov	r0, r4
 800b67c:	f009 fe90 	bl	80153a0 <UTIL_TIMER_Start>
 800b680:	e6b8      	b.n	800b3f4 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800b682:	4807      	ldr	r0, [pc, #28]	; (800b6a0 <LmhpComplianceOnMcpsIndication+0x424>)
 800b684:	f009 fe32 	bl	80152ec <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <LmhpComplianceOnMcpsIndication+0x418>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	705a      	strb	r2, [r3, #1]
 800b68e:	e6b1      	b.n	800b3f4 <LmhpComplianceOnMcpsIndication+0x178>
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	200033dc 	.word	0x200033dc
 800b698:	200000bc 	.word	0x200000bc
 800b69c:	200033d8 	.word	0x200033d8
 800b6a0:	20003414 	.word	0x20003414

0800b6a4 <LmhpComplianceProcess>:
{
 800b6a4:	b530      	push	{r4, r5, lr}
 800b6a6:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800b6a8:	4b27      	ldr	r3, [pc, #156]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	b993      	cbnz	r3, 800b6d4 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800b6ae:	4b26      	ldr	r3, [pc, #152]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d13d      	bne.n	800b734 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 800b6b8:	4b23      	ldr	r3, [pc, #140]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6be:	b13b      	cbz	r3, 800b6d0 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800b6c0:	4b21      	ldr	r3, [pc, #132]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 800b6c8:	4b20      	ldr	r3, [pc, #128]	; (800b74c <LmhpComplianceProcess+0xa8>)
 800b6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6cc:	b103      	cbz	r3, 800b6d0 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800b6ce:	4798      	blx	r3
}
 800b6d0:	b003      	add	sp, #12
 800b6d2:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800b6d4:	f009 fdca 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 800b6d8:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800b6da:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6dc:	685d      	ldr	r5, [r3, #4]
 800b6de:	f7ff f9a3 	bl	800aa28 <LmHandlerGetDutyCycleWaitTime>
 800b6e2:	4405      	add	r5, r0
 800b6e4:	42a5      	cmp	r5, r4
 800b6e6:	d2e7      	bcs.n	800b6b8 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800b6e8:	4b17      	ldr	r3, [pc, #92]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6ea:	7a9b      	ldrb	r3, [r3, #10]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0e3      	beq.n	800b6b8 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 800b6f0:	22e0      	movs	r2, #224	; 0xe0
 800b6f2:	f88d 2000 	strb.w	r2, [sp]
 800b6f6:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800b6fa:	4b13      	ldr	r3, [pc, #76]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b6fc:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 800b6fe:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800b700:	2201      	movs	r2, #1
 800b702:	7a19      	ldrb	r1, [r3, #8]
 800b704:	4668      	mov	r0, sp
 800b706:	f7ff f9bd 	bl	800aa84 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800b70a:	b110      	cbz	r0, 800b712 <LmhpComplianceProcess+0x6e>
 800b70c:	f110 0f07 	cmn.w	r0, #7
 800b710:	d106      	bne.n	800b720 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b714:	2200      	movs	r2, #0
 800b716:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800b718:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800b71a:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b71c:	605c      	str	r4, [r3, #4]
 800b71e:	e7cb      	b.n	800b6b8 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 800b720:	4d0b      	ldr	r5, [pc, #44]	; (800b750 <LmhpComplianceProcess+0xac>)
 800b722:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800b726:	4628      	mov	r0, r5
 800b728:	f009 fe80 	bl	801542c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800b72c:	4628      	mov	r0, r5
 800b72e:	f009 fe37 	bl	80153a0 <UTIL_TIMER_Start>
 800b732:	e7f2      	b.n	800b71a <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 800b734:	4b04      	ldr	r3, [pc, #16]	; (800b748 <LmhpComplianceProcess+0xa4>)
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800b73c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800b740:	f7ff fa4a 	bl	800abd8 <LmHandlerRequestClass>
 800b744:	e7b8      	b.n	800b6b8 <LmhpComplianceProcess+0x14>
 800b746:	bf00      	nop
 800b748:	200033dc 	.word	0x200033dc
 800b74c:	200000bc 	.word	0x200000bc
 800b750:	20003414 	.word	0x20003414

0800b754 <LmhpComplianceInit>:
{
 800b754:	b530      	push	{r4, r5, lr}
 800b756:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800b758:	b188      	cbz	r0, 800b77e <LmhpComplianceInit+0x2a>
 800b75a:	4603      	mov	r3, r0
 800b75c:	b179      	cbz	r1, 800b77e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800b75e:	4813      	ldr	r0, [pc, #76]	; (800b7ac <LmhpComplianceInit+0x58>)
 800b760:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <LmhpComplianceInit+0x5c>)
 800b764:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800b766:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800b768:	2201      	movs	r2, #1
 800b76a:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800b76c:	2200      	movs	r2, #0
 800b76e:	9200      	str	r2, [sp, #0]
 800b770:	4b10      	ldr	r3, [pc, #64]	; (800b7b4 <LmhpComplianceInit+0x60>)
 800b772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b776:	4810      	ldr	r0, [pc, #64]	; (800b7b8 <LmhpComplianceInit+0x64>)
 800b778:	f009 fd5a 	bl	8015230 <UTIL_TIMER_Create>
 800b77c:	e004      	b.n	800b788 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800b77e:	2300      	movs	r3, #0
 800b780:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <LmhpComplianceInit+0x58>)
 800b782:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800b784:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <LmhpComplianceInit+0x5c>)
 800b786:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800b788:	4c09      	ldr	r4, [pc, #36]	; (800b7b0 <LmhpComplianceInit+0x5c>)
 800b78a:	2500      	movs	r5, #0
 800b78c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800b78e:	2220      	movs	r2, #32
 800b790:	4629      	mov	r1, r5
 800b792:	f104 0014 	add.w	r0, r4, #20
 800b796:	f007 fc6c 	bl	8013072 <memset1>
    ComplianceTestState.IsTxPending = false;
 800b79a:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800b79c:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800b79e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800b7a2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800b7a6:	b003      	add	sp, #12
 800b7a8:	bd30      	pop	{r4, r5, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200033d8 	.word	0x200033d8
 800b7b0:	200033dc 	.word	0x200033dc
 800b7b4:	0800b25d 	.word	0x0800b25d
 800b7b8:	20003414 	.word	0x20003414

0800b7bc <LmhpCompliancePackageFactory>:
}
 800b7bc:	4800      	ldr	r0, [pc, #0]	; (800b7c0 <LmhpCompliancePackageFactory+0x4>)
 800b7be:	4770      	bx	lr
 800b7c0:	200000bc 	.word	0x200000bc

0800b7c4 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	4770      	bx	lr

0800b7c8 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <UpdateRxSlotIdleState+0x20>)
 800b7d2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d004      	beq.n	800b7e4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800b7da:	4b06      	ldr	r3, [pc, #24]	; (800b7f4 <UpdateRxSlotIdleState+0x24>)
 800b7dc:	2206      	movs	r2, #6
 800b7de:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800b7e2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <UpdateRxSlotIdleState+0x24>)
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	20008000 	.word	0x20008000
 800b7f4:	20003430 	.word	0x20003430

0800b7f8 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800b7f8:	4b01      	ldr	r3, [pc, #4]	; (800b800 <LoRaMacEnableRequests+0x8>)
 800b7fa:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 800b7fe:	4770      	bx	lr
 800b800:	20003430 	.word	0x20003430

0800b804 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800b804:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b806:	4b15      	ldr	r3, [pc, #84]	; (800b85c <LoRaMacHandleIndicationEvents+0x58>)
 800b808:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b80c:	f013 0f08 	tst.w	r3, #8
 800b810:	d00e      	beq.n	800b830 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b812:	4812      	ldr	r0, [pc, #72]	; (800b85c <LoRaMacHandleIndicationEvents+0x58>)
 800b814:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800b818:	f36f 03c3 	bfc	r3, #3, #1
 800b81c:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b820:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800b82a:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 800b82e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <LoRaMacHandleIndicationEvents+0x58>)
 800b832:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b836:	f013 0f02 	tst.w	r3, #2
 800b83a:	d00e      	beq.n	800b85a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b83c:	4807      	ldr	r0, [pc, #28]	; (800b85c <LoRaMacHandleIndicationEvents+0x58>)
 800b83e:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800b842:	f36f 0341 	bfc	r3, #1, #1
 800b846:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b84a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800b854:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800b858:	4798      	blx	r3
    }
}
 800b85a:	bd08      	pop	{r3, pc}
 800b85c:	20003430 	.word	0x20003430

0800b860 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800b860:	b110      	cbz	r0, 800b868 <CheckForMinimumAbpDatarate+0x8>
 800b862:	2901      	cmp	r1, #1
 800b864:	d001      	beq.n	800b86a <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800b866:	2000      	movs	r0, #0
}
 800b868:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	d0fc      	beq.n	800b868 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800b86e:	2000      	movs	r0, #0
 800b870:	4770      	bx	lr
	...

0800b874 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <LoRaMacCheckForRxAbort+0x20>)
 800b876:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b87a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b87e:	d008      	beq.n	800b892 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b880:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b884:	4a03      	ldr	r2, [pc, #12]	; (800b894 <LoRaMacCheckForRxAbort+0x20>)
 800b886:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b88a:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800b88e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800b892:	4770      	bx	lr
 800b894:	20003430 	.word	0x20003430

0800b898 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800b898:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <CalculateBackOff+0x1c>)
 800b89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89c:	b94b      	cbnz	r3, 800b8b2 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800b89e:	4a05      	ldr	r2, [pc, #20]	; (800b8b4 <CalculateBackOff+0x1c>)
 800b8a0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800b8a4:	4904      	ldr	r1, [pc, #16]	; (800b8b8 <CalculateBackOff+0x20>)
 800b8a6:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	fb01 f303 	mul.w	r3, r1, r3
 800b8b0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800b8b2:	4770      	bx	lr
 800b8b4:	20008000 	.word	0x20008000
 800b8b8:	20003430 	.word	0x20003430

0800b8bc <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800b8bc:	b508      	push	{r3, lr}
 800b8be:	4684      	mov	ip, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b8c4:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <SetTxContinuousWave+0x24>)
 800b8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c8:	4662      	mov	r2, ip
 800b8ca:	b249      	sxtb	r1, r1
 800b8cc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b8ce:	4a05      	ldr	r2, [pc, #20]	; (800b8e4 <SetTxContinuousWave+0x28>)
 800b8d0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800b8d4:	f043 0302 	orr.w	r3, r3, #2
 800b8d8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b8dc:	2000      	movs	r0, #0
 800b8de:	bd08      	pop	{r3, pc}
 800b8e0:	08016960 	.word	0x08016960
 800b8e4:	20003430 	.word	0x20003430

0800b8e8 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	b1f8      	cbz	r0, 800b92c <DetermineFrameType+0x44>
 800b8ec:	b301      	cbz	r1, 800b930 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800b8ee:	7b03      	ldrb	r3, [r0, #12]
 800b8f0:	f013 030f 	ands.w	r3, r3, #15
 800b8f4:	d005      	beq.n	800b902 <DetermineFrameType+0x1a>
 800b8f6:	f890 0020 	ldrb.w	r0, [r0, #32]
 800b8fa:	b110      	cbz	r0, 800b902 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	7008      	strb	r0, [r1, #0]
 800b900:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800b902:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800b906:	b910      	cbnz	r0, 800b90e <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800b908:	2301      	movs	r3, #1
 800b90a:	700b      	strb	r3, [r1, #0]
 800b90c:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800b90e:	b92b      	cbnz	r3, 800b91c <DetermineFrameType+0x34>
 800b910:	f892 0020 	ldrb.w	r0, [r2, #32]
 800b914:	b910      	cbnz	r0, 800b91c <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800b916:	2302      	movs	r3, #2
 800b918:	700b      	strb	r3, [r1, #0]
 800b91a:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800b91c:	b953      	cbnz	r3, 800b934 <DetermineFrameType+0x4c>
 800b91e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b922:	b14a      	cbz	r2, 800b938 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800b924:	2203      	movs	r2, #3
 800b926:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800b928:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800b92a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b92c:	2003      	movs	r0, #3
 800b92e:	4770      	bx	lr
 800b930:	2003      	movs	r0, #3
 800b932:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800b934:	2018      	movs	r0, #24
 800b936:	4770      	bx	lr
 800b938:	2018      	movs	r0, #24
}
 800b93a:	4770      	bx	lr

0800b93c <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800b93c:	4288      	cmp	r0, r1
 800b93e:	d201      	bcs.n	800b944 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800b940:	2000      	movs	r0, #0
 800b942:	4770      	bx	lr
        return true;
 800b944:	2001      	movs	r0, #1
}
 800b946:	4770      	bx	lr

0800b948 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800b948:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b94a:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <CheckRetransUnconfirmedUplink+0x30>)
 800b94c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800b950:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <CheckRetransUnconfirmedUplink+0x34>)
 800b952:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800b956:	f7ff fff1 	bl	800b93c <CheckRetrans>
 800b95a:	b950      	cbnz	r0, 800b972 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b95c:	4b07      	ldr	r3, [pc, #28]	; (800b97c <CheckRetransUnconfirmedUplink+0x34>)
 800b95e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b962:	f013 0f02 	tst.w	r3, #2
 800b966:	d004      	beq.n	800b972 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b968:	4b04      	ldr	r3, [pc, #16]	; (800b97c <CheckRetransUnconfirmedUplink+0x34>)
 800b96a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d900      	bls.n	800b974 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800b972:	bd08      	pop	{r3, pc}
            return true;
 800b974:	2001      	movs	r0, #1
 800b976:	e7fc      	b.n	800b972 <CheckRetransUnconfirmedUplink+0x2a>
 800b978:	20008000 	.word	0x20008000
 800b97c:	20003430 	.word	0x20003430

0800b980 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800b980:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800b982:	4b09      	ldr	r3, [pc, #36]	; (800b9a8 <CheckRetransConfirmedUplink+0x28>)
 800b984:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800b988:	4b08      	ldr	r3, [pc, #32]	; (800b9ac <CheckRetransConfirmedUplink+0x2c>)
 800b98a:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800b98e:	f7ff ffd5 	bl	800b93c <CheckRetrans>
 800b992:	b940      	cbnz	r0, 800b9a6 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b994:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <CheckRetransConfirmedUplink+0x2c>)
 800b996:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b99a:	f013 0f02 	tst.w	r3, #2
 800b99e:	d002      	beq.n	800b9a6 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800b9a0:	4b02      	ldr	r3, [pc, #8]	; (800b9ac <CheckRetransConfirmedUplink+0x2c>)
 800b9a2:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800b9a6:	bd08      	pop	{r3, pc}
 800b9a8:	20008000 	.word	0x20008000
 800b9ac:	20003430 	.word	0x20003430

0800b9b0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800b9b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b9b4:	d000      	beq.n	800b9b8 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800b9b6:	3001      	adds	r0, #1
    }
    return counter;
}
 800b9b8:	4770      	bx	lr
	...

0800b9bc <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800b9bc:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <StopRetransmission+0x4c>)
 800b9c0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b9c4:	f013 0f02 	tst.w	r3, #2
 800b9c8:	d004      	beq.n	800b9d4 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <StopRetransmission+0x4c>)
 800b9cc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d908      	bls.n	800b9e6 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ba0c <StopRetransmission+0x50>)
 800b9d6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b9da:	b123      	cbz	r3, 800b9e6 <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800b9dc:	4c0b      	ldr	r4, [pc, #44]	; (800ba0c <StopRetransmission+0x50>)
 800b9de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b9e0:	f7ff ffe6 	bl	800b9b0 <IncreaseAdrAckCounter>
 800b9e4:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800b9e6:	4b08      	ldr	r3, [pc, #32]	; (800ba08 <StopRetransmission+0x4c>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800b9ee:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800b9f2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b9f6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b9fa:	f022 0202 	bic.w	r2, r2, #2
 800b9fe:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800ba02:	2001      	movs	r0, #1
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	bf00      	nop
 800ba08:	20003430 	.word	0x20003430
 800ba0c:	20008000 	.word	0x20008000

0800ba10 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800ba10:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ba12:	4b04      	ldr	r3, [pc, #16]	; (800ba24 <OnMacProcessNotify+0x14>)
 800ba14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba18:	b113      	cbz	r3, 800ba20 <OnMacProcessNotify+0x10>
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	b103      	cbz	r3, 800ba20 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ba1e:	4798      	blx	r3
    }
}
 800ba20:	bd08      	pop	{r3, pc}
 800ba22:	bf00      	nop
 800ba24:	20003430 	.word	0x20003430

0800ba28 <OnRadioRxError>:
{
 800ba28:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800ba2a:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <OnRadioRxError+0x14>)
 800ba2c:	7813      	ldrb	r3, [r2, #0]
 800ba2e:	f043 0304 	orr.w	r3, r3, #4
 800ba32:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800ba34:	f7ff ffec 	bl	800ba10 <OnMacProcessNotify>
}
 800ba38:	bd08      	pop	{r3, pc}
 800ba3a:	bf00      	nop
 800ba3c:	2000342c 	.word	0x2000342c

0800ba40 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800ba40:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800ba42:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <CallNvmDataChangeCallback+0x14>)
 800ba44:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ba48:	b113      	cbz	r3, 800ba50 <CallNvmDataChangeCallback+0x10>
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	b103      	cbz	r3, 800ba50 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800ba4e:	4798      	blx	r3
    }
}
 800ba50:	bd08      	pop	{r3, pc}
 800ba52:	bf00      	nop
 800ba54:	20003430 	.word	0x20003430

0800ba58 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <IsRequestPending+0x14>)
 800ba5a:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 800ba5e:	f010 0005 	ands.w	r0, r0, #5
 800ba62:	d100      	bne.n	800ba66 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800ba64:	4770      	bx	lr
        return 1;
 800ba66:	2001      	movs	r0, #1
 800ba68:	e7fc      	b.n	800ba64 <IsRequestPending+0xc>
 800ba6a:	bf00      	nop
 800ba6c:	20003430 	.word	0x20003430

0800ba70 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800ba70:	b500      	push	{lr}
 800ba72:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ba74:	4b0d      	ldr	r3, [pc, #52]	; (800baac <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800ba76:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ba7a:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800ba7e:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ba82:	220d      	movs	r2, #13
 800ba84:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ba88:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ba8c:	b113      	cbz	r3, 800ba94 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ba8e:	230e      	movs	r3, #14
 800ba90:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba94:	a902      	add	r1, sp, #8
 800ba96:	4b05      	ldr	r3, [pc, #20]	; (800baac <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800ba98:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba9c:	f004 f9fe 	bl	800fe9c <RegionGetPhyParam>
 800baa0:	9001      	str	r0, [sp, #4]
}
 800baa2:	b2c0      	uxtb	r0, r0
 800baa4:	b005      	add	sp, #20
 800baa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800baaa:	bf00      	nop
 800baac:	20008000 	.word	0x20008000

0800bab0 <ValidatePayloadLength>:
{
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4605      	mov	r5, r0
 800bab4:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800bab6:	4608      	mov	r0, r1
 800bab8:	f7ff ffda 	bl	800ba70 <GetMaxAppPayloadWithoutFOptsLength>
 800babc:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800babe:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d303      	bcc.n	800bacc <ValidatePayloadLength+0x1c>
 800bac4:	2aff      	cmp	r2, #255	; 0xff
 800bac6:	d903      	bls.n	800bad0 <ValidatePayloadLength+0x20>
    return false;
 800bac8:	2000      	movs	r0, #0
 800baca:	e000      	b.n	800bace <ValidatePayloadLength+0x1e>
 800bacc:	2000      	movs	r0, #0
}
 800bace:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800bad0:	2001      	movs	r0, #1
 800bad2:	e7fc      	b.n	800bace <ValidatePayloadLength+0x1e>

0800bad4 <ProcessRadioTxDone>:
{
 800bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad6:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800bad8:	4b3b      	ldr	r3, [pc, #236]	; (800bbc8 <ProcessRadioTxDone+0xf4>)
 800bada:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d002      	beq.n	800bae8 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800bae2:	4b3a      	ldr	r3, [pc, #232]	; (800bbcc <ProcessRadioTxDone+0xf8>)
 800bae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bae8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800baec:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800baee:	f009 fbbd 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 800baf2:	4b37      	ldr	r3, [pc, #220]	; (800bbd0 <ProcessRadioTxDone+0xfc>)
 800baf4:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800baf6:	4c37      	ldr	r4, [pc, #220]	; (800bbd4 <ProcessRadioTxDone+0x100>)
 800baf8:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800bafc:	1a2d      	subs	r5, r5, r0
 800bafe:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800bb02:	4429      	add	r1, r5
 800bb04:	4630      	mov	r0, r6
 800bb06:	f009 fc91 	bl	801542c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f009 fc48 	bl	80153a0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800bb10:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800bb14:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800bb18:	4429      	add	r1, r5
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f009 fc86 	bl	801542c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800bb20:	4630      	mov	r0, r6
 800bb22:	f009 fc3d 	bl	80153a0 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb26:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800bb2a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d134      	bne.n	800bb9c <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bb32:	4b28      	ldr	r3, [pc, #160]	; (800bbd4 <ProcessRadioTxDone+0x100>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800bb3a:	4b25      	ldr	r3, [pc, #148]	; (800bbd0 <ProcessRadioTxDone+0xfc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4c22      	ldr	r4, [pc, #136]	; (800bbc8 <ProcessRadioTxDone+0xf4>)
 800bb40:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800bb42:	4f24      	ldr	r7, [pc, #144]	; (800bbd4 <ProcessRadioTxDone+0x100>)
 800bb44:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800bb48:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800bb4c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800bb4e:	ae0c      	add	r6, sp, #48	; 0x30
 800bb50:	4630      	mov	r0, r6
 800bb52:	f009 faff 	bl	8015154 <SysTimeGetMcuTime>
 800bb56:	ad02      	add	r5, sp, #8
 800bb58:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800bb62:	e896 0006 	ldmia.w	r6, {r1, r2}
 800bb66:	4628      	mov	r0, r5
 800bb68:	f009 fa91 	bl	801508e <SysTimeSub>
 800bb6c:	ab07      	add	r3, sp, #28
 800bb6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb72:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800bb76:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800bb7a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bb82:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800bb86:	b90b      	cbnz	r3, 800bb8c <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800bb88:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800bb8c:	a904      	add	r1, sp, #16
 800bb8e:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <ProcessRadioTxDone+0xf4>)
 800bb90:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb94:	f004 f99a 	bl	800fecc <RegionSetBandTxDone>
}
 800bb98:	b00f      	add	sp, #60	; 0x3c
 800bb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800bb9c:	2315      	movs	r3, #21
 800bb9e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bba2:	a90a      	add	r1, sp, #40	; 0x28
 800bba4:	4b08      	ldr	r3, [pc, #32]	; (800bbc8 <ProcessRadioTxDone+0xf4>)
 800bba6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bbaa:	f004 f977 	bl	800fe9c <RegionGetPhyParam>
 800bbae:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800bbb0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800bbb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bbb8:	4401      	add	r1, r0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f009 fc36 	bl	801542c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f009 fbed 	bl	80153a0 <UTIL_TIMER_Start>
 800bbc6:	e7b8      	b.n	800bb3a <ProcessRadioTxDone+0x66>
 800bbc8:	20008000 	.word	0x20008000
 800bbcc:	08016960 	.word	0x08016960
 800bbd0:	200039ec 	.word	0x200039ec
 800bbd4:	20003430 	.word	0x20003430

0800bbd8 <OnRetransmitTimeoutTimerEvent>:
{
 800bbd8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800bbda:	4c07      	ldr	r4, [pc, #28]	; (800bbf8 <OnRetransmitTimeoutTimerEvent+0x20>)
 800bbdc:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800bbe0:	f009 fb84 	bl	80152ec <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800bbe4:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800bbe8:	b113      	cbz	r3, 800bbf0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800bbea:	2201      	movs	r2, #1
 800bbec:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 800bbf0:	f7ff ff0e 	bl	800ba10 <OnMacProcessNotify>
}
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20003430 	.word	0x20003430

0800bbfc <PrepareRxDoneAbort>:
{
 800bbfc:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800bbfe:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <PrepareRxDoneAbort+0x3c>)
 800bc00:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800bc04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc08:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800bc0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800bc10:	b973      	cbnz	r3, 800bc30 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800bc12:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <PrepareRxDoneAbort+0x3c>)
 800bc14:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800bc18:	f042 0202 	orr.w	r2, r2, #2
 800bc1c:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	f042 0210 	orr.w	r2, r2, #16
 800bc26:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800bc2a:	f7ff fdd1 	bl	800b7d0 <UpdateRxSlotIdleState>
}
 800bc2e:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800bc30:	2000      	movs	r0, #0
 800bc32:	f7ff ffd1 	bl	800bbd8 <OnRetransmitTimeoutTimerEvent>
 800bc36:	e7ec      	b.n	800bc12 <PrepareRxDoneAbort+0x16>
 800bc38:	20003430 	.word	0x20003430

0800bc3c <LoRaMacCheckForBeaconAcquisition>:
{
 800bc3c:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800bc3e:	200b      	movs	r0, #11
 800bc40:	f003 fbb2 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800bc44:	b188      	cbz	r0, 800bc6a <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800bc48:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800bc4c:	f010 0f01 	tst.w	r0, #1
 800bc50:	d10d      	bne.n	800bc6e <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800bc52:	f010 0004 	ands.w	r0, r0, #4
 800bc56:	d009      	beq.n	800bc6c <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bc5e:	f023 0302 	bic.w	r3, r3, #2
 800bc62:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800bc66:	2001      	movs	r0, #1
 800bc68:	e000      	b.n	800bc6c <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800bc6a:	2000      	movs	r0, #0
}
 800bc6c:	bd08      	pop	{r3, pc}
    return 0x00;
 800bc6e:	2000      	movs	r0, #0
 800bc70:	e7fc      	b.n	800bc6c <LoRaMacCheckForBeaconAcquisition+0x30>
 800bc72:	bf00      	nop
 800bc74:	20003430 	.word	0x20003430

0800bc78 <GetFCntDown>:
{
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	9c04      	ldr	r4, [sp, #16]
 800bc7c:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800bc7e:	b1f2      	cbz	r2, 800bcbe <GetFCntDown+0x46>
 800bc80:	4694      	mov	ip, r2
 800bc82:	b1f4      	cbz	r4, 800bcc2 <GetFCntDown+0x4a>
 800bc84:	b1fd      	cbz	r5, 800bcc6 <GetFCntDown+0x4e>
    switch( addrID )
 800bc86:	b188      	cbz	r0, 800bcac <GetFCntDown+0x34>
 800bc88:	2801      	cmp	r0, #1
 800bc8a:	d11e      	bne.n	800bcca <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800bc8c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d002      	beq.n	800bc9a <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800bc94:	2303      	movs	r3, #3
 800bc96:	7023      	strb	r3, [r4, #0]
 800bc98:	e00a      	b.n	800bcb0 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800bc9a:	b121      	cbz	r1, 800bca6 <GetFCntDown+0x2e>
 800bc9c:	2903      	cmp	r1, #3
 800bc9e:	d002      	beq.n	800bca6 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800bca0:	2301      	movs	r3, #1
 800bca2:	7023      	strb	r3, [r4, #0]
 800bca4:	e004      	b.n	800bcb0 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800bca6:	2302      	movs	r3, #2
 800bca8:	7023      	strb	r3, [r4, #0]
 800bcaa:	e001      	b.n	800bcb0 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800bcac:	2304      	movs	r3, #4
 800bcae:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800bcb6:	7820      	ldrb	r0, [r4, #0]
 800bcb8:	f003 fda0 	bl	800f7fc <LoRaMacCryptoGetFCntDown>
}
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcbe:	2009      	movs	r0, #9
 800bcc0:	e7fc      	b.n	800bcbc <GetFCntDown+0x44>
 800bcc2:	2009      	movs	r0, #9
 800bcc4:	e7fa      	b.n	800bcbc <GetFCntDown+0x44>
 800bcc6:	2009      	movs	r0, #9
 800bcc8:	e7f8      	b.n	800bcbc <GetFCntDown+0x44>
    switch( addrID )
 800bcca:	2005      	movs	r0, #5
 800bccc:	e7f6      	b.n	800bcbc <GetFCntDown+0x44>

0800bcce <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800bcce:	2801      	cmp	r0, #1
 800bcd0:	d900      	bls.n	800bcd4 <RemoveMacCommands+0x6>
 800bcd2:	4770      	bx	lr
{
 800bcd4:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800bcd6:	2a01      	cmp	r2, #1
 800bcd8:	d105      	bne.n	800bce6 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800bcda:	f011 0f20 	tst.w	r1, #32
 800bcde:	d004      	beq.n	800bcea <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800bce0:	f003 fa0e 	bl	800f100 <LoRaMacCommandsRemoveStickyAnsCmds>
 800bce4:	e001      	b.n	800bcea <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800bce6:	f003 fa0b 	bl	800f100 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800bcea:	bd08      	pop	{r3, pc}

0800bcec <ProcessMacCommands>:
{
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	b08f      	sub	sp, #60	; 0x3c
 800bcf2:	4698      	mov	r8, r3
    uint8_t status = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bcfa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800bcfe:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	f200 82da 	bhi.w	800c2bc <ProcessMacCommands+0x5d0>
 800bd08:	4605      	mov	r5, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800bd0e:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800bd12:	42bc      	cmp	r4, r7
 800bd14:	f080 82d2 	bcs.w	800c2bc <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800bd18:	5d28      	ldrb	r0, [r5, r4]
 800bd1a:	f003 fa49 	bl	800f1b0 <LoRaMacCommandsGetCmdSize>
 800bd1e:	4420      	add	r0, r4
 800bd20:	42b8      	cmp	r0, r7
 800bd22:	f300 82cb 	bgt.w	800c2bc <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 800bd26:	1c66      	adds	r6, r4, #1
 800bd28:	b2f6      	uxtb	r6, r6
 800bd2a:	5d2b      	ldrb	r3, [r5, r4]
 800bd2c:	3b02      	subs	r3, #2
 800bd2e:	2b11      	cmp	r3, #17
 800bd30:	f200 82c4 	bhi.w	800c2bc <ProcessMacCommands+0x5d0>
 800bd34:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bd38:	00280012 	.word	0x00280012
 800bd3c:	00c000ad 	.word	0x00c000ad
 800bd40:	011e0106 	.word	0x011e0106
 800bd44:	01740157 	.word	0x01740157
 800bd48:	02c201c0 	.word	0x02c201c0
 800bd4c:	01f002c2 	.word	0x01f002c2
 800bd50:	02c202c2 	.word	0x02c202c2
 800bd54:	02690252 	.word	0x02690252
 800bd58:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800bd5c:	2005      	movs	r0, #5
 800bd5e:	f003 fb23 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800bd62:	b908      	cbnz	r0, 800bd68 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800bd64:	4634      	mov	r4, r6
 800bd66:	e7d4      	b.n	800bd12 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800bd68:	2105      	movs	r1, #5
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	f003 fad0 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800bd70:	1ca3      	adds	r3, r4, #2
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	5da9      	ldrb	r1, [r5, r6]
 800bd76:	4aa7      	ldr	r2, [pc, #668]	; (800c014 <ProcessMacCommands+0x328>)
 800bd78:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800bd7c:	3403      	adds	r4, #3
 800bd7e:	b2e4      	uxtb	r4, r4
 800bd80:	5ceb      	ldrb	r3, [r5, r3]
 800bd82:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800bd86:	e7c4      	b.n	800bd12 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800bd8e:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800bd92:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800bd96:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	d036      	beq.n	800be0e <ProcessMacCommands+0x122>
                    macIndex += 4;
 800bda0:	3405      	adds	r4, #5
 800bda2:	b2e4      	uxtb	r4, r4
 800bda4:	e7b5      	b.n	800bd12 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800bda6:	2305      	movs	r3, #5
 800bda8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800bdac:	e050      	b.n	800be50 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800bdae:	4b9a      	ldr	r3, [pc, #616]	; (800c018 <ProcessMacCommands+0x32c>)
 800bdb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800bdb4:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	da03      	bge.n	800bdc4 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800bdbc:	4b96      	ldr	r3, [pc, #600]	; (800c018 <ProcessMacCommands+0x32c>)
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800bdc4:	4b94      	ldr	r3, [pc, #592]	; (800c018 <ProcessMacCommands+0x32c>)
 800bdc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800bdca:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800bdce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800bdd2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800bdd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800bdda:	e04d      	b.n	800be78 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800bddc:	2201      	movs	r2, #1
 800bdde:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800bde2:	2003      	movs	r0, #3
 800bde4:	f003 f918 	bl	800f018 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800bde8:	3401      	adds	r4, #1
 800bdea:	b2e4      	uxtb	r4, r4
 800bdec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bdf0:	498a      	ldr	r1, [pc, #552]	; (800c01c <ProcessMacCommands+0x330>)
 800bdf2:	fba1 2103 	umull	r2, r1, r1, r3
 800bdf6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800bdfa:	d3ef      	bcc.n	800bddc <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800bdfc:	4433      	add	r3, r6
 800bdfe:	b2de      	uxtb	r6, r3
 800be00:	1e74      	subs	r4, r6, #1
 800be02:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800be04:	42a7      	cmp	r7, r4
 800be06:	d93a      	bls.n	800be7e <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800be08:	5d2b      	ldrb	r3, [r5, r4]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d136      	bne.n	800be7c <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800be0e:	1e73      	subs	r3, r6, #1
 800be10:	442b      	add	r3, r5
 800be12:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800be14:	4b80      	ldr	r3, [pc, #512]	; (800c018 <ProcessMacCommands+0x32c>)
 800be16:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800be1a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800be1e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800be22:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800be26:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800be2a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800be2e:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800be32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800be36:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800be3a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800be3e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800be42:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800be44:	2a00      	cmp	r2, #0
 800be46:	d0ae      	beq.n	800bda6 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800be48:	1bbb      	subs	r3, r7, r6
 800be4a:	3301      	adds	r3, #1
 800be4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800be50:	ab05      	add	r3, sp, #20
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	ab03      	add	r3, sp, #12
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	f10d 030b 	add.w	r3, sp, #11
 800be5c:	f10d 020a 	add.w	r2, sp, #10
 800be60:	a907      	add	r1, sp, #28
 800be62:	486d      	ldr	r0, [pc, #436]	; (800c018 <ProcessMacCommands+0x32c>)
 800be64:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800be68:	f004 f8b0 	bl	800ffcc <RegionLinkAdrReq>
 800be6c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800be70:	f000 0007 	and.w	r0, r0, #7
 800be74:	2807      	cmp	r0, #7
 800be76:	d09a      	beq.n	800bdae <ProcessMacCommands+0xc2>
{
 800be78:	2400      	movs	r4, #0
 800be7a:	e7b7      	b.n	800bdec <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800be7c:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800be7e:	42bc      	cmp	r4, r7
 800be80:	d204      	bcs.n	800be8c <ProcessMacCommands+0x1a0>
                        macIndex--;
 800be82:	3c01      	subs	r4, #1
 800be84:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800be86:	f04f 0901 	mov.w	r9, #1
 800be8a:	e742      	b.n	800bd12 <ProcessMacCommands+0x26>
 800be8c:	f04f 0901 	mov.w	r9, #1
                break;
 800be90:	e73f      	b.n	800bd12 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800be92:	3402      	adds	r4, #2
 800be94:	b2e4      	uxtb	r4, r4
 800be96:	5dab      	ldrb	r3, [r5, r6]
 800be98:	f003 030f 	and.w	r3, r3, #15
 800be9c:	495e      	ldr	r1, [pc, #376]	; (800c018 <ProcessMacCommands+0x32c>)
 800be9e:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800bea2:	2201      	movs	r2, #1
 800bea4:	fa02 f303 	lsl.w	r3, r2, r3
 800bea8:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800beac:	2200      	movs	r2, #0
 800beae:	a90b      	add	r1, sp, #44	; 0x2c
 800beb0:	2004      	movs	r0, #4
 800beb2:	f003 f8b1 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800beb6:	e72c      	b.n	800bd12 <ProcessMacCommands+0x26>
                status = 0x07;
 800beb8:	2307      	movs	r3, #7
 800beba:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800bebe:	5dab      	ldrb	r3, [r5, r6]
 800bec0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bec4:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800bec8:	57ab      	ldrsb	r3, [r5, r6]
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800bed2:	1ca3      	adds	r3, r4, #2
 800bed4:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800bed6:	1ce1      	adds	r1, r4, #3
 800bed8:	b2c9      	uxtb	r1, r1
 800beda:	5ceb      	ldrb	r3, [r5, r3]
 800bedc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bede:	1d22      	adds	r2, r4, #4
 800bee0:	b2d2      	uxtb	r2, r2
 800bee2:	5c69      	ldrb	r1, [r5, r1]
 800bee4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bee8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800beea:	3405      	adds	r4, #5
 800beec:	b2e4      	uxtb	r4, r4
 800beee:	5caa      	ldrb	r2, [r5, r2]
 800bef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bef4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800bef6:	2264      	movs	r2, #100	; 0x64
 800bef8:	fb02 f303 	mul.w	r3, r2, r3
 800befc:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800befe:	a907      	add	r1, sp, #28
 800bf00:	4b45      	ldr	r3, [pc, #276]	; (800c018 <ProcessMacCommands+0x32c>)
 800bf02:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf06:	f004 f87d 	bl	8010004 <RegionRxParamSetupReq>
 800bf0a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800bf0e:	f000 0307 	and.w	r3, r0, #7
 800bf12:	2b07      	cmp	r3, #7
 800bf14:	d007      	beq.n	800bf26 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800bf16:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	a90b      	add	r1, sp, #44	; 0x2c
 800bf1e:	2005      	movs	r0, #5
 800bf20:	f003 f87a 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800bf24:	e6f5      	b.n	800bd12 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800bf26:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800bf2a:	4b3b      	ldr	r3, [pc, #236]	; (800c018 <ProcessMacCommands+0x32c>)
 800bf2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800bf30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800bf34:	9a08      	ldr	r2, [sp, #32]
 800bf36:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800bf38:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800bf3a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800bf3e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800bf42:	e7e8      	b.n	800bf16 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800bf44:	4b33      	ldr	r3, [pc, #204]	; (800c014 <ProcessMacCommands+0x328>)
 800bf46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800bf4a:	b17b      	cbz	r3, 800bf6c <ProcessMacCommands+0x280>
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	b17b      	cbz	r3, 800bf70 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800bf50:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800bf52:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800bf56:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800bf5a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800bf5e:	2202      	movs	r2, #2
 800bf60:	a90b      	add	r1, sp, #44	; 0x2c
 800bf62:	2006      	movs	r0, #6
 800bf64:	f003 f858 	bl	800f018 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800bf68:	4634      	mov	r4, r6
                break;
 800bf6a:	e6d2      	b.n	800bd12 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800bf6c:	20ff      	movs	r0, #255	; 0xff
 800bf6e:	e7f0      	b.n	800bf52 <ProcessMacCommands+0x266>
 800bf70:	20ff      	movs	r0, #255	; 0xff
 800bf72:	e7ee      	b.n	800bf52 <ProcessMacCommands+0x266>
                status = 0x03;
 800bf74:	2303      	movs	r3, #3
 800bf76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800bf7a:	1ca3      	adds	r3, r4, #2
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	57aa      	ldrsb	r2, [r5, r6]
 800bf80:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800bf84:	aa07      	add	r2, sp, #28
 800bf86:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800bf88:	1ce2      	adds	r2, r4, #3
 800bf8a:	b2d2      	uxtb	r2, r2
 800bf8c:	5ceb      	ldrb	r3, [r5, r3]
 800bf8e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800bf90:	1d21      	adds	r1, r4, #4
 800bf92:	b2c9      	uxtb	r1, r1
 800bf94:	5caa      	ldrb	r2, [r5, r2]
 800bf96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf9a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800bf9c:	1d62      	adds	r2, r4, #5
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	5c69      	ldrb	r1, [r5, r1]
 800bfa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bfa6:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800bfa8:	2164      	movs	r1, #100	; 0x64
 800bfaa:	fb01 f303 	mul.w	r3, r1, r3
 800bfae:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800bfb4:	3406      	adds	r4, #6
 800bfb6:	b2e4      	uxtb	r4, r4
 800bfb8:	56ab      	ldrsb	r3, [r5, r2]
 800bfba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800bfbe:	a905      	add	r1, sp, #20
 800bfc0:	4b15      	ldr	r3, [pc, #84]	; (800c018 <ProcessMacCommands+0x32c>)
 800bfc2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bfc6:	f004 f82c 	bl	8010022 <RegionNewChannelReq>
 800bfca:	b2c3      	uxtb	r3, r0
 800bfcc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f6ff ae9e 	blt.w	800bd12 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800bfd6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800bfda:	2201      	movs	r2, #1
 800bfdc:	a90b      	add	r1, sp, #44	; 0x2c
 800bfde:	2007      	movs	r0, #7
 800bfe0:	f003 f81a 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800bfe4:	e695      	b.n	800bd12 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800bfe6:	3402      	adds	r4, #2
 800bfe8:	b2e4      	uxtb	r4, r4
 800bfea:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800bfec:	f013 030f 	ands.w	r3, r3, #15
 800bff0:	d100      	bne.n	800bff4 <ProcessMacCommands+0x308>
                    delay++;
 800bff2:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800bff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
 800bffc:	4a06      	ldr	r2, [pc, #24]	; (800c018 <ProcessMacCommands+0x32c>)
 800bffe:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c000:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c004:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c006:	2200      	movs	r2, #0
 800c008:	a90b      	add	r1, sp, #44	; 0x2c
 800c00a:	2008      	movs	r0, #8
 800c00c:	f003 f804 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800c010:	e67f      	b.n	800bd12 <ProcessMacCommands+0x26>
 800c012:	bf00      	nop
 800c014:	20003430 	.word	0x20003430
 800c018:	20008000 	.word	0x20008000
 800c01c:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800c020:	3402      	adds	r4, #2
 800c022:	b2e4      	uxtb	r4, r4
 800c024:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800c026:	2200      	movs	r2, #0
 800c028:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c02c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c030:	f013 0f20 	tst.w	r3, #32
 800c034:	d002      	beq.n	800c03c <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c036:	2201      	movs	r2, #1
 800c038:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c03c:	f013 0f10 	tst.w	r3, #16
 800c040:	d002      	beq.n	800c048 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800c042:	2201      	movs	r2, #1
 800c044:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c048:	f003 030f 	and.w	r3, r3, #15
 800c04c:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c050:	a903      	add	r1, sp, #12
 800c052:	4b9c      	ldr	r3, [pc, #624]	; (800c2c4 <ProcessMacCommands+0x5d8>)
 800c054:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c058:	f003 fff2 	bl	8010040 <RegionTxParamSetupReq>
 800c05c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c060:	f43f ae57 	beq.w	800bd12 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c064:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800c068:	4e96      	ldr	r6, [pc, #600]	; (800c2c4 <ProcessMacCommands+0x5d8>)
 800c06a:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c06e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800c072:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c076:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c07a:	4a93      	ldr	r2, [pc, #588]	; (800c2c8 <ProcessMacCommands+0x5dc>)
 800c07c:	5cd0      	ldrb	r0, [r2, r3]
 800c07e:	f7f4 fba9 	bl	80007d4 <__aeabi_ui2f>
 800c082:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c086:	2302      	movs	r3, #2
 800c088:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c08c:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c090:	a907      	add	r1, sp, #28
 800c092:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c096:	f003 ff01 	bl	800fe9c <RegionGetPhyParam>
 800c09a:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c09c:	b240      	sxtb	r0, r0
 800c09e:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800c0a2:	4298      	cmp	r0, r3
 800c0a4:	bfb8      	it	lt
 800c0a6:	4618      	movlt	r0, r3
 800c0a8:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	a90b      	add	r1, sp, #44	; 0x2c
 800c0b0:	2009      	movs	r0, #9
 800c0b2:	f002 ffb1 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800c0b6:	e62c      	b.n	800bd12 <ProcessMacCommands+0x26>
                status = 0x03;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800c0be:	1ca3      	adds	r3, r4, #2
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	5daa      	ldrb	r2, [r5, r6]
 800c0c4:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c0c8:	1ce1      	adds	r1, r4, #3
 800c0ca:	b2c9      	uxtb	r1, r1
 800c0cc:	5ceb      	ldrb	r3, [r5, r3]
 800c0ce:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c0d0:	1d22      	adds	r2, r4, #4
 800c0d2:	b2d2      	uxtb	r2, r2
 800c0d4:	5c69      	ldrb	r1, [r5, r1]
 800c0d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c0da:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c0dc:	3405      	adds	r4, #5
 800c0de:	b2e4      	uxtb	r4, r4
 800c0e0:	5caa      	ldrb	r2, [r5, r2]
 800c0e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0e6:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800c0e8:	2264      	movs	r2, #100	; 0x64
 800c0ea:	fb02 f303 	mul.w	r3, r2, r3
 800c0ee:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c0f0:	a907      	add	r1, sp, #28
 800c0f2:	4b74      	ldr	r3, [pc, #464]	; (800c2c4 <ProcessMacCommands+0x5d8>)
 800c0f4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c0f8:	f003 ffb1 	bl	801005e <RegionDlChannelReq>
 800c0fc:	b2c3      	uxtb	r3, r0
 800c0fe:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800c102:	2800      	cmp	r0, #0
 800c104:	f6ff ae05 	blt.w	800bd12 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800c108:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c10c:	2201      	movs	r2, #1
 800c10e:	a90b      	add	r1, sp, #44	; 0x2c
 800c110:	200a      	movs	r0, #10
 800c112:	f002 ff81 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800c116:	e5fc      	b.n	800bd12 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c118:	2009      	movs	r0, #9
 800c11a:	f003 f945 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800c11e:	b928      	cbnz	r0, 800c12c <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c120:	4b6a      	ldr	r3, [pc, #424]	; (800c2cc <ProcessMacCommands+0x5e0>)
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800c128:	4634      	mov	r4, r6
 800c12a:	e5f2      	b.n	800bd12 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c12c:	2109      	movs	r1, #9
 800c12e:	2000      	movs	r0, #0
 800c130:	f003 f8ee 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800c134:	a903      	add	r1, sp, #12
 800c136:	2300      	movs	r3, #0
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800c13c:	f10d 0a14 	add.w	sl, sp, #20
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800c144:	f10d 0b1c 	add.w	fp, sp, #28
 800c148:	9307      	str	r3, [sp, #28]
 800c14a:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c14c:	1ca0      	adds	r0, r4, #2
 800c14e:	b2c0      	uxtb	r0, r0
 800c150:	5dab      	ldrb	r3, [r5, r6]
 800c152:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c154:	1ce2      	adds	r2, r4, #3
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	5c28      	ldrb	r0, [r5, r0]
 800c15a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c15e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c160:	1d20      	adds	r0, r4, #4
 800c162:	b2c0      	uxtb	r0, r0
 800c164:	5caa      	ldrb	r2, [r5, r2]
 800c166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c16a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c16c:	1d62      	adds	r2, r4, #5
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	5c28      	ldrb	r0, [r5, r0]
 800c172:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c176:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800c178:	3406      	adds	r4, #6
 800c17a:	b2e4      	uxtb	r4, r4
 800c17c:	5caa      	ldrb	r2, [r5, r2]
 800c17e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c186:	fb00 f202 	mul.w	r2, r0, r2
 800c18a:	0a12      	lsrs	r2, r2, #8
 800c18c:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800c190:	c903      	ldmia	r1, {r0, r1}
 800c192:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c196:	4a4e      	ldr	r2, [pc, #312]	; (800c2d0 <ProcessMacCommands+0x5e4>)
 800c198:	441a      	add	r2, r3
 800c19a:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800c19c:	4658      	mov	r0, fp
 800c19e:	f008 ffb7 	bl	8015110 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c1a2:	4e4a      	ldr	r6, [pc, #296]	; (800c2cc <ProcessMacCommands+0x5e0>)
 800c1a4:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800c1ae:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800c1b2:	a80c      	add	r0, sp, #48	; 0x30
 800c1b4:	f008 ff6b 	bl	801508e <SysTimeSub>
 800c1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1be:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800c1c2:	4650      	mov	r0, sl
 800c1c4:	f008 ff44 	bl	8015050 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800c1c8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c1cc:	f008 ff7e 	bl	80150cc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800c1d0:	f002 fe88 	bl	800eee4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800c1da:	e59a      	b.n	800bd12 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c1dc:	200c      	movs	r0, #12
 800c1de:	f003 f8e3 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800c1e2:	b908      	cbnz	r0, 800c1e8 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 800c1e4:	4634      	mov	r4, r6
 800c1e6:	e594      	b.n	800bd12 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c1e8:	210c      	movs	r1, #12
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f003 f890 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800c1f0:	4b36      	ldr	r3, [pc, #216]	; (800c2cc <ProcessMacCommands+0x5e0>)
 800c1f2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800c1f6:	3b04      	subs	r3, #4
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d801      	bhi.n	800c202 <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 800c1fe:	4634      	mov	r4, r6
 800c200:	e587      	b.n	800bd12 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800c202:	f002 fe6b 	bl	800eedc <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800c206:	4634      	mov	r4, r6
 800c208:	e583      	b.n	800bd12 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800c20a:	1ca2      	adds	r2, r4, #2
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c210:	1ce1      	adds	r1, r4, #3
 800c212:	b2c9      	uxtb	r1, r1
 800c214:	5caa      	ldrb	r2, [r5, r2]
 800c216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c21a:	1d22      	adds	r2, r4, #4
 800c21c:	b2d2      	uxtb	r2, r2
 800c21e:	5c69      	ldrb	r1, [r5, r1]
 800c220:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800c224:	3405      	adds	r4, #5
 800c226:	b2e4      	uxtb	r4, r4
 800c228:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c22a:	2164      	movs	r1, #100	; 0x64
 800c22c:	fb03 f101 	mul.w	r1, r3, r1
 800c230:	f000 000f 	and.w	r0, r0, #15
 800c234:	f002 fe53 	bl	800eede <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800c238:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800c23c:	2201      	movs	r2, #1
 800c23e:	a90b      	add	r1, sp, #44	; 0x2c
 800c240:	2011      	movs	r0, #17
 800c242:	f002 fee9 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800c246:	e564      	b.n	800bd12 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c248:	200d      	movs	r0, #13
 800c24a:	f003 f8ad 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800c24e:	b908      	cbnz	r0, 800c254 <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 800c250:	4634      	mov	r4, r6
 800c252:	e55e      	b.n	800bd12 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c254:	210d      	movs	r1, #13
 800c256:	2000      	movs	r0, #0
 800c258:	f003 f85a 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c25c:	1ca2      	adds	r2, r4, #2
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c262:	1ce3      	adds	r3, r4, #3
 800c264:	b2db      	uxtb	r3, r3
 800c266:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800c268:	3404      	adds	r4, #4
 800c26a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c26c:	4a19      	ldr	r2, [pc, #100]	; (800c2d4 <ProcessMacCommands+0x5e8>)
 800c26e:	6812      	ldr	r2, [r2, #0]
 800c270:	5ce9      	ldrb	r1, [r5, r3]
 800c272:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800c276:	f002 fe34 	bl	800eee2 <LoRaMacClassBBeaconTimingAns>
 800c27a:	e54a      	b.n	800bd12 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800c27c:	1ca1      	adds	r1, r4, #2
 800c27e:	b2c9      	uxtb	r1, r1
 800c280:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c282:	1ce2      	adds	r2, r4, #3
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	5c69      	ldrb	r1, [r5, r1]
 800c288:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c28c:	3404      	adds	r4, #4
 800c28e:	b2e4      	uxtb	r4, r4
 800c290:	5caa      	ldrb	r2, [r5, r2]
 800c292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800c296:	2064      	movs	r0, #100	; 0x64
 800c298:	fb03 f000 	mul.w	r0, r3, r0
 800c29c:	f002 fe23 	bl	800eee6 <LoRaMacClassBBeaconFreqReq>
 800c2a0:	b140      	cbz	r0, 800c2b4 <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	a90b      	add	r1, sp, #44	; 0x2c
 800c2ac:	2013      	movs	r0, #19
 800c2ae:	f002 feb3 	bl	800f018 <LoRaMacCommandsAddCmd>
                break;
 800c2b2:	e52e      	b.n	800bd12 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c2ba:	e7f5      	b.n	800c2a8 <ProcessMacCommands+0x5bc>
}
 800c2bc:	b00f      	add	sp, #60	; 0x3c
 800c2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20008000 	.word	0x20008000
 800c2c8:	08016288 	.word	0x08016288
 800c2cc:	20003430 	.word	0x20003430
 800c2d0:	12d53d80 	.word	0x12d53d80
 800c2d4:	200039dc 	.word	0x200039dc

0800c2d8 <ProcessRadioRxDone>:
{
 800c2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2dc:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800c2de:	4ba5      	ldr	r3, [pc, #660]	; (800c574 <ProcessRadioRxDone+0x29c>)
 800c2e0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800c2e2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800c2e4:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800c2e8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800c2f0:	4aa1      	ldr	r2, [pc, #644]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c2f2:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800c2f6:	4aa1      	ldr	r2, [pc, #644]	; (800c57c <ProcessRadioRxDone+0x2a4>)
 800c2f8:	7811      	ldrb	r1, [r2, #0]
 800c2fa:	f363 0100 	bfi	r1, r3, #0, #1
 800c2fe:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800c300:	4c9f      	ldr	r4, [pc, #636]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c302:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800c306:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800c30a:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800c30e:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800c312:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800c316:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800c31a:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800c31e:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800c322:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800c326:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800c32a:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800c32e:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800c332:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c336:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800c33a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c33e:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800c342:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800c346:	4b8f      	ldr	r3, [pc, #572]	; (800c584 <ProcessRadioRxDone+0x2ac>)
 800c348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34a:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800c34c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c350:	b1d3      	cbz	r3, 800c388 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800c352:	4629      	mov	r1, r5
 800c354:	4630      	mov	r0, r6
 800c356:	f002 fdae 	bl	800eeb6 <LoRaMacClassBRxBeacon>
 800c35a:	b9d0      	cbnz	r0, 800c392 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c35c:	4b86      	ldr	r3, [pc, #536]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c35e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c362:	2b01      	cmp	r3, #1
 800c364:	d01d      	beq.n	800c3a2 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800c366:	2d00      	cmp	r5, #0
 800c368:	d038      	beq.n	800c3dc <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800c36a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800c36c:	0963      	lsrs	r3, r4, #5
 800c36e:	3b01      	subs	r3, #1
 800c370:	2b06      	cmp	r3, #6
 800c372:	f200 82fd 	bhi.w	800c970 <ProcessRadioRxDone+0x698>
 800c376:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c37a:	0038      	.short	0x0038
 800c37c:	00d102fb 	.word	0x00d102fb
 800c380:	00cd02fb 	.word	0x00cd02fb
 800c384:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c388:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800c38c:	f008 ffae 	bl	80152ec <UTIL_TIMER_Stop>
 800c390:	e7df      	b.n	800c352 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800c392:	4b7b      	ldr	r3, [pc, #492]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c394:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800c398:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800c39c:	b025      	add	sp, #148	; 0x94
 800c39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800c3a2:	f002 fd8c 	bl	800eebe <LoRaMacClassBIsPingExpected>
 800c3a6:	b150      	cbz	r0, 800c3be <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	f002 fd7d 	bl	800eea8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	f002 fd7f 	bl	800eeb2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c3b4:	4b72      	ldr	r3, [pc, #456]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800c3bc:	e7d3      	b.n	800c366 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c3be:	f002 fd80 	bl	800eec2 <LoRaMacClassBIsMulticastExpected>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d0cf      	beq.n	800c366 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	f002 fd6f 	bl	800eeaa <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	f002 fd71 	bl	800eeb4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c3d2:	4b6b      	ldr	r3, [pc, #428]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c3d4:	2205      	movs	r2, #5
 800c3d6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800c3da:	e7c4      	b.n	800c366 <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c3dc:	4b68      	ldr	r3, [pc, #416]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800c3e4:	f7ff fc0a 	bl	800bbfc <PrepareRxDoneAbort>
        return;
 800c3e8:	e7d8      	b.n	800c39c <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800c3ea:	2d10      	cmp	r5, #16
 800c3ec:	d92e      	bls.n	800c44c <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800c3ee:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800c3f0:	b2ed      	uxtb	r5, r5
 800c3f2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c3f6:	4b60      	ldr	r3, [pc, #384]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c3f8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c3fc:	bb6b      	cbnz	r3, 800c45a <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800c3fe:	a804      	add	r0, sp, #16
 800c400:	f006 fd02 	bl	8012e08 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800c404:	aa08      	add	r2, sp, #32
 800c406:	a904      	add	r1, sp, #16
 800c408:	20ff      	movs	r0, #255	; 0xff
 800c40a:	f003 fb49 	bl	800faa0 <LoRaMacCryptoHandleJoinAccept>
 800c40e:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c410:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c414:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c418:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c41c:	4b56      	ldr	r3, [pc, #344]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c41e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c422:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800c426:	2207      	movs	r2, #7
 800c428:	a903      	add	r1, sp, #12
 800c42a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c42e:	f003 fd69 	bl	800ff04 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800c432:	b904      	cbnz	r4, 800c436 <ProcessRadioRxDone+0x15e>
 800c434:	b9c0      	cbnz	r0, 800c468 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c436:	2001      	movs	r0, #1
 800c438:	f002 ffb6 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f000 8283 	beq.w	800c948 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800c442:	2101      	movs	r1, #1
 800c444:	2007      	movs	r0, #7
 800c446:	f002 ff63 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
 800c44a:	e27d      	b.n	800c948 <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c44c:	4b4c      	ldr	r3, [pc, #304]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c454:	f7ff fbd2 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c458:	e7a0      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c45a:	4b49      	ldr	r3, [pc, #292]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c462:	f7ff fbcb 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c466:	e799      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800c468:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800c46c:	4c42      	ldr	r4, [pc, #264]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c46e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800c472:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800c476:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c47a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800c47e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800c482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c486:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800c48a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c48c:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800c490:	2002      	movs	r0, #2
 800c492:	f006 fcc7 	bl	8012e24 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800c496:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c49a:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c49e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c4a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c4a6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800c4aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800c4ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c4b2:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800c4b4:	b90b      	cbnz	r3, 800c4ba <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800c4ba:	4c2f      	ldr	r4, [pc, #188]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c4bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c4c2:	fb02 f303 	mul.w	r3, r2, r3
 800c4c6:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c4c8:	4413      	add	r3, r2
 800c4ca:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800c4cc:	2601      	movs	r6, #1
 800c4ce:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800c4d8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800c4dc:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800c4de:	3d11      	subs	r5, #17
 800c4e0:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800c4e4:	4b26      	ldr	r3, [pc, #152]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c4e6:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800c4ea:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800c4ee:	a921      	add	r1, sp, #132	; 0x84
 800c4f0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c4f4:	f003 fd16 	bl	800ff24 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800c4fe:	4630      	mov	r0, r6
 800c500:	f002 ff52 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800c504:	2800      	cmp	r0, #0
 800c506:	f000 821f 	beq.w	800c948 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800c50a:	4631      	mov	r1, r6
 800c50c:	2000      	movs	r0, #0
 800c50e:	f002 feff 	bl	800f310 <LoRaMacConfirmQueueSetStatus>
 800c512:	e219      	b.n	800c948 <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c514:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c51c:	4b16      	ldr	r3, [pc, #88]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c51e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800c522:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800c526:	4a16      	ldr	r2, [pc, #88]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c528:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800c52c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c530:	220d      	movs	r2, #13
 800c532:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c536:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c53a:	b113      	cbz	r3, 800c542 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c53c:	230e      	movs	r3, #14
 800c53e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c542:	a91f      	add	r1, sp, #124	; 0x7c
 800c544:	4b0c      	ldr	r3, [pc, #48]	; (800c578 <ProcessRadioRxDone+0x2a0>)
 800c546:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c54a:	f003 fca7 	bl	800fe9c <RegionGetPhyParam>
 800c54e:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800c550:	f1a5 030d 	sub.w	r3, r5, #13
 800c554:	b21b      	sxth	r3, r3
 800c556:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c55a:	b200      	sxth	r0, r0
 800c55c:	4283      	cmp	r3, r0
 800c55e:	dc01      	bgt.n	800c564 <ProcessRadioRxDone+0x28c>
 800c560:	2d0b      	cmp	r5, #11
 800c562:	d811      	bhi.n	800c588 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c564:	4b06      	ldr	r3, [pc, #24]	; (800c580 <ProcessRadioRxDone+0x2a8>)
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c56c:	f7ff fb46 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c570:	e714      	b.n	800c39c <ProcessRadioRxDone+0xc4>
 800c572:	bf00      	nop
 800c574:	200039dc 	.word	0x200039dc
 800c578:	20008000 	.word	0x20008000
 800c57c:	2000342c 	.word	0x2000342c
 800c580:	20003430 	.word	0x20003430
 800c584:	08016960 	.word	0x08016960
            macMsgData.Buffer = payload;
 800c588:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800c58a:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800c58e:	4ba5      	ldr	r3, [pc, #660]	; (800c824 <ProcessRadioRxDone+0x54c>)
 800c590:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800c592:	23ff      	movs	r3, #255	; 0xff
 800c594:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800c598:	a812      	add	r0, sp, #72	; 0x48
 800c59a:	f003 fb4f 	bl	800fc3c <LoRaMacParserData>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d142      	bne.n	800c628 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c5a2:	4ba1      	ldr	r3, [pc, #644]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c5a4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d044      	beq.n	800c636 <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800c5ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5ae:	4b9f      	ldr	r3, [pc, #636]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c5b0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800c5b4:	a904      	add	r1, sp, #16
 800c5b6:	a812      	add	r0, sp, #72	; 0x48
 800c5b8:	f7ff f996 	bl	800b8e8 <DetermineFrameType>
 800c5bc:	4605      	mov	r5, r0
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d164      	bne.n	800c68c <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d066      	beq.n	800c69a <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800c5cc:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800c5ce:	2d01      	cmp	r5, #1
 800c5d0:	d10a      	bne.n	800c5e8 <ProcessRadioRxDone+0x310>
 800c5d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	f040 808e 	bne.w	800c6f8 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800c5dc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c5e0:	f013 0f60 	tst.w	r3, #96	; 0x60
 800c5e4:	f040 8088 	bne.w	800c6f8 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800c5e8:	ab07      	add	r3, sp, #28
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	f10d 031b 	add.w	r3, sp, #27
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	4b8d      	ldr	r3, [pc, #564]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c5f4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c5f8:	aa12      	add	r2, sp, #72	; 0x48
 800c5fa:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800c5fe:	4630      	mov	r0, r6
 800c600:	f7ff fb3a 	bl	800bc78 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c604:	2800      	cmp	r0, #0
 800c606:	f000 8083 	beq.w	800c710 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800c60a:	2807      	cmp	r0, #7
 800c60c:	d07b      	beq.n	800c706 <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c60e:	4b87      	ldr	r3, [pc, #540]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c616:	9a07      	ldr	r2, [sp, #28]
 800c618:	4b84      	ldr	r3, [pc, #528]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c61a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c61e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800c622:	f7ff faeb 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c626:	e6b9      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c628:	4b80      	ldr	r3, [pc, #512]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c630:	f7ff fae4 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c634:	e6b2      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800c636:	f002 fc42 	bl	800eebe <LoRaMacClassBIsPingExpected>
 800c63a:	b188      	cbz	r0, 800c660 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c63c:	2000      	movs	r0, #0
 800c63e:	f002 fc33 	bl	800eea8 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800c642:	2000      	movs	r0, #0
 800c644:	f002 fc35 	bl	800eeb2 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800c648:	4b78      	ldr	r3, [pc, #480]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c64a:	2204      	movs	r2, #4
 800c64c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800c650:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c654:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800c658:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c65a:	f002 fc49 	bl	800eef0 <LoRaMacClassBSetFPendingBit>
 800c65e:	e7a5      	b.n	800c5ac <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800c660:	f002 fc2f 	bl	800eec2 <LoRaMacClassBIsMulticastExpected>
 800c664:	2800      	cmp	r0, #0
 800c666:	d0a1      	beq.n	800c5ac <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800c668:	2000      	movs	r0, #0
 800c66a:	f002 fc1e 	bl	800eeaa <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800c66e:	2000      	movs	r0, #0
 800c670:	f002 fc20 	bl	800eeb4 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c674:	4b6d      	ldr	r3, [pc, #436]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c676:	2205      	movs	r2, #5
 800c678:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800c67c:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c680:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800c684:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c686:	f002 fc33 	bl	800eef0 <LoRaMacClassBSetFPendingBit>
 800c68a:	e78f      	b.n	800c5ac <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c68c:	4b67      	ldr	r3, [pc, #412]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c694:	f7ff fab2 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c698:	e680      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c69a:	4618      	mov	r0, r3
 800c69c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c6a0:	4a61      	ldr	r2, [pc, #388]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c6a2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c6a6:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800c6aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c6ac:	428a      	cmp	r2, r1
 800c6ae:	d002      	beq.n	800c6b6 <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	e788      	b.n	800c5c8 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800c6b6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c6ba:	495b      	ldr	r1, [pc, #364]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c6bc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c6c0:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	d0f3      	beq.n	800c6b0 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800c6c8:	4b57      	ldr	r3, [pc, #348]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c6ca:	2130      	movs	r1, #48	; 0x30
 800c6cc:	fb01 3000 	mla	r0, r1, r0, r3
 800c6d0:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800c6d4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800c6d8:	6809      	ldr	r1, [r1, #0]
 800c6da:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c6dc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d002      	beq.n	800c6ea <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c6e4:	4691      	mov	r9, r2
                    multicast = 1;
 800c6e6:	2501      	movs	r5, #1
 800c6e8:	e771      	b.n	800c5ce <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c6ea:	4b50      	ldr	r3, [pc, #320]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c6ec:	2103      	movs	r1, #3
 800c6ee:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800c6f2:	4691      	mov	r9, r2
                    multicast = 1;
 800c6f4:	2501      	movs	r5, #1
 800c6f6:	e76a      	b.n	800c5ce <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c6f8:	4b4c      	ldr	r3, [pc, #304]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c700:	f7ff fa7c 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c704:	e64a      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800c706:	4b49      	ldr	r3, [pc, #292]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c708:	2208      	movs	r2, #8
 800c70a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800c70e:	e782      	b.n	800c616 <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800c710:	ab12      	add	r3, sp, #72	; 0x48
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	9b07      	ldr	r3, [sp, #28]
 800c716:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800c71a:	4649      	mov	r1, r9
 800c71c:	4630      	mov	r0, r6
 800c71e:	f003 f917 	bl	800f950 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c722:	2800      	cmp	r0, #0
 800c724:	d14a      	bne.n	800c7bc <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c726:	4b41      	ldr	r3, [pc, #260]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c728:	2100      	movs	r1, #0
 800c72a:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800c72e:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800c732:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800c736:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800c73a:	9a07      	ldr	r2, [sp, #28]
 800c73c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800c740:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c744:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c748:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c74c:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c750:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800c754:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c758:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800c75c:	2801      	cmp	r0, #1
 800c75e:	d93b      	bls.n	800c7d8 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800c760:	2d01      	cmp	r5, #1
 800c762:	d03f      	beq.n	800c7e4 <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800c764:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800c768:	2ca0      	cmp	r4, #160	; 0xa0
 800c76a:	d040      	beq.n	800c7ee <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800c76c:	2300      	movs	r3, #0
 800c76e:	4a2e      	ldr	r2, [pc, #184]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c770:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800c774:	4a2d      	ldr	r2, [pc, #180]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c776:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800c77a:	4b2b      	ldr	r3, [pc, #172]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c77c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c780:	b923      	cbnz	r3, 800c78c <ProcessRadioRxDone+0x4b4>
 800c782:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800c786:	f013 0f10 	tst.w	r3, #16
 800c78a:	d007      	beq.n	800c79c <ProcessRadioRxDone+0x4c4>
 800c78c:	4b26      	ldr	r3, [pc, #152]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c78e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c792:	b91b      	cbnz	r3, 800c79c <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800c794:	4b25      	ldr	r3, [pc, #148]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800c79c:	4b23      	ldr	r3, [pc, #140]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c79e:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800c7a2:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800c7a6:	f7ff fa92 	bl	800bcce <RemoveMacCommands>
            switch( fType )
 800c7aa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	f200 8099 	bhi.w	800c8e6 <ProcessRadioRxDone+0x60e>
 800c7b4:	e8df f003 	tbb	[pc, r3]
 800c7b8:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800c7bc:	2802      	cmp	r0, #2
 800c7be:	d006      	beq.n	800c7ce <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800c7c0:	4b1a      	ldr	r3, [pc, #104]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c7c2:	220b      	movs	r2, #11
 800c7c4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800c7c8:	f7ff fa18 	bl	800bbfc <PrepareRxDoneAbort>
                return;
 800c7cc:	e5e6      	b.n	800c39c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800c7ce:	4b17      	ldr	r3, [pc, #92]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c7d0:	220a      	movs	r2, #10
 800c7d2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800c7d6:	e7f7      	b.n	800c7c8 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800c7d8:	4b13      	ldr	r3, [pc, #76]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c7da:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800c7e2:	e7bd      	b.n	800c760 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800c7e4:	4b11      	ldr	r3, [pc, #68]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800c7ec:	e7c5      	b.n	800c77a <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800c7ee:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800c7f6:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800c7fa:	b913      	cbnz	r3, 800c802 <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800c7fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c7fe:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c800:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800c802:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c804:	2201      	movs	r2, #1
 800c806:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c80a:	4290      	cmp	r0, r2
 800c80c:	d9b5      	bls.n	800c77a <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800c80e:	4b06      	ldr	r3, [pc, #24]	; (800c828 <ProcessRadioRxDone+0x550>)
 800c810:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800c814:	4b05      	ldr	r3, [pc, #20]	; (800c82c <ProcessRadioRxDone+0x554>)
 800c816:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800c81a:	4a05      	ldr	r2, [pc, #20]	; (800c830 <ProcessRadioRxDone+0x558>)
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800c822:	e7aa      	b.n	800c77a <ProcessRadioRxDone+0x4a2>
 800c824:	20003668 	.word	0x20003668
 800c828:	20008000 	.word	0x20008000
 800c82c:	20003430 	.word	0x20003430
 800c830:	200039dc 	.word	0x200039dc
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c834:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c838:	4c58      	ldr	r4, [pc, #352]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c83a:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	463b      	mov	r3, r7
 800c842:	f002 020f 	and.w	r2, r2, #15
 800c846:	2100      	movs	r1, #0
 800c848:	a816      	add	r0, sp, #88	; 0x58
 800c84a:	f7ff fa4f 	bl	800bcec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c84e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c852:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c858:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c85c:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800c860:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c864:	2301      	movs	r3, #1
 800c866:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c86a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c86e:	2be0      	cmp	r3, #224	; 0xe0
 800c870:	d040      	beq.n	800c8f4 <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c872:	4a4a      	ldr	r2, [pc, #296]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c874:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c878:	f043 0302 	orr.w	r3, r3, #2
 800c87c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800c880:	e062      	b.n	800c948 <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800c882:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800c886:	4c45      	ldr	r4, [pc, #276]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c888:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	463b      	mov	r3, r7
 800c890:	f002 020f 	and.w	r2, r2, #15
 800c894:	2100      	movs	r1, #0
 800c896:	a816      	add	r0, sp, #88	; 0x58
 800c898:	f7ff fa28 	bl	800bcec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c89c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c8a0:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800c8a4:	e7e1      	b.n	800c86a <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800c8a6:	4c3d      	ldr	r4, [pc, #244]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c8a8:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c8b8:	f7ff fa18 	bl	800bcec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c8bc:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800c8c0:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800c8c4:	e7d1      	b.n	800c86a <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c8c6:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800c8ca:	4b34      	ldr	r3, [pc, #208]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c8cc:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800c8d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c8d2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800c8d6:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800c8da:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800c8e4:	e7c1      	b.n	800c86a <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c8e6:	4b2d      	ldr	r3, [pc, #180]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800c8ee:	f7ff f985 	bl	800bbfc <PrepareRxDoneAbort>
                    break;
 800c8f2:	e7ba      	b.n	800c86a <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800c8f4:	4a2a      	ldr	r2, [pc, #168]	; (800c9a0 <ProcessRadioRxDone+0x6c8>)
 800c8f6:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800c8fa:	2a00      	cmp	r2, #0
 800c8fc:	d1b9      	bne.n	800c872 <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800c8fe:	4a27      	ldr	r2, [pc, #156]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c900:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800c90a:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800c90e:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800c912:	e7ae      	b.n	800c872 <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800c914:	1e6a      	subs	r2, r5, #1
 800c916:	4c21      	ldr	r4, [pc, #132]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c918:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800c91c:	b292      	uxth	r2, r2
 800c91e:	1c71      	adds	r1, r6, #1
 800c920:	4638      	mov	r0, r7
 800c922:	f006 fb8e 	bl	8013042 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800c926:	2303      	movs	r3, #3
 800c928:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800c932:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800c936:	3d01      	subs	r5, #1
 800c938:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800c93c:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800c940:	f043 0302 	orr.w	r3, r3, #2
 800c944:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c948:	4b14      	ldr	r3, [pc, #80]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c94a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d915      	bls.n	800c97e <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800c952:	4b12      	ldr	r3, [pc, #72]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c954:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d006      	beq.n	800c96a <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c95c:	4a0f      	ldr	r2, [pc, #60]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c95e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c962:	f043 0310 	orr.w	r3, r3, #16
 800c966:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800c96a:	f7fe ff31 	bl	800b7d0 <UpdateRxSlotIdleState>
 800c96e:	e515      	b.n	800c39c <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c970:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800c978:	f7ff f940 	bl	800bbfc <PrepareRxDoneAbort>
            break;
 800c97c:	e7e4      	b.n	800c948 <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800c97e:	4b07      	ldr	r3, [pc, #28]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c980:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800c984:	2b00      	cmp	r3, #0
 800c986:	d0e4      	beq.n	800c952 <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800c988:	4b04      	ldr	r3, [pc, #16]	; (800c99c <ProcessRadioRxDone+0x6c4>)
 800c98a:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0df      	beq.n	800c952 <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800c992:	2000      	movs	r0, #0
 800c994:	f7ff f920 	bl	800bbd8 <OnRetransmitTimeoutTimerEvent>
 800c998:	e7db      	b.n	800c952 <ProcessRadioRxDone+0x67a>
 800c99a:	bf00      	nop
 800c99c:	20003430 	.word	0x20003430
 800c9a0:	20008000 	.word	0x20008000

0800c9a4 <ProcessRadioTxTimeout>:
{
 800c9a4:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c9a6:	4b0f      	ldr	r3, [pc, #60]	; (800c9e4 <ProcessRadioTxTimeout+0x40>)
 800c9a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d002      	beq.n	800c9b6 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800c9b0:	4b0d      	ldr	r3, [pc, #52]	; (800c9e8 <ProcessRadioTxTimeout+0x44>)
 800c9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b4:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800c9b6:	f7fe ff0b 	bl	800b7d0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800c9ba:	4c0c      	ldr	r4, [pc, #48]	; (800c9ec <ProcessRadioTxTimeout+0x48>)
 800c9bc:	2002      	movs	r0, #2
 800c9be:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800c9c2:	f002 fcd3 	bl	800f36c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800c9c6:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800c9ca:	b113      	cbz	r3, 800c9d2 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c9d2:	4a06      	ldr	r2, [pc, #24]	; (800c9ec <ProcessRadioTxTimeout+0x48>)
 800c9d4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c9d8:	f043 0310 	orr.w	r3, r3, #16
 800c9dc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800c9e0:	bd10      	pop	{r4, pc}
 800c9e2:	bf00      	nop
 800c9e4:	20008000 	.word	0x20008000
 800c9e8:	08016960 	.word	0x08016960
 800c9ec:	20003430 	.word	0x20003430

0800c9f0 <CheckForClassBCollision>:
{
 800c9f0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800c9f2:	f002 fa62 	bl	800eeba <LoRaMacClassBIsBeaconExpected>
 800c9f6:	b978      	cbnz	r0, 800ca18 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c9f8:	4b09      	ldr	r3, [pc, #36]	; (800ca20 <CheckForClassBCollision+0x30>)
 800c9fa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d001      	beq.n	800ca06 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800ca02:	2000      	movs	r0, #0
}
 800ca04:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ca06:	f002 fa5a 	bl	800eebe <LoRaMacClassBIsPingExpected>
 800ca0a:	b938      	cbnz	r0, 800ca1c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ca0c:	f002 fa59 	bl	800eec2 <LoRaMacClassBIsMulticastExpected>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d0f7      	beq.n	800ca04 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ca14:	200f      	movs	r0, #15
 800ca16:	e7f5      	b.n	800ca04 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ca18:	200e      	movs	r0, #14
 800ca1a:	e7f3      	b.n	800ca04 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ca1c:	200f      	movs	r0, #15
 800ca1e:	e7f1      	b.n	800ca04 <CheckForClassBCollision+0x14>
 800ca20:	20008000 	.word	0x20008000

0800ca24 <HandleRadioRxErrorTimeout>:
{
 800ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca26:	4605      	mov	r5, r0
 800ca28:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ca2a:	4b34      	ldr	r3, [pc, #208]	; (800cafc <HandleRadioRxErrorTimeout+0xd8>)
 800ca2c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d002      	beq.n	800ca3a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800ca34:	4b32      	ldr	r3, [pc, #200]	; (800cb00 <HandleRadioRxErrorTimeout+0xdc>)
 800ca36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca38:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ca3a:	f002 fa3e 	bl	800eeba <LoRaMacClassBIsBeaconExpected>
 800ca3e:	4606      	mov	r6, r0
 800ca40:	bb50      	cbnz	r0, 800ca98 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ca42:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <HandleRadioRxErrorTimeout+0xd8>)
 800ca44:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d02c      	beq.n	800caa6 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	d152      	bne.n	800caf6 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ca50:	4b2c      	ldr	r3, [pc, #176]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800ca52:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d13c      	bne.n	800cad4 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800ca5a:	4b2a      	ldr	r3, [pc, #168]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800ca5c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ca60:	b113      	cbz	r3, 800ca68 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ca62:	4b28      	ldr	r3, [pc, #160]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800ca64:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f002 fc7f 	bl	800f36c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ca6e:	4b23      	ldr	r3, [pc, #140]	; (800cafc <HandleRadioRxErrorTimeout+0xd8>)
 800ca70:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ca72:	f008 fc05 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
 800ca76:	4b23      	ldr	r3, [pc, #140]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800ca78:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800ca7c:	4298      	cmp	r0, r3
 800ca7e:	d33a      	bcc.n	800caf6 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ca80:	4c20      	ldr	r4, [pc, #128]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800ca82:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ca86:	f008 fc31 	bl	80152ec <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ca8a:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800ca8e:	f043 0310 	orr.w	r3, r3, #16
 800ca92:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800ca96:	e02e      	b.n	800caf6 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ca98:	2002      	movs	r0, #2
 800ca9a:	f002 fa04 	bl	800eea6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f002 fa06 	bl	800eeb0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800caa4:	e7cd      	b.n	800ca42 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800caa6:	f002 fa0a 	bl	800eebe <LoRaMacClassBIsPingExpected>
 800caaa:	4607      	mov	r7, r0
 800caac:	b950      	cbnz	r0, 800cac4 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800caae:	f002 fa08 	bl	800eec2 <LoRaMacClassBIsMulticastExpected>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d0ca      	beq.n	800ca4c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cab6:	2000      	movs	r0, #0
 800cab8:	f002 f9f7 	bl	800eeaa <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cabc:	2000      	movs	r0, #0
 800cabe:	f002 f9f9 	bl	800eeb4 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800cac2:	e018      	b.n	800caf6 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cac4:	2000      	movs	r0, #0
 800cac6:	f002 f9ef 	bl	800eea8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800caca:	2000      	movs	r0, #0
 800cacc:	f002 f9f1 	bl	800eeb2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800cad0:	463e      	mov	r6, r7
 800cad2:	e7ec      	b.n	800caae <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800cad6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800cada:	b113      	cbz	r3, 800cae2 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800cadc:	4b09      	ldr	r3, [pc, #36]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800cade:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800cae2:	4620      	mov	r0, r4
 800cae4:	f002 fc42 	bl	800f36c <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800cae8:	4a06      	ldr	r2, [pc, #24]	; (800cb04 <HandleRadioRxErrorTimeout+0xe0>)
 800caea:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800caee:	f043 0310 	orr.w	r3, r3, #16
 800caf2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800caf6:	f7fe fe6b 	bl	800b7d0 <UpdateRxSlotIdleState>
}
 800cafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cafc:	20008000 	.word	0x20008000
 800cb00:	08016960 	.word	0x08016960
 800cb04:	20003430 	.word	0x20003430

0800cb08 <ProcessRadioRxError>:
{
 800cb08:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800cb0a:	2106      	movs	r1, #6
 800cb0c:	2005      	movs	r0, #5
 800cb0e:	f7ff ff89 	bl	800ca24 <HandleRadioRxErrorTimeout>
}
 800cb12:	bd08      	pop	{r3, pc}

0800cb14 <ProcessRadioRxTimeout>:
{
 800cb14:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800cb16:	2104      	movs	r1, #4
 800cb18:	2003      	movs	r0, #3
 800cb1a:	f7ff ff83 	bl	800ca24 <HandleRadioRxErrorTimeout>
}
 800cb1e:	bd08      	pop	{r3, pc}

0800cb20 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb24:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800cb26:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <LoRaMacHandleIrqEvents+0x58>)
 800cb28:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb2e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800cb32:	b303      	cbz	r3, 800cb76 <LoRaMacHandleIrqEvents+0x56>
{
 800cb34:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800cb36:	b2dc      	uxtb	r4, r3
 800cb38:	f013 0f20 	tst.w	r3, #32
 800cb3c:	d10c      	bne.n	800cb58 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800cb3e:	f014 0f10 	tst.w	r4, #16
 800cb42:	d10c      	bne.n	800cb5e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800cb44:	f014 0f08 	tst.w	r4, #8
 800cb48:	d10c      	bne.n	800cb64 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800cb4a:	f014 0f04 	tst.w	r4, #4
 800cb4e:	d10c      	bne.n	800cb6a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800cb50:	f014 0f02 	tst.w	r4, #2
 800cb54:	d10c      	bne.n	800cb70 <LoRaMacHandleIrqEvents+0x50>
}
 800cb56:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800cb58:	f7fe ffbc 	bl	800bad4 <ProcessRadioTxDone>
 800cb5c:	e7ef      	b.n	800cb3e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800cb5e:	f7ff fbbb 	bl	800c2d8 <ProcessRadioRxDone>
 800cb62:	e7ef      	b.n	800cb44 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800cb64:	f7ff ff1e 	bl	800c9a4 <ProcessRadioTxTimeout>
 800cb68:	e7ef      	b.n	800cb4a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800cb6a:	f7ff ffcd 	bl	800cb08 <ProcessRadioRxError>
 800cb6e:	e7ef      	b.n	800cb50 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800cb70:	f7ff ffd0 	bl	800cb14 <ProcessRadioRxTimeout>
}
 800cb74:	e7ef      	b.n	800cb56 <LoRaMacHandleIrqEvents+0x36>
 800cb76:	4770      	bx	lr
 800cb78:	2000342c 	.word	0x2000342c

0800cb7c <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800cb7c:	b909      	cbnz	r1, 800cb82 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800cb7e:	2000      	movs	r0, #0
}
 800cb80:	4770      	bx	lr
{
 800cb82:	b510      	push	{r4, lr}
 800cb84:	4604      	mov	r4, r0
 800cb86:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800cb88:	f008 fb7a 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800cb8c:	42a0      	cmp	r0, r4
 800cb8e:	d801      	bhi.n	800cb94 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800cb90:	2000      	movs	r0, #0
}
 800cb92:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <LoRaMacHandleResponseTimeout+0x24>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	e7f8      	b.n	800cb92 <LoRaMacHandleResponseTimeout+0x16>
 800cba0:	20008000 	.word	0x20008000

0800cba4 <LoRaMacHandleMlmeRequest>:
{
 800cba4:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800cba6:	4b14      	ldr	r3, [pc, #80]	; (800cbf8 <LoRaMacHandleMlmeRequest+0x54>)
 800cba8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800cbac:	f013 0f04 	tst.w	r3, #4
 800cbb0:	d100      	bne.n	800cbb4 <LoRaMacHandleMlmeRequest+0x10>
}
 800cbb2:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cbb4:	2001      	movs	r0, #1
 800cbb6:	f002 fbf7 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800cbba:	b178      	cbz	r0, 800cbdc <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f002 fbbd 	bl	800f33c <LoRaMacConfirmQueueGetStatus>
 800cbc2:	b918      	cbnz	r0, 800cbcc <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <LoRaMacHandleMlmeRequest+0x54>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cbcc:	4a0a      	ldr	r2, [pc, #40]	; (800cbf8 <LoRaMacHandleMlmeRequest+0x54>)
 800cbce:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800cbd2:	f023 0302 	bic.w	r3, r3, #2
 800cbd6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800cbda:	e7ea      	b.n	800cbb2 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800cbdc:	2006      	movs	r0, #6
 800cbde:	f002 fbe3 	bl	800f3a8 <LoRaMacConfirmQueueIsCmdActive>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0e5      	beq.n	800cbb2 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800cbe6:	4a04      	ldr	r2, [pc, #16]	; (800cbf8 <LoRaMacHandleMlmeRequest+0x54>)
 800cbe8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800cbec:	f023 0302 	bic.w	r3, r3, #2
 800cbf0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800cbf4:	e7dd      	b.n	800cbb2 <LoRaMacHandleMlmeRequest+0xe>
 800cbf6:	bf00      	nop
 800cbf8:	20003430 	.word	0x20003430

0800cbfc <SerializeTxFrame>:
{
 800cbfc:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <SerializeTxFrame+0x40>)
 800cc00:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cc04:	b11b      	cbz	r3, 800cc0e <SerializeTxFrame+0x12>
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d00a      	beq.n	800cc20 <SerializeTxFrame+0x24>
 800cc0a:	2003      	movs	r0, #3
}
 800cc0c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800cc0e:	480c      	ldr	r0, [pc, #48]	; (800cc40 <SerializeTxFrame+0x44>)
 800cc10:	f003 f873 	bl	800fcfa <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800cc14:	b968      	cbnz	r0, 800cc32 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800cc16:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <SerializeTxFrame+0x40>)
 800cc18:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800cc1c:	801a      	strh	r2, [r3, #0]
            break;
 800cc1e:	e7f5      	b.n	800cc0c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800cc20:	4807      	ldr	r0, [pc, #28]	; (800cc40 <SerializeTxFrame+0x44>)
 800cc22:	f003 f8a0 	bl	800fd66 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800cc26:	b930      	cbnz	r0, 800cc36 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800cc28:	4b04      	ldr	r3, [pc, #16]	; (800cc3c <SerializeTxFrame+0x40>)
 800cc2a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800cc2e:	801a      	strh	r2, [r3, #0]
            break;
 800cc30:	e7ec      	b.n	800cc0c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cc32:	2011      	movs	r0, #17
 800cc34:	e7ea      	b.n	800cc0c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cc36:	2011      	movs	r0, #17
 800cc38:	e7e8      	b.n	800cc0c <SerializeTxFrame+0x10>
 800cc3a:	bf00      	nop
 800cc3c:	20003430 	.word	0x20003430
 800cc40:	20003538 	.word	0x20003538

0800cc44 <ComputeRxWindowParameters>:
{
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cc48:	4c1e      	ldr	r4, [pc, #120]	; (800ccc4 <ComputeRxWindowParameters+0x80>)
 800cc4a:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800cc4e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800cc52:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800cc56:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f003 fa33 	bl	80100c6 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cc60:	4d19      	ldr	r5, [pc, #100]	; (800ccc8 <ComputeRxWindowParameters+0x84>)
 800cc62:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cc6a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800cc6e:	b241      	sxtb	r1, r0
 800cc70:	4630      	mov	r0, r6
 800cc72:	f003 f974 	bl	800ff5e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cc76:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cc7e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800cc82:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800cc86:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800cc8a:	f003 f968 	bl	800ff5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800cc8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc90:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800cc94:	440b      	add	r3, r1
 800cc96:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800cc9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cc9c:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800cca0:	4413      	add	r3, r2
 800cca2:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800cca6:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	d007      	beq.n	800ccbe <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ccae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ccb0:	4419      	add	r1, r3
 800ccb2:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ccb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ccb8:	440a      	add	r2, r1
 800ccba:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800ccbe:	b002      	add	sp, #8
 800ccc0:	bd70      	pop	{r4, r5, r6, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20008000 	.word	0x20008000
 800ccc8:	20003430 	.word	0x20003430

0800cccc <VerifyTxFrame>:
{
 800cccc:	b510      	push	{r4, lr}
 800ccce:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	; (800cd0c <VerifyTxFrame+0x40>)
 800ccd6:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800ccda:	b914      	cbnz	r4, 800cce2 <VerifyTxFrame+0x16>
}
 800ccdc:	4620      	mov	r0, r4
 800ccde:	b002      	add	sp, #8
 800cce0:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800cce2:	a801      	add	r0, sp, #4
 800cce4:	f002 fa26 	bl	800f134 <LoRaMacCommandsGetSizeSerializedCmds>
 800cce8:	4604      	mov	r4, r0
 800ccea:	b968      	cbnz	r0, 800cd08 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ccec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccf0:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <VerifyTxFrame+0x40>)
 800ccf2:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800ccf6:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <VerifyTxFrame+0x44>)
 800ccf8:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800ccfc:	f7fe fed8 	bl	800bab0 <ValidatePayloadLength>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d1eb      	bne.n	800ccdc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800cd04:	2408      	movs	r4, #8
 800cd06:	e7e9      	b.n	800ccdc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cd08:	2413      	movs	r4, #19
 800cd0a:	e7e7      	b.n	800ccdc <VerifyTxFrame+0x10>
 800cd0c:	20008000 	.word	0x20008000
 800cd10:	20003430 	.word	0x20003430

0800cd14 <SecureFrame>:
{
 800cd14:	b530      	push	{r4, r5, lr}
 800cd16:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800cd1c:	4b18      	ldr	r3, [pc, #96]	; (800cd80 <SecureFrame+0x6c>)
 800cd1e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cd22:	b133      	cbz	r3, 800cd32 <SecureFrame+0x1e>
 800cd24:	4605      	mov	r5, r0
 800cd26:	460c      	mov	r4, r1
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	d00b      	beq.n	800cd44 <SecureFrame+0x30>
 800cd2c:	2003      	movs	r0, #3
}
 800cd2e:	b003      	add	sp, #12
 800cd30:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800cd32:	4814      	ldr	r0, [pc, #80]	; (800cd84 <SecureFrame+0x70>)
 800cd34:	f002 fda2 	bl	800f87c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cd38:	b9d8      	cbnz	r0, 800cd72 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800cd3a:	4b11      	ldr	r3, [pc, #68]	; (800cd80 <SecureFrame+0x6c>)
 800cd3c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800cd40:	801a      	strh	r2, [r3, #0]
            break;
 800cd42:	e7f4      	b.n	800cd2e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800cd44:	a801      	add	r0, sp, #4
 800cd46:	f002 fd4d 	bl	800f7e4 <LoRaMacCryptoGetFCntUp>
 800cd4a:	b9a0      	cbnz	r0, 800cd76 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800cd4c:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <SecureFrame+0x6c>)
 800cd4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cd52:	b113      	cbz	r3, 800cd5a <SecureFrame+0x46>
                fCntUp -= 1;
 800cd54:	9b01      	ldr	r3, [sp, #4]
 800cd56:	3b01      	subs	r3, #1
 800cd58:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800cd5a:	4b0a      	ldr	r3, [pc, #40]	; (800cd84 <SecureFrame+0x70>)
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	9801      	ldr	r0, [sp, #4]
 800cd62:	f002 fdb1 	bl	800f8c8 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800cd66:	b940      	cbnz	r0, 800cd7a <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <SecureFrame+0x6c>)
 800cd6a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800cd6e:	801a      	strh	r2, [r3, #0]
            break;
 800cd70:	e7dd      	b.n	800cd2e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cd72:	2011      	movs	r0, #17
 800cd74:	e7db      	b.n	800cd2e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800cd76:	2012      	movs	r0, #18
 800cd78:	e7d9      	b.n	800cd2e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800cd7a:	2011      	movs	r0, #17
 800cd7c:	e7d7      	b.n	800cd2e <SecureFrame+0x1a>
 800cd7e:	bf00      	nop
 800cd80:	20003430 	.word	0x20003430
 800cd84:	20003538 	.word	0x20003538

0800cd88 <SendFrameOnChannel>:
{
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800cd94:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cd98:	4d36      	ldr	r5, [pc, #216]	; (800ce74 <SendFrameOnChannel+0xec>)
 800cd9a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800cd9e:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800cda2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800cda6:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800cdaa:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800cdae:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800cdb0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800cdb4:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800cdb6:	4c30      	ldr	r4, [pc, #192]	; (800ce78 <SendFrameOnChannel+0xf0>)
 800cdb8:	8823      	ldrh	r3, [r4, #0]
 800cdba:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cdbe:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800cdc2:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800cdc6:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800cdca:	f10d 0207 	add.w	r2, sp, #7
 800cdce:	a902      	add	r1, sp, #8
 800cdd0:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800cdd4:	f003 f8e7 	bl	800ffa6 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cdde:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800cde2:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800cde6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cdea:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800cdee:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cdf2:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800cdf6:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800cdfa:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800cdfe:	f002 f862 	bl	800eec6 <LoRaMacClassBIsBeaconModeActive>
 800ce02:	bb60      	cbnz	r0, 800ce5e <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ce04:	4b1b      	ldr	r3, [pc, #108]	; (800ce74 <SendFrameOnChannel+0xec>)
 800ce06:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d02f      	beq.n	800ce6e <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800ce0e:	f002 f85d 	bl	800eecc <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <SendFrameOnChannel+0xec>)
 800ce14:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800ce18:	4b17      	ldr	r3, [pc, #92]	; (800ce78 <SendFrameOnChannel+0xf0>)
 800ce1a:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800ce1e:	b2c0      	uxtb	r0, r0
 800ce20:	f7ff ff78 	bl	800cd14 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800ce24:	4604      	mov	r4, r0
 800ce26:	b9b8      	cbnz	r0, 800ce58 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ce28:	4813      	ldr	r0, [pc, #76]	; (800ce78 <SendFrameOnChannel+0xf0>)
 800ce2a:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800ce2e:	f043 0302 	orr.w	r3, r3, #2
 800ce32:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800ce36:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ce42:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <SendFrameOnChannel+0xf4>)
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	f830 1b02 	ldrh.w	r1, [r0], #2
 800ce54:	b2c9      	uxtb	r1, r1
 800ce56:	4798      	blx	r3
}
 800ce58:	4620      	mov	r0, r4
 800ce5a:	b006      	add	sp, #24
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800ce5e:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800ce62:	f002 f842 	bl	800eeea <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d0cc      	beq.n	800ce04 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800ce6a:	2410      	movs	r4, #16
 800ce6c:	e7f4      	b.n	800ce58 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800ce6e:	f002 f83e 	bl	800eeee <LoRaMacClassBStopRxSlots>
 800ce72:	e7cc      	b.n	800ce0e <SendFrameOnChannel+0x86>
 800ce74:	20008000 	.word	0x20008000
 800ce78:	20003430 	.word	0x20003430
 800ce7c:	08016960 	.word	0x08016960

0800ce80 <ScheduleTx>:
{
 800ce80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce84:	b08c      	sub	sp, #48	; 0x30
 800ce86:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800ce88:	f7ff fdb2 	bl	800c9f0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	b118      	cbz	r0, 800ce98 <ScheduleTx+0x18>
}
 800ce90:	4620      	mov	r0, r4
 800ce92:	b00c      	add	sp, #48	; 0x30
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800ce98:	f7fe fcfe 	bl	800b898 <CalculateBackOff>
    status = SerializeTxFrame( );
 800ce9c:	f7ff feae 	bl	800cbfc <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800cea0:	4604      	mov	r4, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d1f4      	bne.n	800ce90 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800cea6:	4e36      	ldr	r6, [pc, #216]	; (800cf80 <ScheduleTx+0x100>)
 800cea8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800ceaa:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ceac:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800ceb0:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ceb4:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800ceb8:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cebc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800cec0:	4640      	mov	r0, r8
 800cec2:	f008 f947 	bl	8015154 <SysTimeGetMcuTime>
 800cec6:	af02      	add	r7, sp, #8
 800cec8:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800ced2:	e898 0006 	ldmia.w	r8, {r1, r2}
 800ced6:	4638      	mov	r0, r7
 800ced8:	f008 f8d9 	bl	801508e <SysTimeSub>
 800cedc:	ab07      	add	r3, sp, #28
 800cede:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cee2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800cee6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cee8:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800ceea:	2300      	movs	r3, #0
 800ceec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800cef0:	2301      	movs	r3, #1
 800cef2:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800cef6:	4b23      	ldr	r3, [pc, #140]	; (800cf84 <ScheduleTx+0x104>)
 800cef8:	881b      	ldrh	r3, [r3, #0]
 800cefa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cefe:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800cf02:	b92b      	cbnz	r3, 800cf10 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800cf04:	2301      	movs	r3, #1
 800cf06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800cf10:	4a1c      	ldr	r2, [pc, #112]	; (800cf84 <ScheduleTx+0x104>)
 800cf12:	481b      	ldr	r0, [pc, #108]	; (800cf80 <ScheduleTx+0x100>)
 800cf14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800cf1e:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800cf22:	a904      	add	r1, sp, #16
 800cf24:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800cf28:	f003 f8b8 	bl	801009c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800cf2c:	b1c0      	cbz	r0, 800cf60 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800cf2e:	280b      	cmp	r0, #11
 800cf30:	d124      	bne.n	800cf7c <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800cf32:	4a14      	ldr	r2, [pc, #80]	; (800cf84 <ScheduleTx+0x104>)
 800cf34:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800cf38:	b191      	cbz	r1, 800cf60 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800cf3a:	b90d      	cbnz	r5, 800cf40 <ScheduleTx+0xc0>
                return status;
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	e7a7      	b.n	800ce90 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800cf40:	4615      	mov	r5, r2
 800cf42:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800cf46:	f042 0220 	orr.w	r2, r2, #32
 800cf4a:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800cf4e:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800cf52:	4628      	mov	r0, r5
 800cf54:	f008 fa6a 	bl	801542c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f008 fa21 	bl	80153a0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800cf5e:	e797      	b.n	800ce90 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800cf60:	f7ff fe70 	bl	800cc44 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800cf64:	f7ff feb2 	bl	800cccc <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800cf68:	4604      	mov	r4, r0
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d190      	bne.n	800ce90 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800cf6e:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <ScheduleTx+0x104>)
 800cf70:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800cf74:	f7ff ff08 	bl	800cd88 <SendFrameOnChannel>
 800cf78:	4604      	mov	r4, r0
 800cf7a:	e789      	b.n	800ce90 <ScheduleTx+0x10>
            return status;
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	e787      	b.n	800ce90 <ScheduleTx+0x10>
 800cf80:	20008000 	.word	0x20008000
 800cf84:	20003430 	.word	0x20003430

0800cf88 <OnTxDelayedTimerEvent>:
{
 800cf88:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800cf8a:	4c16      	ldr	r4, [pc, #88]	; (800cfe4 <OnTxDelayedTimerEvent+0x5c>)
 800cf8c:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800cf90:	f008 f9ac 	bl	80152ec <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800cf94:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800cf98:	f023 0320 	bic.w	r3, r3, #32
 800cf9c:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800cfa0:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800cfa4:	4b10      	ldr	r3, [pc, #64]	; (800cfe8 <OnTxDelayedTimerEvent+0x60>)
 800cfa6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800cfaa:	f7ff fde7 	bl	800cb7c <LoRaMacHandleResponseTimeout>
 800cfae:	b100      	cbz	r0, 800cfb2 <OnTxDelayedTimerEvent+0x2a>
}
 800cfb0:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	f7ff ff64 	bl	800ce80 <ScheduleTx>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d0f9      	beq.n	800cfb0 <OnTxDelayedTimerEvent+0x28>
 800cfbc:	280b      	cmp	r0, #11
 800cfbe:	d0f7      	beq.n	800cfb0 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cfc0:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <OnTxDelayedTimerEvent+0x60>)
 800cfc2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800cfc6:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800cfca:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800cfce:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800cfd2:	2009      	movs	r0, #9
 800cfd4:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800cfd8:	f002 f9c8 	bl	800f36c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800cfdc:	f7fe fcee 	bl	800b9bc <StopRetransmission>
            break;
 800cfe0:	e7e6      	b.n	800cfb0 <OnTxDelayedTimerEvent+0x28>
 800cfe2:	bf00      	nop
 800cfe4:	20003430 	.word	0x20003430
 800cfe8:	20008000 	.word	0x20008000

0800cfec <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800cfec:	4b1c      	ldr	r3, [pc, #112]	; (800d060 <LoRaMacHandleMcpsRequest+0x74>)
 800cfee:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800cff2:	f013 0f01 	tst.w	r3, #1
 800cff6:	d032      	beq.n	800d05e <LoRaMacHandleMcpsRequest+0x72>
{
 800cff8:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800cffa:	4b19      	ldr	r3, [pc, #100]	; (800d060 <LoRaMacHandleMcpsRequest+0x74>)
 800cffc:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800d000:	b12b      	cbz	r3, 800d00e <LoRaMacHandleMcpsRequest+0x22>
 800d002:	2b03      	cmp	r3, #3
 800d004:	d003      	beq.n	800d00e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d006:	2b01      	cmp	r3, #1
 800d008:	d006      	beq.n	800d018 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800d00a:	2000      	movs	r0, #0
 800d00c:	e002      	b.n	800d014 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d00e:	f7fe fc9b 	bl	800b948 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800d012:	b940      	cbnz	r0, 800d026 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800d014:	b1b8      	cbz	r0, 800d046 <LoRaMacHandleMcpsRequest+0x5a>
}
 800d016:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800d018:	4b11      	ldr	r3, [pc, #68]	; (800d060 <LoRaMacHandleMcpsRequest+0x74>)
 800d01a:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800d01e:	b183      	cbz	r3, 800d042 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d020:	f7fe fcae 	bl	800b980 <CheckRetransConfirmedUplink>
 800d024:	e7f5      	b.n	800d012 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800d026:	4c0e      	ldr	r4, [pc, #56]	; (800d060 <LoRaMacHandleMcpsRequest+0x74>)
 800d028:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d02c:	f008 f95e 	bl	80152ec <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d030:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d034:	f023 0320 	bic.w	r3, r3, #32
 800d038:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800d03c:	f7fe fcbe 	bl	800b9bc <StopRetransmission>
 800d040:	e7e9      	b.n	800d016 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800d042:	2001      	movs	r0, #1
 800d044:	e7e6      	b.n	800d014 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d046:	4b06      	ldr	r3, [pc, #24]	; (800d060 <LoRaMacHandleMcpsRequest+0x74>)
 800d048:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d04c:	f36f 1204 	bfc	r2, #4, #1
 800d050:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800d054:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800d058:	f7ff ff96 	bl	800cf88 <OnTxDelayedTimerEvent>
}
 800d05c:	e7db      	b.n	800d016 <LoRaMacHandleMcpsRequest+0x2a>
 800d05e:	4770      	bx	lr
 800d060:	20003430 	.word	0x20003430

0800d064 <LoRaMacHandleRequestEvents>:
{
 800d064:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d066:	4b22      	ldr	r3, [pc, #136]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d068:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d06c:	bb7b      	cbnz	r3, 800d0ce <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d06e:	4b20      	ldr	r3, [pc, #128]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d070:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800d074:	f014 0501 	ands.w	r5, r4, #1
 800d078:	d005      	beq.n	800d086 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d07a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d07e:	f36f 0200 	bfc	r2, #0, #1
 800d082:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d086:	4b1a      	ldr	r3, [pc, #104]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d088:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800d08c:	f013 0f04 	tst.w	r3, #4
 800d090:	d006      	beq.n	800d0a0 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d092:	4b17      	ldr	r3, [pc, #92]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d094:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d098:	f36f 0282 	bfc	r2, #2, #1
 800d09c:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	f7fe fba9 	bl	800b7f8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800d0a6:	b135      	cbz	r5, 800d0b6 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d0a8:	4811      	ldr	r0, [pc, #68]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d0aa:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800d0b4:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800d0b6:	f014 0f04 	tst.w	r4, #4
 800d0ba:	d109      	bne.n	800d0d0 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800d0bc:	f001 ff07 	bl	800eece <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d0c2:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800d0c6:	f36f 1204 	bfc	r2, #4, #1
 800d0ca:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d0d0:	4808      	ldr	r0, [pc, #32]	; (800d0f4 <LoRaMacHandleRequestEvents+0x90>)
 800d0d2:	f002 f975 	bl	800f3c0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d0d6:	f002 f9ab 	bl	800f430 <LoRaMacConfirmQueueGetCnt>
 800d0da:	2800      	cmp	r0, #0
 800d0dc:	d0ee      	beq.n	800d0bc <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d0de:	4a04      	ldr	r2, [pc, #16]	; (800d0f0 <LoRaMacHandleRequestEvents+0x8c>)
 800d0e0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800d0e4:	f043 0304 	orr.w	r3, r3, #4
 800d0e8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800d0ec:	e7e6      	b.n	800d0bc <LoRaMacHandleRequestEvents+0x58>
 800d0ee:	bf00      	nop
 800d0f0:	20003430 	.word	0x20003430
 800d0f4:	20003884 	.word	0x20003884

0800d0f8 <OpenContinuousRxCWindow>:
{
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d0fc:	4c16      	ldr	r4, [pc, #88]	; (800d158 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d0fe:	4d17      	ldr	r5, [pc, #92]	; (800d15c <OpenContinuousRxCWindow+0x64>)
 800d100:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800d104:	9600      	str	r6, [sp, #0]
 800d106:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d108:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800d10c:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800d110:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d114:	f002 ff23 	bl	800ff5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d118:	2302      	movs	r3, #2
 800d11a:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d11e:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d122:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d126:	2301      	movs	r3, #1
 800d128:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d12c:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800d130:	4631      	mov	r1, r6
 800d132:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d136:	f002 ff26 	bl	800ff86 <RegionRxConfig>
 800d13a:	b158      	cbz	r0, 800d154 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d13c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800d140:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800d144:	4b06      	ldr	r3, [pc, #24]	; (800d160 <OpenContinuousRxCWindow+0x68>)
 800d146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d148:	2000      	movs	r0, #0
 800d14a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d14c:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800d150:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800d154:	b002      	add	sp, #8
 800d156:	bd70      	pop	{r4, r5, r6, pc}
 800d158:	20008000 	.word	0x20008000
 800d15c:	20003430 	.word	0x20003430
 800d160:	08016960 	.word	0x08016960

0800d164 <RxWindowSetup>:
{
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800d168:	f008 f8c0 	bl	80152ec <UTIL_TIMER_Stop>
    Radio.Standby( );
 800d16c:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <RxWindowSetup+0x3c>)
 800d16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d170:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d172:	4a0c      	ldr	r2, [pc, #48]	; (800d1a4 <RxWindowSetup+0x40>)
 800d174:	4621      	mov	r1, r4
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <RxWindowSetup+0x44>)
 800d178:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800d17c:	f002 ff03 	bl	800ff86 <RegionRxConfig>
 800d180:	b160      	cbz	r0, 800d19c <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d182:	4d0a      	ldr	r5, [pc, #40]	; (800d1ac <RxWindowSetup+0x48>)
 800d184:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800d188:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d18c:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <RxWindowSetup+0x3c>)
 800d18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d190:	4a05      	ldr	r2, [pc, #20]	; (800d1a8 <RxWindowSetup+0x44>)
 800d192:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800d194:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d196:	7ce3      	ldrb	r3, [r4, #19]
 800d198:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	bf00      	nop
 800d1a0:	08016960 	.word	0x08016960
 800d1a4:	20003854 	.word	0x20003854
 800d1a8:	20008000 	.word	0x20008000
 800d1ac:	20003430 	.word	0x20003430

0800d1b0 <OnRxWindow2TimerEvent>:
{
 800d1b0:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d1b2:	4b13      	ldr	r3, [pc, #76]	; (800d200 <OnRxWindow2TimerEvent+0x50>)
 800d1b4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d1b8:	b903      	cbnz	r3, 800d1bc <OnRxWindow2TimerEvent+0xc>
}
 800d1ba:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d1bc:	4810      	ldr	r0, [pc, #64]	; (800d200 <OnRxWindow2TimerEvent+0x50>)
 800d1be:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800d1c2:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	; (800d204 <OnRxWindow2TimerEvent+0x54>)
 800d1c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d1ca:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d1ce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d1d2:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d1d6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800d1da:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d1ea:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d1ee:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800d1f2:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800d1f6:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800d1fa:	f7ff ffb3 	bl	800d164 <RxWindowSetup>
 800d1fe:	e7dc      	b.n	800d1ba <OnRxWindow2TimerEvent+0xa>
 800d200:	20003430 	.word	0x20003430
 800d204:	20008000 	.word	0x20008000

0800d208 <OnRxWindow1TimerEvent>:
{
 800d208:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800d20a:	4811      	ldr	r0, [pc, #68]	; (800d250 <OnRxWindow1TimerEvent+0x48>)
 800d20c:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800d210:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800d214:	4b0f      	ldr	r3, [pc, #60]	; (800d254 <OnRxWindow1TimerEvent+0x4c>)
 800d216:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800d21a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d21e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800d222:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d226:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800d22a:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800d22e:	2200      	movs	r2, #0
 800d230:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800d234:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d238:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d23c:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800d240:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800d244:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800d248:	f7ff ff8c 	bl	800d164 <RxWindowSetup>
}
 800d24c:	bd08      	pop	{r3, pc}
 800d24e:	bf00      	nop
 800d250:	20003430 	.word	0x20003430
 800d254:	20008000 	.word	0x20008000

0800d258 <LoRaMacHandleNvm>:
{
 800d258:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800d25a:	4b31      	ldr	r3, [pc, #196]	; (800d320 <LoRaMacHandleNvm+0xc8>)
 800d25c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d260:	b103      	cbz	r3, 800d264 <LoRaMacHandleNvm+0xc>
}
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800d266:	2124      	movs	r1, #36	; 0x24
 800d268:	f005 ff0c 	bl	8013084 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800d26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d26e:	4283      	cmp	r3, r0
 800d270:	d053      	beq.n	800d31a <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800d272:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800d274:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800d276:	211c      	movs	r1, #28
 800d278:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d27c:	f005 ff02 	bl	8013084 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800d280:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d282:	4283      	cmp	r3, r0
 800d284:	d002      	beq.n	800d28c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800d286:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800d288:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800d28c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d290:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d294:	f005 fef6 	bl	8013084 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800d298:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800d29c:	4283      	cmp	r3, r0
 800d29e:	d003      	beq.n	800d2a8 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800d2a0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800d2a4:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800d2a8:	21d4      	movs	r1, #212	; 0xd4
 800d2aa:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800d2ae:	f005 fee9 	bl	8013084 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800d2b2:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800d2b6:	4283      	cmp	r3, r0
 800d2b8:	d003      	beq.n	800d2c2 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800d2ba:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800d2be:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800d2c2:	2110      	movs	r1, #16
 800d2c4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d2c8:	f005 fedc 	bl	8013084 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800d2cc:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800d2d0:	4283      	cmp	r3, r0
 800d2d2:	d003      	beq.n	800d2dc <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800d2d4:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800d2d8:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800d2dc:	f44f 715e 	mov.w	r1, #888	; 0x378
 800d2e0:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800d2e4:	f005 fece 	bl	8013084 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800d2e8:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800d2ec:	4283      	cmp	r3, r0
 800d2ee:	d003      	beq.n	800d2f8 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800d2f0:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800d2f4:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800d2f8:	2114      	movs	r1, #20
 800d2fa:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800d2fe:	f005 fec1 	bl	8013084 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800d302:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800d306:	4283      	cmp	r3, r0
 800d308:	d003      	beq.n	800d312 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800d30a:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800d30e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800d312:	4628      	mov	r0, r5
 800d314:	f7fe fb94 	bl	800ba40 <CallNvmDataChangeCallback>
 800d318:	e7a3      	b.n	800d262 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d31a:	2500      	movs	r5, #0
 800d31c:	e7ab      	b.n	800d276 <LoRaMacHandleNvm+0x1e>
 800d31e:	bf00      	nop
 800d320:	20003430 	.word	0x20003430

0800d324 <RestoreNvmData>:
{
 800d324:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d326:	4b3d      	ldr	r3, [pc, #244]	; (800d41c <RestoreNvmData+0xf8>)
 800d328:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d001      	beq.n	800d334 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800d330:	2001      	movs	r0, #1
}
 800d332:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800d334:	4c3a      	ldr	r4, [pc, #232]	; (800d420 <RestoreNvmData+0xfc>)
 800d336:	2124      	movs	r1, #36	; 0x24
 800d338:	4620      	mov	r0, r4
 800d33a:	f005 fea3 	bl	8013084 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800d33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d340:	4283      	cmp	r3, r0
 800d342:	d001      	beq.n	800d348 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d344:	2017      	movs	r0, #23
 800d346:	e7f4      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800d348:	211c      	movs	r1, #28
 800d34a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d34e:	f005 fe99 	bl	8013084 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800d352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d354:	4283      	cmp	r3, r0
 800d356:	d001      	beq.n	800d35c <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d358:	2017      	movs	r0, #23
 800d35a:	e7ea      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800d35c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d360:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800d364:	f005 fe8e 	bl	8013084 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800d368:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800d36c:	4283      	cmp	r3, r0
 800d36e:	d001      	beq.n	800d374 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d370:	2017      	movs	r0, #23
 800d372:	e7de      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800d374:	21d4      	movs	r1, #212	; 0xd4
 800d376:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800d37a:	f005 fe83 	bl	8013084 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800d37e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800d382:	4283      	cmp	r3, r0
 800d384:	d001      	beq.n	800d38a <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d386:	2017      	movs	r0, #23
 800d388:	e7d3      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800d38a:	2110      	movs	r1, #16
 800d38c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800d390:	f005 fe78 	bl	8013084 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800d394:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800d398:	4283      	cmp	r3, r0
 800d39a:	d001      	beq.n	800d3a0 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d39c:	2017      	movs	r0, #23
 800d39e:	e7c8      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800d3a0:	f44f 715e 	mov.w	r1, #888	; 0x378
 800d3a4:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800d3a8:	f005 fe6c 	bl	8013084 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800d3ac:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800d3b0:	4283      	cmp	r3, r0
 800d3b2:	d001      	beq.n	800d3b8 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d3b4:	2017      	movs	r0, #23
 800d3b6:	e7bc      	b.n	800d332 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800d3b8:	2114      	movs	r1, #20
 800d3ba:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800d3be:	f005 fe61 	bl	8013084 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800d3c2:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800d3c6:	4283      	cmp	r3, r0
 800d3c8:	d001      	beq.n	800d3ce <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d3ca:	2017      	movs	r0, #23
 800d3cc:	e7b1      	b.n	800d332 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800d3ce:	4625      	mov	r5, r4
 800d3d0:	4c14      	ldr	r4, [pc, #80]	; (800d424 <RestoreNvmData+0x100>)
 800d3d2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f005 fe32 	bl	8013042 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800d3de:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	f005 fe44 	bl	8013072 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d3ea:	4b0c      	ldr	r3, [pc, #48]	; (800d41c <RestoreNvmData+0xf8>)
 800d3ec:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800d3f0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d3f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800d3f6:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d3fa:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800d3fe:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d402:	2201      	movs	r2, #1
 800d404:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d408:	2202      	movs	r2, #2
 800d40a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d40e:	4b06      	ldr	r3, [pc, #24]	; (800d428 <RestoreNvmData+0x104>)
 800d410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d412:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800d416:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800d418:	2000      	movs	r0, #0
 800d41a:	e78a      	b.n	800d332 <RestoreNvmData+0xe>
 800d41c:	20003430 	.word	0x20003430
 800d420:	200085cc 	.word	0x200085cc
 800d424:	20008000 	.word	0x20008000
 800d428:	08016960 	.word	0x08016960

0800d42c <OnRadioRxTimeout>:
{
 800d42c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d42e:	4a07      	ldr	r2, [pc, #28]	; (800d44c <OnRadioRxTimeout+0x20>)
 800d430:	7813      	ldrb	r3, [r2, #0]
 800d432:	f043 0302 	orr.w	r3, r3, #2
 800d436:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d438:	f7fe faea 	bl	800ba10 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d43c:	4b04      	ldr	r3, [pc, #16]	; (800d450 <OnRadioRxTimeout+0x24>)
 800d43e:	2201      	movs	r2, #1
 800d440:	2100      	movs	r1, #0
 800d442:	2002      	movs	r0, #2
 800d444:	f007 fcda 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 800d448:	bd08      	pop	{r3, pc}
 800d44a:	bf00      	nop
 800d44c:	2000342c 	.word	0x2000342c
 800d450:	08016248 	.word	0x08016248

0800d454 <OnRadioTxTimeout>:
{
 800d454:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d456:	4a07      	ldr	r2, [pc, #28]	; (800d474 <OnRadioTxTimeout+0x20>)
 800d458:	7813      	ldrb	r3, [r2, #0]
 800d45a:	f043 0308 	orr.w	r3, r3, #8
 800d45e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d460:	f7fe fad6 	bl	800ba10 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <OnRadioTxTimeout+0x24>)
 800d466:	2201      	movs	r2, #1
 800d468:	2100      	movs	r1, #0
 800d46a:	2002      	movs	r0, #2
 800d46c:	f007 fcc6 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 800d470:	bd08      	pop	{r3, pc}
 800d472:	bf00      	nop
 800d474:	2000342c 	.word	0x2000342c
 800d478:	08016258 	.word	0x08016258

0800d47c <OnRadioRxDone>:
{
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	4680      	mov	r8, r0
 800d482:	460f      	mov	r7, r1
 800d484:	4616      	mov	r6, r2
 800d486:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d488:	f007 fef0 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 800d48c:	4c0c      	ldr	r4, [pc, #48]	; (800d4c0 <OnRadioRxDone+0x44>)
 800d48e:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800d490:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800d494:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800d496:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800d498:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800d49a:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <OnRadioRxDone+0x48>)
 800d49c:	781a      	ldrb	r2, [r3, #0]
 800d49e:	f042 0210 	orr.w	r2, r2, #16
 800d4a2:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d4a4:	b2d2      	uxtb	r2, r2
 800d4a6:	f042 0201 	orr.w	r2, r2, #1
 800d4aa:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800d4ac:	f7fe fab0 	bl	800ba10 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <OnRadioRxDone+0x4c>)
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	2002      	movs	r0, #2
 800d4b8:	f007 fca0 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 800d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c0:	200039dc 	.word	0x200039dc
 800d4c4:	2000342c 	.word	0x2000342c
 800d4c8:	08016268 	.word	0x08016268

0800d4cc <OnRadioTxDone>:
{
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d4d0:	f007 fecc 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 800d4d4:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <OnRadioTxDone+0x3c>)
 800d4d6:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d4d8:	466c      	mov	r4, sp
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f007 fe18 	bl	8015110 <SysTimeGet>
 800d4e0:	4b0a      	ldr	r3, [pc, #40]	; (800d50c <OnRadioTxDone+0x40>)
 800d4e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d4e6:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800d4ea:	4a09      	ldr	r2, [pc, #36]	; (800d510 <OnRadioTxDone+0x44>)
 800d4ec:	7813      	ldrb	r3, [r2, #0]
 800d4ee:	f043 0320 	orr.w	r3, r3, #32
 800d4f2:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800d4f4:	f7fe fa8c 	bl	800ba10 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d4f8:	4b06      	ldr	r3, [pc, #24]	; (800d514 <OnRadioTxDone+0x48>)
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	2002      	movs	r0, #2
 800d500:	f007 fc7c 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 800d504:	b002      	add	sp, #8
 800d506:	bd10      	pop	{r4, pc}
 800d508:	200039ec 	.word	0x200039ec
 800d50c:	20003768 	.word	0x20003768
 800d510:	2000342c 	.word	0x2000342c
 800d514:	08016278 	.word	0x08016278

0800d518 <ResetMacParameters>:
{
 800d518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d51a:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800d51c:	b918      	cbnz	r0, 800d526 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800d51e:	4b61      	ldr	r3, [pc, #388]	; (800d6a4 <ResetMacParameters+0x18c>)
 800d520:	2200      	movs	r2, #0
 800d522:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800d526:	4c5f      	ldr	r4, [pc, #380]	; (800d6a4 <ResetMacParameters+0x18c>)
 800d528:	2500      	movs	r5, #0
 800d52a:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800d52c:	4e5e      	ldr	r6, [pc, #376]	; (800d6a8 <ResetMacParameters+0x190>)
 800d52e:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800d532:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800d536:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800d53a:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800d53e:	2701      	movs	r7, #1
 800d540:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d544:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800d548:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d54c:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800d550:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800d554:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800d558:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d55c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800d560:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800d564:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d568:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d56c:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800d570:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800d574:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d578:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800d57c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800d580:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800d584:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800d588:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800d58c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800d590:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d594:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800d598:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d59c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800d5a0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800d5a4:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800d5a8:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800d5ac:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800d5b0:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800d5b4:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800d5b8:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800d5bc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800d5c0:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800d5c4:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800d5c8:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800d5cc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800d5d0:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800d5d4:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800d5d8:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800d5dc:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d5e0:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800d5e4:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d5e6:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800d5ea:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800d5ec:	4b2f      	ldr	r3, [pc, #188]	; (800d6ac <ResetMacParameters+0x194>)
 800d5ee:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d5f0:	a901      	add	r1, sp, #4
 800d5f2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800d5f6:	f002 fc77 	bl	800fee8 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800d5fa:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d5fe:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d602:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d604:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d608:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800d60c:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d610:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800d614:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d618:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d61c:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d620:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d624:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d628:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800d62c:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800d630:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d636:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800d63a:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d63e:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d642:	2302      	movs	r3, #2
 800d644:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800d648:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800d64a:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800d64c:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800d650:	b11b      	cbz	r3, 800d65a <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800d65a:	4b13      	ldr	r3, [pc, #76]	; (800d6a8 <ResetMacParameters+0x190>)
 800d65c:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800d660:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800d662:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800d666:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800d668:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800d66c:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800d66e:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800d672:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800d674:	4a0b      	ldr	r2, [pc, #44]	; (800d6a4 <ResetMacParameters+0x18c>)
 800d676:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800d67a:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800d67c:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800d680:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800d682:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800d686:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800d688:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800d68c:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800d68e:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800d692:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800d694:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800d698:	a90e      	add	r1, sp, #56	; 0x38
 800d69a:	a805      	add	r0, sp, #20
 800d69c:	f001 fc02 	bl	800eea4 <LoRaMacClassBInit>
}
 800d6a0:	b011      	add	sp, #68	; 0x44
 800d6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a4:	20008000 	.word	0x20008000
 800d6a8:	20003430 	.word	0x20003430
 800d6ac:	2000394c 	.word	0x2000394c

0800d6b0 <SwitchClass>:
{
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800d6b4:	4b45      	ldr	r3, [pc, #276]	; (800d7cc <SwitchClass+0x11c>)
 800d6b6:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800d6ba:	2d01      	cmp	r5, #1
 800d6bc:	d06e      	beq.n	800d79c <SwitchClass+0xec>
 800d6be:	2d02      	cmp	r5, #2
 800d6c0:	d074      	beq.n	800d7ac <SwitchClass+0xfc>
 800d6c2:	b10d      	cbz	r5, 800d6c8 <SwitchClass+0x18>
 800d6c4:	2003      	movs	r0, #3
}
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800d6c8:	bb58      	cbnz	r0, 800d722 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d6ca:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800d6ce:	336c      	adds	r3, #108	; 0x6c
 800d6d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6d4:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800d6d8:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800d6da:	2c01      	cmp	r4, #1
 800d6dc:	d023      	beq.n	800d726 <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800d6de:	2c02      	cmp	r4, #2
 800d6e0:	d1f1      	bne.n	800d6c6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d6e2:	4b3a      	ldr	r3, [pc, #232]	; (800d7cc <SwitchClass+0x11c>)
 800d6e4:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d6e8:	4e39      	ldr	r6, [pc, #228]	; (800d7d0 <SwitchClass+0x120>)
 800d6ea:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800d6ee:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800d6f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d6f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6f8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800d6fc:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d700:	2302      	movs	r3, #2
 800d702:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d706:	2300      	movs	r3, #0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	dd15      	ble.n	800d738 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800d70c:	4b30      	ldr	r3, [pc, #192]	; (800d7d0 <SwitchClass+0x120>)
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800d714:	4b2f      	ldr	r3, [pc, #188]	; (800d7d4 <SwitchClass+0x124>)
 800d716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d718:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800d71a:	f7ff fced 	bl	800d0f8 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800d71e:	4628      	mov	r0, r5
 800d720:	e7d1      	b.n	800d6c6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d722:	2003      	movs	r0, #3
 800d724:	e7d9      	b.n	800d6da <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800d726:	4620      	mov	r0, r4
 800d728:	f001 fbd2 	bl	800eed0 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d1d6      	bne.n	800d6de <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800d730:	4b26      	ldr	r3, [pc, #152]	; (800d7cc <SwitchClass+0x11c>)
 800d732:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d736:	e7d2      	b.n	800d6de <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d738:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d73c:	4a23      	ldr	r2, [pc, #140]	; (800d7cc <SwitchClass+0x11c>)
 800d73e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d742:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800d746:	b132      	cbz	r2, 800d756 <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800d748:	4a20      	ldr	r2, [pc, #128]	; (800d7cc <SwitchClass+0x11c>)
 800d74a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d74e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800d752:	2a02      	cmp	r2, #2
 800d754:	d002      	beq.n	800d75c <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d756:	3301      	adds	r3, #1
 800d758:	b25b      	sxtb	r3, r3
 800d75a:	e7d5      	b.n	800d708 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800d75c:	4a1b      	ldr	r2, [pc, #108]	; (800d7cc <SwitchClass+0x11c>)
 800d75e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800d762:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800d766:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800d768:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d76c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d770:	4b17      	ldr	r3, [pc, #92]	; (800d7d0 <SwitchClass+0x120>)
 800d772:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800d776:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d77a:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d77e:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800d782:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d786:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800d78a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d78e:	2203      	movs	r2, #3
 800d790:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800d794:	2201      	movs	r2, #1
 800d796:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800d79a:	e7b7      	b.n	800d70c <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800d79c:	f001 fb98 	bl	800eed0 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d190      	bne.n	800d6c6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d7a4:	4b09      	ldr	r3, [pc, #36]	; (800d7cc <SwitchClass+0x11c>)
 800d7a6:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800d7aa:	e78c      	b.n	800d6c6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800d7ac:	b958      	cbnz	r0, 800d7c6 <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800d7ae:	4b08      	ldr	r3, [pc, #32]	; (800d7d0 <SwitchClass+0x120>)
 800d7b0:	2206      	movs	r2, #6
 800d7b2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <SwitchClass+0x11c>)
 800d7b8:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <SwitchClass+0x124>)
 800d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	e77f      	b.n	800d6c6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d7c6:	2003      	movs	r0, #3
 800d7c8:	e77d      	b.n	800d6c6 <SwitchClass+0x16>
 800d7ca:	bf00      	nop
 800d7cc:	20008000 	.word	0x20008000
 800d7d0:	20003430 	.word	0x20003430
 800d7d4:	08016960 	.word	0x08016960

0800d7d8 <SendReJoinReq>:
{
 800d7d8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800d7da:	28ff      	cmp	r0, #255	; 0xff
 800d7dc:	d003      	beq.n	800d7e6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800d7de:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800d7e0:	f7ff fb4e 	bl	800ce80 <ScheduleTx>
}
 800d7e4:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800d7e6:	2000      	movs	r0, #0
 800d7e8:	f7ff ff62 	bl	800d6b0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800d7ec:	4d0a      	ldr	r5, [pc, #40]	; (800d818 <SendReJoinReq+0x40>)
 800d7ee:	2400      	movs	r4, #0
 800d7f0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800d7f4:	1cab      	adds	r3, r5, #2
 800d7f6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d7fa:	23ff      	movs	r3, #255	; 0xff
 800d7fc:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800d800:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800d804:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800d808:	f005 fafe 	bl	8012e08 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800d80c:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800d810:	f005 fadc 	bl	8012dcc <SecureElementGetDevEui>
            allowDelayedTx = false;
 800d814:	4620      	mov	r0, r4
            break;
 800d816:	e7e3      	b.n	800d7e0 <SendReJoinReq+0x8>
 800d818:	20003430 	.word	0x20003430

0800d81c <PrepareFrame>:
{
 800d81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d820:	b083      	sub	sp, #12
 800d822:	4605      	mov	r5, r0
 800d824:	460e      	mov	r6, r1
 800d826:	4617      	mov	r7, r2
 800d828:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800d82c:	4959      	ldr	r1, [pc, #356]	; (800d994 <PrepareFrame+0x178>)
 800d82e:	2200      	movs	r2, #0
 800d830:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800d832:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800d836:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800d838:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800d83a:	4698      	mov	r8, r3
 800d83c:	b1cb      	cbz	r3, 800d872 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d83e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800d994 <PrepareFrame+0x178>
 800d842:	4622      	mov	r2, r4
 800d844:	4641      	mov	r1, r8
 800d846:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800d84a:	f005 fbfa 	bl	8013042 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d84e:	b2e0      	uxtb	r0, r4
 800d850:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d854:	782b      	ldrb	r3, [r5, #0]
 800d856:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800d85a:	782b      	ldrb	r3, [r5, #0]
 800d85c:	095b      	lsrs	r3, r3, #5
 800d85e:	2b04      	cmp	r3, #4
 800d860:	d009      	beq.n	800d876 <PrepareFrame+0x5a>
 800d862:	2b07      	cmp	r3, #7
 800d864:	d079      	beq.n	800d95a <PrepareFrame+0x13e>
 800d866:	2b02      	cmp	r3, #2
 800d868:	d009      	beq.n	800d87e <PrepareFrame+0x62>
 800d86a:	2002      	movs	r0, #2
}
 800d86c:	b003      	add	sp, #12
 800d86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800d872:	4614      	mov	r4, r2
 800d874:	e7e3      	b.n	800d83e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800d876:	4b47      	ldr	r3, [pc, #284]	; (800d994 <PrepareFrame+0x178>)
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d87e:	4b45      	ldr	r3, [pc, #276]	; (800d994 <PrepareFrame+0x178>)
 800d880:	2204      	movs	r2, #4
 800d882:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d886:	1c9a      	adds	r2, r3, #2
 800d888:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d88c:	22ff      	movs	r2, #255	; 0xff
 800d88e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d892:	782a      	ldrb	r2, [r5, #0]
 800d894:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d898:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d89c:	4a3e      	ldr	r2, [pc, #248]	; (800d998 <PrepareFrame+0x17c>)
 800d89e:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800d8a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d8a6:	7832      	ldrb	r2, [r6, #0]
 800d8a8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d8ac:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d8b0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800d8b4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d8b8:	a801      	add	r0, sp, #4
 800d8ba:	f001 ff93 	bl	800f7e4 <LoRaMacCryptoGetFCntUp>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d15c      	bne.n	800d97c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d8c2:	9a01      	ldr	r2, [sp, #4]
 800d8c4:	4b33      	ldr	r3, [pc, #204]	; (800d994 <PrepareFrame+0x178>)
 800d8c6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800d8d0:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d8d4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d8d8:	4668      	mov	r0, sp
 800d8da:	f001 fc2b 	bl	800f134 <LoRaMacCommandsGetSizeSerializedCmds>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d14e      	bne.n	800d980 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d0c1      	beq.n	800d86c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d8e8:	4b2b      	ldr	r3, [pc, #172]	; (800d998 <PrepareFrame+0x17c>)
 800d8ea:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d8ee:	f7fe f8bf 	bl	800ba70 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d8f2:	4b28      	ldr	r3, [pc, #160]	; (800d994 <PrepareFrame+0x178>)
 800d8f4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800d8f8:	b113      	cbz	r3, 800d900 <PrepareFrame+0xe4>
 800d8fa:	9a00      	ldr	r2, [sp, #0]
 800d8fc:	2a0f      	cmp	r2, #15
 800d8fe:	d915      	bls.n	800d92c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d900:	b113      	cbz	r3, 800d908 <PrepareFrame+0xec>
 800d902:	9b00      	ldr	r3, [sp, #0]
 800d904:	2b0f      	cmp	r3, #15
 800d906:	d821      	bhi.n	800d94c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d908:	4a24      	ldr	r2, [pc, #144]	; (800d99c <PrepareFrame+0x180>)
 800d90a:	4669      	mov	r1, sp
 800d90c:	f001 fc1e 	bl	800f14c <LoRaMacCommandsSerializeCmds>
 800d910:	2800      	cmp	r0, #0
 800d912:	d13b      	bne.n	800d98c <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d914:	4b1f      	ldr	r3, [pc, #124]	; (800d994 <PrepareFrame+0x178>)
 800d916:	2200      	movs	r2, #0
 800d918:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d91c:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800d920:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d924:	9a00      	ldr	r2, [sp, #0]
 800d926:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800d92a:	e79f      	b.n	800d86c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d92c:	4a1c      	ldr	r2, [pc, #112]	; (800d9a0 <PrepareFrame+0x184>)
 800d92e:	4669      	mov	r1, sp
 800d930:	200f      	movs	r0, #15
 800d932:	f001 fc0b 	bl	800f14c <LoRaMacCommandsSerializeCmds>
 800d936:	bb28      	cbnz	r0, 800d984 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d938:	7833      	ldrb	r3, [r6, #0]
 800d93a:	9a00      	ldr	r2, [sp, #0]
 800d93c:	f362 0303 	bfi	r3, r2, #0, #4
 800d940:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d942:	b2da      	uxtb	r2, r3
 800d944:	4b13      	ldr	r3, [pc, #76]	; (800d994 <PrepareFrame+0x178>)
 800d946:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800d94a:	e78f      	b.n	800d86c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d94c:	4a13      	ldr	r2, [pc, #76]	; (800d99c <PrepareFrame+0x180>)
 800d94e:	4669      	mov	r1, sp
 800d950:	f001 fbfc 	bl	800f14c <LoRaMacCommandsSerializeCmds>
 800d954:	b1c0      	cbz	r0, 800d988 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d956:	2013      	movs	r0, #19
 800d958:	e788      	b.n	800d86c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d95a:	f1b8 0f00 	cmp.w	r8, #0
 800d95e:	d017      	beq.n	800d990 <PrepareFrame+0x174>
 800d960:	2800      	cmp	r0, #0
 800d962:	d083      	beq.n	800d86c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d964:	4c0b      	ldr	r4, [pc, #44]	; (800d994 <PrepareFrame+0x178>)
 800d966:	b282      	uxth	r2, r0
 800d968:	4641      	mov	r1, r8
 800d96a:	1ce0      	adds	r0, r4, #3
 800d96c:	f005 fb69 	bl	8013042 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d970:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800d974:	3301      	adds	r3, #1
 800d976:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800d978:	2000      	movs	r0, #0
 800d97a:	e777      	b.n	800d86c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d97c:	2012      	movs	r0, #18
 800d97e:	e775      	b.n	800d86c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d980:	2013      	movs	r0, #19
 800d982:	e773      	b.n	800d86c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d984:	2013      	movs	r0, #19
 800d986:	e771      	b.n	800d86c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d988:	200a      	movs	r0, #10
 800d98a:	e76f      	b.n	800d86c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d98c:	2013      	movs	r0, #19
 800d98e:	e76d      	b.n	800d86c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800d990:	2000      	movs	r0, #0
 800d992:	e76b      	b.n	800d86c <PrepareFrame+0x50>
 800d994:	20003430 	.word	0x20003430
 800d998:	20008000 	.word	0x20008000
 800d99c:	200038cc 	.word	0x200038cc
 800d9a0:	20003548 	.word	0x20003548

0800d9a4 <Send>:
{
 800d9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a8:	b08a      	sub	sp, #40	; 0x28
 800d9aa:	4617      	mov	r7, r2
 800d9ac:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d9ae:	4c44      	ldr	r4, [pc, #272]	; (800dac0 <Send+0x11c>)
 800d9b0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800d9b4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d9b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d9ba:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d9bc:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d07a      	beq.n	800daba <Send+0x116>
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800d9c8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800d9cc:	b90b      	cbnz	r3, 800d9d2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800d9d8:	4839      	ldr	r0, [pc, #228]	; (800dac0 <Send+0x11c>)
 800d9da:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800d9de:	f361 13c7 	bfi	r3, r1, #7, #1
 800d9e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d9e6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d052      	beq.n	800da94 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800d9ee:	4b34      	ldr	r3, [pc, #208]	; (800dac0 <Send+0x11c>)
 800d9f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d9f4:	b12b      	cbz	r3, 800da02 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800d9f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d9fa:	f043 0320 	orr.w	r3, r3, #32
 800d9fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800da02:	2301      	movs	r3, #1
 800da04:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800da08:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800da0c:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800da0e:	492c      	ldr	r1, [pc, #176]	; (800dac0 <Send+0x11c>)
 800da10:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800da14:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800da18:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800da1c:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800da20:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800da24:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800da28:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800da2c:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800da30:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800da34:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800da38:	460b      	mov	r3, r1
 800da3a:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800da3e:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800da42:	aa08      	add	r2, sp, #32
 800da44:	9200      	str	r2, [sp, #0]
 800da46:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800da4a:	3139      	adds	r1, #57	; 0x39
 800da4c:	a803      	add	r0, sp, #12
 800da4e:	f001 f9af 	bl	800edb0 <LoRaMacAdrCalcNext>
 800da52:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800da56:	f360 1386 	bfi	r3, r0, #6, #1
 800da5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800da5e:	f8cd 8000 	str.w	r8, [sp]
 800da62:	463b      	mov	r3, r7
 800da64:	4632      	mov	r2, r6
 800da66:	a909      	add	r1, sp, #36	; 0x24
 800da68:	4628      	mov	r0, r5
 800da6a:	f7ff fed7 	bl	800d81c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800da6e:	4604      	mov	r4, r0
 800da70:	b108      	cbz	r0, 800da76 <Send+0xd2>
 800da72:	280a      	cmp	r0, #10
 800da74:	d104      	bne.n	800da80 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800da76:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800da7a:	f7ff fa01 	bl	800ce80 <ScheduleTx>
 800da7e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800da80:	b17c      	cbz	r4, 800daa2 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800da82:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <Send+0x11c>)
 800da84:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800da88:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800da8c:	4620      	mov	r0, r4
 800da8e:	b00a      	add	sp, #40	; 0x28
 800da90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800da94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800da98:	f043 0310 	orr.w	r3, r3, #16
 800da9c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800daa0:	e7a5      	b.n	800d9ee <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800daa2:	4b07      	ldr	r3, [pc, #28]	; (800dac0 <Send+0x11c>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800daaa:	9a08      	ldr	r2, [sp, #32]
 800daac:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800daae:	f001 fb0f 	bl	800f0d0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0ea      	beq.n	800da8c <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dab6:	2413      	movs	r4, #19
 800dab8:	e7e8      	b.n	800da8c <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800daba:	2407      	movs	r4, #7
 800dabc:	e7e6      	b.n	800da8c <Send+0xe8>
 800dabe:	bf00      	nop
 800dac0:	20008000 	.word	0x20008000

0800dac4 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <LoRaMacIsBusy+0x34>)
 800dac6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d00c      	beq.n	800dae8 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800dace:	4a0b      	ldr	r2, [pc, #44]	; (800dafc <LoRaMacIsBusy+0x38>)
 800dad0:	7812      	ldrb	r2, [r2, #0]
 800dad2:	f012 0f01 	tst.w	r2, #1
 800dad6:	d109      	bne.n	800daec <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dad8:	b953      	cbnz	r3, 800daf0 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800dada:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <LoRaMacIsBusy+0x34>)
 800dadc:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d007      	beq.n	800daf4 <LoRaMacIsBusy+0x30>
    return true;
 800dae4:	2001      	movs	r0, #1
 800dae6:	4770      	bx	lr
        return false;
 800dae8:	2000      	movs	r0, #0
 800daea:	4770      	bx	lr
        return true;
 800daec:	2001      	movs	r0, #1
 800daee:	4770      	bx	lr
    return true;
 800daf0:	2001      	movs	r0, #1
 800daf2:	4770      	bx	lr
        return false;
 800daf4:	2000      	movs	r0, #0
}
 800daf6:	4770      	bx	lr
 800daf8:	20003430 	.word	0x20003430
 800dafc:	2000342c 	.word	0x2000342c

0800db00 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <LoRaMacIsStopped+0x14>)
 800db02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db06:	2b01      	cmp	r3, #1
 800db08:	d001      	beq.n	800db0e <LoRaMacIsStopped+0xe>
    return false;
 800db0a:	2000      	movs	r0, #0
 800db0c:	4770      	bx	lr
        return true;
 800db0e:	2001      	movs	r0, #1
}
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	20003430 	.word	0x20003430

0800db18 <LoRaMacProcess>:
{
 800db18:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800db1a:	f7ff f801 	bl	800cb20 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800db1e:	f001 f9e8 	bl	800eef2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800db22:	4b1f      	ldr	r3, [pc, #124]	; (800dba0 <LoRaMacProcess+0x88>)
 800db24:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800db28:	f013 0f10 	tst.w	r3, #16
 800db2c:	d10d      	bne.n	800db4a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800db2e:	f7fd fe69 	bl	800b804 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800db32:	4b1b      	ldr	r3, [pc, #108]	; (800dba0 <LoRaMacProcess+0x88>)
 800db34:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d022      	beq.n	800db82 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800db3c:	4b18      	ldr	r3, [pc, #96]	; (800dba0 <LoRaMacProcess+0x88>)
 800db3e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800db42:	f013 0f20 	tst.w	r3, #32
 800db46:	d11f      	bne.n	800db88 <LoRaMacProcess+0x70>
}
 800db48:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800db4a:	2000      	movs	r0, #0
 800db4c:	f7fd fe54 	bl	800b7f8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800db50:	f7fd fe90 	bl	800b874 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800db54:	f7fd ff80 	bl	800ba58 <IsRequestPending>
 800db58:	b110      	cbz	r0, 800db60 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800db5a:	f7fe f86f 	bl	800bc3c <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800db5e:	b918      	cbnz	r0, 800db68 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800db60:	f7ff f820 	bl	800cba4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800db64:	f7ff fa42 	bl	800cfec <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800db68:	f7ff fa7c 	bl	800d064 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800db6c:	2001      	movs	r0, #1
 800db6e:	f7fd fe43 	bl	800b7f8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800db72:	4a0b      	ldr	r2, [pc, #44]	; (800dba0 <LoRaMacProcess+0x88>)
 800db74:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800db78:	f043 0320 	orr.w	r3, r3, #32
 800db7c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800db80:	e7d5      	b.n	800db2e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800db82:	f7ff fab9 	bl	800d0f8 <OpenContinuousRxCWindow>
 800db86:	e7d9      	b.n	800db3c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800db88:	4b05      	ldr	r3, [pc, #20]	; (800dba0 <LoRaMacProcess+0x88>)
 800db8a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800db8e:	f36f 1245 	bfc	r2, #5, #1
 800db92:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800db96:	4803      	ldr	r0, [pc, #12]	; (800dba4 <LoRaMacProcess+0x8c>)
 800db98:	f7ff fb5e 	bl	800d258 <LoRaMacHandleNvm>
}
 800db9c:	e7d4      	b.n	800db48 <LoRaMacProcess+0x30>
 800db9e:	bf00      	nop
 800dba0:	20003430 	.word	0x20003430
 800dba4:	20008000 	.word	0x20008000

0800dba8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	f000 81a3 	beq.w	800defa <LoRaMacInitialization+0x352>
 800dbb4:	4688      	mov	r8, r1
 800dbb6:	4691      	mov	r9, r2
 800dbb8:	4607      	mov	r7, r0
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	f000 819f 	beq.w	800defe <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dbc0:	6803      	ldr	r3, [r0, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 819d 	beq.w	800df02 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800dbc8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 819b 	beq.w	800df06 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dbd0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 8199 	beq.w	800df0a <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800dbd8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f000 8197 	beq.w	800df0e <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f002 f951 	bl	800fe88 <RegionIsActive>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f000 8193 	beq.w	800df12 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800dbec:	4638      	mov	r0, r7
 800dbee:	f001 fb41 	bl	800f274 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800dbf2:	4ccb      	ldr	r4, [pc, #812]	; (800df20 <LoRaMacInitialization+0x378>)
 800dbf4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f005 fa39 	bl	8013072 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800dc00:	4ec8      	ldr	r6, [pc, #800]	; (800df24 <LoRaMacInitialization+0x37c>)
 800dc02:	f240 521c 	movw	r2, #1308	; 0x51c
 800dc06:	2100      	movs	r1, #0
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f005 fa32 	bl	8013072 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800dc0e:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800dc12:	2500      	movs	r5, #0
 800dc14:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800dc18:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800dc1c:	4bc2      	ldr	r3, [pc, #776]	; (800df28 <LoRaMacInitialization+0x380>)
 800dc1e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800dc22:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800dc26:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800dc2a:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800dc2c:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800dc30:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800dc32:	4bbe      	ldr	r3, [pc, #760]	; (800df2c <LoRaMacInitialization+0x384>)
 800dc34:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800dc36:	a905      	add	r1, sp, #20
 800dc38:	4648      	mov	r0, r9
 800dc3a:	f002 f955 	bl	800fee8 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dc3e:	230f      	movs	r3, #15
 800dc40:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc44:	a90a      	add	r1, sp, #40	; 0x28
 800dc46:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dc4a:	f002 f927 	bl	800fe9c <RegionGetPhyParam>
 800dc4e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800dc50:	1b40      	subs	r0, r0, r5
 800dc52:	bf18      	it	ne
 800dc54:	2001      	movne	r0, #1
 800dc56:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800dc5a:	f04f 0a0a 	mov.w	sl, #10
 800dc5e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc62:	a90a      	add	r1, sp, #40	; 0x28
 800dc64:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dc68:	f002 f918 	bl	800fe9c <RegionGetPhyParam>
 800dc6c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800dc6e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800dc72:	f04f 0906 	mov.w	r9, #6
 800dc76:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc7a:	a90a      	add	r1, sp, #40	; 0x28
 800dc7c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dc80:	f002 f90c 	bl	800fe9c <RegionGetPhyParam>
 800dc84:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800dc86:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800dc8a:	2310      	movs	r3, #16
 800dc8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc90:	a90a      	add	r1, sp, #40	; 0x28
 800dc92:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dc96:	f002 f901 	bl	800fe9c <RegionGetPhyParam>
 800dc9a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800dc9c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800dca0:	2311      	movs	r3, #17
 800dca2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dca6:	a90a      	add	r1, sp, #40	; 0x28
 800dca8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dcac:	f002 f8f6 	bl	800fe9c <RegionGetPhyParam>
 800dcb0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800dcb2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800dcb6:	2312      	movs	r3, #18
 800dcb8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcbc:	a90a      	add	r1, sp, #40	; 0x28
 800dcbe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dcc2:	f002 f8eb 	bl	800fe9c <RegionGetPhyParam>
 800dcc6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800dcc8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800dccc:	2313      	movs	r3, #19
 800dcce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcd2:	a90a      	add	r1, sp, #40	; 0x28
 800dcd4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dcd8:	f002 f8e0 	bl	800fe9c <RegionGetPhyParam>
 800dcdc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800dcde:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800dce2:	2314      	movs	r3, #20
 800dce4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dce8:	a90a      	add	r1, sp, #40	; 0x28
 800dcea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dcee:	f002 f8d5 	bl	800fe9c <RegionGetPhyParam>
 800dcf2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800dcf4:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800dcf8:	2316      	movs	r3, #22
 800dcfa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcfe:	a90a      	add	r1, sp, #40	; 0x28
 800dd00:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd04:	f002 f8ca 	bl	800fe9c <RegionGetPhyParam>
 800dd08:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800dd0a:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800dd0e:	2317      	movs	r3, #23
 800dd10:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd14:	a90a      	add	r1, sp, #40	; 0x28
 800dd16:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd1a:	f002 f8bf 	bl	800fe9c <RegionGetPhyParam>
 800dd1e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800dd20:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800dd24:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800dd28:	2318      	movs	r3, #24
 800dd2a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd2e:	a90a      	add	r1, sp, #40	; 0x28
 800dd30:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd34:	f002 f8b2 	bl	800fe9c <RegionGetPhyParam>
 800dd38:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800dd3a:	b2c0      	uxtb	r0, r0
 800dd3c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800dd40:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800dd44:	231d      	movs	r3, #29
 800dd46:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd4a:	a90a      	add	r1, sp, #40	; 0x28
 800dd4c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd50:	f002 f8a4 	bl	800fe9c <RegionGetPhyParam>
 800dd54:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800dd56:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800dd5a:	231e      	movs	r3, #30
 800dd5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd60:	a90a      	add	r1, sp, #40	; 0x28
 800dd62:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd66:	f002 f899 	bl	800fe9c <RegionGetPhyParam>
 800dd6a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800dd6c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800dd70:	231f      	movs	r3, #31
 800dd72:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd76:	a90a      	add	r1, sp, #40	; 0x28
 800dd78:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd7c:	f002 f88e 	bl	800fe9c <RegionGetPhyParam>
 800dd80:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800dd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd84:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800dd88:	2320      	movs	r3, #32
 800dd8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd8e:	a90a      	add	r1, sp, #40	; 0x28
 800dd90:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800dd94:	f002 f882 	bl	800fe9c <RegionGetPhyParam>
 800dd98:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800dd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd9c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800dda0:	230b      	movs	r3, #11
 800dda2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dda6:	a90a      	add	r1, sp, #40	; 0x28
 800dda8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ddac:	f002 f876 	bl	800fe9c <RegionGetPhyParam>
 800ddb0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800ddb2:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ddb6:	230c      	movs	r3, #12
 800ddb8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ddbc:	a90a      	add	r1, sp, #40	; 0x28
 800ddbe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ddc2:	f002 f86b 	bl	800fe9c <RegionGetPhyParam>
 800ddc6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800ddc8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800ddcc:	f04f 0b01 	mov.w	fp, #1
 800ddd0:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800ddd4:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800ddd8:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800dddc:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800dde0:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800dde4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800dde8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800ddea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ddee:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800ddf0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ddf4:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800ddf6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800ddfa:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800ddfc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800de00:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800de02:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800de06:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800de0a:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800de0e:	4628      	mov	r0, r5
 800de10:	f7ff fb82 	bl	800d518 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800de14:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800de18:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800de1c:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800de20:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800de24:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800de26:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800de28:	9500      	str	r5, [sp, #0]
 800de2a:	4b41      	ldr	r3, [pc, #260]	; (800df30 <LoRaMacInitialization+0x388>)
 800de2c:	462a      	mov	r2, r5
 800de2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de32:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800de36:	f007 f9fb 	bl	8015230 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800de3a:	9500      	str	r5, [sp, #0]
 800de3c:	4b3d      	ldr	r3, [pc, #244]	; (800df34 <LoRaMacInitialization+0x38c>)
 800de3e:	462a      	mov	r2, r5
 800de40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de44:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800de48:	f007 f9f2 	bl	8015230 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800de4c:	9500      	str	r5, [sp, #0]
 800de4e:	4b3a      	ldr	r3, [pc, #232]	; (800df38 <LoRaMacInitialization+0x390>)
 800de50:	462a      	mov	r2, r5
 800de52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de56:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800de5a:	f007 f9e9 	bl	8015230 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800de5e:	9500      	str	r5, [sp, #0]
 800de60:	4b36      	ldr	r3, [pc, #216]	; (800df3c <LoRaMacInitialization+0x394>)
 800de62:	462a      	mov	r2, r5
 800de64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de68:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800de6c:	f007 f9e0 	bl	8015230 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800de70:	af02      	add	r7, sp, #8
 800de72:	4638      	mov	r0, r7
 800de74:	f007 f96e 	bl	8015154 <SysTimeGetMcuTime>
 800de78:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800de7c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800de80:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800de84:	4b2e      	ldr	r3, [pc, #184]	; (800df40 <LoRaMacInitialization+0x398>)
 800de86:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800de88:	4b2e      	ldr	r3, [pc, #184]	; (800df44 <LoRaMacInitialization+0x39c>)
 800de8a:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800de8e:	4b2e      	ldr	r3, [pc, #184]	; (800df48 <LoRaMacInitialization+0x3a0>)
 800de90:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800de94:	4b2d      	ldr	r3, [pc, #180]	; (800df4c <LoRaMacInitialization+0x3a4>)
 800de96:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800de9a:	4b2d      	ldr	r3, [pc, #180]	; (800df50 <LoRaMacInitialization+0x3a8>)
 800de9c:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800dea0:	4b2c      	ldr	r3, [pc, #176]	; (800df54 <LoRaMacInitialization+0x3ac>)
 800dea2:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800dea6:	4b2c      	ldr	r3, [pc, #176]	; (800df58 <LoRaMacInitialization+0x3b0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800deae:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800deb0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800deb4:	f004 fdf2 	bl	8012a9c <SecureElementInit>
 800deb8:	bb80      	cbnz	r0, 800df1c <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800deba:	4620      	mov	r0, r4
 800debc:	f001 fc72 	bl	800f7a4 <LoRaMacCryptoInit>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d14b      	bne.n	800df5c <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800dec4:	f001 f898 	bl	800eff8 <LoRaMacCommandsInit>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d149      	bne.n	800df60 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800decc:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ded0:	f001 fcba 	bl	800f848 <LoRaMacCryptoSetMulticastReference>
 800ded4:	4604      	mov	r4, r0
 800ded6:	2800      	cmp	r0, #0
 800ded8:	d144      	bne.n	800df64 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800deda:	4d1f      	ldr	r5, [pc, #124]	; (800df58 <LoRaMacInitialization+0x3b0>)
 800dedc:	696b      	ldr	r3, [r5, #20]
 800dede:	4798      	blx	r3
 800dee0:	f005 f89c 	bl	801301c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dee4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800dee6:	4a0e      	ldr	r2, [pc, #56]	; (800df20 <LoRaMacInitialization+0x378>)
 800dee8:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800deec:	4798      	blx	r3
    Radio.Sleep( );
 800deee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800def0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800def2:	4658      	mov	r0, fp
 800def4:	f7fd fc80 	bl	800b7f8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800def8:	e00c      	b.n	800df14 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800defa:	2403      	movs	r4, #3
 800defc:	e00a      	b.n	800df14 <LoRaMacInitialization+0x36c>
 800defe:	2403      	movs	r4, #3
 800df00:	e008      	b.n	800df14 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df02:	2403      	movs	r4, #3
 800df04:	e006      	b.n	800df14 <LoRaMacInitialization+0x36c>
 800df06:	2403      	movs	r4, #3
 800df08:	e004      	b.n	800df14 <LoRaMacInitialization+0x36c>
 800df0a:	2403      	movs	r4, #3
 800df0c:	e002      	b.n	800df14 <LoRaMacInitialization+0x36c>
 800df0e:	2403      	movs	r4, #3
 800df10:	e000      	b.n	800df14 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800df12:	2409      	movs	r4, #9
}
 800df14:	4620      	mov	r0, r4
 800df16:	b00d      	add	sp, #52	; 0x34
 800df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800df1c:	2411      	movs	r4, #17
 800df1e:	e7f9      	b.n	800df14 <LoRaMacInitialization+0x36c>
 800df20:	20008000 	.word	0x20008000
 800df24:	20003430 	.word	0x20003430
 800df28:	01000400 	.word	0x01000400
 800df2c:	2000394c 	.word	0x2000394c
 800df30:	0800cf89 	.word	0x0800cf89
 800df34:	0800d209 	.word	0x0800d209
 800df38:	0800d1b1 	.word	0x0800d1b1
 800df3c:	0800bbd9 	.word	0x0800bbd9
 800df40:	2000342c 	.word	0x2000342c
 800df44:	0800d4cd 	.word	0x0800d4cd
 800df48:	0800d47d 	.word	0x0800d47d
 800df4c:	0800ba29 	.word	0x0800ba29
 800df50:	0800d455 	.word	0x0800d455
 800df54:	0800d42d 	.word	0x0800d42d
 800df58:	08016960 	.word	0x08016960
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800df5c:	2411      	movs	r4, #17
 800df5e:	e7d9      	b.n	800df14 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800df60:	2413      	movs	r4, #19
 800df62:	e7d7      	b.n	800df14 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800df64:	2411      	movs	r4, #17
 800df66:	e7d5      	b.n	800df14 <LoRaMacInitialization+0x36c>

0800df68 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800df68:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800df6a:	2400      	movs	r4, #0
 800df6c:	4b03      	ldr	r3, [pc, #12]	; (800df7c <LoRaMacStart+0x14>)
 800df6e:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800df72:	f7fd fc2d 	bl	800b7d0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800df76:	4620      	mov	r0, r4
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	bf00      	nop
 800df7c:	20003430 	.word	0x20003430

0800df80 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800df80:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800df82:	f7ff fd9f 	bl	800dac4 <LoRaMacIsBusy>
 800df86:	b130      	cbz	r0, 800df96 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800df88:	4b0b      	ldr	r3, [pc, #44]	; (800dfb8 <LoRaMacStop+0x38>)
 800df8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d010      	beq.n	800dfb4 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800df92:	2001      	movs	r0, #1
}
 800df94:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df96:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <LoRaMacStop+0x3c>)
 800df98:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d005      	beq.n	800dfac <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800dfa0:	4b05      	ldr	r3, [pc, #20]	; (800dfb8 <LoRaMacStop+0x38>)
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	e7f3      	b.n	800df94 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800dfac:	4b04      	ldr	r3, [pc, #16]	; (800dfc0 <LoRaMacStop+0x40>)
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	4798      	blx	r3
 800dfb2:	e7f5      	b.n	800dfa0 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e7ed      	b.n	800df94 <LoRaMacStop+0x14>
 800dfb8:	20003430 	.word	0x20003430
 800dfbc:	20008000 	.word	0x20008000
 800dfc0:	08016960 	.word	0x08016960

0800dfc4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800dfc4:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800dfc6:	4c14      	ldr	r4, [pc, #80]	; (800e018 <LoRaMacHalt+0x54>)
 800dfc8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800dfcc:	f007 f98e 	bl	80152ec <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800dfd0:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800dfd4:	f007 f98a 	bl	80152ec <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dfd8:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800dfdc:	f007 f986 	bl	80152ec <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800dfe0:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800dfe4:	f007 f982 	bl	80152ec <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800dfe8:	f000 ff70 	bl	800eecc <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800dfec:	4b0b      	ldr	r3, [pc, #44]	; (800e01c <LoRaMacHalt+0x58>)
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800dff2:	2500      	movs	r5, #0
 800dff4:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800dff8:	4e09      	ldr	r6, [pc, #36]	; (800e020 <LoRaMacHalt+0x5c>)
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff f92c 	bl	800d258 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800e000:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800e004:	4631      	mov	r1, r6
 800e006:	4807      	ldr	r0, [pc, #28]	; (800e024 <LoRaMacHalt+0x60>)
 800e008:	f005 f81b 	bl	8013042 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800e00c:	2301      	movs	r3, #1
 800e00e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800e012:	4628      	mov	r0, r5
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	bf00      	nop
 800e018:	20003430 	.word	0x20003430
 800e01c:	08016960 	.word	0x08016960
 800e020:	20008000 	.word	0x20008000
 800e024:	200085cc 	.word	0x200085cc

0800e028 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e028:	b530      	push	{r4, r5, lr}
 800e02a:	b08b      	sub	sp, #44	; 0x2c
 800e02c:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e02e:	4b31      	ldr	r3, [pc, #196]	; (800e0f4 <LoRaMacQueryTxPossible+0xcc>)
 800e030:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e032:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e034:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800e038:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e03c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800e040:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800e044:	4b2c      	ldr	r3, [pc, #176]	; (800e0f8 <LoRaMacQueryTxPossible+0xd0>)
 800e046:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800e04a:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800e052:	2900      	cmp	r1, #0
 800e054:	d048      	beq.n	800e0e8 <LoRaMacQueryTxPossible+0xc0>
 800e056:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e058:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e05c:	4b25      	ldr	r3, [pc, #148]	; (800e0f4 <LoRaMacQueryTxPossible+0xcc>)
 800e05e:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800e062:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e066:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e068:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800e06c:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e070:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800e074:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e078:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800e07c:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e080:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800e084:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e088:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e08c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e090:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800e094:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e098:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800e09c:	ab04      	add	r3, sp, #16
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	f10d 030d 	add.w	r3, sp, #13
 800e0a4:	f10d 020e 	add.w	r2, sp, #14
 800e0a8:	f10d 010f 	add.w	r1, sp, #15
 800e0ac:	a805      	add	r0, sp, #20
 800e0ae:	f000 fe7f 	bl	800edb0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e0b2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800e0b6:	f7fd fcdb 	bl	800ba70 <GetMaxAppPayloadWithoutFOptsLength>
 800e0ba:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e0bc:	a802      	add	r0, sp, #8
 800e0be:	f001 f839 	bl	800f134 <LoRaMacCommandsGetSizeSerializedCmds>
 800e0c2:	b998      	cbnz	r0, 800e0ec <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e0c4:	9b02      	ldr	r3, [sp, #8]
 800e0c6:	2b0f      	cmp	r3, #15
 800e0c8:	d80a      	bhi.n	800e0e0 <LoRaMacQueryTxPossible+0xb8>
 800e0ca:	786a      	ldrb	r2, [r5, #1]
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d807      	bhi.n	800e0e0 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e0d4:	9b02      	ldr	r3, [sp, #8]
 800e0d6:	441c      	add	r4, r3
 800e0d8:	42a2      	cmp	r2, r4
 800e0da:	d309      	bcc.n	800e0f0 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800e0dc:	b00b      	add	sp, #44	; 0x2c
 800e0de:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e0e4:	2008      	movs	r0, #8
 800e0e6:	e7f9      	b.n	800e0dc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e0e8:	2003      	movs	r0, #3
 800e0ea:	e7f7      	b.n	800e0dc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e0ec:	2013      	movs	r0, #19
 800e0ee:	e7f5      	b.n	800e0dc <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e0f0:	2008      	movs	r0, #8
 800e0f2:	e7f3      	b.n	800e0dc <LoRaMacQueryTxPossible+0xb4>
 800e0f4:	20008000 	.word	0x20008000
 800e0f8:	20003430 	.word	0x20003430

0800e0fc <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	f000 815f 	beq.w	800e3c0 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800e102:	b510      	push	{r4, lr}
 800e104:	b084      	sub	sp, #16
 800e106:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800e108:	7800      	ldrb	r0, [r0, #0]
 800e10a:	2841      	cmp	r0, #65	; 0x41
 800e10c:	f200 8154 	bhi.w	800e3b8 <LoRaMacMibGetRequestConfirm+0x2bc>
 800e110:	e8df f010 	tbh	[pc, r0, lsl #1]
 800e114:	00470042 	.word	0x00470042
 800e118:	0052004d 	.word	0x0052004d
 800e11c:	005d0057 	.word	0x005d0057
 800e120:	01520063 	.word	0x01520063
 800e124:	01520152 	.word	0x01520152
 800e128:	01520152 	.word	0x01520152
 800e12c:	01520152 	.word	0x01520152
 800e130:	006b0152 	.word	0x006b0152
 800e134:	00770071 	.word	0x00770071
 800e138:	008c0084 	.word	0x008c0084
 800e13c:	009c0094 	.word	0x009c0094
 800e140:	00a400b1 	.word	0x00a400b1
 800e144:	00c400be 	.word	0x00c400be
 800e148:	00ce00c9 	.word	0x00ce00c9
 800e14c:	00d800d3 	.word	0x00d800d3
 800e150:	00ee00dd 	.word	0x00ee00dd
 800e154:	010000f4 	.word	0x010000f4
 800e158:	010600fa 	.word	0x010600fa
 800e15c:	0111010b 	.word	0x0111010b
 800e160:	0117011f 	.word	0x0117011f
 800e164:	0152011b 	.word	0x0152011b
 800e168:	01520125 	.word	0x01520125
 800e16c:	01520152 	.word	0x01520152
 800e170:	01520152 	.word	0x01520152
 800e174:	01520152 	.word	0x01520152
 800e178:	01520152 	.word	0x01520152
 800e17c:	01520152 	.word	0x01520152
 800e180:	01520152 	.word	0x01520152
 800e184:	01520152 	.word	0x01520152
 800e188:	0134012e 	.word	0x0134012e
 800e18c:	0140013a 	.word	0x0140013a
 800e190:	014c0146 	.word	0x014c0146
 800e194:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e198:	4b8c      	ldr	r3, [pc, #560]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e19a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e19e:	7123      	strb	r3, [r4, #4]
            break;
 800e1a0:	e111      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e1a2:	4b8a      	ldr	r3, [pc, #552]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e1a8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1aa:	2000      	movs	r0, #0
            break;
 800e1ac:	e10b      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800e1ae:	6860      	ldr	r0, [r4, #4]
 800e1b0:	f004 fe0c 	bl	8012dcc <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1b4:	2000      	movs	r0, #0
            break;
 800e1b6:	e106      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800e1b8:	6860      	ldr	r0, [r4, #4]
 800e1ba:	f004 fe25 	bl	8012e08 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1be:	2000      	movs	r0, #0
            break;
 800e1c0:	e101      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e1c2:	4b82      	ldr	r3, [pc, #520]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1c4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e1c8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1ca:	2000      	movs	r0, #0
            break;
 800e1cc:	e0fb      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e1ce:	4b7f      	ldr	r3, [pc, #508]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1d4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1d6:	2000      	movs	r0, #0
            break;
 800e1d8:	e0f5      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800e1da:	1d21      	adds	r1, r4, #4
 800e1dc:	4b7b      	ldr	r3, [pc, #492]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1de:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e1e2:	f004 fe2d 	bl	8012e40 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1e6:	2000      	movs	r0, #0
            break;
 800e1e8:	e0ed      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800e1ea:	4b78      	ldr	r3, [pc, #480]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1ec:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800e1f0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1f2:	2000      	movs	r0, #0
            break;
 800e1f4:	e0e7      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e1f6:	4b75      	ldr	r3, [pc, #468]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e1f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e1fc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e1fe:	2000      	movs	r0, #0
            break;
 800e200:	e0e1      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e202:	231c      	movs	r3, #28
 800e204:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e208:	a902      	add	r1, sp, #8
 800e20a:	4b70      	ldr	r3, [pc, #448]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e20c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e210:	f001 fe44 	bl	800fe9c <RegionGetPhyParam>
 800e214:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e216:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e218:	2000      	movs	r0, #0
            break;
 800e21a:	e0d4      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e21c:	3404      	adds	r4, #4
 800e21e:	4b6c      	ldr	r3, [pc, #432]	; (800e3d0 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800e220:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e224:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e228:	2000      	movs	r0, #0
            break;
 800e22a:	e0cc      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e22c:	3404      	adds	r4, #4
 800e22e:	4b69      	ldr	r3, [pc, #420]	; (800e3d4 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800e230:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e234:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e238:	2000      	movs	r0, #0
            break;
 800e23a:	e0c4      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800e23c:	3404      	adds	r4, #4
 800e23e:	4b66      	ldr	r3, [pc, #408]	; (800e3d8 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800e240:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e244:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e248:	2000      	movs	r0, #0
            break;
 800e24a:	e0bc      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e24c:	3404      	adds	r4, #4
 800e24e:	4b63      	ldr	r3, [pc, #396]	; (800e3dc <LoRaMacMibGetRequestConfirm+0x2e0>)
 800e250:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e254:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e258:	2000      	movs	r0, #0
            break;
 800e25a:	e0b4      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e25c:	231a      	movs	r3, #26
 800e25e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e262:	a902      	add	r1, sp, #8
 800e264:	4b59      	ldr	r3, [pc, #356]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e266:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e26a:	f001 fe17 	bl	800fe9c <RegionGetPhyParam>
 800e26e:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e270:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e272:	2000      	movs	r0, #0
            break;
 800e274:	e0a7      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e276:	2319      	movs	r3, #25
 800e278:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e27c:	a902      	add	r1, sp, #8
 800e27e:	4b53      	ldr	r3, [pc, #332]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e280:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e284:	f001 fe0a 	bl	800fe9c <RegionGetPhyParam>
 800e288:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e28a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e28c:	2000      	movs	r0, #0
            break;
 800e28e:	e09a      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e290:	4b4e      	ldr	r3, [pc, #312]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e292:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800e296:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e298:	2000      	movs	r0, #0
            break;
 800e29a:	e094      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800e29c:	4b4b      	ldr	r3, [pc, #300]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2a0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2a2:	2000      	movs	r0, #0
            break;
 800e2a4:	e08f      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800e2a6:	4b49      	ldr	r3, [pc, #292]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2aa:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2ac:	2000      	movs	r0, #0
            break;
 800e2ae:	e08a      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800e2b0:	4b46      	ldr	r3, [pc, #280]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2b4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2b6:	2000      	movs	r0, #0
            break;
 800e2b8:	e085      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800e2ba:	4b44      	ldr	r3, [pc, #272]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2be:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2c0:	2000      	movs	r0, #0
            break;
 800e2c2:	e080      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800e2c4:	4b41      	ldr	r3, [pc, #260]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2c8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2ca:	2000      	movs	r0, #0
            break;
 800e2cc:	e07b      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e2d4:	4b3d      	ldr	r3, [pc, #244]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2d6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e2da:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2de:	a902      	add	r1, sp, #8
 800e2e0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e2e4:	f001 fdda 	bl	800fe9c <RegionGetPhyParam>
 800e2e8:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800e2ea:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2ec:	2000      	movs	r0, #0
            break;
 800e2ee:	e06a      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e2f0:	4b36      	ldr	r3, [pc, #216]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2f2:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800e2f6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e2f8:	2000      	movs	r0, #0
            break;
 800e2fa:	e064      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e2fc:	4b33      	ldr	r3, [pc, #204]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e2fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e302:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e304:	2000      	movs	r0, #0
            break;
 800e306:	e05e      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e308:	4b30      	ldr	r3, [pc, #192]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e30a:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800e30e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e310:	2000      	movs	r0, #0
            break;
 800e312:	e058      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e314:	4b2d      	ldr	r3, [pc, #180]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e316:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e31a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e31c:	2000      	movs	r0, #0
            break;
 800e31e:	e052      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800e320:	4b2a      	ldr	r3, [pc, #168]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e324:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e326:	2000      	movs	r0, #0
            break;
 800e328:	e04d      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800e32a:	4b28      	ldr	r3, [pc, #160]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e32c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e330:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e332:	2000      	movs	r0, #0
            break;
 800e334:	e047      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e336:	4b25      	ldr	r3, [pc, #148]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e33c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e33e:	2000      	movs	r0, #0
            break;
 800e340:	e041      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e342:	4b22      	ldr	r3, [pc, #136]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e344:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e346:	2000      	movs	r0, #0
            break;
 800e348:	e03d      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e34a:	4b25      	ldr	r3, [pc, #148]	; (800e3e0 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800e34c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e34e:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e350:	e039      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e352:	4b1e      	ldr	r3, [pc, #120]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e354:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e358:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e35a:	2000      	movs	r0, #0
            break;
 800e35c:	e033      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e35e:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e360:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e364:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e366:	f001 fec1 	bl	80100ec <RegionGetVersion>
 800e36a:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e36c:	2000      	movs	r0, #0
            break;
 800e36e:	e02a      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e370:	4b16      	ldr	r3, [pc, #88]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e376:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e378:	2000      	movs	r0, #0
            break;
 800e37a:	e024      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800e37c:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e37e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800e382:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e384:	2000      	movs	r0, #0
            break;
 800e386:	e01e      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e38a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800e38e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e390:	2000      	movs	r0, #0
            break;
 800e392:	e018      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e394:	4b0d      	ldr	r3, [pc, #52]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e396:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800e39a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e39c:	2000      	movs	r0, #0
            break;
 800e39e:	e012      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e3a2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800e3a6:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3a8:	2000      	movs	r0, #0
            break;
 800e3aa:	e00c      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e3ac:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800e3ae:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800e3b2:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e3b4:	2000      	movs	r0, #0
            break;
 800e3b6:	e006      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f000 fd8b 	bl	800eed4 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800e3be:	e002      	b.n	800e3c6 <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e3c0:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800e3c2:	4770      	bx	lr
    switch( mibGet->Type )
 800e3c4:	2018      	movs	r0, #24
}
 800e3c6:	b004      	add	sp, #16
 800e3c8:	bd10      	pop	{r4, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20008000 	.word	0x20008000
 800e3d0:	2000806c 	.word	0x2000806c
 800e3d4:	200080b4 	.word	0x200080b4
 800e3d8:	20008074 	.word	0x20008074
 800e3dc:	200080bc 	.word	0x200080bc
 800e3e0:	200085cc 	.word	0x200085cc

0800e3e4 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f000 827f 	beq.w	800e8e8 <LoRaMacMibSetRequestConfirm+0x504>
{
 800e3ea:	b530      	push	{r4, r5, lr}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e3f0:	4b9b      	ldr	r3, [pc, #620]	; (800e660 <LoRaMacMibSetRequestConfirm+0x27c>)
 800e3f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3f6:	f013 0f02 	tst.w	r3, #2
 800e3fa:	f040 8277 	bne.w	800e8ec <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800e3fe:	7805      	ldrb	r5, [r0, #0]
 800e400:	2d41      	cmp	r5, #65	; 0x41
 800e402:	f200 826e 	bhi.w	800e8e2 <LoRaMacMibSetRequestConfirm+0x4fe>
 800e406:	e8df f015 	tbh	[pc, r5, lsl #1]
 800e40a:	0042      	.short	0x0042
 800e40c:	0058004f 	.word	0x0058004f
 800e410:	0066005f 	.word	0x0066005f
 800e414:	0072006c 	.word	0x0072006c
 800e418:	008b0080 	.word	0x008b0080
 800e41c:	00a10096 	.word	0x00a10096
 800e420:	00b700ac 	.word	0x00b700ac
 800e424:	00ce00c2 	.word	0x00ce00c2
 800e428:	00e500da 	.word	0x00e500da
 800e42c:	00eb026c 	.word	0x00eb026c
 800e430:	01350111 	.word	0x01350111
 800e434:	018d0163 	.word	0x018d0163
 800e438:	019d017d 	.word	0x019d017d
 800e43c:	01ad01a8 	.word	0x01ad01a8
 800e440:	01b701b2 	.word	0x01b701b2
 800e444:	026c01bc 	.word	0x026c01bc
 800e448:	01d601c1 	.word	0x01d601c1
 800e44c:	01ef0204 	.word	0x01ef0204
 800e450:	02200219 	.word	0x02200219
 800e454:	022e0228 	.word	0x022e0228
 800e458:	026c0234 	.word	0x026c0234
 800e45c:	026c0237 	.word	0x026c0237
 800e460:	026c026c 	.word	0x026c026c
 800e464:	026c026c 	.word	0x026c026c
 800e468:	026c026c 	.word	0x026c026c
 800e46c:	026c026c 	.word	0x026c026c
 800e470:	026c026c 	.word	0x026c026c
 800e474:	026c026c 	.word	0x026c026c
 800e478:	026c026c 	.word	0x026c026c
 800e47c:	0248026c 	.word	0x0248026c
 800e480:	0254024e 	.word	0x0254024e
 800e484:	0260025a 	.word	0x0260025a
 800e488:	02730266 	.word	0x02730266
 800e48c:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e48e:	7900      	ldrb	r0, [r0, #4]
 800e490:	f7ff f90e 	bl	800d6b0 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800e494:	b930      	cbnz	r0, 800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e496:	4a72      	ldr	r2, [pc, #456]	; (800e660 <LoRaMacMibSetRequestConfirm+0x27c>)
 800e498:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800e49c:	f043 0320 	orr.w	r3, r3, #32
 800e4a0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800e4a4:	b005      	add	sp, #20
 800e4a6:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e4a8:	7903      	ldrb	r3, [r0, #4]
 800e4aa:	2b02      	cmp	r3, #2
 800e4ac:	f000 8222 	beq.w	800e8f4 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800e4b0:	4a6c      	ldr	r2, [pc, #432]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e4b2:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	e7ed      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e4ba:	6840      	ldr	r0, [r0, #4]
 800e4bc:	f004 fc78 	bl	8012db0 <SecureElementSetDevEui>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d0e8      	beq.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4c4:	2003      	movs	r0, #3
 800e4c6:	e7ed      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e4c8:	6840      	ldr	r0, [r0, #4]
 800e4ca:	f004 fc8d 	bl	8012de8 <SecureElementSetJoinEui>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d0e1      	beq.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	e7e6      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800e4d6:	7902      	ldrb	r2, [r0, #4]
 800e4d8:	4b62      	ldr	r3, [pc, #392]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e4da:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e7d9      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800e4e2:	6842      	ldr	r2, [r0, #4]
 800e4e4:	4b5f      	ldr	r3, [pc, #380]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e4e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	e7d3      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800e4ee:	6841      	ldr	r1, [r0, #4]
 800e4f0:	4b5c      	ldr	r3, [pc, #368]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e4f2:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e4f6:	f004 fc95 	bl	8012e24 <SecureElementSetDevAddr>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	f040 81fc 	bne.w	800e8f8 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800e500:	6862      	ldr	r2, [r4, #4]
 800e502:	4b58      	ldr	r3, [pc, #352]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e504:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800e508:	e7c5      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800e50a:	6841      	ldr	r1, [r0, #4]
 800e50c:	2900      	cmp	r1, #0
 800e50e:	f000 81f5 	beq.w	800e8fc <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e512:	2000      	movs	r0, #0
 800e514:	f001 faa2 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e518:	2800      	cmp	r0, #0
 800e51a:	d0bc      	beq.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e51c:	2011      	movs	r0, #17
 800e51e:	e7c1      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800e520:	6841      	ldr	r1, [r0, #4]
 800e522:	2900      	cmp	r1, #0
 800e524:	f000 81ec 	beq.w	800e900 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e528:	2001      	movs	r0, #1
 800e52a:	f001 fa97 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d0b0      	beq.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e532:	2011      	movs	r0, #17
 800e534:	e7b6      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800e536:	6841      	ldr	r1, [r0, #4]
 800e538:	2900      	cmp	r1, #0
 800e53a:	f000 81e3 	beq.w	800e904 <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800e53e:	2008      	movs	r0, #8
 800e540:	f001 fa8c 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e544:	2800      	cmp	r0, #0
 800e546:	d0a5      	beq.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e548:	2011      	movs	r0, #17
 800e54a:	e7ab      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800e54c:	6841      	ldr	r1, [r0, #4]
 800e54e:	2900      	cmp	r1, #0
 800e550:	f000 81da 	beq.w	800e908 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e554:	2009      	movs	r0, #9
 800e556:	f001 fa81 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d09a      	beq.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e55e:	2011      	movs	r0, #17
 800e560:	e7a0      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800e562:	6841      	ldr	r1, [r0, #4]
 800e564:	2900      	cmp	r1, #0
 800e566:	f000 81d1 	beq.w	800e90c <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e56a:	200c      	movs	r0, #12
 800e56c:	f001 fa76 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e570:	2800      	cmp	r0, #0
 800e572:	d08f      	beq.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e574:	2011      	movs	r0, #17
 800e576:	e795      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800e578:	6841      	ldr	r1, [r0, #4]
 800e57a:	2900      	cmp	r1, #0
 800e57c:	f000 81c8 	beq.w	800e910 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e580:	200d      	movs	r0, #13
 800e582:	f001 fa6b 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e586:	2800      	cmp	r0, #0
 800e588:	d084      	beq.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e58a:	2011      	movs	r0, #17
 800e58c:	e78a      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800e58e:	6841      	ldr	r1, [r0, #4]
 800e590:	2900      	cmp	r1, #0
 800e592:	f000 81bf 	beq.w	800e914 <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e596:	200e      	movs	r0, #14
 800e598:	f001 fa60 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f43f af79 	beq.w	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e5a2:	2011      	movs	r0, #17
 800e5a4:	e77e      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e5a6:	6841      	ldr	r1, [r0, #4]
 800e5a8:	2900      	cmp	r1, #0
 800e5aa:	f000 81b5 	beq.w	800e918 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e5ae:	200f      	movs	r0, #15
 800e5b0:	f001 fa54 	bl	800fa5c <LoRaMacCryptoSetKey>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f43f af6d 	beq.w	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e5ba:	2011      	movs	r0, #17
 800e5bc:	e772      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e5be:	7900      	ldrb	r0, [r0, #4]
 800e5c0:	4b28      	ldr	r3, [pc, #160]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e5c2:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e5c6:	4c28      	ldr	r4, [pc, #160]	; (800e668 <LoRaMacMibSetRequestConfirm+0x284>)
 800e5c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5ca:	4798      	blx	r3
            Radio.Sleep( );
 800e5cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5ce:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	e760      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e5d4:	7902      	ldrb	r2, [r0, #4]
 800e5d6:	4b23      	ldr	r3, [pc, #140]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e5d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e75a      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e5e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e5e4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e5e8:	4b1e      	ldr	r3, [pc, #120]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e5ea:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e5ee:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800e5f2:	2207      	movs	r2, #7
 800e5f4:	a901      	add	r1, sp, #4
 800e5f6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e5fa:	f001 fc83 	bl	800ff04 <RegionVerify>
 800e5fe:	b908      	cbnz	r0, 800e604 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e600:	2003      	movs	r0, #3
 800e602:	e747      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800e604:	6863      	ldr	r3, [r4, #4]
 800e606:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800e608:	2200      	movs	r2, #0
 800e60a:	a901      	add	r1, sp, #4
 800e60c:	4b15      	ldr	r3, [pc, #84]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e60e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e612:	f001 fc77 	bl	800ff04 <RegionVerify>
 800e616:	2800      	cmp	r0, #0
 800e618:	f000 8180 	beq.w	800e91c <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e61c:	4b13      	ldr	r3, [pc, #76]	; (800e66c <LoRaMacMibSetRequestConfirm+0x288>)
 800e61e:	3404      	adds	r4, #4
 800e620:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e624:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e628:	2000      	movs	r0, #0
 800e62a:	e733      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e62c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e630:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <LoRaMacMibSetRequestConfirm+0x280>)
 800e636:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e63a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e63e:	2207      	movs	r2, #7
 800e640:	a901      	add	r1, sp, #4
 800e642:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e646:	f001 fc5d 	bl	800ff04 <RegionVerify>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	f000 8168 	beq.w	800e920 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e650:	4b07      	ldr	r3, [pc, #28]	; (800e670 <LoRaMacMibSetRequestConfirm+0x28c>)
 800e652:	3404      	adds	r4, #4
 800e654:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e658:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e65c:	2000      	movs	r0, #0
 800e65e:	e719      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
 800e660:	20003430 	.word	0x20003430
 800e664:	20008000 	.word	0x20008000
 800e668:	08016960 	.word	0x08016960
 800e66c:	2000806c 	.word	0x2000806c
 800e670:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e674:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e678:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e67c:	4bb0      	ldr	r3, [pc, #704]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e67e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e682:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e686:	2207      	movs	r2, #7
 800e688:	a901      	add	r1, sp, #4
 800e68a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e68e:	f001 fc39 	bl	800ff04 <RegionVerify>
 800e692:	2800      	cmp	r0, #0
 800e694:	f000 8146 	beq.w	800e924 <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800e698:	4ba9      	ldr	r3, [pc, #676]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e69a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800e69e:	3404      	adds	r4, #4
 800e6a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e6a4:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e6a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d001      	beq.n	800e6b4 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	e6ef      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800e6b4:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800e6b8:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	f43f aee9 	beq.w	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800e6c2:	4ba0      	ldr	r3, [pc, #640]	; (800e944 <LoRaMacMibSetRequestConfirm+0x560>)
 800e6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c6:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800e6c8:	f7fe fd16 	bl	800d0f8 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	e6e1      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800e6d0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800e6d4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e6d8:	4b99      	ldr	r3, [pc, #612]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e6da:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e6de:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800e6e2:	2207      	movs	r2, #7
 800e6e4:	a901      	add	r1, sp, #4
 800e6e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e6ea:	f001 fc0b 	bl	800ff04 <RegionVerify>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f000 811a 	beq.w	800e928 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800e6f4:	4b94      	ldr	r3, [pc, #592]	; (800e948 <LoRaMacMibSetRequestConfirm+0x564>)
 800e6f6:	3404      	adds	r4, #4
 800e6f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e6fc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e700:	2000      	movs	r0, #0
 800e702:	e6c7      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800e704:	6843      	ldr	r3, [r0, #4]
 800e706:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e708:	2301      	movs	r3, #1
 800e70a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e70e:	a902      	add	r1, sp, #8
 800e710:	4b8b      	ldr	r3, [pc, #556]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e712:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e716:	f001 fc13 	bl	800ff40 <RegionChanMaskSet>
 800e71a:	b108      	cbz	r0, 800e720 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e71c:	2000      	movs	r0, #0
 800e71e:	e6b9      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e720:	2003      	movs	r0, #3
 800e722:	e6bf      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e724:	6843      	ldr	r3, [r0, #4]
 800e726:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e728:	2300      	movs	r3, #0
 800e72a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800e72e:	a902      	add	r1, sp, #8
 800e730:	4b83      	ldr	r3, [pc, #524]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e732:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e736:	f001 fc03 	bl	800ff40 <RegionChanMaskSet>
 800e73a:	b108      	cbz	r0, 800e740 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e73c:	2000      	movs	r0, #0
 800e73e:	e6a9      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e740:	2003      	movs	r0, #3
 800e742:	e6af      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800e744:	7902      	ldrb	r2, [r0, #4]
 800e746:	1e53      	subs	r3, r2, #1
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b0e      	cmp	r3, #14
 800e74c:	f200 80ee 	bhi.w	800e92c <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800e750:	4b7b      	ldr	r3, [pc, #492]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e752:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e756:	2000      	movs	r0, #0
 800e758:	e69c      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e75a:	6842      	ldr	r2, [r0, #4]
 800e75c:	4b78      	ldr	r3, [pc, #480]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e75e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e760:	2000      	movs	r0, #0
 800e762:	e698      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e764:	6842      	ldr	r2, [r0, #4]
 800e766:	4b76      	ldr	r3, [pc, #472]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e768:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e76a:	2000      	movs	r0, #0
 800e76c:	e693      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e76e:	6842      	ldr	r2, [r0, #4]
 800e770:	4b73      	ldr	r3, [pc, #460]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e772:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e774:	2000      	movs	r0, #0
 800e776:	e68e      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e778:	6842      	ldr	r2, [r0, #4]
 800e77a:	4b71      	ldr	r3, [pc, #452]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e77c:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e77e:	2000      	movs	r0, #0
 800e780:	e689      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e782:	6842      	ldr	r2, [r0, #4]
 800e784:	4b6e      	ldr	r3, [pc, #440]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e786:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e788:	2000      	movs	r0, #0
 800e78a:	e684      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e78c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e790:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800e794:	2206      	movs	r2, #6
 800e796:	a901      	add	r1, sp, #4
 800e798:	4b69      	ldr	r3, [pc, #420]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e79a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e79e:	f001 fbb1 	bl	800ff04 <RegionVerify>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	f000 80c4 	beq.w	800e930 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800e7a8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e7ac:	4b64      	ldr	r3, [pc, #400]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e7ae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7b2:	2000      	movs	r0, #0
 800e7b4:	e66e      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e7b6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e7ba:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e7be:	4b60      	ldr	r3, [pc, #384]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e7c0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800e7c4:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800e7c8:	2205      	movs	r2, #5
 800e7ca:	a901      	add	r1, sp, #4
 800e7cc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e7d0:	f001 fb98 	bl	800ff04 <RegionVerify>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f000 80ad 	beq.w	800e934 <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e7da:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e7de:	4b58      	ldr	r3, [pc, #352]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e7e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e655      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e7e8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e7ec:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800e7f0:	220a      	movs	r2, #10
 800e7f2:	a901      	add	r1, sp, #4
 800e7f4:	4b52      	ldr	r3, [pc, #328]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e7f6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e7fa:	f001 fb83 	bl	800ff04 <RegionVerify>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f000 809a 	beq.w	800e938 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800e804:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e808:	4b4d      	ldr	r3, [pc, #308]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e80a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e80e:	2000      	movs	r0, #0
 800e810:	e640      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e812:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800e816:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800e81a:	2209      	movs	r2, #9
 800e81c:	a901      	add	r1, sp, #4
 800e81e:	4b48      	ldr	r3, [pc, #288]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e820:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e824:	f001 fb6e 	bl	800ff04 <RegionVerify>
 800e828:	2800      	cmp	r0, #0
 800e82a:	f000 8087 	beq.w	800e93c <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800e82e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800e832:	4b43      	ldr	r3, [pc, #268]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e838:	2000      	movs	r0, #0
 800e83a:	e62b      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e83c:	6842      	ldr	r2, [r0, #4]
 800e83e:	4b40      	ldr	r3, [pc, #256]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e840:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800e844:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e846:	2000      	movs	r0, #0
 800e848:	e625      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e84a:	7902      	ldrb	r2, [r0, #4]
 800e84c:	4b3c      	ldr	r3, [pc, #240]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e84e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800e852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e856:	2000      	movs	r0, #0
 800e858:	e61d      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e85a:	6842      	ldr	r2, [r0, #4]
 800e85c:	4b38      	ldr	r3, [pc, #224]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e862:	2000      	movs	r0, #0
 800e864:	e617      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800e866:	6842      	ldr	r2, [r0, #4]
 800e868:	4b35      	ldr	r3, [pc, #212]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e86a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e86e:	2000      	movs	r0, #0
 800e870:	e611      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800e872:	f7fe fd57 	bl	800d324 <RestoreNvmData>
            break;
 800e876:	e60d      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800e878:	7983      	ldrb	r3, [r0, #6]
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d901      	bls.n	800e882 <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e87e:	2003      	movs	r0, #3
 800e880:	e610      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800e882:	6842      	ldr	r2, [r0, #4]
 800e884:	4b2e      	ldr	r3, [pc, #184]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e886:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800e88a:	6840      	ldr	r0, [r0, #4]
 800e88c:	f000 ffa2 	bl	800f7d4 <LoRaMacCryptoSetLrWanVersion>
 800e890:	2800      	cmp	r0, #0
 800e892:	f43f ae00 	beq.w	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e896:	2011      	movs	r0, #17
 800e898:	e604      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800e89a:	6842      	ldr	r2, [r0, #4]
 800e89c:	4b28      	ldr	r3, [pc, #160]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e89e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	e5f7      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800e8a6:	7902      	ldrb	r2, [r0, #4]
 800e8a8:	4b25      	ldr	r3, [pc, #148]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e8aa:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	e5f1      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e8b2:	8882      	ldrh	r2, [r0, #4]
 800e8b4:	4b22      	ldr	r3, [pc, #136]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e8b6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	e5eb      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e8be:	8882      	ldrh	r2, [r0, #4]
 800e8c0:	4b1f      	ldr	r3, [pc, #124]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e8c2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	e5e5      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800e8ca:	8882      	ldrh	r2, [r0, #4]
 800e8cc:	4b1c      	ldr	r3, [pc, #112]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e8ce:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	e5df      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800e8d6:	8882      	ldrh	r2, [r0, #4]
 800e8d8:	4b19      	ldr	r3, [pc, #100]	; (800e940 <LoRaMacMibSetRequestConfirm+0x55c>)
 800e8da:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e8de:	2000      	movs	r0, #0
 800e8e0:	e5d9      	b.n	800e496 <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800e8e2:	f000 faf9 	bl	800eed8 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800e8e6:	e5d5      	b.n	800e494 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e8e8:	2003      	movs	r0, #3
}
 800e8ea:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	e5d9      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800e8f0:	2018      	movs	r0, #24
 800e8f2:	e5d7      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8f4:	2003      	movs	r0, #3
 800e8f6:	e5d5      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8f8:	2003      	movs	r0, #3
 800e8fa:	e5d3      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8fc:	2003      	movs	r0, #3
 800e8fe:	e5d1      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e900:	2003      	movs	r0, #3
 800e902:	e5cf      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e904:	2003      	movs	r0, #3
 800e906:	e5cd      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e908:	2003      	movs	r0, #3
 800e90a:	e5cb      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e90c:	2003      	movs	r0, #3
 800e90e:	e5c9      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e910:	2003      	movs	r0, #3
 800e912:	e5c7      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e914:	2003      	movs	r0, #3
 800e916:	e5c5      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e918:	2003      	movs	r0, #3
 800e91a:	e5c3      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e91c:	2003      	movs	r0, #3
 800e91e:	e5c1      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e920:	2003      	movs	r0, #3
 800e922:	e5bf      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e924:	2003      	movs	r0, #3
 800e926:	e5bd      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e928:	2003      	movs	r0, #3
 800e92a:	e5bb      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e92c:	2003      	movs	r0, #3
 800e92e:	e5b9      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e930:	2003      	movs	r0, #3
 800e932:	e5b7      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e934:	2003      	movs	r0, #3
 800e936:	e5b5      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e938:	2003      	movs	r0, #3
 800e93a:	e5b3      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e93c:	2003      	movs	r0, #3
 800e93e:	e5b1      	b.n	800e4a4 <LoRaMacMibSetRequestConfirm+0xc0>
 800e940:	20008000 	.word	0x20008000
 800e944:	08016960 	.word	0x08016960
 800e948:	200080bc 	.word	0x200080bc

0800e94c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800e94c:	b570      	push	{r4, r5, r6, lr}
 800e94e:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e950:	2300      	movs	r3, #0
 800e952:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800e956:	2800      	cmp	r0, #0
 800e958:	f000 80f3 	beq.w	800eb42 <LoRaMacMlmeRequest+0x1f6>
 800e95c:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800e95e:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800e960:	f7ff f8b0 	bl	800dac4 <LoRaMacIsBusy>
 800e964:	b118      	cbz	r0, 800e96e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800e966:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800e968:	4620      	mov	r0, r4
 800e96a:	b006      	add	sp, #24
 800e96c:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800e96e:	f000 fd65 	bl	800f43c <LoRaMacConfirmQueueIsFull>
 800e972:	b108      	cbz	r0, 800e978 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800e974:	2401      	movs	r4, #1
 800e976:	e7f7      	b.n	800e968 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800e978:	f000 fd5a 	bl	800f430 <LoRaMacConfirmQueueGetCnt>
 800e97c:	b308      	cbz	r0, 800e9c2 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e97e:	4b72      	ldr	r3, [pc, #456]	; (800eb48 <LoRaMacMlmeRequest+0x1fc>)
 800e980:	2101      	movs	r1, #1
 800e982:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e986:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800e98a:	f042 0204 	orr.w	r2, r2, #4
 800e98e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800e992:	782b      	ldrb	r3, [r5, #0]
 800e994:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e998:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800e99c:	2200      	movs	r2, #0
 800e99e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800e9a2:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800e9a6:	461c      	mov	r4, r3
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	2b0c      	cmp	r3, #12
 800e9ac:	f200 80af 	bhi.w	800eb0e <LoRaMacMlmeRequest+0x1c2>
 800e9b0:	e8df f003 	tbb	[pc, r3]
 800e9b4:	adadad0d 	.word	0xadadad0d
 800e9b8:	adad675d 	.word	0xadad675d
 800e9bc:	7f9ead70 	.word	0x7f9ead70
 800e9c0:	95          	.byte	0x95
 800e9c1:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800e9c2:	2214      	movs	r2, #20
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	4861      	ldr	r0, [pc, #388]	; (800eb4c <LoRaMacMlmeRequest+0x200>)
 800e9c8:	f004 fb53 	bl	8013072 <memset1>
 800e9cc:	e7d7      	b.n	800e97e <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800e9ce:	4b5e      	ldr	r3, [pc, #376]	; (800eb48 <LoRaMacMlmeRequest+0x1fc>)
 800e9d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9d4:	f013 0f20 	tst.w	r3, #32
 800e9d8:	d1c6      	bne.n	800e968 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800e9da:	792b      	ldrb	r3, [r5, #4]
 800e9dc:	2b02      	cmp	r3, #2
 800e9de:	d003      	beq.n	800e9e8 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d026      	beq.n	800ea32 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e9e4:	2402      	movs	r4, #2
 800e9e6:	e093      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800e9e8:	2000      	movs	r0, #0
 800e9ea:	f7fe fd95 	bl	800d518 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800e9ee:	4c58      	ldr	r4, [pc, #352]	; (800eb50 <LoRaMacMlmeRequest+0x204>)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800e9f6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e9fa:	f001 fb3f 	bl	801007c <RegionAlternateDr>
 800e9fe:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800ea02:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800ea06:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ea0a:	2307      	movs	r3, #7
 800ea0c:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800ea10:	20ff      	movs	r0, #255	; 0xff
 800ea12:	f7fe fee1 	bl	800d7d8 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800ea16:	4604      	mov	r4, r0
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d079      	beq.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ea1c:	4e4c      	ldr	r6, [pc, #304]	; (800eb50 <LoRaMacMlmeRequest+0x204>)
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ea24:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ea28:	f001 fb28 	bl	801007c <RegionAlternateDr>
 800ea2c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800ea30:	e06e      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ea32:	4e47      	ldr	r6, [pc, #284]	; (800eb50 <LoRaMacMlmeRequest+0x204>)
 800ea34:	2400      	movs	r4, #0
 800ea36:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ea40:	4669      	mov	r1, sp
 800ea42:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ea46:	f001 fa4f 	bl	800fee8 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800ea4a:	792b      	ldrb	r3, [r5, #4]
 800ea4c:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea50:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800ea54:	2301      	movs	r3, #1
 800ea56:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800ea5a:	f7fc ffd9 	bl	800ba10 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ea5e:	4a3a      	ldr	r2, [pc, #232]	; (800eb48 <LoRaMacMlmeRequest+0x1fc>)
 800ea60:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ea64:	f043 0310 	orr.w	r3, r3, #16
 800ea68:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800ea6c:	e050      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800ea6e:	2200      	movs	r2, #0
 800ea70:	a904      	add	r1, sp, #16
 800ea72:	2002      	movs	r0, #2
 800ea74:	f000 fad0 	bl	800f018 <LoRaMacCommandsAddCmd>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d048      	beq.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ea7e:	2413      	movs	r4, #19
 800ea80:	e046      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800ea82:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	68a9      	ldr	r1, [r5, #8]
 800ea8a:	88a8      	ldrh	r0, [r5, #4]
 800ea8c:	f7fc ff16 	bl	800b8bc <SetTxContinuousWave>
 800ea90:	4604      	mov	r4, r0
            break;
 800ea92:	e03d      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800ea94:	4669      	mov	r1, sp
 800ea96:	200d      	movs	r0, #13
 800ea98:	f000 fb0a 	bl	800f0b0 <LoRaMacCommandsGetCmd>
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	b3b8      	cbz	r0, 800eb10 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	a904      	add	r1, sp, #16
 800eaa4:	200d      	movs	r0, #13
 800eaa6:	f000 fab7 	bl	800f018 <LoRaMacCommandsAddCmd>
 800eaaa:	4604      	mov	r4, r0
 800eaac:	b380      	cbz	r0, 800eb10 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eaae:	2413      	movs	r4, #19
            break;
 800eab0:	e02e      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800eab2:	4b27      	ldr	r3, [pc, #156]	; (800eb50 <LoRaMacMlmeRequest+0x204>)
 800eab4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eab8:	b10b      	cbz	r3, 800eabe <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800eaba:	2402      	movs	r4, #2
 800eabc:	e028      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800eabe:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800eac0:	f004 0007 	and.w	r0, r4, #7
 800eac4:	f000 fa01 	bl	800eeca <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800eac8:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800eacc:	2201      	movs	r2, #1
 800eace:	a904      	add	r1, sp, #16
 800ead0:	2010      	movs	r0, #16
 800ead2:	f000 faa1 	bl	800f018 <LoRaMacCommandsAddCmd>
 800ead6:	4604      	mov	r4, r0
 800ead8:	b1d0      	cbz	r0, 800eb10 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eada:	2413      	movs	r4, #19
 800eadc:	e018      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800eade:	2200      	movs	r2, #0
 800eae0:	a904      	add	r1, sp, #16
 800eae2:	2012      	movs	r0, #18
 800eae4:	f000 fa98 	bl	800f018 <LoRaMacCommandsAddCmd>
 800eae8:	4604      	mov	r4, r0
 800eaea:	b188      	cbz	r0, 800eb10 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eaec:	2413      	movs	r4, #19
 800eaee:	e00f      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800eaf6:	f000 f9d9 	bl	800eeac <LoRaMacClassBIsAcquisitionInProgress>
 800eafa:	b108      	cbz	r0, 800eb00 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800eafc:	2401      	movs	r4, #1
 800eafe:	e007      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800eb00:	f000 f9d1 	bl	800eea6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800eb04:	2000      	movs	r0, #0
 800eb06:	f000 f9d3 	bl	800eeb0 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800eb0a:	2400      	movs	r4, #0
 800eb0c:	e000      	b.n	800eb10 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800eb0e:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800eb10:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <LoRaMacMlmeRequest+0x1fc>)
 800eb12:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800eb16:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800eb18:	b17c      	cbz	r4, 800eb3a <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800eb1a:	f000 fc89 	bl	800f430 <LoRaMacConfirmQueueGetCnt>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	f47f af22 	bne.w	800e968 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800eb24:	4b08      	ldr	r3, [pc, #32]	; (800eb48 <LoRaMacMlmeRequest+0x1fc>)
 800eb26:	2100      	movs	r1, #0
 800eb28:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800eb2c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800eb30:	f361 0282 	bfi	r2, r1, #2, #1
 800eb34:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800eb38:	e716      	b.n	800e968 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800eb3a:	a805      	add	r0, sp, #20
 800eb3c:	f000 fbae 	bl	800f29c <LoRaMacConfirmQueueAdd>
 800eb40:	e712      	b.n	800e968 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eb42:	2403      	movs	r4, #3
 800eb44:	e710      	b.n	800e968 <LoRaMacMlmeRequest+0x1c>
 800eb46:	bf00      	nop
 800eb48:	20003430 	.word	0x20003430
 800eb4c:	20003884 	.word	0x20003884
 800eb50:	20008000 	.word	0x20008000

0800eb54 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800eb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb58:	b091      	sub	sp, #68	; 0x44
 800eb5a:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f000 80de 	beq.w	800ed1e <LoRaMacMcpsRequest+0x1ca>
 800eb62:	f04f 0a00 	mov.w	sl, #0
 800eb66:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800eb68:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800eb6c:	f7fe ffaa 	bl	800dac4 <LoRaMacIsBusy>
 800eb70:	4680      	mov	r8, r0
 800eb72:	b118      	cbz	r0, 800eb7c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800eb74:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800eb76:	b011      	add	sp, #68	; 0x44
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800eb7c:	ac06      	add	r4, sp, #24
 800eb7e:	462e      	mov	r6, r5
 800eb80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800eb82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb84:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800eb88:	4651      	mov	r1, sl
 800eb8a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800eb8e:	4c66      	ldr	r4, [pc, #408]	; (800ed28 <LoRaMacMcpsRequest+0x1d4>)
 800eb90:	2214      	movs	r2, #20
 800eb92:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800eb96:	f004 fa6c 	bl	8013072 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800eba0:	4b62      	ldr	r3, [pc, #392]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800eba2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d065      	beq.n	800ec76 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800ebaa:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800ebae:	2f01      	cmp	r7, #1
 800ebb0:	f000 8086 	beq.w	800ecc0 <LoRaMacMcpsRequest+0x16c>
 800ebb4:	2f03      	cmp	r7, #3
 800ebb6:	f000 8096 	beq.w	800ece6 <LoRaMacMcpsRequest+0x192>
 800ebba:	2f00      	cmp	r7, #0
 800ebbc:	d06d      	beq.n	800ec9a <LoRaMacMcpsRequest+0x146>
 800ebbe:	f04f 0b00 	mov.w	fp, #0
 800ebc2:	f8cd b014 	str.w	fp, [sp, #20]
 800ebc6:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ebca:	2302      	movs	r3, #2
 800ebcc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ebd0:	4e56      	ldr	r6, [pc, #344]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ebd2:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800ebd6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebda:	a90e      	add	r1, sp, #56	; 0x38
 800ebdc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800ebe0:	f001 f95c 	bl	800fe9c <RegionGetPhyParam>
 800ebe4:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ebe6:	b244      	sxtb	r4, r0
 800ebe8:	45a3      	cmp	fp, r4
 800ebea:	bfb8      	it	lt
 800ebec:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800ebee:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800ebf2:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800ebf6:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800ebfa:	4648      	mov	r0, r9
 800ebfc:	f7fc fe30 	bl	800b860 <CheckForMinimumAbpDatarate>
 800ec00:	4603      	mov	r3, r0
 800ec02:	b900      	cbnz	r0, 800ec06 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800ec04:	465c      	mov	r4, fp
    if( readyToSend == true )
 800ec06:	f1b8 0f00 	cmp.w	r8, #0
 800ec0a:	f000 8082 	beq.w	800ed12 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800ec0e:	f1b9 0f00 	cmp.w	r9, #0
 800ec12:	d000      	beq.n	800ec16 <LoRaMacMcpsRequest+0xc2>
 800ec14:	b19b      	cbz	r3, 800ec3e <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800ec16:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec1a:	4b44      	ldr	r3, [pc, #272]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ec1c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ec20:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ec24:	2205      	movs	r2, #5
 800ec26:	a90b      	add	r1, sp, #44	; 0x2c
 800ec28:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ec2c:	f001 f96a 	bl	800ff04 <RegionVerify>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d076      	beq.n	800ed22 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ec34:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800ec38:	4b3c      	ldr	r3, [pc, #240]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ec3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ec3e:	4b3a      	ldr	r3, [pc, #232]	; (800ed28 <LoRaMacMcpsRequest+0x1d4>)
 800ec40:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800ec44:	4b39      	ldr	r3, [pc, #228]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ec46:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800ec4a:	f7fd ff97 	bl	800cb7c <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800ec4e:	9b03      	ldr	r3, [sp, #12]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	4653      	mov	r3, sl
 800ec54:	9a05      	ldr	r2, [sp, #20]
 800ec56:	9904      	ldr	r1, [sp, #16]
 800ec58:	a80c      	add	r0, sp, #48	; 0x30
 800ec5a:	f7fe fea3 	bl	800d9a4 <Send>
        if( status == LORAMAC_STATUS_OK )
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d152      	bne.n	800ed08 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800ec62:	4b31      	ldr	r3, [pc, #196]	; (800ed28 <LoRaMacMcpsRequest+0x1d4>)
 800ec64:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800ec68:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ec6c:	f042 0201 	orr.w	r2, r2, #1
 800ec70:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800ec74:	e04e      	b.n	800ed14 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ec76:	4b2d      	ldr	r3, [pc, #180]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ec78:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800ec7c:	2b02      	cmp	r3, #2
 800ec7e:	d194      	bne.n	800ebaa <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ec80:	4b2a      	ldr	r3, [pc, #168]	; (800ed2c <LoRaMacMcpsRequest+0x1d8>)
 800ec82:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d18f      	bne.n	800ebaa <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800ec8a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d18b      	bne.n	800ebaa <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800ec92:	2301      	movs	r3, #1
 800ec94:	f88d 3018 	strb.w	r3, [sp, #24]
 800ec98:	e787      	b.n	800ebaa <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800ec9a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ec9e:	2202      	movs	r2, #2
 800eca0:	f362 1347 	bfi	r3, r2, #5, #3
 800eca4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800eca8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ecac:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800ecae:	9b08      	ldr	r3, [sp, #32]
 800ecb0:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800ecb2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800ecb6:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800ecba:	f04f 0801 	mov.w	r8, #1
            break;
 800ecbe:	e784      	b.n	800ebca <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ecc0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ecc4:	2204      	movs	r2, #4
 800ecc6:	f362 1347 	bfi	r3, r2, #5, #3
 800ecca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800ecce:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ecd2:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800ecd4:	9b08      	ldr	r3, [sp, #32]
 800ecd6:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800ecd8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800ecdc:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800ece0:	f04f 0801 	mov.w	r8, #1
            break;
 800ece4:	e771      	b.n	800ebca <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ece6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ecea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800ecee:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800ecf2:	9b07      	ldr	r3, [sp, #28]
 800ecf4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800ecf6:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800ecfa:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800ecfe:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800ed02:	2300      	movs	r3, #0
 800ed04:	9304      	str	r3, [sp, #16]
            break;
 800ed06:	e760      	b.n	800ebca <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800ed08:	4b07      	ldr	r3, [pc, #28]	; (800ed28 <LoRaMacMcpsRequest+0x1d4>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800ed10:	e000      	b.n	800ed14 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ed12:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <LoRaMacMcpsRequest+0x1d4>)
 800ed16:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800ed1a:	612b      	str	r3, [r5, #16]
    return status;
 800ed1c:	e72b      	b.n	800eb76 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed1e:	2003      	movs	r0, #3
 800ed20:	e729      	b.n	800eb76 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed22:	2003      	movs	r0, #3
 800ed24:	e727      	b.n	800eb76 <LoRaMacMcpsRequest+0x22>
 800ed26:	bf00      	nop
 800ed28:	20003430 	.word	0x20003430
 800ed2c:	20008000 	.word	0x20008000

0800ed30 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800ed30:	b510      	push	{r4, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800ed36:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800ed3a:	220f      	movs	r2, #15
 800ed3c:	a901      	add	r1, sp, #4
 800ed3e:	4b09      	ldr	r3, [pc, #36]	; (800ed64 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ed40:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ed44:	f001 f8de 	bl	800ff04 <RegionVerify>
 800ed48:	b148      	cbz	r0, 800ed5e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800ed4a:	4b06      	ldr	r3, [pc, #24]	; (800ed64 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ed4c:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ed50:	4a05      	ldr	r2, [pc, #20]	; (800ed68 <LoRaMacTestSetDutyCycleOn+0x38>)
 800ed52:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ed56:	f043 0320 	orr.w	r3, r3, #32
 800ed5a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800ed5e:	b002      	add	sp, #8
 800ed60:	bd10      	pop	{r4, pc}
 800ed62:	bf00      	nop
 800ed64:	20008000 	.word	0x20008000
 800ed68:	20003430 	.word	0x20003430

0800ed6c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800ed6c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800ed6e:	f7ff f907 	bl	800df80 <LoRaMacStop>
 800ed72:	b110      	cbz	r0, 800ed7a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800ed74:	2401      	movs	r4, #1
    }
}
 800ed76:	4620      	mov	r0, r4
 800ed78:	bd38      	pop	{r3, r4, r5, pc}
 800ed7a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800ed7c:	4d0a      	ldr	r5, [pc, #40]	; (800eda8 <LoRaMacDeInitialization+0x3c>)
 800ed7e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800ed82:	f006 fab3 	bl	80152ec <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800ed86:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800ed8a:	f006 faaf 	bl	80152ec <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ed8e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800ed92:	f006 faab 	bl	80152ec <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800ed96:	f000 f899 	bl	800eecc <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	f7fe fbbc 	bl	800d518 <ResetMacParameters>
        Radio.Sleep( );
 800eda0:	4b02      	ldr	r3, [pc, #8]	; (800edac <LoRaMacDeInitialization+0x40>)
 800eda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda4:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800eda6:	e7e6      	b.n	800ed76 <LoRaMacDeInitialization+0xa>
 800eda8:	20003430 	.word	0x20003430
 800edac:	08016960 	.word	0x08016960

0800edb0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	b08b      	sub	sp, #44	; 0x2c
 800edb6:	460f      	mov	r7, r1
 800edb8:	4616      	mov	r6, r2
 800edba:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800edbc:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800edc0:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800edc4:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800edc8:	6842      	ldr	r2, [r0, #4]
 800edca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800edcc:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800edce:	f890 8001 	ldrb.w	r8, [r0, #1]
 800edd2:	f1b8 0f00 	cmp.w	r8, #0
 800edd6:	d109      	bne.n	800edec <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800edd8:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800eddc:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800ede0:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800ede4:	4640      	mov	r0, r8
 800ede6:	b00b      	add	sp, #44	; 0x2c
 800ede8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edec:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800edee:	2302      	movs	r3, #2
 800edf0:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800edf4:	7bc3      	ldrb	r3, [r0, #15]
 800edf6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800edfa:	a908      	add	r1, sp, #32
 800edfc:	7c00      	ldrb	r0, [r0, #16]
 800edfe:	f001 f84d 	bl	800fe9c <RegionGetPhyParam>
 800ee02:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800ee04:	b243      	sxtb	r3, r0
 800ee06:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800ee08:	454b      	cmp	r3, r9
 800ee0a:	bfb8      	it	lt
 800ee0c:	464b      	movlt	r3, r9
 800ee0e:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800ee10:	6862      	ldr	r2, [r4, #4]
 800ee12:	8923      	ldrh	r3, [r4, #8]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d201      	bcs.n	800ee1c <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800ee18:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800ee1c:	8961      	ldrh	r1, [r4, #10]
 800ee1e:	440b      	add	r3, r1
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d224      	bcs.n	800ee6e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800ee24:	6863      	ldr	r3, [r4, #4]
 800ee26:	8921      	ldrh	r1, [r4, #8]
 800ee28:	8962      	ldrh	r2, [r4, #10]
 800ee2a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800ee2e:	4283      	cmp	r3, r0
 800ee30:	d332      	bcc.n	800ee98 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800ee32:	1a5b      	subs	r3, r3, r1
 800ee34:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee38:	fb02 3311 	mls	r3, r2, r1, r3
 800ee3c:	bb7b      	cbnz	r3, 800ee9e <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800ee3e:	9b01      	ldr	r3, [sp, #4]
 800ee40:	4599      	cmp	r9, r3
 800ee42:	dc03      	bgt.n	800ee4c <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800ee44:	7823      	ldrb	r3, [r4, #0]
 800ee46:	b9eb      	cbnz	r3, 800ee84 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800ee48:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ee4c:	2321      	movs	r3, #33	; 0x21
 800ee4e:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800ee52:	9b00      	ldr	r3, [sp, #0]
 800ee54:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800ee58:	7be3      	ldrb	r3, [r4, #15]
 800ee5a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ee5e:	a908      	add	r1, sp, #32
 800ee60:	7c20      	ldrb	r0, [r4, #16]
 800ee62:	f001 f81b 	bl	800fe9c <RegionGetPhyParam>
 800ee66:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800ee68:	fa4f f980 	sxtb.w	r9, r0
 800ee6c:	e7b4      	b.n	800edd8 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800ee6e:	230a      	movs	r3, #10
 800ee70:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800ee74:	a908      	add	r1, sp, #32
 800ee76:	7c20      	ldrb	r0, [r4, #16]
 800ee78:	f001 f810 	bl	800fe9c <RegionGetPhyParam>
 800ee7c:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800ee7e:	fa4f fa80 	sxtb.w	sl, r0
 800ee82:	e7cf      	b.n	800ee24 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ee84:	2302      	movs	r3, #2
 800ee86:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800ee8a:	a903      	add	r1, sp, #12
 800ee8c:	7c20      	ldrb	r0, [r4, #16]
 800ee8e:	f001 f82b 	bl	800fee8 <RegionInitDefaults>
                    nbTrans = 1;
 800ee92:	f04f 0b01 	mov.w	fp, #1
 800ee96:	e7d9      	b.n	800ee4c <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800ee98:	f8dd 9000 	ldr.w	r9, [sp]
 800ee9c:	e79c      	b.n	800edd8 <LoRaMacAdrCalcNext+0x28>
 800ee9e:	f8dd 9000 	ldr.w	r9, [sp]
 800eea2:	e799      	b.n	800edd8 <LoRaMacAdrCalcNext+0x28>

0800eea4 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eea4:	4770      	bx	lr

0800eea6 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eea6:	4770      	bx	lr

0800eea8 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eea8:	4770      	bx	lr

0800eeaa <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeaa:	4770      	bx	lr

0800eeac <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeac:	2000      	movs	r0, #0
 800eeae:	4770      	bx	lr

0800eeb0 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeb0:	4770      	bx	lr

0800eeb2 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeb2:	4770      	bx	lr

0800eeb4 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeb4:	4770      	bx	lr

0800eeb6 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	4770      	bx	lr

0800eeba <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeba:	2000      	movs	r0, #0
 800eebc:	4770      	bx	lr

0800eebe <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eebe:	2000      	movs	r0, #0
 800eec0:	4770      	bx	lr

0800eec2 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eec2:	2000      	movs	r0, #0
 800eec4:	4770      	bx	lr

0800eec6 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eec6:	2000      	movs	r0, #0
 800eec8:	4770      	bx	lr

0800eeca <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeca:	4770      	bx	lr

0800eecc <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eecc:	4770      	bx	lr

0800eece <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eece:	4770      	bx	lr

0800eed0 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eed0:	2002      	movs	r0, #2
 800eed2:	4770      	bx	lr

0800eed4 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eed4:	2002      	movs	r0, #2
 800eed6:	4770      	bx	lr

0800eed8 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eed8:	2002      	movs	r0, #2
 800eeda:	4770      	bx	lr

0800eedc <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eedc:	4770      	bx	lr

0800eede <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eede:	2000      	movs	r0, #0
 800eee0:	4770      	bx	lr

0800eee2 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eee2:	4770      	bx	lr

0800eee4 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eee4:	4770      	bx	lr

0800eee6 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eee6:	2000      	movs	r0, #0
 800eee8:	4770      	bx	lr

0800eeea <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeea:	2000      	movs	r0, #0
 800eeec:	4770      	bx	lr

0800eeee <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eeee:	4770      	bx	lr

0800eef0 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eef0:	4770      	bx	lr

0800eef2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800eef2:	4770      	bx	lr

0800eef4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800eef4:	2300      	movs	r3, #0
 800eef6:	2b0f      	cmp	r3, #15
 800eef8:	d804      	bhi.n	800ef04 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800eefa:	5cc2      	ldrb	r2, [r0, r3]
 800eefc:	b922      	cbnz	r2, 800ef08 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800eefe:	3301      	adds	r3, #1
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	e7f8      	b.n	800eef6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ef04:	2001      	movs	r0, #1
 800ef06:	4770      	bx	lr
            return false;
 800ef08:	2000      	movs	r0, #0
}
 800ef0a:	4770      	bx	lr

0800ef0c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ef0c:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ef0e:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ef10:	0123      	lsls	r3, r4, #4
 800ef12:	3308      	adds	r3, #8
 800ef14:	4d06      	ldr	r5, [pc, #24]	; (800ef30 <MallocNewMacCommandSlot+0x24>)
 800ef16:	441d      	add	r5, r3
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f7ff ffeb 	bl	800eef4 <IsSlotFree>
 800ef1e:	b920      	cbnz	r0, 800ef2a <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800ef20:	3401      	adds	r4, #1
 800ef22:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800ef24:	2c20      	cmp	r4, #32
 800ef26:	d1f3      	bne.n	800ef10 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800ef28:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	bd38      	pop	{r3, r4, r5, pc}
 800ef2e:	bf00      	nop
 800ef30:	200039f0 	.word	0x200039f0

0800ef34 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800ef34:	b120      	cbz	r0, 800ef40 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800ef36:	2200      	movs	r2, #0
 800ef38:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800ef3a:	6042      	str	r2, [r0, #4]

    return true;
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	4770      	bx	lr
        return false;
 800ef40:	2000      	movs	r0, #0
}
 800ef42:	4770      	bx	lr

0800ef44 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ef44:	4603      	mov	r3, r0
 800ef46:	b160      	cbz	r0, 800ef62 <LinkedListAdd+0x1e>
 800ef48:	b169      	cbz	r1, 800ef66 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800ef4a:	6802      	ldr	r2, [r0, #0]
 800ef4c:	b13a      	cbz	r2, 800ef5e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800ef4e:	685a      	ldr	r2, [r3, #4]
 800ef50:	b102      	cbz	r2, 800ef54 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800ef52:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800ef54:	2200      	movs	r2, #0
 800ef56:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800ef58:	6059      	str	r1, [r3, #4]

    return true;
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	4770      	bx	lr
        list->First = element;
 800ef5e:	6001      	str	r1, [r0, #0]
 800ef60:	e7f5      	b.n	800ef4e <LinkedListAdd+0xa>
        return false;
 800ef62:	2000      	movs	r0, #0
 800ef64:	4770      	bx	lr
 800ef66:	2000      	movs	r0, #0
}
 800ef68:	4770      	bx	lr

0800ef6a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ef6a:	b160      	cbz	r0, 800ef86 <LinkedListGetPrevious+0x1c>
 800ef6c:	b161      	cbz	r1, 800ef88 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800ef6e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800ef70:	4281      	cmp	r1, r0
 800ef72:	d102      	bne.n	800ef7a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800ef74:	2000      	movs	r0, #0
    }

    return curElement;
}
 800ef76:	4770      	bx	lr
            curElement = curElement->Next;
 800ef78:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d0fb      	beq.n	800ef76 <LinkedListGetPrevious+0xc>
 800ef7e:	6803      	ldr	r3, [r0, #0]
 800ef80:	428b      	cmp	r3, r1
 800ef82:	d1f9      	bne.n	800ef78 <LinkedListGetPrevious+0xe>
 800ef84:	4770      	bx	lr
 800ef86:	4770      	bx	lr
        return NULL;
 800ef88:	4608      	mov	r0, r1
 800ef8a:	4770      	bx	lr

0800ef8c <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ef8c:	b1b8      	cbz	r0, 800efbe <LinkedListRemove+0x32>
{
 800ef8e:	b538      	push	{r3, r4, r5, lr}
 800ef90:	460c      	mov	r4, r1
 800ef92:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800ef94:	b1a9      	cbz	r1, 800efc2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800ef96:	f7ff ffe8 	bl	800ef6a <LinkedListGetPrevious>

    if( list->First == element )
 800ef9a:	682b      	ldr	r3, [r5, #0]
 800ef9c:	42a3      	cmp	r3, r4
 800ef9e:	d009      	beq.n	800efb4 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800efa0:	686b      	ldr	r3, [r5, #4]
 800efa2:	42a3      	cmp	r3, r4
 800efa4:	d009      	beq.n	800efba <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800efa6:	b108      	cbz	r0, 800efac <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800efa8:	6823      	ldr	r3, [r4, #0]
 800efaa:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800efac:	2300      	movs	r3, #0
 800efae:	6023      	str	r3, [r4, #0]

    return true;
 800efb0:	2001      	movs	r0, #1
}
 800efb2:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800efb4:	6823      	ldr	r3, [r4, #0]
 800efb6:	602b      	str	r3, [r5, #0]
 800efb8:	e7f2      	b.n	800efa0 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800efba:	6068      	str	r0, [r5, #4]
 800efbc:	e7f3      	b.n	800efa6 <LinkedListRemove+0x1a>
        return false;
 800efbe:	2000      	movs	r0, #0
}
 800efc0:	4770      	bx	lr
        return false;
 800efc2:	2000      	movs	r0, #0
 800efc4:	e7f5      	b.n	800efb2 <LinkedListRemove+0x26>
	...

0800efc8 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800efc8:	2811      	cmp	r0, #17
 800efca:	d805      	bhi.n	800efd8 <IsSticky+0x10>
 800efcc:	4b03      	ldr	r3, [pc, #12]	; (800efdc <IsSticky+0x14>)
 800efce:	fa23 f000 	lsr.w	r0, r3, r0
 800efd2:	f000 0001 	and.w	r0, r0, #1
 800efd6:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800efd8:	2000      	movs	r0, #0
    }
}
 800efda:	4770      	bx	lr
 800efdc:	00020720 	.word	0x00020720

0800efe0 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800efe0:	2000      	movs	r0, #0
 800efe2:	4770      	bx	lr

0800efe4 <FreeMacCommandSlot>:
    if( slot == NULL )
 800efe4:	b130      	cbz	r0, 800eff4 <FreeMacCommandSlot+0x10>
{
 800efe6:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800efe8:	2210      	movs	r2, #16
 800efea:	2100      	movs	r1, #0
 800efec:	f004 f841 	bl	8013072 <memset1>
    return true;
 800eff0:	2001      	movs	r0, #1
}
 800eff2:	bd08      	pop	{r3, pc}
        return false;
 800eff4:	2000      	movs	r0, #0
}
 800eff6:	4770      	bx	lr

0800eff8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800eff8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800effa:	4c06      	ldr	r4, [pc, #24]	; (800f014 <LoRaMacCommandsInit+0x1c>)
 800effc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f000:	2100      	movs	r1, #0
 800f002:	4620      	mov	r0, r4
 800f004:	f004 f835 	bl	8013072 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff ff93 	bl	800ef34 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f00e:	2000      	movs	r0, #0
 800f010:	bd10      	pop	{r4, pc}
 800f012:	bf00      	nop
 800f014:	200039f0 	.word	0x200039f0

0800f018 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800f018:	b321      	cbz	r1, 800f064 <LoRaMacCommandsAddCmd+0x4c>
{
 800f01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01c:	4605      	mov	r5, r0
 800f01e:	4614      	mov	r4, r2
 800f020:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f022:	f7ff ff73 	bl	800ef0c <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800f026:	4606      	mov	r6, r0
 800f028:	b1f0      	cbz	r0, 800f068 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f02a:	4601      	mov	r1, r0
 800f02c:	4810      	ldr	r0, [pc, #64]	; (800f070 <LoRaMacCommandsAddCmd+0x58>)
 800f02e:	f7ff ff89 	bl	800ef44 <LinkedListAdd>
 800f032:	b1d8      	cbz	r0, 800f06c <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800f034:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800f036:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f038:	b2a2      	uxth	r2, r4
 800f03a:	4639      	mov	r1, r7
 800f03c:	1d70      	adds	r0, r6, #5
 800f03e:	f004 f800 	bl	8013042 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f042:	4628      	mov	r0, r5
 800f044:	f7ff ffc0 	bl	800efc8 <IsSticky>
 800f048:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800f04a:	4628      	mov	r0, r5
 800f04c:	f7ff ffc8 	bl	800efe0 <IsConfirmationRequired>
 800f050:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f052:	4b07      	ldr	r3, [pc, #28]	; (800f070 <LoRaMacCommandsAddCmd+0x58>)
 800f054:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f058:	4414      	add	r4, r2
 800f05a:	3401      	adds	r4, #1
 800f05c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800f060:	2000      	movs	r0, #0
}
 800f062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f064:	2001      	movs	r0, #1
}
 800f066:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f068:	2002      	movs	r0, #2
 800f06a:	e7fa      	b.n	800f062 <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800f06c:	2005      	movs	r0, #5
 800f06e:	e7f8      	b.n	800f062 <LoRaMacCommandsAddCmd+0x4a>
 800f070:	200039f0 	.word	0x200039f0

0800f074 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800f074:	b1a0      	cbz	r0, 800f0a0 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800f076:	b510      	push	{r4, lr}
 800f078:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800f07a:	4601      	mov	r1, r0
 800f07c:	480b      	ldr	r0, [pc, #44]	; (800f0ac <LoRaMacCommandsRemoveCmd+0x38>)
 800f07e:	f7ff ff85 	bl	800ef8c <LinkedListRemove>
 800f082:	b178      	cbz	r0, 800f0a4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f084:	68a1      	ldr	r1, [r4, #8]
 800f086:	4a09      	ldr	r2, [pc, #36]	; (800f0ac <LoRaMacCommandsRemoveCmd+0x38>)
 800f088:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800f08c:	1a5b      	subs	r3, r3, r1
 800f08e:	3b01      	subs	r3, #1
 800f090:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f094:	4620      	mov	r0, r4
 800f096:	f7ff ffa5 	bl	800efe4 <FreeMacCommandSlot>
 800f09a:	b128      	cbz	r0, 800f0a8 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f09c:	2000      	movs	r0, #0
}
 800f09e:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f0a0:	2001      	movs	r0, #1
}
 800f0a2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f0a4:	2003      	movs	r0, #3
 800f0a6:	e7fa      	b.n	800f09e <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800f0a8:	2005      	movs	r0, #5
 800f0aa:	e7f8      	b.n	800f09e <LoRaMacCommandsRemoveCmd+0x2a>
 800f0ac:	200039f0 	.word	0x200039f0

0800f0b0 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f0b0:	4b06      	ldr	r3, [pc, #24]	; (800f0cc <LoRaMacCommandsGetCmd+0x1c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f0b4:	e000      	b.n	800f0b8 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800f0b6:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f0b8:	b113      	cbz	r3, 800f0c0 <LoRaMacCommandsGetCmd+0x10>
 800f0ba:	791a      	ldrb	r2, [r3, #4]
 800f0bc:	4282      	cmp	r2, r0
 800f0be:	d1fa      	bne.n	800f0b6 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800f0c0:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800f0c2:	b10b      	cbz	r3, 800f0c8 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f0c8:	2003      	movs	r0, #3
}
 800f0ca:	4770      	bx	lr
 800f0cc:	200039f0 	.word	0x200039f0

0800f0d0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f0d0:	4b0a      	ldr	r3, [pc, #40]	; (800f0fc <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800f0d2:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f0d4:	b120      	cbz	r0, 800f0e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800f0d6:	7b03      	ldrb	r3, [r0, #12]
 800f0d8:	b11b      	cbz	r3, 800f0e2 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800f0da:	6800      	ldr	r0, [r0, #0]
 800f0dc:	e7fa      	b.n	800f0d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f0de:	bd10      	pop	{r4, pc}
 800f0e0:	4770      	bx	lr
{
 800f0e2:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800f0e4:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f0e6:	f7ff ffc5 	bl	800f074 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f0ea:	4620      	mov	r0, r4
    while( curElement != NULL )
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d0f6      	beq.n	800f0de <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800f0f0:	7b03      	ldrb	r3, [r0, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d0f6      	beq.n	800f0e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800f0f6:	6800      	ldr	r0, [r0, #0]
 800f0f8:	e7f8      	b.n	800f0ec <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800f0fa:	bf00      	nop
 800f0fc:	200039f0 	.word	0x200039f0

0800f100 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f100:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f102:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800f104:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f106:	e000      	b.n	800f10a <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800f108:	4634      	mov	r4, r6
    while( curElement != NULL )
 800f10a:	b17c      	cbz	r4, 800f12c <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800f10c:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f10e:	7925      	ldrb	r5, [r4, #4]
 800f110:	4628      	mov	r0, r5
 800f112:	f7ff ff59 	bl	800efc8 <IsSticky>
 800f116:	2800      	cmp	r0, #0
 800f118:	d0f6      	beq.n	800f108 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800f11a:	4628      	mov	r0, r5
 800f11c:	f7ff ff60 	bl	800efe0 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f120:	2800      	cmp	r0, #0
 800f122:	d1f1      	bne.n	800f108 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f124:	4620      	mov	r0, r4
 800f126:	f7ff ffa5 	bl	800f074 <LoRaMacCommandsRemoveCmd>
 800f12a:	e7ed      	b.n	800f108 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f12c:	2000      	movs	r0, #0
 800f12e:	bd70      	pop	{r4, r5, r6, pc}
 800f130:	200039f0 	.word	0x200039f0

0800f134 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800f134:	b128      	cbz	r0, 800f142 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800f136:	4a04      	ldr	r2, [pc, #16]	; (800f148 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800f138:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800f13c:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f13e:	2000      	movs	r0, #0
 800f140:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f142:	2001      	movs	r0, #1
}
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	200039f0 	.word	0x200039f0

0800f14c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800f150:	4b16      	ldr	r3, [pc, #88]	; (800f1ac <LoRaMacCommandsSerializeCmds+0x60>)
 800f152:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f154:	b32a      	cbz	r2, 800f1a2 <LoRaMacCommandsSerializeCmds+0x56>
 800f156:	4607      	mov	r7, r0
 800f158:	4688      	mov	r8, r1
 800f15a:	4616      	mov	r6, r2
 800f15c:	b319      	cbz	r1, 800f1a6 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800f15e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800f160:	b194      	cbz	r4, 800f188 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f162:	1a7a      	subs	r2, r7, r1
 800f164:	68a3      	ldr	r3, [r4, #8]
 800f166:	3301      	adds	r3, #1
 800f168:	429a      	cmp	r2, r3
 800f16a:	d30d      	bcc.n	800f188 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800f16c:	1c4d      	adds	r5, r1, #1
 800f16e:	b2ed      	uxtb	r5, r5
 800f170:	7923      	ldrb	r3, [r4, #4]
 800f172:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f174:	8922      	ldrh	r2, [r4, #8]
 800f176:	1d61      	adds	r1, r4, #5
 800f178:	1970      	adds	r0, r6, r5
 800f17a:	f003 ff62 	bl	8013042 <memcpy1>
            itr += curElement->PayloadSize;
 800f17e:	68a3      	ldr	r3, [r4, #8]
 800f180:	441d      	add	r5, r3
 800f182:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f184:	6824      	ldr	r4, [r4, #0]
 800f186:	e7eb      	b.n	800f160 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800f188:	b12c      	cbz	r4, 800f196 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800f18a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800f18c:	4620      	mov	r0, r4
 800f18e:	f7ff ff71 	bl	800f074 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800f192:	462c      	mov	r4, r5
 800f194:	e7f8      	b.n	800f188 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800f196:	4640      	mov	r0, r8
 800f198:	f7ff ffcc 	bl	800f134 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800f19c:	2000      	movs	r0, #0
}
 800f19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f1a2:	2001      	movs	r0, #1
 800f1a4:	e7fb      	b.n	800f19e <LoRaMacCommandsSerializeCmds+0x52>
 800f1a6:	2001      	movs	r0, #1
 800f1a8:	e7f9      	b.n	800f19e <LoRaMacCommandsSerializeCmds+0x52>
 800f1aa:	bf00      	nop
 800f1ac:	200039f0 	.word	0x200039f0

0800f1b0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800f1b0:	1e83      	subs	r3, r0, #2
 800f1b2:	2b11      	cmp	r3, #17
 800f1b4:	d80a      	bhi.n	800f1cc <LoRaMacCommandsGetCmdSize+0x1c>
 800f1b6:	e8df f003 	tbb	[pc, r3]
 800f1ba:	0b23      	.short	0x0b23
 800f1bc:	110f240d 	.word	0x110f240d
 800f1c0:	09171513 	.word	0x09171513
 800f1c4:	09091909 	.word	0x09091909
 800f1c8:	211f1d1b 	.word	0x211f1d1b
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800f1d0:	2005      	movs	r0, #5
            break;
 800f1d2:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800f1d4:	2002      	movs	r0, #2
            break;
 800f1d6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800f1d8:	2001      	movs	r0, #1
            break;
 800f1da:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800f1dc:	2006      	movs	r0, #6
            break;
 800f1de:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800f1e0:	2002      	movs	r0, #2
            break;
 800f1e2:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800f1e4:	2002      	movs	r0, #2
            break;
 800f1e6:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800f1e8:	2005      	movs	r0, #5
            break;
 800f1ea:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800f1ec:	2006      	movs	r0, #6
            break;
 800f1ee:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800f1f0:	2001      	movs	r0, #1
            break;
 800f1f2:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800f1f4:	2005      	movs	r0, #5
            break;
 800f1f6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800f1f8:	2004      	movs	r0, #4
            break;
 800f1fa:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800f1fc:	2004      	movs	r0, #4
            break;
 800f1fe:	4770      	bx	lr
            cidSize = 3;
 800f200:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800f202:	4770      	bx	lr

0800f204 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f204:	4b03      	ldr	r3, [pc, #12]	; (800f214 <IncreaseBufferPointer+0x10>)
 800f206:	4298      	cmp	r0, r3
 800f208:	d001      	beq.n	800f20e <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800f20a:	3004      	adds	r0, #4
 800f20c:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f20e:	4802      	ldr	r0, [pc, #8]	; (800f218 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	20003c18 	.word	0x20003c18
 800f218:	20003c08 	.word	0x20003c08

0800f21c <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800f21c:	b108      	cbz	r0, 800f222 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800f21e:	2000      	movs	r0, #0
 800f220:	4770      	bx	lr
        return true;
 800f222:	2001      	movs	r0, #1
}
 800f224:	4770      	bx	lr

0800f226 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f226:	2804      	cmp	r0, #4
 800f228:	d801      	bhi.n	800f22e <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800f22a:	2000      	movs	r0, #0
 800f22c:	4770      	bx	lr
        return true;
 800f22e:	2001      	movs	r0, #1
}
 800f230:	4770      	bx	lr
	...

0800f234 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f236:	4606      	mov	r6, r0
 800f238:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f23a:	4b0d      	ldr	r3, [pc, #52]	; (800f270 <GetElement+0x3c>)
 800f23c:	f893 7020 	ldrb.w	r7, [r3, #32]
 800f240:	4638      	mov	r0, r7
 800f242:	f7ff ffeb 	bl	800f21c <IsListEmpty>
 800f246:	b970      	cbnz	r0, 800f266 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f248:	2500      	movs	r5, #0
 800f24a:	42af      	cmp	r7, r5
 800f24c:	d909      	bls.n	800f262 <GetElement+0x2e>
    {
        if( element->Request == request )
 800f24e:	7823      	ldrb	r3, [r4, #0]
 800f250:	42b3      	cmp	r3, r6
 800f252:	d00a      	beq.n	800f26a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800f254:	4620      	mov	r0, r4
 800f256:	f7ff ffd5 	bl	800f204 <IncreaseBufferPointer>
 800f25a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f25c:	3501      	adds	r5, #1
 800f25e:	b2ed      	uxtb	r5, r5
 800f260:	e7f3      	b.n	800f24a <GetElement+0x16>
    }

    return NULL;
 800f262:	2000      	movs	r0, #0
}
 800f264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800f266:	2000      	movs	r0, #0
 800f268:	e7fc      	b.n	800f264 <GetElement+0x30>
            return element;
 800f26a:	4620      	mov	r0, r4
 800f26c:	e7fa      	b.n	800f264 <GetElement+0x30>
 800f26e:	bf00      	nop
 800f270:	20003bfc 	.word	0x20003bfc

0800f274 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800f274:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800f276:	4c08      	ldr	r4, [pc, #32]	; (800f298 <LoRaMacConfirmQueueInit+0x24>)
 800f278:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f280:	f104 000c 	add.w	r0, r4, #12
 800f284:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f286:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800f288:	2214      	movs	r2, #20
 800f28a:	21ff      	movs	r1, #255	; 0xff
 800f28c:	f003 fef1 	bl	8013072 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800f296:	bd10      	pop	{r4, pc}
 800f298:	20003bfc 	.word	0x20003bfc

0800f29c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f2a0:	4b0f      	ldr	r3, [pc, #60]	; (800f2e0 <LoRaMacConfirmQueueAdd+0x44>)
 800f2a2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f2a6:	f7ff ffbe 	bl	800f226 <IsListFull>
 800f2aa:	b9b8      	cbnz	r0, 800f2dc <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f2ac:	4c0c      	ldr	r4, [pc, #48]	; (800f2e0 <LoRaMacConfirmQueueAdd+0x44>)
 800f2ae:	68a3      	ldr	r3, [r4, #8]
 800f2b0:	782a      	ldrb	r2, [r5, #0]
 800f2b2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f2b4:	68a3      	ldr	r3, [r4, #8]
 800f2b6:	786a      	ldrb	r2, [r5, #1]
 800f2b8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	78ea      	ldrb	r2, [r5, #3]
 800f2be:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800f2c0:	68a3      	ldr	r3, [r4, #8]
 800f2c2:	78aa      	ldrb	r2, [r5, #2]
 800f2c4:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800f2c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f2d0:	68a0      	ldr	r0, [r4, #8]
 800f2d2:	f7ff ff97 	bl	800f204 <IncreaseBufferPointer>
 800f2d6:	60a0      	str	r0, [r4, #8]

    return true;
 800f2d8:	2001      	movs	r0, #1
}
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f2dc:	2000      	movs	r0, #0
 800f2de:	e7fc      	b.n	800f2da <LoRaMacConfirmQueueAdd+0x3e>
 800f2e0:	20003bfc 	.word	0x20003bfc

0800f2e4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f2e4:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f2e8:	f893 4020 	ldrb.w	r4, [r3, #32]
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7ff ff95 	bl	800f21c <IsListEmpty>
 800f2f2:	b948      	cbnz	r0, 800f308 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800f2f4:	4d05      	ldr	r5, [pc, #20]	; (800f30c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f2f6:	3c01      	subs	r4, #1
 800f2f8:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f2fc:	6868      	ldr	r0, [r5, #4]
 800f2fe:	f7ff ff81 	bl	800f204 <IncreaseBufferPointer>
 800f302:	6068      	str	r0, [r5, #4]

    return true;
 800f304:	2001      	movs	r0, #1
}
 800f306:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f308:	2000      	movs	r0, #0
 800f30a:	e7fc      	b.n	800f306 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800f30c:	20003bfc 	.word	0x20003bfc

0800f310 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4605      	mov	r5, r0
 800f314:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f316:	4b08      	ldr	r3, [pc, #32]	; (800f338 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f318:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f31c:	f7ff ff7e 	bl	800f21c <IsListEmpty>
 800f320:	b948      	cbnz	r0, 800f336 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800f322:	4b05      	ldr	r3, [pc, #20]	; (800f338 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f324:	689a      	ldr	r2, [r3, #8]
 800f326:	6859      	ldr	r1, [r3, #4]
 800f328:	4620      	mov	r0, r4
 800f32a:	f7ff ff83 	bl	800f234 <GetElement>
        if( element != NULL )
 800f32e:	b110      	cbz	r0, 800f336 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800f330:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800f332:	2201      	movs	r2, #1
 800f334:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	20003bfc 	.word	0x20003bfc

0800f33c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800f33c:	b510      	push	{r4, lr}
 800f33e:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800f342:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f346:	f7ff ff69 	bl	800f21c <IsListEmpty>
 800f34a:	b940      	cbnz	r0, 800f35e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800f34c:	4b06      	ldr	r3, [pc, #24]	; (800f368 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	6859      	ldr	r1, [r3, #4]
 800f352:	4620      	mov	r0, r4
 800f354:	f7ff ff6e 	bl	800f234 <GetElement>
        if( element != NULL )
 800f358:	b118      	cbz	r0, 800f362 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800f35a:	7840      	ldrb	r0, [r0, #1]
 800f35c:	e000      	b.n	800f360 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f35e:	2001      	movs	r0, #1
}
 800f360:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f362:	2001      	movs	r0, #1
 800f364:	e7fc      	b.n	800f360 <LoRaMacConfirmQueueGetStatus+0x24>
 800f366:	bf00      	nop
 800f368:	20003bfc 	.word	0x20003bfc

0800f36c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800f36c:	b538      	push	{r3, r4, r5, lr}
 800f36e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800f370:	4b0c      	ldr	r3, [pc, #48]	; (800f3a4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800f372:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800f374:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f378:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f37c:	f7ff ff4e 	bl	800f21c <IsListEmpty>
 800f380:	b150      	cbz	r0, 800f398 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800f382:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800f384:	2301      	movs	r3, #1
 800f386:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800f388:	4620      	mov	r0, r4
 800f38a:	f7ff ff3b 	bl	800f204 <IncreaseBufferPointer>
 800f38e:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800f390:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	4283      	cmp	r3, r0
 800f396:	d0f4      	beq.n	800f382 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800f398:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800f39a:	78e3      	ldrb	r3, [r4, #3]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1f3      	bne.n	800f388 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800f3a0:	e7f0      	b.n	800f384 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800f3a2:	bf00      	nop
 800f3a4:	20003bfc 	.word	0x20003bfc

0800f3a8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800f3a8:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800f3aa:	4b04      	ldr	r3, [pc, #16]	; (800f3bc <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800f3ac:	689a      	ldr	r2, [r3, #8]
 800f3ae:	6859      	ldr	r1, [r3, #4]
 800f3b0:	f7ff ff40 	bl	800f234 <GetElement>
 800f3b4:	b100      	cbz	r0, 800f3b8 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800f3b6:	2001      	movs	r0, #1
    }
    return false;
}
 800f3b8:	bd08      	pop	{r3, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20003bfc 	.word	0x20003bfc

0800f3c0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800f3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800f3c6:	4b19      	ldr	r3, [pc, #100]	; (800f42c <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f3c8:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800f3cc:	2204      	movs	r2, #4
 800f3ce:	2100      	movs	r1, #0
 800f3d0:	eb0d 0002 	add.w	r0, sp, r2
 800f3d4:	f003 fe4d 	bl	8013072 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800f3d8:	2400      	movs	r4, #0
 800f3da:	e00d      	b.n	800f3f8 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800f3e2:	785a      	ldrb	r2, [r3, #1]
 800f3e4:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800f3e8:	78db      	ldrb	r3, [r3, #3]
 800f3ea:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800f3ee:	f7ff ff79 	bl	800f2e4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800f3f2:	b1a5      	cbz	r5, 800f41e <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800f3f4:	3401      	adds	r4, #1
 800f3f6:	b2e4      	uxtb	r4, r4
 800f3f8:	42bc      	cmp	r4, r7
 800f3fa:	d214      	bcs.n	800f426 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800f3fc:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f3fe:	685a      	ldr	r2, [r3, #4]
 800f400:	7812      	ldrb	r2, [r2, #0]
 800f402:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800f404:	685a      	ldr	r2, [r3, #4]
 800f406:	7852      	ldrb	r2, [r2, #1]
 800f408:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800f40e:	2d00      	cmp	r5, #0
 800f410:	d0e4      	beq.n	800f3dc <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800f412:	4b06      	ldr	r3, [pc, #24]	; (800f42c <LoRaMacConfirmQueueHandleCb+0x6c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	4630      	mov	r0, r6
 800f41a:	4798      	blx	r3
 800f41c:	e7e7      	b.n	800f3ee <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800f41e:	a801      	add	r0, sp, #4
 800f420:	f7ff ff3c 	bl	800f29c <LoRaMacConfirmQueueAdd>
 800f424:	e7e6      	b.n	800f3f4 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800f426:	b003      	add	sp, #12
 800f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f42a:	bf00      	nop
 800f42c:	20003bfc 	.word	0x20003bfc

0800f430 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800f430:	4b01      	ldr	r3, [pc, #4]	; (800f438 <LoRaMacConfirmQueueGetCnt+0x8>)
 800f432:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f436:	4770      	bx	lr
 800f438:	20003bfc 	.word	0x20003bfc

0800f43c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800f43c:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f43e:	4b03      	ldr	r3, [pc, #12]	; (800f44c <LoRaMacConfirmQueueIsFull+0x10>)
 800f440:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f444:	f7ff feef 	bl	800f226 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800f448:	bd08      	pop	{r3, pc}
 800f44a:	bf00      	nop
 800f44c:	20003bfc 	.word	0x20003bfc

0800f450 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800f450:	b410      	push	{r4}
 800f452:	9c01      	ldr	r4, [sp, #4]
 800f454:	9902      	ldr	r1, [sp, #8]
 800f456:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800f458:	b1da      	cbz	r2, 800f492 <PrepareB0+0x42>
 800f45a:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800f45c:	2049      	movs	r0, #73	; 0x49
 800f45e:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800f460:	2000      	movs	r0, #0
 800f462:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800f464:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800f466:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800f468:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800f46a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800f46c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800f46e:	0a23      	lsrs	r3, r4, #8
 800f470:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800f472:	0c23      	lsrs	r3, r4, #16
 800f474:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800f476:	0e24      	lsrs	r4, r4, #24
 800f478:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800f47a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800f47c:	0a0b      	lsrs	r3, r1, #8
 800f47e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800f480:	0c0b      	lsrs	r3, r1, #16
 800f482:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800f484:	0e09      	lsrs	r1, r1, #24
 800f486:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800f488:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800f48a:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f48e:	bc10      	pop	{r4}
 800f490:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f492:	2009      	movs	r0, #9
 800f494:	e7fb      	b.n	800f48e <PrepareB0+0x3e>
	...

0800f498 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f498:	2300      	movs	r3, #0
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d80e      	bhi.n	800f4bc <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800f49e:	469c      	mov	ip, r3
 800f4a0:	4a07      	ldr	r2, [pc, #28]	; (800f4c0 <GetKeyAddrItem+0x28>)
 800f4a2:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800f4a6:	4282      	cmp	r2, r0
 800f4a8:	d002      	beq.n	800f4b0 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	e7f4      	b.n	800f49a <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800f4b0:	4b03      	ldr	r3, [pc, #12]	; (800f4c0 <GetKeyAddrItem+0x28>)
 800f4b2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800f4b6:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800f4bc:	200b      	movs	r0, #11
}
 800f4be:	4770      	bx	lr
 800f4c0:	200000f4 	.word	0x200000f4

0800f4c4 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800f4c4:	b1f1      	cbz	r1, 800f504 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800f4c6:	3801      	subs	r0, #1
 800f4c8:	2803      	cmp	r0, #3
 800f4ca:	d81d      	bhi.n	800f508 <GetLastFcntDown+0x44>
 800f4cc:	e8df f000 	tbb	[pc, r0]
 800f4d0:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800f4d4:	4a0d      	ldr	r2, [pc, #52]	; (800f50c <GetLastFcntDown+0x48>)
 800f4d6:	6812      	ldr	r2, [r2, #0]
 800f4d8:	6912      	ldr	r2, [r2, #16]
 800f4da:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800f4dc:	2000      	movs	r0, #0
            break;
 800f4de:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800f4e0:	4a0a      	ldr	r2, [pc, #40]	; (800f50c <GetLastFcntDown+0x48>)
 800f4e2:	6812      	ldr	r2, [r2, #0]
 800f4e4:	6952      	ldr	r2, [r2, #20]
 800f4e6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f4e8:	2000      	movs	r0, #0
            break;
 800f4ea:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800f4ec:	4a07      	ldr	r2, [pc, #28]	; (800f50c <GetLastFcntDown+0x48>)
 800f4ee:	6812      	ldr	r2, [r2, #0]
 800f4f0:	6992      	ldr	r2, [r2, #24]
 800f4f2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f4f4:	2000      	movs	r0, #0
            break;
 800f4f6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800f4f8:	4a04      	ldr	r2, [pc, #16]	; (800f50c <GetLastFcntDown+0x48>)
 800f4fa:	6812      	ldr	r2, [r2, #0]
 800f4fc:	69d2      	ldr	r2, [r2, #28]
 800f4fe:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800f500:	2000      	movs	r0, #0
            break;
 800f502:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f504:	2009      	movs	r0, #9
 800f506:	4770      	bx	lr
    switch( fCntID )
 800f508:	2005      	movs	r0, #5
}
 800f50a:	4770      	bx	lr
 800f50c:	20003c20 	.word	0x20003c20

0800f510 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800f510:	b510      	push	{r4, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800f51a:	a901      	add	r1, sp, #4
 800f51c:	f7ff ffd2 	bl	800f4c4 <GetLastFcntDown>
 800f520:	b948      	cbnz	r0, 800f536 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800f522:	9b01      	ldr	r3, [sp, #4]
 800f524:	42a3      	cmp	r3, r4
 800f526:	d309      	bcc.n	800f53c <CheckFCntDown+0x2c>
 800f528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f52c:	d001      	beq.n	800f532 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800f52e:	2000      	movs	r0, #0
 800f530:	e002      	b.n	800f538 <CheckFCntDown+0x28>
        return true;
 800f532:	2001      	movs	r0, #1
 800f534:	e000      	b.n	800f538 <CheckFCntDown+0x28>
        return false;
 800f536:	2000      	movs	r0, #0
    }
}
 800f538:	b002      	add	sp, #8
 800f53a:	bd10      	pop	{r4, pc}
        return true;
 800f53c:	2001      	movs	r0, #1
 800f53e:	e7fb      	b.n	800f538 <CheckFCntDown+0x28>

0800f540 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800f540:	3801      	subs	r0, #1
 800f542:	2803      	cmp	r0, #3
 800f544:	d815      	bhi.n	800f572 <UpdateFCntDown+0x32>
 800f546:	e8df f000 	tbb	[pc, r0]
 800f54a:	0702      	.short	0x0702
 800f54c:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800f54e:	4b09      	ldr	r3, [pc, #36]	; (800f574 <UpdateFCntDown+0x34>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800f554:	6219      	str	r1, [r3, #32]
            break;
 800f556:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800f558:	4b06      	ldr	r3, [pc, #24]	; (800f574 <UpdateFCntDown+0x34>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800f55e:	6219      	str	r1, [r3, #32]
            break;
 800f560:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800f562:	4b04      	ldr	r3, [pc, #16]	; (800f574 <UpdateFCntDown+0x34>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800f568:	6219      	str	r1, [r3, #32]
            break;
 800f56a:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800f56c:	4b01      	ldr	r3, [pc, #4]	; (800f574 <UpdateFCntDown+0x34>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800f572:	4770      	bx	lr
 800f574:	20003c20 	.word	0x20003c20

0800f578 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800f578:	4b0a      	ldr	r3, [pc, #40]	; (800f5a4 <ResetFCnts+0x2c>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	2300      	movs	r3, #0
 800f57e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f584:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f586:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800f588:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800f58a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	dd00      	ble.n	800f592 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800f590:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800f592:	1d99      	adds	r1, r3, #6
 800f594:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800f598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f59c:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f59e:	3301      	adds	r3, #1
 800f5a0:	e7f4      	b.n	800f58c <ResetFCnts+0x14>
 800f5a2:	bf00      	nop
 800f5a4:	20003c20 	.word	0x20003c20

0800f5a8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800f5a8:	4b03      	ldr	r3, [pc, #12]	; (800f5b8 <IsJoinNonce10xOk+0x10>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800f5ae:	4283      	cmp	r3, r0
 800f5b0:	bf2c      	ite	cs
 800f5b2:	2000      	movcs	r0, #0
 800f5b4:	2001      	movcc	r0, #1
 800f5b6:	4770      	bx	lr
 800f5b8:	20003c20 	.word	0x20003c20

0800f5bc <ComputeCmacB0>:
{
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c0:	b088      	sub	sp, #32
 800f5c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800f5c4:	b1f0      	cbz	r0, 800f604 <ComputeCmacB0+0x48>
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	4615      	mov	r5, r2
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	4680      	mov	r8, r0
 800f5ce:	b1de      	cbz	r6, 800f608 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f5d0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f5d4:	d81a      	bhi.n	800f60c <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f5d6:	af04      	add	r7, sp, #16
 800f5d8:	9702      	str	r7, [sp, #8]
 800f5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f5dc:	9301      	str	r3, [sp, #4]
 800f5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f7ff ff31 	bl	800f450 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800f5ee:	9600      	str	r6, [sp, #0]
 800f5f0:	462b      	mov	r3, r5
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	4641      	mov	r1, r8
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	f003 fade 	bl	8012bb8 <SecureElementComputeAesCmac>
 800f5fc:	b940      	cbnz	r0, 800f610 <ComputeCmacB0+0x54>
}
 800f5fe:	b008      	add	sp, #32
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f604:	2009      	movs	r0, #9
 800f606:	e7fa      	b.n	800f5fe <ComputeCmacB0+0x42>
 800f608:	2009      	movs	r0, #9
 800f60a:	e7f8      	b.n	800f5fe <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f60c:	200d      	movs	r0, #13
 800f60e:	e7f6      	b.n	800f5fe <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f610:	200e      	movs	r0, #14
 800f612:	e7f4      	b.n	800f5fe <ComputeCmacB0+0x42>

0800f614 <DeriveSessionKey10x>:
{
 800f614:	b510      	push	{r4, lr}
 800f616:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800f618:	2400      	movs	r4, #0
 800f61a:	9400      	str	r4, [sp, #0]
 800f61c:	9401      	str	r4, [sp, #4]
 800f61e:	9402      	str	r4, [sp, #8]
 800f620:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800f622:	2808      	cmp	r0, #8
 800f624:	d003      	beq.n	800f62e <DeriveSessionKey10x+0x1a>
 800f626:	2809      	cmp	r0, #9
 800f628:	d025      	beq.n	800f676 <DeriveSessionKey10x+0x62>
 800f62a:	200a      	movs	r0, #10
 800f62c:	e021      	b.n	800f672 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800f62e:	2401      	movs	r4, #1
 800f630:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800f634:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800f638:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f63c:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800f640:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800f644:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800f648:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800f64c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f650:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800f654:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800f658:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800f65c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800f660:	0a1b      	lsrs	r3, r3, #8
 800f662:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800f666:	4602      	mov	r2, r0
 800f668:	2101      	movs	r1, #1
 800f66a:	4668      	mov	r0, sp
 800f66c:	f003 fb42 	bl	8012cf4 <SecureElementDeriveAndStoreKey>
 800f670:	b928      	cbnz	r0, 800f67e <DeriveSessionKey10x+0x6a>
}
 800f672:	b004      	add	sp, #16
 800f674:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800f676:	2402      	movs	r4, #2
 800f678:	f88d 4000 	strb.w	r4, [sp]
            break;
 800f67c:	e7da      	b.n	800f634 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f67e:	200e      	movs	r0, #14
 800f680:	e7f7      	b.n	800f672 <DeriveSessionKey10x+0x5e>

0800f682 <PayloadEncrypt>:
{
 800f682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	4690      	mov	r8, r2
 800f68a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d052      	beq.n	800f736 <PayloadEncrypt+0xb4>
 800f690:	460d      	mov	r5, r1
 800f692:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800f694:	2600      	movs	r6, #0
 800f696:	9604      	str	r6, [sp, #16]
 800f698:	9605      	str	r6, [sp, #20]
 800f69a:	9606      	str	r6, [sp, #24]
 800f69c:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800f69e:	9600      	str	r6, [sp, #0]
 800f6a0:	9601      	str	r6, [sp, #4]
 800f6a2:	9602      	str	r6, [sp, #8]
 800f6a4:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800f6a6:	2701      	movs	r7, #1
 800f6a8:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800f6ac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800f6b0:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800f6b4:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800f6b8:	0a19      	lsrs	r1, r3, #8
 800f6ba:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800f6be:	0c19      	lsrs	r1, r3, #16
 800f6c0:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800f6c4:	0e1b      	lsrs	r3, r3, #24
 800f6c6:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800f6ca:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800f6ce:	0a13      	lsrs	r3, r2, #8
 800f6d0:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800f6d4:	0c13      	lsrs	r3, r2, #16
 800f6d6:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800f6da:	0e12      	lsrs	r2, r2, #24
 800f6dc:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800f6e0:	e014      	b.n	800f70c <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800f6e2:	18f2      	adds	r2, r6, r3
 800f6e4:	5ca0      	ldrb	r0, [r4, r2]
 800f6e6:	f103 0120 	add.w	r1, r3, #32
 800f6ea:	4469      	add	r1, sp
 800f6ec:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800f6f0:	4048      	eors	r0, r1
 800f6f2:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	462a      	mov	r2, r5
 800f6fa:	2d10      	cmp	r5, #16
 800f6fc:	bfa8      	it	ge
 800f6fe:	2210      	movge	r2, #16
 800f700:	4293      	cmp	r3, r2
 800f702:	dbee      	blt.n	800f6e2 <PayloadEncrypt+0x60>
        size -= 16;
 800f704:	3d10      	subs	r5, #16
 800f706:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800f708:	3610      	adds	r6, #16
 800f70a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800f70c:	2d00      	cmp	r5, #0
 800f70e:	dd0e      	ble.n	800f72e <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800f710:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800f714:	3701      	adds	r7, #1
 800f716:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800f718:	ab04      	add	r3, sp, #16
 800f71a:	4642      	mov	r2, r8
 800f71c:	2110      	movs	r1, #16
 800f71e:	4668      	mov	r0, sp
 800f720:	f003 fa6f 	bl	8012c02 <SecureElementAesEncrypt>
 800f724:	4603      	mov	r3, r0
 800f726:	2800      	cmp	r0, #0
 800f728:	d0e6      	beq.n	800f6f8 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f72a:	200e      	movs	r0, #14
 800f72c:	e000      	b.n	800f730 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800f72e:	2000      	movs	r0, #0
}
 800f730:	b008      	add	sp, #32
 800f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f736:	2009      	movs	r0, #9
 800f738:	e7fa      	b.n	800f730 <PayloadEncrypt+0xae>

0800f73a <VerifyCmacB0>:
    if( msg == 0 )
 800f73a:	b368      	cbz	r0, 800f798 <VerifyCmacB0+0x5e>
{
 800f73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f740:	b0c8      	sub	sp, #288	; 0x120
 800f742:	460c      	mov	r4, r1
 800f744:	4615      	mov	r5, r2
 800f746:	461e      	mov	r6, r3
 800f748:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800f74a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f74e:	d825      	bhi.n	800f79c <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800f750:	af04      	add	r7, sp, #16
 800f752:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f756:	2100      	movs	r1, #0
 800f758:	4638      	mov	r0, r7
 800f75a:	f003 fc8a 	bl	8013072 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800f75e:	9702      	str	r7, [sp, #8]
 800f760:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800f76c:	4632      	mov	r2, r6
 800f76e:	4629      	mov	r1, r5
 800f770:	4620      	mov	r0, r4
 800f772:	f7ff fe6d 	bl	800f450 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800f776:	4622      	mov	r2, r4
 800f778:	4641      	mov	r1, r8
 800f77a:	a808      	add	r0, sp, #32
 800f77c:	f003 fc61 	bl	8013042 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800f780:	462b      	mov	r3, r5
 800f782:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800f784:	f104 0110 	add.w	r1, r4, #16
 800f788:	4638      	mov	r0, r7
 800f78a:	f003 fa24 	bl	8012bd6 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800f78e:	b130      	cbz	r0, 800f79e <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800f790:	2801      	cmp	r0, #1
 800f792:	d004      	beq.n	800f79e <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f794:	200e      	movs	r0, #14
 800f796:	e002      	b.n	800f79e <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f798:	2009      	movs	r0, #9
}
 800f79a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800f79c:	200d      	movs	r0, #13
}
 800f79e:	b048      	add	sp, #288	; 0x120
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7a4 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800f7a4:	b188      	cbz	r0, 800f7ca <LoRaMacCryptoInit+0x26>
{
 800f7a6:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800f7a8:	4c09      	ldr	r4, [pc, #36]	; (800f7d0 <LoRaMacCryptoInit+0x2c>)
 800f7aa:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800f7ac:	2228      	movs	r2, #40	; 0x28
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	f003 fc5f 	bl	8013072 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800f7ba:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800f7bc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800f7be:	2400      	movs	r4, #0
 800f7c0:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800f7c2:	f7ff fed9 	bl	800f578 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800f7c6:	4620      	mov	r0, r4
}
 800f7c8:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800f7ca:	2008      	movs	r0, #8
}
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	20003c20 	.word	0x20003c20

0800f7d4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800f7d4:	4b02      	ldr	r3, [pc, #8]	; (800f7e0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800f7da:	2000      	movs	r0, #0
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	20003c20 	.word	0x20003c20

0800f7e4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800f7e4:	b130      	cbz	r0, 800f7f4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800f7e6:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <LoRaMacCryptoGetFCntUp+0x14>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f7f4:	2009      	movs	r0, #9
}
 800f7f6:	4770      	bx	lr
 800f7f8:	20003c20 	.word	0x20003c20

0800f7fc <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800f7fc:	b530      	push	{r4, r5, lr}
 800f7fe:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800f800:	2300      	movs	r3, #0
 800f802:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800f804:	b1f2      	cbz	r2, 800f844 <LoRaMacCryptoGetFCntDown+0x48>
 800f806:	460c      	mov	r4, r1
 800f808:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800f80a:	a901      	add	r1, sp, #4
 800f80c:	f7ff fe5a 	bl	800f4c4 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f810:	b948      	cbnz	r0, 800f826 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800f812:	9b01      	ldr	r3, [sp, #4]
 800f814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f818:	d007      	beq.n	800f82a <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800f81e:	2a00      	cmp	r2, #0
 800f820:	dd05      	ble.n	800f82e <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800f822:	4413      	add	r3, r2
 800f824:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f826:	b003      	add	sp, #12
 800f828:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800f82a:	602c      	str	r4, [r5, #0]
 800f82c:	e7fb      	b.n	800f826 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800f82e:	b132      	cbz	r2, 800f83e <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800f830:	0c1b      	lsrs	r3, r3, #16
 800f832:	041b      	lsls	r3, r3, #16
 800f834:	4423      	add	r3, r4
 800f836:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f83a:	602b      	str	r3, [r5, #0]
 800f83c:	e7f3      	b.n	800f826 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800f83e:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800f840:	2007      	movs	r0, #7
 800f842:	e7f0      	b.n	800f826 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f844:	2009      	movs	r0, #9
 800f846:	e7ee      	b.n	800f826 <LoRaMacCryptoGetFCntDown+0x2a>

0800f848 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800f848:	4601      	mov	r1, r0
 800f84a:	b908      	cbnz	r0, 800f850 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f84c:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f84e:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f850:	2300      	movs	r3, #0
 800f852:	2b00      	cmp	r3, #0
 800f854:	dd01      	ble.n	800f85a <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800f856:	2000      	movs	r0, #0
 800f858:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800f85a:	4a07      	ldr	r2, [pc, #28]	; (800f878 <LoRaMacCryptoSetMulticastReference+0x30>)
 800f85c:	6812      	ldr	r2, [r2, #0]
 800f85e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800f862:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800f866:	f103 0c06 	add.w	ip, r3, #6
 800f86a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800f86e:	3204      	adds	r2, #4
 800f870:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f872:	3301      	adds	r3, #1
 800f874:	e7ed      	b.n	800f852 <LoRaMacCryptoSetMulticastReference+0xa>
 800f876:	bf00      	nop
 800f878:	20003c20 	.word	0x20003c20

0800f87c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800f87c:	b1d8      	cbz	r0, 800f8b6 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800f87e:	b510      	push	{r4, lr}
 800f880:	b082      	sub	sp, #8
 800f882:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800f884:	4b0f      	ldr	r3, [pc, #60]	; (800f8c4 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	8893      	ldrh	r3, [r2, #4]
 800f88a:	3301      	adds	r3, #1
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800f890:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f892:	f000 fa32 	bl	800fcfa <LoRaMacSerializerJoinRequest>
 800f896:	b980      	cbnz	r0, 800f8ba <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800f898:	4623      	mov	r3, r4
 800f89a:	f853 1b18 	ldr.w	r1, [r3], #24
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	2213      	movs	r2, #19
 800f8a4:	f003 f988 	bl	8012bb8 <SecureElementComputeAesCmac>
 800f8a8:	b950      	cbnz	r0, 800f8c0 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f000 fa25 	bl	800fcfa <LoRaMacSerializerJoinRequest>
 800f8b0:	b120      	cbz	r0, 800f8bc <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f8b2:	2010      	movs	r0, #16
 800f8b4:	e002      	b.n	800f8bc <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f8b6:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800f8b8:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f8ba:	2010      	movs	r0, #16
}
 800f8bc:	b002      	add	sp, #8
 800f8be:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800f8c0:	200e      	movs	r0, #14
 800f8c2:	e7fb      	b.n	800f8bc <LoRaMacCryptoPrepareJoinRequest+0x40>
 800f8c4:	20003c20 	.word	0x20003c20

0800f8c8 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d036      	beq.n	800f93a <LoRaMacCryptoSecureMessage+0x72>
{
 800f8cc:	b530      	push	{r4, r5, lr}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800f8d4:	4b1d      	ldr	r3, [pc, #116]	; (800f94c <LoRaMacCryptoSecureMessage+0x84>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	4283      	cmp	r3, r0
 800f8dc:	d82f      	bhi.n	800f93e <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800f8de:	f895 2020 	ldrb.w	r2, [r5, #32]
 800f8e2:	b342      	cbz	r2, 800f936 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800f8e4:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800f8e6:	42a3      	cmp	r3, r4
 800f8e8:	d209      	bcs.n	800f8fe <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800f8ea:	9401      	str	r4, [sp, #4]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	68ab      	ldr	r3, [r5, #8]
 800f8f2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800f8f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800f8f8:	f7ff fec3 	bl	800f682 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f8fc:	bb10      	cbnz	r0, 800f944 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f8fe:	4628      	mov	r0, r5
 800f900:	f000 fa31 	bl	800fd66 <LoRaMacSerializerData>
 800f904:	b9e8      	cbnz	r0, 800f942 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800f906:	7929      	ldrb	r1, [r5, #4]
 800f908:	3904      	subs	r1, #4
 800f90a:	462b      	mov	r3, r5
 800f90c:	f853 0b2c 	ldr.w	r0, [r3], #44
 800f910:	9303      	str	r3, [sp, #12]
 800f912:	9402      	str	r4, [sp, #8]
 800f914:	68ab      	ldr	r3, [r5, #8]
 800f916:	9301      	str	r3, [sp, #4]
 800f918:	2300      	movs	r3, #0
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	2208      	movs	r2, #8
 800f91e:	b289      	uxth	r1, r1
 800f920:	f7ff fe4c 	bl	800f5bc <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f924:	b970      	cbnz	r0, 800f944 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800f926:	4628      	mov	r0, r5
 800f928:	f000 fa1d 	bl	800fd66 <LoRaMacSerializerData>
 800f92c:	b960      	cbnz	r0, 800f948 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800f92e:	4b07      	ldr	r3, [pc, #28]	; (800f94c <LoRaMacCryptoSecureMessage+0x84>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800f934:	e006      	b.n	800f944 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800f936:	2208      	movs	r2, #8
 800f938:	e7d5      	b.n	800f8e6 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f93a:	2009      	movs	r0, #9
}
 800f93c:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f93e:	2006      	movs	r0, #6
 800f940:	e000      	b.n	800f944 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f942:	2010      	movs	r0, #16
}
 800f944:	b005      	add	sp, #20
 800f946:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800f948:	2010      	movs	r0, #16
 800f94a:	e7fb      	b.n	800f944 <LoRaMacCryptoSecureMessage+0x7c>
 800f94c:	20003c20 	.word	0x20003c20

0800f950 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800f950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f954:	b087      	sub	sp, #28
 800f956:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800f958:	2e00      	cmp	r6, #0
 800f95a:	d049      	beq.n	800f9f0 <LoRaMacCryptoUnsecureMessage+0xa0>
 800f95c:	4605      	mov	r5, r0
 800f95e:	4688      	mov	r8, r1
 800f960:	4617      	mov	r7, r2
 800f962:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800f964:	4619      	mov	r1, r3
 800f966:	4610      	mov	r0, r2
 800f968:	f7ff fdd2 	bl	800f510 <CheckFCntDown>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d041      	beq.n	800f9f4 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800f970:	4630      	mov	r0, r6
 800f972:	f000 f963 	bl	800fc3c <LoRaMacParserData>
 800f976:	2800      	cmp	r0, #0
 800f978:	d141      	bne.n	800f9fe <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800f97a:	a905      	add	r1, sp, #20
 800f97c:	4628      	mov	r0, r5
 800f97e:	f7ff fd8b 	bl	800f498 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f982:	4605      	mov	r5, r0
 800f984:	2800      	cmp	r0, #0
 800f986:	d136      	bne.n	800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800f98e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800f990:	68b3      	ldr	r3, [r6, #8]
 800f992:	4543      	cmp	r3, r8
 800f994:	d135      	bne.n	800fa02 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800f996:	7b33      	ldrb	r3, [r6, #12]
 800f998:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800f99c:	491a      	ldr	r1, [pc, #104]	; (800fa08 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800f99e:	6809      	ldr	r1, [r1, #0]
 800f9a0:	7889      	ldrb	r1, [r1, #2]
 800f9a2:	b901      	cbnz	r1, 800f9a6 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800f9a4:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800f9a6:	7931      	ldrb	r1, [r6, #4]
 800f9a8:	3904      	subs	r1, #4
 800f9aa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800f9ac:	9003      	str	r0, [sp, #12]
 800f9ae:	9402      	str	r4, [sp, #8]
 800f9b0:	f8cd 8004 	str.w	r8, [sp, #4]
 800f9b4:	2001      	movs	r0, #1
 800f9b6:	9000      	str	r0, [sp, #0]
 800f9b8:	b289      	uxth	r1, r1
 800f9ba:	6830      	ldr	r0, [r6, #0]
 800f9bc:	f7ff febd 	bl	800f73a <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f9c0:	4605      	mov	r5, r0
 800f9c2:	b9c0      	cbnz	r0, 800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800f9c4:	f896 3020 	ldrb.w	r3, [r6, #32]
 800f9c8:	b90b      	cbnz	r3, 800f9ce <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800f9ca:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800f9ce:	9401      	str	r4, [sp, #4]
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	4643      	mov	r3, r8
 800f9d6:	464a      	mov	r2, r9
 800f9d8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800f9dc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800f9de:	f7ff fe50 	bl	800f682 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	b938      	cbnz	r0, 800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	f7ff fda9 	bl	800f540 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800f9ee:	e002      	b.n	800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f9f0:	2509      	movs	r5, #9
 800f9f2:	e000      	b.n	800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800f9f4:	2506      	movs	r5, #6
}
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	b007      	add	sp, #28
 800f9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800f9fe:	250f      	movs	r5, #15
 800fa00:	e7f9      	b.n	800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800fa02:	2502      	movs	r5, #2
 800fa04:	e7f7      	b.n	800f9f6 <LoRaMacCryptoUnsecureMessage+0xa6>
 800fa06:	bf00      	nop
 800fa08:	20003c20 	.word	0x20003c20

0800fa0c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800fa0c:	b500      	push	{lr}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800fa12:	2300      	movs	r3, #0
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	9301      	str	r3, [sp, #4]
 800fa18:	9302      	str	r3, [sp, #8]
 800fa1a:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800fa1c:	290b      	cmp	r1, #11
 800fa1e:	d007      	beq.n	800fa30 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800fa20:	290c      	cmp	r1, #12
 800fa22:	d013      	beq.n	800fa4c <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800fa24:	290a      	cmp	r1, #10
 800fa26:	d00c      	beq.n	800fa42 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800fa28:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fa2a:	b005      	add	sp, #20
 800fa2c:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800fa30:	2801      	cmp	r0, #1
 800fa32:	d001      	beq.n	800fa38 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800fa34:	2100      	movs	r1, #0
 800fa36:	e00a      	b.n	800fa4e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800fa38:	2320      	movs	r3, #32
 800fa3a:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800fa3e:	2100      	movs	r1, #0
 800fa40:	e005      	b.n	800fa4e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800fa42:	2330      	movs	r3, #48	; 0x30
 800fa44:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800fa48:	2100      	movs	r1, #0
            break;
 800fa4a:	e000      	b.n	800fa4e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800fa4c:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800fa4e:	4668      	mov	r0, sp
 800fa50:	f003 f950 	bl	8012cf4 <SecureElementDeriveAndStoreKey>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d0e8      	beq.n	800fa2a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa58:	200e      	movs	r0, #14
 800fa5a:	e7e6      	b.n	800fa2a <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800fa5c <LoRaMacCryptoSetKey>:
{
 800fa5c:	b510      	push	{r4, lr}
 800fa5e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800fa60:	f003 f906 	bl	8012c70 <SecureElementSetKey>
 800fa64:	b998      	cbnz	r0, 800fa8e <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800fa66:	b104      	cbz	r4, 800fa6a <LoRaMacCryptoSetKey+0xe>
}
 800fa68:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <LoRaMacCryptoSetKey+0x40>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	210b      	movs	r1, #11
 800fa70:	7898      	ldrb	r0, [r3, #2]
 800fa72:	f7ff ffcb 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
 800fa76:	b960      	cbnz	r0, 800fa92 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800fa78:	210c      	movs	r1, #12
 800fa7a:	f7ff ffc7 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
 800fa7e:	b950      	cbnz	r0, 800fa96 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800fa80:	210a      	movs	r1, #10
 800fa82:	f7ff ffc3 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d0ee      	beq.n	800fa68 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa8a:	200e      	movs	r0, #14
 800fa8c:	e7ec      	b.n	800fa68 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa8e:	200e      	movs	r0, #14
 800fa90:	e7ea      	b.n	800fa68 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa92:	200e      	movs	r0, #14
 800fa94:	e7e8      	b.n	800fa68 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fa96:	200e      	movs	r0, #14
 800fa98:	e7e6      	b.n	800fa68 <LoRaMacCryptoSetKey+0xc>
 800fa9a:	bf00      	nop
 800fa9c:	20003c20 	.word	0x20003c20

0800faa0 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800faa0:	2a00      	cmp	r2, #0
 800faa2:	d06c      	beq.n	800fb7e <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa6:	b08f      	sub	sp, #60	; 0x3c
 800faa8:	4607      	mov	r7, r0
 800faaa:	460d      	mov	r5, r1
 800faac:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800faae:	2900      	cmp	r1, #0
 800fab0:	d067      	beq.n	800fb82 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800fab2:	2600      	movs	r6, #0
 800fab4:	9605      	str	r6, [sp, #20]
 800fab6:	221d      	movs	r2, #29
 800fab8:	4631      	mov	r1, r6
 800faba:	a806      	add	r0, sp, #24
 800fabc:	f005 fe78 	bl	80157b0 <memset>
    uint8_t versionMinor         = 0;
 800fac0:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800fac4:	4b33      	ldr	r3, [pc, #204]	; (800fb94 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800faca:	f10d 0313 	add.w	r3, sp, #19
 800face:	9302      	str	r3, [sp, #8]
 800fad0:	ab05      	add	r3, sp, #20
 800fad2:	9301      	str	r3, [sp, #4]
 800fad4:	7923      	ldrb	r3, [r4, #4]
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	4632      	mov	r2, r6
 800fadc:	4629      	mov	r1, r5
 800fade:	4638      	mov	r0, r7
 800fae0:	f003 f928 	bl	8012d34 <SecureElementProcessJoinAccept>
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d14e      	bne.n	800fb86 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800fae8:	7922      	ldrb	r2, [r4, #4]
 800faea:	a905      	add	r1, sp, #20
 800faec:	6820      	ldr	r0, [r4, #0]
 800faee:	f003 faa8 	bl	8013042 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800faf2:	4620      	mov	r0, r4
 800faf4:	f000 f850 	bl	800fb98 <LoRaMacParserJoinAccept>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d147      	bne.n	800fb8c <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800fafc:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800fafe:	79e3      	ldrb	r3, [r4, #7]
 800fb00:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800fb04:	7a23      	ldrb	r3, [r4, #8]
 800fb06:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7ff fd4c 	bl	800f5a8 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d03d      	beq.n	800fb90 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800fb14:	4b1f      	ldr	r3, [pc, #124]	; (800fb94 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800fb1a:	210b      	movs	r1, #11
 800fb1c:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800fb20:	f7ff ff74 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fb24:	bb80      	cbnz	r0, 800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800fb26:	210c      	movs	r1, #12
 800fb28:	2000      	movs	r0, #0
 800fb2a:	f7ff ff6f 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fb2e:	bb58      	cbnz	r0, 800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800fb30:	210a      	movs	r1, #10
 800fb32:	2000      	movs	r0, #0
 800fb34:	f7ff ff6a 	bl	800fa0c <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fb38:	bb30      	cbnz	r0, 800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800fb3a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800fb3c:	7aa2      	ldrb	r2, [r4, #10]
 800fb3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800fb42:	7ae2      	ldrb	r2, [r4, #11]
 800fb44:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800fb48:	4633      	mov	r3, r6
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	2009      	movs	r0, #9
 800fb50:	f7ff fd60 	bl	800f614 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fb54:	b9c0      	cbnz	r0, 800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800fb56:	4633      	mov	r3, r6
 800fb58:	4622      	mov	r2, r4
 800fb5a:	4629      	mov	r1, r5
 800fb5c:	2008      	movs	r0, #8
 800fb5e:	f7ff fd59 	bl	800f614 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800fb62:	b988      	cbnz	r0, 800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fb6c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800fb6e:	2200      	movs	r2, #0
 800fb70:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fb72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb76:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fb78:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fb7a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800fb7c:	e004      	b.n	800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fb7e:	2009      	movs	r0, #9
}
 800fb80:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fb82:	2009      	movs	r0, #9
 800fb84:	e000      	b.n	800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fb86:	200e      	movs	r0, #14
}
 800fb88:	b00f      	add	sp, #60	; 0x3c
 800fb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800fb8c:	200f      	movs	r0, #15
 800fb8e:	e7fb      	b.n	800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800fb90:	2003      	movs	r0, #3
 800fb92:	e7f9      	b.n	800fb88 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800fb94:	20003c20 	.word	0x20003c20

0800fb98 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d049      	beq.n	800fc30 <LoRaMacParserJoinAccept+0x98>
{
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fba0:	6801      	ldr	r1, [r0, #0]
 800fba2:	2900      	cmp	r1, #0
 800fba4:	d046      	beq.n	800fc34 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800fba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbaa:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800fbac:	2203      	movs	r2, #3
 800fbae:	3006      	adds	r0, #6
 800fbb0:	f003 fa47 	bl	8013042 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f850 1b09 	ldr.w	r1, [r0], #9
 800fbba:	2203      	movs	r2, #3
 800fbbc:	3104      	adds	r1, #4
 800fbbe:	f003 fa40 	bl	8013042 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800fbc2:	6821      	ldr	r1, [r4, #0]
 800fbc4:	79cb      	ldrb	r3, [r1, #7]
 800fbc6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fbc8:	7a0a      	ldrb	r2, [r1, #8]
 800fbca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fbce:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fbd0:	7a4a      	ldrb	r2, [r1, #9]
 800fbd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbd6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fbd8:	7a8a      	ldrb	r2, [r1, #10]
 800fbda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fbde:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800fbe0:	7acb      	ldrb	r3, [r1, #11]
 800fbe2:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800fbe4:	7b0b      	ldrb	r3, [r1, #12]
 800fbe6:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800fbe8:	7923      	ldrb	r3, [r4, #4]
 800fbea:	2b21      	cmp	r3, #33	; 0x21
 800fbec:	d018      	beq.n	800fc20 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800fbee:	2b11      	cmp	r3, #17
 800fbf0:	dc22      	bgt.n	800fc38 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800fbf2:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800fbf4:	6821      	ldr	r1, [r4, #0]
 800fbf6:	f102 0c01 	add.w	ip, r2, #1
 800fbfa:	5c8b      	ldrb	r3, [r1, r2]
 800fbfc:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fbfe:	1c90      	adds	r0, r2, #2
 800fc00:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800fc04:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800fc08:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fc0a:	3203      	adds	r2, #3
 800fc0c:	5c08      	ldrb	r0, [r1, r0]
 800fc0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fc12:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fc14:	5c8a      	ldrb	r2, [r1, r2]
 800fc16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc1a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800fc1c:	2000      	movs	r0, #0
}
 800fc1e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800fc20:	2210      	movs	r2, #16
 800fc22:	310d      	adds	r1, #13
 800fc24:	f104 0012 	add.w	r0, r4, #18
 800fc28:	f003 fa0b 	bl	8013042 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800fc2c:	221d      	movs	r2, #29
 800fc2e:	e7e1      	b.n	800fbf4 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800fc30:	2002      	movs	r0, #2
}
 800fc32:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800fc34:	2002      	movs	r0, #2
 800fc36:	e7f2      	b.n	800fc1e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800fc38:	2001      	movs	r0, #1
 800fc3a:	e7f0      	b.n	800fc1e <LoRaMacParserJoinAccept+0x86>

0800fc3c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d058      	beq.n	800fcf2 <LoRaMacParserData+0xb6>
{
 800fc40:	b510      	push	{r4, lr}
 800fc42:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fc44:	6801      	ldr	r1, [r0, #0]
 800fc46:	2900      	cmp	r1, #0
 800fc48:	d055      	beq.n	800fcf6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800fc4a:	780b      	ldrb	r3, [r1, #0]
 800fc4c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800fc4e:	784b      	ldrb	r3, [r1, #1]
 800fc50:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800fc52:	788a      	ldrb	r2, [r1, #2]
 800fc54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fc58:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800fc5a:	78ca      	ldrb	r2, [r1, #3]
 800fc5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc60:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800fc62:	790a      	ldrb	r2, [r1, #4]
 800fc64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc68:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800fc6a:	794b      	ldrb	r3, [r1, #5]
 800fc6c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800fc6e:	798b      	ldrb	r3, [r1, #6]
 800fc70:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800fc72:	79ca      	ldrb	r2, [r1, #7]
 800fc74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fc78:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800fc7a:	7b02      	ldrb	r2, [r0, #12]
 800fc7c:	f002 020f 	and.w	r2, r2, #15
 800fc80:	3108      	adds	r1, #8
 800fc82:	3010      	adds	r0, #16
 800fc84:	f003 f9dd 	bl	8013042 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fc88:	7b23      	ldrb	r3, [r4, #12]
 800fc8a:	f003 030f 	and.w	r3, r3, #15
 800fc8e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800fc92:	2200      	movs	r2, #0
 800fc94:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800fc98:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800fc9c:	7922      	ldrb	r2, [r4, #4]
 800fc9e:	1a11      	subs	r1, r2, r0
 800fca0:	2904      	cmp	r1, #4
 800fca2:	dc16      	bgt.n	800fcd2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800fca4:	6822      	ldr	r2, [r4, #0]
 800fca6:	7923      	ldrb	r3, [r4, #4]
 800fca8:	441a      	add	r2, r3
 800fcaa:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800fcae:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800fcb0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fcb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800fcb8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800fcba:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fcbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fcc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800fcc4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800fcc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fccc:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800fcce:	2000      	movs	r0, #0
}
 800fcd0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800fcd2:	6821      	ldr	r1, [r4, #0]
 800fcd4:	3309      	adds	r3, #9
 800fcd6:	5c08      	ldrb	r0, [r1, r0]
 800fcd8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800fcdc:	1ad2      	subs	r2, r2, r3
 800fcde:	b2d2      	uxtb	r2, r2
 800fce0:	3a04      	subs	r2, #4
 800fce2:	b2d2      	uxtb	r2, r2
 800fce4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800fce8:	4419      	add	r1, r3
 800fcea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fcec:	f003 f9a9 	bl	8013042 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800fcf0:	e7d8      	b.n	800fca4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800fcf2:	2002      	movs	r0, #2
}
 800fcf4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800fcf6:	2002      	movs	r0, #2
 800fcf8:	e7ea      	b.n	800fcd0 <LoRaMacParserData+0x94>

0800fcfa <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fcfa:	b370      	cbz	r0, 800fd5a <LoRaMacSerializerJoinRequest+0x60>
{
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fd00:	6803      	ldr	r3, [r0, #0]
 800fd02:	b363      	cbz	r3, 800fd5e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800fd04:	7902      	ldrb	r2, [r0, #4]
 800fd06:	2a16      	cmp	r2, #22
 800fd08:	d92b      	bls.n	800fd62 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800fd0a:	7942      	ldrb	r2, [r0, #5]
 800fd0c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fd0e:	4601      	mov	r1, r0
 800fd10:	f851 0b06 	ldr.w	r0, [r1], #6
 800fd14:	2208      	movs	r2, #8
 800fd16:	3001      	adds	r0, #1
 800fd18:	f003 f99e 	bl	8013058 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	f851 0b0e 	ldr.w	r0, [r1], #14
 800fd22:	2208      	movs	r2, #8
 800fd24:	3009      	adds	r0, #9
 800fd26:	f003 f997 	bl	8013058 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800fd2a:	8ae2      	ldrh	r2, [r4, #22]
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800fd30:	8ae3      	ldrh	r3, [r4, #22]
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	0a1b      	lsrs	r3, r3, #8
 800fd36:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800fd38:	69a2      	ldr	r2, [r4, #24]
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800fd3e:	69a3      	ldr	r3, [r4, #24]
 800fd40:	0a1b      	lsrs	r3, r3, #8
 800fd42:	6822      	ldr	r2, [r4, #0]
 800fd44:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800fd46:	8b62      	ldrh	r2, [r4, #26]
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800fd4c:	7ee2      	ldrb	r2, [r4, #27]
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800fd52:	2317      	movs	r3, #23
 800fd54:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800fd56:	2000      	movs	r0, #0
}
 800fd58:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fd5a:	2001      	movs	r0, #1
}
 800fd5c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fd5e:	2001      	movs	r0, #1
 800fd60:	e7fa      	b.n	800fd58 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800fd62:	2002      	movs	r0, #2
 800fd64:	e7f8      	b.n	800fd58 <LoRaMacSerializerJoinRequest+0x5e>

0800fd66 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d066      	beq.n	800fe38 <LoRaMacSerializerData+0xd2>
{
 800fd6a:	b538      	push	{r3, r4, r5, lr}
 800fd6c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800fd6e:	6801      	ldr	r1, [r0, #0]
 800fd70:	2900      	cmp	r1, #0
 800fd72:	d063      	beq.n	800fe3c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fd74:	7b02      	ldrb	r2, [r0, #12]
 800fd76:	f002 020f 	and.w	r2, r2, #15
 800fd7a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800fd7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fd82:	b10b      	cbz	r3, 800fd88 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800fd84:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800fd88:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800fd8e:	7922      	ldrb	r2, [r4, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d355      	bcc.n	800fe40 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800fd94:	7963      	ldrb	r3, [r4, #5]
 800fd96:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800fd98:	68a2      	ldr	r2, [r4, #8]
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800fd9e:	68a3      	ldr	r3, [r4, #8]
 800fda0:	0a1b      	lsrs	r3, r3, #8
 800fda2:	6822      	ldr	r2, [r4, #0]
 800fda4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800fda6:	8962      	ldrh	r2, [r4, #10]
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800fdac:	7ae2      	ldrb	r2, [r4, #11]
 800fdae:	6823      	ldr	r3, [r4, #0]
 800fdb0:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	7b22      	ldrb	r2, [r4, #12]
 800fdb6:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800fdb8:	89e2      	ldrh	r2, [r4, #14]
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800fdbe:	89e3      	ldrh	r3, [r4, #14]
 800fdc0:	6822      	ldr	r2, [r4, #0]
 800fdc2:	0a1b      	lsrs	r3, r3, #8
 800fdc4:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	f851 0b10 	ldr.w	r0, [r1], #16
 800fdcc:	7b22      	ldrb	r2, [r4, #12]
 800fdce:	f002 020f 	and.w	r2, r2, #15
 800fdd2:	3008      	adds	r0, #8
 800fdd4:	f003 f935 	bl	8013042 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800fdd8:	7b23      	ldrb	r3, [r4, #12]
 800fdda:	f003 030f 	and.w	r3, r3, #15
 800fdde:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800fde2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fde6:	b12a      	cbz	r2, 800fdf4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800fde8:	6822      	ldr	r2, [r4, #0]
 800fdea:	f894 1020 	ldrb.w	r1, [r4, #32]
 800fdee:	5551      	strb	r1, [r2, r5]
 800fdf0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800fdf4:	6820      	ldr	r0, [r4, #0]
 800fdf6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800fdfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fdfc:	4428      	add	r0, r5
 800fdfe:	f003 f920 	bl	8013042 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800fe02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fe06:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800fe08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fe0a:	6821      	ldr	r1, [r4, #0]
 800fe0c:	1c5a      	adds	r2, r3, #1
 800fe0e:	b292      	uxth	r2, r2
 800fe10:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800fe12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fe14:	0a08      	lsrs	r0, r1, #8
 800fe16:	6825      	ldr	r5, [r4, #0]
 800fe18:	1c99      	adds	r1, r3, #2
 800fe1a:	b289      	uxth	r1, r1
 800fe1c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800fe1e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800fe20:	6820      	ldr	r0, [r4, #0]
 800fe22:	1cda      	adds	r2, r3, #3
 800fe24:	b292      	uxth	r2, r2
 800fe26:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800fe28:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800fe2c:	6821      	ldr	r1, [r4, #0]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800fe32:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800fe34:	2000      	movs	r0, #0
}
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fe38:	2001      	movs	r0, #1
}
 800fe3a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800fe3c:	2001      	movs	r0, #1
 800fe3e:	e7fa      	b.n	800fe36 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800fe40:	2002      	movs	r0, #2
 800fe42:	e7f8      	b.n	800fe36 <LoRaMacSerializerData+0xd0>

0800fe44 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800fe44:	4b02      	ldr	r3, [pc, #8]	; (800fe50 <NvmDataMgmtEvent+0xc>)
 800fe46:	881a      	ldrh	r2, [r3, #0]
 800fe48:	4310      	orrs	r0, r2
 800fe4a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	20003c24 	.word	0x20003c24

0800fe54 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800fe54:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800fe56:	4b06      	ldr	r3, [pc, #24]	; (800fe70 <NvmDataMgmtStoreBegin+0x1c>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	b11b      	cbz	r3, 800fe64 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800fe5c:	f7fe f890 	bl	800df80 <LoRaMacStop>
 800fe60:	b918      	cbnz	r0, 800fe6a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fe62:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800fe64:	f06f 0001 	mvn.w	r0, #1
 800fe68:	e7fb      	b.n	800fe62 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800fe6a:	f06f 0002 	mvn.w	r0, #2
 800fe6e:	e7f8      	b.n	800fe62 <NvmDataMgmtStoreBegin+0xe>
 800fe70:	20003c24 	.word	0x20003c24

0800fe74 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800fe74:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fe76:	2400      	movs	r4, #0
 800fe78:	4b02      	ldr	r3, [pc, #8]	; (800fe84 <NvmDataMgmtStoreEnd+0x10>)
 800fe7a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800fe7c:	f7fe f874 	bl	800df68 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fe80:	4620      	mov	r0, r4
 800fe82:	bd10      	pop	{r4, pc}
 800fe84:	20003c24 	.word	0x20003c24

0800fe88 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800fe88:	2805      	cmp	r0, #5
 800fe8a:	d005      	beq.n	800fe98 <RegionIsActive+0x10>
 800fe8c:	2808      	cmp	r0, #8
 800fe8e:	d001      	beq.n	800fe94 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800fe90:	2000      	movs	r0, #0
        }
    }
}
 800fe92:	4770      	bx	lr
    switch( region )
 800fe94:	2001      	movs	r0, #1
 800fe96:	4770      	bx	lr
 800fe98:	2001      	movs	r0, #1
 800fe9a:	4770      	bx	lr

0800fe9c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800fe9c:	b500      	push	{lr}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	4603      	mov	r3, r0
 800fea2:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800fea4:	2200      	movs	r2, #0
 800fea6:	9200      	str	r2, [sp, #0]
    switch( region )
 800fea8:	2b05      	cmp	r3, #5
 800feaa:	d004      	beq.n	800feb6 <RegionGetPhyParam+0x1a>
 800feac:	2b08      	cmp	r3, #8
 800feae:	d009      	beq.n	800fec4 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800feb0:	9b00      	ldr	r3, [sp, #0]
 800feb2:	9301      	str	r3, [sp, #4]
 800feb4:	e002      	b.n	800febc <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800feb6:	f000 fded 	bl	8010a94 <RegionEU868GetPhyParam>
 800feba:	9001      	str	r0, [sp, #4]
        }
    }
}
 800febc:	9801      	ldr	r0, [sp, #4]
 800febe:	b003      	add	sp, #12
 800fec0:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800fec4:	f001 fbdc 	bl	8011680 <RegionUS915GetPhyParam>
 800fec8:	9001      	str	r0, [sp, #4]
 800feca:	e7f7      	b.n	800febc <RegionGetPhyParam+0x20>

0800fecc <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800fecc:	b508      	push	{r3, lr}
 800fece:	4603      	mov	r3, r0
 800fed0:	4608      	mov	r0, r1
    switch( region )
 800fed2:	2b05      	cmp	r3, #5
 800fed4:	d002      	beq.n	800fedc <RegionSetBandTxDone+0x10>
 800fed6:	2b08      	cmp	r3, #8
 800fed8:	d003      	beq.n	800fee2 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800feda:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800fedc:	f000 fe96 	bl	8010c0c <RegionEU868SetBandTxDone>
 800fee0:	e7fb      	b.n	800feda <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800fee2:	f001 fca3 	bl	801182c <RegionUS915SetBandTxDone>
 800fee6:	e7f8      	b.n	800feda <RegionSetBandTxDone+0xe>

0800fee8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800fee8:	b508      	push	{r3, lr}
 800feea:	4603      	mov	r3, r0
 800feec:	4608      	mov	r0, r1
    switch( region )
 800feee:	2b05      	cmp	r3, #5
 800fef0:	d002      	beq.n	800fef8 <RegionInitDefaults+0x10>
 800fef2:	2b08      	cmp	r3, #8
 800fef4:	d003      	beq.n	800fefe <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800fef6:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800fef8:	f000 fea6 	bl	8010c48 <RegionEU868InitDefaults>
 800fefc:	e7fb      	b.n	800fef6 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800fefe:	f001 fcb3 	bl	8011868 <RegionUS915InitDefaults>
}
 800ff02:	e7f8      	b.n	800fef6 <RegionInitDefaults+0xe>

0800ff04 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ff04:	b508      	push	{r3, lr}
 800ff06:	4603      	mov	r3, r0
 800ff08:	4608      	mov	r0, r1
 800ff0a:	4611      	mov	r1, r2
    switch( region )
 800ff0c:	2b05      	cmp	r3, #5
 800ff0e:	d003      	beq.n	800ff18 <RegionVerify+0x14>
 800ff10:	2b08      	cmp	r3, #8
 800ff12:	d004      	beq.n	800ff1e <RegionVerify+0x1a>
 800ff14:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800ff16:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800ff18:	f000 ff02 	bl	8010d20 <RegionEU868Verify>
 800ff1c:	e7fb      	b.n	800ff16 <RegionVerify+0x12>
        US915_VERIFY( );
 800ff1e:	f001 fd47 	bl	80119b0 <RegionUS915Verify>
 800ff22:	e7f8      	b.n	800ff16 <RegionVerify+0x12>

0800ff24 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ff24:	b508      	push	{r3, lr}
 800ff26:	4603      	mov	r3, r0
 800ff28:	4608      	mov	r0, r1
    switch( region )
 800ff2a:	2b05      	cmp	r3, #5
 800ff2c:	d002      	beq.n	800ff34 <RegionApplyCFList+0x10>
 800ff2e:	2b08      	cmp	r3, #8
 800ff30:	d003      	beq.n	800ff3a <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800ff32:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800ff34:	f001 fac6 	bl	80114c4 <RegionEU868ApplyCFList>
 800ff38:	e7fb      	b.n	800ff32 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800ff3a:	f001 fd73 	bl	8011a24 <RegionUS915ApplyCFList>
}
 800ff3e:	e7f8      	b.n	800ff32 <RegionApplyCFList+0xe>

0800ff40 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800ff40:	b508      	push	{r3, lr}
 800ff42:	4603      	mov	r3, r0
 800ff44:	4608      	mov	r0, r1
    switch( region )
 800ff46:	2b05      	cmp	r3, #5
 800ff48:	d003      	beq.n	800ff52 <RegionChanMaskSet+0x12>
 800ff4a:	2b08      	cmp	r3, #8
 800ff4c:	d004      	beq.n	800ff58 <RegionChanMaskSet+0x18>
 800ff4e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800ff50:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800ff52:	f000 ff2b 	bl	8010dac <RegionEU868ChanMaskSet>
 800ff56:	e7fb      	b.n	800ff50 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800ff58:	f001 fda2 	bl	8011aa0 <RegionUS915ChanMaskSet>
 800ff5c:	e7f8      	b.n	800ff50 <RegionChanMaskSet+0x10>

0800ff5e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ff5e:	b508      	push	{r3, lr}
 800ff60:	4684      	mov	ip, r0
 800ff62:	4608      	mov	r0, r1
 800ff64:	4611      	mov	r1, r2
 800ff66:	461a      	mov	r2, r3
    switch( region )
 800ff68:	f1bc 0f05 	cmp.w	ip, #5
 800ff6c:	d003      	beq.n	800ff76 <RegionComputeRxWindowParameters+0x18>
 800ff6e:	f1bc 0f08 	cmp.w	ip, #8
 800ff72:	d004      	beq.n	800ff7e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800ff74:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ff76:	9b02      	ldr	r3, [sp, #8]
 800ff78:	f000 ff36 	bl	8010de8 <RegionEU868ComputeRxWindowParameters>
 800ff7c:	e7fa      	b.n	800ff74 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ff7e:	9b02      	ldr	r3, [sp, #8]
 800ff80:	f001 fdd0 	bl	8011b24 <RegionUS915ComputeRxWindowParameters>
}
 800ff84:	e7f6      	b.n	800ff74 <RegionComputeRxWindowParameters+0x16>

0800ff86 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ff86:	b508      	push	{r3, lr}
 800ff88:	4603      	mov	r3, r0
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	4611      	mov	r1, r2
    switch( region )
 800ff8e:	2b05      	cmp	r3, #5
 800ff90:	d003      	beq.n	800ff9a <RegionRxConfig+0x14>
 800ff92:	2b08      	cmp	r3, #8
 800ff94:	d004      	beq.n	800ffa0 <RegionRxConfig+0x1a>
 800ff96:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800ff98:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800ff9a:	f000 ff5b 	bl	8010e54 <RegionEU868RxConfig>
 800ff9e:	e7fb      	b.n	800ff98 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800ffa0:	f001 fdee 	bl	8011b80 <RegionUS915RxConfig>
 800ffa4:	e7f8      	b.n	800ff98 <RegionRxConfig+0x12>

0800ffa6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ffa6:	b508      	push	{r3, lr}
 800ffa8:	4684      	mov	ip, r0
 800ffaa:	4608      	mov	r0, r1
 800ffac:	4611      	mov	r1, r2
 800ffae:	461a      	mov	r2, r3
    switch( region )
 800ffb0:	f1bc 0f05 	cmp.w	ip, #5
 800ffb4:	d004      	beq.n	800ffc0 <RegionTxConfig+0x1a>
 800ffb6:	f1bc 0f08 	cmp.w	ip, #8
 800ffba:	d004      	beq.n	800ffc6 <RegionTxConfig+0x20>
 800ffbc:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800ffbe:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800ffc0:	f000 ffcc 	bl	8010f5c <RegionEU868TxConfig>
 800ffc4:	e7fb      	b.n	800ffbe <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800ffc6:	f001 fe35 	bl	8011c34 <RegionUS915TxConfig>
 800ffca:	e7f8      	b.n	800ffbe <RegionTxConfig+0x18>

0800ffcc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800ffcc:	b500      	push	{lr}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	4684      	mov	ip, r0
 800ffd2:	4608      	mov	r0, r1
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	461a      	mov	r2, r3
    switch( region )
 800ffd8:	f1bc 0f05 	cmp.w	ip, #5
 800ffdc:	d006      	beq.n	800ffec <RegionLinkAdrReq+0x20>
 800ffde:	f1bc 0f08 	cmp.w	ip, #8
 800ffe2:	d009      	beq.n	800fff8 <RegionLinkAdrReq+0x2c>
 800ffe4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800ffe6:	b003      	add	sp, #12
 800ffe8:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800ffec:	9b05      	ldr	r3, [sp, #20]
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	9b04      	ldr	r3, [sp, #16]
 800fff2:	f001 f84b 	bl	801108c <RegionEU868LinkAdrReq>
 800fff6:	e7f6      	b.n	800ffe6 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800fff8:	9b05      	ldr	r3, [sp, #20]
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	9b04      	ldr	r3, [sp, #16]
 800fffe:	f001 fe93 	bl	8011d28 <RegionUS915LinkAdrReq>
 8010002:	e7f0      	b.n	800ffe6 <RegionLinkAdrReq+0x1a>

08010004 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010004:	b508      	push	{r3, lr}
 8010006:	4603      	mov	r3, r0
 8010008:	4608      	mov	r0, r1
    switch( region )
 801000a:	2b05      	cmp	r3, #5
 801000c:	d003      	beq.n	8010016 <RegionRxParamSetupReq+0x12>
 801000e:	2b08      	cmp	r3, #8
 8010010:	d004      	beq.n	801001c <RegionRxParamSetupReq+0x18>
 8010012:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010014:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 8010016:	f001 f8ff 	bl	8011218 <RegionEU868RxParamSetupReq>
 801001a:	e7fb      	b.n	8010014 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 801001c:	f001 ffd0 	bl	8011fc0 <RegionUS915RxParamSetupReq>
 8010020:	e7f8      	b.n	8010014 <RegionRxParamSetupReq+0x10>

08010022 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8010022:	b508      	push	{r3, lr}
 8010024:	4603      	mov	r3, r0
 8010026:	4608      	mov	r0, r1
    switch( region )
 8010028:	2b05      	cmp	r3, #5
 801002a:	d003      	beq.n	8010034 <RegionNewChannelReq+0x12>
 801002c:	2b08      	cmp	r3, #8
 801002e:	d004      	beq.n	801003a <RegionNewChannelReq+0x18>
 8010030:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010032:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 8010034:	f001 fa87 	bl	8011546 <RegionEU868NewChannelReq>
 8010038:	e7fb      	b.n	8010032 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 801003a:	f001 ffec 	bl	8012016 <RegionUS915NewChannelReq>
 801003e:	e7f8      	b.n	8010032 <RegionNewChannelReq+0x10>

08010040 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8010040:	b508      	push	{r3, lr}
 8010042:	4603      	mov	r3, r0
 8010044:	4608      	mov	r0, r1
    switch( region )
 8010046:	2b05      	cmp	r3, #5
 8010048:	d003      	beq.n	8010052 <RegionTxParamSetupReq+0x12>
 801004a:	2b08      	cmp	r3, #8
 801004c:	d004      	beq.n	8010058 <RegionTxParamSetupReq+0x18>
 801004e:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010050:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 8010052:	f001 f905 	bl	8011260 <RegionEU868TxParamSetupReq>
 8010056:	e7fb      	b.n	8010050 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8010058:	f001 ffe0 	bl	801201c <RegionUS915TxParamSetupReq>
 801005c:	e7f8      	b.n	8010050 <RegionTxParamSetupReq+0x10>

0801005e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801005e:	b508      	push	{r3, lr}
 8010060:	4603      	mov	r3, r0
 8010062:	4608      	mov	r0, r1
    switch( region )
 8010064:	2b05      	cmp	r3, #5
 8010066:	d003      	beq.n	8010070 <RegionDlChannelReq+0x12>
 8010068:	2b08      	cmp	r3, #8
 801006a:	d004      	beq.n	8010076 <RegionDlChannelReq+0x18>
 801006c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801006e:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 8010070:	f001 f8fa 	bl	8011268 <RegionEU868DlChannelReq>
 8010074:	e7fb      	b.n	801006e <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 8010076:	f001 ffd4 	bl	8012022 <RegionUS915DlChannelReq>
 801007a:	e7f8      	b.n	801006e <RegionDlChannelReq+0x10>

0801007c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801007c:	b508      	push	{r3, lr}
 801007e:	4603      	mov	r3, r0
 8010080:	4608      	mov	r0, r1
 8010082:	4611      	mov	r1, r2
    switch( region )
 8010084:	2b05      	cmp	r3, #5
 8010086:	d003      	beq.n	8010090 <RegionAlternateDr+0x14>
 8010088:	2b08      	cmp	r3, #8
 801008a:	d004      	beq.n	8010096 <RegionAlternateDr+0x1a>
 801008c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801008e:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 8010090:	f001 f916 	bl	80112c0 <RegionEU868AlternateDr>
 8010094:	e7fb      	b.n	801008e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 8010096:	f001 ffc7 	bl	8012028 <RegionUS915AlternateDr>
 801009a:	e7f8      	b.n	801008e <RegionAlternateDr+0x12>

0801009c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801009c:	b508      	push	{r3, lr}
 801009e:	4684      	mov	ip, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	461a      	mov	r2, r3
    switch( region )
 80100a6:	f1bc 0f05 	cmp.w	ip, #5
 80100aa:	d004      	beq.n	80100b6 <RegionNextChannel+0x1a>
 80100ac:	f1bc 0f08 	cmp.w	ip, #8
 80100b0:	d005      	beq.n	80100be <RegionNextChannel+0x22>
 80100b2:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 80100b4:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 80100b6:	9b02      	ldr	r3, [sp, #8]
 80100b8:	f001 f904 	bl	80112c4 <RegionEU868NextChannel>
 80100bc:	e7fa      	b.n	80100b4 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 80100be:	9b02      	ldr	r3, [sp, #8]
 80100c0:	f001 ffd4 	bl	801206c <RegionUS915NextChannel>
 80100c4:	e7f6      	b.n	80100b4 <RegionNextChannel+0x18>

080100c6 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80100c6:	b508      	push	{r3, lr}
 80100c8:	4684      	mov	ip, r0
 80100ca:	4608      	mov	r0, r1
 80100cc:	4611      	mov	r1, r2
 80100ce:	461a      	mov	r2, r3
    switch( region )
 80100d0:	f1bc 0f05 	cmp.w	ip, #5
 80100d4:	d004      	beq.n	80100e0 <RegionApplyDrOffset+0x1a>
 80100d6:	f1bc 0f08 	cmp.w	ip, #8
 80100da:	d004      	beq.n	80100e6 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80100dc:	b2c8      	uxtb	r0, r1
 80100de:	e001      	b.n	80100e4 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 80100e0:	f001 fa5c 	bl	801159c <RegionEU868ApplyDrOffset>
        }
    }
}
 80100e4:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 80100e6:	f002 f86f 	bl	80121c8 <RegionUS915ApplyDrOffset>
 80100ea:	e7fb      	b.n	80100e4 <RegionApplyDrOffset+0x1e>

080100ec <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 80100ec:	4800      	ldr	r0, [pc, #0]	; (80100f0 <RegionGetVersion+0x4>)
 80100ee:	4770      	bx	lr
 80100f0:	02010001 	.word	0x02010001

080100f4 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80100f4:	468c      	mov	ip, r1
 80100f6:	b1a9      	cbz	r1, 8010124 <FindAvailable125kHzChannels+0x30>
 80100f8:	b1b2      	cbz	r2, 8010128 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80100fe:	e001      	b.n	8010104 <FindAvailable125kHzChannels+0x10>
 8010100:	3301      	adds	r3, #1
 8010102:	b2db      	uxtb	r3, r3
 8010104:	2b07      	cmp	r3, #7
 8010106:	d80b      	bhi.n	8010120 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8010108:	fa40 f103 	asr.w	r1, r0, r3
 801010c:	f011 0f01 	tst.w	r1, #1
 8010110:	d0f6      	beq.n	8010100 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8010112:	7811      	ldrb	r1, [r2, #0]
 8010114:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8010118:	7811      	ldrb	r1, [r2, #0]
 801011a:	3101      	adds	r1, #1
 801011c:	7011      	strb	r1, [r2, #0]
 801011e:	e7ef      	b.n	8010100 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 8010120:	2000      	movs	r0, #0
 8010122:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010124:	2003      	movs	r0, #3
 8010126:	4770      	bx	lr
 8010128:	2003      	movs	r0, #3
}
 801012a:	4770      	bx	lr

0801012c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801012c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801012e:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8010130:	2300      	movs	r3, #0
 8010132:	9302      	str	r3, [sp, #8]
 8010134:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 8010136:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 801013a:	2800      	cmp	r0, #0
 801013c:	d03e      	beq.n	80101bc <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 801013e:	460d      	mov	r5, r1
 8010140:	4617      	mov	r7, r2
 8010142:	4606      	mov	r6, r0
 8010144:	2900      	cmp	r1, #0
 8010146:	d03b      	beq.n	80101c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 8010148:	2a00      	cmp	r2, #0
 801014a:	d03b      	beq.n	80101c4 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801014c:	780c      	ldrb	r4, [r1, #0]
 801014e:	e017      	b.n	8010180 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8010150:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8010154:	0a00      	lsrs	r0, r0, #8
 8010156:	e019      	b.n	801018c <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8010158:	3901      	subs	r1, #1
 801015a:	2000      	movs	r0, #0
 801015c:	f002 ff64 	bl	8013028 <randr>
 8010160:	f100 0310 	add.w	r3, r0, #16
 8010164:	eb0d 0003 	add.w	r0, sp, r3
 8010168:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 801016c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010170:	703b      	strb	r3, [r7, #0]
 8010172:	e016      	b.n	80101a2 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8010174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010178:	b9cb      	cbnz	r3, 80101ae <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 801017a:	782a      	ldrb	r2, [r5, #0]
 801017c:	42a2      	cmp	r2, r4
 801017e:	d016      	beq.n	80101ae <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8010180:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8010182:	f014 0f01 	tst.w	r4, #1
 8010186:	d1e3      	bne.n	8010150 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8010188:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801018c:	f10d 0207 	add.w	r2, sp, #7
 8010190:	a902      	add	r1, sp, #8
 8010192:	f7ff ffaf 	bl	80100f4 <FindAvailable125kHzChannels>
 8010196:	2803      	cmp	r0, #3
 8010198:	d00b      	beq.n	80101b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 801019a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801019e:	2900      	cmp	r1, #0
 80101a0:	d1da      	bne.n	8010158 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 80101a2:	3401      	adds	r4, #1
 80101a4:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 80101a6:	2c07      	cmp	r4, #7
 80101a8:	d9e4      	bls.n	8010174 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 80101aa:	2400      	movs	r4, #0
 80101ac:	e7e2      	b.n	8010174 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 80101ae:	b913      	cbnz	r3, 80101b6 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80101b0:	2003      	movs	r0, #3
}
 80101b2:	b005      	add	sp, #20
 80101b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 80101b6:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 80101b8:	2000      	movs	r0, #0
 80101ba:	e7fa      	b.n	80101b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80101bc:	2003      	movs	r0, #3
 80101be:	e7f8      	b.n	80101b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 80101c0:	2003      	movs	r0, #3
 80101c2:	e7f6      	b.n	80101b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 80101c4:	2003      	movs	r0, #3
 80101c6:	e7f4      	b.n	80101b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

080101c8 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 80101c8:	fb02 1000 	mla	r0, r2, r0, r1
 80101cc:	4770      	bx	lr

080101ce <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80101ce:	b082      	sub	sp, #8
 80101d0:	f10d 0c08 	add.w	ip, sp, #8
 80101d4:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 80101d8:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 80101da:	b971      	cbnz	r1, 80101fa <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80101dc:	4613      	mov	r3, r2
 80101de:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 80101e2:	d306      	bcc.n	80101f2 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80101e4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d80a      	bhi.n	8010202 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80101ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101f0:	e000      	b.n	80101f4 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80101f2:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80101f4:	4298      	cmp	r0, r3
 80101f6:	bf38      	it	cc
 80101f8:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80101fa:	b900      	cbnz	r0, 80101fe <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 80101fc:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 80101fe:	b002      	add	sp, #8
 8010200:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8010202:	f242 7310 	movw	r3, #10000	; 0x2710
 8010206:	e7f5      	b.n	80101f4 <GetDutyCycle+0x26>

08010208 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8010208:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 801020a:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 801020c:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 801020e:	e001      	b.n	8010214 <CountChannels+0xc>
 8010210:	3301      	adds	r3, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	428b      	cmp	r3, r1
 8010216:	d207      	bcs.n	8010228 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8010218:	2201      	movs	r2, #1
 801021a:	409a      	lsls	r2, r3
 801021c:	ea32 020c 	bics.w	r2, r2, ip
 8010220:	d1f6      	bne.n	8010210 <CountChannels+0x8>
        {
            nbActiveBits++;
 8010222:	3001      	adds	r0, #1
 8010224:	b2c0      	uxtb	r0, r0
 8010226:	e7f3      	b.n	8010210 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8010228:	4770      	bx	lr
	...

0801022c <SetMaxTimeCredits>:
{
 801022c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010230:	b089      	sub	sp, #36	; 0x24
 8010232:	4604      	mov	r4, r0
 8010234:	460e      	mov	r6, r1
 8010236:	ad02      	add	r5, sp, #8
 8010238:	e885 000c 	stmia.w	r5, {r2, r3}
 801023c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 8010240:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8010244:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010248:	f004 ff9a 	bl	8015180 <SysTimeToMs>
 801024c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 801024e:	2300      	movs	r3, #0
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010254:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010258:	4631      	mov	r1, r6
 801025a:	4620      	mov	r0, r4
 801025c:	f7ff ffb7 	bl	80101ce <GetDutyCycle>
 8010260:	4605      	mov	r5, r0
    if( joined == false )
 8010262:	2e00      	cmp	r6, #0
 8010264:	d14c      	bne.n	8010300 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010266:	2864      	cmp	r0, #100	; 0x64
 8010268:	d025      	beq.n	80102b6 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801026a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801026e:	d025      	beq.n	80102bc <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8010270:	4e27      	ldr	r6, [pc, #156]	; (8010310 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8010272:	68a1      	ldr	r1, [r4, #8]
 8010274:	a806      	add	r0, sp, #24
 8010276:	f004 ffa3 	bl	80151c0 <SysTimeFromMs>
 801027a:	9b07      	ldr	r3, [sp, #28]
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	9b06      	ldr	r3, [sp, #24]
 8010280:	aa02      	add	r2, sp, #8
 8010282:	ca06      	ldmia	r2, {r1, r2}
 8010284:	a804      	add	r0, sp, #16
 8010286:	f004 ff02 	bl	801508e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801028a:	f1b8 0f00 	cmp.w	r8, #0
 801028e:	d102      	bne.n	8010296 <SetMaxTimeCredits+0x6a>
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	d002      	beq.n	801029c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010296:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8010298:	42b3      	cmp	r3, r6
 801029a:	d012      	beq.n	80102c2 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 801029c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801029e:	9b02      	ldr	r3, [sp, #8]
 80102a0:	4a1c      	ldr	r2, [pc, #112]	; (8010314 <SetMaxTimeCredits+0xe8>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d812      	bhi.n	80102cc <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 80102a6:	6863      	ldr	r3, [r4, #4]
 80102a8:	b903      	cbnz	r3, 80102ac <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 80102aa:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 80102ac:	6126      	str	r6, [r4, #16]
}
 80102ae:	4628      	mov	r0, r5
 80102b0:	b009      	add	sp, #36	; 0x24
 80102b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 80102b6:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80102b8:	4e17      	ldr	r6, [pc, #92]	; (8010318 <SetMaxTimeCredits+0xec>)
 80102ba:	e7da      	b.n	8010272 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 80102bc:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80102be:	4e17      	ldr	r6, [pc, #92]	; (801031c <SetMaxTimeCredits+0xf0>)
 80102c0:	e7d7      	b.n	8010272 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 80102c2:	9a04      	ldr	r2, [sp, #16]
 80102c4:	4b16      	ldr	r3, [pc, #88]	; (8010320 <SetMaxTimeCredits+0xf4>)
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d9ed      	bls.n	80102a6 <SetMaxTimeCredits+0x7a>
 80102ca:	e7e7      	b.n	801029c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80102cc:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80102d0:	3b30      	subs	r3, #48	; 0x30
 80102d2:	4a14      	ldr	r2, [pc, #80]	; (8010324 <SetMaxTimeCredits+0xf8>)
 80102d4:	fba2 2303 	umull	r2, r3, r2, r3
 80102d8:	0c1b      	lsrs	r3, r3, #16
 80102da:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80102dc:	4a12      	ldr	r2, [pc, #72]	; (8010328 <SetMaxTimeCredits+0xfc>)
 80102de:	fb02 f303 	mul.w	r3, r2, r3
 80102e2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80102e4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80102e8:	3330      	adds	r3, #48	; 0x30
 80102ea:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80102f2:	ab04      	add	r3, sp, #16
 80102f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80102f8:	f004 ff42 	bl	8015180 <SysTimeToMs>
 80102fc:	60a0      	str	r0, [r4, #8]
 80102fe:	e7d2      	b.n	80102a6 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 8010300:	f1b8 0f00 	cmp.w	r8, #0
 8010304:	d102      	bne.n	801030c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 8010306:	4e04      	ldr	r6, [pc, #16]	; (8010318 <SetMaxTimeCredits+0xec>)
 8010308:	60e6      	str	r6, [r4, #12]
 801030a:	e7cc      	b.n	80102a6 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801030c:	4e02      	ldr	r6, [pc, #8]	; (8010318 <SetMaxTimeCredits+0xec>)
 801030e:	e7ca      	b.n	80102a6 <SetMaxTimeCredits+0x7a>
 8010310:	02932e00 	.word	0x02932e00
 8010314:	0001ec2f 	.word	0x0001ec2f
 8010318:	001b7740 	.word	0x001b7740
 801031c:	0112a880 	.word	0x0112a880
 8010320:	0001517f 	.word	0x0001517f
 8010324:	c22e4507 	.word	0xc22e4507
 8010328:	00015180 	.word	0x00015180

0801032c <UpdateTimeCredits>:
{
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	4604      	mov	r4, r0
 8010332:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8010334:	9301      	str	r3, [sp, #4]
 8010336:	9200      	str	r2, [sp, #0]
 8010338:	ab06      	add	r3, sp, #24
 801033a:	cb0c      	ldmia	r3, {r2, r3}
 801033c:	f7ff ff76 	bl	801022c <SetMaxTimeCredits>
 8010340:	4605      	mov	r5, r0
    if( joined == true )
 8010342:	b94e      	cbnz	r6, 8010358 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8010344:	68e2      	ldr	r2, [r4, #12]
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	429a      	cmp	r2, r3
 801034a:	d900      	bls.n	801034e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 801034c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 801034e:	9b08      	ldr	r3, [sp, #32]
 8010350:	6063      	str	r3, [r4, #4]
}
 8010352:	4628      	mov	r0, r5
 8010354:	b002      	add	sp, #8
 8010356:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8010358:	6860      	ldr	r0, [r4, #4]
 801035a:	f004 ff91 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
 801035e:	68e3      	ldr	r3, [r4, #12]
 8010360:	4403      	add	r3, r0
 8010362:	60e3      	str	r3, [r4, #12]
 8010364:	e7ee      	b.n	8010344 <UpdateTimeCredits+0x18>

08010366 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8010366:	4288      	cmp	r0, r1
 8010368:	db03      	blt.n	8010372 <RegionCommonValueInRange+0xc>
 801036a:	4290      	cmp	r0, r2
 801036c:	dd03      	ble.n	8010376 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 801036e:	2000      	movs	r0, #0
 8010370:	4770      	bx	lr
 8010372:	2000      	movs	r0, #0
 8010374:	4770      	bx	lr
        return 1;
 8010376:	2001      	movs	r0, #1
}
 8010378:	4770      	bx	lr

0801037a <RegionCommonChanVerifyDr>:
{
 801037a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801037e:	4682      	mov	sl, r0
 8010380:	460e      	mov	r6, r1
 8010382:	4690      	mov	r8, r2
 8010384:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8010388:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 801038c:	4619      	mov	r1, r3
 801038e:	4640      	mov	r0, r8
 8010390:	f7ff ffe9 	bl	8010366 <RegionCommonValueInRange>
 8010394:	b338      	cbz	r0, 80103e6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010396:	2500      	movs	r5, #0
 8010398:	462f      	mov	r7, r5
 801039a:	e01e      	b.n	80103da <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 801039c:	3401      	adds	r4, #1
 801039e:	b2e4      	uxtb	r4, r4
 80103a0:	2c0f      	cmp	r4, #15
 80103a2:	d816      	bhi.n	80103d2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80103a4:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 80103a8:	4123      	asrs	r3, r4
 80103aa:	f013 0f01 	tst.w	r3, #1
 80103ae:	d0f5      	beq.n	801039c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80103b0:	193b      	adds	r3, r7, r4
 80103b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80103b6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80103ba:	7a19      	ldrb	r1, [r3, #8]
 80103bc:	090a      	lsrs	r2, r1, #4
 80103be:	f001 010f 	and.w	r1, r1, #15
 80103c2:	4640      	mov	r0, r8
 80103c4:	f7ff ffcf 	bl	8010366 <RegionCommonValueInRange>
 80103c8:	2801      	cmp	r0, #1
 80103ca:	d1e7      	bne.n	801039c <RegionCommonChanVerifyDr+0x22>
                    return true;
 80103cc:	2001      	movs	r0, #1
}
 80103ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80103d2:	3710      	adds	r7, #16
 80103d4:	b2ff      	uxtb	r7, r7
 80103d6:	3501      	adds	r5, #1
 80103d8:	b2ed      	uxtb	r5, r5
 80103da:	4557      	cmp	r7, sl
 80103dc:	d201      	bcs.n	80103e2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 80103de:	2400      	movs	r4, #0
 80103e0:	e7de      	b.n	80103a0 <RegionCommonChanVerifyDr+0x26>
    return false;
 80103e2:	2000      	movs	r0, #0
 80103e4:	e7f3      	b.n	80103ce <RegionCommonChanVerifyDr+0x54>
        return false;
 80103e6:	2000      	movs	r0, #0
 80103e8:	e7f1      	b.n	80103ce <RegionCommonChanVerifyDr+0x54>

080103ea <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80103ea:	0913      	lsrs	r3, r2, #4
 80103ec:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 80103f0:	d313      	bcc.n	801041a <RegionCommonChanDisable+0x30>
{
 80103f2:	b500      	push	{lr}
 80103f4:	4684      	mov	ip, r0
 80103f6:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80103fa:	4291      	cmp	r1, r2
 80103fc:	d20f      	bcs.n	801041e <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80103fe:	f001 030f 	and.w	r3, r1, #15
 8010402:	2001      	movs	r0, #1
 8010404:	fa00 f303 	lsl.w	r3, r0, r3
 8010408:	43db      	mvns	r3, r3
 801040a:	b21b      	sxth	r3, r3
 801040c:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 8010410:	4013      	ands	r3, r2
 8010412:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 8010416:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 801041a:	2000      	movs	r0, #0
}
 801041c:	4770      	bx	lr
        return false;
 801041e:	2000      	movs	r0, #0
 8010420:	e7f9      	b.n	8010416 <RegionCommonChanDisable+0x2c>

08010422 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8010422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8010424:	b188      	cbz	r0, 801044a <RegionCommonCountChannels+0x28>
 8010426:	460c      	mov	r4, r1
 8010428:	4616      	mov	r6, r2
 801042a:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 801042c:	2500      	movs	r5, #0
 801042e:	e008      	b.n	8010442 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8010430:	2110      	movs	r1, #16
 8010432:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8010436:	f7ff fee7 	bl	8010208 <CountChannels>
 801043a:	4405      	add	r5, r0
 801043c:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801043e:	3401      	adds	r4, #1
 8010440:	b2e4      	uxtb	r4, r4
 8010442:	42b4      	cmp	r4, r6
 8010444:	d3f4      	bcc.n	8010430 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8010446:	4628      	mov	r0, r5
 8010448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801044a:	2500      	movs	r5, #0
 801044c:	e7fb      	b.n	8010446 <RegionCommonCountChannels+0x24>

0801044e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801044e:	4684      	mov	ip, r0
 8010450:	b158      	cbz	r0, 801046a <RegionCommonChanMaskCopy+0x1c>
 8010452:	b109      	cbz	r1, 8010458 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8010454:	2300      	movs	r3, #0
 8010456:	e006      	b.n	8010466 <RegionCommonChanMaskCopy+0x18>
 8010458:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801045a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801045e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8010462:	3301      	adds	r3, #1
 8010464:	b2db      	uxtb	r3, r3
 8010466:	4293      	cmp	r3, r2
 8010468:	d3f7      	bcc.n	801045a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 801046a:	4770      	bx	lr

0801046c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801046c:	b082      	sub	sp, #8
 801046e:	b538      	push	{r3, r4, r5, lr}
 8010470:	4604      	mov	r4, r0
 8010472:	460d      	mov	r5, r1
 8010474:	4611      	mov	r1, r2
 8010476:	aa04      	add	r2, sp, #16
 8010478:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801047c:	ca0c      	ldmia	r2, {r2, r3}
 801047e:	f7ff fea6 	bl	80101ce <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8010482:	68e3      	ldr	r3, [r4, #12]
 8010484:	fb05 f100 	mul.w	r1, r5, r0
 8010488:	428b      	cmp	r3, r1
 801048a:	d905      	bls.n	8010498 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801048c:	1a5b      	subs	r3, r3, r1
 801048e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8010490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010494:	b002      	add	sp, #8
 8010496:	4770      	bx	lr
        band->TimeCredits = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	60e3      	str	r3, [r4, #12]
}
 801049c:	e7f8      	b.n	8010490 <RegionCommonSetBandTxDone+0x24>
	...

080104a0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	b089      	sub	sp, #36	; 0x24
 80104a6:	4607      	mov	r7, r0
 80104a8:	468b      	mov	fp, r1
 80104aa:	4691      	mov	r9, r2
 80104ac:	4698      	mov	r8, r3
 80104ae:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80104b2:	f004 fedb 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 80104b6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 80104b8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 80104ba:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80104bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104c0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 80104c2:	e005      	b.n	80104d0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 80104c4:	2301      	movs	r3, #1
 80104c6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80104c8:	441e      	add	r6, r3
 80104ca:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 80104cc:	3401      	adds	r4, #1
 80104ce:	b2e4      	uxtb	r4, r4
 80104d0:	454c      	cmp	r4, r9
 80104d2:	d25d      	bcs.n	8010590 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80104d4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80104d8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80104dc:	9b04      	ldr	r3, [sp, #16]
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	ab13      	add	r3, sp, #76	; 0x4c
 80104e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80104ea:	4653      	mov	r3, sl
 80104ec:	4642      	mov	r2, r8
 80104ee:	4639      	mov	r1, r7
 80104f0:	4628      	mov	r0, r5
 80104f2:	f7ff ff1b 	bl	801032c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 80104f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104f8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80104fc:	68ea      	ldr	r2, [r5, #12]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d2e0      	bcs.n	80104c4 <RegionCommonUpdateBandTimeOff+0x24>
 8010502:	f1b8 0f00 	cmp.w	r8, #0
 8010506:	d101      	bne.n	801050c <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8010508:	2f00      	cmp	r7, #0
 801050a:	d1db      	bne.n	80104c4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801050c:	2100      	movs	r1, #0
 801050e:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8010510:	6929      	ldr	r1, [r5, #16]
 8010512:	4299      	cmp	r1, r3
 8010514:	d307      	bcc.n	8010526 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8010516:	1a9b      	subs	r3, r3, r2
 8010518:	9a05      	ldr	r2, [sp, #20]
 801051a:	429a      	cmp	r2, r3
 801051c:	bf28      	it	cs
 801051e:	461a      	movcs	r2, r3
 8010520:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8010522:	3601      	adds	r6, #1
 8010524:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8010526:	2f00      	cmp	r7, #0
 8010528:	d1d0      	bne.n	80104cc <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 801052a:	2300      	movs	r3, #0
 801052c:	9306      	str	r3, [sp, #24]
 801052e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010532:	2864      	cmp	r0, #100	; 0x64
 8010534:	d024      	beq.n	8010580 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8010536:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801053a:	d025      	beq.n	8010588 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801053c:	4b19      	ldr	r3, [pc, #100]	; (80105a4 <RegionCommonUpdateBandTimeOff+0x104>)
 801053e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8010540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010542:	4a18      	ldr	r2, [pc, #96]	; (80105a4 <RegionCommonUpdateBandTimeOff+0x104>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d90c      	bls.n	8010562 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8010548:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801054c:	3b30      	subs	r3, #48	; 0x30
 801054e:	4a16      	ldr	r2, [pc, #88]	; (80105a8 <RegionCommonUpdateBandTimeOff+0x108>)
 8010550:	fba2 2303 	umull	r2, r3, r2, r3
 8010554:	0c1b      	lsrs	r3, r3, #16
 8010556:	4a15      	ldr	r2, [pc, #84]	; (80105ac <RegionCommonUpdateBandTimeOff+0x10c>)
 8010558:	fb03 2202 	mla	r2, r3, r2, r2
 801055c:	9b06      	ldr	r3, [sp, #24]
 801055e:	4413      	add	r3, r2
 8010560:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8010562:	ad06      	add	r5, sp, #24
 8010564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801056a:	e895 0006 	ldmia.w	r5, {r1, r2}
 801056e:	4628      	mov	r0, r5
 8010570:	f004 fd8d 	bl	801508e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8010574:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010578:	f004 fe02 	bl	8015180 <SysTimeToMs>
 801057c:	9005      	str	r0, [sp, #20]
 801057e:	e7a5      	b.n	80104cc <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8010580:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8010584:	9306      	str	r3, [sp, #24]
 8010586:	e7db      	b.n	8010540 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8010588:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801058c:	9306      	str	r3, [sp, #24]
 801058e:	e7d7      	b.n	8010540 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8010590:	b11e      	cbz	r6, 801059a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8010592:	9805      	ldr	r0, [sp, #20]
 8010594:	b009      	add	sp, #36	; 0x24
 8010596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 801059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801059e:	9305      	str	r3, [sp, #20]
 80105a0:	e7f7      	b.n	8010592 <RegionCommonUpdateBandTimeOff+0xf2>
 80105a2:	bf00      	nop
 80105a4:	0001ec30 	.word	0x0001ec30
 80105a8:	c22e4507 	.word	0xc22e4507
 80105ac:	00015180 	.word	0x00015180

080105b0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80105b0:	7803      	ldrb	r3, [r0, #0]
 80105b2:	2b03      	cmp	r3, #3
 80105b4:	d001      	beq.n	80105ba <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 80105b6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 80105b8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 80105ba:	7842      	ldrb	r2, [r0, #1]
 80105bc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80105c0:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80105c2:	f003 030f 	and.w	r3, r3, #15
 80105c6:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80105c8:	0913      	lsrs	r3, r2, #4
 80105ca:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80105cc:	7883      	ldrb	r3, [r0, #2]
 80105ce:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80105d0:	78c2      	ldrb	r2, [r0, #3]
 80105d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80105d6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 80105d8:	7903      	ldrb	r3, [r0, #4]
 80105da:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80105dc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80105e0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 80105e2:	f003 030f 	and.w	r3, r3, #15
 80105e6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 80105e8:	2005      	movs	r0, #5
 80105ea:	4770      	bx	lr

080105ec <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80105ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f0:	b085      	sub	sp, #20
 80105f2:	4604      	mov	r4, r0
 80105f4:	4688      	mov	r8, r1
 80105f6:	4617      	mov	r7, r2
 80105f8:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 80105fa:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 80105fc:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8010600:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8010604:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010608:	7943      	ldrb	r3, [r0, #5]
 801060a:	b92b      	cbnz	r3, 8010618 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801060c:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8010610:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8010614:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8010618:	b355      	cbz	r5, 8010670 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801061a:	f1ba 0f0f 	cmp.w	sl, #15
 801061e:	d114      	bne.n	801064a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8010620:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8010624:	f1b9 0f0f 	cmp.w	r9, #15
 8010628:	d020      	beq.n	801066c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801062a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 801062e:	9303      	str	r3, [sp, #12]
 8010630:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8010634:	461c      	mov	r4, r3
 8010636:	4619      	mov	r1, r3
 8010638:	4648      	mov	r0, r9
 801063a:	f7ff fe94 	bl	8010366 <RegionCommonValueInRange>
 801063e:	b9b8      	cbnz	r0, 8010670 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8010640:	454c      	cmp	r4, r9
 8010642:	dc21      	bgt.n	8010688 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8010644:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8010648:	e012      	b.n	8010670 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801064a:	69a3      	ldr	r3, [r4, #24]
 801064c:	9301      	str	r3, [sp, #4]
 801064e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8010658:	4652      	mov	r2, sl
 801065a:	6921      	ldr	r1, [r4, #16]
 801065c:	7b20      	ldrb	r0, [r4, #12]
 801065e:	f7ff fe8c 	bl	801037a <RegionCommonChanVerifyDr>
 8010662:	2800      	cmp	r0, #0
 8010664:	d1de      	bne.n	8010624 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8010666:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 801066a:	e7db      	b.n	8010624 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 801066c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8010670:	2d07      	cmp	r5, #7
 8010672:	d00c      	beq.n	801068e <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8010674:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8010678:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 801067c:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8010680:	4628      	mov	r0, r5
 8010682:	b005      	add	sp, #20
 8010684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8010688:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801068c:	e7f0      	b.n	8010670 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 801068e:	f1bb 0f00 	cmp.w	fp, #0
 8010692:	d1ef      	bne.n	8010674 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8010694:	f04f 0b01 	mov.w	fp, #1
 8010698:	e7ec      	b.n	8010674 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0801069c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801069c:	4b02      	ldr	r3, [pc, #8]	; (80106a8 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 801069e:	fa03 f000 	lsl.w	r0, r3, r0
}
 80106a2:	fbb0 f0f1 	udiv	r0, r0, r1
 80106a6:	4770      	bx	lr
 80106a8:	000f4240 	.word	0x000f4240

080106ac <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 80106ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80106b0:	fbb3 f0f0 	udiv	r0, r3, r0
 80106b4:	4770      	bx	lr
	...

080106b8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80106b8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80106ba:	f1a1 0c04 	sub.w	ip, r1, #4
 80106be:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 80106c2:	fb0e f202 	mul.w	r2, lr, r2
 80106c6:	fb00 220c 	mla	r2, r0, ip, r2
 80106ca:	0052      	lsls	r2, r2, #1
 80106cc:	d021      	beq.n	8010712 <RegionCommonComputeRxWindowParameters+0x5a>
 80106ce:	4402      	add	r2, r0
 80106d0:	3a01      	subs	r2, #1
 80106d2:	fbb2 f2f0 	udiv	r2, r2, r0
 80106d6:	4291      	cmp	r1, r2
 80106d8:	bf38      	it	cc
 80106da:	4611      	movcc	r1, r2
 80106dc:	9a01      	ldr	r2, [sp, #4]
 80106de:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80106e0:	0082      	lsls	r2, r0, #2
 80106e2:	fb01 f000 	mul.w	r0, r1, r0
 80106e6:	b1b8      	cbz	r0, 8010718 <RegionCommonComputeRxWindowParameters+0x60>
 80106e8:	3001      	adds	r0, #1
 80106ea:	0840      	lsrs	r0, r0, #1
 80106ec:	1a12      	subs	r2, r2, r0
 80106ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80106f2:	fb01 2313 	mls	r3, r1, r3, r2
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	dd10      	ble.n	801071c <RegionCommonComputeRxWindowParameters+0x64>
 80106fa:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80106fe:	4a0b      	ldr	r2, [pc, #44]	; (801072c <RegionCommonComputeRxWindowParameters+0x74>)
 8010700:	fb82 1203 	smull	r1, r2, r2, r3
 8010704:	17db      	asrs	r3, r3, #31
 8010706:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801070a:	9a02      	ldr	r2, [sp, #8]
 801070c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801070e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010712:	fbb2 f2f0 	udiv	r2, r2, r0
 8010716:	e7de      	b.n	80106d6 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010718:	0840      	lsrs	r0, r0, #1
 801071a:	e7e7      	b.n	80106ec <RegionCommonComputeRxWindowParameters+0x34>
 801071c:	4a03      	ldr	r2, [pc, #12]	; (801072c <RegionCommonComputeRxWindowParameters+0x74>)
 801071e:	fb82 1203 	smull	r1, r2, r2, r3
 8010722:	17db      	asrs	r3, r3, #31
 8010724:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010728:	e7ef      	b.n	801070a <RegionCommonComputeRxWindowParameters+0x52>
 801072a:	bf00      	nop
 801072c:	10624dd3 	.word	0x10624dd3

08010730 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8010730:	b538      	push	{r3, r4, r5, lr}
 8010732:	460d      	mov	r5, r1
 8010734:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8010736:	0040      	lsls	r0, r0, #1
 8010738:	f7f0 f84c 	bl	80007d4 <__aeabi_ui2f>
 801073c:	4601      	mov	r1, r0
 801073e:	4628      	mov	r0, r5
 8010740:	f7ef ff96 	bl	8000670 <__aeabi_fsub>
 8010744:	4621      	mov	r1, r4
 8010746:	f7ef ff93 	bl	8000670 <__aeabi_fsub>
 801074a:	f7ef fe85 	bl	8000458 <__aeabi_f2d>
 801074e:	f005 f86b 	bl	8015828 <floor>
 8010752:	f7ef ff61 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 8010756:	b240      	sxtb	r0, r0
 8010758:	bd38      	pop	{r3, r4, r5, pc}

0801075a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801075a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801075e:	b083      	sub	sp, #12
 8010760:	4605      	mov	r5, r0
 8010762:	468b      	mov	fp, r1
 8010764:	9200      	str	r2, [sp, #0]
 8010766:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010768:	2600      	movs	r6, #0
 801076a:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 801076c:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 801076e:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010770:	e049      	b.n	8010806 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8010772:	7a3a      	ldrb	r2, [r7, #8]
 8010774:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8010778:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801077c:	b252      	sxtb	r2, r2
 801077e:	b249      	sxtb	r1, r1
 8010780:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8010784:	f7ff fdef 	bl	8010366 <RegionCommonValueInRange>
 8010788:	b178      	cbz	r0, 80107aa <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801078a:	68ea      	ldr	r2, [r5, #12]
 801078c:	7a7b      	ldrb	r3, [r7, #9]
 801078e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010792:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010796:	7d13      	ldrb	r3, [r2, #20]
 8010798:	b353      	cbz	r3, 80107f0 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 801079a:	f109 0301 	add.w	r3, r9, #1
 801079e:	eb08 0204 	add.w	r2, r8, r4
 80107a2:	f80b 2009 	strb.w	r2, [fp, r9]
 80107a6:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 80107aa:	3401      	adds	r4, #1
 80107ac:	b2e4      	uxtb	r4, r4
 80107ae:	2c0f      	cmp	r4, #15
 80107b0:	d823      	bhi.n	80107fa <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80107b2:	686b      	ldr	r3, [r5, #4]
 80107b4:	0072      	lsls	r2, r6, #1
 80107b6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80107ba:	4123      	asrs	r3, r4
 80107bc:	f013 0f01 	tst.w	r3, #1
 80107c0:	d0f3      	beq.n	80107aa <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80107c2:	68a8      	ldr	r0, [r5, #8]
 80107c4:	eb08 0304 	add.w	r3, r8, r4
 80107c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80107cc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80107d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d0e8      	beq.n	80107aa <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80107d8:	782b      	ldrb	r3, [r5, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1c9      	bne.n	8010772 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80107de:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d0c6      	beq.n	8010772 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80107e4:	5a9b      	ldrh	r3, [r3, r2]
 80107e6:	4123      	asrs	r3, r4
 80107e8:	f013 0f01 	tst.w	r3, #1
 80107ec:	d1c1      	bne.n	8010772 <RegionCommonCountNbOfEnabledChannels+0x18>
 80107ee:	e7dc      	b.n	80107aa <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 80107f0:	f10a 0a01 	add.w	sl, sl, #1
 80107f4:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 80107f8:	e7d7      	b.n	80107aa <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80107fa:	f108 0810 	add.w	r8, r8, #16
 80107fe:	fa5f f888 	uxtb.w	r8, r8
 8010802:	3601      	adds	r6, #1
 8010804:	b2f6      	uxtb	r6, r6
 8010806:	8a2b      	ldrh	r3, [r5, #16]
 8010808:	fa1f f288 	uxth.w	r2, r8
 801080c:	429a      	cmp	r2, r3
 801080e:	d201      	bcs.n	8010814 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 8010810:	2400      	movs	r4, #0
 8010812:	e7cc      	b.n	80107ae <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8010814:	9b00      	ldr	r3, [sp, #0]
 8010816:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801081a:	9b01      	ldr	r3, [sp, #4]
 801081c:	f883 a000 	strb.w	sl, [r3]
}
 8010820:	b003      	add	sp, #12
 8010822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010826 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8010826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801082a:	b085      	sub	sp, #20
 801082c:	4604      	mov	r4, r0
 801082e:	460f      	mov	r7, r1
 8010830:	4616      	mov	r6, r2
 8010832:	461d      	mov	r5, r3
 8010834:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010838:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801083c:	6840      	ldr	r0, [r0, #4]
 801083e:	f004 fd1f 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	1a1b      	subs	r3, r3, r0
 8010846:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 801084a:	2301      	movs	r3, #1
 801084c:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8010850:	2300      	movs	r3, #0
 8010852:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8010854:	6863      	ldr	r3, [r4, #4]
 8010856:	b113      	cbz	r3, 801085e <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8010858:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801085a:	4283      	cmp	r3, r0
 801085c:	d81e      	bhi.n	801089c <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8010862:	69e3      	ldr	r3, [r4, #28]
 8010864:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010868:	781f      	ldrb	r7, [r3, #0]
 801086a:	69a3      	ldr	r3, [r4, #24]
 801086c:	9303      	str	r3, [sp, #12]
 801086e:	ab01      	add	r3, sp, #4
 8010870:	f104 020c 	add.w	r2, r4, #12
 8010874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010878:	e883 0003 	stmia.w	r3, {r0, r1}
 801087c:	7d23      	ldrb	r3, [r4, #20]
 801087e:	9300      	str	r3, [sp, #0]
 8010880:	7a23      	ldrb	r3, [r4, #8]
 8010882:	7a62      	ldrb	r2, [r4, #9]
 8010884:	4661      	mov	r1, ip
 8010886:	4638      	mov	r0, r7
 8010888:	f7ff fe0a 	bl	80104a0 <RegionCommonUpdateBandTimeOff>
 801088c:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8010890:	4643      	mov	r3, r8
 8010892:	462a      	mov	r2, r5
 8010894:	4631      	mov	r1, r6
 8010896:	69e0      	ldr	r0, [r4, #28]
 8010898:	f7ff ff5f 	bl	801075a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801089c:	782b      	ldrb	r3, [r5, #0]
 801089e:	b923      	cbnz	r3, 80108aa <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 80108a0:	f898 3000 	ldrb.w	r3, [r8]
 80108a4:	b13b      	cbz	r3, 80108b6 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80108a6:	200b      	movs	r0, #11
 80108a8:	e002      	b.n	80108b0 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 80108aa:	2000      	movs	r0, #0
 80108ac:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 80108b0:	b005      	add	sp, #20
 80108b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80108b6:	200c      	movs	r0, #12
 80108b8:	e7fa      	b.n	80108b0 <RegionCommonIdentifyChannels+0x8a>

080108ba <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80108ba:	b570      	push	{r4, r5, r6, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 80108c0:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 80108c4:	f990 6002 	ldrsb.w	r6, [r0, #2]
 80108c8:	42a6      	cmp	r6, r4
 80108ca:	d011      	beq.n	80108f0 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80108cc:	3c01      	subs	r4, #1
 80108ce:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 80108d0:	42a6      	cmp	r6, r4
 80108d2:	d00e      	beq.n	80108f2 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80108d4:	68ab      	ldr	r3, [r5, #8]
 80108d6:	9301      	str	r3, [sp, #4]
 80108d8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	4633      	mov	r3, r6
 80108e0:	4622      	mov	r2, r4
 80108e2:	6869      	ldr	r1, [r5, #4]
 80108e4:	78e8      	ldrb	r0, [r5, #3]
 80108e6:	f7ff fd48 	bl	801037a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d0ee      	beq.n	80108cc <RegionCommonGetNextLowerTxDr+0x12>
 80108ee:	e000      	b.n	80108f2 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 80108f0:	4634      	mov	r4, r6

        return drLocal;
    }
}
 80108f2:	4620      	mov	r0, r4
 80108f4:	b002      	add	sp, #8
 80108f6:	bd70      	pop	{r4, r5, r6, pc}

080108f8 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 80108f8:	4288      	cmp	r0, r1
 80108fa:	bfb8      	it	lt
 80108fc:	4608      	movlt	r0, r1
 80108fe:	4770      	bx	lr

08010900 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8010900:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8010904:	4a05      	ldr	r2, [pc, #20]	; (801091c <RegionCommonGetBandwidth+0x1c>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d004      	beq.n	8010914 <RegionCommonGetBandwidth+0x14>
 801090a:	4a05      	ldr	r2, [pc, #20]	; (8010920 <RegionCommonGetBandwidth+0x20>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d103      	bne.n	8010918 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8010910:	2002      	movs	r0, #2
 8010912:	4770      	bx	lr
            return 1;
 8010914:	2001      	movs	r0, #1
 8010916:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8010918:	2000      	movs	r0, #0
    }
}
 801091a:	4770      	bx	lr
 801091c:	0003d090 	.word	0x0003d090
 8010920:	0007a120 	.word	0x0007a120

08010924 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8010924:	b500      	push	{lr}
 8010926:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8010928:	2805      	cmp	r0, #5
 801092a:	d80e      	bhi.n	801094a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801092c:	9202      	str	r2, [sp, #8]
 801092e:	9101      	str	r1, [sp, #4]
 8010930:	4b0a      	ldr	r3, [pc, #40]	; (801095c <RegionCommonRxConfigPrint+0x38>)
 8010932:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	4b09      	ldr	r3, [pc, #36]	; (8010960 <RegionCommonRxConfigPrint+0x3c>)
 801093a:	2201      	movs	r2, #1
 801093c:	2100      	movs	r1, #0
 801093e:	2002      	movs	r0, #2
 8010940:	f004 fa5c 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8010944:	b005      	add	sp, #20
 8010946:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801094a:	9201      	str	r2, [sp, #4]
 801094c:	9100      	str	r1, [sp, #0]
 801094e:	4b05      	ldr	r3, [pc, #20]	; (8010964 <RegionCommonRxConfigPrint+0x40>)
 8010950:	2201      	movs	r2, #1
 8010952:	2100      	movs	r1, #0
 8010954:	2002      	movs	r0, #2
 8010956:	f004 fa51 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 801095a:	e7f3      	b.n	8010944 <RegionCommonRxConfigPrint+0x20>
 801095c:	08016300 	.word	0x08016300
 8010960:	08016298 	.word	0x08016298
 8010964:	080162b8 	.word	0x080162b8

08010968 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8010968:	b500      	push	{lr}
 801096a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801096c:	9101      	str	r1, [sp, #4]
 801096e:	9000      	str	r0, [sp, #0]
 8010970:	4b04      	ldr	r3, [pc, #16]	; (8010984 <RegionCommonTxConfigPrint+0x1c>)
 8010972:	2201      	movs	r2, #1
 8010974:	2100      	movs	r1, #0
 8010976:	2002      	movs	r0, #2
 8010978:	f004 fa40 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 801097c:	b003      	add	sp, #12
 801097e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010982:	bf00      	nop
 8010984:	080162d4 	.word	0x080162d4

08010988 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8010988:	b538      	push	{r3, r4, r5, lr}
 801098a:	4604      	mov	r4, r0
 801098c:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801098e:	4b1b      	ldr	r3, [pc, #108]	; (80109fc <VerifyRfFreq+0x74>)
 8010990:	6a1b      	ldr	r3, [r3, #32]
 8010992:	4798      	blx	r3
 8010994:	b130      	cbz	r0, 80109a4 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8010996:	4b1a      	ldr	r3, [pc, #104]	; (8010a00 <VerifyRfFreq+0x78>)
 8010998:	4423      	add	r3, r4
 801099a:	4a1a      	ldr	r2, [pc, #104]	; (8010a04 <VerifyRfFreq+0x7c>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d802      	bhi.n	80109a6 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 80109a0:	2302      	movs	r3, #2
 80109a2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 80109a4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80109a6:	4b18      	ldr	r3, [pc, #96]	; (8010a08 <VerifyRfFreq+0x80>)
 80109a8:	4423      	add	r3, r4
 80109aa:	4a18      	ldr	r2, [pc, #96]	; (8010a0c <VerifyRfFreq+0x84>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d802      	bhi.n	80109b6 <VerifyRfFreq+0x2e>
        *band = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	702b      	strb	r3, [r5, #0]
 80109b4:	e7f6      	b.n	80109a4 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80109b6:	4b16      	ldr	r3, [pc, #88]	; (8010a10 <VerifyRfFreq+0x88>)
 80109b8:	4423      	add	r3, r4
 80109ba:	4a16      	ldr	r2, [pc, #88]	; (8010a14 <VerifyRfFreq+0x8c>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d802      	bhi.n	80109c6 <VerifyRfFreq+0x3e>
        *band = 1;
 80109c0:	2301      	movs	r3, #1
 80109c2:	702b      	strb	r3, [r5, #0]
 80109c4:	e7ee      	b.n	80109a4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80109c6:	4b14      	ldr	r3, [pc, #80]	; (8010a18 <VerifyRfFreq+0x90>)
 80109c8:	4423      	add	r3, r4
 80109ca:	4a14      	ldr	r2, [pc, #80]	; (8010a1c <VerifyRfFreq+0x94>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d802      	bhi.n	80109d6 <VerifyRfFreq+0x4e>
        *band = 5;
 80109d0:	2305      	movs	r3, #5
 80109d2:	702b      	strb	r3, [r5, #0]
 80109d4:	e7e6      	b.n	80109a4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80109d6:	4b12      	ldr	r3, [pc, #72]	; (8010a20 <VerifyRfFreq+0x98>)
 80109d8:	4423      	add	r3, r4
 80109da:	4a12      	ldr	r2, [pc, #72]	; (8010a24 <VerifyRfFreq+0x9c>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d802      	bhi.n	80109e6 <VerifyRfFreq+0x5e>
        *band = 3;
 80109e0:	2303      	movs	r3, #3
 80109e2:	702b      	strb	r3, [r5, #0]
 80109e4:	e7de      	b.n	80109a4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80109e6:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <VerifyRfFreq+0xa0>)
 80109e8:	4423      	add	r3, r4
 80109ea:	4a10      	ldr	r2, [pc, #64]	; (8010a2c <VerifyRfFreq+0xa4>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d802      	bhi.n	80109f6 <VerifyRfFreq+0x6e>
        *band = 4;
 80109f0:	2304      	movs	r3, #4
 80109f2:	702b      	strb	r3, [r5, #0]
 80109f4:	e7d6      	b.n	80109a4 <VerifyRfFreq+0x1c>
        return false;
 80109f6:	2000      	movs	r0, #0
 80109f8:	e7d4      	b.n	80109a4 <VerifyRfFreq+0x1c>
 80109fa:	bf00      	nop
 80109fc:	08016960 	.word	0x08016960
 8010a00:	cc8faa40 	.word	0xcc8faa40
 8010a04:	001e847f 	.word	0x001e847f
 8010a08:	cc7125c0 	.word	0xcc7125c0
 8010a0c:	002dc6c0 	.word	0x002dc6c0
 8010a10:	cc435eff 	.word	0xcc435eff
 8010a14:	000927bf 	.word	0x000927bf
 8010a18:	cc38b0a0 	.word	0xcc38b0a0
 8010a1c:	0007a120 	.word	0x0007a120
 8010a20:	cc2e0240 	.word	0xcc2e0240
 8010a24:	0003d090 	.word	0x0003d090
 8010a28:	cc296e60 	.word	0xcc296e60
 8010a2c:	000493e0 	.word	0x000493e0

08010a30 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	4605      	mov	r5, r0
 8010a36:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 8010a38:	4b13      	ldr	r3, [pc, #76]	; (8010a88 <GetTimeOnAir+0x58>)
 8010a3a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8010a3c:	4913      	ldr	r1, [pc, #76]	; (8010a8c <GetTimeOnAir+0x5c>)
 8010a3e:	f7ff ff5f 	bl	8010900 <RegionCommonGetBandwidth>
 8010a42:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8010a44:	2d07      	cmp	r5, #7
 8010a46:	d00e      	beq.n	8010a66 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010a48:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <GetTimeOnAir+0x60>)
 8010a4a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010a4c:	2001      	movs	r0, #1
 8010a4e:	9003      	str	r0, [sp, #12]
 8010a50:	b2e4      	uxtb	r4, r4
 8010a52:	9402      	str	r4, [sp, #8]
 8010a54:	2300      	movs	r3, #0
 8010a56:	9301      	str	r3, [sp, #4]
 8010a58:	2308      	movs	r3, #8
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	4632      	mov	r2, r6
 8010a60:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8010a62:	b004      	add	sp, #16
 8010a64:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8010a66:	4b0a      	ldr	r3, [pc, #40]	; (8010a90 <GetTimeOnAir+0x60>)
 8010a68:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	9303      	str	r3, [sp, #12]
 8010a6e:	b2e4      	uxtb	r4, r4
 8010a70:	9402      	str	r4, [sp, #8]
 8010a72:	2000      	movs	r0, #0
 8010a74:	9001      	str	r0, [sp, #4]
 8010a76:	2305      	movs	r3, #5
 8010a78:	9300      	str	r3, [sp, #0]
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010a80:	fb06 f202 	mul.w	r2, r6, r2
 8010a84:	47a8      	blx	r5
 8010a86:	e7ec      	b.n	8010a62 <GetTimeOnAir+0x32>
 8010a88:	08016338 	.word	0x08016338
 8010a8c:	08016318 	.word	0x08016318
 8010a90:	08016960 	.word	0x08016960

08010a94 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8010a94:	b500      	push	{lr}
 8010a96:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8010a9c:	7803      	ldrb	r3, [r0, #0]
 8010a9e:	3b0b      	subs	r3, #11
 8010aa0:	2b2d      	cmp	r3, #45	; 0x2d
 8010aa2:	d82f      	bhi.n	8010b04 <RegionEU868GetPhyParam+0x70>
 8010aa4:	e8df f003 	tbb	[pc, r3]
 8010aa8:	3f393633 	.word	0x3f393633
 8010aac:	504c4845 	.word	0x504c4845
 8010ab0:	2e5c5854 	.word	0x2e5c5854
 8010ab4:	6e682e65 	.word	0x6e682e65
 8010ab8:	2e2e7774 	.word	0x2e2e7774
 8010abc:	2e177f7b 	.word	0x2e177f7b
 8010ac0:	2e2e2e2e 	.word	0x2e2e2e2e
 8010ac4:	2e2e2e2e 	.word	0x2e2e2e2e
 8010ac8:	2e2e2e2e 	.word	0x2e2e2e2e
 8010acc:	2e8c8582 	.word	0x2e8c8582
 8010ad0:	2e928f2e 	.word	0x2e928f2e
 8010ad4:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8010ad6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010ada:	f88d 3004 	strb.w	r3, [sp, #4]
 8010ade:	2307      	movs	r3, #7
 8010ae0:	f88d 3005 	strb.w	r3, [sp, #5]
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	f88d 3006 	strb.w	r3, [sp, #6]
 8010aea:	2310      	movs	r3, #16
 8010aec:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010af0:	4b3e      	ldr	r3, [pc, #248]	; (8010bec <RegionEU868GetPhyParam+0x158>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010af8:	9202      	str	r2, [sp, #8]
 8010afa:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010afc:	a801      	add	r0, sp, #4
 8010afe:	f7ff fedc 	bl	80108ba <RegionCommonGetNextLowerTxDr>
 8010b02:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8010b04:	9804      	ldr	r0, [sp, #16]
 8010b06:	9005      	str	r0, [sp, #20]
}
 8010b08:	b007      	add	sp, #28
 8010b0a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010b0e:	2340      	movs	r3, #64	; 0x40
 8010b10:	9304      	str	r3, [sp, #16]
            break;
 8010b12:	e7f7      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010b14:	2320      	movs	r3, #32
 8010b16:	9304      	str	r3, [sp, #16]
            break;
 8010b18:	e7f4      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010b1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010b1e:	4a34      	ldr	r2, [pc, #208]	; (8010bf0 <RegionEU868GetPhyParam+0x15c>)
 8010b20:	5cd3      	ldrb	r3, [r2, r3]
 8010b22:	9304      	str	r3, [sp, #16]
            break;
 8010b24:	e7ee      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010b26:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010b2a:	4a32      	ldr	r2, [pc, #200]	; (8010bf4 <RegionEU868GetPhyParam+0x160>)
 8010b2c:	5cd3      	ldrb	r3, [r2, r3]
 8010b2e:	9304      	str	r3, [sp, #16]
            break;
 8010b30:	e7e8      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010b32:	2301      	movs	r3, #1
 8010b34:	9304      	str	r3, [sp, #16]
            break;
 8010b36:	e7e5      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010b38:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010b3c:	9304      	str	r3, [sp, #16]
            break;
 8010b3e:	e7e1      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b44:	9304      	str	r3, [sp, #16]
            break;
 8010b46:	e7dd      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010b48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010b4c:	9304      	str	r3, [sp, #16]
            break;
 8010b4e:	e7d9      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010b50:	f241 3388 	movw	r3, #5000	; 0x1388
 8010b54:	9304      	str	r3, [sp, #16]
            break;
 8010b56:	e7d5      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010b58:	f241 7370 	movw	r3, #6000	; 0x1770
 8010b5c:	9304      	str	r3, [sp, #16]
            break;
 8010b5e:	e7d1      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8010b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b64:	4824      	ldr	r0, [pc, #144]	; (8010bf8 <RegionEU868GetPhyParam+0x164>)
 8010b66:	f002 fa5f 	bl	8013028 <randr>
 8010b6a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010b6e:	9004      	str	r0, [sp, #16]
            break;
 8010b70:	e7c8      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010b72:	4b22      	ldr	r3, [pc, #136]	; (8010bfc <RegionEU868GetPhyParam+0x168>)
 8010b74:	9304      	str	r3, [sp, #16]
            break;
 8010b76:	e7c5      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010b78:	4b1c      	ldr	r3, [pc, #112]	; (8010bec <RegionEU868GetPhyParam+0x158>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010b80:	9304      	str	r3, [sp, #16]
            break;
 8010b82:	e7bf      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010b84:	4b19      	ldr	r3, [pc, #100]	; (8010bec <RegionEU868GetPhyParam+0x158>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010b8c:	9304      	str	r3, [sp, #16]
            break;
 8010b8e:	e7b9      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010b90:	2310      	movs	r3, #16
 8010b92:	9304      	str	r3, [sp, #16]
            break;
 8010b94:	e7b6      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010b96:	4b15      	ldr	r3, [pc, #84]	; (8010bec <RegionEU868GetPhyParam+0x158>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	9304      	str	r3, [sp, #16]
            break;
 8010b9c:	e7b2      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010b9e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010ba2:	9304      	str	r3, [sp, #16]
            break;
 8010ba4:	e7ae      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8010ba6:	4b16      	ldr	r3, [pc, #88]	; (8010c00 <RegionEU868GetPhyParam+0x16c>)
 8010ba8:	9304      	str	r3, [sp, #16]
            break;
 8010baa:	e7ab      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8010bac:	4b13      	ldr	r3, [pc, #76]	; (8010bfc <RegionEU868GetPhyParam+0x168>)
 8010bae:	9304      	str	r3, [sp, #16]
            break;
 8010bb0:	e7a8      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010bb2:	2311      	movs	r3, #17
 8010bb4:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 8010bbe:	e7a1      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010bc0:	2303      	movs	r3, #3
 8010bc2:	9304      	str	r3, [sp, #16]
            break;
 8010bc4:	e79e      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8010bc6:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <RegionEU868GetPhyParam+0x168>)
 8010bc8:	9304      	str	r3, [sp, #16]
            break;
 8010bca:	e79b      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8010bcc:	2303      	movs	r3, #3
 8010bce:	9304      	str	r3, [sp, #16]
            break;
 8010bd0:	e798      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8010bd2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010bd6:	4a0b      	ldr	r2, [pc, #44]	; (8010c04 <RegionEU868GetPhyParam+0x170>)
 8010bd8:	5cd3      	ldrb	r3, [r2, r3]
 8010bda:	9304      	str	r3, [sp, #16]
            break;
 8010bdc:	e792      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8010bde:	490a      	ldr	r1, [pc, #40]	; (8010c08 <RegionEU868GetPhyParam+0x174>)
 8010be0:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010be4:	f7ff fe8c 	bl	8010900 <RegionCommonGetBandwidth>
 8010be8:	9004      	str	r0, [sp, #16]
            break;
 8010bea:	e78b      	b.n	8010b04 <RegionEU868GetPhyParam+0x70>
 8010bec:	20003c2c 	.word	0x20003c2c
 8010bf0:	08016340 	.word	0x08016340
 8010bf4:	08016348 	.word	0x08016348
 8010bf8:	fffffc18 	.word	0xfffffc18
 8010bfc:	33d3e608 	.word	0x33d3e608
 8010c00:	4009999a 	.word	0x4009999a
 8010c04:	08016338 	.word	0x08016338
 8010c08:	08016318 	.word	0x08016318

08010c0c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010c10:	4b0b      	ldr	r3, [pc, #44]	; (8010c40 <RegionEU868SetBandTxDone+0x34>)
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	7803      	ldrb	r3, [r0, #0]
 8010c16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c1e:	7a5b      	ldrb	r3, [r3, #9]
 8010c20:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010c24:	4b07      	ldr	r3, [pc, #28]	; (8010c44 <RegionEU868SetBandTxDone+0x38>)
 8010c26:	681c      	ldr	r4, [r3, #0]
 8010c28:	6903      	ldr	r3, [r0, #16]
 8010c2a:	9300      	str	r3, [sp, #0]
 8010c2c:	68c3      	ldr	r3, [r0, #12]
 8010c2e:	7842      	ldrb	r2, [r0, #1]
 8010c30:	6881      	ldr	r1, [r0, #8]
 8010c32:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010c36:	f7ff fc19 	bl	801046c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8010c3a:	b002      	add	sp, #8
 8010c3c:	bd10      	pop	{r4, pc}
 8010c3e:	bf00      	nop
 8010c40:	20003c2c 	.word	0x20003c2c
 8010c44:	20003c28 	.word	0x20003c28

08010c48 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8010c48:	b530      	push	{r4, r5, lr}
 8010c4a:	b0a5      	sub	sp, #148	; 0x94
 8010c4c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8010c4e:	2290      	movs	r2, #144	; 0x90
 8010c50:	2100      	movs	r1, #0
 8010c52:	4668      	mov	r0, sp
 8010c54:	f004 fdac 	bl	80157b0 <memset>
 8010c58:	2364      	movs	r3, #100	; 0x64
 8010c5a:	f8ad 3000 	strh.w	r3, [sp]
 8010c5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010c66:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8010c6a:	210a      	movs	r1, #10
 8010c6c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8010c70:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010c74:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010c78:	7b23      	ldrb	r3, [r4, #12]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d032      	beq.n	8010ce4 <RegionEU868InitDefaults+0x9c>
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d03e      	beq.n	8010d00 <RegionEU868InitDefaults+0xb8>
 8010c82:	b10b      	cbz	r3, 8010c88 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010c84:	b025      	add	sp, #148	; 0x94
 8010c86:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010c88:	6823      	ldr	r3, [r4, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d0fa      	beq.n	8010c84 <RegionEU868InitDefaults+0x3c>
 8010c8e:	6863      	ldr	r3, [r4, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d0f7      	beq.n	8010c84 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010c94:	4d1f      	ldr	r5, [pc, #124]	; (8010d14 <RegionEU868InitDefaults+0xcc>)
 8010c96:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 8010c98:	68a0      	ldr	r0, [r4, #8]
 8010c9a:	4b1f      	ldr	r3, [pc, #124]	; (8010d18 <RegionEU868InitDefaults+0xd0>)
 8010c9c:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8010c9e:	2290      	movs	r2, #144	; 0x90
 8010ca0:	4669      	mov	r1, sp
 8010ca2:	f002 f9ce 	bl	8013042 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010ca6:	682c      	ldr	r4, [r5, #0]
 8010ca8:	4b1c      	ldr	r3, [pc, #112]	; (8010d1c <RegionEU868InitDefaults+0xd4>)
 8010caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010cb2:	f104 0c0c 	add.w	ip, r4, #12
 8010cb6:	f103 020c 	add.w	r2, r3, #12
 8010cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8010cbc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010cc0:	f104 0c18 	add.w	ip, r4, #24
 8010cc4:	3318      	adds	r3, #24
 8010cc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010cca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010cce:	2307      	movs	r3, #7
 8010cd0:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 8010cda:	f504 7058 	add.w	r0, r4, #864	; 0x360
 8010cde:	f7ff fbb6 	bl	801044e <RegionCommonChanMaskCopy>
            break;
 8010ce2:	e7cf      	b.n	8010c84 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8010ce4:	4b0b      	ldr	r3, [pc, #44]	; (8010d14 <RegionEU868InitDefaults+0xcc>)
 8010ce6:	6818      	ldr	r0, [r3, #0]
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8010cec:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8010cee:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010cf6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010cfa:	f7ff fba8 	bl	801044e <RegionCommonChanMaskCopy>
            break;
 8010cfe:	e7c1      	b.n	8010c84 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8010d00:	4b04      	ldr	r3, [pc, #16]	; (8010d14 <RegionEU868InitDefaults+0xcc>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8010d08:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8010d0c:	430a      	orrs	r2, r1
 8010d0e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8010d12:	e7b7      	b.n	8010c84 <RegionEU868InitDefaults+0x3c>
 8010d14:	20003c2c 	.word	0x20003c2c
 8010d18:	20003c28 	.word	0x20003c28
 8010d1c:	08015988 	.word	0x08015988

08010d20 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010d20:	b500      	push	{lr}
 8010d22:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8010d24:	290f      	cmp	r1, #15
 8010d26:	d83c      	bhi.n	8010da2 <RegionEU868Verify+0x82>
 8010d28:	e8df f001 	tbb	[pc, r1]
 8010d2c:	3b3b3b0a 	.word	0x3b3b3b0a
 8010d30:	271d133b 	.word	0x271d133b
 8010d34:	3b31313b 	.word	0x3b31313b
 8010d38:	083b3b3b 	.word	0x083b3b3b
 8010d3c:	2001      	movs	r0, #1
 8010d3e:	e031      	b.n	8010da4 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8010d40:	2300      	movs	r3, #0
 8010d42:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 8010d46:	f10d 0107 	add.w	r1, sp, #7
 8010d4a:	6800      	ldr	r0, [r0, #0]
 8010d4c:	f7ff fe1c 	bl	8010988 <VerifyRfFreq>
 8010d50:	e028      	b.n	8010da4 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010d52:	2207      	movs	r2, #7
 8010d54:	2100      	movs	r1, #0
 8010d56:	f990 0000 	ldrsb.w	r0, [r0]
 8010d5a:	f7ff fb04 	bl	8010366 <RegionCommonValueInRange>
 8010d5e:	3800      	subs	r0, #0
 8010d60:	bf18      	it	ne
 8010d62:	2001      	movne	r0, #1
 8010d64:	e01e      	b.n	8010da4 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010d66:	2205      	movs	r2, #5
 8010d68:	2100      	movs	r1, #0
 8010d6a:	f990 0000 	ldrsb.w	r0, [r0]
 8010d6e:	f7ff fafa 	bl	8010366 <RegionCommonValueInRange>
 8010d72:	3800      	subs	r0, #0
 8010d74:	bf18      	it	ne
 8010d76:	2001      	movne	r0, #1
 8010d78:	e014      	b.n	8010da4 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010d7a:	2207      	movs	r2, #7
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	f990 0000 	ldrsb.w	r0, [r0]
 8010d82:	f7ff faf0 	bl	8010366 <RegionCommonValueInRange>
 8010d86:	3800      	subs	r0, #0
 8010d88:	bf18      	it	ne
 8010d8a:	2001      	movne	r0, #1
 8010d8c:	e00a      	b.n	8010da4 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8010d8e:	2207      	movs	r2, #7
 8010d90:	2100      	movs	r1, #0
 8010d92:	f990 0000 	ldrsb.w	r0, [r0]
 8010d96:	f7ff fae6 	bl	8010366 <RegionCommonValueInRange>
 8010d9a:	3800      	subs	r0, #0
 8010d9c:	bf18      	it	ne
 8010d9e:	2001      	movne	r0, #1
 8010da0:	e000      	b.n	8010da4 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 8010da2:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010da4:	b003      	add	sp, #12
 8010da6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010dac <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010dac:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8010dae:	7903      	ldrb	r3, [r0, #4]
 8010db0:	b11b      	cbz	r3, 8010dba <RegionEU868ChanMaskSet+0xe>
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d00b      	beq.n	8010dce <RegionEU868ChanMaskSet+0x22>
 8010db6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010db8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010dba:	4b0a      	ldr	r3, [pc, #40]	; (8010de4 <RegionEU868ChanMaskSet+0x38>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	6801      	ldr	r1, [r0, #0]
 8010dc2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010dc6:	f7ff fb42 	bl	801044e <RegionCommonChanMaskCopy>
    return true;
 8010dca:	2001      	movs	r0, #1
            break;
 8010dcc:	e7f4      	b.n	8010db8 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010dce:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <RegionEU868ChanMaskSet+0x38>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	6801      	ldr	r1, [r0, #0]
 8010dd6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8010dda:	f7ff fb38 	bl	801044e <RegionCommonChanMaskCopy>
    return true;
 8010dde:	2001      	movs	r0, #1
            break;
 8010de0:	e7ea      	b.n	8010db8 <RegionEU868ChanMaskSet+0xc>
 8010de2:	bf00      	nop
 8010de4:	20003c2c 	.word	0x20003c2c

08010de8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dea:	b083      	sub	sp, #12
 8010dec:	460e      	mov	r6, r1
 8010dee:	4617      	mov	r7, r2
 8010df0:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8010df2:	2807      	cmp	r0, #7
 8010df4:	bfa8      	it	ge
 8010df6:	2007      	movge	r0, #7
 8010df8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010dfa:	4913      	ldr	r1, [pc, #76]	; (8010e48 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010dfc:	f7ff fd80 	bl	8010900 <RegionCommonGetBandwidth>
 8010e00:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8010e02:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010e06:	2b07      	cmp	r3, #7
 8010e08:	d017      	beq.n	8010e3a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010e0a:	4a0f      	ldr	r2, [pc, #60]	; (8010e48 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010e0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010e10:	4a0e      	ldr	r2, [pc, #56]	; (8010e4c <RegionEU868ComputeRxWindowParameters+0x64>)
 8010e12:	5cd0      	ldrb	r0, [r2, r3]
 8010e14:	f7ff fc42 	bl	801069c <RegionCommonComputeSymbolTimeLoRa>
 8010e18:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010e1a:	4b0d      	ldr	r3, [pc, #52]	; (8010e50 <RegionEU868ComputeRxWindowParameters+0x68>)
 8010e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010e1e:	4798      	blx	r3
 8010e20:	4603      	mov	r3, r0
 8010e22:	f104 020c 	add.w	r2, r4, #12
 8010e26:	9201      	str	r2, [sp, #4]
 8010e28:	3408      	adds	r4, #8
 8010e2a:	9400      	str	r4, [sp, #0]
 8010e2c:	463a      	mov	r2, r7
 8010e2e:	4631      	mov	r1, r6
 8010e30:	4628      	mov	r0, r5
 8010e32:	f7ff fc41 	bl	80106b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8010e36:	b003      	add	sp, #12
 8010e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8010e3a:	4a04      	ldr	r2, [pc, #16]	; (8010e4c <RegionEU868ComputeRxWindowParameters+0x64>)
 8010e3c:	5cd0      	ldrb	r0, [r2, r3]
 8010e3e:	f7ff fc35 	bl	80106ac <RegionCommonComputeSymbolTimeFsk>
 8010e42:	4605      	mov	r5, r0
 8010e44:	e7e9      	b.n	8010e1a <RegionEU868ComputeRxWindowParameters+0x32>
 8010e46:	bf00      	nop
 8010e48:	08016318 	.word	0x08016318
 8010e4c:	08016338 	.word	0x08016338
 8010e50:	08016960 	.word	0x08016960

08010e54 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e58:	b08a      	sub	sp, #40	; 0x28
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8010e5e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010e62:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010e66:	4b37      	ldr	r3, [pc, #220]	; (8010f44 <RegionEU868RxConfig+0xf0>)
 8010e68:	685b      	ldr	r3, [r3, #4]
 8010e6a:	4798      	blx	r3
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d167      	bne.n	8010f40 <RegionEU868RxConfig+0xec>
 8010e70:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010e72:	7ce3      	ldrb	r3, [r4, #19]
 8010e74:	b983      	cbnz	r3, 8010e98 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010e76:	4b34      	ldr	r3, [pc, #208]	; (8010f48 <RegionEU868RxConfig+0xf4>)
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	7823      	ldrb	r3, [r4, #0]
 8010e7c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010e80:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010e84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e88:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e8c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8010e90:	f1b8 0f00 	cmp.w	r8, #0
 8010e94:	d100      	bne.n	8010e98 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010e96:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010e98:	4b2c      	ldr	r3, [pc, #176]	; (8010f4c <RegionEU868RxConfig+0xf8>)
 8010e9a:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 8010e9e:	4b29      	ldr	r3, [pc, #164]	; (8010f44 <RegionEU868RxConfig+0xf0>)
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	4640      	mov	r0, r8
 8010ea4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8010ea6:	2d07      	cmp	r5, #7
 8010ea8:	d02b      	beq.n	8010f02 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010eaa:	4b26      	ldr	r3, [pc, #152]	; (8010f44 <RegionEU868RxConfig+0xf0>)
 8010eac:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010eb0:	7ca3      	ldrb	r3, [r4, #18]
 8010eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb4:	2601      	movs	r6, #1
 8010eb6:	9608      	str	r6, [sp, #32]
 8010eb8:	2300      	movs	r3, #0
 8010eba:	9307      	str	r3, [sp, #28]
 8010ebc:	9306      	str	r3, [sp, #24]
 8010ebe:	9305      	str	r3, [sp, #20]
 8010ec0:	9304      	str	r3, [sp, #16]
 8010ec2:	9303      	str	r3, [sp, #12]
 8010ec4:	8922      	ldrh	r2, [r4, #8]
 8010ec6:	9202      	str	r2, [sp, #8]
 8010ec8:	2208      	movs	r2, #8
 8010eca:	9201      	str	r2, [sp, #4]
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	4633      	mov	r3, r6
 8010ed0:	464a      	mov	r2, r9
 8010ed2:	78a1      	ldrb	r1, [r4, #2]
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 8010ed8:	7c63      	ldrb	r3, [r4, #17]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d02d      	beq.n	8010f3a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8010ede:	4b1c      	ldr	r3, [pc, #112]	; (8010f50 <RegionEU868RxConfig+0xfc>)
 8010ee0:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010ee2:	4b18      	ldr	r3, [pc, #96]	; (8010f44 <RegionEU868RxConfig+0xf0>)
 8010ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ee6:	310d      	adds	r1, #13
 8010ee8:	b2c9      	uxtb	r1, r1
 8010eea:	4630      	mov	r0, r6
 8010eec:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010eee:	462a      	mov	r2, r5
 8010ef0:	4641      	mov	r1, r8
 8010ef2:	7ce0      	ldrb	r0, [r4, #19]
 8010ef4:	f7ff fd16 	bl	8010924 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8010ef8:	703d      	strb	r5, [r7, #0]
    return true;
 8010efa:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010efc:	b00a      	add	sp, #40	; 0x28
 8010efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8010f02:	4b10      	ldr	r3, [pc, #64]	; (8010f44 <RegionEU868RxConfig+0xf0>)
 8010f04:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010f08:	7ca3      	ldrb	r3, [r4, #18]
 8010f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	9008      	str	r0, [sp, #32]
 8010f10:	9007      	str	r0, [sp, #28]
 8010f12:	9006      	str	r0, [sp, #24]
 8010f14:	2301      	movs	r3, #1
 8010f16:	9305      	str	r3, [sp, #20]
 8010f18:	9004      	str	r0, [sp, #16]
 8010f1a:	9003      	str	r0, [sp, #12]
 8010f1c:	8923      	ldrh	r3, [r4, #8]
 8010f1e:	9302      	str	r3, [sp, #8]
 8010f20:	2305      	movs	r3, #5
 8010f22:	9301      	str	r3, [sp, #4]
 8010f24:	4b0b      	ldr	r3, [pc, #44]	; (8010f54 <RegionEU868RxConfig+0x100>)
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	4603      	mov	r3, r0
 8010f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f2e:	fb02 f209 	mul.w	r2, r2, r9
 8010f32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8010f36:	47d0      	blx	sl
 8010f38:	e7ce      	b.n	8010ed8 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8010f3a:	4b07      	ldr	r3, [pc, #28]	; (8010f58 <RegionEU868RxConfig+0x104>)
 8010f3c:	5d59      	ldrb	r1, [r3, r5]
 8010f3e:	e7d0      	b.n	8010ee2 <RegionEU868RxConfig+0x8e>
        return false;
 8010f40:	2000      	movs	r0, #0
 8010f42:	e7db      	b.n	8010efc <RegionEU868RxConfig+0xa8>
 8010f44:	08016960 	.word	0x08016960
 8010f48:	20003c2c 	.word	0x20003c2c
 8010f4c:	08016338 	.word	0x08016338
 8010f50:	08016348 	.word	0x08016348
 8010f54:	00014585 	.word	0x00014585
 8010f58:	08016340 	.word	0x08016340

08010f5c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f60:	b08d      	sub	sp, #52	; 0x34
 8010f62:	4604      	mov	r4, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8010f68:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010f6c:	4a42      	ldr	r2, [pc, #264]	; (8011078 <RegionEU868TxConfig+0x11c>)
 8010f6e:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010f72:	4d42      	ldr	r5, [pc, #264]	; (801107c <RegionEU868TxConfig+0x120>)
 8010f74:	682a      	ldr	r2, [r5, #0]
 8010f76:	7803      	ldrb	r3, [r0, #0]
 8010f78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f80:	7a53      	ldrb	r3, [r2, #9]
 8010f82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f86:	4a3e      	ldr	r2, [pc, #248]	; (8011080 <RegionEU868TxConfig+0x124>)
 8010f88:	6812      	ldr	r2, [r2, #0]
 8010f8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010f8e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010f92:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010f96:	f7ff fcaf 	bl	80108f8 <RegionCommonLimitTxPower>
 8010f9a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010f9c:	4939      	ldr	r1, [pc, #228]	; (8011084 <RegionEU868TxConfig+0x128>)
 8010f9e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8010fa2:	f7ff fcad 	bl	8010900 <RegionCommonGetBandwidth>
 8010fa6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010fa8:	68a2      	ldr	r2, [r4, #8]
 8010faa:	6861      	ldr	r1, [r4, #4]
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7ff fbbf 	bl	8010730 <RegionCommonComputeTxPower>
 8010fb2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010fb4:	4b34      	ldr	r3, [pc, #208]	; (8011088 <RegionEU868TxConfig+0x12c>)
 8010fb6:	68da      	ldr	r2, [r3, #12]
 8010fb8:	6829      	ldr	r1, [r5, #0]
 8010fba:	7823      	ldrb	r3, [r4, #0]
 8010fbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010fc0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010fc4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8010fc6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010fca:	2b07      	cmp	r3, #7
 8010fcc:	d031      	beq.n	8011032 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010fce:	4b2e      	ldr	r3, [pc, #184]	; (8011088 <RegionEU868TxConfig+0x12c>)
 8010fd0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010fd4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010fd8:	9308      	str	r3, [sp, #32]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	9207      	str	r2, [sp, #28]
 8010fde:	9206      	str	r2, [sp, #24]
 8010fe0:	9205      	str	r2, [sp, #20]
 8010fe2:	2501      	movs	r5, #1
 8010fe4:	9504      	str	r5, [sp, #16]
 8010fe6:	9203      	str	r2, [sp, #12]
 8010fe8:	2308      	movs	r3, #8
 8010fea:	9302      	str	r3, [sp, #8]
 8010fec:	9501      	str	r5, [sp, #4]
 8010fee:	f8cd a000 	str.w	sl, [sp]
 8010ff2:	464b      	mov	r3, r9
 8010ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010ffa:	4b20      	ldr	r3, [pc, #128]	; (801107c <RegionEU868TxConfig+0x120>)
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	7823      	ldrb	r3, [r4, #0]
 8011000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011004:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011008:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801100c:	f7ff fcac 	bl	8010968 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011010:	89a1      	ldrh	r1, [r4, #12]
 8011012:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011016:	f7ff fd0b 	bl	8010a30 <GetTimeOnAir>
 801101a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801101e:	4b1a      	ldr	r3, [pc, #104]	; (8011088 <RegionEU868TxConfig+0x12c>)
 8011020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011022:	7b21      	ldrb	r1, [r4, #12]
 8011024:	4628      	mov	r0, r5
 8011026:	4798      	blx	r3

    *txPower = txPowerLimited;
 8011028:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 801102a:	2001      	movs	r0, #1
 801102c:	b00d      	add	sp, #52	; 0x34
 801102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8011032:	4b15      	ldr	r3, [pc, #84]	; (8011088 <RegionEU868TxConfig+0x12c>)
 8011034:	69dd      	ldr	r5, [r3, #28]
 8011036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801103a:	fb03 f30a 	mul.w	r3, r3, sl
 801103e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8011042:	9208      	str	r2, [sp, #32]
 8011044:	f04f 0a00 	mov.w	sl, #0
 8011048:	f8cd a01c 	str.w	sl, [sp, #28]
 801104c:	f8cd a018 	str.w	sl, [sp, #24]
 8011050:	f8cd a014 	str.w	sl, [sp, #20]
 8011054:	2201      	movs	r2, #1
 8011056:	9204      	str	r2, [sp, #16]
 8011058:	f8cd a00c 	str.w	sl, [sp, #12]
 801105c:	2205      	movs	r2, #5
 801105e:	9202      	str	r2, [sp, #8]
 8011060:	f8cd a004 	str.w	sl, [sp, #4]
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	464b      	mov	r3, r9
 8011068:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801106c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801106e:	4650      	mov	r0, sl
 8011070:	47a8      	blx	r5
        modem = MODEM_FSK;
 8011072:	4655      	mov	r5, sl
 8011074:	e7c1      	b.n	8010ffa <RegionEU868TxConfig+0x9e>
 8011076:	bf00      	nop
 8011078:	08016338 	.word	0x08016338
 801107c:	20003c2c 	.word	0x20003c2c
 8011080:	20003c28 	.word	0x20003c28
 8011084:	08016318 	.word	0x08016318
 8011088:	08016960 	.word	0x08016960

0801108c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801108c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011090:	b08f      	sub	sp, #60	; 0x3c
 8011092:	4605      	mov	r5, r0
 8011094:	4689      	mov	r9, r1
 8011096:	4690      	mov	r8, r2
 8011098:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801109a:	2400      	movs	r4, #0
 801109c:	940c      	str	r4, [sp, #48]	; 0x30
 801109e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 80110a2:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 80110a6:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80110a8:	e030      	b.n	801110c <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80110aa:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 80110ae:	2607      	movs	r6, #7
 80110b0:	e012      	b.n	80110d8 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80110b2:	4a58      	ldr	r2, [pc, #352]	; (8011214 <RegionEU868LinkAdrReq+0x188>)
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80110ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80110be:	b13a      	cbz	r2, 80110d0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 80110c0:	2201      	movs	r2, #1
 80110c2:	fa02 f20c 	lsl.w	r2, r2, ip
 80110c6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80110ca:	430a      	orrs	r2, r1
 80110cc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80110d0:	f10c 0c01 	add.w	ip, ip, #1
 80110d4:	fa5f fc8c 	uxtb.w	ip, ip
 80110d8:	f1bc 0f0f 	cmp.w	ip, #15
 80110dc:	d816      	bhi.n	801110c <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 80110de:	2b06      	cmp	r3, #6
 80110e0:	d0e7      	beq.n	80110b2 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80110e2:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 80110e6:	fa4e fe0c 	asr.w	lr, lr, ip
 80110ea:	f01e 0f01 	tst.w	lr, #1
 80110ee:	d0ef      	beq.n	80110d0 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80110f0:	4a48      	ldr	r2, [pc, #288]	; (8011214 <RegionEU868LinkAdrReq+0x188>)
 80110f2:	6812      	ldr	r2, [r2, #0]
 80110f4:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80110f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80110fc:	2a00      	cmp	r2, #0
 80110fe:	d1e7      	bne.n	80110d0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8011100:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8011104:	e7e4      	b.n	80110d0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8011106:	2606      	movs	r6, #6
 8011108:	e000      	b.n	801110c <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 801110a:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801110c:	7a2b      	ldrb	r3, [r5, #8]
 801110e:	42a3      	cmp	r3, r4
 8011110:	d919      	bls.n	8011146 <RegionEU868LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011112:	6868      	ldr	r0, [r5, #4]
 8011114:	a90c      	add	r1, sp, #48	; 0x30
 8011116:	4420      	add	r0, r4
 8011118:	f7ff fa4a 	bl	80105b0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 801111c:	4603      	mov	r3, r0
 801111e:	b190      	cbz	r0, 8011146 <RegionEU868LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 8011120:	4423      	add	r3, r4
 8011122:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 8011124:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011128:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801112c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011130:	b90b      	cbnz	r3, 8011136 <RegionEU868LinkAdrReq+0xaa>
 8011132:	2a00      	cmp	r2, #0
 8011134:	d0e7      	beq.n	8011106 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011136:	1e5a      	subs	r2, r3, #1
 8011138:	b2d2      	uxtb	r2, r2
 801113a:	2a04      	cmp	r2, #4
 801113c:	d9e5      	bls.n	801110a <RegionEU868LinkAdrReq+0x7e>
 801113e:	2b06      	cmp	r3, #6
 8011140:	d9b3      	bls.n	80110aa <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 8011142:	2606      	movs	r6, #6
 8011144:	e7e2      	b.n	801110c <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011146:	2302      	movs	r3, #2
 8011148:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801114c:	7a6b      	ldrb	r3, [r5, #9]
 801114e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8011152:	a80a      	add	r0, sp, #40	; 0x28
 8011154:	f7ff fc9e 	bl	8010a94 <RegionEU868GetPhyParam>
 8011158:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 801115a:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801115e:	7aab      	ldrb	r3, [r5, #10]
 8011160:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011164:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011168:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801116c:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8011170:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011174:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011178:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801117c:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011180:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011184:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8011188:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801118c:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011190:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8011194:	2310      	movs	r3, #16
 8011196:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801119a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801119e:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80111a0:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80111a4:	2307      	movs	r3, #7
 80111a6:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80111aa:	4a1a      	ldr	r2, [pc, #104]	; (8011214 <RegionEU868LinkAdrReq+0x188>)
 80111ac:	6812      	ldr	r2, [r2, #0]
 80111ae:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80111b0:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80111b4:	2300      	movs	r3, #0
 80111b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80111ba:	682b      	ldr	r3, [r5, #0]
 80111bc:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80111be:	ab0c      	add	r3, sp, #48	; 0x30
 80111c0:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80111c4:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80111c8:	a801      	add	r0, sp, #4
 80111ca:	f7ff fa0f 	bl	80105ec <RegionCommonLinkAdrReqVerifyParams>
 80111ce:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80111d0:	2807      	cmp	r0, #7
 80111d2:	d010      	beq.n	80111f6 <RegionEU868LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80111d4:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80111d8:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 80111dc:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80111e0:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 80111e4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80111e8:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 80111ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80111ec:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 80111ee:	4628      	mov	r0, r5
 80111f0:	b00f      	add	sp, #60	; 0x3c
 80111f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80111f6:	4e07      	ldr	r6, [pc, #28]	; (8011214 <RegionEU868LinkAdrReq+0x188>)
 80111f8:	6830      	ldr	r0, [r6, #0]
 80111fa:	220c      	movs	r2, #12
 80111fc:	2100      	movs	r1, #0
 80111fe:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011202:	f001 ff36 	bl	8013072 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8011206:	6833      	ldr	r3, [r6, #0]
 8011208:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801120c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8011210:	e7e0      	b.n	80111d4 <RegionEU868LinkAdrReq+0x148>
 8011212:	bf00      	nop
 8011214:	20003c2c 	.word	0x20003c2c

08011218 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011218:	b530      	push	{r4, r5, lr}
 801121a:	b083      	sub	sp, #12
 801121c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801121e:	2300      	movs	r3, #0
 8011220:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8011224:	f10d 0107 	add.w	r1, sp, #7
 8011228:	6840      	ldr	r0, [r0, #4]
 801122a:	f7ff fbad 	bl	8010988 <VerifyRfFreq>
 801122e:	b1a8      	cbz	r0, 801125c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 8011230:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8011232:	2207      	movs	r2, #7
 8011234:	2100      	movs	r1, #0
 8011236:	f994 0000 	ldrsb.w	r0, [r4]
 801123a:	f7ff f894 	bl	8010366 <RegionCommonValueInRange>
 801123e:	b908      	cbnz	r0, 8011244 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 8011240:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8011244:	2205      	movs	r2, #5
 8011246:	2100      	movs	r1, #0
 8011248:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801124c:	f7ff f88b 	bl	8010366 <RegionCommonValueInRange>
 8011250:	b908      	cbnz	r0, 8011256 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011252:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 8011256:	4628      	mov	r0, r5
 8011258:	b003      	add	sp, #12
 801125a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 801125c:	2506      	movs	r5, #6
 801125e:	e7e8      	b.n	8011232 <RegionEU868RxParamSetupReq+0x1a>

08011260 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011264:	4770      	bx	lr
	...

08011268 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011268:	b510      	push	{r4, lr}
 801126a:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801126c:	2300      	movs	r3, #0
 801126e:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8011272:	7803      	ldrb	r3, [r0, #0]
 8011274:	2b0f      	cmp	r3, #15
 8011276:	d902      	bls.n	801127e <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 8011278:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 801127a:	b002      	add	sp, #8
 801127c:	bd10      	pop	{r4, pc}
 801127e:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8011280:	f10d 0107 	add.w	r1, sp, #7
 8011284:	6840      	ldr	r0, [r0, #4]
 8011286:	f7ff fb7f 	bl	8010988 <VerifyRfFreq>
 801128a:	b170      	cbz	r0, 80112aa <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 801128c:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801128e:	4b0b      	ldr	r3, [pc, #44]	; (80112bc <RegionEU868DlChannelReq+0x54>)
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	7823      	ldrb	r3, [r4, #0]
 8011294:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011298:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801129c:	b909      	cbnz	r1, 80112a2 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 801129e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 80112a2:	2803      	cmp	r0, #3
 80112a4:	d003      	beq.n	80112ae <RegionEU868DlChannelReq+0x46>
    return status;
 80112a6:	b240      	sxtb	r0, r0
 80112a8:	e7e7      	b.n	801127a <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 80112aa:	2002      	movs	r0, #2
 80112ac:	e7ef      	b.n	801128e <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80112ae:	6861      	ldr	r1, [r4, #4]
 80112b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80112b8:	6051      	str	r1, [r2, #4]
 80112ba:	e7f4      	b.n	80112a6 <RegionEU868DlChannelReq+0x3e>
 80112bc:	20003c2c 	.word	0x20003c2c

080112c0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 80112c0:	4770      	bx	lr
	...

080112c4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112c6:	b097      	sub	sp, #92	; 0x5c
 80112c8:	4604      	mov	r4, r0
 80112ca:	460f      	mov	r7, r1
 80112cc:	4616      	mov	r6, r2
 80112ce:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80112d0:	2100      	movs	r1, #0
 80112d2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 80112d6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80112da:	9111      	str	r1, [sp, #68]	; 0x44
 80112dc:	9112      	str	r1, [sp, #72]	; 0x48
 80112de:	9113      	str	r1, [sp, #76]	; 0x4c
 80112e0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80112e2:	2307      	movs	r3, #7
 80112e4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80112e8:	4b34      	ldr	r3, [pc, #208]	; (80113bc <RegionEU868NextChannel+0xf8>)
 80112ea:	6818      	ldr	r0, [r3, #0]
 80112ec:	2201      	movs	r2, #1
 80112ee:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80112f2:	f7ff f896 	bl	8010422 <RegionCommonCountChannels>
 80112f6:	b938      	cbnz	r0, 8011308 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80112f8:	4b30      	ldr	r3, [pc, #192]	; (80113bc <RegionEU868NextChannel+0xf8>)
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8011300:	f043 0307 	orr.w	r3, r3, #7
 8011304:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8011308:	7a63      	ldrb	r3, [r4, #9]
 801130a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801130e:	7a23      	ldrb	r3, [r4, #8]
 8011310:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011314:	4b29      	ldr	r3, [pc, #164]	; (80113bc <RegionEU868NextChannel+0xf8>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801131c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801131e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8011320:	4b27      	ldr	r3, [pc, #156]	; (80113c0 <RegionEU868NextChannel+0xfc>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8011326:	2310      	movs	r3, #16
 8011328:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 801132c:	f10d 030a 	add.w	r3, sp, #10
 8011330:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011336:	6863      	ldr	r3, [r4, #4]
 8011338:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801133a:	7aa3      	ldrb	r3, [r4, #10]
 801133c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8011340:	2306      	movs	r3, #6
 8011342:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011346:	ab0c      	add	r3, sp, #48	; 0x30
 8011348:	f104 020c 	add.w	r2, r4, #12
 801134c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011350:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011354:	7d23      	ldrb	r3, [r4, #20]
 8011356:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801135a:	8ae1      	ldrh	r1, [r4, #22]
 801135c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011360:	f7ff fb66 	bl	8010a30 <GetTimeOnAir>
 8011364:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011366:	ab03      	add	r3, sp, #12
 8011368:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801136a:	9601      	str	r6, [sp, #4]
 801136c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011376:	aa11      	add	r2, sp, #68	; 0x44
 8011378:	4629      	mov	r1, r5
 801137a:	a809      	add	r0, sp, #36	; 0x24
 801137c:	f7ff fa53 	bl	8010826 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011380:	4604      	mov	r4, r0
 8011382:	b120      	cbz	r0, 801138e <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011384:	280c      	cmp	r0, #12
 8011386:	d00f      	beq.n	80113a8 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011388:	4620      	mov	r0, r4
 801138a:	b017      	add	sp, #92	; 0x5c
 801138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801138e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8011392:	3901      	subs	r1, #1
 8011394:	f001 fe48 	bl	8013028 <randr>
 8011398:	f100 0358 	add.w	r3, r0, #88	; 0x58
 801139c:	eb0d 0003 	add.w	r0, sp, r3
 80113a0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 80113a4:	703b      	strb	r3, [r7, #0]
 80113a6:	e7ef      	b.n	8011388 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80113a8:	4b04      	ldr	r3, [pc, #16]	; (80113bc <RegionEU868NextChannel+0xf8>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80113b0:	f043 0307 	orr.w	r3, r3, #7
 80113b4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 80113b8:	e7e6      	b.n	8011388 <RegionEU868NextChannel+0xc4>
 80113ba:	bf00      	nop
 80113bc:	20003c2c 	.word	0x20003c2c
 80113c0:	20003c28 	.word	0x20003c28

080113c4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80113c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113c6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 80113ce:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80113d0:	2d02      	cmp	r5, #2
 80113d2:	d94e      	bls.n	8011472 <RegionEU868ChannelAdd+0xae>
 80113d4:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80113d6:	2d0f      	cmp	r5, #15
 80113d8:	d84d      	bhi.n	8011476 <RegionEU868ChannelAdd+0xb2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80113da:	6803      	ldr	r3, [r0, #0]
 80113dc:	7a18      	ldrb	r0, [r3, #8]
 80113de:	f340 0003 	sbfx	r0, r0, #0, #4
 80113e2:	2207      	movs	r2, #7
 80113e4:	2100      	movs	r1, #0
 80113e6:	b240      	sxtb	r0, r0
 80113e8:	f7fe ffbd 	bl	8010366 <RegionCommonValueInRange>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d03c      	beq.n	801146a <RegionEU868ChannelAdd+0xa6>
    bool drInvalid = false;
 80113f0:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	7a18      	ldrb	r0, [r3, #8]
 80113f6:	f340 1003 	sbfx	r0, r0, #4, #4
 80113fa:	2207      	movs	r2, #7
 80113fc:	2100      	movs	r1, #0
 80113fe:	b240      	sxtb	r0, r0
 8011400:	f7fe ffb1 	bl	8010366 <RegionCommonValueInRange>
 8011404:	b900      	cbnz	r0, 8011408 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8011406:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011408:	6820      	ldr	r0, [r4, #0]
 801140a:	7a03      	ldrb	r3, [r0, #8]
 801140c:	f343 0203 	sbfx	r2, r3, #0, #4
 8011410:	b252      	sxtb	r2, r2
 8011412:	f343 1303 	sbfx	r3, r3, #4, #4
 8011416:	b25b      	sxtb	r3, r3
 8011418:	429a      	cmp	r2, r3
 801141a:	dd00      	ble.n	801141e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 801141c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801141e:	f10d 0107 	add.w	r1, sp, #7
 8011422:	6800      	ldr	r0, [r0, #0]
 8011424:	f7ff fab0 	bl	8010988 <VerifyRfFreq>
 8011428:	b308      	cbz	r0, 801146e <RegionEU868ChannelAdd+0xaa>
    bool freqInvalid = false;
 801142a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801142c:	b106      	cbz	r6, 8011430 <RegionEU868ChannelAdd+0x6c>
 801142e:	bb2b      	cbnz	r3, 801147c <RegionEU868ChannelAdd+0xb8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011430:	bb36      	cbnz	r6, 8011480 <RegionEU868ChannelAdd+0xbc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8011432:	bb3b      	cbnz	r3, 8011484 <RegionEU868ChannelAdd+0xc0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011434:	4f14      	ldr	r7, [pc, #80]	; (8011488 <RegionEU868ChannelAdd+0xc4>)
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	006e      	lsls	r6, r5, #1
 801143a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801143e:	220c      	movs	r2, #12
 8011440:	6821      	ldr	r1, [r4, #0]
 8011442:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011446:	f001 fdfc 	bl	8013042 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801144a:	683a      	ldr	r2, [r7, #0]
 801144c:	442e      	add	r6, r5
 801144e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011452:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011456:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011458:	2301      	movs	r3, #1
 801145a:	40ab      	lsls	r3, r5
 801145c:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8011460:	430b      	orrs	r3, r1
 8011462:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8011466:	2000      	movs	r0, #0
 8011468:	e006      	b.n	8011478 <RegionEU868ChannelAdd+0xb4>
        drInvalid = true;
 801146a:	2601      	movs	r6, #1
 801146c:	e7c1      	b.n	80113f2 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 801146e:	2301      	movs	r3, #1
 8011470:	e7dc      	b.n	801142c <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011472:	2006      	movs	r0, #6
 8011474:	e000      	b.n	8011478 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011476:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011478:	b003      	add	sp, #12
 801147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801147c:	2006      	movs	r0, #6
 801147e:	e7fb      	b.n	8011478 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011480:	2005      	movs	r0, #5
 8011482:	e7f9      	b.n	8011478 <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011484:	2004      	movs	r0, #4
 8011486:	e7f7      	b.n	8011478 <RegionEU868ChannelAdd+0xb4>
 8011488:	20003c2c 	.word	0x20003c2c

0801148c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801148c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801148e:	2902      	cmp	r1, #2
 8011490:	d801      	bhi.n	8011496 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8011492:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8011494:	4770      	bx	lr
{
 8011496:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011498:	4b09      	ldr	r3, [pc, #36]	; (80114c0 <RegionEU868ChannelsRemove+0x34>)
 801149a:	6818      	ldr	r0, [r3, #0]
 801149c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80114a0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80114a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80114a8:	2200      	movs	r2, #0
 80114aa:	f840 200c 	str.w	r2, [r0, ip]
 80114ae:	605a      	str	r2, [r3, #4]
 80114b0:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80114b2:	2210      	movs	r2, #16
 80114b4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80114b8:	f7fe ff97 	bl	80103ea <RegionCommonChanDisable>
}
 80114bc:	bd08      	pop	{r3, pc}
 80114be:	bf00      	nop
 80114c0:	20003c2c 	.word	0x20003c2c

080114c4 <RegionEU868ApplyCFList>:
{
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80114c8:	2350      	movs	r3, #80	; 0x50
 80114ca:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 80114ce:	7a03      	ldrb	r3, [r0, #8]
 80114d0:	2b10      	cmp	r3, #16
 80114d2:	d136      	bne.n	8011542 <RegionEU868ApplyCFList+0x7e>
 80114d4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 80114d6:	6843      	ldr	r3, [r0, #4]
 80114d8:	7bdd      	ldrb	r5, [r3, #15]
 80114da:	2d00      	cmp	r5, #0
 80114dc:	d131      	bne.n	8011542 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80114de:	2403      	movs	r4, #3
 80114e0:	e01b      	b.n	801151a <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80114e2:	6872      	ldr	r2, [r6, #4]
 80114e4:	5d53      	ldrb	r3, [r2, r5]
 80114e6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80114e8:	442a      	add	r2, r5
 80114ea:	7851      	ldrb	r1, [r2, #1]
 80114ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80114f0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80114f2:	7892      	ldrb	r2, [r2, #2]
 80114f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114f8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 80114fa:	2264      	movs	r2, #100	; 0x64
 80114fc:	fb02 f303 	mul.w	r3, r2, r3
 8011500:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8011502:	2300      	movs	r3, #0
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	e011      	b.n	801152c <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8011508:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 801150c:	4668      	mov	r0, sp
 801150e:	f7ff ffbd 	bl	801148c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011512:	3503      	adds	r5, #3
 8011514:	b2ed      	uxtb	r5, r5
 8011516:	3401      	adds	r4, #1
 8011518:	b2e4      	uxtb	r4, r4
 801151a:	2c0f      	cmp	r4, #15
 801151c:	d811      	bhi.n	8011542 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801151e:	2c07      	cmp	r4, #7
 8011520:	d9df      	bls.n	80114e2 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011522:	2300      	movs	r3, #0
 8011524:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011526:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 801152a:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 801152c:	9b03      	ldr	r3, [sp, #12]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d0ea      	beq.n	8011508 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8011532:	ab03      	add	r3, sp, #12
 8011534:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011536:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 801153a:	a801      	add	r0, sp, #4
 801153c:	f7ff ff42 	bl	80113c4 <RegionEU868ChannelAdd>
 8011540:	e7e7      	b.n	8011512 <RegionEU868ApplyCFList+0x4e>
}
 8011542:	b006      	add	sp, #24
 8011544:	bd70      	pop	{r4, r5, r6, pc}

08011546 <RegionEU868NewChannelReq>:
{
 8011546:	b500      	push	{lr}
 8011548:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 801154a:	6803      	ldr	r3, [r0, #0]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	b952      	cbnz	r2, 8011566 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011550:	7903      	ldrb	r3, [r0, #4]
 8011552:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8011556:	a801      	add	r0, sp, #4
 8011558:	f7ff ff98 	bl	801148c <RegionEU868ChannelsRemove>
 801155c:	b1d0      	cbz	r0, 8011594 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 801155e:	2003      	movs	r0, #3
}
 8011560:	b005      	add	sp, #20
 8011562:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011566:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011568:	7903      	ldrb	r3, [r0, #4]
 801156a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801156e:	a802      	add	r0, sp, #8
 8011570:	f7ff ff28 	bl	80113c4 <RegionEU868ChannelAdd>
 8011574:	2806      	cmp	r0, #6
 8011576:	d80b      	bhi.n	8011590 <RegionEU868NewChannelReq+0x4a>
 8011578:	e8df f000 	tbb	[pc, r0]
 801157c:	0a0a0a04 	.word	0x0a0a0a04
 8011580:	060e      	.short	0x060e
 8011582:	08          	.byte	0x08
 8011583:	00          	.byte	0x00
 8011584:	2003      	movs	r0, #3
 8011586:	e7eb      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 8011588:	2001      	movs	r0, #1
                break;
 801158a:	e7e9      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 801158c:	2000      	movs	r0, #0
                break;
 801158e:	e7e7      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011590:	2000      	movs	r0, #0
                break;
 8011592:	e7e5      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8011594:	2000      	movs	r0, #0
 8011596:	e7e3      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 8011598:	2002      	movs	r0, #2
 801159a:	e7e1      	b.n	8011560 <RegionEU868NewChannelReq+0x1a>

0801159c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801159c:	1a88      	subs	r0, r1, r2
 801159e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 80115a0:	2800      	cmp	r0, #0
 80115a2:	db01      	blt.n	80115a8 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 80115a4:	b2c0      	uxtb	r0, r0
 80115a6:	4770      	bx	lr
        datarate = DR_0;
 80115a8:	2000      	movs	r0, #0
 80115aa:	e7fb      	b.n	80115a4 <RegionEU868ApplyDrOffset+0x8>

080115ac <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 80115ac:	b510      	push	{r4, lr}
 80115ae:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80115b0:	4b10      	ldr	r3, [pc, #64]	; (80115f4 <VerifyRfFreq+0x48>)
 80115b2:	6a1b      	ldr	r3, [r3, #32]
 80115b4:	4798      	blx	r3
 80115b6:	b1c8      	cbz	r0, 80115ec <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80115b8:	4b0f      	ldr	r3, [pc, #60]	; (80115f8 <VerifyRfFreq+0x4c>)
 80115ba:	4423      	add	r3, r4
 80115bc:	4a0f      	ldr	r2, [pc, #60]	; (80115fc <VerifyRfFreq+0x50>)
 80115be:	4293      	cmp	r3, r2
 80115c0:	d813      	bhi.n	80115ea <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80115c2:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 80115c6:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 80115ca:	f202 7245 	addw	r2, r2, #1861	; 0x745
 80115ce:	fba2 1203 	umull	r1, r2, r2, r3
 80115d2:	0c92      	lsrs	r2, r2, #18
 80115d4:	490a      	ldr	r1, [pc, #40]	; (8011600 <VerifyRfFreq+0x54>)
 80115d6:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80115da:	b942      	cbnz	r2, 80115ee <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80115dc:	4b09      	ldr	r3, [pc, #36]	; (8011604 <VerifyRfFreq+0x58>)
 80115de:	4423      	add	r3, r4
 80115e0:	4a09      	ldr	r2, [pc, #36]	; (8011608 <VerifyRfFreq+0x5c>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d902      	bls.n	80115ec <VerifyRfFreq+0x40>
    {
        return false;
 80115e6:	2000      	movs	r0, #0
 80115e8:	e000      	b.n	80115ec <VerifyRfFreq+0x40>
        return false;
 80115ea:	2000      	movs	r0, #0
    }
    return true;
}
 80115ec:	bd10      	pop	{r4, pc}
        return false;
 80115ee:	2000      	movs	r0, #0
 80115f0:	e7fc      	b.n	80115ec <VerifyRfFreq+0x40>
 80115f2:	bf00      	nop
 80115f4:	08016960 	.word	0x08016960
 80115f8:	c8f78f60 	.word	0xc8f78f60
 80115fc:	00401640 	.word	0x00401640
 8011600:	000927c0 	.word	0x000927c0
 8011604:	ca37fea0 	.word	0xca37fea0
 8011608:	01808580 	.word	0x01808580

0801160c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8011612:	4b0a      	ldr	r3, [pc, #40]	; (801163c <GetTimeOnAir+0x30>)
 8011614:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011616:	490a      	ldr	r1, [pc, #40]	; (8011640 <GetTimeOnAir+0x34>)
 8011618:	f7ff f972 	bl	8010900 <RegionCommonGetBandwidth>
 801161c:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801161e:	4b09      	ldr	r3, [pc, #36]	; (8011644 <GetTimeOnAir+0x38>)
 8011620:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011622:	2001      	movs	r0, #1
 8011624:	9003      	str	r0, [sp, #12]
 8011626:	b2e4      	uxtb	r4, r4
 8011628:	9402      	str	r4, [sp, #8]
 801162a:	2200      	movs	r2, #0
 801162c:	9201      	str	r2, [sp, #4]
 801162e:	2208      	movs	r2, #8
 8011630:	9200      	str	r2, [sp, #0]
 8011632:	4603      	mov	r3, r0
 8011634:	4632      	mov	r2, r6
 8011636:	47a8      	blx	r5
}
 8011638:	b004      	add	sp, #16
 801163a:	bd70      	pop	{r4, r5, r6, pc}
 801163c:	080163a4 	.word	0x080163a4
 8011640:	08016350 	.word	0x08016350
 8011644:	08016960 	.word	0x08016960

08011648 <LimitTxPower>:
{
 8011648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164a:	4606      	mov	r6, r0
 801164c:	4615      	mov	r5, r2
 801164e:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8011650:	f7ff f952 	bl	80108f8 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8011654:	2d04      	cmp	r5, #4
 8011656:	d105      	bne.n	8011664 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011658:	4634      	mov	r4, r6
 801165a:	2e02      	cmp	r6, #2
 801165c:	bfb8      	it	lt
 801165e:	2402      	movlt	r4, #2
}
 8011660:	4620      	mov	r0, r4
 8011662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011664:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011666:	2204      	movs	r2, #4
 8011668:	2100      	movs	r1, #0
 801166a:	4638      	mov	r0, r7
 801166c:	f7fe fed9 	bl	8010422 <RegionCommonCountChannels>
 8011670:	2831      	cmp	r0, #49	; 0x31
 8011672:	d8f5      	bhi.n	8011660 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011674:	4634      	mov	r4, r6
 8011676:	2e05      	cmp	r6, #5
 8011678:	bfb8      	it	lt
 801167a:	2405      	movlt	r4, #5
 801167c:	e7f0      	b.n	8011660 <LimitTxPower+0x18>
	...

08011680 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8011680:	b500      	push	{lr}
 8011682:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011684:	2300      	movs	r3, #0
 8011686:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011688:	7803      	ldrb	r3, [r0, #0]
 801168a:	3b01      	subs	r3, #1
 801168c:	2b37      	cmp	r3, #55	; 0x37
 801168e:	d81f      	bhi.n	80116d0 <RegionUS915GetPhyParam+0x50>
 8011690:	e8df f003 	tbb	[pc, r3]
 8011694:	1e1e1e1c 	.word	0x1e1e1e1c
 8011698:	1e1e1e1e 	.word	0x1e1e1e1e
 801169c:	3e3b1e1e 	.word	0x3e3b1e1e
 80116a0:	4d1e4741 	.word	0x4d1e4741
 80116a4:	5d595551 	.word	0x5d595551
 80116a8:	6d6a1e61 	.word	0x6d6a1e61
 80116ac:	7f7c7670 	.word	0x7f7c7670
 80116b0:	86831e1e 	.word	0x86831e1e
 80116b4:	1e1e1e23 	.word	0x1e1e1e23
 80116b8:	1e1e1e1e 	.word	0x1e1e1e1e
 80116bc:	1e1e1e1e 	.word	0x1e1e1e1e
 80116c0:	90891e1e 	.word	0x90891e1e
 80116c4:	a01e9d9a 	.word	0xa01e9d9a
 80116c8:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 80116cc:	2308      	movs	r3, #8
 80116ce:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80116d0:	9804      	ldr	r0, [sp, #16]
 80116d2:	9005      	str	r0, [sp, #20]
}
 80116d4:	b007      	add	sp, #28
 80116d6:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 80116da:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80116de:	f88d 3004 	strb.w	r3, [sp, #4]
 80116e2:	2304      	movs	r3, #4
 80116e4:	f88d 3005 	strb.w	r3, [sp, #5]
 80116e8:	2300      	movs	r3, #0
 80116ea:	f88d 3006 	strb.w	r3, [sp, #6]
 80116ee:	2348      	movs	r3, #72	; 0x48
 80116f0:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80116f4:	4b44      	ldr	r3, [pc, #272]	; (8011808 <RegionUS915GetPhyParam+0x188>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80116fc:	9202      	str	r2, [sp, #8]
 80116fe:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011700:	a801      	add	r0, sp, #4
 8011702:	f7ff f8da 	bl	80108ba <RegionCommonGetNextLowerTxDr>
 8011706:	9004      	str	r0, [sp, #16]
            break;
 8011708:	e7e2      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801170a:	2340      	movs	r3, #64	; 0x40
 801170c:	9304      	str	r3, [sp, #16]
            break;
 801170e:	e7df      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011710:	2320      	movs	r3, #32
 8011712:	9304      	str	r3, [sp, #16]
            break;
 8011714:	e7dc      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011716:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801171a:	4a3c      	ldr	r2, [pc, #240]	; (801180c <RegionUS915GetPhyParam+0x18c>)
 801171c:	5cd3      	ldrb	r3, [r2, r3]
 801171e:	9304      	str	r3, [sp, #16]
            break;
 8011720:	e7d6      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8011722:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011726:	4a3a      	ldr	r2, [pc, #232]	; (8011810 <RegionUS915GetPhyParam+0x190>)
 8011728:	5cd3      	ldrb	r3, [r2, r3]
 801172a:	9304      	str	r3, [sp, #16]
            break;
 801172c:	e7d0      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 801172e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011732:	9304      	str	r3, [sp, #16]
            break;
 8011734:	e7cc      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801173a:	9304      	str	r3, [sp, #16]
            break;
 801173c:	e7c8      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801173e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011742:	9304      	str	r3, [sp, #16]
            break;
 8011744:	e7c4      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011746:	f241 3388 	movw	r3, #5000	; 0x1388
 801174a:	9304      	str	r3, [sp, #16]
            break;
 801174c:	e7c0      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801174e:	f241 7370 	movw	r3, #6000	; 0x1770
 8011752:	9304      	str	r3, [sp, #16]
            break;
 8011754:	e7bc      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8011756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801175a:	482e      	ldr	r0, [pc, #184]	; (8011814 <RegionUS915GetPhyParam+0x194>)
 801175c:	f001 fc64 	bl	8013028 <randr>
 8011760:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8011764:	9004      	str	r0, [sp, #16]
            break;
 8011766:	e7b3      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8011768:	4b2b      	ldr	r3, [pc, #172]	; (8011818 <RegionUS915GetPhyParam+0x198>)
 801176a:	9304      	str	r3, [sp, #16]
            break;
 801176c:	e7b0      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 801176e:	2308      	movs	r3, #8
 8011770:	9304      	str	r3, [sp, #16]
            break;
 8011772:	e7ad      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011774:	4b24      	ldr	r3, [pc, #144]	; (8011808 <RegionUS915GetPhyParam+0x188>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801177c:	9304      	str	r3, [sp, #16]
            break;
 801177e:	e7a7      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8011780:	4b21      	ldr	r3, [pc, #132]	; (8011808 <RegionUS915GetPhyParam+0x188>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8011788:	9304      	str	r3, [sp, #16]
            break;
 801178a:	e7a1      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801178c:	2348      	movs	r3, #72	; 0x48
 801178e:	9304      	str	r3, [sp, #16]
            break;
 8011790:	e79e      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8011792:	4b1d      	ldr	r3, [pc, #116]	; (8011808 <RegionUS915GetPhyParam+0x188>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	9304      	str	r3, [sp, #16]
            break;
 8011798:	e79a      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801179a:	4b20      	ldr	r3, [pc, #128]	; (801181c <RegionUS915GetPhyParam+0x19c>)
 801179c:	9304      	str	r3, [sp, #16]
            break;
 801179e:	e797      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 80117a0:	2300      	movs	r3, #0
 80117a2:	9304      	str	r3, [sp, #16]
            break;
 80117a4:	e794      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80117a6:	4a1e      	ldr	r2, [pc, #120]	; (8011820 <RegionUS915GetPhyParam+0x1a0>)
 80117a8:	491b      	ldr	r1, [pc, #108]	; (8011818 <RegionUS915GetPhyParam+0x198>)
 80117aa:	7900      	ldrb	r0, [r0, #4]
 80117ac:	f7fe fd0c 	bl	80101c8 <RegionBaseUSCalcDownlinkFrequency>
 80117b0:	9004      	str	r0, [sp, #16]
            break;
 80117b2:	e78d      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80117b4:	2317      	movs	r3, #23
 80117b6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80117ba:	2304      	movs	r3, #4
 80117bc:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80117c0:	2303      	movs	r3, #3
 80117c2:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 80117c6:	e783      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80117c8:	2308      	movs	r3, #8
 80117ca:	9304      	str	r3, [sp, #16]
            break;
 80117cc:	e780      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80117ce:	2308      	movs	r3, #8
 80117d0:	9304      	str	r3, [sp, #16]
            break;
 80117d2:	e77d      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80117d4:	4a12      	ldr	r2, [pc, #72]	; (8011820 <RegionUS915GetPhyParam+0x1a0>)
 80117d6:	4910      	ldr	r1, [pc, #64]	; (8011818 <RegionUS915GetPhyParam+0x198>)
 80117d8:	7900      	ldrb	r0, [r0, #4]
 80117da:	f7fe fcf5 	bl	80101c8 <RegionBaseUSCalcDownlinkFrequency>
 80117de:	9004      	str	r0, [sp, #16]
            break;
 80117e0:	e776      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80117e2:	2308      	movs	r3, #8
 80117e4:	9304      	str	r3, [sp, #16]
            break;
 80117e6:	e773      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80117e8:	2308      	movs	r3, #8
 80117ea:	9304      	str	r3, [sp, #16]
            break;
 80117ec:	e770      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80117ee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80117f2:	4a0c      	ldr	r2, [pc, #48]	; (8011824 <RegionUS915GetPhyParam+0x1a4>)
 80117f4:	5cd3      	ldrb	r3, [r2, r3]
 80117f6:	9304      	str	r3, [sp, #16]
            break;
 80117f8:	e76a      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80117fa:	490b      	ldr	r1, [pc, #44]	; (8011828 <RegionUS915GetPhyParam+0x1a8>)
 80117fc:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8011800:	f7ff f87e 	bl	8010900 <RegionCommonGetBandwidth>
 8011804:	9004      	str	r0, [sp, #16]
            break;
 8011806:	e763      	b.n	80116d0 <RegionUS915GetPhyParam+0x50>
 8011808:	20003c38 	.word	0x20003c38
 801180c:	080163c4 	.word	0x080163c4
 8011810:	080163b4 	.word	0x080163b4
 8011814:	fffffc18 	.word	0xfffffc18
 8011818:	370870a0 	.word	0x370870a0
 801181c:	4200999a 	.word	0x4200999a
 8011820:	000927c0 	.word	0x000927c0
 8011824:	080163a4 	.word	0x080163a4
 8011828:	08016350 	.word	0x08016350

0801182c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801182c:	b510      	push	{r4, lr}
 801182e:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8011830:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <RegionUS915SetBandTxDone+0x34>)
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	7803      	ldrb	r3, [r0, #0]
 8011836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801183a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801183e:	7a5b      	ldrb	r3, [r3, #9]
 8011840:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011844:	4b07      	ldr	r3, [pc, #28]	; (8011864 <RegionUS915SetBandTxDone+0x38>)
 8011846:	681c      	ldr	r4, [r3, #0]
 8011848:	6903      	ldr	r3, [r0, #16]
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	68c3      	ldr	r3, [r0, #12]
 801184e:	7842      	ldrb	r2, [r0, #1]
 8011850:	6881      	ldr	r1, [r0, #8]
 8011852:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8011856:	f7fe fe09 	bl	801046c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801185a:	b002      	add	sp, #8
 801185c:	bd10      	pop	{r4, pc}
 801185e:	bf00      	nop
 8011860:	20003c38 	.word	0x20003c38
 8011864:	20003c30 	.word	0x20003c30

08011868 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8011868:	b510      	push	{r4, lr}
 801186a:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801186c:	2301      	movs	r3, #1
 801186e:	f8ad 3000 	strh.w	r3, [sp]
 8011872:	2300      	movs	r3, #0
 8011874:	f88d 3002 	strb.w	r3, [sp, #2]
 8011878:	9301      	str	r3, [sp, #4]
 801187a:	9302      	str	r3, [sp, #8]
 801187c:	9303      	str	r3, [sp, #12]
 801187e:	9304      	str	r3, [sp, #16]
 8011880:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8011884:	7b04      	ldrb	r4, [r0, #12]
 8011886:	b174      	cbz	r4, 80118a6 <RegionUS915InitDefaults+0x3e>
 8011888:	3c01      	subs	r4, #1
 801188a:	b2e4      	uxtb	r4, r4
 801188c:	2c01      	cmp	r4, #1
 801188e:	d87e      	bhi.n	801198e <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011890:	4b40      	ldr	r3, [pc, #256]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 8011892:	6818      	ldr	r0, [r3, #0]
 8011894:	2206      	movs	r2, #6
 8011896:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 801189a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801189e:	f7fe fdd6 	bl	801044e <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80118a2:	2300      	movs	r3, #0
 80118a4:	e071      	b.n	801198a <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80118a6:	6803      	ldr	r3, [r0, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d070      	beq.n	801198e <RegionUS915InitDefaults+0x126>
 80118ac:	6842      	ldr	r2, [r0, #4]
 80118ae:	2a00      	cmp	r2, #0
 80118b0:	d06d      	beq.n	801198e <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80118b2:	4939      	ldr	r1, [pc, #228]	; (8011998 <RegionUS915InitDefaults+0x130>)
 80118b4:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80118b6:	4937      	ldr	r1, [pc, #220]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 80118b8:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 80118ba:	6880      	ldr	r0, [r0, #8]
 80118bc:	4a37      	ldr	r2, [pc, #220]	; (801199c <RegionUS915InitDefaults+0x134>)
 80118be:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80118c0:	2200      	movs	r2, #0
 80118c2:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80118c4:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80118c6:	2218      	movs	r2, #24
 80118c8:	4669      	mov	r1, sp
 80118ca:	f001 fbba 	bl	8013042 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80118ce:	e011      	b.n	80118f4 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80118d0:	4b30      	ldr	r3, [pc, #192]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4932      	ldr	r1, [pc, #200]	; (80119a0 <RegionUS915InitDefaults+0x138>)
 80118d6:	4a33      	ldr	r2, [pc, #204]	; (80119a4 <RegionUS915InitDefaults+0x13c>)
 80118d8:	fb01 2204 	mla	r2, r1, r4, r2
 80118dc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80118e0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80118e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80118e8:	2230      	movs	r2, #48	; 0x30
 80118ea:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80118ec:	2200      	movs	r2, #0
 80118ee:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80118f0:	3401      	adds	r4, #1
 80118f2:	b2e4      	uxtb	r4, r4
 80118f4:	2c3f      	cmp	r4, #63	; 0x3f
 80118f6:	d9eb      	bls.n	80118d0 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80118f8:	2340      	movs	r3, #64	; 0x40
 80118fa:	2b47      	cmp	r3, #71	; 0x47
 80118fc:	d814      	bhi.n	8011928 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80118fe:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8011902:	4a24      	ldr	r2, [pc, #144]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 8011904:	6812      	ldr	r2, [r2, #0]
 8011906:	4c28      	ldr	r4, [pc, #160]	; (80119a8 <RegionUS915InitDefaults+0x140>)
 8011908:	4928      	ldr	r1, [pc, #160]	; (80119ac <RegionUS915InitDefaults+0x144>)
 801190a:	fb04 1100 	mla	r1, r4, r0, r1
 801190e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8011912:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8011916:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801191a:	2144      	movs	r1, #68	; 0x44
 801191c:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 801191e:	2100      	movs	r1, #0
 8011920:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8011922:	3301      	adds	r3, #1
 8011924:	b2db      	uxtb	r3, r3
 8011926:	e7e8      	b.n	80118fa <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8011928:	4c1a      	ldr	r4, [pc, #104]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 801192a:	6820      	ldr	r0, [r4, #0]
 801192c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011930:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8011934:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8011938:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801193c:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8011940:	23ff      	movs	r3, #255	; 0xff
 8011942:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8011946:	2300      	movs	r3, #0
 8011948:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801194c:	2206      	movs	r2, #6
 801194e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8011952:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011956:	f7fe fd7a 	bl	801044e <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801195a:	6821      	ldr	r1, [r4, #0]
 801195c:	2206      	movs	r2, #6
 801195e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011962:	4b0d      	ldr	r3, [pc, #52]	; (8011998 <RegionUS915InitDefaults+0x130>)
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	f7fe fd72 	bl	801044e <RegionCommonChanMaskCopy>
            break;
 801196a:	e010      	b.n	801198e <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801196c:	4a0a      	ldr	r2, [pc, #40]	; (8011998 <RegionUS915InitDefaults+0x130>)
 801196e:	6811      	ldr	r1, [r2, #0]
 8011970:	4a08      	ldr	r2, [pc, #32]	; (8011994 <RegionUS915InitDefaults+0x12c>)
 8011972:	6812      	ldr	r2, [r2, #0]
 8011974:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8011978:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 801197c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8011980:	4002      	ands	r2, r0
 8011982:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8011986:	3301      	adds	r3, #1
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b05      	cmp	r3, #5
 801198c:	d9ee      	bls.n	801196c <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801198e:	b006      	add	sp, #24
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop
 8011994:	20003c38 	.word	0x20003c38
 8011998:	20003c34 	.word	0x20003c34
 801199c:	20003c30 	.word	0x20003c30
 80119a0:	00030d40 	.word	0x00030d40
 80119a4:	35c80160 	.word	0x35c80160
 80119a8:	00186a00 	.word	0x00186a00
 80119ac:	35d2afc0 	.word	0x35d2afc0

080119b0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80119b0:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 80119b2:	290a      	cmp	r1, #10
 80119b4:	d833      	bhi.n	8011a1e <RegionUS915Verify+0x6e>
 80119b6:	e8df f001 	tbb	[pc, r1]
 80119ba:	3206      	.short	0x3206
 80119bc:	0a323232 	.word	0x0a323232
 80119c0:	28321e14 	.word	0x28321e14
 80119c4:	28          	.byte	0x28
 80119c5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80119c6:	6800      	ldr	r0, [r0, #0]
 80119c8:	f7ff fdf0 	bl	80115ac <VerifyRfFreq>
 80119cc:	e028      	b.n	8011a20 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80119ce:	2204      	movs	r2, #4
 80119d0:	2100      	movs	r1, #0
 80119d2:	f990 0000 	ldrsb.w	r0, [r0]
 80119d6:	f7fe fcc6 	bl	8010366 <RegionCommonValueInRange>
 80119da:	3800      	subs	r0, #0
 80119dc:	bf18      	it	ne
 80119de:	2001      	movne	r0, #1
 80119e0:	e01e      	b.n	8011a20 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80119e2:	2205      	movs	r2, #5
 80119e4:	2100      	movs	r1, #0
 80119e6:	f990 0000 	ldrsb.w	r0, [r0]
 80119ea:	f7fe fcbc 	bl	8010366 <RegionCommonValueInRange>
 80119ee:	3800      	subs	r0, #0
 80119f0:	bf18      	it	ne
 80119f2:	2001      	movne	r0, #1
 80119f4:	e014      	b.n	8011a20 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80119f6:	220d      	movs	r2, #13
 80119f8:	2108      	movs	r1, #8
 80119fa:	f990 0000 	ldrsb.w	r0, [r0]
 80119fe:	f7fe fcb2 	bl	8010366 <RegionCommonValueInRange>
 8011a02:	3800      	subs	r0, #0
 8011a04:	bf18      	it	ne
 8011a06:	2001      	movne	r0, #1
 8011a08:	e00a      	b.n	8011a20 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8011a0a:	220e      	movs	r2, #14
 8011a0c:	2100      	movs	r1, #0
 8011a0e:	f990 0000 	ldrsb.w	r0, [r0]
 8011a12:	f7fe fca8 	bl	8010366 <RegionCommonValueInRange>
 8011a16:	3800      	subs	r0, #0
 8011a18:	bf18      	it	ne
 8011a1a:	2001      	movne	r0, #1
 8011a1c:	e000      	b.n	8011a20 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 8011a1e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8011a20:	bd08      	pop	{r3, pc}
	...

08011a24 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8011a24:	7a03      	ldrb	r3, [r0, #8]
 8011a26:	2b10      	cmp	r3, #16
 8011a28:	d134      	bne.n	8011a94 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8011a2a:	6843      	ldr	r3, [r0, #4]
 8011a2c:	7bdb      	ldrb	r3, [r3, #15]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	d130      	bne.n	8011a94 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011a32:	2200      	movs	r2, #0
 8011a34:	4613      	mov	r3, r2
 8011a36:	2a04      	cmp	r2, #4
 8011a38:	d82b      	bhi.n	8011a92 <RegionUS915ApplyCFList+0x6e>
{
 8011a3a:	b530      	push	{r4, r5, lr}
 8011a3c:	e010      	b.n	8011a60 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8011a3e:	4916      	ldr	r1, [pc, #88]	; (8011a98 <RegionUS915ApplyCFList+0x74>)
 8011a40:	680d      	ldr	r5, [r1, #0]
 8011a42:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 8011a46:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8011a4a:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 8011a4e:	4021      	ands	r1, r4
 8011a50:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8011a54:	3301      	adds	r3, #1
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	3202      	adds	r2, #2
 8011a5a:	b2d2      	uxtb	r2, r2
 8011a5c:	2b04      	cmp	r3, #4
 8011a5e:	d817      	bhi.n	8011a90 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8011a60:	6841      	ldr	r1, [r0, #4]
 8011a62:	4c0e      	ldr	r4, [pc, #56]	; (8011a9c <RegionUS915ApplyCFList+0x78>)
 8011a64:	6824      	ldr	r4, [r4, #0]
 8011a66:	469c      	mov	ip, r3
 8011a68:	5c89      	ldrb	r1, [r1, r2]
 8011a6a:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8011a6e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8011a72:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011a76:	4496      	add	lr, r2
 8011a78:	f89e e001 	ldrb.w	lr, [lr, #1]
 8011a7c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8011a80:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	d1da      	bne.n	8011a3e <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8011a88:	b2c9      	uxtb	r1, r1
 8011a8a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8011a8e:	e7d6      	b.n	8011a3e <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8011a90:	bd30      	pop	{r4, r5, pc}
 8011a92:	4770      	bx	lr
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	20003c34 	.word	0x20003c34
 8011a9c:	20003c38 	.word	0x20003c38

08011aa0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011aa0:	b570      	push	{r4, r5, r6, lr}
 8011aa2:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8011aa4:	2204      	movs	r2, #4
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	6800      	ldr	r0, [r0, #0]
 8011aaa:	f7fe fcba 	bl	8010422 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8011aae:	2801      	cmp	r0, #1
 8011ab0:	d031      	beq.n	8011b16 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8011ab2:	792c      	ldrb	r4, [r5, #4]
 8011ab4:	b11c      	cbz	r4, 8011abe <RegionUS915ChanMaskSet+0x1e>
 8011ab6:	2c01      	cmp	r4, #1
 8011ab8:	d023      	beq.n	8011b02 <RegionUS915ChanMaskSet+0x62>
 8011aba:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8011abc:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8011abe:	4e17      	ldr	r6, [pc, #92]	; (8011b1c <RegionUS915ChanMaskSet+0x7c>)
 8011ac0:	6830      	ldr	r0, [r6, #0]
 8011ac2:	2206      	movs	r2, #6
 8011ac4:	6829      	ldr	r1, [r5, #0]
 8011ac6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011aca:	f7fe fcc0 	bl	801044e <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8011ace:	6830      	ldr	r0, [r6, #0]
 8011ad0:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 8011ad4:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8011ade:	e00c      	b.n	8011afa <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8011ae0:	4b0f      	ldr	r3, [pc, #60]	; (8011b20 <RegionUS915ChanMaskSet+0x80>)
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8011ae8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011aec:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8011af0:	400b      	ands	r3, r1
 8011af2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8011af6:	3401      	adds	r4, #1
 8011af8:	b2e4      	uxtb	r4, r4
 8011afa:	2c05      	cmp	r4, #5
 8011afc:	d9f0      	bls.n	8011ae0 <RegionUS915ChanMaskSet+0x40>
    return true;
 8011afe:	2001      	movs	r0, #1
 8011b00:	e7dc      	b.n	8011abc <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8011b02:	4b06      	ldr	r3, [pc, #24]	; (8011b1c <RegionUS915ChanMaskSet+0x7c>)
 8011b04:	6818      	ldr	r0, [r3, #0]
 8011b06:	2206      	movs	r2, #6
 8011b08:	6829      	ldr	r1, [r5, #0]
 8011b0a:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 8011b0e:	f7fe fc9e 	bl	801044e <RegionCommonChanMaskCopy>
    return true;
 8011b12:	2001      	movs	r0, #1
            break;
 8011b14:	e7d2      	b.n	8011abc <RegionUS915ChanMaskSet+0x1c>
        return false;
 8011b16:	2000      	movs	r0, #0
 8011b18:	e7d0      	b.n	8011abc <RegionUS915ChanMaskSet+0x1c>
 8011b1a:	bf00      	nop
 8011b1c:	20003c38 	.word	0x20003c38
 8011b20:	20003c34 	.word	0x20003c34

08011b24 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b26:	b083      	sub	sp, #12
 8011b28:	460e      	mov	r6, r1
 8011b2a:	4617      	mov	r7, r2
 8011b2c:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8011b2e:	280d      	cmp	r0, #13
 8011b30:	bfa8      	it	ge
 8011b32:	200d      	movge	r0, #13
 8011b34:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8011b36:	4d0f      	ldr	r5, [pc, #60]	; (8011b74 <RegionUS915ComputeRxWindowParameters+0x50>)
 8011b38:	4629      	mov	r1, r5
 8011b3a:	f7fe fee1 	bl	8010900 <RegionCommonGetBandwidth>
 8011b3e:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8011b40:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011b44:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011b48:	4a0b      	ldr	r2, [pc, #44]	; (8011b78 <RegionUS915ComputeRxWindowParameters+0x54>)
 8011b4a:	5cd0      	ldrb	r0, [r2, r3]
 8011b4c:	f7fe fda6 	bl	801069c <RegionCommonComputeSymbolTimeLoRa>
 8011b50:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011b52:	4b0a      	ldr	r3, [pc, #40]	; (8011b7c <RegionUS915ComputeRxWindowParameters+0x58>)
 8011b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b56:	4798      	blx	r3
 8011b58:	4603      	mov	r3, r0
 8011b5a:	f104 020c 	add.w	r2, r4, #12
 8011b5e:	9201      	str	r2, [sp, #4]
 8011b60:	3408      	adds	r4, #8
 8011b62:	9400      	str	r4, [sp, #0]
 8011b64:	463a      	mov	r2, r7
 8011b66:	4631      	mov	r1, r6
 8011b68:	4628      	mov	r0, r5
 8011b6a:	f7fe fda5 	bl	80106b8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8011b6e:	b003      	add	sp, #12
 8011b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b72:	bf00      	nop
 8011b74:	08016350 	.word	0x08016350
 8011b78:	080163a4 	.word	0x080163a4
 8011b7c:	08016960 	.word	0x08016960

08011b80 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b84:	b08b      	sub	sp, #44	; 0x2c
 8011b86:	4604      	mov	r4, r0
 8011b88:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8011b8a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8011b8e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011b90:	4b22      	ldr	r3, [pc, #136]	; (8011c1c <RegionUS915RxConfig+0x9c>)
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	4798      	blx	r3
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d13d      	bne.n	8011c16 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011b9a:	7ce3      	ldrb	r3, [r4, #19]
 8011b9c:	b933      	cbnz	r3, 8011bac <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8011b9e:	7823      	ldrb	r3, [r4, #0]
 8011ba0:	f003 0307 	and.w	r3, r3, #7
 8011ba4:	4a1e      	ldr	r2, [pc, #120]	; (8011c20 <RegionUS915RxConfig+0xa0>)
 8011ba6:	4f1f      	ldr	r7, [pc, #124]	; (8011c24 <RegionUS915RxConfig+0xa4>)
 8011ba8:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8011bac:	4b1e      	ldr	r3, [pc, #120]	; (8011c28 <RegionUS915RxConfig+0xa8>)
 8011bae:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8011bb2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8011c1c <RegionUS915RxConfig+0x9c>
 8011bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bba:	4638      	mov	r0, r7
 8011bbc:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011bbe:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8011bc2:	7ca3      	ldrb	r3, [r4, #18]
 8011bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8011bc6:	2001      	movs	r0, #1
 8011bc8:	9008      	str	r0, [sp, #32]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	9207      	str	r2, [sp, #28]
 8011bce:	9206      	str	r2, [sp, #24]
 8011bd0:	9205      	str	r2, [sp, #20]
 8011bd2:	9204      	str	r2, [sp, #16]
 8011bd4:	9203      	str	r2, [sp, #12]
 8011bd6:	8923      	ldrh	r3, [r4, #8]
 8011bd8:	9302      	str	r3, [sp, #8]
 8011bda:	2308      	movs	r3, #8
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	9200      	str	r2, [sp, #0]
 8011be0:	4603      	mov	r3, r0
 8011be2:	464a      	mov	r2, r9
 8011be4:	78a1      	ldrb	r1, [r4, #2]
 8011be6:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 8011be8:	7c63      	ldrb	r3, [r4, #17]
 8011bea:	b18b      	cbz	r3, 8011c10 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8011bec:	4b0f      	ldr	r3, [pc, #60]	; (8011c2c <RegionUS915RxConfig+0xac>)
 8011bee:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8011bf0:	4b0a      	ldr	r3, [pc, #40]	; (8011c1c <RegionUS915RxConfig+0x9c>)
 8011bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bf4:	310d      	adds	r1, #13
 8011bf6:	b2c9      	uxtb	r1, r1
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	4639      	mov	r1, r7
 8011c00:	7ce0      	ldrb	r0, [r4, #19]
 8011c02:	f7fe fe8f 	bl	8010924 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8011c06:	702e      	strb	r6, [r5, #0]
    return true;
 8011c08:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8011c0a:	b00b      	add	sp, #44	; 0x2c
 8011c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8011c10:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <RegionUS915RxConfig+0xb0>)
 8011c12:	5d99      	ldrb	r1, [r3, r6]
 8011c14:	e7ec      	b.n	8011bf0 <RegionUS915RxConfig+0x70>
        return false;
 8011c16:	2000      	movs	r0, #0
 8011c18:	e7f7      	b.n	8011c0a <RegionUS915RxConfig+0x8a>
 8011c1a:	bf00      	nop
 8011c1c:	08016960 	.word	0x08016960
 8011c20:	000927c0 	.word	0x000927c0
 8011c24:	370870a0 	.word	0x370870a0
 8011c28:	080163a4 	.word	0x080163a4
 8011c2c:	080163b4 	.word	0x080163b4
 8011c30:	080163c4 	.word	0x080163c4

08011c34 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c38:	b08d      	sub	sp, #52	; 0x34
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	468b      	mov	fp, r1
 8011c3e:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8011c40:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8011c44:	4b32      	ldr	r3, [pc, #200]	; (8011d10 <RegionUS915TxConfig+0xdc>)
 8011c46:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8011c4a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011d14 <RegionUS915TxConfig+0xe0>
 8011c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8011c52:	7801      	ldrb	r1, [r0, #0]
 8011c54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011c58:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011c5c:	7a49      	ldrb	r1, [r1, #9]
 8011c5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011c62:	482d      	ldr	r0, [pc, #180]	; (8011d18 <RegionUS915TxConfig+0xe4>)
 8011c64:	6800      	ldr	r0, [r0, #0]
 8011c66:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011c6a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011c6e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8011c72:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8011c76:	f7ff fce7 	bl	8011648 <LimitTxPower>
 8011c7a:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8011c7c:	4927      	ldr	r1, [pc, #156]	; (8011d1c <RegionUS915TxConfig+0xe8>)
 8011c7e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011c82:	f7fe fe3d 	bl	8010900 <RegionCommonGetBandwidth>
 8011c86:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8011c88:	2200      	movs	r2, #0
 8011c8a:	4925      	ldr	r1, [pc, #148]	; (8011d20 <RegionUS915TxConfig+0xec>)
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f7fe fd4f 	bl	8010730 <RegionCommonComputeTxPower>
 8011c92:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011c94:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8011d24 <RegionUS915TxConfig+0xf0>
 8011c98:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011c9c:	f8d9 1000 	ldr.w	r1, [r9]
 8011ca0:	7823      	ldrb	r3, [r4, #0]
 8011ca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ca6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8011caa:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8011cac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011cb0:	9308      	str	r3, [sp, #32]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	9207      	str	r2, [sp, #28]
 8011cb6:	9206      	str	r2, [sp, #24]
 8011cb8:	9205      	str	r2, [sp, #20]
 8011cba:	2501      	movs	r5, #1
 8011cbc:	9504      	str	r5, [sp, #16]
 8011cbe:	9203      	str	r2, [sp, #12]
 8011cc0:	2308      	movs	r3, #8
 8011cc2:	9302      	str	r3, [sp, #8]
 8011cc4:	9501      	str	r5, [sp, #4]
 8011cc6:	f8cd a000 	str.w	sl, [sp]
 8011cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cce:	4628      	mov	r0, r5
 8011cd0:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8011cd4:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8011cd6:	f8d9 2000 	ldr.w	r2, [r9]
 8011cda:	7823      	ldrb	r3, [r4, #0]
 8011cdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ce0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011ce4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011ce8:	f7fe fe3e 	bl	8010968 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8011cec:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8011cf0:	7b21      	ldrb	r1, [r4, #12]
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011cf6:	89a1      	ldrh	r1, [r4, #12]
 8011cf8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011cfc:	f7ff fc86 	bl	801160c <GetTimeOnAir>
 8011d00:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8011d02:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8011d06:	4628      	mov	r0, r5
 8011d08:	b00d      	add	sp, #52	; 0x34
 8011d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0e:	bf00      	nop
 8011d10:	080163a4 	.word	0x080163a4
 8011d14:	20003c38 	.word	0x20003c38
 8011d18:	20003c30 	.word	0x20003c30
 8011d1c:	08016350 	.word	0x08016350
 8011d20:	41f00000 	.word	0x41f00000
 8011d24:	08016960 	.word	0x08016960

08011d28 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d2c:	b091      	sub	sp, #68	; 0x44
 8011d2e:	4605      	mov	r5, r0
 8011d30:	4688      	mov	r8, r1
 8011d32:	4617      	mov	r7, r2
 8011d34:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011d36:	2400      	movs	r4, #0
 8011d38:	940e      	str	r4, [sp, #56]	; 0x38
 8011d3a:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8011d3e:	940b      	str	r4, [sp, #44]	; 0x2c
 8011d40:	940c      	str	r4, [sp, #48]	; 0x30
 8011d42:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011d44:	4b9c      	ldr	r3, [pc, #624]	; (8011fb8 <RegionUS915LinkAdrReq+0x290>)
 8011d46:	6819      	ldr	r1, [r3, #0]
 8011d48:	2206      	movs	r2, #6
 8011d4a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8011d4e:	a80b      	add	r0, sp, #44	; 0x2c
 8011d50:	f7fe fb7d 	bl	801044e <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011d54:	e00d      	b.n	8011d72 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8011d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d5a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8011d5e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8011d62:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8011d66:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011d6a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011d6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011d72:	7a2b      	ldrb	r3, [r5, #8]
 8011d74:	42a3      	cmp	r3, r4
 8011d76:	f240 808b 	bls.w	8011e90 <RegionUS915LinkAdrReq+0x168>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011d7a:	6868      	ldr	r0, [r5, #4]
 8011d7c:	a90e      	add	r1, sp, #56	; 0x38
 8011d7e:	4420      	add	r0, r4
 8011d80:	f7fe fc16 	bl	80105b0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011d84:	4603      	mov	r3, r0
 8011d86:	2800      	cmp	r0, #0
 8011d88:	f000 8082 	beq.w	8011e90 <RegionUS915LinkAdrReq+0x168>
        bytesProcessed += nextIndex;
 8011d8c:	4423      	add	r3, r4
 8011d8e:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 8011d90:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8011d94:	f1bc 0f06 	cmp.w	ip, #6
 8011d98:	d0dd      	beq.n	8011d56 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8011d9a:	f1bc 0f07 	cmp.w	ip, #7
 8011d9e:	d00a      	beq.n	8011db6 <RegionUS915LinkAdrReq+0x8e>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8011da0:	f1bc 0f05 	cmp.w	ip, #5
 8011da4:	d071      	beq.n	8011e8a <RegionUS915LinkAdrReq+0x162>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011da6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011daa:	aa10      	add	r2, sp, #64	; 0x40
 8011dac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8011db0:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8011db4:	e7dd      	b.n	8011d72 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8011db6:	2300      	movs	r3, #0
 8011db8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8011dbc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8011dc0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8011dc4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011dc8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011dcc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011dd0:	e7cf      	b.n	8011d72 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011dd2:	aa10      	add	r2, sp, #64	; 0x40
 8011dd4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011dd8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011ddc:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8011de0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011de4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011de8:	ea4c 0202 	orr.w	r2, ip, r2
 8011dec:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011df0:	3101      	adds	r1, #1
 8011df2:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8011df4:	3301      	adds	r3, #1
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	2b07      	cmp	r3, #7
 8011dfa:	d8ba      	bhi.n	8011d72 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011dfc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011e00:	f04f 0c01 	mov.w	ip, #1
 8011e04:	fa0c fc03 	lsl.w	ip, ip, r3
 8011e08:	ea12 0f0c 	tst.w	r2, ip
 8011e0c:	d012      	beq.n	8011e34 <RegionUS915LinkAdrReq+0x10c>
                    if( ( i % 2 ) == 0 )
 8011e0e:	f013 0f01 	tst.w	r3, #1
 8011e12:	d1de      	bne.n	8011dd2 <RegionUS915LinkAdrReq+0xaa>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011e14:	aa10      	add	r2, sp, #64	; 0x40
 8011e16:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011e1a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011e1e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8011e22:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011e26:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011e2a:	ea4c 0202 	orr.w	r2, ip, r2
 8011e2e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011e32:	e7df      	b.n	8011df4 <RegionUS915LinkAdrReq+0xcc>
                    if( ( i % 2 ) == 0 )
 8011e34:	f013 0f01 	tst.w	r3, #1
 8011e38:	d113      	bne.n	8011e62 <RegionUS915LinkAdrReq+0x13a>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8011e3a:	aa10      	add	r2, sp, #64	; 0x40
 8011e3c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011e40:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011e44:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011e48:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011e4c:	ea6f 0c0c 	mvn.w	ip, ip
 8011e50:	fa0f fc8c 	sxth.w	ip, ip
 8011e54:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011e58:	ea0c 0c02 	and.w	ip, ip, r2
 8011e5c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
 8011e60:	e7c8      	b.n	8011df4 <RegionUS915LinkAdrReq+0xcc>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8011e62:	aa10      	add	r2, sp, #64	; 0x40
 8011e64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8011e68:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8011e6c:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8011e70:	ea6f 0c0c 	mvn.w	ip, ip
 8011e74:	fa0f fc8c 	sxth.w	ip, ip
 8011e78:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011e7c:	ea0c 0c02 	and.w	ip, ip, r2
 8011e80:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                        cntChannelMask++;
 8011e84:	3101      	adds	r1, #1
 8011e86:	b2c9      	uxtb	r1, r1
 8011e88:	e7b4      	b.n	8011df4 <RegionUS915LinkAdrReq+0xcc>
            for( uint8_t i = 0; i <= 7; i++ )
 8011e8a:	2300      	movs	r3, #0
            uint8_t cntChannelMask = 0;
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	e7b3      	b.n	8011df8 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011e90:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	dd58      	ble.n	8011f4a <RegionUS915LinkAdrReq+0x222>
 8011e98:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011e9c:	2302      	movs	r3, #2
 8011e9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011ea2:	7a6b      	ldrb	r3, [r5, #9]
 8011ea4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8011ea8:	a809      	add	r0, sp, #36	; 0x24
 8011eaa:	f7ff fbe9 	bl	8011680 <RegionUS915GetPhyParam>
 8011eae:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8011eb0:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011eb4:	7aab      	ldrb	r3, [r5, #10]
 8011eb6:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011eba:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011ebe:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011ec2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011ec6:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011eca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011ece:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011ed2:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011ed6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011eda:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8011ede:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011ee2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011ee6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8011eea:	2348      	movs	r3, #72	; 0x48
 8011eec:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011ef0:	ab0b      	add	r3, sp, #44	; 0x2c
 8011ef2:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011ef4:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8011ef8:	2304      	movs	r3, #4
 8011efa:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011efe:	4b2e      	ldr	r3, [pc, #184]	; (8011fb8 <RegionUS915LinkAdrReq+0x290>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8011f04:	230e      	movs	r3, #14
 8011f06:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011f14:	ab0e      	add	r3, sp, #56	; 0x38
 8011f16:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011f1a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 8011f1e:	4668      	mov	r0, sp
 8011f20:	f7fe fb64 	bl	80105ec <RegionCommonLinkAdrReqVerifyParams>
 8011f24:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011f26:	2807      	cmp	r0, #7
 8011f28:	d01c      	beq.n	8011f64 <RegionUS915LinkAdrReq+0x23c>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011f2a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011f2e:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 8011f32:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011f36:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8011f38:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011f3c:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 8011f3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011f40:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 8011f42:	4628      	mov	r0, r5
 8011f44:	b011      	add	sp, #68	; 0x44
 8011f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011f4a:	2204      	movs	r2, #4
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	a80b      	add	r0, sp, #44	; 0x2c
 8011f50:	f7fe fa67 	bl	8010422 <RegionCommonCountChannels>
 8011f54:	2801      	cmp	r0, #1
 8011f56:	d902      	bls.n	8011f5e <RegionUS915LinkAdrReq+0x236>
 8011f58:	f04f 0907 	mov.w	r9, #7
 8011f5c:	e79e      	b.n	8011e9c <RegionUS915LinkAdrReq+0x174>
        status &= 0xFE; // Channel mask KO
 8011f5e:	f04f 0906 	mov.w	r9, #6
 8011f62:	e79b      	b.n	8011e9c <RegionUS915LinkAdrReq+0x174>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8011f64:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8011fb8 <RegionUS915LinkAdrReq+0x290>
 8011f68:	f8d9 0000 	ldr.w	r0, [r9]
 8011f6c:	2206      	movs	r2, #6
 8011f6e:	a90b      	add	r1, sp, #44	; 0x2c
 8011f70:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011f74:	f7fe fa6b 	bl	801044e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8011f78:	4b10      	ldr	r3, [pc, #64]	; (8011fbc <RegionUS915LinkAdrReq+0x294>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8011f80:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8011f84:	8818      	ldrh	r0, [r3, #0]
 8011f86:	4001      	ands	r1, r0
 8011f88:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8011f8a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8011f8e:	8858      	ldrh	r0, [r3, #2]
 8011f90:	4001      	ands	r1, r0
 8011f92:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8011f94:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8011f98:	8898      	ldrh	r0, [r3, #4]
 8011f9a:	4001      	ands	r1, r0
 8011f9c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8011f9e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8011fa2:	88d8      	ldrh	r0, [r3, #6]
 8011fa4:	4001      	ands	r1, r0
 8011fa6:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011fa8:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8011fac:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8011fae:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8011fb2:	815a      	strh	r2, [r3, #10]
 8011fb4:	e7b9      	b.n	8011f2a <RegionUS915LinkAdrReq+0x202>
 8011fb6:	bf00      	nop
 8011fb8:	20003c38 	.word	0x20003c38
 8011fbc:	20003c34 	.word	0x20003c34

08011fc0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011fc4:	6840      	ldr	r0, [r0, #4]
 8011fc6:	f7ff faf1 	bl	80115ac <VerifyRfFreq>
 8011fca:	b310      	cbz	r0, 8012012 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8011fcc:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8011fce:	220d      	movs	r2, #13
 8011fd0:	2108      	movs	r1, #8
 8011fd2:	f994 0000 	ldrsb.w	r0, [r4]
 8011fd6:	f7fe f9c6 	bl	8010366 <RegionCommonValueInRange>
 8011fda:	b908      	cbnz	r0, 8011fe0 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8011fdc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011fe0:	2207      	movs	r2, #7
 8011fe2:	2105      	movs	r1, #5
 8011fe4:	f994 0000 	ldrsb.w	r0, [r4]
 8011fe8:	f7fe f9bd 	bl	8010366 <RegionCommonValueInRange>
 8011fec:	2801      	cmp	r0, #1
 8011fee:	d003      	beq.n	8011ff8 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011ff0:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011ff4:	2b0d      	cmp	r3, #13
 8011ff6:	dd01      	ble.n	8011ffc <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8011ff8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8011ffc:	2203      	movs	r2, #3
 8011ffe:	2100      	movs	r1, #0
 8012000:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012004:	f7fe f9af 	bl	8010366 <RegionCommonValueInRange>
 8012008:	b908      	cbnz	r0, 801200e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801200a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 801200e:	4628      	mov	r0, r5
 8012010:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8012012:	2506      	movs	r5, #6
 8012014:	e7db      	b.n	8011fce <RegionUS915RxParamSetupReq+0xe>

08012016 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8012016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801201a:	4770      	bx	lr

0801201c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801201c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012020:	4770      	bx	lr

08012022 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8012022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012026:	4770      	bx	lr

08012028 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8012028:	b999      	cbnz	r1, 8012052 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801202a:	4b0e      	ldr	r3, [pc, #56]	; (8012064 <RegionUS915AlternateDr+0x3c>)
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	7b53      	ldrb	r3, [r2, #13]
 8012030:	3301      	adds	r3, #1
 8012032:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8012034:	4b0b      	ldr	r3, [pc, #44]	; (8012064 <RegionUS915AlternateDr+0x3c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	7b5a      	ldrb	r2, [r3, #13]
 801203a:	4b0b      	ldr	r3, [pc, #44]	; (8012068 <RegionUS915AlternateDr+0x40>)
 801203c:	fba3 1302 	umull	r1, r3, r3, r2
 8012040:	085b      	lsrs	r3, r3, #1
 8012042:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8012046:	1ad2      	subs	r2, r2, r3
 8012048:	f012 0fff 	tst.w	r2, #255	; 0xff
 801204c:	d007      	beq.n	801205e <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 801204e:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8012050:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 8012052:	4b04      	ldr	r3, [pc, #16]	; (8012064 <RegionUS915AlternateDr+0x3c>)
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	7b53      	ldrb	r3, [r2, #13]
 8012058:	3b01      	subs	r3, #1
 801205a:	7353      	strb	r3, [r2, #13]
 801205c:	e7ea      	b.n	8012034 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 801205e:	2004      	movs	r0, #4
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	20003c34 	.word	0x20003c34
 8012068:	38e38e39 	.word	0x38e38e39

0801206c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012070:	b0a4      	sub	sp, #144	; 0x90
 8012072:	4604      	mov	r4, r0
 8012074:	460e      	mov	r6, r1
 8012076:	4690      	mov	r8, r2
 8012078:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801207a:	2500      	movs	r5, #0
 801207c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8012080:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8012084:	9511      	str	r5, [sp, #68]	; 0x44
 8012086:	2244      	movs	r2, #68	; 0x44
 8012088:	4629      	mov	r1, r5
 801208a:	a812      	add	r0, sp, #72	; 0x48
 801208c:	f003 fb90 	bl	80157b0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8012090:	2204      	movs	r2, #4
 8012092:	4629      	mov	r1, r5
 8012094:	4b49      	ldr	r3, [pc, #292]	; (80121bc <RegionUS915NextChannel+0x150>)
 8012096:	6818      	ldr	r0, [r3, #0]
 8012098:	f7fe f9c3 	bl	8010422 <RegionCommonCountChannels>
 801209c:	2800      	cmp	r0, #0
 801209e:	d052      	beq.n	8012146 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 80120a0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80120a4:	2b03      	cmp	r3, #3
 80120a6:	dd08      	ble.n	80120ba <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 80120a8:	4b44      	ldr	r3, [pc, #272]	; (80121bc <RegionUS915NextChannel+0x150>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	7a1a      	ldrb	r2, [r3, #8]
 80120ae:	b922      	cbnz	r2, 80120ba <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80120b0:	4a43      	ldr	r2, [pc, #268]	; (80121c0 <RegionUS915NextChannel+0x154>)
 80120b2:	6812      	ldr	r2, [r2, #0]
 80120b4:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 80120b8:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80120ba:	7a63      	ldrb	r3, [r4, #9]
 80120bc:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80120c0:	7a23      	ldrb	r3, [r4, #8]
 80120c2:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80120c6:	4b3d      	ldr	r3, [pc, #244]	; (80121bc <RegionUS915NextChannel+0x150>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80120cc:	4b3c      	ldr	r3, [pc, #240]	; (80121c0 <RegionUS915NextChannel+0x154>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80120d2:	4b3c      	ldr	r3, [pc, #240]	; (80121c4 <RegionUS915NextChannel+0x158>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80120d8:	2348      	movs	r3, #72	; 0x48
 80120da:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 80120de:	2300      	movs	r3, #0
 80120e0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80120e6:	6863      	ldr	r3, [r4, #4]
 80120e8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80120ea:	7aa3      	ldrb	r3, [r4, #10]
 80120ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80120f0:	2301      	movs	r3, #1
 80120f2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80120f6:	ab03      	add	r3, sp, #12
 80120f8:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80120fa:	ab0c      	add	r3, sp, #48	; 0x30
 80120fc:	f104 020c 	add.w	r2, r4, #12
 8012100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012104:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8012108:	7d23      	ldrb	r3, [r4, #20]
 801210a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801210e:	8ae1      	ldrh	r1, [r4, #22]
 8012110:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8012114:	f7ff fa7a 	bl	801160c <GetTimeOnAir>
 8012118:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801211a:	f8cd 8004 	str.w	r8, [sp, #4]
 801211e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8012122:	9300      	str	r3, [sp, #0]
 8012124:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8012128:	aa11      	add	r2, sp, #68	; 0x44
 801212a:	4639      	mov	r1, r7
 801212c:	a809      	add	r0, sp, #36	; 0x24
 801212e:	f7fe fb7a 	bl	8010826 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8012132:	4605      	mov	r5, r0
 8012134:	2800      	cmp	r0, #0
 8012136:	d13c      	bne.n	80121b2 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 8012138:	7a63      	ldrb	r3, [r4, #9]
 801213a:	b98b      	cbnz	r3, 8012160 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801213c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012140:	b1db      	cbz	r3, 801217a <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8012142:	4603      	mov	r3, r0
 8012144:	e026      	b.n	8012194 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8012146:	4d1d      	ldr	r5, [pc, #116]	; (80121bc <RegionUS915NextChannel+0x150>)
 8012148:	4b1d      	ldr	r3, [pc, #116]	; (80121c0 <RegionUS915NextChannel+0x154>)
 801214a:	6819      	ldr	r1, [r3, #0]
 801214c:	2204      	movs	r2, #4
 801214e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8012152:	6828      	ldr	r0, [r5, #0]
 8012154:	f7fe f97b 	bl	801044e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012158:	682b      	ldr	r3, [r5, #0]
 801215a:	2200      	movs	r2, #0
 801215c:	731a      	strb	r2, [r3, #12]
 801215e:	e79f      	b.n	80120a0 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012160:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 8012164:	3901      	subs	r1, #1
 8012166:	f000 ff5f 	bl	8013028 <randr>
 801216a:	f100 0390 	add.w	r3, r0, #144	; 0x90
 801216e:	eb0d 0003 	add.w	r0, sp, r3
 8012172:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8012176:	7033      	strb	r3, [r6, #0]
 8012178:	e015      	b.n	80121a6 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801217a:	4b10      	ldr	r3, [pc, #64]	; (80121bc <RegionUS915NextChannel+0x150>)
 801217c:	6818      	ldr	r0, [r3, #0]
 801217e:	4632      	mov	r2, r6
 8012180:	f100 010c 	add.w	r1, r0, #12
 8012184:	f7fd ffd2 	bl	801012c <RegionBaseUSComputeNext125kHzJoinChannel>
 8012188:	2803      	cmp	r0, #3
 801218a:	d10c      	bne.n	80121a6 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801218c:	4605      	mov	r5, r0
 801218e:	e010      	b.n	80121b2 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8012190:	3301      	adds	r3, #1
 8012192:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012194:	4a09      	ldr	r2, [pc, #36]	; (80121bc <RegionUS915NextChannel+0x150>)
 8012196:	6812      	ldr	r2, [r2, #0]
 8012198:	7a10      	ldrb	r0, [r2, #8]
 801219a:	4118      	asrs	r0, r3
 801219c:	f010 0f01 	tst.w	r0, #1
 80121a0:	d0f6      	beq.n	8012190 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 80121a2:	3340      	adds	r3, #64	; 0x40
 80121a4:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80121a6:	2248      	movs	r2, #72	; 0x48
 80121a8:	7831      	ldrb	r1, [r6, #0]
 80121aa:	4b04      	ldr	r3, [pc, #16]	; (80121bc <RegionUS915NextChannel+0x150>)
 80121ac:	6818      	ldr	r0, [r3, #0]
 80121ae:	f7fe f91c 	bl	80103ea <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80121b2:	4628      	mov	r0, r5
 80121b4:	b024      	add	sp, #144	; 0x90
 80121b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121ba:	bf00      	nop
 80121bc:	20003c34 	.word	0x20003c34
 80121c0:	20003c38 	.word	0x20003c38
 80121c4:	20003c30 	.word	0x20003c30

080121c8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80121c8:	4b04      	ldr	r3, [pc, #16]	; (80121dc <RegionUS915ApplyDrOffset+0x14>)
 80121ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80121ce:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 80121d0:	2800      	cmp	r0, #0
 80121d2:	db01      	blt.n	80121d8 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 80121d4:	b2c0      	uxtb	r0, r0
 80121d6:	4770      	bx	lr
        datarate = DR_0;
 80121d8:	2000      	movs	r0, #0
 80121da:	e7fb      	b.n	80121d4 <RegionUS915ApplyDrOffset+0xc>
 80121dc:	08016390 	.word	0x08016390

080121e0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80121e0:	b510      	push	{r4, lr}
 80121e2:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80121e4:	2210      	movs	r2, #16
 80121e6:	2100      	movs	r1, #0
 80121e8:	30f1      	adds	r0, #241	; 0xf1
 80121ea:	f000 ff42 	bl	8013072 <memset1>
    ctx->M_n = 0;
 80121ee:	2100      	movs	r1, #0
 80121f0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80121f4:	22f0      	movs	r2, #240	; 0xf0
 80121f6:	4620      	mov	r0, r4
 80121f8:	f000 ff3b 	bl	8013072 <memset1>
}
 80121fc:	bd10      	pop	{r4, pc}

080121fe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80121fe:	b508      	push	{r3, lr}
 8012200:	4602      	mov	r2, r0
 8012202:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8012204:	2110      	movs	r1, #16
 8012206:	f000 fb3b 	bl	8012880 <lorawan_aes_set_key>
}
 801220a:	bd08      	pop	{r3, pc}

0801220c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 801220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012210:	b084      	sub	sp, #16
 8012212:	4604      	mov	r4, r0
 8012214:	460d      	mov	r5, r1
 8012216:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8012218:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 801221c:	2b00      	cmp	r3, #0
 801221e:	d054      	beq.n	80122ca <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8012220:	f1c3 0810 	rsb	r8, r3, #16
 8012224:	4647      	mov	r7, r8
 8012226:	4590      	cmp	r8, r2
 8012228:	bf28      	it	cs
 801222a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801222c:	f200 1001 	addw	r0, r0, #257	; 0x101
 8012230:	b2ba      	uxth	r2, r7
 8012232:	4418      	add	r0, r3
 8012234:	f000 ff05 	bl	8013042 <memcpy1>
        ctx->M_n += mlen;
 8012238:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801223c:	443b      	add	r3, r7
 801223e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8012242:	2b0f      	cmp	r3, #15
 8012244:	d94d      	bls.n	80122e2 <AES_CMAC_Update+0xd6>
 8012246:	45b0      	cmp	r8, r6
 8012248:	d24b      	bcs.n	80122e2 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 801224a:	2300      	movs	r3, #0
 801224c:	e008      	b.n	8012260 <AES_CMAC_Update+0x54>
 801224e:	18e2      	adds	r2, r4, r3
 8012250:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 8012254:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8012258:	4041      	eors	r1, r0
 801225a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 801225e:	3301      	adds	r3, #1
 8012260:	2b0f      	cmp	r3, #15
 8012262:	ddf4      	ble.n	801224e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012264:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8012268:	2210      	movs	r2, #16
 801226a:	4641      	mov	r1, r8
 801226c:	4668      	mov	r0, sp
 801226e:	f000 fee8 	bl	8013042 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8012272:	4622      	mov	r2, r4
 8012274:	4669      	mov	r1, sp
 8012276:	4668      	mov	r0, sp
 8012278:	f000 fb86 	bl	8012988 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801227c:	2210      	movs	r2, #16
 801227e:	4669      	mov	r1, sp
 8012280:	4640      	mov	r0, r8
 8012282:	f000 fede 	bl	8013042 <memcpy1>

        data += mlen;
 8012286:	443d      	add	r5, r7
        len -= mlen;
 8012288:	1bf6      	subs	r6, r6, r7
 801228a:	e01e      	b.n	80122ca <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 801228c:	eb04 0e03 	add.w	lr, r4, r3
 8012290:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8012294:	5cea      	ldrb	r2, [r5, r3]
 8012296:	ea8c 0c02 	eor.w	ip, ip, r2
 801229a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801229e:	3301      	adds	r3, #1
 80122a0:	2b0f      	cmp	r3, #15
 80122a2:	ddf3      	ble.n	801228c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80122a4:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 80122a8:	2210      	movs	r2, #16
 80122aa:	4639      	mov	r1, r7
 80122ac:	4668      	mov	r0, sp
 80122ae:	f000 fec8 	bl	8013042 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80122b2:	4622      	mov	r2, r4
 80122b4:	4669      	mov	r1, sp
 80122b6:	4668      	mov	r0, sp
 80122b8:	f000 fb66 	bl	8012988 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80122bc:	2210      	movs	r2, #16
 80122be:	4669      	mov	r1, sp
 80122c0:	4638      	mov	r0, r7
 80122c2:	f000 febe 	bl	8013042 <memcpy1>

        data += 16;
 80122c6:	3510      	adds	r5, #16
        len -= 16;
 80122c8:	3e10      	subs	r6, #16
    while( len > 16 )
 80122ca:	2e10      	cmp	r6, #16
 80122cc:	d901      	bls.n	80122d2 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 80122ce:	2300      	movs	r3, #0
 80122d0:	e7e6      	b.n	80122a0 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80122d2:	b2b2      	uxth	r2, r6
 80122d4:	4629      	mov	r1, r5
 80122d6:	f204 1001 	addw	r0, r4, #257	; 0x101
 80122da:	f000 feb2 	bl	8013042 <memcpy1>
    ctx->M_n = len;
 80122de:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 80122e2:	b004      	add	sp, #16
 80122e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122e8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80122e8:	b530      	push	{r4, r5, lr}
 80122ea:	b089      	sub	sp, #36	; 0x24
 80122ec:	4605      	mov	r5, r0
 80122ee:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80122f0:	2210      	movs	r2, #16
 80122f2:	2100      	movs	r1, #0
 80122f4:	eb0d 0002 	add.w	r0, sp, r2
 80122f8:	f000 febb 	bl	8013072 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80122fc:	4622      	mov	r2, r4
 80122fe:	a904      	add	r1, sp, #16
 8012300:	4608      	mov	r0, r1
 8012302:	f000 fb41 	bl	8012988 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8012306:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801230a:	2b00      	cmp	r3, #0
 801230c:	db01      	blt.n	8012312 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801230e:	2300      	movs	r3, #0
 8012310:	e030      	b.n	8012374 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8012312:	2300      	movs	r3, #0
 8012314:	2b0e      	cmp	r3, #14
 8012316:	dc11      	bgt.n	801233c <AES_CMAC_Final+0x54>
 8012318:	f103 0220 	add.w	r2, r3, #32
 801231c:	eb0d 0102 	add.w	r1, sp, r2
 8012320:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8012324:	3301      	adds	r3, #1
 8012326:	f103 0220 	add.w	r2, r3, #32
 801232a:	446a      	add	r2, sp
 801232c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012330:	09d2      	lsrs	r2, r2, #7
 8012332:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012336:	f801 2c10 	strb.w	r2, [r1, #-16]
 801233a:	e7eb      	b.n	8012314 <AES_CMAC_Final+0x2c>
 801233c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	b2db      	uxtb	r3, r3
 8012344:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8012348:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801234c:	f88d 301f 	strb.w	r3, [sp, #31]
 8012350:	e017      	b.n	8012382 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8012352:	f103 0220 	add.w	r2, r3, #32
 8012356:	eb0d 0102 	add.w	r1, sp, r2
 801235a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 801235e:	3301      	adds	r3, #1
 8012360:	f103 0220 	add.w	r2, r3, #32
 8012364:	446a      	add	r2, sp
 8012366:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801236a:	09d2      	lsrs	r2, r2, #7
 801236c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012370:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012374:	2b0e      	cmp	r3, #14
 8012376:	ddec      	ble.n	8012352 <AES_CMAC_Final+0x6a>
 8012378:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8012382:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8012386:	2810      	cmp	r0, #16
 8012388:	d014      	beq.n	80123b4 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801238a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	db30      	blt.n	80123f4 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8012392:	2300      	movs	r3, #0
 8012394:	e041      	b.n	801241a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8012396:	18e1      	adds	r1, r4, r3
 8012398:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801239c:	f103 0020 	add.w	r0, r3, #32
 80123a0:	4468      	add	r0, sp
 80123a2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80123a6:	4042      	eors	r2, r0
 80123a8:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80123ac:	3301      	adds	r3, #1
 80123ae:	2b0f      	cmp	r3, #15
 80123b0:	ddf1      	ble.n	8012396 <AES_CMAC_Final+0xae>
 80123b2:	e059      	b.n	8012468 <AES_CMAC_Final+0x180>
 80123b4:	2300      	movs	r3, #0
 80123b6:	e7fa      	b.n	80123ae <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 80123b8:	f103 0220 	add.w	r2, r3, #32
 80123bc:	eb0d 0102 	add.w	r1, sp, r2
 80123c0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80123c4:	3301      	adds	r3, #1
 80123c6:	f103 0220 	add.w	r2, r3, #32
 80123ca:	446a      	add	r2, sp
 80123cc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80123d0:	09d2      	lsrs	r2, r2, #7
 80123d2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80123d6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80123da:	2b0e      	cmp	r3, #14
 80123dc:	ddec      	ble.n	80123b8 <AES_CMAC_Final+0xd0>
 80123de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80123ea:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80123ee:	f88d 301f 	strb.w	r3, [sp, #31]
 80123f2:	e019      	b.n	8012428 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80123f4:	2300      	movs	r3, #0
 80123f6:	e7f0      	b.n	80123da <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80123f8:	f103 0220 	add.w	r2, r3, #32
 80123fc:	eb0d 0102 	add.w	r1, sp, r2
 8012400:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012404:	3301      	adds	r3, #1
 8012406:	f103 0220 	add.w	r2, r3, #32
 801240a:	446a      	add	r2, sp
 801240c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012410:	09d2      	lsrs	r2, r2, #7
 8012412:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012416:	f801 2c10 	strb.w	r2, [r1, #-16]
 801241a:	2b0e      	cmp	r3, #14
 801241c:	ddec      	ble.n	80123f8 <AES_CMAC_Final+0x110>
 801241e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8012428:	4420      	add	r0, r4
 801242a:	2380      	movs	r3, #128	; 0x80
 801242c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8012430:	e003      	b.n	801243a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8012432:	4423      	add	r3, r4
 8012434:	2200      	movs	r2, #0
 8012436:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 801243a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 801243e:	3301      	adds	r3, #1
 8012440:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8012444:	2b0f      	cmp	r3, #15
 8012446:	d9f4      	bls.n	8012432 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8012448:	2300      	movs	r3, #0
 801244a:	e00b      	b.n	8012464 <AES_CMAC_Final+0x17c>
 801244c:	18e1      	adds	r1, r4, r3
 801244e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8012452:	f103 0020 	add.w	r0, r3, #32
 8012456:	4468      	add	r0, sp
 8012458:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801245c:	4042      	eors	r2, r0
 801245e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8012462:	3301      	adds	r3, #1
 8012464:	2b0f      	cmp	r3, #15
 8012466:	ddf1      	ble.n	801244c <AES_CMAC_Final+0x164>
 8012468:	2300      	movs	r3, #0
 801246a:	e009      	b.n	8012480 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 801246c:	18e2      	adds	r2, r4, r3
 801246e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8012472:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8012476:	ea8c 0c01 	eor.w	ip, ip, r1
 801247a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 801247e:	3301      	adds	r3, #1
 8012480:	2b0f      	cmp	r3, #15
 8012482:	ddf3      	ble.n	801246c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012484:	2210      	movs	r2, #16
 8012486:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 801248a:	4668      	mov	r0, sp
 801248c:	f000 fdd9 	bl	8013042 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8012490:	4622      	mov	r2, r4
 8012492:	4629      	mov	r1, r5
 8012494:	4668      	mov	r0, sp
 8012496:	f000 fa77 	bl	8012988 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801249a:	2210      	movs	r2, #16
 801249c:	2100      	movs	r1, #0
 801249e:	eb0d 0002 	add.w	r0, sp, r2
 80124a2:	f000 fde6 	bl	8013072 <memset1>
}
 80124a6:	b009      	add	sp, #36	; 0x24
 80124a8:	bd30      	pop	{r4, r5, pc}

080124aa <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80124aa:	780b      	ldrb	r3, [r1, #0]
 80124ac:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80124ae:	784b      	ldrb	r3, [r1, #1]
 80124b0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80124b2:	788b      	ldrb	r3, [r1, #2]
 80124b4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80124b6:	78cb      	ldrb	r3, [r1, #3]
 80124b8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80124ba:	790b      	ldrb	r3, [r1, #4]
 80124bc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 80124be:	794b      	ldrb	r3, [r1, #5]
 80124c0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 80124c2:	798b      	ldrb	r3, [r1, #6]
 80124c4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 80124c6:	79cb      	ldrb	r3, [r1, #7]
 80124c8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 80124ca:	7a0b      	ldrb	r3, [r1, #8]
 80124cc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 80124ce:	7a4b      	ldrb	r3, [r1, #9]
 80124d0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 80124d2:	7a8b      	ldrb	r3, [r1, #10]
 80124d4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 80124d6:	7acb      	ldrb	r3, [r1, #11]
 80124d8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80124da:	7b0b      	ldrb	r3, [r1, #12]
 80124dc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80124de:	7b4b      	ldrb	r3, [r1, #13]
 80124e0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80124e2:	7b8b      	ldrb	r3, [r1, #14]
 80124e4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80124e6:	7bcb      	ldrb	r3, [r1, #15]
 80124e8:	73c3      	strb	r3, [r0, #15]
#endif
}
 80124ea:	4770      	bx	lr

080124ec <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80124ec:	e004      	b.n	80124f8 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80124ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80124f2:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80124f6:	461a      	mov	r2, r3
 80124f8:	1e53      	subs	r3, r2, #1
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	2a00      	cmp	r2, #0
 80124fe:	d1f6      	bne.n	80124ee <copy_block_nn+0x2>
}
 8012500:	4770      	bx	lr

08012502 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8012502:	780b      	ldrb	r3, [r1, #0]
 8012504:	7802      	ldrb	r2, [r0, #0]
 8012506:	4053      	eors	r3, r2
 8012508:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801250a:	784b      	ldrb	r3, [r1, #1]
 801250c:	7842      	ldrb	r2, [r0, #1]
 801250e:	4053      	eors	r3, r2
 8012510:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8012512:	788b      	ldrb	r3, [r1, #2]
 8012514:	7882      	ldrb	r2, [r0, #2]
 8012516:	4053      	eors	r3, r2
 8012518:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801251a:	78cb      	ldrb	r3, [r1, #3]
 801251c:	78c2      	ldrb	r2, [r0, #3]
 801251e:	4053      	eors	r3, r2
 8012520:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8012522:	790b      	ldrb	r3, [r1, #4]
 8012524:	7902      	ldrb	r2, [r0, #4]
 8012526:	4053      	eors	r3, r2
 8012528:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801252a:	794b      	ldrb	r3, [r1, #5]
 801252c:	7942      	ldrb	r2, [r0, #5]
 801252e:	4053      	eors	r3, r2
 8012530:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8012532:	798b      	ldrb	r3, [r1, #6]
 8012534:	7982      	ldrb	r2, [r0, #6]
 8012536:	4053      	eors	r3, r2
 8012538:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 801253a:	79cb      	ldrb	r3, [r1, #7]
 801253c:	79c2      	ldrb	r2, [r0, #7]
 801253e:	4053      	eors	r3, r2
 8012540:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8012542:	7a0b      	ldrb	r3, [r1, #8]
 8012544:	7a02      	ldrb	r2, [r0, #8]
 8012546:	4053      	eors	r3, r2
 8012548:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 801254a:	7a4b      	ldrb	r3, [r1, #9]
 801254c:	7a42      	ldrb	r2, [r0, #9]
 801254e:	4053      	eors	r3, r2
 8012550:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8012552:	7a8b      	ldrb	r3, [r1, #10]
 8012554:	7a82      	ldrb	r2, [r0, #10]
 8012556:	4053      	eors	r3, r2
 8012558:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 801255a:	7acb      	ldrb	r3, [r1, #11]
 801255c:	7ac2      	ldrb	r2, [r0, #11]
 801255e:	4053      	eors	r3, r2
 8012560:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8012562:	7b0b      	ldrb	r3, [r1, #12]
 8012564:	7b02      	ldrb	r2, [r0, #12]
 8012566:	4053      	eors	r3, r2
 8012568:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801256a:	7b4b      	ldrb	r3, [r1, #13]
 801256c:	7b42      	ldrb	r2, [r0, #13]
 801256e:	4053      	eors	r3, r2
 8012570:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8012572:	7b8b      	ldrb	r3, [r1, #14]
 8012574:	7b82      	ldrb	r2, [r0, #14]
 8012576:	4053      	eors	r3, r2
 8012578:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 801257a:	7bcb      	ldrb	r3, [r1, #15]
 801257c:	7bc2      	ldrb	r2, [r0, #15]
 801257e:	4053      	eors	r3, r2
 8012580:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012582:	4770      	bx	lr

08012584 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8012584:	780b      	ldrb	r3, [r1, #0]
 8012586:	f892 c000 	ldrb.w	ip, [r2]
 801258a:	ea83 030c 	eor.w	r3, r3, ip
 801258e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8012590:	784b      	ldrb	r3, [r1, #1]
 8012592:	f892 c001 	ldrb.w	ip, [r2, #1]
 8012596:	ea83 030c 	eor.w	r3, r3, ip
 801259a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801259c:	788b      	ldrb	r3, [r1, #2]
 801259e:	f892 c002 	ldrb.w	ip, [r2, #2]
 80125a2:	ea83 030c 	eor.w	r3, r3, ip
 80125a6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80125a8:	78cb      	ldrb	r3, [r1, #3]
 80125aa:	f892 c003 	ldrb.w	ip, [r2, #3]
 80125ae:	ea83 030c 	eor.w	r3, r3, ip
 80125b2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80125b4:	790b      	ldrb	r3, [r1, #4]
 80125b6:	f892 c004 	ldrb.w	ip, [r2, #4]
 80125ba:	ea83 030c 	eor.w	r3, r3, ip
 80125be:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80125c0:	794b      	ldrb	r3, [r1, #5]
 80125c2:	f892 c005 	ldrb.w	ip, [r2, #5]
 80125c6:	ea83 030c 	eor.w	r3, r3, ip
 80125ca:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 80125cc:	798b      	ldrb	r3, [r1, #6]
 80125ce:	f892 c006 	ldrb.w	ip, [r2, #6]
 80125d2:	ea83 030c 	eor.w	r3, r3, ip
 80125d6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80125d8:	79cb      	ldrb	r3, [r1, #7]
 80125da:	f892 c007 	ldrb.w	ip, [r2, #7]
 80125de:	ea83 030c 	eor.w	r3, r3, ip
 80125e2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80125e4:	7a0b      	ldrb	r3, [r1, #8]
 80125e6:	f892 c008 	ldrb.w	ip, [r2, #8]
 80125ea:	ea83 030c 	eor.w	r3, r3, ip
 80125ee:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80125f0:	7a4b      	ldrb	r3, [r1, #9]
 80125f2:	f892 c009 	ldrb.w	ip, [r2, #9]
 80125f6:	ea83 030c 	eor.w	r3, r3, ip
 80125fa:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80125fc:	7a8b      	ldrb	r3, [r1, #10]
 80125fe:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8012602:	ea83 030c 	eor.w	r3, r3, ip
 8012606:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012608:	7acb      	ldrb	r3, [r1, #11]
 801260a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 801260e:	ea83 030c 	eor.w	r3, r3, ip
 8012612:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8012614:	7b0b      	ldrb	r3, [r1, #12]
 8012616:	f892 c00c 	ldrb.w	ip, [r2, #12]
 801261a:	ea83 030c 	eor.w	r3, r3, ip
 801261e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8012620:	7b4b      	ldrb	r3, [r1, #13]
 8012622:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012626:	ea83 030c 	eor.w	r3, r3, ip
 801262a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801262c:	7b8b      	ldrb	r3, [r1, #14]
 801262e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8012632:	ea83 030c 	eor.w	r3, r3, ip
 8012636:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8012638:	7bcb      	ldrb	r3, [r1, #15]
 801263a:	7bd2      	ldrb	r2, [r2, #15]
 801263c:	4053      	eors	r3, r2
 801263e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8012640:	4770      	bx	lr

08012642 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8012642:	b508      	push	{r3, lr}
    xor_block(d, k);
 8012644:	f7ff ff5d 	bl	8012502 <xor_block>
}
 8012648:	bd08      	pop	{r3, pc}
	...

0801264c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 801264c:	7802      	ldrb	r2, [r0, #0]
 801264e:	4b18      	ldr	r3, [pc, #96]	; (80126b0 <shift_sub_rows+0x64>)
 8012650:	5c9a      	ldrb	r2, [r3, r2]
 8012652:	7002      	strb	r2, [r0, #0]
 8012654:	7902      	ldrb	r2, [r0, #4]
 8012656:	5c9a      	ldrb	r2, [r3, r2]
 8012658:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 801265a:	7a02      	ldrb	r2, [r0, #8]
 801265c:	5c9a      	ldrb	r2, [r3, r2]
 801265e:	7202      	strb	r2, [r0, #8]
 8012660:	7b02      	ldrb	r2, [r0, #12]
 8012662:	5c9a      	ldrb	r2, [r3, r2]
 8012664:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8012666:	7842      	ldrb	r2, [r0, #1]
 8012668:	7941      	ldrb	r1, [r0, #5]
 801266a:	5c59      	ldrb	r1, [r3, r1]
 801266c:	7041      	strb	r1, [r0, #1]
 801266e:	7a41      	ldrb	r1, [r0, #9]
 8012670:	5c59      	ldrb	r1, [r3, r1]
 8012672:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8012674:	7b41      	ldrb	r1, [r0, #13]
 8012676:	5c59      	ldrb	r1, [r3, r1]
 8012678:	7241      	strb	r1, [r0, #9]
 801267a:	5c9a      	ldrb	r2, [r3, r2]
 801267c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 801267e:	7882      	ldrb	r2, [r0, #2]
 8012680:	7a81      	ldrb	r1, [r0, #10]
 8012682:	5c59      	ldrb	r1, [r3, r1]
 8012684:	7081      	strb	r1, [r0, #2]
 8012686:	5c9a      	ldrb	r2, [r3, r2]
 8012688:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 801268a:	7982      	ldrb	r2, [r0, #6]
 801268c:	7b81      	ldrb	r1, [r0, #14]
 801268e:	5c59      	ldrb	r1, [r3, r1]
 8012690:	7181      	strb	r1, [r0, #6]
 8012692:	5c9a      	ldrb	r2, [r3, r2]
 8012694:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8012696:	7bc2      	ldrb	r2, [r0, #15]
 8012698:	7ac1      	ldrb	r1, [r0, #11]
 801269a:	5c59      	ldrb	r1, [r3, r1]
 801269c:	73c1      	strb	r1, [r0, #15]
 801269e:	79c1      	ldrb	r1, [r0, #7]
 80126a0:	5c59      	ldrb	r1, [r3, r1]
 80126a2:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80126a4:	78c1      	ldrb	r1, [r0, #3]
 80126a6:	5c59      	ldrb	r1, [r3, r1]
 80126a8:	71c1      	strb	r1, [r0, #7]
 80126aa:	5c9b      	ldrb	r3, [r3, r2]
 80126ac:	70c3      	strb	r3, [r0, #3]
}
 80126ae:	4770      	bx	lr
 80126b0:	080165d4 	.word	0x080165d4

080126b4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 80126b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126b8:	b084      	sub	sp, #16
 80126ba:	4604      	mov	r4, r0
    block_copy(st, dt);
 80126bc:	4601      	mov	r1, r0
 80126be:	4668      	mov	r0, sp
 80126c0:	f7ff fef3 	bl	80124aa <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80126c4:	f89d c000 	ldrb.w	ip, [sp]
 80126c8:	4b6a      	ldr	r3, [pc, #424]	; (8012874 <mix_sub_columns+0x1c0>)
 80126ca:	f813 000c 	ldrb.w	r0, [r3, ip]
 80126ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80126d2:	4a69      	ldr	r2, [pc, #420]	; (8012878 <mix_sub_columns+0x1c4>)
 80126d4:	f812 9008 	ldrb.w	r9, [r2, r8]
 80126d8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 80126dc:	4967      	ldr	r1, [pc, #412]	; (801287c <mix_sub_columns+0x1c8>)
 80126de:	f811 500e 	ldrb.w	r5, [r1, lr]
 80126e2:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80126e6:	5dce      	ldrb	r6, [r1, r7]
 80126e8:	ea80 0009 	eor.w	r0, r0, r9
 80126ec:	4068      	eors	r0, r5
 80126ee:	4070      	eors	r0, r6
 80126f0:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80126f2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80126f6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80126fa:	f812 900e 	ldrb.w	r9, [r2, lr]
 80126fe:	ea80 0a0a 	eor.w	sl, r0, sl
 8012702:	ea89 090a 	eor.w	r9, r9, sl
 8012706:	ea86 0609 	eor.w	r6, r6, r9
 801270a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801270c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012710:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012714:	5dd6      	ldrb	r6, [r2, r7]
 8012716:	ea80 0008 	eor.w	r0, r0, r8
 801271a:	ea8e 0000 	eor.w	r0, lr, r0
 801271e:	4070      	eors	r0, r6
 8012720:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8012722:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012726:	5dd8      	ldrb	r0, [r3, r7]
 8012728:	ea86 0608 	eor.w	r6, r6, r8
 801272c:	4075      	eors	r5, r6
 801272e:	4068      	eors	r0, r5
 8012730:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8012732:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012736:	f813 000c 	ldrb.w	r0, [r3, ip]
 801273a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801273e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012742:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8012746:	f811 500e 	ldrb.w	r5, [r1, lr]
 801274a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801274e:	5dce      	ldrb	r6, [r1, r7]
 8012750:	ea80 0009 	eor.w	r0, r0, r9
 8012754:	4068      	eors	r0, r5
 8012756:	4070      	eors	r0, r6
 8012758:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801275a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801275e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012762:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012766:	ea80 0a0a 	eor.w	sl, r0, sl
 801276a:	ea89 090a 	eor.w	r9, r9, sl
 801276e:	ea86 0609 	eor.w	r6, r6, r9
 8012772:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8012774:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012778:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801277c:	5dd6      	ldrb	r6, [r2, r7]
 801277e:	ea80 0008 	eor.w	r0, r0, r8
 8012782:	ea8e 0000 	eor.w	r0, lr, r0
 8012786:	4070      	eors	r0, r6
 8012788:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 801278a:	f812 600c 	ldrb.w	r6, [r2, ip]
 801278e:	5dd8      	ldrb	r0, [r3, r7]
 8012790:	ea86 0608 	eor.w	r6, r6, r8
 8012794:	4075      	eors	r5, r6
 8012796:	4068      	eors	r0, r5
 8012798:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 801279a:	f89d c008 	ldrb.w	ip, [sp, #8]
 801279e:	f813 000c 	ldrb.w	r0, [r3, ip]
 80127a2:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80127a6:	f812 9008 	ldrb.w	r9, [r2, r8]
 80127aa:	f89d e002 	ldrb.w	lr, [sp, #2]
 80127ae:	f811 500e 	ldrb.w	r5, [r1, lr]
 80127b2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80127b6:	5dce      	ldrb	r6, [r1, r7]
 80127b8:	ea80 0009 	eor.w	r0, r0, r9
 80127bc:	4068      	eors	r0, r5
 80127be:	4070      	eors	r0, r6
 80127c0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80127c2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80127c6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80127ca:	f812 900e 	ldrb.w	r9, [r2, lr]
 80127ce:	ea80 0a0a 	eor.w	sl, r0, sl
 80127d2:	ea89 090a 	eor.w	r9, r9, sl
 80127d6:	ea86 0609 	eor.w	r6, r6, r9
 80127da:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80127dc:	f811 8008 	ldrb.w	r8, [r1, r8]
 80127e0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80127e4:	5dd6      	ldrb	r6, [r2, r7]
 80127e6:	ea80 0008 	eor.w	r0, r0, r8
 80127ea:	ea8e 0000 	eor.w	r0, lr, r0
 80127ee:	4070      	eors	r0, r6
 80127f0:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80127f2:	f812 600c 	ldrb.w	r6, [r2, ip]
 80127f6:	5dd8      	ldrb	r0, [r3, r7]
 80127f8:	ea86 0608 	eor.w	r6, r6, r8
 80127fc:	4075      	eors	r5, r6
 80127fe:	4068      	eors	r0, r5
 8012800:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8012802:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8012806:	5d98      	ldrb	r0, [r3, r6]
 8012808:	f89d 8001 	ldrb.w	r8, [sp, #1]
 801280c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012810:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8012814:	f811 c007 	ldrb.w	ip, [r1, r7]
 8012818:	f89d 500b 	ldrb.w	r5, [sp, #11]
 801281c:	f811 e005 	ldrb.w	lr, [r1, r5]
 8012820:	ea80 0009 	eor.w	r0, r0, r9
 8012824:	ea8c 0000 	eor.w	r0, ip, r0
 8012828:	ea8e 0000 	eor.w	r0, lr, r0
 801282c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801282e:	5d88      	ldrb	r0, [r1, r6]
 8012830:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012834:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012838:	ea80 0a0a 	eor.w	sl, r0, sl
 801283c:	ea89 090a 	eor.w	r9, r9, sl
 8012840:	ea8e 0e09 	eor.w	lr, lr, r9
 8012844:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8012848:	f811 1008 	ldrb.w	r1, [r1, r8]
 801284c:	f813 e007 	ldrb.w	lr, [r3, r7]
 8012850:	5d57      	ldrb	r7, [r2, r5]
 8012852:	4048      	eors	r0, r1
 8012854:	ea8e 0000 	eor.w	r0, lr, r0
 8012858:	4078      	eors	r0, r7
 801285a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801285c:	5d92      	ldrb	r2, [r2, r6]
 801285e:	5d5b      	ldrb	r3, [r3, r5]
 8012860:	4051      	eors	r1, r2
 8012862:	ea8c 0c01 	eor.w	ip, ip, r1
 8012866:	ea83 030c 	eor.w	r3, r3, ip
 801286a:	73e3      	strb	r3, [r4, #15]
  }
 801286c:	b004      	add	sp, #16
 801286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012872:	bf00      	nop
 8012874:	080163d4 	.word	0x080163d4
 8012878:	080164d4 	.word	0x080164d4
 801287c:	080165d4 	.word	0x080165d4

08012880 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8012880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012884:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8012886:	f1a1 0310 	sub.w	r3, r1, #16
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b10      	cmp	r3, #16
 801288e:	d806      	bhi.n	801289e <lorawan_aes_set_key+0x1e>
 8012890:	460d      	mov	r5, r1
 8012892:	4a3b      	ldr	r2, [pc, #236]	; (8012980 <lorawan_aes_set_key+0x100>)
 8012894:	fa22 f303 	lsr.w	r3, r2, r3
 8012898:	f013 0f01 	tst.w	r3, #1
 801289c:	d105      	bne.n	80128aa <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 801289e:	2300      	movs	r3, #0
 80128a0:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 80128a4:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80128a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 80128aa:	460a      	mov	r2, r1
 80128ac:	4601      	mov	r1, r0
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7ff fe1c 	bl	80124ec <copy_block_nn>
    hi = (keylen + 28) << 2;
 80128b4:	f105 031c 	add.w	r3, r5, #28
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80128c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80128c4:	3b01      	subs	r3, #1
 80128c6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80128ca:	462b      	mov	r3, r5
 80128cc:	f04f 0c01 	mov.w	ip, #1
 80128d0:	e023      	b.n	801291a <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 80128d2:	2d18      	cmp	r5, #24
 80128d4:	d901      	bls.n	80128da <lorawan_aes_set_key+0x5a>
 80128d6:	2a10      	cmp	r2, #16
 80128d8:	d048      	beq.n	801296c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 80128da:	1b5a      	subs	r2, r3, r5
 80128dc:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80128de:	f814 9002 	ldrb.w	r9, [r4, r2]
 80128e2:	ea89 0808 	eor.w	r8, r9, r8
 80128e6:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80128ea:	f102 0801 	add.w	r8, r2, #1
 80128ee:	f814 8008 	ldrb.w	r8, [r4, r8]
 80128f2:	f100 0901 	add.w	r9, r0, #1
 80128f6:	ea88 0707 	eor.w	r7, r8, r7
 80128fa:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80128fe:	1c97      	adds	r7, r2, #2
 8012900:	5de7      	ldrb	r7, [r4, r7]
 8012902:	f100 0802 	add.w	r8, r0, #2
 8012906:	407e      	eors	r6, r7
 8012908:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801290c:	3203      	adds	r2, #3
 801290e:	5ca6      	ldrb	r6, [r4, r2]
 8012910:	1cc2      	adds	r2, r0, #3
 8012912:	4071      	eors	r1, r6
 8012914:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8012916:	3304      	adds	r3, #4
 8012918:	b2db      	uxtb	r3, r3
 801291a:	4573      	cmp	r3, lr
 801291c:	d22d      	bcs.n	801297a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 801291e:	4618      	mov	r0, r3
 8012920:	1f1a      	subs	r2, r3, #4
 8012922:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8012926:	1eda      	subs	r2, r3, #3
 8012928:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 801292a:	1e9a      	subs	r2, r3, #2
 801292c:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 801292e:	1e5a      	subs	r2, r3, #1
 8012930:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8012932:	fbb3 f2f5 	udiv	r2, r3, r5
 8012936:	fb05 3212 	mls	r2, r5, r2, r3
 801293a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801293e:	d1c8      	bne.n	80128d2 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8012940:	4a10      	ldr	r2, [pc, #64]	; (8012984 <lorawan_aes_set_key+0x104>)
 8012942:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012946:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 801294a:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 801294c:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 801294e:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8012952:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8012956:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801295a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801295e:	b2d2      	uxtb	r2, r2
 8012960:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8012964:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8012968:	46c8      	mov	r8, r9
 801296a:	e7b6      	b.n	80128da <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 801296c:	4a05      	ldr	r2, [pc, #20]	; (8012984 <lorawan_aes_set_key+0x104>)
 801296e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8012972:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8012974:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8012976:	5c51      	ldrb	r1, [r2, r1]
 8012978:	e7af      	b.n	80128da <lorawan_aes_set_key+0x5a>
    return 0;
 801297a:	2000      	movs	r0, #0
 801297c:	e793      	b.n	80128a6 <lorawan_aes_set_key+0x26>
 801297e:	bf00      	nop
 8012980:	00010101 	.word	0x00010101
 8012984:	080165d4 	.word	0x080165d4

08012988 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8012988:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 801298c:	b31b      	cbz	r3, 80129d6 <lorawan_aes_encrypt+0x4e>
{
 801298e:	b570      	push	{r4, r5, r6, lr}
 8012990:	b084      	sub	sp, #16
 8012992:	460e      	mov	r6, r1
 8012994:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8012996:	4601      	mov	r1, r0
 8012998:	4668      	mov	r0, sp
 801299a:	f7ff fdf3 	bl	8012584 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801299e:	2401      	movs	r4, #1
 80129a0:	e009      	b.n	80129b6 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80129a2:	4668      	mov	r0, sp
 80129a4:	f7ff fe86 	bl	80126b4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80129a8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80129ac:	4668      	mov	r0, sp
 80129ae:	f7ff fe48 	bl	8012642 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80129b2:	3401      	adds	r4, #1
 80129b4:	b2e4      	uxtb	r4, r4
 80129b6:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 80129ba:	42a3      	cmp	r3, r4
 80129bc:	d8f1      	bhi.n	80129a2 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80129be:	4668      	mov	r0, sp
 80129c0:	f7ff fe44 	bl	801264c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80129c4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80129c8:	4669      	mov	r1, sp
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ff fdda 	bl	8012584 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 80129d0:	2000      	movs	r0, #0
}
 80129d2:	b004      	add	sp, #16
 80129d4:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 80129d6:	20ff      	movs	r0, #255	; 0xff
}
 80129d8:	4770      	bx	lr
	...

080129dc <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80129dc:	2300      	movs	r3, #0
 80129de:	2b0a      	cmp	r3, #10
 80129e0:	d817      	bhi.n	8012a12 <GetKeyByID+0x36>
{
 80129e2:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80129e4:	4a0c      	ldr	r2, [pc, #48]	; (8012a18 <GetKeyByID+0x3c>)
 80129e6:	6814      	ldr	r4, [r2, #0]
 80129e8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80129ec:	4422      	add	r2, r4
 80129ee:	7e12      	ldrb	r2, [r2, #24]
 80129f0:	4282      	cmp	r2, r0
 80129f2:	d006      	beq.n	8012a02 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80129f4:	3301      	adds	r3, #1
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b0a      	cmp	r3, #10
 80129fa:	d9f3      	bls.n	80129e4 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80129fc:	2003      	movs	r0, #3
}
 80129fe:	bc10      	pop	{r4}
 8012a00:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8012a02:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8012a06:	f10c 0c18 	add.w	ip, ip, #24
 8012a0a:	4464      	add	r4, ip
 8012a0c:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8012a0e:	2000      	movs	r0, #0
 8012a10:	e7f5      	b.n	80129fe <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012a12:	2003      	movs	r0, #3
}
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop
 8012a18:	20003c3c 	.word	0x20003c3c

08012a1c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8012a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a20:	b0cc      	sub	sp, #304	; 0x130
 8012a22:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8012a24:	b3a9      	cbz	r1, 8012a92 <ComputeCmac+0x76>
 8012a26:	4607      	mov	r7, r0
 8012a28:	4616      	mov	r6, r2
 8012a2a:	461c      	mov	r4, r3
 8012a2c:	4688      	mov	r8, r1
 8012a2e:	b395      	cbz	r5, 8012a96 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8012a30:	a802      	add	r0, sp, #8
 8012a32:	f7ff fbd5 	bl	80121e0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8012a36:	a901      	add	r1, sp, #4
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f7ff ffcf 	bl	80129dc <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012a3e:	4604      	mov	r4, r0
 8012a40:	b118      	cbz	r0, 8012a4a <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8012a42:	4620      	mov	r0, r4
 8012a44:	b04c      	add	sp, #304	; 0x130
 8012a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8012a4a:	9901      	ldr	r1, [sp, #4]
 8012a4c:	3101      	adds	r1, #1
 8012a4e:	a802      	add	r0, sp, #8
 8012a50:	f7ff fbd5 	bl	80121fe <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8012a54:	b127      	cbz	r7, 8012a60 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8012a56:	2210      	movs	r2, #16
 8012a58:	4639      	mov	r1, r7
 8012a5a:	a802      	add	r0, sp, #8
 8012a5c:	f7ff fbd6 	bl	801220c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8012a60:	4632      	mov	r2, r6
 8012a62:	4641      	mov	r1, r8
 8012a64:	a802      	add	r0, sp, #8
 8012a66:	f7ff fbd1 	bl	801220c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8012a6a:	a902      	add	r1, sp, #8
 8012a6c:	a848      	add	r0, sp, #288	; 0x120
 8012a6e:	f7ff fc3b 	bl	80122e8 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8012a72:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8012a76:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8012a7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012a7e:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8012a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a86:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8012a8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012a8e:	602b      	str	r3, [r5, #0]
 8012a90:	e7d7      	b.n	8012a42 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8012a92:	2402      	movs	r4, #2
 8012a94:	e7d5      	b.n	8012a42 <ComputeCmac+0x26>
 8012a96:	2402      	movs	r4, #2
 8012a98:	e7d3      	b.n	8012a42 <ComputeCmac+0x26>
	...

08012a9c <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8012a9c:	b140      	cbz	r0, 8012ab0 <SecureElementInit+0x14>
{
 8012a9e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8012aa0:	4a04      	ldr	r2, [pc, #16]	; (8012ab4 <SecureElementInit+0x18>)
 8012aa2:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8012aa4:	22d8      	movs	r2, #216	; 0xd8
 8012aa6:	4904      	ldr	r1, [pc, #16]	; (8012ab8 <SecureElementInit+0x1c>)
 8012aa8:	f000 facb 	bl	8013042 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8012aac:	2000      	movs	r0, #0
}
 8012aae:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012ab0:	2002      	movs	r0, #2
}
 8012ab2:	4770      	bx	lr
 8012ab4:	20003c3c 	.word	0x20003c3c
 8012ab8:	0803e500 	.word	0x0803e500

08012abc <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012abc:	2300      	movs	r3, #0
 8012abe:	2b0a      	cmp	r3, #10
 8012ac0:	d817      	bhi.n	8012af2 <SecureElementGetKeyByID+0x36>
{
 8012ac2:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8012ac4:	4a0c      	ldr	r2, [pc, #48]	; (8012af8 <SecureElementGetKeyByID+0x3c>)
 8012ac6:	6814      	ldr	r4, [r2, #0]
 8012ac8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012acc:	4422      	add	r2, r4
 8012ace:	7e12      	ldrb	r2, [r2, #24]
 8012ad0:	4282      	cmp	r2, r0
 8012ad2:	d006      	beq.n	8012ae2 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	2b0a      	cmp	r3, #10
 8012ada:	d9f3      	bls.n	8012ac4 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012adc:	2003      	movs	r0, #3
}
 8012ade:	bc10      	pop	{r4}
 8012ae0:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8012ae2:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8012ae6:	f10c 0c18 	add.w	ip, ip, #24
 8012aea:	4464      	add	r4, ip
 8012aec:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8012aee:	2000      	movs	r0, #0
 8012af0:	e7f5      	b.n	8012ade <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012af2:	2003      	movs	r0, #3
}
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	20003c3c 	.word	0x20003c3c

08012afc <PrintKey>:
{
 8012afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b00:	b099      	sub	sp, #100	; 0x64
 8012b02:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8012b04:	a917      	add	r1, sp, #92	; 0x5c
 8012b06:	f7ff ffd9 	bl	8012abc <SecureElementGetKeyByID>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	d042      	beq.n	8012b96 <PrintKey+0x9a>
}
 8012b10:	b019      	add	sp, #100	; 0x64
 8012b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8012b16:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8012b1a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8012b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b24:	785a      	ldrb	r2, [r3, #1]
 8012b26:	9214      	str	r2, [sp, #80]	; 0x50
 8012b28:	7899      	ldrb	r1, [r3, #2]
 8012b2a:	9115      	str	r1, [sp, #84]	; 0x54
 8012b2c:	78da      	ldrb	r2, [r3, #3]
 8012b2e:	7919      	ldrb	r1, [r3, #4]
 8012b30:	7958      	ldrb	r0, [r3, #5]
 8012b32:	799c      	ldrb	r4, [r3, #6]
 8012b34:	79dd      	ldrb	r5, [r3, #7]
 8012b36:	7a1e      	ldrb	r6, [r3, #8]
 8012b38:	7a5f      	ldrb	r7, [r3, #9]
 8012b3a:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8012b3e:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8012b42:	f893 800c 	ldrb.w	r8, [r3, #12]
 8012b46:	f893 900d 	ldrb.w	r9, [r3, #13]
 8012b4a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8012b4e:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8012b52:	7c1b      	ldrb	r3, [r3, #16]
 8012b54:	9310      	str	r3, [sp, #64]	; 0x40
 8012b56:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8012b5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012b5e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8012b62:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8012b66:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8012b6a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8012b6e:	9709      	str	r7, [sp, #36]	; 0x24
 8012b70:	9608      	str	r6, [sp, #32]
 8012b72:	9507      	str	r5, [sp, #28]
 8012b74:	9406      	str	r4, [sp, #24]
 8012b76:	9005      	str	r0, [sp, #20]
 8012b78:	9104      	str	r1, [sp, #16]
 8012b7a:	9203      	str	r2, [sp, #12]
 8012b7c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012b7e:	9102      	str	r1, [sp, #8]
 8012b80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b82:	9201      	str	r2, [sp, #4]
 8012b84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	4b09      	ldr	r3, [pc, #36]	; (8012bb0 <PrintKey+0xb4>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	2002      	movs	r0, #2
 8012b90:	f002 f934 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
                return;
 8012b94:	e7bc      	b.n	8012b10 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012b96:	2b0a      	cmp	r3, #10
 8012b98:	d8ba      	bhi.n	8012b10 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8012b9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012b9e:	4905      	ldr	r1, [pc, #20]	; (8012bb4 <PrintKey+0xb8>)
 8012ba0:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 8012ba4:	42a2      	cmp	r2, r4
 8012ba6:	d0b6      	beq.n	8012b16 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012ba8:	3301      	adds	r3, #1
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	e7f3      	b.n	8012b96 <PrintKey+0x9a>
 8012bae:	bf00      	nop
 8012bb0:	080166d4 	.word	0x080166d4
 8012bb4:	0801686c 	.word	0x0801686c

08012bb8 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8012bb8:	2b0b      	cmp	r3, #11
 8012bba:	d80a      	bhi.n	8012bd2 <SecureElementComputeAesCmac+0x1a>
{
 8012bbc:	b500      	push	{lr}
 8012bbe:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8012bc0:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012bc4:	f8cd c000 	str.w	ip, [sp]
 8012bc8:	f7ff ff28 	bl	8012a1c <ComputeCmac>
}
 8012bcc:	b003      	add	sp, #12
 8012bce:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012bd2:	2003      	movs	r0, #3
}
 8012bd4:	4770      	bx	lr

08012bd6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 8012bd6:	b190      	cbz	r0, 8012bfe <SecureElementVerifyAesCmac+0x28>
{
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	468c      	mov	ip, r1
 8012bde:	4614      	mov	r4, r2
 8012be0:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8012be2:	2000      	movs	r0, #0
 8012be4:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8012be6:	aa03      	add	r2, sp, #12
 8012be8:	9200      	str	r2, [sp, #0]
 8012bea:	4662      	mov	r2, ip
 8012bec:	f7ff ff16 	bl	8012a1c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012bf0:	b918      	cbnz	r0, 8012bfa <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8012bf2:	9b03      	ldr	r3, [sp, #12]
 8012bf4:	42a3      	cmp	r3, r4
 8012bf6:	d000      	beq.n	8012bfa <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8012bf8:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8012bfa:	b004      	add	sp, #16
 8012bfc:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012bfe:	2002      	movs	r0, #2
}
 8012c00:	4770      	bx	lr

08012c02 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8012c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c06:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8012c08:	b348      	cbz	r0, 8012c5e <SecureElementAesEncrypt+0x5c>
 8012c0a:	460d      	mov	r5, r1
 8012c0c:	4614      	mov	r4, r2
 8012c0e:	461e      	mov	r6, r3
 8012c10:	4607      	mov	r7, r0
 8012c12:	b33b      	cbz	r3, 8012c64 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8012c14:	f011 0f0f 	tst.w	r1, #15
 8012c18:	d127      	bne.n	8012c6a <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8012c1a:	22f0      	movs	r2, #240	; 0xf0
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	a801      	add	r0, sp, #4
 8012c20:	f000 fa27 	bl	8013072 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8012c24:	4669      	mov	r1, sp
 8012c26:	4620      	mov	r0, r4
 8012c28:	f7ff fed8 	bl	80129dc <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012c2c:	4680      	mov	r8, r0
 8012c2e:	b118      	cbz	r0, 8012c38 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8012c30:	4640      	mov	r0, r8
 8012c32:	b03e      	add	sp, #248	; 0xf8
 8012c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8012c38:	aa01      	add	r2, sp, #4
 8012c3a:	2110      	movs	r1, #16
 8012c3c:	9800      	ldr	r0, [sp, #0]
 8012c3e:	3001      	adds	r0, #1
 8012c40:	f7ff fe1e 	bl	8012880 <lorawan_aes_set_key>
        uint8_t block = 0;
 8012c44:	4644      	mov	r4, r8
        while( size != 0 )
 8012c46:	e007      	b.n	8012c58 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8012c48:	aa01      	add	r2, sp, #4
 8012c4a:	1931      	adds	r1, r6, r4
 8012c4c:	1938      	adds	r0, r7, r4
 8012c4e:	f7ff fe9b 	bl	8012988 <lorawan_aes_encrypt>
            block = block + 16;
 8012c52:	3410      	adds	r4, #16
 8012c54:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 8012c56:	3d10      	subs	r5, #16
        while( size != 0 )
 8012c58:	2d00      	cmp	r5, #0
 8012c5a:	d1f5      	bne.n	8012c48 <SecureElementAesEncrypt+0x46>
 8012c5c:	e7e8      	b.n	8012c30 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8012c5e:	f04f 0802 	mov.w	r8, #2
 8012c62:	e7e5      	b.n	8012c30 <SecureElementAesEncrypt+0x2e>
 8012c64:	f04f 0802 	mov.w	r8, #2
 8012c68:	e7e2      	b.n	8012c30 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012c6a:	f04f 0805 	mov.w	r8, #5
 8012c6e:	e7df      	b.n	8012c30 <SecureElementAesEncrypt+0x2e>

08012c70 <SecureElementSetKey>:
{
 8012c70:	b530      	push	{r4, r5, lr}
 8012c72:	b085      	sub	sp, #20
    if( key == NULL )
 8012c74:	2900      	cmp	r1, #0
 8012c76:	d038      	beq.n	8012cea <SecureElementSetKey+0x7a>
 8012c78:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	2b0a      	cmp	r3, #10
 8012c7e:	d830      	bhi.n	8012ce2 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8012c80:	4a1b      	ldr	r2, [pc, #108]	; (8012cf0 <SecureElementSetKey+0x80>)
 8012c82:	6811      	ldr	r1, [r2, #0]
 8012c84:	461c      	mov	r4, r3
 8012c86:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012c8a:	440a      	add	r2, r1
 8012c8c:	7e12      	ldrb	r2, [r2, #24]
 8012c8e:	4282      	cmp	r2, r0
 8012c90:	d002      	beq.n	8012c98 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012c92:	3301      	adds	r3, #1
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	e7f1      	b.n	8012c7c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8012c98:	280d      	cmp	r0, #13
 8012c9a:	d00a      	beq.n	8012cb2 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8012c9c:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8012ca0:	3418      	adds	r4, #24
 8012ca2:	1908      	adds	r0, r1, r4
 8012ca4:	2210      	movs	r2, #16
 8012ca6:	4661      	mov	r1, ip
 8012ca8:	3001      	adds	r0, #1
 8012caa:	f000 f9ca 	bl	8013042 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8012cae:	2500      	movs	r5, #0
 8012cb0:	e018      	b.n	8012ce4 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	9301      	str	r3, [sp, #4]
 8012cb8:	9302      	str	r3, [sp, #8]
 8012cba:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8012cbc:	466b      	mov	r3, sp
 8012cbe:	220c      	movs	r2, #12
 8012cc0:	2110      	movs	r1, #16
 8012cc2:	4660      	mov	r0, ip
 8012cc4:	f7ff ff9d 	bl	8012c02 <SecureElementAesEncrypt>
 8012cc8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8012cca:	4b09      	ldr	r3, [pc, #36]	; (8012cf0 <SecureElementSetKey+0x80>)
 8012ccc:	6818      	ldr	r0, [r3, #0]
 8012cce:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8012cd2:	3418      	adds	r4, #24
 8012cd4:	4420      	add	r0, r4
 8012cd6:	2210      	movs	r2, #16
 8012cd8:	4669      	mov	r1, sp
 8012cda:	3001      	adds	r0, #1
 8012cdc:	f000 f9b1 	bl	8013042 <memcpy1>
                return retval;
 8012ce0:	e000      	b.n	8012ce4 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012ce2:	2503      	movs	r5, #3
}
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	b005      	add	sp, #20
 8012ce8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012cea:	2502      	movs	r5, #2
 8012cec:	e7fa      	b.n	8012ce4 <SecureElementSetKey+0x74>
 8012cee:	bf00      	nop
 8012cf0:	20003c3c 	.word	0x20003c3c

08012cf4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8012cf4:	b1d0      	cbz	r0, 8012d2c <SecureElementDeriveAndStoreKey+0x38>
{
 8012cf6:	b510      	push	{r4, lr}
 8012cf8:	b084      	sub	sp, #16
 8012cfa:	4614      	mov	r4, r2
 8012cfc:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8012cfe:	2a0c      	cmp	r2, #12
 8012d00:	d101      	bne.n	8012d06 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8012d02:	290b      	cmp	r1, #11
 8012d04:	d114      	bne.n	8012d30 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8012d06:	2300      	movs	r3, #0
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	9301      	str	r3, [sp, #4]
 8012d0c:	9302      	str	r3, [sp, #8]
 8012d0e:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8012d10:	466b      	mov	r3, sp
 8012d12:	460a      	mov	r2, r1
 8012d14:	2110      	movs	r1, #16
 8012d16:	4660      	mov	r0, ip
 8012d18:	f7ff ff73 	bl	8012c02 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012d1c:	b108      	cbz	r0, 8012d22 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8012d1e:	b004      	add	sp, #16
 8012d20:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8012d22:	4669      	mov	r1, sp
 8012d24:	4620      	mov	r0, r4
 8012d26:	f7ff ffa3 	bl	8012c70 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012d2a:	e7f8      	b.n	8012d1e <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8012d2c:	2002      	movs	r0, #2
}
 8012d2e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8012d30:	2003      	movs	r0, #3
 8012d32:	e7f4      	b.n	8012d1e <SecureElementDeriveAndStoreKey+0x2a>

08012d34 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8012d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d36:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012d3a:	9c07      	ldr	r4, [sp, #28]
 8012d3c:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8012d3e:	b35b      	cbz	r3, 8012d98 <SecureElementProcessJoinAccept+0x64>
 8012d40:	461f      	mov	r7, r3
 8012d42:	b35c      	cbz	r4, 8012d9c <SecureElementProcessJoinAccept+0x68>
 8012d44:	b366      	cbz	r6, 8012da0 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8012d46:	2d21      	cmp	r5, #33	; 0x21
 8012d48:	d82c      	bhi.n	8012da4 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8012d4a:	462a      	mov	r2, r5
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	4620      	mov	r0, r4
 8012d50:	f000 f977 	bl	8013042 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8012d54:	1c63      	adds	r3, r4, #1
 8012d56:	2201      	movs	r2, #1
 8012d58:	1e69      	subs	r1, r5, #1
 8012d5a:	18b8      	adds	r0, r7, r2
 8012d5c:	f7ff ff51 	bl	8012c02 <SecureElementAesEncrypt>
 8012d60:	bb10      	cbnz	r0, 8012da8 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8012d62:	7ae3      	ldrb	r3, [r4, #11]
 8012d64:	09db      	lsrs	r3, r3, #7
 8012d66:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8012d68:	1961      	adds	r1, r4, r5
 8012d6a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8012d6e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8012d72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8012d76:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8012d7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8012d7e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8012d82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8012d86:	b98b      	cbnz	r3, 8012dac <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8012d88:	2301      	movs	r3, #1
 8012d8a:	1f29      	subs	r1, r5, #4
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f7ff ff22 	bl	8012bd6 <SecureElementVerifyAesCmac>
 8012d92:	b140      	cbz	r0, 8012da6 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8012d94:	2001      	movs	r0, #1
 8012d96:	e006      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8012d98:	2002      	movs	r0, #2
 8012d9a:	e004      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>
 8012d9c:	2002      	movs	r0, #2
 8012d9e:	e002      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>
 8012da0:	2002      	movs	r0, #2
 8012da2:	e000      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012da4:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8012da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8012da8:	2007      	movs	r0, #7
 8012daa:	e7fc      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8012dac:	2004      	movs	r0, #4
 8012dae:	e7fa      	b.n	8012da6 <SecureElementProcessJoinAccept+0x72>

08012db0 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012db0:	b140      	cbz	r0, 8012dc4 <SecureElementSetDevEui+0x14>
{
 8012db2:	b508      	push	{r3, lr}
 8012db4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8012db6:	2208      	movs	r2, #8
 8012db8:	4b03      	ldr	r3, [pc, #12]	; (8012dc8 <SecureElementSetDevEui+0x18>)
 8012dba:	6818      	ldr	r0, [r3, #0]
 8012dbc:	f000 f941 	bl	8013042 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012dc0:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012dc2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012dc4:	2002      	movs	r0, #2
}
 8012dc6:	4770      	bx	lr
 8012dc8:	20003c3c 	.word	0x20003c3c

08012dcc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8012dcc:	b138      	cbz	r0, 8012dde <SecureElementGetDevEui+0x12>
{
 8012dce:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8012dd0:	2208      	movs	r2, #8
 8012dd2:	4904      	ldr	r1, [pc, #16]	; (8012de4 <SecureElementGetDevEui+0x18>)
 8012dd4:	6809      	ldr	r1, [r1, #0]
 8012dd6:	f000 f934 	bl	8013042 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012dda:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012ddc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012dde:	2002      	movs	r0, #2
}
 8012de0:	4770      	bx	lr
 8012de2:	bf00      	nop
 8012de4:	20003c3c 	.word	0x20003c3c

08012de8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012de8:	b148      	cbz	r0, 8012dfe <SecureElementSetJoinEui+0x16>
{
 8012dea:	b508      	push	{r3, lr}
 8012dec:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8012dee:	4b05      	ldr	r3, [pc, #20]	; (8012e04 <SecureElementSetJoinEui+0x1c>)
 8012df0:	6818      	ldr	r0, [r3, #0]
 8012df2:	2208      	movs	r2, #8
 8012df4:	4410      	add	r0, r2
 8012df6:	f000 f924 	bl	8013042 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012dfa:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012dfc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012dfe:	2002      	movs	r0, #2
}
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	20003c3c 	.word	0x20003c3c

08012e08 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8012e08:	b140      	cbz	r0, 8012e1c <SecureElementGetJoinEui+0x14>
{
 8012e0a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8012e0c:	4a04      	ldr	r2, [pc, #16]	; (8012e20 <SecureElementGetJoinEui+0x18>)
 8012e0e:	6811      	ldr	r1, [r2, #0]
 8012e10:	2208      	movs	r2, #8
 8012e12:	4411      	add	r1, r2
 8012e14:	f000 f915 	bl	8013042 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8012e18:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8012e1a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8012e1c:	2002      	movs	r0, #2
}
 8012e1e:	4770      	bx	lr
 8012e20:	20003c3c 	.word	0x20003c3c

08012e24 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8012e24:	2802      	cmp	r0, #2
 8012e26:	d004      	beq.n	8012e32 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8012e28:	4b04      	ldr	r3, [pc, #16]	; (8012e3c <SecureElementSetDevAddr+0x18>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012e2e:	2000      	movs	r0, #0
 8012e30:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8012e32:	4b02      	ldr	r3, [pc, #8]	; (8012e3c <SecureElementSetDevAddr+0x18>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	6119      	str	r1, [r3, #16]
 8012e38:	e7f9      	b.n	8012e2e <SecureElementSetDevAddr+0xa>
 8012e3a:	bf00      	nop
 8012e3c:	20003c3c 	.word	0x20003c3c

08012e40 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8012e40:	b169      	cbz	r1, 8012e5e <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8012e42:	2802      	cmp	r0, #2
 8012e44:	d005      	beq.n	8012e52 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8012e46:	4a07      	ldr	r2, [pc, #28]	; (8012e64 <SecureElementGetDevAddr+0x24>)
 8012e48:	6812      	ldr	r2, [r2, #0]
 8012e4a:	6952      	ldr	r2, [r2, #20]
 8012e4c:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8012e4e:	2000      	movs	r0, #0
 8012e50:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8012e52:	4a04      	ldr	r2, [pc, #16]	; (8012e64 <SecureElementGetDevAddr+0x24>)
 8012e54:	6812      	ldr	r2, [r2, #0]
 8012e56:	6912      	ldr	r2, [r2, #16]
 8012e58:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8012e5e:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop
 8012e64:	20003c3c 	.word	0x20003c3c

08012e68 <SecureElementInitMcuID>:
{
 8012e68:	b530      	push	{r4, r5, lr}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8012e74:	a802      	add	r0, sp, #8
 8012e76:	f7ff ffa9 	bl	8012dcc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8012e7a:	a901      	add	r1, sp, #4
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	f7ff ffdf 	bl	8012e40 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8012e82:	b195      	cbz	r5, 8012eaa <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012e84:	2300      	movs	r3, #0
 8012e86:	2b07      	cmp	r3, #7
 8012e88:	d808      	bhi.n	8012e9c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8012e8a:	f103 0210 	add.w	r2, r3, #16
 8012e8e:	446a      	add	r2, sp
 8012e90:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8012e94:	b9aa      	cbnz	r2, 8012ec2 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8012e96:	3301      	adds	r3, #1
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	e7f4      	b.n	8012e86 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8012e9c:	2300      	movs	r3, #0
        if( id_init == false )
 8012e9e:	b923      	cbnz	r3, 8012eaa <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8012ea0:	a802      	add	r0, sp, #8
 8012ea2:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8012ea4:	a802      	add	r0, sp, #8
 8012ea6:	f7ff ff83 	bl	8012db0 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8012eaa:	b13c      	cbz	r4, 8012ebc <SecureElementInitMcuID+0x54>
 8012eac:	9b01      	ldr	r3, [sp, #4]
 8012eae:	b92b      	cbnz	r3, 8012ebc <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8012eb0:	a801      	add	r0, sp, #4
 8012eb2:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8012eb4:	9901      	ldr	r1, [sp, #4]
 8012eb6:	2001      	movs	r0, #1
 8012eb8:	f7ff ffb4 	bl	8012e24 <SecureElementSetDevAddr>
}
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	b005      	add	sp, #20
 8012ec0:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	e7eb      	b.n	8012e9e <SecureElementInitMcuID+0x36>
	...

08012ec8 <PrintIds>:
{
 8012ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eca:	b08f      	sub	sp, #60	; 0x3c
 8012ecc:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8012ece:	2400      	movs	r4, #0
 8012ed0:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 8012ed2:	a80a      	add	r0, sp, #40	; 0x28
 8012ed4:	f7ff ff7a 	bl	8012dcc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8012ed8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012edc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8012ee0:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 8012ee4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8012ee8:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8012eec:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8012ef0:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 8012ef4:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8012ef8:	f8cd e01c 	str.w	lr, [sp, #28]
 8012efc:	f8cd c018 	str.w	ip, [sp, #24]
 8012f00:	9705      	str	r7, [sp, #20]
 8012f02:	9604      	str	r6, [sp, #16]
 8012f04:	9003      	str	r0, [sp, #12]
 8012f06:	9102      	str	r1, [sp, #8]
 8012f08:	9201      	str	r2, [sp, #4]
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	4b20      	ldr	r3, [pc, #128]	; (8012f90 <PrintIds+0xc8>)
 8012f0e:	4622      	mov	r2, r4
 8012f10:	4621      	mov	r1, r4
 8012f12:	2002      	movs	r0, #2
 8012f14:	f001 ff72 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 8012f18:	a80c      	add	r0, sp, #48	; 0x30
 8012f1a:	f7ff ff75 	bl	8012e08 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8012f1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8012f22:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8012f26:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8012f2a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8012f2e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8012f32:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8012f36:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 8012f3a:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 8012f3e:	f8cd e01c 	str.w	lr, [sp, #28]
 8012f42:	f8cd c018 	str.w	ip, [sp, #24]
 8012f46:	9705      	str	r7, [sp, #20]
 8012f48:	9604      	str	r6, [sp, #16]
 8012f4a:	9003      	str	r0, [sp, #12]
 8012f4c:	9102      	str	r1, [sp, #8]
 8012f4e:	9201      	str	r2, [sp, #4]
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	4b10      	ldr	r3, [pc, #64]	; (8012f94 <PrintIds+0xcc>)
 8012f54:	4622      	mov	r2, r4
 8012f56:	4621      	mov	r1, r4
 8012f58:	2002      	movs	r0, #2
 8012f5a:	f001 ff4f 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8012f5e:	a909      	add	r1, sp, #36	; 0x24
 8012f60:	4628      	mov	r0, r5
 8012f62:	f7ff ff6d 	bl	8012e40 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8012f66:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8012f6a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8012f6e:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8012f72:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8012f76:	9003      	str	r0, [sp, #12]
 8012f78:	9102      	str	r1, [sp, #8]
 8012f7a:	9201      	str	r2, [sp, #4]
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	4b06      	ldr	r3, [pc, #24]	; (8012f98 <PrintIds+0xd0>)
 8012f80:	4622      	mov	r2, r4
 8012f82:	4621      	mov	r1, r4
 8012f84:	2002      	movs	r0, #2
 8012f86:	f001 ff39 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 8012f8a:	b00f      	add	sp, #60	; 0x3c
 8012f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	08016730 	.word	0x08016730
 8012f94:	08016770 	.word	0x08016770
 8012f98:	080167b0 	.word	0x080167b0

08012f9c <SecureElementPrintKeys>:
{
 8012f9c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8012f9e:	2000      	movs	r0, #0
 8012fa0:	f7ff fdac 	bl	8012afc <PrintKey>
    PrintKey( NWK_KEY );
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	f7ff fda9 	bl	8012afc <PrintKey>
    PrintKey( APP_S_KEY );
 8012faa:	2009      	movs	r0, #9
 8012fac:	f7ff fda6 	bl	8012afc <PrintKey>
    PrintKey( NWK_S_KEY );
 8012fb0:	2008      	movs	r0, #8
 8012fb2:	f7ff fda3 	bl	8012afc <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	f7ff ff86 	bl	8012ec8 <PrintIds>
}
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	bd08      	pop	{r3, pc}

08012fc0 <SecureElementPrintSessionKeys>:
{
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8012fc4:	200b      	movs	r0, #11
 8012fc6:	f7ff fd99 	bl	8012afc <PrintKey>
    PrintKey( MC_KE_KEY );
 8012fca:	200c      	movs	r0, #12
 8012fcc:	f7ff fd96 	bl	8012afc <PrintKey>
    PrintKey( APP_S_KEY );
 8012fd0:	2009      	movs	r0, #9
 8012fd2:	f7ff fd93 	bl	8012afc <PrintKey>
    PrintKey( NWK_S_KEY );
 8012fd6:	2008      	movs	r0, #8
 8012fd8:	f7ff fd90 	bl	8012afc <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8012fdc:	200a      	movs	r0, #10
 8012fde:	f7ff fd8d 	bl	8012afc <PrintKey>
    PrintIds( mode );
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	f7ff ff70 	bl	8012ec8 <PrintIds>
}
 8012fe8:	2000      	movs	r0, #0
 8012fea:	bd10      	pop	{r4, pc}

08012fec <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8012fec:	4b09      	ldr	r3, [pc, #36]	; (8013014 <rand1+0x28>)
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	4909      	ldr	r1, [pc, #36]	; (8013018 <rand1+0x2c>)
 8012ff2:	f243 0039 	movw	r0, #12345	; 0x3039
 8012ff6:	fb01 0002 	mla	r0, r1, r2, r0
 8012ffa:	6018      	str	r0, [r3, #0]
 8012ffc:	2303      	movs	r3, #3
 8012ffe:	fba3 2300 	umull	r2, r3, r3, r0
 8013002:	1ac2      	subs	r2, r0, r3
 8013004:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013008:	0f9b      	lsrs	r3, r3, #30
 801300a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801300e:	1ac0      	subs	r0, r0, r3
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop
 8013014:	200000fc 	.word	0x200000fc
 8013018:	41c64e6d 	.word	0x41c64e6d

0801301c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 801301c:	4b01      	ldr	r3, [pc, #4]	; (8013024 <srand1+0x8>)
 801301e:	6018      	str	r0, [r3, #0]
}
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	200000fc 	.word	0x200000fc

08013028 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8013028:	b538      	push	{r3, r4, r5, lr}
 801302a:	4605      	mov	r5, r0
 801302c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801302e:	f7ff ffdd 	bl	8012fec <rand1>
 8013032:	1b61      	subs	r1, r4, r5
 8013034:	3101      	adds	r1, #1
 8013036:	fb90 f3f1 	sdiv	r3, r0, r1
 801303a:	fb01 0013 	mls	r0, r1, r3, r0
}
 801303e:	4428      	add	r0, r5
 8013040:	bd38      	pop	{r3, r4, r5, pc}

08013042 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8013042:	e004      	b.n	801304e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8013044:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013048:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801304c:	461a      	mov	r2, r3
 801304e:	1e53      	subs	r3, r2, #1
 8013050:	b29b      	uxth	r3, r3
 8013052:	2a00      	cmp	r2, #0
 8013054:	d1f6      	bne.n	8013044 <memcpy1+0x2>
    }
}
 8013056:	4770      	bx	lr

08013058 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8013058:	1e53      	subs	r3, r2, #1
 801305a:	4418      	add	r0, r3
    while( size-- )
 801305c:	e004      	b.n	8013068 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801305e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013062:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8013066:	461a      	mov	r2, r3
 8013068:	1e53      	subs	r3, r2, #1
 801306a:	b29b      	uxth	r3, r3
 801306c:	2a00      	cmp	r2, #0
 801306e:	d1f6      	bne.n	801305e <memcpyr+0x6>
    }
}
 8013070:	4770      	bx	lr

08013072 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8013072:	e002      	b.n	801307a <memset1+0x8>
    {
        *dst++ = value;
 8013074:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8013078:	461a      	mov	r2, r3
 801307a:	1e53      	subs	r3, r2, #1
 801307c:	b29b      	uxth	r3, r3
 801307e:	2a00      	cmp	r2, #0
 8013080:	d1f8      	bne.n	8013074 <memset1+0x2>
    }
}
 8013082:	4770      	bx	lr

08013084 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8013084:	b1f0      	cbz	r0, 80130c4 <Crc32+0x40>
{
 8013086:	b510      	push	{r4, lr}
 8013088:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801308a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013092:	e00e      	b.n	80130b2 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8013094:	f340 0c00 	sbfx	ip, r0, #0, #1
 8013098:	4a0b      	ldr	r2, [pc, #44]	; (80130c8 <Crc32+0x44>)
 801309a:	ea0c 0202 	and.w	r2, ip, r2
 801309e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80130a2:	3301      	adds	r3, #1
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	2b07      	cmp	r3, #7
 80130a8:	d9f4      	bls.n	8013094 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 80130aa:	f10e 0e01 	add.w	lr, lr, #1
 80130ae:	fa1f fe8e 	uxth.w	lr, lr
 80130b2:	458e      	cmp	lr, r1
 80130b4:	d204      	bcs.n	80130c0 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 80130b6:	f814 300e 	ldrb.w	r3, [r4, lr]
 80130ba:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 80130bc:	2300      	movs	r3, #0
 80130be:	e7f2      	b.n	80130a6 <Crc32+0x22>
        }
    }

    return ~crc;
 80130c0:	43c0      	mvns	r0, r0
}
 80130c2:	bd10      	pop	{r4, pc}
        return 0;
 80130c4:	2000      	movs	r0, #0
}
 80130c6:	4770      	bx	lr
 80130c8:	edb88320 	.word	0xedb88320

080130cc <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80130cc:	2001      	movs	r0, #1
 80130ce:	4770      	bx	lr

080130d0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80130d0:	280a      	cmp	r0, #10
 80130d2:	d807      	bhi.n	80130e4 <RadioGetLoRaBandwidthInHz+0x14>
 80130d4:	e8df f000 	tbb	[pc, r0]
 80130d8:	17110b20 	.word	0x17110b20
 80130dc:	061e1c1a 	.word	0x061e1c1a
 80130e0:	0e08      	.short	0x0e08
 80130e2:	14          	.byte	0x14
 80130e3:	00          	.byte	0x00
 80130e4:	2000      	movs	r0, #0
 80130e6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80130e8:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80130ec:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80130ee:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80130f2:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80130f4:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80130f8:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80130fa:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80130fe:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8013100:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8013104:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8013106:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 801310a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801310c:	4804      	ldr	r0, [pc, #16]	; (8013120 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801310e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8013110:	4804      	ldr	r0, [pc, #16]	; (8013124 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8013112:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8013114:	4804      	ldr	r0, [pc, #16]	; (8013128 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8013116:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8013118:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	0001e848 	.word	0x0001e848
 8013124:	0003d090 	.word	0x0003d090
 8013128:	0007a120 	.word	0x0007a120

0801312c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801312c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8013130:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013132:	b953      	cbnz	r3, 801314a <RadioGetGfskTimeOnAirNumerator+0x1e>
 8013134:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8013136:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013138:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801313a:	b141      	cbz	r1, 801314e <RadioGetGfskTimeOnAirNumerator+0x22>
 801313c:	2302      	movs	r3, #2
 801313e:	f89d 0000 	ldrb.w	r0, [sp]
 8013142:	4418      	add	r0, r3
}
 8013144:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8013148:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801314a:	2300      	movs	r3, #0
 801314c:	e7f3      	b.n	8013136 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801314e:	2300      	movs	r3, #0
 8013150:	e7f5      	b.n	801313e <RadioGetGfskTimeOnAirNumerator+0x12>

08013152 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013152:	b570      	push	{r4, r5, r6, lr}
 8013154:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013158:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801315c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801315e:	f1a1 0c05 	sub.w	ip, r1, #5
 8013162:	f1bc 0f01 	cmp.w	ip, #1
 8013166:	d931      	bls.n	80131cc <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013168:	b918      	cbnz	r0, 8013172 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801316a:	f1a1 060b 	sub.w	r6, r1, #11
 801316e:	2e01      	cmp	r6, #1
 8013170:	d934      	bls.n	80131dc <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8013172:	2801      	cmp	r0, #1
 8013174:	d02e      	beq.n	80131d4 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8013176:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013178:	f89d c014 	ldrb.w	ip, [sp, #20]
 801317c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8013180:	b385      	cbz	r5, 80131e4 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8013182:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013184:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8013186:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8013188:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801318c:	b364      	cbz	r4, 80131e8 <RadioGetLoRaTimeOnAirNumerator+0x96>
 801318e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8013192:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8013194:	2906      	cmp	r1, #6
 8013196:	d904      	bls.n	80131a2 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8013198:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801319c:	b10e      	cbz	r6, 80131a2 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801319e:	1e88      	subs	r0, r1, #2
 80131a0:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80131a2:	f1bc 0f00 	cmp.w	ip, #0
 80131a6:	db22      	blt.n	80131ee <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80131a8:	4484      	add	ip, r0
 80131aa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80131ae:	fb9c fcf0 	sdiv	ip, ip, r0
 80131b2:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 80131b6:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80131ba:	2906      	cmp	r1, #6
 80131bc:	d801      	bhi.n	80131c2 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 80131be:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80131c2:	0080      	lsls	r0, r0, #2
 80131c4:	3001      	adds	r0, #1
 80131c6:	3902      	subs	r1, #2
}
 80131c8:	4088      	lsls	r0, r1
 80131ca:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 80131cc:	2b0b      	cmp	r3, #11
 80131ce:	d8cb      	bhi.n	8013168 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 80131d0:	230c      	movs	r3, #12
 80131d2:	e7c9      	b.n	8013168 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80131d4:	290c      	cmp	r1, #12
 80131d6:	d003      	beq.n	80131e0 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 80131d8:	2600      	movs	r6, #0
 80131da:	e7cd      	b.n	8013178 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 80131dc:	2601      	movs	r6, #1
 80131de:	e7cb      	b.n	8013178 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80131e0:	2601      	movs	r6, #1
 80131e2:	e7c9      	b.n	8013178 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80131e4:	2000      	movs	r0, #0
 80131e6:	e7cd      	b.n	8013184 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 80131e8:	f04f 0e14 	mov.w	lr, #20
 80131ec:	e7d1      	b.n	8013192 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 80131ee:	f04f 0c00 	mov.w	ip, #0
 80131f2:	e7d9      	b.n	80131a8 <RadioGetLoRaTimeOnAirNumerator+0x56>

080131f4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80131f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131f6:	b085      	sub	sp, #20
 80131f8:	460e      	mov	r6, r1
 80131fa:	4615      	mov	r5, r2
 80131fc:	4619      	mov	r1, r3
 80131fe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013202:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8013206:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801320a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 801320e:	b148      	cbz	r0, 8013224 <RadioTimeOnAir+0x30>
 8013210:	2801      	cmp	r0, #1
 8013212:	d012      	beq.n	801323a <RadioTimeOnAir+0x46>
 8013214:	2501      	movs	r5, #1
 8013216:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8013218:	442c      	add	r4, r5
 801321a:	1e60      	subs	r0, r4, #1
}
 801321c:	fbb0 f0f5 	udiv	r0, r0, r5
 8013220:	b005      	add	sp, #20
 8013222:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8013224:	f8cd c004 	str.w	ip, [sp, #4]
 8013228:	9700      	str	r7, [sp, #0]
 801322a:	4628      	mov	r0, r5
 801322c:	f7ff ff7e 	bl	801312c <RadioGetGfskTimeOnAirNumerator>
 8013230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013234:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8013238:	e7ee      	b.n	8013218 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801323a:	f8cd c008 	str.w	ip, [sp, #8]
 801323e:	9701      	str	r7, [sp, #4]
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	4613      	mov	r3, r2
 8013244:	460a      	mov	r2, r1
 8013246:	4629      	mov	r1, r5
 8013248:	4630      	mov	r0, r6
 801324a:	f7ff ff82 	bl	8013152 <RadioGetLoRaTimeOnAirNumerator>
 801324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013252:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8013256:	4b03      	ldr	r3, [pc, #12]	; (8013264 <RadioTimeOnAir+0x70>)
 8013258:	5d98      	ldrb	r0, [r3, r6]
 801325a:	f7ff ff39 	bl	80130d0 <RadioGetLoRaBandwidthInHz>
 801325e:	4605      	mov	r5, r0
        break;
 8013260:	e7da      	b.n	8013218 <RadioTimeOnAir+0x24>
 8013262:	bf00      	nop
 8013264:	0801695c 	.word	0x0801695c

08013268 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8013268:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801326a:	4b05      	ldr	r3, [pc, #20]	; (8013280 <RadioOnTxTimeoutProcess+0x18>)
 801326c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013270:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8013272:	4b04      	ldr	r3, [pc, #16]	; (8013284 <RadioOnTxTimeoutProcess+0x1c>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	b113      	cbz	r3, 801327e <RadioOnTxTimeoutProcess+0x16>
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	b103      	cbz	r3, 801327e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 801327c:	4798      	blx	r3
    }
}
 801327e:	bd08      	pop	{r3, pc}
 8013280:	48000400 	.word	0x48000400
 8013284:	20003d40 	.word	0x20003d40

08013288 <RadioOnTxTimeoutIrq>:
{
 8013288:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801328a:	f7ff ffed 	bl	8013268 <RadioOnTxTimeoutProcess>
}
 801328e:	bd08      	pop	{r3, pc}

08013290 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8013290:	b508      	push	{r3, lr}
 8013292:	4b05      	ldr	r3, [pc, #20]	; (80132a8 <RadioOnRxTimeoutProcess+0x18>)
 8013294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013298:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801329a:	4b04      	ldr	r3, [pc, #16]	; (80132ac <RadioOnRxTimeoutProcess+0x1c>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	b113      	cbz	r3, 80132a6 <RadioOnRxTimeoutProcess+0x16>
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	b103      	cbz	r3, 80132a6 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80132a4:	4798      	blx	r3
    }
}
 80132a6:	bd08      	pop	{r3, pc}
 80132a8:	48000400 	.word	0x48000400
 80132ac:	20003d40 	.word	0x20003d40

080132b0 <RadioOnRxTimeoutIrq>:
{
 80132b0:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80132b2:	f7ff ffed 	bl	8013290 <RadioOnRxTimeoutProcess>
}
 80132b6:	bd08      	pop	{r3, pc}

080132b8 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80132b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132bc:	4770      	bx	lr

080132be <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80132be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132c2:	4770      	bx	lr

080132c4 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 80132c4:	2001      	movs	r0, #1
 80132c6:	4770      	bx	lr

080132c8 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 80132c8:	2001      	movs	r0, #1
 80132ca:	4770      	bx	lr

080132cc <RadioWrite>:
{
 80132cc:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80132ce:	f000 fe37 	bl	8013f40 <SUBGRF_WriteRegister>
}
 80132d2:	bd08      	pop	{r3, pc}

080132d4 <RadioTxCw>:
{
 80132d4:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80132d6:	f001 fbcf 	bl	8014a78 <SUBGRF_SetRfTxPower>
 80132da:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80132dc:	210e      	movs	r1, #14
 80132de:	f640 101f 	movw	r0, #2335	; 0x91f
 80132e2:	f000 fe2d 	bl	8013f40 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80132e6:	2101      	movs	r1, #1
 80132e8:	4620      	mov	r0, r4
 80132ea:	f001 fbb1 	bl	8014a50 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80132ee:	f000 fff7 	bl	80142e0 <SUBGRF_SetTxContinuousWave>
}
 80132f2:	bd10      	pop	{r4, pc}

080132f4 <RadioTxPrbs>:
{
 80132f4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80132f6:	2101      	movs	r1, #1
 80132f8:	4b07      	ldr	r3, [pc, #28]	; (8013318 <RadioTxPrbs+0x24>)
 80132fa:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80132fe:	f001 fba7 	bl	8014a50 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8013302:	212d      	movs	r1, #45	; 0x2d
 8013304:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013308:	f7ff ffe0 	bl	80132cc <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 801330c:	f000 ffef 	bl	80142ee <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8013310:	4802      	ldr	r0, [pc, #8]	; (801331c <RadioTxPrbs+0x28>)
 8013312:	f000 ff25 	bl	8014160 <SUBGRF_SetTx>
}
 8013316:	bd08      	pop	{r3, pc}
 8013318:	20003d5c 	.word	0x20003d5c
 801331c:	000fffff 	.word	0x000fffff

08013320 <RadioSetRxDutyCycle>:
{
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	4604      	mov	r4, r0
 8013324:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8013326:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 801332a:	4e09      	ldr	r6, [pc, #36]	; (8013350 <RadioSetRxDutyCycle+0x30>)
 801332c:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801332e:	2300      	movs	r3, #0
 8013330:	461a      	mov	r2, r3
 8013332:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013336:	4608      	mov	r0, r1
 8013338:	f001 f8a5 	bl	8014486 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801333c:	2100      	movs	r1, #0
 801333e:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8013342:	f001 fb85 	bl	8014a50 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8013346:	4629      	mov	r1, r5
 8013348:	4620      	mov	r0, r4
 801334a:	f000 ff99 	bl	8014280 <SUBGRF_SetRxDutyCycle>
}
 801334e:	bd70      	pop	{r4, r5, r6, pc}
 8013350:	20003d5c 	.word	0x20003d5c

08013354 <RadioRxBoosted>:
{
 8013354:	b538      	push	{r3, r4, r5, lr}
 8013356:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8013358:	f001 fc69 	bl	8014c2e <RFW_Is_Init>
 801335c:	2801      	cmp	r0, #1
 801335e:	d019      	beq.n	8013394 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013360:	2300      	movs	r3, #0
 8013362:	461a      	mov	r2, r3
 8013364:	f240 2162 	movw	r1, #610	; 0x262
 8013368:	4608      	mov	r0, r1
 801336a:	f001 f88c 	bl	8014486 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801336e:	b9a4      	cbnz	r4, 801339a <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013370:	4c11      	ldr	r4, [pc, #68]	; (80133b8 <RadioRxBoosted+0x64>)
 8013372:	2100      	movs	r1, #0
 8013374:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013376:	4b11      	ldr	r3, [pc, #68]	; (80133bc <RadioRxBoosted+0x68>)
 8013378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801337c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801337e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013382:	f001 fb65 	bl	8014a50 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013386:	7863      	ldrb	r3, [r4, #1]
 8013388:	b183      	cbz	r3, 80133ac <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801338a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801338e:	f000 ff59 	bl	8014244 <SUBGRF_SetRxBoosted>
}
 8013392:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8013394:	f001 fc53 	bl	8014c3e <RFW_ReceiveInit>
 8013398:	e7e9      	b.n	801336e <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801339a:	4d09      	ldr	r5, [pc, #36]	; (80133c0 <RadioRxBoosted+0x6c>)
 801339c:	4621      	mov	r1, r4
 801339e:	4628      	mov	r0, r5
 80133a0:	f002 f844 	bl	801542c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80133a4:	4628      	mov	r0, r5
 80133a6:	f001 fffb 	bl	80153a0 <UTIL_TIMER_Start>
 80133aa:	e7e1      	b.n	8013370 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80133ac:	4b02      	ldr	r3, [pc, #8]	; (80133b8 <RadioRxBoosted+0x64>)
 80133ae:	6898      	ldr	r0, [r3, #8]
 80133b0:	0180      	lsls	r0, r0, #6
 80133b2:	f000 ff47 	bl	8014244 <SUBGRF_SetRxBoosted>
}
 80133b6:	e7ec      	b.n	8013392 <RadioRxBoosted+0x3e>
 80133b8:	20003d5c 	.word	0x20003d5c
 80133bc:	48000400 	.word	0x48000400
 80133c0:	20003d44 	.word	0x20003d44

080133c4 <RadioStandby>:
{
 80133c4:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80133c6:	2000      	movs	r0, #0
 80133c8:	f000 feb0 	bl	801412c <SUBGRF_SetStandby>
}
 80133cc:	bd08      	pop	{r3, pc}

080133ce <RadioRead>:
{
 80133ce:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80133d0:	f000 fdc6 	bl	8013f60 <SUBGRF_ReadRegister>
}
 80133d4:	bd08      	pop	{r3, pc}

080133d6 <RadioGetStatus>:
{
 80133d6:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80133d8:	f000 fda6 	bl	8013f28 <SUBGRF_GetOperatingMode>
 80133dc:	2805      	cmp	r0, #5
 80133de:	d007      	beq.n	80133f0 <RadioGetStatus+0x1a>
 80133e0:	2807      	cmp	r0, #7
 80133e2:	d007      	beq.n	80133f4 <RadioGetStatus+0x1e>
 80133e4:	2804      	cmp	r0, #4
 80133e6:	d001      	beq.n	80133ec <RadioGetStatus+0x16>
            return RF_IDLE;
 80133e8:	2000      	movs	r0, #0
}
 80133ea:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80133ec:	2002      	movs	r0, #2
 80133ee:	e7fc      	b.n	80133ea <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80133f0:	2001      	movs	r0, #1
 80133f2:	e7fa      	b.n	80133ea <RadioGetStatus+0x14>
            return RF_CAD;
 80133f4:	2003      	movs	r0, #3
 80133f6:	e7f8      	b.n	80133ea <RadioGetStatus+0x14>

080133f8 <RadioIrqProcess>:
{
 80133f8:	b530      	push	{r4, r5, lr}
 80133fa:	b083      	sub	sp, #12
    uint8_t size = 0;
 80133fc:	2300      	movs	r3, #0
 80133fe:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8013402:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8013404:	4ba5      	ldr	r3, [pc, #660]	; (801369c <RadioIrqProcess+0x2a4>)
 8013406:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801340a:	2b20      	cmp	r3, #32
 801340c:	d829      	bhi.n	8013462 <RadioIrqProcess+0x6a>
 801340e:	b21a      	sxth	r2, r3
 8013410:	2a00      	cmp	r2, #0
 8013412:	f000 8140 	beq.w	8013696 <RadioIrqProcess+0x29e>
 8013416:	3b01      	subs	r3, #1
 8013418:	2b1f      	cmp	r3, #31
 801341a:	f200 813c 	bhi.w	8013696 <RadioIrqProcess+0x29e>
 801341e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013422:	0063      	.short	0x0063
 8013424:	013a007f 	.word	0x013a007f
 8013428:	013a00f7 	.word	0x013a00f7
 801342c:	013a013a 	.word	0x013a013a
 8013430:	013a0127 	.word	0x013a0127
 8013434:	013a013a 	.word	0x013a013a
 8013438:	013a013a 	.word	0x013a013a
 801343c:	013a013a 	.word	0x013a013a
 8013440:	013a0134 	.word	0x013a0134
 8013444:	013a013a 	.word	0x013a013a
 8013448:	013a013a 	.word	0x013a013a
 801344c:	013a013a 	.word	0x013a013a
 8013450:	013a013a 	.word	0x013a013a
 8013454:	013a013a 	.word	0x013a013a
 8013458:	013a013a 	.word	0x013a013a
 801345c:	013a013a 	.word	0x013a013a
 8013460:	0155      	.short	0x0155
 8013462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013466:	f000 80b3 	beq.w	80135d0 <RadioIrqProcess+0x1d8>
 801346a:	d928      	bls.n	80134be <RadioIrqProcess+0xc6>
 801346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013470:	f040 8111 	bne.w	8013696 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8013474:	4b8a      	ldr	r3, [pc, #552]	; (80136a0 <RadioIrqProcess+0x2a8>)
 8013476:	2201      	movs	r2, #1
 8013478:	2100      	movs	r1, #0
 801347a:	2002      	movs	r0, #2
 801347c:	f001 fcbe 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8013480:	f000 fd52 	bl	8013f28 <SUBGRF_GetOperatingMode>
 8013484:	2804      	cmp	r0, #4
 8013486:	f000 80b0 	beq.w	80135ea <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801348a:	f000 fd4d 	bl	8013f28 <SUBGRF_GetOperatingMode>
 801348e:	2805      	cmp	r0, #5
 8013490:	f040 8101 	bne.w	8013696 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8013494:	4b83      	ldr	r3, [pc, #524]	; (80136a4 <RadioIrqProcess+0x2ac>)
 8013496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801349a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 801349c:	4882      	ldr	r0, [pc, #520]	; (80136a8 <RadioIrqProcess+0x2b0>)
 801349e:	f001 ff25 	bl	80152ec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80134a2:	2000      	movs	r0, #0
 80134a4:	f000 fe42 	bl	801412c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80134a8:	4b80      	ldr	r3, [pc, #512]	; (80136ac <RadioIrqProcess+0x2b4>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f000 80f2 	beq.w	8013696 <RadioIrqProcess+0x29e>
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80ee 	beq.w	8013696 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80134ba:	4798      	blx	r3
 80134bc:	e0eb      	b.n	8013696 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80134be:	2b40      	cmp	r3, #64	; 0x40
 80134c0:	f000 811d 	beq.w	80136fe <RadioIrqProcess+0x306>
 80134c4:	2b80      	cmp	r3, #128	; 0x80
 80134c6:	f040 80e6 	bne.w	8013696 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80134ca:	2000      	movs	r0, #0
 80134cc:	f000 fe2e 	bl	801412c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80134d0:	4b76      	ldr	r3, [pc, #472]	; (80136ac <RadioIrqProcess+0x2b4>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 80de 	beq.w	8013696 <RadioIrqProcess+0x29e>
 80134da:	699b      	ldr	r3, [r3, #24]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	f000 80da 	beq.w	8013696 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80134e2:	2000      	movs	r0, #0
 80134e4:	4798      	blx	r3
 80134e6:	e0d6      	b.n	8013696 <RadioIrqProcess+0x29e>
 80134e8:	4b6e      	ldr	r3, [pc, #440]	; (80136a4 <RadioIrqProcess+0x2ac>)
 80134ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80134ee:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80134f0:	486f      	ldr	r0, [pc, #444]	; (80136b0 <RadioIrqProcess+0x2b8>)
 80134f2:	f001 fefb 	bl	80152ec <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80134f6:	2000      	movs	r0, #0
 80134f8:	f000 fe18 	bl	801412c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80134fc:	f001 fb99 	bl	8014c32 <RFW_Is_LongPacketModeEnabled>
 8013500:	2801      	cmp	r0, #1
 8013502:	d00a      	beq.n	801351a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8013504:	4b69      	ldr	r3, [pc, #420]	; (80136ac <RadioIrqProcess+0x2b4>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	f000 80c4 	beq.w	8013696 <RadioIrqProcess+0x29e>
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	f000 80c0 	beq.w	8013696 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8013516:	4798      	blx	r3
 8013518:	e0bd      	b.n	8013696 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 801351a:	f001 fb93 	bl	8014c44 <RFW_DeInit_TxLongPacket>
 801351e:	e7f1      	b.n	8013504 <RadioIrqProcess+0x10c>
 8013520:	4b60      	ldr	r3, [pc, #384]	; (80136a4 <RadioIrqProcess+0x2ac>)
 8013522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013526:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8013528:	485f      	ldr	r0, [pc, #380]	; (80136a8 <RadioIrqProcess+0x2b0>)
 801352a:	f001 fedf 	bl	80152ec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801352e:	4b5b      	ldr	r3, [pc, #364]	; (801369c <RadioIrqProcess+0x2a4>)
 8013530:	785b      	ldrb	r3, [r3, #1]
 8013532:	b303      	cbz	r3, 8013576 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8013534:	22ff      	movs	r2, #255	; 0xff
 8013536:	f10d 0107 	add.w	r1, sp, #7
 801353a:	485e      	ldr	r0, [pc, #376]	; (80136b4 <RadioIrqProcess+0x2bc>)
 801353c:	f001 fa32 	bl	80149a4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8013540:	485d      	ldr	r0, [pc, #372]	; (80136b8 <RadioIrqProcess+0x2c0>)
 8013542:	f001 fa49 	bl	80149d8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8013546:	4b59      	ldr	r3, [pc, #356]	; (80136ac <RadioIrqProcess+0x2b4>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	f000 80a3 	beq.w	8013696 <RadioIrqProcess+0x29e>
 8013550:	689c      	ldr	r4, [r3, #8]
 8013552:	2c00      	cmp	r4, #0
 8013554:	f000 809f 	beq.w	8013696 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8013558:	4b50      	ldr	r3, [pc, #320]	; (801369c <RadioIrqProcess+0x2a4>)
 801355a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801355e:	2b01      	cmp	r3, #1
 8013560:	d11d      	bne.n	801359e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8013562:	4a4e      	ldr	r2, [pc, #312]	; (801369c <RadioIrqProcess+0x2a4>)
 8013564:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8013568:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 801356c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013570:	4850      	ldr	r0, [pc, #320]	; (80136b4 <RadioIrqProcess+0x2bc>)
 8013572:	47a0      	blx	r4
                break;
 8013574:	e08f      	b.n	8013696 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013576:	2000      	movs	r0, #0
 8013578:	f000 fdd8 	bl	801412c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801357c:	2100      	movs	r1, #0
 801357e:	f640 1002 	movw	r0, #2306	; 0x902
 8013582:	f000 fcdd 	bl	8013f40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8013586:	f640 1044 	movw	r0, #2372	; 0x944
 801358a:	f000 fce9 	bl	8013f60 <SUBGRF_ReadRegister>
 801358e:	f040 0102 	orr.w	r1, r0, #2
 8013592:	b2c9      	uxtb	r1, r1
 8013594:	f640 1044 	movw	r0, #2372	; 0x944
 8013598:	f000 fcd2 	bl	8013f40 <SUBGRF_WriteRegister>
 801359c:	e7ca      	b.n	8013534 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801359e:	4c3f      	ldr	r4, [pc, #252]	; (801369c <RadioIrqProcess+0x2a4>)
 80135a0:	4669      	mov	r1, sp
 80135a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80135a4:	f001 faf8 	bl	8014b98 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80135a8:	4b40      	ldr	r3, [pc, #256]	; (80136ac <RadioIrqProcess+0x2b4>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	689d      	ldr	r5, [r3, #8]
 80135ae:	9b00      	ldr	r3, [sp, #0]
 80135b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80135b4:	4a41      	ldr	r2, [pc, #260]	; (80136bc <RadioIrqProcess+0x2c4>)
 80135b6:	fb82 1203 	smull	r1, r2, r2, r3
 80135ba:	17db      	asrs	r3, r3, #31
 80135bc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80135c0:	b25b      	sxtb	r3, r3
 80135c2:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80135c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80135ca:	483a      	ldr	r0, [pc, #232]	; (80136b4 <RadioIrqProcess+0x2bc>)
 80135cc:	47a8      	blx	r5
                break;
 80135ce:	e062      	b.n	8013696 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80135d0:	2000      	movs	r0, #0
 80135d2:	f000 fdab 	bl	801412c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80135d6:	4b35      	ldr	r3, [pc, #212]	; (80136ac <RadioIrqProcess+0x2b4>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d05b      	beq.n	8013696 <RadioIrqProcess+0x29e>
 80135de:	699b      	ldr	r3, [r3, #24]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d058      	beq.n	8013696 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80135e4:	2001      	movs	r0, #1
 80135e6:	4798      	blx	r3
 80135e8:	e055      	b.n	8013696 <RadioIrqProcess+0x29e>
 80135ea:	4b2e      	ldr	r3, [pc, #184]	; (80136a4 <RadioIrqProcess+0x2ac>)
 80135ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80135f0:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80135f2:	482f      	ldr	r0, [pc, #188]	; (80136b0 <RadioIrqProcess+0x2b8>)
 80135f4:	f001 fe7a 	bl	80152ec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80135f8:	2000      	movs	r0, #0
 80135fa:	f000 fd97 	bl	801412c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80135fe:	4b2b      	ldr	r3, [pc, #172]	; (80136ac <RadioIrqProcess+0x2b4>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d047      	beq.n	8013696 <RadioIrqProcess+0x29e>
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d044      	beq.n	8013696 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 801360c:	4798      	blx	r3
 801360e:	e042      	b.n	8013696 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8013610:	4b2b      	ldr	r3, [pc, #172]	; (80136c0 <RadioIrqProcess+0x2c8>)
 8013612:	2201      	movs	r2, #1
 8013614:	2100      	movs	r1, #0
 8013616:	2002      	movs	r0, #2
 8013618:	f001 fbf0 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801361c:	4b1f      	ldr	r3, [pc, #124]	; (801369c <RadioIrqProcess+0x2a4>)
 801361e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013620:	b3c9      	cbz	r1, 8013696 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8013622:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8013626:	f640 1003 	movw	r0, #2307	; 0x903
 801362a:	f7ff fe4f 	bl	80132cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801362e:	4c1b      	ldr	r4, [pc, #108]	; (801369c <RadioIrqProcess+0x2a4>)
 8013630:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013634:	f640 1004 	movw	r0, #2308	; 0x904
 8013638:	f7ff fe48 	bl	80132cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801363c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8013640:	f640 1005 	movw	r0, #2309	; 0x905
 8013644:	f7ff fe42 	bl	80132cc <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8013648:	f640 1002 	movw	r0, #2306	; 0x902
 801364c:	f7ff febf 	bl	80133ce <RadioRead>
 8013650:	f040 0101 	orr.w	r1, r0, #1
 8013654:	b2c9      	uxtb	r1, r1
 8013656:	f640 1002 	movw	r0, #2306	; 0x902
 801365a:	f7ff fe37 	bl	80132cc <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801365e:	2200      	movs	r2, #0
 8013660:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013662:	4613      	mov	r3, r2
 8013664:	f240 2162 	movw	r1, #610	; 0x262
 8013668:	4608      	mov	r0, r1
 801366a:	f000 ff0c 	bl	8014486 <SUBGRF_SetDioIrqParams>
 801366e:	e012      	b.n	8013696 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8013670:	4b14      	ldr	r3, [pc, #80]	; (80136c4 <RadioIrqProcess+0x2cc>)
 8013672:	2201      	movs	r2, #1
 8013674:	2100      	movs	r1, #0
 8013676:	2002      	movs	r0, #2
 8013678:	f001 fbc0 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801367c:	f001 fad7 	bl	8014c2e <RFW_Is_Init>
 8013680:	2801      	cmp	r0, #1
 8013682:	d108      	bne.n	8013696 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8013684:	f001 fadf 	bl	8014c46 <RFW_ReceivePayload>
 8013688:	e005      	b.n	8013696 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801368a:	4b0f      	ldr	r3, [pc, #60]	; (80136c8 <RadioIrqProcess+0x2d0>)
 801368c:	2201      	movs	r2, #1
 801368e:	2100      	movs	r1, #0
 8013690:	2002      	movs	r0, #2
 8013692:	f001 fbb3 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
}
 8013696:	b003      	add	sp, #12
 8013698:	bd30      	pop	{r4, r5, pc}
 801369a:	bf00      	nop
 801369c:	20003d5c 	.word	0x20003d5c
 80136a0:	080168f0 	.word	0x080168f0
 80136a4:	48000400 	.word	0x48000400
 80136a8:	20003d44 	.word	0x20003d44
 80136ac:	20003d40 	.word	0x20003d40
 80136b0:	20003db8 	.word	0x20003db8
 80136b4:	20003c40 	.word	0x20003c40
 80136b8:	20003d80 	.word	0x20003d80
 80136bc:	10624dd3 	.word	0x10624dd3
 80136c0:	08016904 	.word	0x08016904
 80136c4:	08016910 	.word	0x08016910
 80136c8:	0801691c 	.word	0x0801691c
        TimerStop( &RxTimeoutTimer );
 80136cc:	4817      	ldr	r0, [pc, #92]	; (801372c <RadioIrqProcess+0x334>)
 80136ce:	f001 fe0d 	bl	80152ec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80136d2:	4b17      	ldr	r3, [pc, #92]	; (8013730 <RadioIrqProcess+0x338>)
 80136d4:	785b      	ldrb	r3, [r3, #1]
 80136d6:	b173      	cbz	r3, 80136f6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80136d8:	4b16      	ldr	r3, [pc, #88]	; (8013734 <RadioIrqProcess+0x33c>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d0da      	beq.n	8013696 <RadioIrqProcess+0x29e>
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d0d7      	beq.n	8013696 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80136e6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80136e8:	4b13      	ldr	r3, [pc, #76]	; (8013738 <RadioIrqProcess+0x340>)
 80136ea:	2201      	movs	r2, #1
 80136ec:	2100      	movs	r1, #0
 80136ee:	2002      	movs	r0, #2
 80136f0:	f001 fb84 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
 80136f4:	e7cf      	b.n	8013696 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80136f6:	2000      	movs	r0, #0
 80136f8:	f000 fd18 	bl	801412c <SUBGRF_SetStandby>
 80136fc:	e7ec      	b.n	80136d8 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80136fe:	4b0f      	ldr	r3, [pc, #60]	; (801373c <RadioIrqProcess+0x344>)
 8013700:	2201      	movs	r2, #1
 8013702:	2100      	movs	r1, #0
 8013704:	2002      	movs	r0, #2
 8013706:	f001 fb79 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801370a:	4b09      	ldr	r3, [pc, #36]	; (8013730 <RadioIrqProcess+0x338>)
 801370c:	785b      	ldrb	r3, [r3, #1]
 801370e:	b143      	cbz	r3, 8013722 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8013710:	4b08      	ldr	r3, [pc, #32]	; (8013734 <RadioIrqProcess+0x33c>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d0be      	beq.n	8013696 <RadioIrqProcess+0x29e>
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d0bb      	beq.n	8013696 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 801371e:	4798      	blx	r3
}
 8013720:	e7b9      	b.n	8013696 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013722:	2000      	movs	r0, #0
 8013724:	f000 fd02 	bl	801412c <SUBGRF_SetStandby>
 8013728:	e7f2      	b.n	8013710 <RadioIrqProcess+0x318>
 801372a:	bf00      	nop
 801372c:	20003d44 	.word	0x20003d44
 8013730:	20003d5c 	.word	0x20003d5c
 8013734:	20003d40 	.word	0x20003d40
 8013738:	08016928 	.word	0x08016928
 801373c:	08016934 	.word	0x08016934

08013740 <RadioOnDioIrq>:
{
 8013740:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8013742:	4b03      	ldr	r3, [pc, #12]	; (8013750 <RadioOnDioIrq+0x10>)
 8013744:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8013748:	f7ff fe56 	bl	80133f8 <RadioIrqProcess>
}
 801374c:	bd08      	pop	{r3, pc}
 801374e:	bf00      	nop
 8013750:	20003d5c 	.word	0x20003d5c

08013754 <RadioGetWakeupTime>:
{
 8013754:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8013756:	f001 f9a6 	bl	8014aa6 <SUBGRF_GetRadioWakeUpTime>
}
 801375a:	3003      	adds	r0, #3
 801375c:	bd08      	pop	{r3, pc}
	...

08013760 <RadioSetMaxPayloadLength>:
{
 8013760:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8013762:	2801      	cmp	r0, #1
 8013764:	d004      	beq.n	8013770 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8013766:	4b0a      	ldr	r3, [pc, #40]	; (8013790 <RadioSetMaxPayloadLength+0x30>)
 8013768:	7d5b      	ldrb	r3, [r3, #21]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d008      	beq.n	8013780 <RadioSetMaxPayloadLength+0x20>
}
 801376e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8013770:	4b08      	ldr	r3, [pc, #32]	; (8013794 <RadioSetMaxPayloadLength+0x34>)
 8013772:	7019      	strb	r1, [r3, #0]
 8013774:	4806      	ldr	r0, [pc, #24]	; (8013790 <RadioSetMaxPayloadLength+0x30>)
 8013776:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013778:	300e      	adds	r0, #14
 801377a:	f001 f853 	bl	8014824 <SUBGRF_SetPacketParams>
 801377e:	e7f6      	b.n	801376e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8013780:	4b04      	ldr	r3, [pc, #16]	; (8013794 <RadioSetMaxPayloadLength+0x34>)
 8013782:	7019      	strb	r1, [r3, #0]
 8013784:	4802      	ldr	r0, [pc, #8]	; (8013790 <RadioSetMaxPayloadLength+0x30>)
 8013786:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013788:	300e      	adds	r0, #14
 801378a:	f001 f84b 	bl	8014824 <SUBGRF_SetPacketParams>
}
 801378e:	e7ee      	b.n	801376e <RadioSetMaxPayloadLength+0xe>
 8013790:	20003d5c 	.word	0x20003d5c
 8013794:	20000100 	.word	0x20000100

08013798 <RadioReadRegisters>:
{
 8013798:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801379a:	f000 fc5f 	bl	801405c <SUBGRF_ReadRegisters>
}
 801379e:	bd08      	pop	{r3, pc}

080137a0 <RadioWriteRegisters>:
{
 80137a0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80137a2:	f000 fc19 	bl	8013fd8 <SUBGRF_WriteRegisters>
}
 80137a6:	bd08      	pop	{r3, pc}

080137a8 <RadioRssi>:
{
 80137a8:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80137aa:	f001 f8cb 	bl	8014944 <SUBGRF_GetRssiInst>
}
 80137ae:	b200      	sxth	r0, r0
 80137b0:	bd08      	pop	{r3, pc}
	...

080137b4 <RadioSetTxContinuousWave>:
{
 80137b4:	b538      	push	{r3, r4, r5, lr}
 80137b6:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80137b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80137bc:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80137c0:	f000 fed4 	bl	801456c <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80137c4:	4628      	mov	r0, r5
 80137c6:	f001 f957 	bl	8014a78 <SUBGRF_SetRfTxPower>
 80137ca:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80137cc:	210e      	movs	r1, #14
 80137ce:	f640 101f 	movw	r0, #2335	; 0x91f
 80137d2:	f000 fbb5 	bl	8013f40 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80137d6:	2101      	movs	r1, #1
 80137d8:	4628      	mov	r0, r5
 80137da:	f001 f939 	bl	8014a50 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80137de:	f000 fd7f 	bl	80142e0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80137e2:	4d04      	ldr	r5, [pc, #16]	; (80137f4 <RadioSetTxContinuousWave+0x40>)
 80137e4:	4621      	mov	r1, r4
 80137e6:	4628      	mov	r0, r5
 80137e8:	f001 fe20 	bl	801542c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80137ec:	4628      	mov	r0, r5
 80137ee:	f001 fdd7 	bl	80153a0 <UTIL_TIMER_Start>
}
 80137f2:	bd38      	pop	{r3, r4, r5, pc}
 80137f4:	20003db8 	.word	0x20003db8

080137f8 <RadioSetChannel>:
{
 80137f8:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80137fa:	f000 feb7 	bl	801456c <SUBGRF_SetRfFrequency>
}
 80137fe:	bd08      	pop	{r3, pc}

08013800 <RadioStartCad>:
{
 8013800:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013802:	2100      	movs	r1, #0
 8013804:	4b07      	ldr	r3, [pc, #28]	; (8013824 <RadioStartCad+0x24>)
 8013806:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801380a:	f001 f921 	bl	8014a50 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801380e:	2300      	movs	r3, #0
 8013810:	461a      	mov	r2, r3
 8013812:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8013816:	4608      	mov	r0, r1
 8013818:	f000 fe35 	bl	8014486 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 801381c:	f000 fd54 	bl	80142c8 <SUBGRF_SetCad>
}
 8013820:	bd08      	pop	{r3, pc}
 8013822:	bf00      	nop
 8013824:	20003d5c 	.word	0x20003d5c

08013828 <RadioRx>:
{
 8013828:	b538      	push	{r3, r4, r5, lr}
 801382a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 801382c:	f001 f9ff 	bl	8014c2e <RFW_Is_Init>
 8013830:	2801      	cmp	r0, #1
 8013832:	d019      	beq.n	8013868 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013834:	2300      	movs	r3, #0
 8013836:	461a      	mov	r2, r3
 8013838:	f240 2162 	movw	r1, #610	; 0x262
 801383c:	4608      	mov	r0, r1
 801383e:	f000 fe22 	bl	8014486 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8013842:	b9a4      	cbnz	r4, 801386e <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013844:	4c11      	ldr	r4, [pc, #68]	; (801388c <RadioRx+0x64>)
 8013846:	2100      	movs	r1, #0
 8013848:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801384a:	4b11      	ldr	r3, [pc, #68]	; (8013890 <RadioRx+0x68>)
 801384c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013850:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013852:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013856:	f001 f8fb 	bl	8014a50 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801385a:	7863      	ldrb	r3, [r4, #1]
 801385c:	b183      	cbz	r3, 8013880 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801385e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013862:	f000 fc9f 	bl	80141a4 <SUBGRF_SetRx>
}
 8013866:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8013868:	f001 f9e9 	bl	8014c3e <RFW_ReceiveInit>
 801386c:	e7e9      	b.n	8013842 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801386e:	4d09      	ldr	r5, [pc, #36]	; (8013894 <RadioRx+0x6c>)
 8013870:	4621      	mov	r1, r4
 8013872:	4628      	mov	r0, r5
 8013874:	f001 fdda 	bl	801542c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013878:	4628      	mov	r0, r5
 801387a:	f001 fd91 	bl	80153a0 <UTIL_TIMER_Start>
 801387e:	e7e1      	b.n	8013844 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8013880:	4b02      	ldr	r3, [pc, #8]	; (801388c <RadioRx+0x64>)
 8013882:	6898      	ldr	r0, [r3, #8]
 8013884:	0180      	lsls	r0, r0, #6
 8013886:	f000 fc8d 	bl	80141a4 <SUBGRF_SetRx>
}
 801388a:	e7ec      	b.n	8013866 <RadioRx+0x3e>
 801388c:	20003d5c 	.word	0x20003d5c
 8013890:	48000400 	.word	0x48000400
 8013894:	20003d44 	.word	0x20003d44

08013898 <RadioSleep>:
{
 8013898:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 801389a:	f04f 0004 	mov.w	r0, #4
 801389e:	f000 fc25 	bl	80140ec <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80138a2:	2002      	movs	r0, #2
 80138a4:	f7ee f9a8 	bl	8001bf8 <HAL_Delay>
}
 80138a8:	bd08      	pop	{r3, pc}
	...

080138ac <RadioSend>:
{
 80138ac:	b570      	push	{r4, r5, r6, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	4605      	mov	r5, r0
 80138b2:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80138b4:	2300      	movs	r3, #0
 80138b6:	461a      	mov	r2, r3
 80138b8:	f240 2101 	movw	r1, #513	; 0x201
 80138bc:	4608      	mov	r0, r1
 80138be:	f000 fde2 	bl	8014486 <SUBGRF_SetDioIrqParams>
 80138c2:	4b3f      	ldr	r3, [pc, #252]	; (80139c0 <RadioSend+0x114>)
 80138c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80138c8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80138ca:	4e3e      	ldr	r6, [pc, #248]	; (80139c4 <RadioSend+0x118>)
 80138cc:	2101      	movs	r1, #1
 80138ce:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80138d2:	f001 f8bd 	bl	8014a50 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80138d6:	7833      	ldrb	r3, [r6, #0]
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d103      	bne.n	80138e4 <RadioSend+0x38>
 80138dc:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80138e0:	2b06      	cmp	r3, #6
 80138e2:	d012      	beq.n	801390a <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80138e4:	f640 0089 	movw	r0, #2185	; 0x889
 80138e8:	f000 fb3a 	bl	8013f60 <SUBGRF_ReadRegister>
 80138ec:	f040 0104 	orr.w	r1, r0, #4
 80138f0:	b2c9      	uxtb	r1, r1
 80138f2:	f640 0089 	movw	r0, #2185	; 0x889
 80138f6:	f000 fb23 	bl	8013f40 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 80138fa:	4b32      	ldr	r3, [pc, #200]	; (80139c4 <RadioSend+0x118>)
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d818      	bhi.n	8013934 <RadioSend+0x88>
 8013902:	e8df f003 	tbb	[pc, r3]
 8013906:	0d23      	.short	0x0d23
 8013908:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801390a:	f640 0089 	movw	r0, #2185	; 0x889
 801390e:	f000 fb27 	bl	8013f60 <SUBGRF_ReadRegister>
 8013912:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013916:	f640 0089 	movw	r0, #2185	; 0x889
 801391a:	f000 fb11 	bl	8013f40 <SUBGRF_WriteRegister>
 801391e:	e7ec      	b.n	80138fa <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8013920:	4828      	ldr	r0, [pc, #160]	; (80139c4 <RadioSend+0x118>)
 8013922:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013924:	300e      	adds	r0, #14
 8013926:	f000 ff7d 	bl	8014824 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801392a:	2200      	movs	r2, #0
 801392c:	4621      	mov	r1, r4
 801392e:	4628      	mov	r0, r5
 8013930:	f000 fc30 	bl	8014194 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8013934:	4c24      	ldr	r4, [pc, #144]	; (80139c8 <RadioSend+0x11c>)
 8013936:	4b23      	ldr	r3, [pc, #140]	; (80139c4 <RadioSend+0x118>)
 8013938:	6859      	ldr	r1, [r3, #4]
 801393a:	4620      	mov	r0, r4
 801393c:	f001 fd76 	bl	801542c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8013940:	4620      	mov	r0, r4
 8013942:	f001 fd2d 	bl	80153a0 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8013946:	2000      	movs	r0, #0
}
 8013948:	b002      	add	sp, #8
 801394a:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 801394c:	f001 f96f 	bl	8014c2e <RFW_Is_Init>
 8013950:	2801      	cmp	r0, #1
 8013952:	d00a      	beq.n	801396a <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8013954:	481b      	ldr	r0, [pc, #108]	; (80139c4 <RadioSend+0x118>)
 8013956:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013958:	300e      	adds	r0, #14
 801395a:	f000 ff63 	bl	8014824 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801395e:	2200      	movs	r2, #0
 8013960:	4621      	mov	r1, r4
 8013962:	4628      	mov	r0, r5
 8013964:	f000 fc16 	bl	8014194 <SUBGRF_SendPayload>
 8013968:	e7e4      	b.n	8013934 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801396a:	f10d 0207 	add.w	r2, sp, #7
 801396e:	4621      	mov	r1, r4
 8013970:	4628      	mov	r0, r5
 8013972:	f001 f961 	bl	8014c38 <RFW_TransmitInit>
 8013976:	b968      	cbnz	r0, 8013994 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8013978:	4812      	ldr	r0, [pc, #72]	; (80139c4 <RadioSend+0x118>)
 801397a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801397e:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013980:	300e      	adds	r0, #14
 8013982:	f000 ff4f 	bl	8014824 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8013986:	2200      	movs	r2, #0
 8013988:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801398c:	4628      	mov	r0, r5
 801398e:	f000 fc01 	bl	8014194 <SUBGRF_SendPayload>
 8013992:	e7cf      	b.n	8013934 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8013994:	4b0d      	ldr	r3, [pc, #52]	; (80139cc <RadioSend+0x120>)
 8013996:	2201      	movs	r2, #1
 8013998:	2100      	movs	r1, #0
 801399a:	2002      	movs	r0, #2
 801399c:	f001 fa2e 	bl	8014dfc <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80139a0:	2003      	movs	r0, #3
 80139a2:	e7d1      	b.n	8013948 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80139a4:	4807      	ldr	r0, [pc, #28]	; (80139c4 <RadioSend+0x118>)
 80139a6:	2302      	movs	r3, #2
 80139a8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80139aa:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80139ac:	300e      	adds	r0, #14
 80139ae:	f000 ff39 	bl	8014824 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80139b2:	2200      	movs	r2, #0
 80139b4:	4621      	mov	r1, r4
 80139b6:	4628      	mov	r0, r5
 80139b8:	f000 fbec 	bl	8014194 <SUBGRF_SendPayload>
            break;
 80139bc:	e7ba      	b.n	8013934 <RadioSend+0x88>
 80139be:	bf00      	nop
 80139c0:	48000400 	.word	0x48000400
 80139c4:	20003d5c 	.word	0x20003d5c
 80139c8:	20003db8 	.word	0x20003db8
 80139cc:	08016944 	.word	0x08016944

080139d0 <RadioRandom>:
{
 80139d0:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80139d2:	2300      	movs	r3, #0
 80139d4:	461a      	mov	r2, r3
 80139d6:	4619      	mov	r1, r3
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 fd54 	bl	8014486 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 80139de:	f000 fbfb 	bl	80141d8 <SUBGRF_GetRandom>
}
 80139e2:	bd08      	pop	{r3, pc}

080139e4 <RadioSetModem>:
{
 80139e4:	b510      	push	{r4, lr}
 80139e6:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 80139e8:	4b14      	ldr	r3, [pc, #80]	; (8013a3c <RadioSetModem+0x58>)
 80139ea:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 80139ec:	f001 f92c 	bl	8014c48 <RFW_SetRadioModem>
    switch( modem )
 80139f0:	2c01      	cmp	r4, #1
 80139f2:	d010      	beq.n	8013a16 <RadioSetModem+0x32>
 80139f4:	2c03      	cmp	r4, #3
 80139f6:	d01a      	beq.n	8013a2e <RadioSetModem+0x4a>
 80139f8:	b134      	cbz	r4, 8013a08 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80139fa:	2003      	movs	r0, #3
 80139fc:	f000 fde2 	bl	80145c4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8013a00:	4b0e      	ldr	r3, [pc, #56]	; (8013a3c <RadioSetModem+0x58>)
 8013a02:	2200      	movs	r2, #0
 8013a04:	735a      	strb	r2, [r3, #13]
}
 8013a06:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8013a08:	2000      	movs	r0, #0
 8013a0a:	f000 fddb 	bl	80145c4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8013a0e:	4b0b      	ldr	r3, [pc, #44]	; (8013a3c <RadioSetModem+0x58>)
 8013a10:	2200      	movs	r2, #0
 8013a12:	735a      	strb	r2, [r3, #13]
        break;
 8013a14:	e7f7      	b.n	8013a06 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8013a16:	2001      	movs	r0, #1
 8013a18:	f000 fdd4 	bl	80145c4 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8013a1c:	4b07      	ldr	r3, [pc, #28]	; (8013a3c <RadioSetModem+0x58>)
 8013a1e:	7b5a      	ldrb	r2, [r3, #13]
 8013a20:	7b18      	ldrb	r0, [r3, #12]
 8013a22:	4282      	cmp	r2, r0
 8013a24:	d0ef      	beq.n	8013a06 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8013a26:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8013a28:	f000 f80a 	bl	8013a40 <RadioSetPublicNetwork>
 8013a2c:	e7eb      	b.n	8013a06 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8013a2e:	2002      	movs	r0, #2
 8013a30:	f000 fdc8 	bl	80145c4 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8013a34:	4b01      	ldr	r3, [pc, #4]	; (8013a3c <RadioSetModem+0x58>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	735a      	strb	r2, [r3, #13]
}
 8013a3a:	e7e4      	b.n	8013a06 <RadioSetModem+0x22>
 8013a3c:	20003d5c 	.word	0x20003d5c

08013a40 <RadioSetPublicNetwork>:
{
 8013a40:	b510      	push	{r4, lr}
 8013a42:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8013a44:	4b0e      	ldr	r3, [pc, #56]	; (8013a80 <RadioSetPublicNetwork+0x40>)
 8013a46:	7318      	strb	r0, [r3, #12]
 8013a48:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8013a4a:	2001      	movs	r0, #1
 8013a4c:	f7ff ffca 	bl	80139e4 <RadioSetModem>
    if( enable == true )
 8013a50:	b154      	cbz	r4, 8013a68 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8013a52:	2134      	movs	r1, #52	; 0x34
 8013a54:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8013a58:	f000 fa72 	bl	8013f40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8013a5c:	2144      	movs	r1, #68	; 0x44
 8013a5e:	f240 7041 	movw	r0, #1857	; 0x741
 8013a62:	f000 fa6d 	bl	8013f40 <SUBGRF_WriteRegister>
}
 8013a66:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8013a68:	2114      	movs	r1, #20
 8013a6a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8013a6e:	f000 fa67 	bl	8013f40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8013a72:	2124      	movs	r1, #36	; 0x24
 8013a74:	f240 7041 	movw	r0, #1857	; 0x741
 8013a78:	f000 fa62 	bl	8013f40 <SUBGRF_WriteRegister>
}
 8013a7c:	e7f3      	b.n	8013a66 <RadioSetPublicNetwork+0x26>
 8013a7e:	bf00      	nop
 8013a80:	20003d5c 	.word	0x20003d5c

08013a84 <RadioSetTxConfig>:
{
 8013a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a88:	b083      	sub	sp, #12
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	460e      	mov	r6, r1
 8013a8e:	4617      	mov	r7, r2
 8013a90:	461d      	mov	r5, r3
 8013a92:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8013a96:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8013a9a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8013a9e:	f001 f8c5 	bl	8014c2c <RFW_DeInit>
    switch( modem )
 8013aa2:	b1ac      	cbz	r4, 8013ad0 <RadioSetTxConfig+0x4c>
 8013aa4:	2c01      	cmp	r4, #1
 8013aa6:	d05a      	beq.n	8013b5e <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f000 ffe5 	bl	8014a78 <SUBGRF_SetRfTxPower>
 8013aae:	4c55      	ldr	r4, [pc, #340]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013ab0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8013ab4:	210e      	movs	r1, #14
 8013ab6:	f640 101f 	movw	r0, #2335	; 0x91f
 8013aba:	f000 fa41 	bl	8013f40 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8013abe:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013ac2:	f001 f8b8 	bl	8014c36 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8013ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ac8:	6063      	str	r3, [r4, #4]
}
 8013aca:	b003      	add	sp, #12
 8013acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8013ad0:	4c4c      	ldr	r4, [pc, #304]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013ad2:	f04f 0b00 	mov.w	fp, #0
 8013ad6:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013adc:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013ade:	230b      	movs	r3, #11
 8013ae0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f001 f83f 	bl	8014b68 <SUBGRF_GetFskBandwidthRegValue>
 8013aea:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8013aee:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013af0:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8013af4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013af8:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013afc:	2304      	movs	r3, #4
 8013afe:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8013b00:	2318      	movs	r3, #24
 8013b02:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013b04:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013b08:	f089 0901 	eor.w	r9, r9, #1
 8013b0c:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8013b10:	f1ba 0f00 	cmp.w	sl, #0
 8013b14:	d01f      	beq.n	8013b56 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013b16:	22f2      	movs	r2, #242	; 0xf2
 8013b18:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013b1a:	4c3a      	ldr	r4, [pc, #232]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013b1c:	2301      	movs	r3, #1
 8013b1e:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8013b20:	f7ff fc50 	bl	80133c4 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8013b24:	2000      	movs	r0, #0
 8013b26:	f7ff ff5d 	bl	80139e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013b2a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013b2e:	f000 fdf1 	bl	8014714 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013b32:	f104 000e 	add.w	r0, r4, #14
 8013b36:	f000 fe75 	bl	8014824 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013b3a:	4a33      	ldr	r2, [pc, #204]	; (8013c08 <RadioSetTxConfig+0x184>)
 8013b3c:	466b      	mov	r3, sp
 8013b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b46:	4618      	mov	r0, r3
 8013b48:	f000 fa56 	bl	8013ff8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8013b4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013b50:	f000 fa29 	bl	8013fa6 <SUBGRF_SetWhiteningSeed>
            break;
 8013b54:	e7a8      	b.n	8013aa8 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013b56:	4b2b      	ldr	r3, [pc, #172]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013b58:	2201      	movs	r2, #1
 8013b5a:	75da      	strb	r2, [r3, #23]
 8013b5c:	e7dd      	b.n	8013b1a <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013b5e:	4a29      	ldr	r2, [pc, #164]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013b60:	2301      	movs	r3, #1
 8013b62:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8013b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8013b6e:	4927      	ldr	r1, [pc, #156]	; (8013c0c <RadioSetTxConfig+0x188>)
 8013b70:	5d49      	ldrb	r1, [r1, r5]
 8013b72:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8013b76:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8013b7a:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013b7e:	b91d      	cbnz	r5, 8013b88 <RadioSetTxConfig+0x104>
 8013b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b82:	3a0b      	subs	r2, #11
 8013b84:	2a01      	cmp	r2, #1
 8013b86:	d92c      	bls.n	8013be2 <RadioSetTxConfig+0x15e>
 8013b88:	2d01      	cmp	r5, #1
 8013b8a:	d027      	beq.n	8013bdc <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013b8c:	4a1d      	ldr	r2, [pc, #116]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013b8e:	2100      	movs	r1, #0
 8013b90:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013b94:	4a1b      	ldr	r2, [pc, #108]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013b96:	2101      	movs	r1, #1
 8013b98:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013b9a:	3b05      	subs	r3, #5
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	428b      	cmp	r3, r1
 8013ba0:	d924      	bls.n	8013bec <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013ba2:	4b18      	ldr	r3, [pc, #96]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013ba4:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8013ba8:	4c16      	ldr	r4, [pc, #88]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013baa:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013bae:	4b18      	ldr	r3, [pc, #96]	; (8013c10 <RadioSetTxConfig+0x18c>)
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013bb4:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013bb8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013bbc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013bc0:	f7ff fc00 	bl	80133c4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	f7ff ff0d 	bl	80139e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013bca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013bce:	f000 fda1 	bl	8014714 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013bd2:	f104 000e 	add.w	r0, r4, #14
 8013bd6:	f000 fe25 	bl	8014824 <SUBGRF_SetPacketParams>
            break;
 8013bda:	e765      	b.n	8013aa8 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bde:	2a0c      	cmp	r2, #12
 8013be0:	d1d4      	bne.n	8013b8c <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013be2:	4a08      	ldr	r2, [pc, #32]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013be4:	2101      	movs	r1, #1
 8013be6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013bea:	e7d3      	b.n	8013b94 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8013bec:	f1b8 0f0b 	cmp.w	r8, #11
 8013bf0:	d803      	bhi.n	8013bfa <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	220c      	movs	r2, #12
 8013bf6:	839a      	strh	r2, [r3, #28]
 8013bf8:	e7d6      	b.n	8013ba8 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013bfa:	4b02      	ldr	r3, [pc, #8]	; (8013c04 <RadioSetTxConfig+0x180>)
 8013bfc:	f8a3 801c 	strh.w	r8, [r3, #28]
 8013c00:	e7d2      	b.n	8013ba8 <RadioSetTxConfig+0x124>
 8013c02:	bf00      	nop
 8013c04:	20003d5c 	.word	0x20003d5c
 8013c08:	080159ac 	.word	0x080159ac
 8013c0c:	0801695c 	.word	0x0801695c
 8013c10:	20000100 	.word	0x20000100

08013c14 <RadioSetRxConfig>:
{
 8013c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c18:	b085      	sub	sp, #20
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	460d      	mov	r5, r1
 8013c1e:	4616      	mov	r6, r2
 8013c20:	9301      	str	r3, [sp, #4]
 8013c22:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8013c26:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8013c2a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8013c2e:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8013c32:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8013c36:	4b73      	ldr	r3, [pc, #460]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013c38:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8013c3c:	f000 fff6 	bl	8014c2c <RFW_DeInit>
    if( rxContinuous == true )
 8013c40:	f1b8 0f00 	cmp.w	r8, #0
 8013c44:	d001      	beq.n	8013c4a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8013c46:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8013c4a:	b14f      	cbz	r7, 8013c60 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8013c4c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8013c50:	4b6d      	ldr	r3, [pc, #436]	; (8013e08 <RadioSetRxConfig+0x1f4>)
 8013c52:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8013c54:	b144      	cbz	r4, 8013c68 <RadioSetRxConfig+0x54>
 8013c56:	2c01      	cmp	r4, #1
 8013c58:	d057      	beq.n	8013d0a <RadioSetRxConfig+0xf6>
}
 8013c5a:	b005      	add	sp, #20
 8013c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8013c60:	4b69      	ldr	r3, [pc, #420]	; (8013e08 <RadioSetRxConfig+0x1f4>)
 8013c62:	22ff      	movs	r2, #255	; 0xff
 8013c64:	701a      	strb	r2, [r3, #0]
 8013c66:	e7f5      	b.n	8013c54 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013c68:	2000      	movs	r0, #0
 8013c6a:	f000 fb47 	bl	80142fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8013c6e:	4c65      	ldr	r4, [pc, #404]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013c70:	f04f 0800 	mov.w	r8, #0
 8013c74:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8013c78:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8013c7a:	230b      	movs	r3, #11
 8013c7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8013c80:	4628      	mov	r0, r5
 8013c82:	f000 ff71 	bl	8014b68 <SUBGRF_GetFskBandwidthRegValue>
 8013c86:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8013c8a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8013c8e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8013c92:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8013c96:	2304      	movs	r3, #4
 8013c98:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8013c9a:	2318      	movs	r3, #24
 8013c9c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8013c9e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8013ca2:	f087 0701 	eor.w	r7, r7, #1
 8013ca6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8013ca8:	4b57      	ldr	r3, [pc, #348]	; (8013e08 <RadioSetRxConfig+0x1f4>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8013cae:	f1bb 0f00 	cmp.w	fp, #0
 8013cb2:	d026      	beq.n	8013d02 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8013cb4:	22f2      	movs	r2, #242	; 0xf2
 8013cb6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8013cb8:	4c52      	ldr	r4, [pc, #328]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013cba:	2301      	movs	r3, #1
 8013cbc:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8013cbe:	f7ff fb81 	bl	80133c4 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7ff fe8e 	bl	80139e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013cc8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013ccc:	f000 fd22 	bl	8014714 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013cd0:	f104 000e 	add.w	r0, r4, #14
 8013cd4:	f000 fda6 	bl	8014824 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8013cd8:	4a4c      	ldr	r2, [pc, #304]	; (8013e0c <RadioSetRxConfig+0x1f8>)
 8013cda:	ab02      	add	r3, sp, #8
 8013cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ce0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f000 f987 	bl	8013ff8 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8013cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013cee:	f000 f95a 	bl	8013fa6 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8013cf2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8013cf6:	fb03 f30a 	mul.w	r3, r3, sl
 8013cfa:	fbb3 f3f6 	udiv	r3, r3, r6
 8013cfe:	60a3      	str	r3, [r4, #8]
            break;
 8013d00:	e7ab      	b.n	8013c5a <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8013d02:	4b40      	ldr	r3, [pc, #256]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d04:	2201      	movs	r2, #1
 8013d06:	75da      	strb	r2, [r3, #23]
 8013d08:	e7d6      	b.n	8013cb8 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	f000 faf6 	bl	80142fc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8013d10:	4a3c      	ldr	r2, [pc, #240]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d12:	2301      	movs	r3, #1
 8013d14:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8013d18:	b2f3      	uxtb	r3, r6
 8013d1a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013d1e:	493c      	ldr	r1, [pc, #240]	; (8013e10 <RadioSetRxConfig+0x1fc>)
 8013d20:	5d49      	ldrb	r1, [r1, r5]
 8013d22:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8013d26:	9901      	ldr	r1, [sp, #4]
 8013d28:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013d2c:	b91d      	cbnz	r5, 8013d36 <RadioSetRxConfig+0x122>
 8013d2e:	f1a6 020b 	sub.w	r2, r6, #11
 8013d32:	2a01      	cmp	r2, #1
 8013d34:	d94b      	bls.n	8013dce <RadioSetRxConfig+0x1ba>
 8013d36:	2d01      	cmp	r5, #1
 8013d38:	d047      	beq.n	8013dca <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8013d3a:	4a32      	ldr	r2, [pc, #200]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013d42:	4a30      	ldr	r2, [pc, #192]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d44:	2101      	movs	r1, #1
 8013d46:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8013d48:	3b05      	subs	r3, #5
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	428b      	cmp	r3, r1
 8013d4e:	d943      	bls.n	8013dd8 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013d50:	4b2c      	ldr	r3, [pc, #176]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d52:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8013d56:	4c2b      	ldr	r4, [pc, #172]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013d58:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8013d5a:	4b2b      	ldr	r3, [pc, #172]	; (8013e08 <RadioSetRxConfig+0x1f4>)
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013d60:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013d64:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013d68:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013d6c:	f7ff fb2a 	bl	80133c4 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013d70:	2001      	movs	r0, #1
 8013d72:	f7ff fe37 	bl	80139e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8013d76:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013d7a:	f000 fccb 	bl	8014714 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013d7e:	f104 000e 	add.w	r0, r4, #14
 8013d82:	f000 fd4f 	bl	8014824 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8013d86:	fa5f f08a 	uxtb.w	r0, sl
 8013d8a:	f000 fac4 	bl	8014316 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8013d8e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013d92:	f000 f8e5 	bl	8013f60 <SUBGRF_ReadRegister>
 8013d96:	f000 0101 	and.w	r1, r0, #1
 8013d9a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8013d9e:	f000 f8cf 	bl	8013f40 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8013da2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d021      	beq.n	8013dee <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8013daa:	f240 7036 	movw	r0, #1846	; 0x736
 8013dae:	f000 f8d7 	bl	8013f60 <SUBGRF_ReadRegister>
 8013db2:	f040 0104 	orr.w	r1, r0, #4
 8013db6:	b2c9      	uxtb	r1, r1
 8013db8:	f240 7036 	movw	r0, #1846	; 0x736
 8013dbc:	f000 f8c0 	bl	8013f40 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8013dc0:	4b10      	ldr	r3, [pc, #64]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dc6:	609a      	str	r2, [r3, #8]
}
 8013dc8:	e747      	b.n	8013c5a <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013dca:	2e0c      	cmp	r6, #12
 8013dcc:	d1b5      	bne.n	8013d3a <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8013dce:	4a0d      	ldr	r2, [pc, #52]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013dd0:	2101      	movs	r1, #1
 8013dd2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8013dd6:	e7b4      	b.n	8013d42 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8013dd8:	f1b9 0f0b 	cmp.w	r9, #11
 8013ddc:	d803      	bhi.n	8013de6 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8013dde:	4613      	mov	r3, r2
 8013de0:	220c      	movs	r2, #12
 8013de2:	839a      	strh	r2, [r3, #28]
 8013de4:	e7b7      	b.n	8013d56 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013de6:	4b07      	ldr	r3, [pc, #28]	; (8013e04 <RadioSetRxConfig+0x1f0>)
 8013de8:	f8a3 901c 	strh.w	r9, [r3, #28]
 8013dec:	e7b3      	b.n	8013d56 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8013dee:	f240 7036 	movw	r0, #1846	; 0x736
 8013df2:	f000 f8b5 	bl	8013f60 <SUBGRF_ReadRegister>
 8013df6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013dfa:	f240 7036 	movw	r0, #1846	; 0x736
 8013dfe:	f000 f89f 	bl	8013f40 <SUBGRF_WriteRegister>
 8013e02:	e7dd      	b.n	8013dc0 <RadioSetRxConfig+0x1ac>
 8013e04:	20003d5c 	.word	0x20003d5c
 8013e08:	20000100 	.word	0x20000100
 8013e0c:	080159ac 	.word	0x080159ac
 8013e10:	0801695c 	.word	0x0801695c

08013e14 <RadioIsChannelFree>:
{
 8013e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e16:	b08b      	sub	sp, #44	; 0x2c
 8013e18:	4604      	mov	r4, r0
 8013e1a:	460f      	mov	r7, r1
 8013e1c:	4616      	mov	r6, r2
 8013e1e:	461d      	mov	r5, r3
    RadioStandby( );
 8013e20:	f7ff fad0 	bl	80133c4 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8013e24:	2000      	movs	r0, #0
 8013e26:	f7ff fddd 	bl	80139e4 <RadioSetModem>
    RadioSetChannel( freq );
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff fce4 	bl	80137f8 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8013e30:	2301      	movs	r3, #1
 8013e32:	9309      	str	r3, [sp, #36]	; 0x24
 8013e34:	2400      	movs	r4, #0
 8013e36:	9408      	str	r4, [sp, #32]
 8013e38:	9407      	str	r4, [sp, #28]
 8013e3a:	9406      	str	r4, [sp, #24]
 8013e3c:	9405      	str	r4, [sp, #20]
 8013e3e:	9404      	str	r4, [sp, #16]
 8013e40:	9403      	str	r4, [sp, #12]
 8013e42:	9402      	str	r4, [sp, #8]
 8013e44:	2303      	movs	r3, #3
 8013e46:	9301      	str	r3, [sp, #4]
 8013e48:	9700      	str	r7, [sp, #0]
 8013e4a:	4623      	mov	r3, r4
 8013e4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8013e50:	4639      	mov	r1, r7
 8013e52:	4620      	mov	r0, r4
 8013e54:	f7ff fede 	bl	8013c14 <RadioSetRxConfig>
    RadioRx( 0 );
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f7ff fce5 	bl	8013828 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8013e5e:	f7ff fc79 	bl	8013754 <RadioGetWakeupTime>
 8013e62:	f7ed fec9 	bl	8001bf8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8013e66:	f001 fa01 	bl	801526c <UTIL_TIMER_GetCurrentTime>
 8013e6a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	f001 fa07 	bl	8015280 <UTIL_TIMER_GetElapsedTime>
 8013e72:	42a8      	cmp	r0, r5
 8013e74:	d206      	bcs.n	8013e84 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8013e76:	2000      	movs	r0, #0
 8013e78:	f7ff fc96 	bl	80137a8 <RadioRssi>
        if( rssi > rssiThresh )
 8013e7c:	42b0      	cmp	r0, r6
 8013e7e:	ddf5      	ble.n	8013e6c <RadioIsChannelFree+0x58>
            status = false;
 8013e80:	2400      	movs	r4, #0
 8013e82:	e000      	b.n	8013e86 <RadioIsChannelFree+0x72>
    bool status = true;
 8013e84:	2401      	movs	r4, #1
    RadioStandby( );
 8013e86:	f7ff fa9d 	bl	80133c4 <RadioStandby>
}
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	b00b      	add	sp, #44	; 0x2c
 8013e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e90 <RadioInit>:
{
 8013e90:	b570      	push	{r4, r5, r6, lr}
 8013e92:	b082      	sub	sp, #8
    RadioEvents = events;
 8013e94:	4b1d      	ldr	r3, [pc, #116]	; (8013f0c <RadioInit+0x7c>)
 8013e96:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8013e98:	4d1d      	ldr	r5, [pc, #116]	; (8013f10 <RadioInit+0x80>)
 8013e9a:	2400      	movs	r4, #0
 8013e9c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8013e9e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8013ea0:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013ea2:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8013ea4:	481b      	ldr	r0, [pc, #108]	; (8013f14 <RadioInit+0x84>)
 8013ea6:	f000 fb27 	bl	80144f8 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8013eaa:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8013eac:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8013eae:	f000 fa53 	bl	8014358 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8013eb2:	4621      	mov	r1, r4
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	f000 fd27 	bl	8014908 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8013eba:	2204      	movs	r2, #4
 8013ebc:	4621      	mov	r1, r4
 8013ebe:	2001      	movs	r0, #1
 8013ec0:	f000 fb9a 	bl	80145f8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013ec4:	4623      	mov	r3, r4
 8013ec6:	4622      	mov	r2, r4
 8013ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ecc:	4608      	mov	r0, r1
 8013ece:	f000 fada 	bl	8014486 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8013ed2:	f7ff fce1 	bl	8013898 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8013ed6:	4e10      	ldr	r6, [pc, #64]	; (8013f18 <RadioInit+0x88>)
 8013ed8:	9400      	str	r4, [sp, #0]
 8013eda:	4b10      	ldr	r3, [pc, #64]	; (8013f1c <RadioInit+0x8c>)
 8013edc:	4622      	mov	r2, r4
 8013ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f001 f9a4 	bl	8015230 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8013ee8:	4d0d      	ldr	r5, [pc, #52]	; (8013f20 <RadioInit+0x90>)
 8013eea:	9400      	str	r4, [sp, #0]
 8013eec:	4b0d      	ldr	r3, [pc, #52]	; (8013f24 <RadioInit+0x94>)
 8013eee:	4622      	mov	r2, r4
 8013ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	f001 f99b 	bl	8015230 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8013efa:	4630      	mov	r0, r6
 8013efc:	f001 f9f6 	bl	80152ec <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8013f00:	4628      	mov	r0, r5
 8013f02:	f001 f9f3 	bl	80152ec <UTIL_TIMER_Stop>
}
 8013f06:	b002      	add	sp, #8
 8013f08:	bd70      	pop	{r4, r5, r6, pc}
 8013f0a:	bf00      	nop
 8013f0c:	20003d40 	.word	0x20003d40
 8013f10:	20003d5c 	.word	0x20003d5c
 8013f14:	08013741 	.word	0x08013741
 8013f18:	20003db8 	.word	0x20003db8
 8013f1c:	08013289 	.word	0x08013289
 8013f20:	20003d44 	.word	0x20003d44
 8013f24:	080132b1 	.word	0x080132b1

08013f28 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8013f28:	4b01      	ldr	r3, [pc, #4]	; (8013f30 <SUBGRF_GetOperatingMode+0x8>)
 8013f2a:	7818      	ldrb	r0, [r3, #0]
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop
 8013f30:	20003dd6 	.word	0x20003dd6

08013f34 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8013f34:	4b01      	ldr	r3, [pc, #4]	; (8013f3c <SUBGRF_GetPacketType+0x8>)
 8013f36:	7818      	ldrb	r0, [r3, #0]
 8013f38:	4770      	bx	lr
 8013f3a:	bf00      	nop
 8013f3c:	20003dd7 	.word	0x20003dd7

08013f40 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8013f40:	b500      	push	{lr}
 8013f42:	b083      	sub	sp, #12
 8013f44:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8013f48:	2301      	movs	r3, #1
 8013f4a:	f10d 0207 	add.w	r2, sp, #7
 8013f4e:	4601      	mov	r1, r0
 8013f50:	4802      	ldr	r0, [pc, #8]	; (8013f5c <SUBGRF_WriteRegister+0x1c>)
 8013f52:	f7f2 fed9 	bl	8006d08 <HAL_SUBGHZ_WriteRegisters>
}
 8013f56:	b003      	add	sp, #12
 8013f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f5c:	20000238 	.word	0x20000238

08013f60 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8013f60:	b500      	push	{lr}
 8013f62:	b083      	sub	sp, #12
 8013f64:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8013f66:	2301      	movs	r3, #1
 8013f68:	f10d 0207 	add.w	r2, sp, #7
 8013f6c:	4803      	ldr	r0, [pc, #12]	; (8013f7c <SUBGRF_ReadRegister+0x1c>)
 8013f6e:	f7f2 ff1b 	bl	8006da8 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8013f72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013f76:	b003      	add	sp, #12
 8013f78:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f7c:	20000238 	.word	0x20000238

08013f80 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8013f80:	b510      	push	{r4, lr}
 8013f82:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8013f84:	f7ee fff8 	bl	8002f78 <RBI_IsDCDC>
 8013f88:	2801      	cmp	r0, #1
 8013f8a:	d000      	beq.n	8013f8e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8013f8c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8013f8e:	f640 1023 	movw	r0, #2339	; 0x923
 8013f92:	f7ff ffe5 	bl	8013f60 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8013f96:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8013f9a:	4321      	orrs	r1, r4
 8013f9c:	f640 1023 	movw	r0, #2339	; 0x923
 8013fa0:	f7ff ffce 	bl	8013f40 <SUBGRF_WriteRegister>
}
 8013fa4:	e7f2      	b.n	8013f8c <Radio_SMPS_Set+0xc>

08013fa6 <SUBGRF_SetWhiteningSeed>:
{
 8013fa6:	b510      	push	{r4, lr}
 8013fa8:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8013faa:	f7ff ffc3 	bl	8013f34 <SUBGRF_GetPacketType>
 8013fae:	b100      	cbz	r0, 8013fb2 <SUBGRF_SetWhiteningSeed+0xc>
}
 8013fb0:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8013fb2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013fb6:	f7ff ffd3 	bl	8013f60 <SUBGRF_ReadRegister>
 8013fba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8013fbe:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8013fc2:	4301      	orrs	r1, r0
 8013fc4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013fc8:	f7ff ffba 	bl	8013f40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8013fcc:	b2e1      	uxtb	r1, r4
 8013fce:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8013fd2:	f7ff ffb5 	bl	8013f40 <SUBGRF_WriteRegister>
}
 8013fd6:	e7eb      	b.n	8013fb0 <SUBGRF_SetWhiteningSeed+0xa>

08013fd8 <SUBGRF_WriteRegisters>:
{
 8013fd8:	b510      	push	{r4, lr}
 8013fda:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fdc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013fe0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8013fe2:	460a      	mov	r2, r1
 8013fe4:	4601      	mov	r1, r0
 8013fe6:	4803      	ldr	r0, [pc, #12]	; (8013ff4 <SUBGRF_WriteRegisters+0x1c>)
 8013fe8:	f7f2 fe8e 	bl	8006d08 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fec:	f384 8810 	msr	PRIMASK, r4
}
 8013ff0:	bd10      	pop	{r4, pc}
 8013ff2:	bf00      	nop
 8013ff4:	20000238 	.word	0x20000238

08013ff8 <SUBGRF_SetSyncWord>:
{
 8013ff8:	b508      	push	{r3, lr}
 8013ffa:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013ffc:	2208      	movs	r2, #8
 8013ffe:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8014002:	f7ff ffe9 	bl	8013fd8 <SUBGRF_WriteRegisters>
}
 8014006:	2000      	movs	r0, #0
 8014008:	bd08      	pop	{r3, pc}

0801400a <SUBGRF_SetCrcSeed>:
{
 801400a:	b500      	push	{lr}
 801400c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801400e:	0a03      	lsrs	r3, r0, #8
 8014010:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8014014:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014018:	f7ff ff8c 	bl	8013f34 <SUBGRF_GetPacketType>
 801401c:	b110      	cbz	r0, 8014024 <SUBGRF_SetCrcSeed+0x1a>
}
 801401e:	b003      	add	sp, #12
 8014020:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8014024:	2202      	movs	r2, #2
 8014026:	a901      	add	r1, sp, #4
 8014028:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801402c:	f7ff ffd4 	bl	8013fd8 <SUBGRF_WriteRegisters>
}
 8014030:	e7f5      	b.n	801401e <SUBGRF_SetCrcSeed+0x14>

08014032 <SUBGRF_SetCrcPolynomial>:
{
 8014032:	b500      	push	{lr}
 8014034:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8014036:	0a03      	lsrs	r3, r0, #8
 8014038:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801403c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014040:	f7ff ff78 	bl	8013f34 <SUBGRF_GetPacketType>
 8014044:	b110      	cbz	r0, 801404c <SUBGRF_SetCrcPolynomial+0x1a>
}
 8014046:	b003      	add	sp, #12
 8014048:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801404c:	2202      	movs	r2, #2
 801404e:	a901      	add	r1, sp, #4
 8014050:	f240 60be 	movw	r0, #1726	; 0x6be
 8014054:	f7ff ffc0 	bl	8013fd8 <SUBGRF_WriteRegisters>
}
 8014058:	e7f5      	b.n	8014046 <SUBGRF_SetCrcPolynomial+0x14>
	...

0801405c <SUBGRF_ReadRegisters>:
{
 801405c:	b510      	push	{r4, lr}
 801405e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014060:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014064:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8014066:	460a      	mov	r2, r1
 8014068:	4601      	mov	r1, r0
 801406a:	4803      	ldr	r0, [pc, #12]	; (8014078 <SUBGRF_ReadRegisters+0x1c>)
 801406c:	f7f2 fe9c 	bl	8006da8 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014070:	f384 8810 	msr	PRIMASK, r4
}
 8014074:	bd10      	pop	{r4, pc}
 8014076:	bf00      	nop
 8014078:	20000238 	.word	0x20000238

0801407c <SUBGRF_WriteBuffer>:
{
 801407c:	b510      	push	{r4, lr}
 801407e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014080:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014084:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8014086:	460a      	mov	r2, r1
 8014088:	4601      	mov	r1, r0
 801408a:	4803      	ldr	r0, [pc, #12]	; (8014098 <SUBGRF_WriteBuffer+0x1c>)
 801408c:	f7f2 ffea 	bl	8007064 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014090:	f384 8810 	msr	PRIMASK, r4
}
 8014094:	bd10      	pop	{r4, pc}
 8014096:	bf00      	nop
 8014098:	20000238 	.word	0x20000238

0801409c <SUBGRF_SetPayload>:
{
 801409c:	b508      	push	{r3, lr}
 801409e:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80140a0:	4601      	mov	r1, r0
 80140a2:	2000      	movs	r0, #0
 80140a4:	f7ff ffea 	bl	801407c <SUBGRF_WriteBuffer>
}
 80140a8:	bd08      	pop	{r3, pc}
	...

080140ac <SUBGRF_ReadBuffer>:
{
 80140ac:	b510      	push	{r4, lr}
 80140ae:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80140b4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80140b6:	460a      	mov	r2, r1
 80140b8:	4601      	mov	r1, r0
 80140ba:	4803      	ldr	r0, [pc, #12]	; (80140c8 <SUBGRF_ReadBuffer+0x1c>)
 80140bc:	f7f3 f81c 	bl	80070f8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140c0:	f384 8810 	msr	PRIMASK, r4
}
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	bf00      	nop
 80140c8:	20000238 	.word	0x20000238

080140cc <SUBGRF_WriteCommand>:
{
 80140cc:	b510      	push	{r4, lr}
 80140ce:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80140d0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80140d4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80140d6:	460a      	mov	r2, r1
 80140d8:	4601      	mov	r1, r0
 80140da:	4803      	ldr	r0, [pc, #12]	; (80140e8 <SUBGRF_WriteCommand+0x1c>)
 80140dc:	f7f2 feb8 	bl	8006e50 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80140e0:	f384 8810 	msr	PRIMASK, r4
}
 80140e4:	bd10      	pop	{r4, pc}
 80140e6:	bf00      	nop
 80140e8:	20000238 	.word	0x20000238

080140ec <SUBGRF_SetSleep>:
{
 80140ec:	b510      	push	{r4, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80140f2:	2000      	movs	r0, #0
 80140f4:	f7ee ff34 	bl	8002f60 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80140f8:	2002      	movs	r0, #2
 80140fa:	f7ff ff41 	bl	8013f80 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80140fe:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014102:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014106:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8014108:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801410c:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801410e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8014112:	2201      	movs	r2, #1
 8014114:	f10d 0107 	add.w	r1, sp, #7
 8014118:	2084      	movs	r0, #132	; 0x84
 801411a:	f7ff ffd7 	bl	80140cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801411e:	4b02      	ldr	r3, [pc, #8]	; (8014128 <SUBGRF_SetSleep+0x3c>)
 8014120:	2200      	movs	r2, #0
 8014122:	701a      	strb	r2, [r3, #0]
}
 8014124:	b002      	add	sp, #8
 8014126:	bd10      	pop	{r4, pc}
 8014128:	20003dd6 	.word	0x20003dd6

0801412c <SUBGRF_SetStandby>:
{
 801412c:	b500      	push	{lr}
 801412e:	b083      	sub	sp, #12
 8014130:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8014134:	2201      	movs	r2, #1
 8014136:	f10d 0107 	add.w	r1, sp, #7
 801413a:	2080      	movs	r0, #128	; 0x80
 801413c:	f7ff ffc6 	bl	80140cc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8014140:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014144:	b92b      	cbnz	r3, 8014152 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8014146:	4b05      	ldr	r3, [pc, #20]	; (801415c <SUBGRF_SetStandby+0x30>)
 8014148:	2201      	movs	r2, #1
 801414a:	701a      	strb	r2, [r3, #0]
}
 801414c:	b003      	add	sp, #12
 801414e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8014152:	4b02      	ldr	r3, [pc, #8]	; (801415c <SUBGRF_SetStandby+0x30>)
 8014154:	2202      	movs	r2, #2
 8014156:	701a      	strb	r2, [r3, #0]
}
 8014158:	e7f8      	b.n	801414c <SUBGRF_SetStandby+0x20>
 801415a:	bf00      	nop
 801415c:	20003dd6 	.word	0x20003dd6

08014160 <SUBGRF_SetTx>:
{
 8014160:	b500      	push	{lr}
 8014162:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8014164:	4b0a      	ldr	r3, [pc, #40]	; (8014190 <SUBGRF_SetTx+0x30>)
 8014166:	2204      	movs	r2, #4
 8014168:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801416a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801416e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014172:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014176:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801417a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801417e:	2203      	movs	r2, #3
 8014180:	a901      	add	r1, sp, #4
 8014182:	2083      	movs	r0, #131	; 0x83
 8014184:	f7ff ffa2 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014188:	b003      	add	sp, #12
 801418a:	f85d fb04 	ldr.w	pc, [sp], #4
 801418e:	bf00      	nop
 8014190:	20003dd6 	.word	0x20003dd6

08014194 <SUBGRF_SendPayload>:
{
 8014194:	b510      	push	{r4, lr}
 8014196:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8014198:	f7ff ff80 	bl	801409c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801419c:	4620      	mov	r0, r4
 801419e:	f7ff ffdf 	bl	8014160 <SUBGRF_SetTx>
}
 80141a2:	bd10      	pop	{r4, pc}

080141a4 <SUBGRF_SetRx>:
{
 80141a4:	b500      	push	{lr}
 80141a6:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80141a8:	4b0a      	ldr	r3, [pc, #40]	; (80141d4 <SUBGRF_SetRx+0x30>)
 80141aa:	2205      	movs	r2, #5
 80141ac:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80141ae:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80141b2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80141b6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80141ba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80141be:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80141c2:	2203      	movs	r2, #3
 80141c4:	a901      	add	r1, sp, #4
 80141c6:	2082      	movs	r0, #130	; 0x82
 80141c8:	f7ff ff80 	bl	80140cc <SUBGRF_WriteCommand>
}
 80141cc:	b003      	add	sp, #12
 80141ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80141d2:	bf00      	nop
 80141d4:	20003dd6 	.word	0x20003dd6

080141d8 <SUBGRF_GetRandom>:
{
 80141d8:	b570      	push	{r4, r5, r6, lr}
 80141da:	b082      	sub	sp, #8
    uint32_t number = 0;
 80141dc:	2600      	movs	r6, #0
 80141de:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80141e0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80141e4:	f7ff febc 	bl	8013f60 <SUBGRF_ReadRegister>
 80141e8:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80141ea:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80141ee:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80141f2:	f7ff fea5 	bl	8013f40 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80141f6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80141fa:	f7ff feb1 	bl	8013f60 <SUBGRF_ReadRegister>
 80141fe:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8014200:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8014204:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014208:	f7ff fe9a 	bl	8013f40 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801420c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014210:	f7ff ffc8 	bl	80141a4 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8014214:	2204      	movs	r2, #4
 8014216:	eb0d 0102 	add.w	r1, sp, r2
 801421a:	f640 0019 	movw	r0, #2073	; 0x819
 801421e:	f7ff ff1d 	bl	801405c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8014222:	4630      	mov	r0, r6
 8014224:	f7ff ff82 	bl	801412c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8014228:	4629      	mov	r1, r5
 801422a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801422e:	f7ff fe87 	bl	8013f40 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8014232:	4621      	mov	r1, r4
 8014234:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014238:	f7ff fe82 	bl	8013f40 <SUBGRF_WriteRegister>
}
 801423c:	9801      	ldr	r0, [sp, #4]
 801423e:	b002      	add	sp, #8
 8014240:	bd70      	pop	{r4, r5, r6, pc}
	...

08014244 <SUBGRF_SetRxBoosted>:
{
 8014244:	b510      	push	{r4, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 801424a:	4b0c      	ldr	r3, [pc, #48]	; (801427c <SUBGRF_SetRxBoosted+0x38>)
 801424c:	2205      	movs	r2, #5
 801424e:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8014250:	2197      	movs	r1, #151	; 0x97
 8014252:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8014256:	f7ff fe73 	bl	8013f40 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801425a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801425e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014262:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8014266:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801426a:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801426e:	2203      	movs	r2, #3
 8014270:	a901      	add	r1, sp, #4
 8014272:	2082      	movs	r0, #130	; 0x82
 8014274:	f7ff ff2a 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014278:	b002      	add	sp, #8
 801427a:	bd10      	pop	{r4, pc}
 801427c:	20003dd6 	.word	0x20003dd6

08014280 <SUBGRF_SetRxDutyCycle>:
{
 8014280:	b500      	push	{lr}
 8014282:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8014284:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014288:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801428c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014290:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8014294:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8014298:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801429c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80142a0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80142a4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80142a8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80142ac:	2206      	movs	r2, #6
 80142ae:	4669      	mov	r1, sp
 80142b0:	2094      	movs	r0, #148	; 0x94
 80142b2:	f7ff ff0b 	bl	80140cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80142b6:	4b03      	ldr	r3, [pc, #12]	; (80142c4 <SUBGRF_SetRxDutyCycle+0x44>)
 80142b8:	2206      	movs	r2, #6
 80142ba:	701a      	strb	r2, [r3, #0]
}
 80142bc:	b003      	add	sp, #12
 80142be:	f85d fb04 	ldr.w	pc, [sp], #4
 80142c2:	bf00      	nop
 80142c4:	20003dd6 	.word	0x20003dd6

080142c8 <SUBGRF_SetCad>:
{
 80142c8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80142ca:	2200      	movs	r2, #0
 80142cc:	4611      	mov	r1, r2
 80142ce:	20c5      	movs	r0, #197	; 0xc5
 80142d0:	f7ff fefc 	bl	80140cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80142d4:	4b01      	ldr	r3, [pc, #4]	; (80142dc <SUBGRF_SetCad+0x14>)
 80142d6:	2207      	movs	r2, #7
 80142d8:	701a      	strb	r2, [r3, #0]
}
 80142da:	bd08      	pop	{r3, pc}
 80142dc:	20003dd6 	.word	0x20003dd6

080142e0 <SUBGRF_SetTxContinuousWave>:
{
 80142e0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80142e2:	2200      	movs	r2, #0
 80142e4:	4611      	mov	r1, r2
 80142e6:	20d1      	movs	r0, #209	; 0xd1
 80142e8:	f7ff fef0 	bl	80140cc <SUBGRF_WriteCommand>
}
 80142ec:	bd08      	pop	{r3, pc}

080142ee <SUBGRF_SetTxInfinitePreamble>:
{
 80142ee:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80142f0:	2200      	movs	r2, #0
 80142f2:	4611      	mov	r1, r2
 80142f4:	20d2      	movs	r0, #210	; 0xd2
 80142f6:	f7ff fee9 	bl	80140cc <SUBGRF_WriteCommand>
}
 80142fa:	bd08      	pop	{r3, pc}

080142fc <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80142fc:	b500      	push	{lr}
 80142fe:	b083      	sub	sp, #12
 8014300:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014304:	2201      	movs	r2, #1
 8014306:	f10d 0107 	add.w	r1, sp, #7
 801430a:	209f      	movs	r0, #159	; 0x9f
 801430c:	f7ff fede 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014310:	b003      	add	sp, #12
 8014312:	f85d fb04 	ldr.w	pc, [sp], #4

08014316 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8014316:	b500      	push	{lr}
 8014318:	b083      	sub	sp, #12
 801431a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801431e:	2201      	movs	r2, #1
 8014320:	f10d 0107 	add.w	r1, sp, #7
 8014324:	20a0      	movs	r0, #160	; 0xa0
 8014326:	f7ff fed1 	bl	80140cc <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801432e:	2b3f      	cmp	r3, #63	; 0x3f
 8014330:	d90f      	bls.n	8014352 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8014332:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8014334:	2200      	movs	r2, #0
        while( mant > 31 )
 8014336:	e002      	b.n	801433e <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8014338:	089b      	lsrs	r3, r3, #2
            exp++;
 801433a:	3201      	adds	r2, #1
 801433c:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 801433e:	2b1f      	cmp	r3, #31
 8014340:	d8fa      	bhi.n	8014338 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8014342:	00d9      	lsls	r1, r3, #3
 8014344:	b2c9      	uxtb	r1, r1
 8014346:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8014348:	b2c9      	uxtb	r1, r1
 801434a:	f240 7006 	movw	r0, #1798	; 0x706
 801434e:	f7ff fdf7 	bl	8013f40 <SUBGRF_WriteRegister>
}
 8014352:	b003      	add	sp, #12
 8014354:	f85d fb04 	ldr.w	pc, [sp], #4

08014358 <SUBGRF_SetRegulatorMode>:
{
 8014358:	b500      	push	{lr}
 801435a:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801435c:	f7ee fe0c 	bl	8002f78 <RBI_IsDCDC>
 8014360:	2801      	cmp	r0, #1
 8014362:	d00b      	beq.n	801437c <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8014364:	2300      	movs	r3, #0
 8014366:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801436a:	2201      	movs	r2, #1
 801436c:	f10d 0107 	add.w	r1, sp, #7
 8014370:	2096      	movs	r0, #150	; 0x96
 8014372:	f7ff feab 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014376:	b003      	add	sp, #12
 8014378:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801437c:	2301      	movs	r3, #1
 801437e:	f88d 3007 	strb.w	r3, [sp, #7]
 8014382:	e7f2      	b.n	801436a <SUBGRF_SetRegulatorMode+0x12>

08014384 <SUBGRF_Calibrate>:
{
 8014384:	b500      	push	{lr}
 8014386:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014388:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801438c:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014390:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014392:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014396:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8014398:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801439c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801439e:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80143a2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80143a4:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80143a8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80143aa:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80143ae:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80143b0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80143b4:	2201      	movs	r2, #1
 80143b6:	f10d 0107 	add.w	r1, sp, #7
 80143ba:	2089      	movs	r0, #137	; 0x89
 80143bc:	f7ff fe86 	bl	80140cc <SUBGRF_WriteCommand>
}
 80143c0:	b003      	add	sp, #12
 80143c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080143c8 <SUBGRF_CalibrateImage>:
{
 80143c8:	b500      	push	{lr}
 80143ca:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80143cc:	4b1f      	ldr	r3, [pc, #124]	; (801444c <SUBGRF_CalibrateImage+0x84>)
 80143ce:	4298      	cmp	r0, r3
 80143d0:	d90d      	bls.n	80143ee <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80143d2:	23e1      	movs	r3, #225	; 0xe1
 80143d4:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80143d8:	23e9      	movs	r3, #233	; 0xe9
 80143da:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80143de:	2202      	movs	r2, #2
 80143e0:	a901      	add	r1, sp, #4
 80143e2:	2098      	movs	r0, #152	; 0x98
 80143e4:	f7ff fe72 	bl	80140cc <SUBGRF_WriteCommand>
}
 80143e8:	b003      	add	sp, #12
 80143ea:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80143ee:	4b18      	ldr	r3, [pc, #96]	; (8014450 <SUBGRF_CalibrateImage+0x88>)
 80143f0:	4298      	cmp	r0, r3
 80143f2:	d906      	bls.n	8014402 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80143f4:	23d7      	movs	r3, #215	; 0xd7
 80143f6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80143fa:	23db      	movs	r3, #219	; 0xdb
 80143fc:	f88d 3005 	strb.w	r3, [sp, #5]
 8014400:	e7ed      	b.n	80143de <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8014402:	4b14      	ldr	r3, [pc, #80]	; (8014454 <SUBGRF_CalibrateImage+0x8c>)
 8014404:	4298      	cmp	r0, r3
 8014406:	d906      	bls.n	8014416 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8014408:	23c1      	movs	r3, #193	; 0xc1
 801440a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801440e:	23c5      	movs	r3, #197	; 0xc5
 8014410:	f88d 3005 	strb.w	r3, [sp, #5]
 8014414:	e7e3      	b.n	80143de <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8014416:	4b10      	ldr	r3, [pc, #64]	; (8014458 <SUBGRF_CalibrateImage+0x90>)
 8014418:	4298      	cmp	r0, r3
 801441a:	d906      	bls.n	801442a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 801441c:	2375      	movs	r3, #117	; 0x75
 801441e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8014422:	2381      	movs	r3, #129	; 0x81
 8014424:	f88d 3005 	strb.w	r3, [sp, #5]
 8014428:	e7d9      	b.n	80143de <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 801442a:	4b0c      	ldr	r3, [pc, #48]	; (801445c <SUBGRF_CalibrateImage+0x94>)
 801442c:	4298      	cmp	r0, r3
 801442e:	d906      	bls.n	801443e <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8014430:	236b      	movs	r3, #107	; 0x6b
 8014432:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8014436:	236f      	movs	r3, #111	; 0x6f
 8014438:	f88d 3005 	strb.w	r3, [sp, #5]
 801443c:	e7cf      	b.n	80143de <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 801443e:	2329      	movs	r3, #41	; 0x29
 8014440:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8014444:	232b      	movs	r3, #43	; 0x2b
 8014446:	f88d 3005 	strb.w	r3, [sp, #5]
 801444a:	e7c8      	b.n	80143de <SUBGRF_CalibrateImage+0x16>
 801444c:	35a4e900 	.word	0x35a4e900
 8014450:	32a9f880 	.word	0x32a9f880
 8014454:	2de54480 	.word	0x2de54480
 8014458:	1b6b0b00 	.word	0x1b6b0b00
 801445c:	1954fc40 	.word	0x1954fc40

08014460 <SUBGRF_SetPaConfig>:
{
 8014460:	b500      	push	{lr}
 8014462:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8014464:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8014468:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801446c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8014470:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014474:	2204      	movs	r2, #4
 8014476:	eb0d 0102 	add.w	r1, sp, r2
 801447a:	2095      	movs	r0, #149	; 0x95
 801447c:	f7ff fe26 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014480:	b003      	add	sp, #12
 8014482:	f85d fb04 	ldr.w	pc, [sp], #4

08014486 <SUBGRF_SetDioIrqParams>:
{
 8014486:	b500      	push	{lr}
 8014488:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801448a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801448e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8014492:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8014496:	0a08      	lsrs	r0, r1, #8
 8014498:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801449c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80144a0:	0a11      	lsrs	r1, r2, #8
 80144a2:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80144a6:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80144aa:	0a1a      	lsrs	r2, r3, #8
 80144ac:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80144b0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80144b4:	2208      	movs	r2, #8
 80144b6:	4669      	mov	r1, sp
 80144b8:	4610      	mov	r0, r2
 80144ba:	f7ff fe07 	bl	80140cc <SUBGRF_WriteCommand>
}
 80144be:	b003      	add	sp, #12
 80144c0:	f85d fb04 	ldr.w	pc, [sp], #4

080144c4 <SUBGRF_SetTcxoMode>:
{
 80144c4:	b500      	push	{lr}
 80144c6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80144c8:	f000 0007 	and.w	r0, r0, #7
 80144cc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80144d0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80144d4:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80144d8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80144dc:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80144e0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80144e4:	2204      	movs	r2, #4
 80144e6:	eb0d 0102 	add.w	r1, sp, r2
 80144ea:	2097      	movs	r0, #151	; 0x97
 80144ec:	f7ff fdee 	bl	80140cc <SUBGRF_WriteCommand>
}
 80144f0:	b003      	add	sp, #12
 80144f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080144f8 <SUBGRF_Init>:
{
 80144f8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80144fa:	b108      	cbz	r0, 8014500 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80144fc:	4a18      	ldr	r2, [pc, #96]	; (8014560 <SUBGRF_Init+0x68>)
 80144fe:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8014500:	f7ed fa72 	bl	80019e8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014504:	2002      	movs	r0, #2
 8014506:	f7ff fd3b 	bl	8013f80 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801450a:	2000      	movs	r0, #0
 801450c:	4b15      	ldr	r3, [pc, #84]	; (8014564 <SUBGRF_Init+0x6c>)
 801450e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8014510:	f7ff fe0c 	bl	801412c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8014514:	f7ee fd2c 	bl	8002f70 <RBI_IsTCXO>
 8014518:	2801      	cmp	r0, #1
 801451a:	d014      	beq.n	8014546 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801451c:	2120      	movs	r1, #32
 801451e:	f640 1011 	movw	r0, #2321	; 0x911
 8014522:	f7ff fd0d 	bl	8013f40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014526:	2120      	movs	r1, #32
 8014528:	f640 1012 	movw	r0, #2322	; 0x912
 801452c:	f7ff fd08 	bl	8013f40 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8014530:	210e      	movs	r1, #14
 8014532:	f640 101f 	movw	r0, #2335	; 0x91f
 8014536:	f7ff fd03 	bl	8013f40 <SUBGRF_WriteRegister>
    RBI_Init();
 801453a:	f7ee fd0d 	bl	8002f58 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 801453e:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <SUBGRF_Init+0x70>)
 8014540:	2201      	movs	r2, #1
 8014542:	701a      	strb	r2, [r3, #0]
}
 8014544:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8014546:	2140      	movs	r1, #64	; 0x40
 8014548:	f7ff ffbc 	bl	80144c4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801454c:	2100      	movs	r1, #0
 801454e:	f640 1011 	movw	r0, #2321	; 0x911
 8014552:	f7ff fcf5 	bl	8013f40 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8014556:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801455a:	f7ff ff13 	bl	8014384 <SUBGRF_Calibrate>
 801455e:	e7e7      	b.n	8014530 <SUBGRF_Init+0x38>
 8014560:	20003dd8 	.word	0x20003dd8
 8014564:	20003dd4 	.word	0x20003dd4
 8014568:	20003dd6 	.word	0x20003dd6

0801456c <SUBGRF_SetRfFrequency>:
{
 801456c:	b510      	push	{r4, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8014572:	4b12      	ldr	r3, [pc, #72]	; (80145bc <SUBGRF_SetRfFrequency+0x50>)
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	b1d3      	cbz	r3, 80145ae <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8014578:	4a11      	ldr	r2, [pc, #68]	; (80145c0 <SUBGRF_SetRfFrequency+0x54>)
 801457a:	2300      	movs	r3, #0
 801457c:	0660      	lsls	r0, r4, #25
 801457e:	09e1      	lsrs	r1, r4, #7
 8014580:	f7ec fb16 	bl	8000bb0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8014584:	0e03      	lsrs	r3, r0, #24
 8014586:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801458a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801458e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8014592:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014596:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801459a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801459e:	2204      	movs	r2, #4
 80145a0:	eb0d 0102 	add.w	r1, sp, r2
 80145a4:	2086      	movs	r0, #134	; 0x86
 80145a6:	f7ff fd91 	bl	80140cc <SUBGRF_WriteCommand>
}
 80145aa:	b002      	add	sp, #8
 80145ac:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80145ae:	f7ff ff0b 	bl	80143c8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80145b2:	4b02      	ldr	r3, [pc, #8]	; (80145bc <SUBGRF_SetRfFrequency+0x50>)
 80145b4:	2201      	movs	r2, #1
 80145b6:	701a      	strb	r2, [r3, #0]
 80145b8:	e7de      	b.n	8014578 <SUBGRF_SetRfFrequency+0xc>
 80145ba:	bf00      	nop
 80145bc:	20003dd4 	.word	0x20003dd4
 80145c0:	01e84800 	.word	0x01e84800

080145c4 <SUBGRF_SetPacketType>:
{
 80145c4:	b500      	push	{lr}
 80145c6:	b083      	sub	sp, #12
 80145c8:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80145cc:	b2c3      	uxtb	r3, r0
 80145ce:	4a09      	ldr	r2, [pc, #36]	; (80145f4 <SUBGRF_SetPacketType+0x30>)
 80145d0:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80145d2:	b143      	cbz	r3, 80145e6 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80145d4:	2201      	movs	r2, #1
 80145d6:	f10d 0107 	add.w	r1, sp, #7
 80145da:	208a      	movs	r0, #138	; 0x8a
 80145dc:	f7ff fd76 	bl	80140cc <SUBGRF_WriteCommand>
}
 80145e0:	b003      	add	sp, #12
 80145e2:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80145e6:	2100      	movs	r1, #0
 80145e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80145ec:	f7ff fca8 	bl	8013f40 <SUBGRF_WriteRegister>
 80145f0:	e7f0      	b.n	80145d4 <SUBGRF_SetPacketType+0x10>
 80145f2:	bf00      	nop
 80145f4:	20003dd7 	.word	0x20003dd7

080145f8 <SUBGRF_SetTxParams>:
{
 80145f8:	b570      	push	{r4, r5, r6, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	460c      	mov	r4, r1
 80145fe:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8014600:	2801      	cmp	r0, #1
 8014602:	d035      	beq.n	8014670 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8014604:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014608:	f7ff fcaa 	bl	8013f60 <SUBGRF_ReadRegister>
 801460c:	f040 011e 	orr.w	r1, r0, #30
 8014610:	b2c9      	uxtb	r1, r1
 8014612:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014616:	f7ff fc93 	bl	8013f40 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801461a:	2001      	movs	r0, #1
 801461c:	f7ee fcb0 	bl	8002f80 <RBI_GetRFOMaxPowerConfig>
 8014620:	4605      	mov	r5, r0
        if (power > max_power)
 8014622:	4284      	cmp	r4, r0
 8014624:	dd00      	ble.n	8014628 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8014626:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8014628:	2d14      	cmp	r5, #20
 801462a:	d054      	beq.n	80146d6 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 801462c:	2d11      	cmp	r5, #17
 801462e:	d05c      	beq.n	80146ea <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8014630:	2d0e      	cmp	r5, #14
 8014632:	d064      	beq.n	80146fe <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8014634:	2301      	movs	r3, #1
 8014636:	2200      	movs	r2, #0
 8014638:	2107      	movs	r1, #7
 801463a:	2004      	movs	r0, #4
 801463c:	f7ff ff10 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014640:	1b64      	subs	r4, r4, r5
 8014642:	3416      	adds	r4, #22
 8014644:	b265      	sxtb	r5, r4
        if (power < -9)
 8014646:	f115 0f09 	cmn.w	r5, #9
 801464a:	da01      	bge.n	8014650 <SUBGRF_SetTxParams+0x58>
            power = -9;
 801464c:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8014650:	2138      	movs	r1, #56	; 0x38
 8014652:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014656:	f7ff fc73 	bl	8013f40 <SUBGRF_WriteRegister>
    buf[0] = power;
 801465a:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801465e:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8014662:	2202      	movs	r2, #2
 8014664:	a901      	add	r1, sp, #4
 8014666:	208e      	movs	r0, #142	; 0x8e
 8014668:	f7ff fd30 	bl	80140cc <SUBGRF_WriteCommand>
}
 801466c:	b002      	add	sp, #8
 801466e:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8014670:	2000      	movs	r0, #0
 8014672:	f7ee fc85 	bl	8002f80 <RBI_GetRFOMaxPowerConfig>
 8014676:	4605      	mov	r5, r0
        if (power >  max_power)
 8014678:	4284      	cmp	r4, r0
 801467a:	dd00      	ble.n	801467e <SUBGRF_SetTxParams+0x86>
          power = max_power;
 801467c:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801467e:	2d0e      	cmp	r5, #14
 8014680:	d015      	beq.n	80146ae <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8014682:	2d0a      	cmp	r5, #10
 8014684:	d01d      	beq.n	80146c2 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8014686:	2301      	movs	r3, #1
 8014688:	461a      	mov	r2, r3
 801468a:	2100      	movs	r1, #0
 801468c:	2007      	movs	r0, #7
 801468e:	f7ff fee7 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014692:	1b65      	subs	r5, r4, r5
 8014694:	350e      	adds	r5, #14
 8014696:	b26d      	sxtb	r5, r5
        if (power < -17)
 8014698:	f115 0f11 	cmn.w	r5, #17
 801469c:	da01      	bge.n	80146a2 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801469e:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80146a2:	2118      	movs	r1, #24
 80146a4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80146a8:	f7ff fc4a 	bl	8013f40 <SUBGRF_WriteRegister>
 80146ac:	e7d5      	b.n	801465a <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80146ae:	2301      	movs	r3, #1
 80146b0:	461a      	mov	r2, r3
 80146b2:	2100      	movs	r1, #0
 80146b4:	2004      	movs	r0, #4
 80146b6:	f7ff fed3 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80146ba:	1b65      	subs	r5, r4, r5
 80146bc:	350e      	adds	r5, #14
 80146be:	b26d      	sxtb	r5, r5
 80146c0:	e7ea      	b.n	8014698 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80146c2:	2301      	movs	r3, #1
 80146c4:	461a      	mov	r2, r3
 80146c6:	2100      	movs	r1, #0
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff fec9 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80146ce:	1b65      	subs	r5, r4, r5
 80146d0:	350d      	adds	r5, #13
 80146d2:	b26d      	sxtb	r5, r5
 80146d4:	e7e0      	b.n	8014698 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80146d6:	2301      	movs	r3, #1
 80146d8:	2200      	movs	r2, #0
 80146da:	2105      	movs	r1, #5
 80146dc:	2003      	movs	r0, #3
 80146de:	f7ff febf 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80146e2:	1b65      	subs	r5, r4, r5
 80146e4:	3516      	adds	r5, #22
 80146e6:	b26d      	sxtb	r5, r5
 80146e8:	e7ad      	b.n	8014646 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80146ea:	2301      	movs	r3, #1
 80146ec:	2200      	movs	r2, #0
 80146ee:	2103      	movs	r1, #3
 80146f0:	2002      	movs	r0, #2
 80146f2:	f7ff feb5 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80146f6:	1b65      	subs	r5, r4, r5
 80146f8:	3516      	adds	r5, #22
 80146fa:	b26d      	sxtb	r5, r5
 80146fc:	e7a3      	b.n	8014646 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80146fe:	2301      	movs	r3, #1
 8014700:	2200      	movs	r2, #0
 8014702:	2102      	movs	r1, #2
 8014704:	4608      	mov	r0, r1
 8014706:	f7ff feab 	bl	8014460 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801470a:	1b65      	subs	r5, r4, r5
 801470c:	350e      	adds	r5, #14
 801470e:	b26d      	sxtb	r5, r5
 8014710:	e799      	b.n	8014646 <SUBGRF_SetTxParams+0x4e>
	...

08014714 <SUBGRF_SetModulationParams>:
{
 8014714:	b510      	push	{r4, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801471a:	4b3e      	ldr	r3, [pc, #248]	; (8014814 <SUBGRF_SetModulationParams+0x100>)
 801471c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014720:	ab02      	add	r3, sp, #8
 8014722:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8014726:	7820      	ldrb	r0, [r4, #0]
 8014728:	4b3b      	ldr	r3, [pc, #236]	; (8014818 <SUBGRF_SetModulationParams+0x104>)
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	4298      	cmp	r0, r3
 801472e:	d106      	bne.n	801473e <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8014730:	7823      	ldrb	r3, [r4, #0]
 8014732:	2b03      	cmp	r3, #3
 8014734:	d82c      	bhi.n	8014790 <SUBGRF_SetModulationParams+0x7c>
 8014736:	e8df f003 	tbb	[pc, r3]
 801473a:	4205      	.short	0x4205
 801473c:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801473e:	f7ff ff41 	bl	80145c4 <SUBGRF_SetPacketType>
 8014742:	e7f5      	b.n	8014730 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8014744:	6862      	ldr	r2, [r4, #4]
 8014746:	4b35      	ldr	r3, [pc, #212]	; (801481c <SUBGRF_SetModulationParams+0x108>)
 8014748:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801474c:	0c1a      	lsrs	r2, r3, #16
 801474e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014752:	0a1a      	lsrs	r2, r3, #8
 8014754:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8014758:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801475c:	7b23      	ldrb	r3, [r4, #12]
 801475e:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8014762:	7b63      	ldrb	r3, [r4, #13]
 8014764:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8014768:	68a1      	ldr	r1, [r4, #8]
 801476a:	4a2d      	ldr	r2, [pc, #180]	; (8014820 <SUBGRF_SetModulationParams+0x10c>)
 801476c:	2300      	movs	r3, #0
 801476e:	0648      	lsls	r0, r1, #25
 8014770:	09c9      	lsrs	r1, r1, #7
 8014772:	f7ec fa1d 	bl	8000bb0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8014776:	0c03      	lsrs	r3, r0, #16
 8014778:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801477c:	0a03      	lsrs	r3, r0, #8
 801477e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8014782:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014786:	2208      	movs	r2, #8
 8014788:	4669      	mov	r1, sp
 801478a:	208b      	movs	r0, #139	; 0x8b
 801478c:	f7ff fc9e 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014790:	b002      	add	sp, #8
 8014792:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8014794:	6922      	ldr	r2, [r4, #16]
 8014796:	4b21      	ldr	r3, [pc, #132]	; (801481c <SUBGRF_SetModulationParams+0x108>)
 8014798:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801479c:	0c1a      	lsrs	r2, r3, #16
 801479e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80147a2:	0a1a      	lsrs	r2, r3, #8
 80147a4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80147a8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80147ac:	7d23      	ldrb	r3, [r4, #20]
 80147ae:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80147b2:	2204      	movs	r2, #4
 80147b4:	4669      	mov	r1, sp
 80147b6:	208b      	movs	r0, #139	; 0x8b
 80147b8:	f7ff fc88 	bl	80140cc <SUBGRF_WriteCommand>
        break;
 80147bc:	e7e8      	b.n	8014790 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80147be:	7e23      	ldrb	r3, [r4, #24]
 80147c0:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80147c4:	7e63      	ldrb	r3, [r4, #25]
 80147c6:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80147ca:	7ea3      	ldrb	r3, [r4, #26]
 80147cc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80147d0:	7ee3      	ldrb	r3, [r4, #27]
 80147d2:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80147d6:	2204      	movs	r2, #4
 80147d8:	4669      	mov	r1, sp
 80147da:	208b      	movs	r0, #139	; 0x8b
 80147dc:	f7ff fc76 	bl	80140cc <SUBGRF_WriteCommand>
        break;
 80147e0:	e7d6      	b.n	8014790 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80147e2:	6862      	ldr	r2, [r4, #4]
 80147e4:	4b0d      	ldr	r3, [pc, #52]	; (801481c <SUBGRF_SetModulationParams+0x108>)
 80147e6:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80147ea:	0c1a      	lsrs	r2, r3, #16
 80147ec:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80147f0:	0a1a      	lsrs	r2, r3, #8
 80147f2:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80147f6:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80147fa:	7b23      	ldrb	r3, [r4, #12]
 80147fc:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8014800:	7b63      	ldrb	r3, [r4, #13]
 8014802:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014806:	2205      	movs	r2, #5
 8014808:	4669      	mov	r1, sp
 801480a:	208b      	movs	r0, #139	; 0x8b
 801480c:	f7ff fc5e 	bl	80140cc <SUBGRF_WriteCommand>
}
 8014810:	e7be      	b.n	8014790 <SUBGRF_SetModulationParams+0x7c>
 8014812:	bf00      	nop
 8014814:	080159b4 	.word	0x080159b4
 8014818:	20003dd7 	.word	0x20003dd7
 801481c:	3d090000 	.word	0x3d090000
 8014820:	01e84800 	.word	0x01e84800

08014824 <SUBGRF_SetPacketParams>:
{
 8014824:	b510      	push	{r4, lr}
 8014826:	b084      	sub	sp, #16
 8014828:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801482a:	ab01      	add	r3, sp, #4
 801482c:	4a33      	ldr	r2, [pc, #204]	; (80148fc <SUBGRF_SetPacketParams+0xd8>)
 801482e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014830:	c303      	stmia	r3!, {r0, r1}
 8014832:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8014834:	7820      	ldrb	r0, [r4, #0]
 8014836:	4b32      	ldr	r3, [pc, #200]	; (8014900 <SUBGRF_SetPacketParams+0xdc>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	4298      	cmp	r0, r3
 801483c:	d106      	bne.n	801484c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801483e:	7823      	ldrb	r3, [r4, #0]
 8014840:	2b03      	cmp	r3, #3
 8014842:	d82a      	bhi.n	801489a <SUBGRF_SetPacketParams+0x76>
 8014844:	e8df f003 	tbb	[pc, r3]
 8014848:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 801484c:	f7ff feba 	bl	80145c4 <SUBGRF_SetPacketType>
 8014850:	e7f5      	b.n	801483e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8014852:	7a63      	ldrb	r3, [r4, #9]
 8014854:	2bf1      	cmp	r3, #241	; 0xf1
 8014856:	d022      	beq.n	801489e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8014858:	2bf2      	cmp	r3, #242	; 0xf2
 801485a:	d02a      	beq.n	80148b2 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801485c:	8862      	ldrh	r2, [r4, #2]
 801485e:	0a11      	lsrs	r1, r2, #8
 8014860:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8014864:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8014868:	7922      	ldrb	r2, [r4, #4]
 801486a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801486e:	7962      	ldrb	r2, [r4, #5]
 8014870:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8014874:	79a2      	ldrb	r2, [r4, #6]
 8014876:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801487a:	79e2      	ldrb	r2, [r4, #7]
 801487c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8014880:	7a22      	ldrb	r2, [r4, #8]
 8014882:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8014886:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801488a:	7aa3      	ldrb	r3, [r4, #10]
 801488c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8014890:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8014892:	a901      	add	r1, sp, #4
 8014894:	208c      	movs	r0, #140	; 0x8c
 8014896:	f7ff fc19 	bl	80140cc <SUBGRF_WriteCommand>
}
 801489a:	b004      	add	sp, #16
 801489c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801489e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80148a2:	f7ff fbb2 	bl	801400a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80148a6:	f248 0005 	movw	r0, #32773	; 0x8005
 80148aa:	f7ff fbc2 	bl	8014032 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80148ae:	2302      	movs	r3, #2
 80148b0:	e7d4      	b.n	801485c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80148b2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80148b6:	f7ff fba8 	bl	801400a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80148ba:	f241 0021 	movw	r0, #4129	; 0x1021
 80148be:	f7ff fbb8 	bl	8014032 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80148c2:	2306      	movs	r3, #6
 80148c4:	e7ca      	b.n	801485c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80148c6:	7b23      	ldrb	r3, [r4, #12]
 80148c8:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 80148cc:	2201      	movs	r2, #1
        break;
 80148ce:	e7e0      	b.n	8014892 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80148d0:	89e3      	ldrh	r3, [r4, #14]
 80148d2:	0a1a      	lsrs	r2, r3, #8
 80148d4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80148d8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80148dc:	7c23      	ldrb	r3, [r4, #16]
 80148de:	4a09      	ldr	r2, [pc, #36]	; (8014904 <SUBGRF_SetPacketParams+0xe0>)
 80148e0:	7013      	strb	r3, [r2, #0]
 80148e2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80148e6:	7c63      	ldrb	r3, [r4, #17]
 80148e8:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80148ec:	7ca3      	ldrb	r3, [r4, #18]
 80148ee:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80148f2:	7ce3      	ldrb	r3, [r4, #19]
 80148f4:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 80148f8:	2206      	movs	r2, #6
        break;
 80148fa:	e7ca      	b.n	8014892 <SUBGRF_SetPacketParams+0x6e>
 80148fc:	080159bc 	.word	0x080159bc
 8014900:	20003dd7 	.word	0x20003dd7
 8014904:	20003dd5 	.word	0x20003dd5

08014908 <SUBGRF_SetBufferBaseAddress>:
{
 8014908:	b500      	push	{lr}
 801490a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 801490c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8014910:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8014914:	2202      	movs	r2, #2
 8014916:	a901      	add	r1, sp, #4
 8014918:	208f      	movs	r0, #143	; 0x8f
 801491a:	f7ff fbd7 	bl	80140cc <SUBGRF_WriteCommand>
}
 801491e:	b003      	add	sp, #12
 8014920:	f85d fb04 	ldr.w	pc, [sp], #4

08014924 <SUBGRF_ReadCommand>:
{
 8014924:	b510      	push	{r4, lr}
 8014926:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014928:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801492c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801492e:	460a      	mov	r2, r1
 8014930:	4601      	mov	r1, r0
 8014932:	4803      	ldr	r0, [pc, #12]	; (8014940 <SUBGRF_ReadCommand+0x1c>)
 8014934:	f7f2 fae2 	bl	8006efc <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014938:	f384 8810 	msr	PRIMASK, r4
}
 801493c:	bd10      	pop	{r4, pc}
 801493e:	bf00      	nop
 8014940:	20000238 	.word	0x20000238

08014944 <SUBGRF_GetRssiInst>:
{
 8014944:	b500      	push	{lr}
 8014946:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8014948:	2201      	movs	r2, #1
 801494a:	a901      	add	r1, sp, #4
 801494c:	2015      	movs	r0, #21
 801494e:	f7ff ffe9 	bl	8014924 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8014952:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8014956:	4240      	negs	r0, r0
}
 8014958:	1040      	asrs	r0, r0, #1
 801495a:	b003      	add	sp, #12
 801495c:	f85d fb04 	ldr.w	pc, [sp], #4

08014960 <SUBGRF_GetRxBufferStatus>:
{
 8014960:	b530      	push	{r4, r5, lr}
 8014962:	b083      	sub	sp, #12
 8014964:	4605      	mov	r5, r0
 8014966:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8014968:	2202      	movs	r2, #2
 801496a:	a901      	add	r1, sp, #4
 801496c:	2013      	movs	r0, #19
 801496e:	f7ff ffd9 	bl	8014924 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8014972:	f7ff fadf 	bl	8013f34 <SUBGRF_GetPacketType>
 8014976:	2801      	cmp	r0, #1
 8014978:	d007      	beq.n	801498a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801497a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801497e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8014980:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014984:	7023      	strb	r3, [r4, #0]
}
 8014986:	b003      	add	sp, #12
 8014988:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801498a:	4b05      	ldr	r3, [pc, #20]	; (80149a0 <SUBGRF_GetRxBufferStatus+0x40>)
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	b2db      	uxtb	r3, r3
 8014990:	2b01      	cmp	r3, #1
 8014992:	d1f2      	bne.n	801497a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8014994:	f240 7002 	movw	r0, #1794	; 0x702
 8014998:	f7ff fae2 	bl	8013f60 <SUBGRF_ReadRegister>
 801499c:	7028      	strb	r0, [r5, #0]
 801499e:	e7ef      	b.n	8014980 <SUBGRF_GetRxBufferStatus+0x20>
 80149a0:	20003dd5 	.word	0x20003dd5

080149a4 <SUBGRF_GetPayload>:
{
 80149a4:	b570      	push	{r4, r5, r6, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	4606      	mov	r6, r0
 80149aa:	460c      	mov	r4, r1
 80149ac:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80149ae:	2300      	movs	r3, #0
 80149b0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80149b4:	f10d 0107 	add.w	r1, sp, #7
 80149b8:	4620      	mov	r0, r4
 80149ba:	f7ff ffd1 	bl	8014960 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80149be:	7822      	ldrb	r2, [r4, #0]
 80149c0:	42aa      	cmp	r2, r5
 80149c2:	d902      	bls.n	80149ca <SUBGRF_GetPayload+0x26>
        return 1;
 80149c4:	2001      	movs	r0, #1
}
 80149c6:	b002      	add	sp, #8
 80149c8:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80149ca:	4631      	mov	r1, r6
 80149cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80149d0:	f7ff fb6c 	bl	80140ac <SUBGRF_ReadBuffer>
    return 0;
 80149d4:	2000      	movs	r0, #0
 80149d6:	e7f6      	b.n	80149c6 <SUBGRF_GetPayload+0x22>

080149d8 <SUBGRF_GetPacketStatus>:
{
 80149d8:	b510      	push	{r4, lr}
 80149da:	b082      	sub	sp, #8
 80149dc:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80149de:	2203      	movs	r2, #3
 80149e0:	a901      	add	r1, sp, #4
 80149e2:	2014      	movs	r0, #20
 80149e4:	f7ff ff9e 	bl	8014924 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80149e8:	f7ff faa4 	bl	8013f34 <SUBGRF_GetPacketType>
 80149ec:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80149ee:	b148      	cbz	r0, 8014a04 <SUBGRF_GetPacketStatus+0x2c>
 80149f0:	2801      	cmp	r0, #1
 80149f2:	d018      	beq.n	8014a26 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80149f4:	2214      	movs	r2, #20
 80149f6:	2100      	movs	r1, #0
 80149f8:	4620      	mov	r0, r4
 80149fa:	f000 fb20 	bl	801503e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80149fe:	230f      	movs	r3, #15
 8014a00:	7023      	strb	r3, [r4, #0]
}
 8014a02:	e00e      	b.n	8014a22 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8014a04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014a08:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8014a0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014a0e:	425b      	negs	r3, r3
 8014a10:	105b      	asrs	r3, r3, #1
 8014a12:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8014a14:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a18:	425b      	negs	r3, r3
 8014a1a:	105b      	asrs	r3, r3, #1
 8014a1c:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	60a3      	str	r3, [r4, #8]
}
 8014a22:	b002      	add	sp, #8
 8014a24:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8014a26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014a2a:	425b      	negs	r3, r3
 8014a2c:	105b      	asrs	r3, r3, #1
 8014a2e:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8014a30:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8014a34:	3302      	adds	r3, #2
 8014a36:	109b      	asrs	r3, r3, #2
 8014a38:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8014a3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a3e:	425b      	negs	r3, r3
 8014a40:	105b      	asrs	r3, r3, #1
 8014a42:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8014a44:	4b01      	ldr	r3, [pc, #4]	; (8014a4c <SUBGRF_GetPacketStatus+0x74>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	6123      	str	r3, [r4, #16]
            break;
 8014a4a:	e7ea      	b.n	8014a22 <SUBGRF_GetPacketStatus+0x4a>
 8014a4c:	20003dd0 	.word	0x20003dd0

08014a50 <SUBGRF_SetSwitch>:
{
 8014a50:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8014a52:	2901      	cmp	r1, #1
 8014a54:	d003      	beq.n	8014a5e <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8014a56:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8014a58:	f7ee fa82 	bl	8002f60 <RBI_ConfigRFSwitch>
}
 8014a5c:	bd10      	pop	{r4, pc}
 8014a5e:	4604      	mov	r4, r0
 8014a60:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8014a62:	2c01      	cmp	r4, #1
 8014a64:	d003      	beq.n	8014a6e <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8014a66:	2c02      	cmp	r4, #2
 8014a68:	d1f6      	bne.n	8014a58 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8014a6a:	2003      	movs	r0, #3
 8014a6c:	e7f4      	b.n	8014a58 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8014a6e:	2004      	movs	r0, #4
 8014a70:	f7ff fa86 	bl	8013f80 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8014a74:	2002      	movs	r0, #2
 8014a76:	e7f6      	b.n	8014a66 <SUBGRF_SetSwitch+0x16>

08014a78 <SUBGRF_SetRfTxPower>:
{
 8014a78:	b538      	push	{r3, r4, r5, lr}
 8014a7a:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8014a7c:	f7ee fa74 	bl	8002f68 <RBI_GetTxConfig>
    switch (TxConfig)
 8014a80:	b148      	cbz	r0, 8014a96 <SUBGRF_SetRfTxPower+0x1e>
 8014a82:	2802      	cmp	r0, #2
 8014a84:	d10d      	bne.n	8014aa2 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8014a86:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8014a88:	2202      	movs	r2, #2
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	f7ff fdb3 	bl	80145f8 <SUBGRF_SetTxParams>
}
 8014a92:	4628      	mov	r0, r5
 8014a94:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8014a96:	2c0f      	cmp	r4, #15
 8014a98:	dc01      	bgt.n	8014a9e <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8014a9a:	2501      	movs	r5, #1
 8014a9c:	e7f4      	b.n	8014a88 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8014a9e:	2502      	movs	r5, #2
 8014aa0:	e7f2      	b.n	8014a88 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8014aa2:	2501      	movs	r5, #1
 8014aa4:	e7f0      	b.n	8014a88 <SUBGRF_SetRfTxPower+0x10>

08014aa6 <SUBGRF_GetRadioWakeUpTime>:
}
 8014aa6:	2001      	movs	r0, #1
 8014aa8:	4770      	bx	lr
	...

08014aac <HAL_SUBGHZ_TxCpltCallback>:
{
 8014aac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8014aae:	4b02      	ldr	r3, [pc, #8]	; (8014ab8 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2001      	movs	r0, #1
 8014ab4:	4798      	blx	r3
}
 8014ab6:	bd08      	pop	{r3, pc}
 8014ab8:	20003dd8 	.word	0x20003dd8

08014abc <HAL_SUBGHZ_RxCpltCallback>:
{
 8014abc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8014abe:	4b02      	ldr	r3, [pc, #8]	; (8014ac8 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	2002      	movs	r0, #2
 8014ac4:	4798      	blx	r3
}
 8014ac6:	bd08      	pop	{r3, pc}
 8014ac8:	20003dd8 	.word	0x20003dd8

08014acc <HAL_SUBGHZ_CRCErrorCallback>:
{
 8014acc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8014ace:	4b02      	ldr	r3, [pc, #8]	; (8014ad8 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	2040      	movs	r0, #64	; 0x40
 8014ad4:	4798      	blx	r3
}
 8014ad6:	bd08      	pop	{r3, pc}
 8014ad8:	20003dd8 	.word	0x20003dd8

08014adc <HAL_SUBGHZ_CADStatusCallback>:
{
 8014adc:	b508      	push	{r3, lr}
    switch (cadstatus)
 8014ade:	b111      	cbz	r1, 8014ae6 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8014ae0:	2901      	cmp	r1, #1
 8014ae2:	d005      	beq.n	8014af0 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8014ae4:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8014ae6:	4b05      	ldr	r3, [pc, #20]	; (8014afc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2080      	movs	r0, #128	; 0x80
 8014aec:	4798      	blx	r3
            break;
 8014aee:	e7f9      	b.n	8014ae4 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8014af0:	4b02      	ldr	r3, [pc, #8]	; (8014afc <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014af8:	4798      	blx	r3
}
 8014afa:	e7f3      	b.n	8014ae4 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8014afc:	20003dd8 	.word	0x20003dd8

08014b00 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8014b00:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8014b02:	4b03      	ldr	r3, [pc, #12]	; (8014b10 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014b0a:	4798      	blx	r3
}
 8014b0c:	bd08      	pop	{r3, pc}
 8014b0e:	bf00      	nop
 8014b10:	20003dd8 	.word	0x20003dd8

08014b14 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8014b14:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8014b16:	4b02      	ldr	r3, [pc, #8]	; (8014b20 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	2020      	movs	r0, #32
 8014b1c:	4798      	blx	r3
}
 8014b1e:	bd08      	pop	{r3, pc}
 8014b20:	20003dd8 	.word	0x20003dd8

08014b24 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8014b24:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8014b26:	4b02      	ldr	r3, [pc, #8]	; (8014b30 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2004      	movs	r0, #4
 8014b2c:	4798      	blx	r3
}
 8014b2e:	bd08      	pop	{r3, pc}
 8014b30:	20003dd8 	.word	0x20003dd8

08014b34 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8014b34:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8014b36:	4b02      	ldr	r3, [pc, #8]	; (8014b40 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	2008      	movs	r0, #8
 8014b3c:	4798      	blx	r3
}
 8014b3e:	bd08      	pop	{r3, pc}
 8014b40:	20003dd8 	.word	0x20003dd8

08014b44 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8014b44:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8014b46:	4b02      	ldr	r3, [pc, #8]	; (8014b50 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	2010      	movs	r0, #16
 8014b4c:	4798      	blx	r3
}
 8014b4e:	bd08      	pop	{r3, pc}
 8014b50:	20003dd8 	.word	0x20003dd8

08014b54 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8014b54:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8014b56:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8014b5e:	4798      	blx	r3
}
 8014b60:	bd08      	pop	{r3, pc}
 8014b62:	bf00      	nop
 8014b64:	20003dd8 	.word	0x20003dd8

08014b68 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8014b68:	4601      	mov	r1, r0
 8014b6a:	b188      	cbz	r0, 8014b90 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	2b15      	cmp	r3, #21
 8014b70:	d80d      	bhi.n	8014b8e <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8014b72:	4618      	mov	r0, r3
 8014b74:	4a07      	ldr	r2, [pc, #28]	; (8014b94 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8014b76:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8014b7a:	428a      	cmp	r2, r1
 8014b7c:	d802      	bhi.n	8014b84 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8014b7e:	3301      	adds	r3, #1
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	e7f4      	b.n	8014b6e <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8014b84:	4b03      	ldr	r3, [pc, #12]	; (8014b94 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8014b86:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8014b8a:	7918      	ldrb	r0, [r3, #4]
 8014b8c:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8014b8e:	e7fe      	b.n	8014b8e <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8014b90:	201f      	movs	r0, #31
}
 8014b92:	4770      	bx	lr
 8014b94:	080169ec 	.word	0x080169ec

08014b98 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8014b98:	b570      	push	{r4, r5, r6, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	4605      	mov	r5, r0
 8014b9e:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8014ba0:	4b1d      	ldr	r3, [pc, #116]	; (8014c18 <SUBGRF_GetCFO+0x80>)
 8014ba2:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8014ba4:	f640 0007 	movw	r0, #2055	; 0x807
 8014ba8:	f7ff f9da 	bl	8013f60 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8014bac:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8014bb0:	3308      	adds	r3, #8
 8014bb2:	446b      	add	r3, sp
 8014bb4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8014bb8:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8014bbc:	3301      	adds	r3, #1
 8014bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8014bc2:	4a16      	ldr	r2, [pc, #88]	; (8014c1c <SUBGRF_GetCFO+0x84>)
 8014bc4:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8014bc8:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8014bcc:	2807      	cmp	r0, #7
 8014bce:	d921      	bls.n	8014c14 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8014bd0:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8014bd2:	fb03 f000 	mul.w	r0, r3, r0
 8014bd6:	2803      	cmp	r0, #3
 8014bd8:	d800      	bhi.n	8014bdc <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8014bda:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8014bdc:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8014be0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8014be4:	f7ff f9bc 	bl	8013f60 <SUBGRF_ReadRegister>
 8014be8:	0206      	lsls	r6, r0, #8
 8014bea:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8014bee:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8014bf2:	f7ff f9b5 	bl	8013f60 <SUBGRF_ReadRegister>
 8014bf6:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8014bf8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8014bfc:	d003      	beq.n	8014c06 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8014bfe:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8014c02:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8014c06:	096b      	lsrs	r3, r5, #5
 8014c08:	fb03 f000 	mul.w	r0, r3, r0
 8014c0c:	11c0      	asrs	r0, r0, #7
 8014c0e:	6020      	str	r0, [r4, #0]
}
 8014c10:	b002      	add	sp, #8
 8014c12:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8014c14:	2302      	movs	r3, #2
 8014c16:	e7dc      	b.n	8014bd2 <SUBGRF_GetCFO+0x3a>
 8014c18:	0c0a0804 	.word	0x0c0a0804
 8014c1c:	01e84800 	.word	0x01e84800

08014c20 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8014c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c24:	4770      	bx	lr

08014c26 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8014c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c2a:	4770      	bx	lr

08014c2c <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8014c2c:	4770      	bx	lr

08014c2e <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8014c2e:	2000      	movs	r0, #0
 8014c30:	4770      	bx	lr

08014c32 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8014c32:	2000      	movs	r0, #0
 8014c34:	4770      	bx	lr

08014c36 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8014c36:	4770      	bx	lr

08014c38 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8014c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c3c:	4770      	bx	lr

08014c3e <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8014c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c42:	4770      	bx	lr

08014c44 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8014c44:	4770      	bx	lr

08014c46 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8014c46:	4770      	bx	lr

08014c48 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8014c48:	4770      	bx	lr
	...

08014c4c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8014c4c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c4e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014c52:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8014c54:	4b1e      	ldr	r3, [pc, #120]	; (8014cd0 <TRACE_AllocateBufer+0x84>)
 8014c56:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 8014c5a:	8a1a      	ldrh	r2, [r3, #16]
 8014c5c:	4596      	cmp	lr, r2
 8014c5e:	d011      	beq.n	8014c84 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014c60:	4596      	cmp	lr, r2
 8014c62:	d921      	bls.n	8014ca8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014c64:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014c68:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8014c6a:	4283      	cmp	r3, r0
 8014c6c:	d81f      	bhi.n	8014cae <TRACE_AllocateBufer+0x62>
 8014c6e:	4282      	cmp	r2, r0
 8014c70:	d91d      	bls.n	8014cae <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8014c72:	4b17      	ldr	r3, [pc, #92]	; (8014cd0 <TRACE_AllocateBufer+0x84>)
 8014c74:	2401      	movs	r4, #1
 8014c76:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014c78:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014c7c:	2400      	movs	r4, #0
 8014c7e:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8014c80:	4613      	mov	r3, r2
 8014c82:	e014      	b.n	8014cae <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8014c84:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8014c88:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8014c8a:	4298      	cmp	r0, r3
 8014c8c:	d30f      	bcc.n	8014cae <TRACE_AllocateBufer+0x62>
 8014c8e:	4282      	cmp	r2, r0
 8014c90:	d90d      	bls.n	8014cae <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8014c92:	4b0f      	ldr	r3, [pc, #60]	; (8014cd0 <TRACE_AllocateBufer+0x84>)
 8014c94:	2401      	movs	r4, #1
 8014c96:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8014c98:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8014c9c:	f04f 0e00 	mov.w	lr, #0
 8014ca0:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	e002      	b.n	8014cae <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8014ca8:	eba2 020e 	sub.w	r2, r2, lr
 8014cac:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8014cae:	4283      	cmp	r3, r0
 8014cb0:	d90a      	bls.n	8014cc8 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8014cb2:	4a07      	ldr	r2, [pc, #28]	; (8014cd0 <TRACE_AllocateBufer+0x84>)
 8014cb4:	8a53      	ldrh	r3, [r2, #18]
 8014cb6:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014cb8:	4403      	add	r3, r0
 8014cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014cbe:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8014cc0:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cc2:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8014cc6:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8014cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ccc:	e7f9      	b.n	8014cc2 <TRACE_AllocateBufer+0x76>
 8014cce:	bf00      	nop
 8014cd0:	200041dc 	.word	0x200041dc

08014cd4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cd4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014cd8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8014cda:	4a03      	ldr	r2, [pc, #12]	; (8014ce8 <TRACE_Lock+0x14>)
 8014cdc:	8ad3      	ldrh	r3, [r2, #22]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ce2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014ce6:	4770      	bx	lr
 8014ce8:	200041dc 	.word	0x200041dc

08014cec <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014cf0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8014cf2:	4a03      	ldr	r2, [pc, #12]	; (8014d00 <TRACE_UnLock+0x14>)
 8014cf4:	8ad3      	ldrh	r3, [r2, #22]
 8014cf6:	3b01      	subs	r3, #1
 8014cf8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cfa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8014cfe:	4770      	bx	lr
 8014d00:	200041dc 	.word	0x200041dc

08014d04 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8014d04:	4b02      	ldr	r3, [pc, #8]	; (8014d10 <TRACE_IsLocked+0xc>)
 8014d06:	8ad8      	ldrh	r0, [r3, #22]
}
 8014d08:	3800      	subs	r0, #0
 8014d0a:	bf18      	it	ne
 8014d0c:	2001      	movne	r0, #1
 8014d0e:	4770      	bx	lr
 8014d10:	200041dc 	.word	0x200041dc

08014d14 <UTIL_ADV_TRACE_Init>:
{
 8014d14:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8014d16:	2218      	movs	r2, #24
 8014d18:	2100      	movs	r1, #0
 8014d1a:	4807      	ldr	r0, [pc, #28]	; (8014d38 <UTIL_ADV_TRACE_Init+0x24>)
 8014d1c:	f000 f98f 	bl	801503e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8014d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014d24:	2100      	movs	r1, #0
 8014d26:	4805      	ldr	r0, [pc, #20]	; (8014d3c <UTIL_ADV_TRACE_Init+0x28>)
 8014d28:	f000 f989 	bl	801503e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8014d2c:	4b04      	ldr	r3, [pc, #16]	; (8014d40 <UTIL_ADV_TRACE_Init+0x2c>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	4804      	ldr	r0, [pc, #16]	; (8014d44 <UTIL_ADV_TRACE_Init+0x30>)
 8014d32:	4798      	blx	r3
}
 8014d34:	bd08      	pop	{r3, pc}
 8014d36:	bf00      	nop
 8014d38:	200041dc 	.word	0x200041dc
 8014d3c:	20003ddc 	.word	0x20003ddc
 8014d40:	08015a5c 	.word	0x08015a5c
 8014d44:	08014ec5 	.word	0x08014ec5

08014d48 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8014d48:	4b01      	ldr	r3, [pc, #4]	; (8014d50 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8014d4a:	6058      	str	r0, [r3, #4]
}
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	200041dc 	.word	0x200041dc

08014d54 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8014d54:	4b01      	ldr	r3, [pc, #4]	; (8014d5c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8014d56:	7218      	strb	r0, [r3, #8]
}
 8014d58:	4770      	bx	lr
 8014d5a:	bf00      	nop
 8014d5c:	200041dc 	.word	0x200041dc

08014d60 <TRACE_Send>:
{
 8014d60:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d62:	f3ef 8310 	mrs	r3, PRIMASK
 8014d66:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014d68:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8014d6a:	f7ff ffcb 	bl	8014d04 <TRACE_IsLocked>
 8014d6e:	b118      	cbz	r0, 8014d78 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d70:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014d74:	2000      	movs	r0, #0
}
 8014d76:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8014d78:	f7ff ffac 	bl	8014cd4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8014d7c:	4b1c      	ldr	r3, [pc, #112]	; (8014df0 <TRACE_Send+0x90>)
 8014d7e:	8a1a      	ldrh	r2, [r3, #16]
 8014d80:	8a5b      	ldrh	r3, [r3, #18]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d02e      	beq.n	8014de4 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014d86:	491a      	ldr	r1, [pc, #104]	; (8014df0 <TRACE_Send+0x90>)
 8014d88:	7889      	ldrb	r1, [r1, #2]
 8014d8a:	2901      	cmp	r1, #1
 8014d8c:	d017      	beq.n	8014dbe <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014d8e:	4a18      	ldr	r2, [pc, #96]	; (8014df0 <TRACE_Send+0x90>)
 8014d90:	7892      	ldrb	r2, [r2, #2]
 8014d92:	b932      	cbnz	r2, 8014da2 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014d94:	4a16      	ldr	r2, [pc, #88]	; (8014df0 <TRACE_Send+0x90>)
 8014d96:	8a12      	ldrh	r2, [r2, #16]
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d91e      	bls.n	8014dda <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014d9c:	1a9b      	subs	r3, r3, r2
 8014d9e:	4a14      	ldr	r2, [pc, #80]	; (8014df0 <TRACE_Send+0x90>)
 8014da0:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014da2:	4e13      	ldr	r6, [pc, #76]	; (8014df0 <TRACE_Send+0x90>)
 8014da4:	8a33      	ldrh	r3, [r6, #16]
 8014da6:	4d13      	ldr	r5, [pc, #76]	; (8014df4 <TRACE_Send+0x94>)
 8014da8:	441d      	add	r5, r3
 8014daa:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8014dae:	f7ec ff09 	bl	8001bc4 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014db2:	4b11      	ldr	r3, [pc, #68]	; (8014df8 <TRACE_Send+0x98>)
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	8ab1      	ldrh	r1, [r6, #20]
 8014db8:	4628      	mov	r0, r5
 8014dba:	4798      	blx	r3
 8014dbc:	e7db      	b.n	8014d76 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8014dbe:	480c      	ldr	r0, [pc, #48]	; (8014df0 <TRACE_Send+0x90>)
 8014dc0:	8801      	ldrh	r1, [r0, #0]
 8014dc2:	1a8a      	subs	r2, r1, r2
 8014dc4:	b292      	uxth	r2, r2
 8014dc6:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014dc8:	2102      	movs	r1, #2
 8014dca:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014dcc:	2100      	movs	r1, #0
 8014dce:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014dd0:	2a00      	cmp	r2, #0
 8014dd2:	d1dc      	bne.n	8014d8e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014dd4:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014dd6:	8201      	strh	r1, [r0, #16]
 8014dd8:	e7d9      	b.n	8014d8e <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014dda:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014dde:	4b04      	ldr	r3, [pc, #16]	; (8014df0 <TRACE_Send+0x90>)
 8014de0:	829a      	strh	r2, [r3, #20]
 8014de2:	e7de      	b.n	8014da2 <TRACE_Send+0x42>
      TRACE_UnLock();
 8014de4:	f7ff ff82 	bl	8014cec <TRACE_UnLock>
 8014de8:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014dec:	2000      	movs	r0, #0
}
 8014dee:	e7c2      	b.n	8014d76 <TRACE_Send+0x16>
 8014df0:	200041dc 	.word	0x200041dc
 8014df4:	20003ddc 	.word	0x20003ddc
 8014df8:	08015a5c 	.word	0x08015a5c

08014dfc <UTIL_ADV_TRACE_COND_FSend>:
{
 8014dfc:	b408      	push	{r3}
 8014dfe:	b530      	push	{r4, r5, lr}
 8014e00:	b086      	sub	sp, #24
 8014e02:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8014e04:	2300      	movs	r3, #0
 8014e06:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8014e0a:	4b2b      	ldr	r3, [pc, #172]	; (8014eb8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014e0c:	7a1b      	ldrb	r3, [r3, #8]
 8014e0e:	4283      	cmp	r3, r0
 8014e10:	d34c      	bcc.n	8014eac <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8014e12:	4b29      	ldr	r3, [pc, #164]	; (8014eb8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	4399      	bics	r1, r3
 8014e18:	d14b      	bne.n	8014eb2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8014e1a:	4b27      	ldr	r3, [pc, #156]	; (8014eb8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	b123      	cbz	r3, 8014e2a <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8014e20:	b11a      	cbz	r2, 8014e2a <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8014e22:	f10d 0102 	add.w	r1, sp, #2
 8014e26:	a801      	add	r0, sp, #4
 8014e28:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8014e2a:	ab0a      	add	r3, sp, #40	; 0x28
 8014e2c:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014e2e:	4622      	mov	r2, r4
 8014e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014e34:	4821      	ldr	r0, [pc, #132]	; (8014ebc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8014e36:	f000 fbf7 	bl	8015628 <tiny_vsnprintf_like>
 8014e3a:	b285      	uxth	r5, r0
  TRACE_Lock();
 8014e3c:	f7ff ff4a 	bl	8014cd4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8014e40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014e44:	18e8      	adds	r0, r5, r3
 8014e46:	4669      	mov	r1, sp
 8014e48:	b280      	uxth	r0, r0
 8014e4a:	f7ff feff 	bl	8014c4c <TRACE_AllocateBufer>
 8014e4e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014e52:	d026      	beq.n	8014ea2 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8014e54:	2300      	movs	r3, #0
 8014e56:	e00d      	b.n	8014e74 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014e58:	f8bd 2000 	ldrh.w	r2, [sp]
 8014e5c:	f103 0118 	add.w	r1, r3, #24
 8014e60:	4469      	add	r1, sp
 8014e62:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8014e66:	4916      	ldr	r1, [pc, #88]	; (8014ec0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014e68:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8014e6a:	3201      	adds	r2, #1
 8014e6c:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8014e70:	3301      	adds	r3, #1
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d8ed      	bhi.n	8014e58 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014e7c:	f8bd 0000 	ldrh.w	r0, [sp]
 8014e80:	9b05      	ldr	r3, [sp, #20]
 8014e82:	4622      	mov	r2, r4
 8014e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014e88:	4c0d      	ldr	r4, [pc, #52]	; (8014ec0 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8014e8a:	4420      	add	r0, r4
 8014e8c:	f000 fbcc 	bl	8015628 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8014e90:	f7ff ff2c 	bl	8014cec <TRACE_UnLock>
    return TRACE_Send();
 8014e94:	f7ff ff64 	bl	8014d60 <TRACE_Send>
}
 8014e98:	b006      	add	sp, #24
 8014e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e9e:	b001      	add	sp, #4
 8014ea0:	4770      	bx	lr
  TRACE_UnLock();
 8014ea2:	f7ff ff23 	bl	8014cec <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8014ea6:	f06f 0002 	mvn.w	r0, #2
 8014eaa:	e7f5      	b.n	8014e98 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8014eac:	f06f 0004 	mvn.w	r0, #4
 8014eb0:	e7f2      	b.n	8014e98 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8014eb2:	f06f 0005 	mvn.w	r0, #5
 8014eb6:	e7ef      	b.n	8014e98 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8014eb8:	200041dc 	.word	0x200041dc
 8014ebc:	200041f4 	.word	0x200041f4
 8014ec0:	20003ddc 	.word	0x20003ddc

08014ec4 <TRACE_TxCpltCallback>:
{
 8014ec4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8014eca:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8014ecc:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8014ece:	4b26      	ldr	r3, [pc, #152]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014ed0:	789b      	ldrb	r3, [r3, #2]
 8014ed2:	2b02      	cmp	r3, #2
 8014ed4:	d016      	beq.n	8014f04 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014ed6:	4a24      	ldr	r2, [pc, #144]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014ed8:	8a13      	ldrh	r3, [r2, #16]
 8014eda:	8a90      	ldrh	r0, [r2, #20]
 8014edc:	4403      	add	r3, r0
 8014ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014ee2:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8014ee4:	4b20      	ldr	r3, [pc, #128]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014ee6:	8a1a      	ldrh	r2, [r3, #16]
 8014ee8:	8a5b      	ldrh	r3, [r3, #18]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d003      	beq.n	8014ef6 <TRACE_TxCpltCallback+0x32>
 8014eee:	481e      	ldr	r0, [pc, #120]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014ef0:	8ac0      	ldrh	r0, [r0, #22]
 8014ef2:	2801      	cmp	r0, #1
 8014ef4:	d00b      	beq.n	8014f0e <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ef6:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8014efa:	f7ec fe69 	bl	8001bd0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8014efe:	f7ff fef5 	bl	8014cec <TRACE_UnLock>
}
 8014f02:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014f04:	4b18      	ldr	r3, [pc, #96]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f06:	2200      	movs	r2, #0
 8014f08:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014f0a:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8014f0c:	e7ea      	b.n	8014ee4 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8014f0e:	4816      	ldr	r0, [pc, #88]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f10:	7880      	ldrb	r0, [r0, #2]
 8014f12:	2801      	cmp	r0, #1
 8014f14:	d014      	beq.n	8014f40 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014f16:	4a14      	ldr	r2, [pc, #80]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f18:	7892      	ldrb	r2, [r2, #2]
 8014f1a:	b932      	cbnz	r2, 8014f2a <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8014f1c:	4a12      	ldr	r2, [pc, #72]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f1e:	8a12      	ldrh	r2, [r2, #16]
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d91b      	bls.n	8014f5c <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014f24:	1a9b      	subs	r3, r3, r2
 8014f26:	4a10      	ldr	r2, [pc, #64]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f28:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014f2a:	4b0f      	ldr	r3, [pc, #60]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f2c:	8a1a      	ldrh	r2, [r3, #16]
 8014f2e:	480f      	ldr	r0, [pc, #60]	; (8014f6c <TRACE_TxCpltCallback+0xa8>)
 8014f30:	4410      	add	r0, r2
 8014f32:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014f36:	4a0e      	ldr	r2, [pc, #56]	; (8014f70 <TRACE_TxCpltCallback+0xac>)
 8014f38:	68d2      	ldr	r2, [r2, #12]
 8014f3a:	8a99      	ldrh	r1, [r3, #20]
 8014f3c:	4790      	blx	r2
 8014f3e:	e7e0      	b.n	8014f02 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8014f40:	4c09      	ldr	r4, [pc, #36]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f42:	8820      	ldrh	r0, [r4, #0]
 8014f44:	1a82      	subs	r2, r0, r2
 8014f46:	b292      	uxth	r2, r2
 8014f48:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8014f4a:	2002      	movs	r0, #2
 8014f4c:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014f4e:	2000      	movs	r0, #0
 8014f50:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014f52:	2a00      	cmp	r2, #0
 8014f54:	d1df      	bne.n	8014f16 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014f56:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014f58:	8220      	strh	r0, [r4, #16]
 8014f5a:	e7dc      	b.n	8014f16 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014f5c:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8014f60:	4b01      	ldr	r3, [pc, #4]	; (8014f68 <TRACE_TxCpltCallback+0xa4>)
 8014f62:	829a      	strh	r2, [r3, #20]
 8014f64:	e7e1      	b.n	8014f2a <TRACE_TxCpltCallback+0x66>
 8014f66:	bf00      	nop
 8014f68:	200041dc 	.word	0x200041dc
 8014f6c:	20003ddc 	.word	0x20003ddc
 8014f70:	08015a5c 	.word	0x08015a5c

08014f74 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8014f74:	2300      	movs	r3, #0
 8014f76:	4a02      	ldr	r2, [pc, #8]	; (8014f80 <UTIL_LPM_Init+0xc>)
 8014f78:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014f7a:	4a02      	ldr	r2, [pc, #8]	; (8014f84 <UTIL_LPM_Init+0x10>)
 8014f7c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014f7e:	4770      	bx	lr
 8014f80:	200043f8 	.word	0x200043f8
 8014f84:	200043f4 	.word	0x200043f4

08014f88 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f88:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014f8c:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8014f8e:	b141      	cbz	r1, 8014fa2 <UTIL_LPM_SetStopMode+0x1a>
 8014f90:	2901      	cmp	r1, #1
 8014f92:	d103      	bne.n	8014f9c <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8014f94:	4906      	ldr	r1, [pc, #24]	; (8014fb0 <UTIL_LPM_SetStopMode+0x28>)
 8014f96:	680a      	ldr	r2, [r1, #0]
 8014f98:	4302      	orrs	r2, r0
 8014f9a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f9c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014fa0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8014fa2:	4903      	ldr	r1, [pc, #12]	; (8014fb0 <UTIL_LPM_SetStopMode+0x28>)
 8014fa4:	680a      	ldr	r2, [r1, #0]
 8014fa6:	ea22 0200 	bic.w	r2, r2, r0
 8014faa:	600a      	str	r2, [r1, #0]
      break;
 8014fac:	e7f6      	b.n	8014f9c <UTIL_LPM_SetStopMode+0x14>
 8014fae:	bf00      	nop
 8014fb0:	200043f8 	.word	0x200043f8

08014fb4 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fb4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014fb8:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8014fba:	b141      	cbz	r1, 8014fce <UTIL_LPM_SetOffMode+0x1a>
 8014fbc:	2901      	cmp	r1, #1
 8014fbe:	d103      	bne.n	8014fc8 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014fc0:	4906      	ldr	r1, [pc, #24]	; (8014fdc <UTIL_LPM_SetOffMode+0x28>)
 8014fc2:	680a      	ldr	r2, [r1, #0]
 8014fc4:	4302      	orrs	r2, r0
 8014fc6:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fc8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014fcc:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8014fce:	4903      	ldr	r1, [pc, #12]	; (8014fdc <UTIL_LPM_SetOffMode+0x28>)
 8014fd0:	680a      	ldr	r2, [r1, #0]
 8014fd2:	ea22 0200 	bic.w	r2, r2, r0
 8014fd6:	600a      	str	r2, [r1, #0]
      break;
 8014fd8:	e7f6      	b.n	8014fc8 <UTIL_LPM_SetOffMode+0x14>
 8014fda:	bf00      	nop
 8014fdc:	200043f4 	.word	0x200043f4

08014fe0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8014fe0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fe2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014fe6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8014fe8:	4b0c      	ldr	r3, [pc, #48]	; (801501c <UTIL_LPM_EnterLowPower+0x3c>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	b13b      	cbz	r3, 8014ffe <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8014fee:	4d0c      	ldr	r5, [pc, #48]	; (8015020 <UTIL_LPM_EnterLowPower+0x40>)
 8014ff0:	682b      	ldr	r3, [r5, #0]
 8014ff2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8014ff4:	686b      	ldr	r3, [r5, #4]
 8014ff6:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ff8:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8014ffc:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8014ffe:	4b09      	ldr	r3, [pc, #36]	; (8015024 <UTIL_LPM_EnterLowPower+0x44>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	b12b      	cbz	r3, 8015010 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8015004:	4d06      	ldr	r5, [pc, #24]	; (8015020 <UTIL_LPM_EnterLowPower+0x40>)
 8015006:	68ab      	ldr	r3, [r5, #8]
 8015008:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801500a:	68eb      	ldr	r3, [r5, #12]
 801500c:	4798      	blx	r3
 801500e:	e7f3      	b.n	8014ff8 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8015010:	4d03      	ldr	r5, [pc, #12]	; (8015020 <UTIL_LPM_EnterLowPower+0x40>)
 8015012:	692b      	ldr	r3, [r5, #16]
 8015014:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8015016:	696b      	ldr	r3, [r5, #20]
 8015018:	4798      	blx	r3
 801501a:	e7ed      	b.n	8014ff8 <UTIL_LPM_EnterLowPower+0x18>
 801501c:	200043f8 	.word	0x200043f8
 8015020:	080159f8 	.word	0x080159f8
 8015024:	200043f4 	.word	0x200043f4

08015028 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8015028:	e004      	b.n	8015034 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801502a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801502e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8015032:	461a      	mov	r2, r3
 8015034:	1e53      	subs	r3, r2, #1
 8015036:	b29b      	uxth	r3, r3
 8015038:	2a00      	cmp	r2, #0
 801503a:	d1f6      	bne.n	801502a <UTIL_MEM_cpy_8+0x2>
    }
}
 801503c:	4770      	bx	lr

0801503e <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 801503e:	e002      	b.n	8015046 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8015040:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8015044:	461a      	mov	r2, r3
 8015046:	1e53      	subs	r3, r2, #1
 8015048:	b29b      	uxth	r3, r3
 801504a:	2a00      	cmp	r2, #0
 801504c:	d1f8      	bne.n	8015040 <UTIL_MEM_set_8+0x2>
  }
}
 801504e:	4770      	bx	lr

08015050 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8015050:	b082      	sub	sp, #8
 8015052:	b082      	sub	sp, #8
 8015054:	f10d 0c08 	add.w	ip, sp, #8
 8015058:	e90c 0006 	stmdb	ip, {r1, r2}
 801505c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801505e:	2200      	movs	r2, #0
 8015060:	6002      	str	r2, [r0, #0]
 8015062:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8015064:	440b      	add	r3, r1
 8015066:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8015068:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801506c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015070:	440a      	add	r2, r1
 8015072:	b291      	uxth	r1, r2
 8015074:	b212      	sxth	r2, r2
 8015076:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8015078:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801507c:	db04      	blt.n	8015088 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801507e:	3301      	adds	r3, #1
 8015080:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8015082:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8015086:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8015088:	b002      	add	sp, #8
 801508a:	b002      	add	sp, #8
 801508c:	4770      	bx	lr

0801508e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801508e:	b082      	sub	sp, #8
 8015090:	b082      	sub	sp, #8
 8015092:	f10d 0c08 	add.w	ip, sp, #8
 8015096:	e90c 0006 	stmdb	ip, {r1, r2}
 801509a:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801509c:	2200      	movs	r2, #0
 801509e:	6002      	str	r2, [r0, #0]
 80150a0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80150a2:	1acb      	subs	r3, r1, r3
 80150a4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80150a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80150aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80150ae:	1a52      	subs	r2, r2, r1
 80150b0:	b291      	uxth	r1, r2
 80150b2:	b212      	sxth	r2, r2
 80150b4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80150b6:	2a00      	cmp	r2, #0
 80150b8:	db02      	blt.n	80150c0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80150ba:	b002      	add	sp, #8
 80150bc:	b002      	add	sp, #8
 80150be:	4770      	bx	lr
    c.Seconds--;
 80150c0:	3b01      	subs	r3, #1
 80150c2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80150c4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80150c8:	8081      	strh	r1, [r0, #4]
  return c;
 80150ca:	e7f6      	b.n	80150ba <SysTimeSub+0x2c>

080150cc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80150cc:	b530      	push	{r4, r5, lr}
 80150ce:	b089      	sub	sp, #36	; 0x24
 80150d0:	ac02      	add	r4, sp, #8
 80150d2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80150d6:	2300      	movs	r3, #0
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80150de:	4d0b      	ldr	r5, [pc, #44]	; (801510c <SysTimeSet+0x40>)
 80150e0:	692b      	ldr	r3, [r5, #16]
 80150e2:	a805      	add	r0, sp, #20
 80150e4:	4798      	blx	r3
 80150e6:	4603      	mov	r3, r0
 80150e8:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80150ea:	9a05      	ldr	r2, [sp, #20]
 80150ec:	9200      	str	r2, [sp, #0]
 80150ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 80150f2:	a806      	add	r0, sp, #24
 80150f4:	f7ff ffcb 	bl	801508e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80150f8:	682b      	ldr	r3, [r5, #0]
 80150fa:	9806      	ldr	r0, [sp, #24]
 80150fc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80150fe:	68ab      	ldr	r3, [r5, #8]
 8015100:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8015104:	4798      	blx	r3
}
 8015106:	b009      	add	sp, #36	; 0x24
 8015108:	bd30      	pop	{r4, r5, pc}
 801510a:	bf00      	nop
 801510c:	08015a1c 	.word	0x08015a1c

08015110 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8015110:	b530      	push	{r4, r5, lr}
 8015112:	b087      	sub	sp, #28
 8015114:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8015116:	2300      	movs	r3, #0
 8015118:	9304      	str	r3, [sp, #16]
 801511a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801511e:	6003      	str	r3, [r0, #0]
 8015120:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8015122:	4d0b      	ldr	r5, [pc, #44]	; (8015150 <SysTimeGet+0x40>)
 8015124:	692b      	ldr	r3, [r5, #16]
 8015126:	a805      	add	r0, sp, #20
 8015128:	4798      	blx	r3
 801512a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801512c:	68eb      	ldr	r3, [r5, #12]
 801512e:	4798      	blx	r3
 8015130:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015134:	686b      	ldr	r3, [r5, #4]
 8015136:	4798      	blx	r3
 8015138:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801513a:	9b05      	ldr	r3, [sp, #20]
 801513c:	9300      	str	r3, [sp, #0]
 801513e:	9b04      	ldr	r3, [sp, #16]
 8015140:	aa02      	add	r2, sp, #8
 8015142:	ca06      	ldmia	r2, {r1, r2}
 8015144:	4620      	mov	r0, r4
 8015146:	f7ff ff83 	bl	8015050 <SysTimeAdd>

  return sysTime;
}
 801514a:	4620      	mov	r0, r4
 801514c:	b007      	add	sp, #28
 801514e:	bd30      	pop	{r4, r5, pc}
 8015150:	08015a1c 	.word	0x08015a1c

08015154 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8015154:	b530      	push	{r4, r5, lr}
 8015156:	b083      	sub	sp, #12
 8015158:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801515a:	2300      	movs	r3, #0
 801515c:	9300      	str	r3, [sp, #0]
 801515e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8015162:	4b06      	ldr	r3, [pc, #24]	; (801517c <SysTimeGetMcuTime+0x28>)
 8015164:	691b      	ldr	r3, [r3, #16]
 8015166:	466d      	mov	r5, sp
 8015168:	a801      	add	r0, sp, #4
 801516a:	4798      	blx	r3
 801516c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801516e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015172:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8015176:	4620      	mov	r0, r4
 8015178:	b003      	add	sp, #12
 801517a:	bd30      	pop	{r4, r5, pc}
 801517c:	08015a1c 	.word	0x08015a1c

08015180 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8015180:	b530      	push	{r4, r5, lr}
 8015182:	b089      	sub	sp, #36	; 0x24
 8015184:	ac02      	add	r4, sp, #8
 8015186:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801518a:	4d0c      	ldr	r5, [pc, #48]	; (80151bc <SysTimeToMs+0x3c>)
 801518c:	68eb      	ldr	r3, [r5, #12]
 801518e:	4798      	blx	r3
 8015190:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015194:	686b      	ldr	r3, [r5, #4]
 8015196:	4798      	blx	r3
 8015198:	4603      	mov	r3, r0
 801519a:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801519c:	9a07      	ldr	r2, [sp, #28]
 801519e:	9200      	str	r2, [sp, #0]
 80151a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80151a4:	a804      	add	r0, sp, #16
 80151a6:	f7ff ff72 	bl	801508e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80151aa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80151ae:	9a04      	ldr	r2, [sp, #16]
 80151b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80151b4:	fb00 3002 	mla	r0, r0, r2, r3
 80151b8:	b009      	add	sp, #36	; 0x24
 80151ba:	bd30      	pop	{r4, r5, pc}
 80151bc:	08015a1c 	.word	0x08015a1c

080151c0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80151c0:	b530      	push	{r4, r5, lr}
 80151c2:	b087      	sub	sp, #28
 80151c4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80151c6:	4b12      	ldr	r3, [pc, #72]	; (8015210 <SysTimeFromMs+0x50>)
 80151c8:	fba3 2301 	umull	r2, r3, r3, r1
 80151cc:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80151ce:	9304      	str	r3, [sp, #16]
 80151d0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80151d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80151d8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80151dc:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80151e0:	2300      	movs	r3, #0
 80151e2:	9302      	str	r3, [sp, #8]
 80151e4:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80151e6:	4d0b      	ldr	r5, [pc, #44]	; (8015214 <SysTimeFromMs+0x54>)
 80151e8:	68eb      	ldr	r3, [r5, #12]
 80151ea:	4798      	blx	r3
 80151ec:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80151f0:	686b      	ldr	r3, [r5, #4]
 80151f2:	4798      	blx	r3
 80151f4:	4603      	mov	r3, r0
 80151f6:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80151f8:	9a03      	ldr	r2, [sp, #12]
 80151fa:	9200      	str	r2, [sp, #0]
 80151fc:	aa06      	add	r2, sp, #24
 80151fe:	e912 0006 	ldmdb	r2, {r1, r2}
 8015202:	4620      	mov	r0, r4
 8015204:	f7ff ff24 	bl	8015050 <SysTimeAdd>
}
 8015208:	4620      	mov	r0, r4
 801520a:	b007      	add	sp, #28
 801520c:	bd30      	pop	{r4, r5, pc}
 801520e:	bf00      	nop
 8015210:	10624dd3 	.word	0x10624dd3
 8015214:	08015a1c 	.word	0x08015a1c

08015218 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8015218:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801521a:	4b03      	ldr	r3, [pc, #12]	; (8015228 <UTIL_TIMER_Init+0x10>)
 801521c:	2200      	movs	r2, #0
 801521e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8015220:	4b02      	ldr	r3, [pc, #8]	; (801522c <UTIL_TIMER_Init+0x14>)
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	4798      	blx	r3
}
 8015226:	bd08      	pop	{r3, pc}
 8015228:	200043fc 	.word	0x200043fc
 801522c:	08015a30 	.word	0x08015a30

08015230 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8015230:	b1a8      	cbz	r0, 801525e <UTIL_TIMER_Create+0x2e>
{
 8015232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015234:	4617      	mov	r7, r2
 8015236:	461e      	mov	r6, r3
 8015238:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801523a:	b193      	cbz	r3, 8015262 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 801523c:	2500      	movs	r5, #0
 801523e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8015240:	4b09      	ldr	r3, [pc, #36]	; (8015268 <UTIL_TIMER_Create+0x38>)
 8015242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015244:	4608      	mov	r0, r1
 8015246:	4798      	blx	r3
 8015248:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801524a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 801524c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801524e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8015250:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8015252:	9b06      	ldr	r3, [sp, #24]
 8015254:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8015256:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8015258:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801525a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 801525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801525e:	2001      	movs	r0, #1
}
 8015260:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8015262:	2001      	movs	r0, #1
 8015264:	e7fa      	b.n	801525c <UTIL_TIMER_Create+0x2c>
 8015266:	bf00      	nop
 8015268:	08015a30 	.word	0x08015a30

0801526c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801526c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801526e:	4c03      	ldr	r4, [pc, #12]	; (801527c <UTIL_TIMER_GetCurrentTime+0x10>)
 8015270:	69e3      	ldr	r3, [r4, #28]
 8015272:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8015274:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015276:	4798      	blx	r3
}
 8015278:	bd10      	pop	{r4, pc}
 801527a:	bf00      	nop
 801527c:	08015a30 	.word	0x08015a30

08015280 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8015280:	b570      	push	{r4, r5, r6, lr}
 8015282:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8015284:	4d05      	ldr	r5, [pc, #20]	; (801529c <UTIL_TIMER_GetElapsedTime+0x1c>)
 8015286:	69eb      	ldr	r3, [r5, #28]
 8015288:	4798      	blx	r3
 801528a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801528c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801528e:	4630      	mov	r0, r6
 8015290:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8015292:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015294:	1a20      	subs	r0, r4, r0
 8015296:	4798      	blx	r3
}
 8015298:	bd70      	pop	{r4, r5, r6, pc}
 801529a:	bf00      	nop
 801529c:	08015a30 	.word	0x08015a30

080152a0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80152a0:	4b05      	ldr	r3, [pc, #20]	; (80152b8 <TimerExists+0x18>)
 80152a2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80152a4:	e000      	b.n	80152a8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80152a6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80152a8:	b11b      	cbz	r3, 80152b2 <TimerExists+0x12>
    if( cur == TimerObject )
 80152aa:	4283      	cmp	r3, r0
 80152ac:	d1fb      	bne.n	80152a6 <TimerExists+0x6>
      return true;
 80152ae:	2001      	movs	r0, #1
  }
  return false;
}
 80152b0:	4770      	bx	lr
  return false;
 80152b2:	2000      	movs	r0, #0
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	200043fc 	.word	0x200043fc

080152bc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80152bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152be:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80152c0:	4e09      	ldr	r6, [pc, #36]	; (80152e8 <TimerSetTimeout+0x2c>)
 80152c2:	6a33      	ldr	r3, [r6, #32]
 80152c4:	4798      	blx	r3
 80152c6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80152c8:	2301      	movs	r3, #1
 80152ca:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80152cc:	6827      	ldr	r7, [r4, #0]
 80152ce:	69b6      	ldr	r6, [r6, #24]
 80152d0:	47b0      	blx	r6
 80152d2:	4428      	add	r0, r5
 80152d4:	4287      	cmp	r7, r0
 80152d6:	d202      	bcs.n	80152de <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80152d8:	47b0      	blx	r6
 80152da:	4428      	add	r0, r5
 80152dc:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80152de:	4b02      	ldr	r3, [pc, #8]	; (80152e8 <TimerSetTimeout+0x2c>)
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	6820      	ldr	r0, [r4, #0]
 80152e4:	4798      	blx	r3
}
 80152e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e8:	08015a30 	.word	0x08015a30

080152ec <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80152ec:	b368      	cbz	r0, 801534a <UTIL_TIMER_Stop+0x5e>
{
 80152ee:	b510      	push	{r4, lr}
 80152f0:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80152f6:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80152f8:	4b15      	ldr	r3, [pc, #84]	; (8015350 <UTIL_TIMER_Stop+0x64>)
 80152fa:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80152fc:	2301      	movs	r3, #1
 80152fe:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8015300:	b1e1      	cbz	r1, 801533c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8015302:	2300      	movs	r3, #0
 8015304:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8015306:	4288      	cmp	r0, r1
 8015308:	d006      	beq.n	8015318 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801530a:	460b      	mov	r3, r1
        while( cur != NULL )
 801530c:	b1b3      	cbz	r3, 801533c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801530e:	4293      	cmp	r3, r2
 8015310:	d011      	beq.n	8015336 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8015312:	4619      	mov	r1, r3
            cur = cur->Next;
 8015314:	695b      	ldr	r3, [r3, #20]
 8015316:	e7f9      	b.n	801530c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8015318:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801531a:	6948      	ldr	r0, [r1, #20]
 801531c:	b120      	cbz	r0, 8015328 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801531e:	4b0c      	ldr	r3, [pc, #48]	; (8015350 <UTIL_TIMER_Stop+0x64>)
 8015320:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8015322:	f7ff ffcb 	bl	80152bc <TimerSetTimeout>
 8015326:	e009      	b.n	801533c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8015328:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <UTIL_TIMER_Stop+0x68>)
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	4798      	blx	r3
            TimerListHead = NULL;
 801532e:	4b08      	ldr	r3, [pc, #32]	; (8015350 <UTIL_TIMER_Stop+0x64>)
 8015330:	2200      	movs	r2, #0
 8015332:	601a      	str	r2, [r3, #0]
 8015334:	e002      	b.n	801533c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8015336:	695b      	ldr	r3, [r3, #20]
 8015338:	b123      	cbz	r3, 8015344 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801533a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801533c:	f384 8810 	msr	PRIMASK, r4
}
 8015340:	2000      	movs	r0, #0
}
 8015342:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8015344:	2300      	movs	r3, #0
 8015346:	614b      	str	r3, [r1, #20]
 8015348:	e7f8      	b.n	801533c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801534a:	2001      	movs	r0, #1
}
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop
 8015350:	200043fc 	.word	0x200043fc
 8015354:	08015a30 	.word	0x08015a30

08015358 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015358:	4b09      	ldr	r3, [pc, #36]	; (8015380 <TimerInsertTimer+0x28>)
 801535a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801535c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801535e:	e001      	b.n	8015364 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8015360:	461a      	mov	r2, r3
        next = next->Next;
 8015362:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8015364:	6951      	ldr	r1, [r2, #20]
 8015366:	b139      	cbz	r1, 8015378 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8015368:	6819      	ldr	r1, [r3, #0]
 801536a:	f8d0 c000 	ldr.w	ip, [r0]
 801536e:	458c      	cmp	ip, r1
 8015370:	d8f6      	bhi.n	8015360 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8015372:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8015374:	6143      	str	r3, [r0, #20]
        return;
 8015376:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8015378:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801537a:	2300      	movs	r3, #0
 801537c:	6143      	str	r3, [r0, #20]
}
 801537e:	4770      	bx	lr
 8015380:	200043fc 	.word	0x200043fc

08015384 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8015384:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015386:	4b05      	ldr	r3, [pc, #20]	; (801539c <TimerInsertNewHeadTimer+0x18>)
 8015388:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801538a:	b10b      	cbz	r3, 8015390 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 801538c:	2200      	movs	r2, #0
 801538e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8015390:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8015392:	4b02      	ldr	r3, [pc, #8]	; (801539c <TimerInsertNewHeadTimer+0x18>)
 8015394:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8015396:	f7ff ff91 	bl	80152bc <TimerSetTimeout>
}
 801539a:	bd08      	pop	{r3, pc}
 801539c:	200043fc 	.word	0x200043fc

080153a0 <UTIL_TIMER_Start>:
{
 80153a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d036      	beq.n	8015414 <UTIL_TIMER_Start+0x74>
 80153a6:	4604      	mov	r4, r0
 80153a8:	f7ff ff7a 	bl	80152a0 <TimerExists>
 80153ac:	2800      	cmp	r0, #0
 80153ae:	d134      	bne.n	801541a <UTIL_TIMER_Start+0x7a>
 80153b0:	7a65      	ldrb	r5, [r4, #9]
 80153b2:	2d00      	cmp	r5, #0
 80153b4:	d133      	bne.n	801541e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153b6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80153ba:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80153bc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80153be:	4b19      	ldr	r3, [pc, #100]	; (8015424 <UTIL_TIMER_Start+0x84>)
 80153c0:	6a1b      	ldr	r3, [r3, #32]
 80153c2:	4798      	blx	r3
    if( ticks < minValue )
 80153c4:	4287      	cmp	r7, r0
 80153c6:	d300      	bcc.n	80153ca <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80153c8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80153ca:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80153cc:	2300      	movs	r3, #0
 80153ce:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80153d0:	2201      	movs	r2, #1
 80153d2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80153d4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80153d6:	4b14      	ldr	r3, [pc, #80]	; (8015428 <UTIL_TIMER_Start+0x88>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	b183      	cbz	r3, 80153fe <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80153dc:	4b11      	ldr	r3, [pc, #68]	; (8015424 <UTIL_TIMER_Start+0x84>)
 80153de:	699b      	ldr	r3, [r3, #24]
 80153e0:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	4418      	add	r0, r3
 80153e6:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80153e8:	4b0f      	ldr	r3, [pc, #60]	; (8015428 <UTIL_TIMER_Start+0x88>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4298      	cmp	r0, r3
 80153f0:	d20c      	bcs.n	801540c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7ff ffc6 	bl	8015384 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153f8:	f386 8810 	msr	PRIMASK, r6
}
 80153fc:	e00b      	b.n	8015416 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80153fe:	4b09      	ldr	r3, [pc, #36]	; (8015424 <UTIL_TIMER_Start+0x84>)
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8015404:	4620      	mov	r0, r4
 8015406:	f7ff ffbd 	bl	8015384 <TimerInsertNewHeadTimer>
 801540a:	e7f5      	b.n	80153f8 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 801540c:	4620      	mov	r0, r4
 801540e:	f7ff ffa3 	bl	8015358 <TimerInsertTimer>
 8015412:	e7f1      	b.n	80153f8 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8015414:	2501      	movs	r5, #1
}
 8015416:	4628      	mov	r0, r5
 8015418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801541a:	2501      	movs	r5, #1
 801541c:	e7fb      	b.n	8015416 <UTIL_TIMER_Start+0x76>
 801541e:	2501      	movs	r5, #1
 8015420:	e7f9      	b.n	8015416 <UTIL_TIMER_Start+0x76>
 8015422:	bf00      	nop
 8015424:	08015a30 	.word	0x08015a30
 8015428:	200043fc 	.word	0x200043fc

0801542c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 801542c:	b198      	cbz	r0, 8015456 <UTIL_TIMER_SetPeriod+0x2a>
{
 801542e:	b510      	push	{r4, lr}
 8015430:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8015432:	4b0a      	ldr	r3, [pc, #40]	; (801545c <UTIL_TIMER_SetPeriod+0x30>)
 8015434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015436:	4608      	mov	r0, r1
 8015438:	4798      	blx	r3
 801543a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 801543c:	4620      	mov	r0, r4
 801543e:	f7ff ff2f 	bl	80152a0 <TimerExists>
 8015442:	b908      	cbnz	r0, 8015448 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8015444:	2000      	movs	r0, #0
}
 8015446:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8015448:	4620      	mov	r0, r4
 801544a:	f7ff ff4f 	bl	80152ec <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801544e:	4620      	mov	r0, r4
 8015450:	f7ff ffa6 	bl	80153a0 <UTIL_TIMER_Start>
 8015454:	e7f7      	b.n	8015446 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8015456:	2001      	movs	r0, #1
}
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	08015a30 	.word	0x08015a30

08015460 <UTIL_TIMER_IRQ_Handler>:
{
 8015460:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015462:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015466:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8015468:	4c1e      	ldr	r4, [pc, #120]	; (80154e4 <UTIL_TIMER_IRQ_Handler+0x84>)
 801546a:	6963      	ldr	r3, [r4, #20]
 801546c:	4798      	blx	r3
 801546e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8015470:	6923      	ldr	r3, [r4, #16]
 8015472:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8015474:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8015476:	4b1c      	ldr	r3, [pc, #112]	; (80154e8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	b923      	cbnz	r3, 8015486 <UTIL_TIMER_IRQ_Handler+0x26>
 801547c:	e018      	b.n	80154b0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801547e:	2200      	movs	r2, #0
 8015480:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8015482:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8015484:	b1a3      	cbz	r3, 80154b0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8015486:	681a      	ldr	r2, [r3, #0]
 8015488:	42a2      	cmp	r2, r4
 801548a:	d9f8      	bls.n	801547e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 801548c:	1a31      	subs	r1, r6, r0
 801548e:	440a      	add	r2, r1
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	e7f6      	b.n	8015482 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8015494:	4b14      	ldr	r3, [pc, #80]	; (80154e8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015496:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8015498:	6962      	ldr	r2, [r4, #20]
 801549a:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801549c:	2300      	movs	r3, #0
 801549e:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80154a0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80154a2:	68e3      	ldr	r3, [r4, #12]
 80154a4:	6920      	ldr	r0, [r4, #16]
 80154a6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80154a8:	8963      	ldrh	r3, [r4, #10]
 80154aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154ae:	d012      	beq.n	80154d6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80154b0:	4b0d      	ldr	r3, [pc, #52]	; (80154e8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	b13b      	cbz	r3, 80154c6 <UTIL_TIMER_IRQ_Handler+0x66>
 80154b6:	681c      	ldr	r4, [r3, #0]
 80154b8:	2c00      	cmp	r4, #0
 80154ba:	d0eb      	beq.n	8015494 <UTIL_TIMER_IRQ_Handler+0x34>
 80154bc:	4b09      	ldr	r3, [pc, #36]	; (80154e4 <UTIL_TIMER_IRQ_Handler+0x84>)
 80154be:	699b      	ldr	r3, [r3, #24]
 80154c0:	4798      	blx	r3
 80154c2:	4284      	cmp	r4, r0
 80154c4:	d3e6      	bcc.n	8015494 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80154c6:	4b08      	ldr	r3, [pc, #32]	; (80154e8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80154c8:	6818      	ldr	r0, [r3, #0]
 80154ca:	b108      	cbz	r0, 80154d0 <UTIL_TIMER_IRQ_Handler+0x70>
 80154cc:	7a03      	ldrb	r3, [r0, #8]
 80154ce:	b133      	cbz	r3, 80154de <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154d0:	f385 8810 	msr	PRIMASK, r5
}
 80154d4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80154d6:	4620      	mov	r0, r4
 80154d8:	f7ff ff62 	bl	80153a0 <UTIL_TIMER_Start>
 80154dc:	e7e8      	b.n	80154b0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80154de:	f7ff feed 	bl	80152bc <TimerSetTimeout>
 80154e2:	e7f5      	b.n	80154d0 <UTIL_TIMER_IRQ_Handler+0x70>
 80154e4:	08015a30 	.word	0x08015a30
 80154e8:	200043fc 	.word	0x200043fc

080154ec <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80154ec:	4601      	mov	r1, r0
  int i = 0;
 80154ee:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80154f0:	e008      	b.n	8015504 <ee_skip_atoi+0x18>
 80154f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80154f6:	1c53      	adds	r3, r2, #1
 80154f8:	600b      	str	r3, [r1, #0]
 80154fa:	7813      	ldrb	r3, [r2, #0]
 80154fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015500:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8015504:	680a      	ldr	r2, [r1, #0]
 8015506:	7813      	ldrb	r3, [r2, #0]
 8015508:	3b30      	subs	r3, #48	; 0x30
 801550a:	b2db      	uxtb	r3, r3
 801550c:	2b09      	cmp	r3, #9
 801550e:	d9f0      	bls.n	80154f2 <ee_skip_atoi+0x6>
  return i;
}
 8015510:	4770      	bx	lr
	...

08015514 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8015514:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8015518:	b093      	sub	sp, #76	; 0x4c
 801551a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801551c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801551e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8015522:	d110      	bne.n	8015546 <ee_number+0x32>
  char *dig = lower_digits;
 8015524:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8015620 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8015528:	1e9f      	subs	r7, r3, #2
 801552a:	2f22      	cmp	r7, #34	; 0x22
 801552c:	d875      	bhi.n	801561a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801552e:	f016 0401 	ands.w	r4, r6, #1
 8015532:	d00b      	beq.n	801554c <ee_number+0x38>
 8015534:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8015538:	f016 0f02 	tst.w	r6, #2
 801553c:	d00f      	beq.n	801555e <ee_number+0x4a>
  {
    if (num < 0)
 801553e:	2a00      	cmp	r2, #0
 8015540:	db07      	blt.n	8015552 <ee_number+0x3e>
  sign = 0;
 8015542:	2700      	movs	r7, #0
 8015544:	e00c      	b.n	8015560 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8015546:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8015624 <ee_number+0x110>
 801554a:	e7ed      	b.n	8015528 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 801554c:	f04f 0e20 	mov.w	lr, #32
 8015550:	e7f2      	b.n	8015538 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8015552:	4252      	negs	r2, r2
      size--;
 8015554:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015556:	3e01      	subs	r6, #1
 8015558:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 801555a:	272d      	movs	r7, #45	; 0x2d
 801555c:	e000      	b.n	8015560 <ee_number+0x4c>
  sign = 0;
 801555e:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8015560:	bb5a      	cbnz	r2, 80155ba <ee_number+0xa6>
    tmp[i++] = '0';
 8015562:	2330      	movs	r3, #48	; 0x30
 8015564:	f88d 3004 	strb.w	r3, [sp, #4]
 8015568:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 801556c:	45ac      	cmp	ip, r5
 801556e:	dd00      	ble.n	8015572 <ee_number+0x5e>
 8015570:	4665      	mov	r5, ip
  size -= precision;
 8015572:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015574:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015576:	b31c      	cbz	r4, 80155c0 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8015578:	b11f      	cbz	r7, 8015582 <ee_number+0x6e>
 801557a:	f800 7b01 	strb.w	r7, [r0], #1
 801557e:	3901      	subs	r1, #1
 8015580:	d007      	beq.n	8015592 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8015582:	2b00      	cmp	r3, #0
 8015584:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015588:	dd24      	ble.n	80155d4 <ee_number+0xc0>
 801558a:	f800 eb01 	strb.w	lr, [r0], #1
 801558e:	3901      	subs	r1, #1
 8015590:	d1f7      	bne.n	8015582 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8015592:	b013      	add	sp, #76	; 0x4c
 8015594:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015598:	fbb2 f6f3 	udiv	r6, r2, r3
 801559c:	fb03 2216 	mls	r2, r3, r6, r2
 80155a0:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80155a4:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80155a8:	446a      	add	r2, sp
 80155aa:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80155ae:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80155b0:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80155b4:	2a00      	cmp	r2, #0
 80155b6:	d1ef      	bne.n	8015598 <ee_number+0x84>
 80155b8:	e7d8      	b.n	801556c <ee_number+0x58>
  i = 0;
 80155ba:	f04f 0c00 	mov.w	ip, #0
 80155be:	e7f9      	b.n	80155b4 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80155c6:	ddd7      	ble.n	8015578 <ee_number+0x64>
 80155c8:	2220      	movs	r2, #32
 80155ca:	f800 2b01 	strb.w	r2, [r0], #1
 80155ce:	3901      	subs	r1, #1
 80155d0:	d1f6      	bne.n	80155c0 <ee_number+0xac>
 80155d2:	e7de      	b.n	8015592 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80155d4:	4565      	cmp	r5, ip
 80155d6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80155da:	dd05      	ble.n	80155e8 <ee_number+0xd4>
 80155dc:	2230      	movs	r2, #48	; 0x30
 80155de:	f800 2b01 	strb.w	r2, [r0], #1
 80155e2:	3901      	subs	r1, #1
 80155e4:	d1f6      	bne.n	80155d4 <ee_number+0xc0>
 80155e6:	e7d4      	b.n	8015592 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80155e8:	4662      	mov	r2, ip
 80155ea:	2a00      	cmp	r2, #0
 80155ec:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80155f0:	dd09      	ble.n	8015606 <ee_number+0xf2>
 80155f2:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80155f6:	446a      	add	r2, sp
 80155f8:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80155fc:	f800 2b01 	strb.w	r2, [r0], #1
 8015600:	3901      	subs	r1, #1
 8015602:	d1f1      	bne.n	80155e8 <ee_number+0xd4>
 8015604:	e7c5      	b.n	8015592 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8015606:	2b00      	cmp	r3, #0
 8015608:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801560c:	ddc1      	ble.n	8015592 <ee_number+0x7e>
 801560e:	2220      	movs	r2, #32
 8015610:	f800 2b01 	strb.w	r2, [r0], #1
 8015614:	3901      	subs	r1, #1
 8015616:	d1f6      	bne.n	8015606 <ee_number+0xf2>
 8015618:	e7bb      	b.n	8015592 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 801561a:	2000      	movs	r0, #0
 801561c:	e7b9      	b.n	8015592 <ee_number+0x7e>
 801561e:	bf00      	nop
 8015620:	08016a9c 	.word	0x08016a9c
 8015624:	08016ac4 	.word	0x08016ac4

08015628 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8015628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801562c:	b087      	sub	sp, #28
 801562e:	9205      	str	r2, [sp, #20]
 8015630:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8015632:	1e0f      	subs	r7, r1, #0
 8015634:	f340 80b8 	ble.w	80157a8 <tiny_vsnprintf_like+0x180>
 8015638:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801563a:	4604      	mov	r4, r0
 801563c:	e004      	b.n	8015648 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801563e:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8015642:	9b05      	ldr	r3, [sp, #20]
 8015644:	3301      	adds	r3, #1
 8015646:	9305      	str	r3, [sp, #20]
 8015648:	9905      	ldr	r1, [sp, #20]
 801564a:	780a      	ldrb	r2, [r1, #0]
 801564c:	b922      	cbnz	r2, 8015658 <tiny_vsnprintf_like+0x30>
 801564e:	1ba3      	subs	r3, r4, r6
 8015650:	1e78      	subs	r0, r7, #1
 8015652:	4283      	cmp	r3, r0
 8015654:	f2c0 80a2 	blt.w	801579c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8015658:	1ba3      	subs	r3, r4, r6
 801565a:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 801565e:	4543      	cmp	r3, r8
 8015660:	f280 809c 	bge.w	801579c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8015664:	2a25      	cmp	r2, #37	; 0x25
 8015666:	d1ea      	bne.n	801563e <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8015668:	1c4b      	adds	r3, r1, #1
 801566a:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 801566c:	784b      	ldrb	r3, [r1, #1]
 801566e:	2b30      	cmp	r3, #48	; 0x30
 8015670:	d020      	beq.n	80156b4 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8015672:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8015676:	3b30      	subs	r3, #48	; 0x30
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b09      	cmp	r3, #9
 801567c:	d91d      	bls.n	80156ba <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801567e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8015682:	9b05      	ldr	r3, [sp, #20]
 8015684:	781a      	ldrb	r2, [r3, #0]
 8015686:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801568a:	2b20      	cmp	r3, #32
 801568c:	d867      	bhi.n	801575e <tiny_vsnprintf_like+0x136>
 801568e:	e8df f003 	tbb	[pc, r3]
 8015692:	664a      	.short	0x664a
 8015694:	66666666 	.word	0x66666666
 8015698:	66666666 	.word	0x66666666
 801569c:	66621e66 	.word	0x66621e66
 80156a0:	62666666 	.word	0x62666666
 80156a4:	66666666 	.word	0x66666666
 80156a8:	66666666 	.word	0x66666666
 80156ac:	19662866 	.word	0x19662866
 80156b0:	6666      	.short	0x6666
 80156b2:	7c          	.byte	0x7c
 80156b3:	00          	.byte	0x00
      flags |= ZEROPAD;
 80156b4:	f04f 0901 	mov.w	r9, #1
 80156b8:	e7dd      	b.n	8015676 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80156ba:	a805      	add	r0, sp, #20
 80156bc:	f7ff ff16 	bl	80154ec <ee_skip_atoi>
 80156c0:	4605      	mov	r5, r0
 80156c2:	e7de      	b.n	8015682 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80156c4:	230a      	movs	r3, #10
 80156c6:	e031      	b.n	801572c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80156c8:	2320      	movs	r3, #32
 80156ca:	f804 3b01 	strb.w	r3, [r4], #1
 80156ce:	3d01      	subs	r5, #1
 80156d0:	2d00      	cmp	r5, #0
 80156d2:	dcf9      	bgt.n	80156c8 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80156d4:	9b04      	ldr	r3, [sp, #16]
 80156d6:	1d1a      	adds	r2, r3, #4
 80156d8:	9204      	str	r2, [sp, #16]
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80156e0:	e7af      	b.n	8015642 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80156e2:	9b04      	ldr	r3, [sp, #16]
 80156e4:	1d1a      	adds	r2, r3, #4
 80156e6:	9204      	str	r2, [sp, #16]
 80156e8:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80156ec:	f1b8 0f00 	cmp.w	r8, #0
 80156f0:	d003      	beq.n	80156fa <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80156f2:	4640      	mov	r0, r8
 80156f4:	f7ea fd44 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80156f8:	e006      	b.n	8015708 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80156fa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80157ac <tiny_vsnprintf_like+0x184>
 80156fe:	e7f8      	b.n	80156f2 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8015700:	2220      	movs	r2, #32
 8015702:	f804 2b01 	strb.w	r2, [r4], #1
 8015706:	461d      	mov	r5, r3
 8015708:	1e6b      	subs	r3, r5, #1
 801570a:	4285      	cmp	r5, r0
 801570c:	dcf8      	bgt.n	8015700 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801570e:	2200      	movs	r2, #0
 8015710:	e006      	b.n	8015720 <tiny_vsnprintf_like+0xf8>
 8015712:	4643      	mov	r3, r8
 8015714:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015718:	f804 1b01 	strb.w	r1, [r4], #1
 801571c:	3201      	adds	r2, #1
 801571e:	4698      	mov	r8, r3
 8015720:	4282      	cmp	r2, r0
 8015722:	dbf6      	blt.n	8015712 <tiny_vsnprintf_like+0xea>
 8015724:	e78d      	b.n	8015642 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8015726:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 801572a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 801572c:	f019 0f02 	tst.w	r9, #2
 8015730:	d02f      	beq.n	8015792 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8015732:	9a04      	ldr	r2, [sp, #16]
 8015734:	1d11      	adds	r1, r2, #4
 8015736:	9104      	str	r1, [sp, #16]
 8015738:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801573a:	1ba1      	subs	r1, r4, r6
 801573c:	f8cd 9008 	str.w	r9, [sp, #8]
 8015740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015744:	9001      	str	r0, [sp, #4]
 8015746:	9500      	str	r5, [sp, #0]
 8015748:	eba8 0101 	sub.w	r1, r8, r1
 801574c:	4620      	mov	r0, r4
 801574e:	f7ff fee1 	bl	8015514 <ee_number>
 8015752:	4604      	mov	r4, r0
 8015754:	e775      	b.n	8015642 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8015756:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 801575a:	230a      	movs	r3, #10
 801575c:	e7e6      	b.n	801572c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801575e:	2a25      	cmp	r2, #37	; 0x25
 8015760:	d002      	beq.n	8015768 <tiny_vsnprintf_like+0x140>
 8015762:	2325      	movs	r3, #37	; 0x25
 8015764:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015768:	1ba3      	subs	r3, r4, r6
 801576a:	4598      	cmp	r8, r3
 801576c:	dd0f      	ble.n	801578e <tiny_vsnprintf_like+0x166>
        if (*fmt)
 801576e:	9b05      	ldr	r3, [sp, #20]
 8015770:	781a      	ldrb	r2, [r3, #0]
 8015772:	b13a      	cbz	r2, 8015784 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8015774:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015778:	1ba3      	subs	r3, r4, r6
 801577a:	4598      	cmp	r8, r3
 801577c:	f73f af61 	bgt.w	8015642 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8015780:	230a      	movs	r3, #10
 8015782:	e7d3      	b.n	801572c <tiny_vsnprintf_like+0x104>
          --fmt;
 8015784:	3b01      	subs	r3, #1
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	e7f6      	b.n	8015778 <tiny_vsnprintf_like+0x150>
        base = 16;
 801578a:	2310      	movs	r3, #16
 801578c:	e7ce      	b.n	801572c <tiny_vsnprintf_like+0x104>
    base = 10;
 801578e:	230a      	movs	r3, #10
 8015790:	e7cc      	b.n	801572c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8015792:	9a04      	ldr	r2, [sp, #16]
 8015794:	1d11      	adds	r1, r2, #4
 8015796:	9104      	str	r1, [sp, #16]
 8015798:	6812      	ldr	r2, [r2, #0]
 801579a:	e7ce      	b.n	801573a <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 801579c:	2300      	movs	r3, #0
 801579e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80157a0:	1ba0      	subs	r0, r4, r6
}
 80157a2:	b007      	add	sp, #28
 80157a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80157a8:	2000      	movs	r0, #0
 80157aa:	e7fa      	b.n	80157a2 <tiny_vsnprintf_like+0x17a>
 80157ac:	08016aec 	.word	0x08016aec

080157b0 <memset>:
 80157b0:	4402      	add	r2, r0
 80157b2:	4603      	mov	r3, r0
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d100      	bne.n	80157ba <memset+0xa>
 80157b8:	4770      	bx	lr
 80157ba:	f803 1b01 	strb.w	r1, [r3], #1
 80157be:	e7f9      	b.n	80157b4 <memset+0x4>

080157c0 <__libc_init_array>:
 80157c0:	b570      	push	{r4, r5, r6, lr}
 80157c2:	4d0d      	ldr	r5, [pc, #52]	; (80157f8 <__libc_init_array+0x38>)
 80157c4:	4c0d      	ldr	r4, [pc, #52]	; (80157fc <__libc_init_array+0x3c>)
 80157c6:	1b64      	subs	r4, r4, r5
 80157c8:	10a4      	asrs	r4, r4, #2
 80157ca:	2600      	movs	r6, #0
 80157cc:	42a6      	cmp	r6, r4
 80157ce:	d109      	bne.n	80157e4 <__libc_init_array+0x24>
 80157d0:	4d0b      	ldr	r5, [pc, #44]	; (8015800 <__libc_init_array+0x40>)
 80157d2:	4c0c      	ldr	r4, [pc, #48]	; (8015804 <__libc_init_array+0x44>)
 80157d4:	f000 f8a8 	bl	8015928 <_init>
 80157d8:	1b64      	subs	r4, r4, r5
 80157da:	10a4      	asrs	r4, r4, #2
 80157dc:	2600      	movs	r6, #0
 80157de:	42a6      	cmp	r6, r4
 80157e0:	d105      	bne.n	80157ee <__libc_init_array+0x2e>
 80157e2:	bd70      	pop	{r4, r5, r6, pc}
 80157e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80157e8:	4798      	blx	r3
 80157ea:	3601      	adds	r6, #1
 80157ec:	e7ee      	b.n	80157cc <__libc_init_array+0xc>
 80157ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80157f2:	4798      	blx	r3
 80157f4:	3601      	adds	r6, #1
 80157f6:	e7f2      	b.n	80157de <__libc_init_array+0x1e>
 80157f8:	08016b00 	.word	0x08016b00
 80157fc:	08016b00 	.word	0x08016b00
 8015800:	08016b00 	.word	0x08016b00
 8015804:	08016b04 	.word	0x08016b04

08015808 <memcpy>:
 8015808:	440a      	add	r2, r1
 801580a:	4291      	cmp	r1, r2
 801580c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015810:	d100      	bne.n	8015814 <memcpy+0xc>
 8015812:	4770      	bx	lr
 8015814:	b510      	push	{r4, lr}
 8015816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801581a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801581e:	4291      	cmp	r1, r2
 8015820:	d1f9      	bne.n	8015816 <memcpy+0xe>
 8015822:	bd10      	pop	{r4, pc}
 8015824:	0000      	movs	r0, r0
	...

08015828 <floor>:
 8015828:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015830:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015834:	2e13      	cmp	r6, #19
 8015836:	460b      	mov	r3, r1
 8015838:	4607      	mov	r7, r0
 801583a:	460c      	mov	r4, r1
 801583c:	4605      	mov	r5, r0
 801583e:	dc32      	bgt.n	80158a6 <floor+0x7e>
 8015840:	2e00      	cmp	r6, #0
 8015842:	da14      	bge.n	801586e <floor+0x46>
 8015844:	a334      	add	r3, pc, #208	; (adr r3, 8015918 <floor+0xf0>)
 8015846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584a:	f7ea fca7 	bl	800019c <__adddf3>
 801584e:	2200      	movs	r2, #0
 8015850:	2300      	movs	r3, #0
 8015852:	f7ea fed7 	bl	8000604 <__aeabi_dcmpgt>
 8015856:	b138      	cbz	r0, 8015868 <floor+0x40>
 8015858:	2c00      	cmp	r4, #0
 801585a:	da56      	bge.n	801590a <floor+0xe2>
 801585c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8015860:	4325      	orrs	r5, r4
 8015862:	d055      	beq.n	8015910 <floor+0xe8>
 8015864:	4c2e      	ldr	r4, [pc, #184]	; (8015920 <floor+0xf8>)
 8015866:	2500      	movs	r5, #0
 8015868:	4623      	mov	r3, r4
 801586a:	462f      	mov	r7, r5
 801586c:	e025      	b.n	80158ba <floor+0x92>
 801586e:	4a2d      	ldr	r2, [pc, #180]	; (8015924 <floor+0xfc>)
 8015870:	fa42 f806 	asr.w	r8, r2, r6
 8015874:	ea01 0208 	and.w	r2, r1, r8
 8015878:	4302      	orrs	r2, r0
 801587a:	d01e      	beq.n	80158ba <floor+0x92>
 801587c:	a326      	add	r3, pc, #152	; (adr r3, 8015918 <floor+0xf0>)
 801587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015882:	f7ea fc8b 	bl	800019c <__adddf3>
 8015886:	2200      	movs	r2, #0
 8015888:	2300      	movs	r3, #0
 801588a:	f7ea febb 	bl	8000604 <__aeabi_dcmpgt>
 801588e:	2800      	cmp	r0, #0
 8015890:	d0ea      	beq.n	8015868 <floor+0x40>
 8015892:	2c00      	cmp	r4, #0
 8015894:	bfbe      	ittt	lt
 8015896:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801589a:	4133      	asrlt	r3, r6
 801589c:	18e4      	addlt	r4, r4, r3
 801589e:	ea24 0408 	bic.w	r4, r4, r8
 80158a2:	2500      	movs	r5, #0
 80158a4:	e7e0      	b.n	8015868 <floor+0x40>
 80158a6:	2e33      	cmp	r6, #51	; 0x33
 80158a8:	dd0b      	ble.n	80158c2 <floor+0x9a>
 80158aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80158ae:	d104      	bne.n	80158ba <floor+0x92>
 80158b0:	4602      	mov	r2, r0
 80158b2:	f7ea fc73 	bl	800019c <__adddf3>
 80158b6:	4607      	mov	r7, r0
 80158b8:	460b      	mov	r3, r1
 80158ba:	4638      	mov	r0, r7
 80158bc:	4619      	mov	r1, r3
 80158be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80158c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80158ca:	fa28 f802 	lsr.w	r8, r8, r2
 80158ce:	ea10 0f08 	tst.w	r0, r8
 80158d2:	d0f2      	beq.n	80158ba <floor+0x92>
 80158d4:	a310      	add	r3, pc, #64	; (adr r3, 8015918 <floor+0xf0>)
 80158d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158da:	f7ea fc5f 	bl	800019c <__adddf3>
 80158de:	2200      	movs	r2, #0
 80158e0:	2300      	movs	r3, #0
 80158e2:	f7ea fe8f 	bl	8000604 <__aeabi_dcmpgt>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d0be      	beq.n	8015868 <floor+0x40>
 80158ea:	2c00      	cmp	r4, #0
 80158ec:	da0a      	bge.n	8015904 <floor+0xdc>
 80158ee:	2e14      	cmp	r6, #20
 80158f0:	d101      	bne.n	80158f6 <floor+0xce>
 80158f2:	3401      	adds	r4, #1
 80158f4:	e006      	b.n	8015904 <floor+0xdc>
 80158f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80158fa:	2301      	movs	r3, #1
 80158fc:	40b3      	lsls	r3, r6
 80158fe:	441d      	add	r5, r3
 8015900:	42af      	cmp	r7, r5
 8015902:	d8f6      	bhi.n	80158f2 <floor+0xca>
 8015904:	ea25 0508 	bic.w	r5, r5, r8
 8015908:	e7ae      	b.n	8015868 <floor+0x40>
 801590a:	2500      	movs	r5, #0
 801590c:	462c      	mov	r4, r5
 801590e:	e7ab      	b.n	8015868 <floor+0x40>
 8015910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015914:	e7a8      	b.n	8015868 <floor+0x40>
 8015916:	bf00      	nop
 8015918:	8800759c 	.word	0x8800759c
 801591c:	7e37e43c 	.word	0x7e37e43c
 8015920:	bff00000 	.word	0xbff00000
 8015924:	000fffff 	.word	0x000fffff

08015928 <_init>:
 8015928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801592a:	bf00      	nop
 801592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801592e:	bc08      	pop	{r3}
 8015930:	469e      	mov	lr, r3
 8015932:	4770      	bx	lr

08015934 <_fini>:
 8015934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015936:	bf00      	nop
 8015938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801593a:	bc08      	pop	{r3}
 801593c:	469e      	mov	lr, r3
 801593e:	4770      	bx	lr
