
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000018  08008d80  00020018  2**2
                  ALLOC
 10 RAM1_region   00000000  200008c8  200008c8  00020018  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020018  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  200008c8  200008c8  000208c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ff2c  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006cb3  00000000  00000000  0004ff6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000155c0  00000000  00000000  00056c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a28  00000000  00000000  0006c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000018f8  00000000  00000000  0006dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b96  00000000  00000000  0006f508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002c955  00000000  00000000  0009309e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c6003  00000000  00000000  000bf9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001859f6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000436c  00000000  00000000  00185a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	080084ec 	.word	0x080084ec

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	080084ec 	.word	0x080084ec

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_fmul>:
 8000188:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800018c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000190:	bf1e      	ittt	ne
 8000192:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000196:	ea92 0f0c 	teqne	r2, ip
 800019a:	ea93 0f0c 	teqne	r3, ip
 800019e:	d06f      	beq.n	8000280 <__aeabi_fmul+0xf8>
 80001a0:	441a      	add	r2, r3
 80001a2:	ea80 0c01 	eor.w	ip, r0, r1
 80001a6:	0240      	lsls	r0, r0, #9
 80001a8:	bf18      	it	ne
 80001aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ae:	d01e      	beq.n	80001ee <__aeabi_fmul+0x66>
 80001b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001bc:	fba0 3101 	umull	r3, r1, r0, r1
 80001c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001c8:	bf3e      	ittt	cc
 80001ca:	0049      	lslcc	r1, r1, #1
 80001cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d0:	005b      	lslcc	r3, r3, #1
 80001d2:	ea40 0001 	orr.w	r0, r0, r1
 80001d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001da:	2afd      	cmp	r2, #253	; 0xfd
 80001dc:	d81d      	bhi.n	800021a <__aeabi_fmul+0x92>
 80001de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001e6:	bf08      	it	eq
 80001e8:	f020 0001 	biceq.w	r0, r0, #1
 80001ec:	4770      	bx	lr
 80001ee:	f090 0f00 	teq	r0, #0
 80001f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001f6:	bf08      	it	eq
 80001f8:	0249      	lsleq	r1, r1, #9
 80001fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000202:	3a7f      	subs	r2, #127	; 0x7f
 8000204:	bfc2      	ittt	gt
 8000206:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800020a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800020e:	4770      	bxgt	lr
 8000210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000214:	f04f 0300 	mov.w	r3, #0
 8000218:	3a01      	subs	r2, #1
 800021a:	dc5d      	bgt.n	80002d8 <__aeabi_fmul+0x150>
 800021c:	f112 0f19 	cmn.w	r2, #25
 8000220:	bfdc      	itt	le
 8000222:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000226:	4770      	bxle	lr
 8000228:	f1c2 0200 	rsb	r2, r2, #0
 800022c:	0041      	lsls	r1, r0, #1
 800022e:	fa21 f102 	lsr.w	r1, r1, r2
 8000232:	f1c2 0220 	rsb	r2, r2, #32
 8000236:	fa00 fc02 	lsl.w	ip, r0, r2
 800023a:	ea5f 0031 	movs.w	r0, r1, rrx
 800023e:	f140 0000 	adc.w	r0, r0, #0
 8000242:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000246:	bf08      	it	eq
 8000248:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800024c:	4770      	bx	lr
 800024e:	f092 0f00 	teq	r2, #0
 8000252:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0040      	lsleq	r0, r0, #1
 800025a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800025e:	3a01      	subeq	r2, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xce>
 8000262:	ea40 000c 	orr.w	r0, r0, ip
 8000266:	f093 0f00 	teq	r3, #0
 800026a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800026e:	bf02      	ittt	eq
 8000270:	0049      	lsleq	r1, r1, #1
 8000272:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000276:	3b01      	subeq	r3, #1
 8000278:	d0f9      	beq.n	800026e <__aeabi_fmul+0xe6>
 800027a:	ea41 010c 	orr.w	r1, r1, ip
 800027e:	e78f      	b.n	80001a0 <__aeabi_fmul+0x18>
 8000280:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	bf18      	it	ne
 800028a:	ea93 0f0c 	teqne	r3, ip
 800028e:	d00a      	beq.n	80002a6 <__aeabi_fmul+0x11e>
 8000290:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000294:	bf18      	it	ne
 8000296:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800029a:	d1d8      	bne.n	800024e <__aeabi_fmul+0xc6>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	4770      	bx	lr
 80002a6:	f090 0f00 	teq	r0, #0
 80002aa:	bf17      	itett	ne
 80002ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002b0:	4608      	moveq	r0, r1
 80002b2:	f091 0f00 	teqne	r1, #0
 80002b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ba:	d014      	beq.n	80002e6 <__aeabi_fmul+0x15e>
 80002bc:	ea92 0f0c 	teq	r2, ip
 80002c0:	d101      	bne.n	80002c6 <__aeabi_fmul+0x13e>
 80002c2:	0242      	lsls	r2, r0, #9
 80002c4:	d10f      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002c6:	ea93 0f0c 	teq	r3, ip
 80002ca:	d103      	bne.n	80002d4 <__aeabi_fmul+0x14c>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	bf18      	it	ne
 80002d0:	4608      	movne	r0, r1
 80002d2:	d108      	bne.n	80002e6 <__aeabi_fmul+0x15e>
 80002d4:	ea80 0001 	eor.w	r0, r0, r1
 80002d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002e4:	4770      	bx	lr
 80002e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	; 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_f2iz>:
 800050c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000510:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000514:	d30f      	bcc.n	8000536 <__aeabi_f2iz+0x2a>
 8000516:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800051a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800051e:	d90d      	bls.n	800053c <__aeabi_f2iz+0x30>
 8000520:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000528:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800052c:	fa23 f002 	lsr.w	r0, r3, r2
 8000530:	bf18      	it	ne
 8000532:	4240      	negne	r0, r0
 8000534:	4770      	bx	lr
 8000536:	f04f 0000 	mov.w	r0, #0
 800053a:	4770      	bx	lr
 800053c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000540:	d101      	bne.n	8000546 <__aeabi_f2iz+0x3a>
 8000542:	0242      	lsls	r2, r0, #9
 8000544:	d105      	bne.n	8000552 <__aeabi_f2iz+0x46>
 8000546:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800054a:	bf08      	it	eq
 800054c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000550:	4770      	bx	lr
 8000552:	f04f 0000 	mov.w	r0, #0
 8000556:	4770      	bx	lr

08000558 <__aeabi_uldivmod>:
 8000558:	b953      	cbnz	r3, 8000570 <__aeabi_uldivmod+0x18>
 800055a:	b94a      	cbnz	r2, 8000570 <__aeabi_uldivmod+0x18>
 800055c:	2900      	cmp	r1, #0
 800055e:	bf08      	it	eq
 8000560:	2800      	cmpeq	r0, #0
 8000562:	bf1c      	itt	ne
 8000564:	f04f 31ff 	movne.w	r1, #4294967295
 8000568:	f04f 30ff 	movne.w	r0, #4294967295
 800056c:	f000 b974 	b.w	8000858 <__aeabi_idiv0>
 8000570:	f1ad 0c08 	sub.w	ip, sp, #8
 8000574:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000578:	f000 f806 	bl	8000588 <__udivmoddi4>
 800057c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000584:	b004      	add	sp, #16
 8000586:	4770      	bx	lr

08000588 <__udivmoddi4>:
 8000588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800058c:	9e08      	ldr	r6, [sp, #32]
 800058e:	460d      	mov	r5, r1
 8000590:	4604      	mov	r4, r0
 8000592:	4688      	mov	r8, r1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d14d      	bne.n	8000634 <__udivmoddi4+0xac>
 8000598:	428a      	cmp	r2, r1
 800059a:	4694      	mov	ip, r2
 800059c:	d968      	bls.n	8000670 <__udivmoddi4+0xe8>
 800059e:	fab2 f282 	clz	r2, r2
 80005a2:	b152      	cbz	r2, 80005ba <__udivmoddi4+0x32>
 80005a4:	fa01 f302 	lsl.w	r3, r1, r2
 80005a8:	f1c2 0120 	rsb	r1, r2, #32
 80005ac:	fa20 f101 	lsr.w	r1, r0, r1
 80005b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b4:	ea41 0803 	orr.w	r8, r1, r3
 80005b8:	4094      	lsls	r4, r2
 80005ba:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80005be:	0c21      	lsrs	r1, r4, #16
 80005c0:	fbb8 fef5 	udiv	lr, r8, r5
 80005c4:	fa1f f78c 	uxth.w	r7, ip
 80005c8:	fb05 831e 	mls	r3, r5, lr, r8
 80005cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005d0:	fb0e f107 	mul.w	r1, lr, r7
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d90b      	bls.n	80005f0 <__udivmoddi4+0x68>
 80005d8:	eb1c 0303 	adds.w	r3, ip, r3
 80005dc:	f10e 30ff 	add.w	r0, lr, #4294967295
 80005e0:	f080 811e 	bcs.w	8000820 <__udivmoddi4+0x298>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	f240 811b 	bls.w	8000820 <__udivmoddi4+0x298>
 80005ea:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ee:	4463      	add	r3, ip
 80005f0:	1a5b      	subs	r3, r3, r1
 80005f2:	b2a4      	uxth	r4, r4
 80005f4:	fbb3 f0f5 	udiv	r0, r3, r5
 80005f8:	fb05 3310 	mls	r3, r5, r0, r3
 80005fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000600:	fb00 f707 	mul.w	r7, r0, r7
 8000604:	42a7      	cmp	r7, r4
 8000606:	d90a      	bls.n	800061e <__udivmoddi4+0x96>
 8000608:	eb1c 0404 	adds.w	r4, ip, r4
 800060c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000610:	f080 8108 	bcs.w	8000824 <__udivmoddi4+0x29c>
 8000614:	42a7      	cmp	r7, r4
 8000616:	f240 8105 	bls.w	8000824 <__udivmoddi4+0x29c>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	1be4      	subs	r4, r4, r7
 8000620:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000624:	2100      	movs	r1, #0
 8000626:	b11e      	cbz	r6, 8000630 <__udivmoddi4+0xa8>
 8000628:	40d4      	lsrs	r4, r2
 800062a:	2300      	movs	r3, #0
 800062c:	e9c6 4300 	strd	r4, r3, [r6]
 8000630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0xc2>
 8000638:	2e00      	cmp	r6, #0
 800063a:	f000 80ee 	beq.w	800081a <__udivmoddi4+0x292>
 800063e:	2100      	movs	r1, #0
 8000640:	e9c6 0500 	strd	r0, r5, [r6]
 8000644:	4608      	mov	r0, r1
 8000646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800064a:	fab3 f183 	clz	r1, r3
 800064e:	2900      	cmp	r1, #0
 8000650:	d14a      	bne.n	80006e8 <__udivmoddi4+0x160>
 8000652:	42ab      	cmp	r3, r5
 8000654:	d302      	bcc.n	800065c <__udivmoddi4+0xd4>
 8000656:	4282      	cmp	r2, r0
 8000658:	f200 80f9 	bhi.w	800084e <__udivmoddi4+0x2c6>
 800065c:	1a84      	subs	r4, r0, r2
 800065e:	eb65 0303 	sbc.w	r3, r5, r3
 8000662:	2001      	movs	r0, #1
 8000664:	4698      	mov	r8, r3
 8000666:	2e00      	cmp	r6, #0
 8000668:	d0e2      	beq.n	8000630 <__udivmoddi4+0xa8>
 800066a:	e9c6 4800 	strd	r4, r8, [r6]
 800066e:	e7df      	b.n	8000630 <__udivmoddi4+0xa8>
 8000670:	b902      	cbnz	r2, 8000674 <__udivmoddi4+0xec>
 8000672:	deff      	udf	#255	; 0xff
 8000674:	fab2 f282 	clz	r2, r2
 8000678:	2a00      	cmp	r2, #0
 800067a:	f040 8091 	bne.w	80007a0 <__udivmoddi4+0x218>
 800067e:	eba1 050c 	sub.w	r5, r1, ip
 8000682:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000686:	fa1f fe8c 	uxth.w	lr, ip
 800068a:	2101      	movs	r1, #1
 800068c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000690:	fb07 5013 	mls	r0, r7, r3, r5
 8000694:	0c25      	lsrs	r5, r4, #16
 8000696:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800069a:	fb0e f003 	mul.w	r0, lr, r3
 800069e:	42a8      	cmp	r0, r5
 80006a0:	d908      	bls.n	80006b4 <__udivmoddi4+0x12c>
 80006a2:	eb1c 0505 	adds.w	r5, ip, r5
 80006a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80006aa:	d202      	bcs.n	80006b2 <__udivmoddi4+0x12a>
 80006ac:	42a8      	cmp	r0, r5
 80006ae:	f200 80cb 	bhi.w	8000848 <__udivmoddi4+0x2c0>
 80006b2:	4643      	mov	r3, r8
 80006b4:	1a2d      	subs	r5, r5, r0
 80006b6:	b2a4      	uxth	r4, r4
 80006b8:	fbb5 f0f7 	udiv	r0, r5, r7
 80006bc:	fb07 5510 	mls	r5, r7, r0, r5
 80006c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006c4:	fb0e fe00 	mul.w	lr, lr, r0
 80006c8:	45a6      	cmp	lr, r4
 80006ca:	d908      	bls.n	80006de <__udivmoddi4+0x156>
 80006cc:	eb1c 0404 	adds.w	r4, ip, r4
 80006d0:	f100 35ff 	add.w	r5, r0, #4294967295
 80006d4:	d202      	bcs.n	80006dc <__udivmoddi4+0x154>
 80006d6:	45a6      	cmp	lr, r4
 80006d8:	f200 80bb 	bhi.w	8000852 <__udivmoddi4+0x2ca>
 80006dc:	4628      	mov	r0, r5
 80006de:	eba4 040e 	sub.w	r4, r4, lr
 80006e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006e6:	e79e      	b.n	8000626 <__udivmoddi4+0x9e>
 80006e8:	f1c1 0720 	rsb	r7, r1, #32
 80006ec:	408b      	lsls	r3, r1
 80006ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80006f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80006f6:	fa20 f407 	lsr.w	r4, r0, r7
 80006fa:	fa05 f301 	lsl.w	r3, r5, r1
 80006fe:	431c      	orrs	r4, r3
 8000700:	40fd      	lsrs	r5, r7
 8000702:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000706:	fa00 f301 	lsl.w	r3, r0, r1
 800070a:	fbb5 f8f9 	udiv	r8, r5, r9
 800070e:	0c20      	lsrs	r0, r4, #16
 8000710:	fa1f fe8c 	uxth.w	lr, ip
 8000714:	fb09 5518 	mls	r5, r9, r8, r5
 8000718:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800071c:	fb08 f00e 	mul.w	r0, r8, lr
 8000720:	42a8      	cmp	r0, r5
 8000722:	fa02 f201 	lsl.w	r2, r2, r1
 8000726:	d90b      	bls.n	8000740 <__udivmoddi4+0x1b8>
 8000728:	eb1c 0505 	adds.w	r5, ip, r5
 800072c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000730:	f080 8088 	bcs.w	8000844 <__udivmoddi4+0x2bc>
 8000734:	42a8      	cmp	r0, r5
 8000736:	f240 8085 	bls.w	8000844 <__udivmoddi4+0x2bc>
 800073a:	f1a8 0802 	sub.w	r8, r8, #2
 800073e:	4465      	add	r5, ip
 8000740:	1a2d      	subs	r5, r5, r0
 8000742:	b2a4      	uxth	r4, r4
 8000744:	fbb5 f0f9 	udiv	r0, r5, r9
 8000748:	fb09 5510 	mls	r5, r9, r0, r5
 800074c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000750:	fb00 fe0e 	mul.w	lr, r0, lr
 8000754:	45ae      	cmp	lr, r5
 8000756:	d908      	bls.n	800076a <__udivmoddi4+0x1e2>
 8000758:	eb1c 0505 	adds.w	r5, ip, r5
 800075c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000760:	d26c      	bcs.n	800083c <__udivmoddi4+0x2b4>
 8000762:	45ae      	cmp	lr, r5
 8000764:	d96a      	bls.n	800083c <__udivmoddi4+0x2b4>
 8000766:	3802      	subs	r0, #2
 8000768:	4465      	add	r5, ip
 800076a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800076e:	fba0 9402 	umull	r9, r4, r0, r2
 8000772:	eba5 050e 	sub.w	r5, r5, lr
 8000776:	42a5      	cmp	r5, r4
 8000778:	46c8      	mov	r8, r9
 800077a:	46a6      	mov	lr, r4
 800077c:	d356      	bcc.n	800082c <__udivmoddi4+0x2a4>
 800077e:	d053      	beq.n	8000828 <__udivmoddi4+0x2a0>
 8000780:	b15e      	cbz	r6, 800079a <__udivmoddi4+0x212>
 8000782:	ebb3 0208 	subs.w	r2, r3, r8
 8000786:	eb65 050e 	sbc.w	r5, r5, lr
 800078a:	fa05 f707 	lsl.w	r7, r5, r7
 800078e:	fa22 f301 	lsr.w	r3, r2, r1
 8000792:	40cd      	lsrs	r5, r1
 8000794:	431f      	orrs	r7, r3
 8000796:	e9c6 7500 	strd	r7, r5, [r6]
 800079a:	2100      	movs	r1, #0
 800079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a0:	f1c2 0320 	rsb	r3, r2, #32
 80007a4:	fa20 f103 	lsr.w	r1, r0, r3
 80007a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ac:	fa25 f303 	lsr.w	r3, r5, r3
 80007b0:	4095      	lsls	r5, r2
 80007b2:	430d      	orrs	r5, r1
 80007b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b8:	fa1f fe8c 	uxth.w	lr, ip
 80007bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80007c0:	fb07 3011 	mls	r0, r7, r1, r3
 80007c4:	0c2b      	lsrs	r3, r5, #16
 80007c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80007ca:	fb01 f00e 	mul.w	r0, r1, lr
 80007ce:	4298      	cmp	r0, r3
 80007d0:	fa04 f402 	lsl.w	r4, r4, r2
 80007d4:	d908      	bls.n	80007e8 <__udivmoddi4+0x260>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f101 38ff 	add.w	r8, r1, #4294967295
 80007de:	d22f      	bcs.n	8000840 <__udivmoddi4+0x2b8>
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d92d      	bls.n	8000840 <__udivmoddi4+0x2b8>
 80007e4:	3902      	subs	r1, #2
 80007e6:	4463      	add	r3, ip
 80007e8:	1a1b      	subs	r3, r3, r0
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80007f0:	fb07 3310 	mls	r3, r7, r0, r3
 80007f4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007f8:	fb00 f30e 	mul.w	r3, r0, lr
 80007fc:	42ab      	cmp	r3, r5
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x28a>
 8000800:	eb1c 0505 	adds.w	r5, ip, r5
 8000804:	f100 38ff 	add.w	r8, r0, #4294967295
 8000808:	d216      	bcs.n	8000838 <__udivmoddi4+0x2b0>
 800080a:	42ab      	cmp	r3, r5
 800080c:	d914      	bls.n	8000838 <__udivmoddi4+0x2b0>
 800080e:	3802      	subs	r0, #2
 8000810:	4465      	add	r5, ip
 8000812:	1aed      	subs	r5, r5, r3
 8000814:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000818:	e738      	b.n	800068c <__udivmoddi4+0x104>
 800081a:	4631      	mov	r1, r6
 800081c:	4630      	mov	r0, r6
 800081e:	e707      	b.n	8000630 <__udivmoddi4+0xa8>
 8000820:	4686      	mov	lr, r0
 8000822:	e6e5      	b.n	80005f0 <__udivmoddi4+0x68>
 8000824:	4618      	mov	r0, r3
 8000826:	e6fa      	b.n	800061e <__udivmoddi4+0x96>
 8000828:	454b      	cmp	r3, r9
 800082a:	d2a9      	bcs.n	8000780 <__udivmoddi4+0x1f8>
 800082c:	ebb9 0802 	subs.w	r8, r9, r2
 8000830:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000834:	3801      	subs	r0, #1
 8000836:	e7a3      	b.n	8000780 <__udivmoddi4+0x1f8>
 8000838:	4640      	mov	r0, r8
 800083a:	e7ea      	b.n	8000812 <__udivmoddi4+0x28a>
 800083c:	4620      	mov	r0, r4
 800083e:	e794      	b.n	800076a <__udivmoddi4+0x1e2>
 8000840:	4641      	mov	r1, r8
 8000842:	e7d1      	b.n	80007e8 <__udivmoddi4+0x260>
 8000844:	46d0      	mov	r8, sl
 8000846:	e77b      	b.n	8000740 <__udivmoddi4+0x1b8>
 8000848:	3b02      	subs	r3, #2
 800084a:	4465      	add	r5, ip
 800084c:	e732      	b.n	80006b4 <__udivmoddi4+0x12c>
 800084e:	4608      	mov	r0, r1
 8000850:	e709      	b.n	8000666 <__udivmoddi4+0xde>
 8000852:	4464      	add	r4, ip
 8000854:	3802      	subs	r0, #2
 8000856:	e742      	b.n	80006de <__udivmoddi4+0x156>

08000858 <__aeabi_idiv0>:
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b500      	push	{lr}
 800085e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000866:	f042 0204 	orr.w	r2, r2, #4
 800086a:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800086c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800086e:	f002 0204 	and.w	r2, r2, #4
 8000872:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000874:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800087e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000886:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2102      	movs	r1, #2
 800088c:	200f      	movs	r0, #15
 800088e:	f001 faed 	bl	8001e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000892:	200f      	movs	r0, #15
 8000894:	f001 fb22 	bl	8001edc <HAL_NVIC_EnableIRQ>

}
 8000898:	b003      	add	sp, #12
 800089a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	2400      	movs	r4, #0
 80008a8:	9403      	str	r4, [sp, #12]
 80008aa:	9404      	str	r4, [sp, #16]
 80008ac:	9405      	str	r4, [sp, #20]
 80008ae:	9406      	str	r4, [sp, #24]
 80008b0:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b8:	f042 0202 	orr.w	r2, r2, #2
 80008bc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c0:	f002 0202 	and.w	r2, r2, #2
 80008c4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80008c6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ca:	f042 0204 	orr.w	r2, r2, #4
 80008ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d2:	f002 0204 	and.w	r2, r2, #4
 80008d6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80008d8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008dc:	f042 0201 	orr.w	r2, r2, #1
 80008e0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80008ea:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80008ec:	4e1a      	ldr	r6, [pc, #104]	; (8000958 <MX_GPIO_Init+0xb8>)
 80008ee:	4622      	mov	r2, r4
 80008f0:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80008f4:	4630      	mov	r0, r6
 80008f6:	f001 fef3 	bl	80026e0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80008fa:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80008fe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2501      	movs	r5, #1
 8000902:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2302      	movs	r3, #2
 8000908:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	a903      	add	r1, sp, #12
 800090c:	4630      	mov	r0, r6
 800090e:	f001 fd97 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8000912:	f04f 0803 	mov.w	r8, #3
 8000916:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 800091e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000920:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	a903      	add	r1, sp, #12
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f001 fd8a 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800092c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000930:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	a903      	add	r1, sp, #12
 800093c:	4630      	mov	r0, r6
 800093e:	f001 fd7f 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000946:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000948:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800094a:	a903      	add	r1, sp, #12
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_GPIO_Init+0xbc>)
 800094e:	f001 fd77 	bl	8002440 <HAL_GPIO_Init>

}
 8000952:	b008      	add	sp, #32
 8000954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000958:	48000400 	.word	0x48000400
 800095c:	48000800 	.word	0x48000800

08000960 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000962:	e7fe      	b.n	8000962 <Error_Handler+0x2>

08000964 <SystemClock_Config>:
{
 8000964:	b510      	push	{r4, lr}
 8000966:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000968:	2248      	movs	r2, #72	; 0x48
 800096a:	2100      	movs	r1, #0
 800096c:	a808      	add	r0, sp, #32
 800096e:	f007 fdb5 	bl	80084dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	2400      	movs	r4, #0
 8000974:	9401      	str	r4, [sp, #4]
 8000976:	9402      	str	r4, [sp, #8]
 8000978:	9403      	str	r4, [sp, #12]
 800097a:	9404      	str	r4, [sp, #16]
 800097c:	9405      	str	r4, [sp, #20]
 800097e:	9406      	str	r4, [sp, #24]
 8000980:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8000982:	f001 fec1 	bl	8002708 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800098a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800098e:	f023 0318 	bic.w	r3, r3, #24
 8000992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	6813      	ldr	r3, [r2, #0]
 80009a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009b0:	2324      	movs	r3, #36	; 0x24
 80009b2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009b4:	2381      	movs	r3, #129	; 0x81
 80009b6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009bc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009be:	23b0      	movs	r3, #176	; 0xb0
 80009c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	a808      	add	r0, sp, #32
 80009c6:	f002 f839 	bl	8002a3c <HAL_RCC_OscConfig>
 80009ca:	b970      	cbnz	r0, 80009ea <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009cc:	234f      	movs	r3, #79	; 0x4f
 80009ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80009da:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009dc:	2102      	movs	r1, #2
 80009de:	a801      	add	r0, sp, #4
 80009e0:	f002 fb5e 	bl	80030a0 <HAL_RCC_ClockConfig>
 80009e4:	b918      	cbnz	r0, 80009ee <SystemClock_Config+0x8a>
}
 80009e6:	b01a      	add	sp, #104	; 0x68
 80009e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80009ea:	f7ff ffb9 	bl	8000960 <Error_Handler>
    Error_Handler();
 80009ee:	f7ff ffb7 	bl	8000960 <Error_Handler>

080009f2 <main>:
{
 80009f2:	b508      	push	{r3, lr}
  HAL_Init();
 80009f4:	f001 f9ec 	bl	8001dd0 <HAL_Init>
  SystemClock_Config();
 80009f8:	f7ff ffb4 	bl	8000964 <SystemClock_Config>
  MX_GPIO_Init();
 80009fc:	f7ff ff50 	bl	80008a0 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000a00:	f000 fc8d 	bl	800131e <MX_SubGHz_Phy_Init>
	MX_SubGHz_Phy_Process();
 8000a04:	f000 fc91 	bl	800132a <MX_SubGHz_Phy_Process>
  while (1)
 8000a08:	e7fc      	b.n	8000a04 <main+0x12>
	...

08000a0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a0c:	b500      	push	{lr}
 8000a0e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000a10:	222c      	movs	r2, #44	; 0x2c
 8000a12:	2100      	movs	r1, #0
 8000a14:	a801      	add	r0, sp, #4
 8000a16:	f007 fd61 	bl	80084dc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <MX_RTC_Init+0x74>)
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_RTC_Init+0x78>)
 8000a1e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000a20:	231f      	movs	r3, #31
 8000a22:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a28:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a30:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a32:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a38:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a3a:	f002 fe97 	bl	800376c <HAL_RTC_Init>
 8000a3e:	b9a8      	cbnz	r0, 8000a6c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8000a40:	480f      	ldr	r0, [pc, #60]	; (8000a80 <MX_RTC_Init+0x74>)
 8000a42:	f002 ffd5 	bl	80039f0 <HAL_RTCEx_SetSSRU_IT>
 8000a46:	b9a0      	cbnz	r0, 8000a72 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000a48:	2200      	movs	r2, #0
 8000a4a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a4c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a4e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000a50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a54:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000a5c:	a901      	add	r1, sp, #4
 8000a5e:	4808      	ldr	r0, [pc, #32]	; (8000a80 <MX_RTC_Init+0x74>)
 8000a60:	f002 feea 	bl	8003838 <HAL_RTC_SetAlarm_IT>
 8000a64:	b940      	cbnz	r0, 8000a78 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a66:	b00d      	add	sp, #52	; 0x34
 8000a68:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a6c:	f7ff ff78 	bl	8000960 <Error_Handler>
 8000a70:	e7e6      	b.n	8000a40 <MX_RTC_Init+0x34>
    Error_Handler();
 8000a72:	f7ff ff75 	bl	8000960 <Error_Handler>
 8000a76:	e7e7      	b.n	8000a48 <MX_RTC_Init+0x3c>
    Error_Handler();
 8000a78:	f7ff ff72 	bl	8000960 <Error_Handler>
}
 8000a7c:	e7f3      	b.n	8000a66 <MX_RTC_Init+0x5a>
 8000a7e:	bf00      	nop
 8000a80:	20000034 	.word	0x20000034
 8000a84:	40002800 	.word	0x40002800

08000a88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	b090      	sub	sp, #64	; 0x40
 8000a8c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8e:	2238      	movs	r2, #56	; 0x38
 8000a90:	2100      	movs	r1, #0
 8000a92:	a802      	add	r0, sp, #8
 8000a94:	f007 fd22 	bl	80084dc <memset>
  if(rtcHandle->Instance==RTC)
 8000a98:	6822      	ldr	r2, [r4, #0]
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_RTC_MspInit+0x7c>)
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d001      	beq.n	8000aa4 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000aa0:	b010      	add	sp, #64	; 0x40
 8000aa2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	a802      	add	r0, sp, #8
 8000ab2:	f002 fc49 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	bb08      	cbnz	r0, 8000afc <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ad6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ad8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	4611      	mov	r1, r2
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f001 f9c4 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f001 f9f9 	bl	8001edc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	4611      	mov	r1, r2
 8000aee:	202a      	movs	r0, #42	; 0x2a
 8000af0:	f001 f9bc 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000af4:	202a      	movs	r0, #42	; 0x2a
 8000af6:	f001 f9f1 	bl	8001edc <HAL_NVIC_EnableIRQ>
}
 8000afa:	e7d1      	b.n	8000aa0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000afc:	f7ff ff30 	bl	8000960 <Error_Handler>
 8000b00:	e7da      	b.n	8000ab8 <HAL_RTC_MspInit+0x30>
 8000b02:	bf00      	nop
 8000b04:	40002800 	.word	0x40002800

08000b08 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000b08:	4770      	bx	lr

08000b0a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000b0a:	4770      	bx	lr

08000b0c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000b0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000b0e:	f001 f975 	bl	8001dfc <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000b12:	2001      	movs	r0, #1
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <PWR_EnterStopMode+0x14>)
 8000b16:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000b1a:	f001 fe59 	bl	80027d0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000b1e:	bd08      	pop	{r3, pc}
 8000b20:	58000400 	.word	0x58000400

08000b24 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8000b24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000b26:	f001 f970 	bl	8001e0a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000b2a:	bd08      	pop	{r3, pc}

08000b2c <PWR_ExitStopMode>:
{
 8000b2c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8000b2e:	f001 f96c 	bl	8001e0a <HAL_ResumeTick>
  vcom_Resume();
 8000b32:	f000 fb8b 	bl	800124c <vcom_Resume>
}
 8000b36:	bd08      	pop	{r3, pc}

08000b38 <PWR_EnterSleepMode>:
{
 8000b38:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8000b3a:	f001 f95f 	bl	8001dfc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 fde9 	bl	8002718 <HAL_PWR_EnterSLEEPMode>
}
 8000b46:	bd08      	pop	{r3, pc}

08000b48 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	4770      	bx	lr

08000b4a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <NMI_Handler>

08000b4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <HardFault_Handler>

08000b4e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <MemManage_Handler>

08000b50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <BusFault_Handler>

08000b52 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <UsageFault_Handler>

08000b54 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	4770      	bx	lr

08000b56 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	4770      	bx	lr

08000b5c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8000b60:	f002 ff72 	bl	8003a48 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000b64:	bd08      	pop	{r3, pc}
 8000b66:	bf00      	nop
 8000b68:	20000034 	.word	0x20000034

08000b6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DMA1_Channel5_IRQHandler+0xc>)
 8000b70:	f001 fbd2 	bl	8002318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b74:	bd08      	pop	{r3, pc}
 8000b76:	bf00      	nop
 8000b78:	20000080 	.word	0x20000080

08000b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <USART2_IRQHandler+0xc>)
 8000b80:	f003 fc20 	bl	80043c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b84:	bd08      	pop	{r3, pc}
 8000b86:	bf00      	nop
 8000b88:	200000e0 	.word	0x200000e0

08000b8c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <RTC_Alarm_IRQHandler+0xc>)
 8000b90:	f002 fd64 	bl	800365c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	20000034 	.word	0x20000034

08000b9c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <SUBGHZ_Radio_IRQHandler+0xc>)
 8000ba0:	f003 fa06 	bl	8003fb0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000ba4:	bd08      	pop	{r3, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000006c 	.word	0x2000006c

08000bac <EXTI0_IRQHandler>:
  * @brief  This function handles external line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8000bac:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f001 fd9c 	bl	80026ec <HAL_GPIO_EXTI_IRQHandler>
}
 8000bb4:	bd08      	pop	{r3, pc}

08000bb6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000bb6:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f001 fd97 	bl	80026ec <HAL_GPIO_EXTI_IRQHandler>
}
 8000bbe:	bd08      	pop	{r3, pc}

08000bc0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000bc0:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_SUBGHZ_Init+0x18>)
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000bc8:	f002 ff74 	bl	8003ab4 <HAL_SUBGHZ_Init>
 8000bcc:	b900      	cbnz	r0, 8000bd0 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000bce:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bd0:	f7ff fec6 	bl	8000960 <Error_Handler>
}
 8000bd4:	e7fb      	b.n	8000bce <MX_SUBGHZ_Init+0xe>
 8000bd6:	bf00      	nop
 8000bd8:	2000006c 	.word	0x2000006c

08000bdc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000bdc:	b500      	push	{lr}
 8000bde:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000bf4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	2032      	movs	r0, #50	; 0x32
 8000bfc:	f001 f936 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f001 f96b 	bl	8001edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000c06:	b003      	add	sp, #12
 8000c08:	f85d fb04 	ldr.w	pc, [sp], #4

08000c0c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000c0c:	b40c      	push	{r2, r3}
 8000c0e:	b500      	push	{lr}
 8000c10:	b083      	sub	sp, #12
 8000c12:	ab04      	add	r3, sp, #16
 8000c14:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000c18:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000c1a:	f007 fb69 	bl	80082f0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000c1e:	b003      	add	sp, #12
 8000c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c24:	b002      	add	sp, #8
 8000c26:	4770      	bx	lr

08000c28 <TimestampNow>:
{
 8000c28:	b530      	push	{r4, r5, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8000c30:	a802      	add	r0, sp, #8
 8000c32:	f007 f935 	bl	8007ea0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000c36:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	9b02      	ldr	r3, [sp, #8]
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <TimestampNow+0x2c>)
 8000c40:	2110      	movs	r1, #16
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff ffe2 	bl	8000c0c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff fa95 	bl	8000178 <strlen>
 8000c4e:	8028      	strh	r0, [r5, #0]
}
 8000c50:	b005      	add	sp, #20
 8000c52:	bd30      	pop	{r4, r5, pc}
 8000c54:	08008560 	.word	0x08008560

08000c58 <SystemApp_Init>:
{
 8000c58:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c5e:	6893      	ldr	r3, [r2, #8]
 8000c60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c64:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8000c66:	f007 f93d 	bl	8007ee4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000c6a:	2401      	movs	r4, #1
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <SystemApp_Init+0x44>)
 8000c6e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8000c70:	f000 f840 	bl	8000cf4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8000c74:	f006 fe7a 	bl	800796c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <SystemApp_Init+0x48>)
 8000c7a:	f006 fe91 	bl	80079a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f006 fe94 	bl	80079ac <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8000c84:	f006 ffa2 	bl	8007bcc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c88:	4621      	mov	r1, r4
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f006 ffbe 	bl	8007c0c <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c90:	4621      	mov	r1, r4
 8000c92:	4620      	mov	r0, r4
 8000c94:	f006 ffa4 	bl	8007be0 <UTIL_LPM_SetStopMode>
}
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000078 	.word	0x20000078
 8000ca0:	08000c29 	.word	0x08000c29

08000ca4 <UTIL_SEQ_Idle>:
{
 8000ca4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8000ca6:	f006 ffc7 	bl	8007c38 <UTIL_LPM_EnterLowPower>
}
 8000caa:	bd08      	pop	{r3, pc}

08000cac <UTIL_ADV_TRACE_PreSendHook>:
{
 8000cac:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f006 ff95 	bl	8007be0 <UTIL_LPM_SetStopMode>
}
 8000cb6:	bd08      	pop	{r3, pc}

08000cb8 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000cb8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2002      	movs	r0, #2
 8000cbe:	f006 ff8f 	bl	8007be0 <UTIL_LPM_SetStopMode>
}
 8000cc2:	bd08      	pop	{r3, pc}

08000cc4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000cc8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <HAL_GetTick+0x14>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b90b      	cbnz	r3, 8000cd4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8000cd0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8000cd2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8000cd4:	f000 f884 	bl	8000de0 <TIMER_IF_GetTimerValue>
 8000cd8:	e7fb      	b.n	8000cd2 <HAL_GetTick+0xa>
 8000cda:	bf00      	nop
 8000cdc:	20000078 	.word	0x20000078

08000ce0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000ce0:	b500      	push	{lr}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000ce6:	9801      	ldr	r0, [sp, #4]
 8000ce8:	f000 f960 	bl	8000fac <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000cec:	b003      	add	sp, #12
 8000cee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000cf4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <DBG_Init+0x90>)
 8000cfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d06:	f001 f887 	bl	8001e18 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000d0a:	f001 f88d 	bl	8001e28 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000d0e:	f001 f893 	bl	8001e38 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000d12:	2400      	movs	r4, #0
 8000d14:	9403      	str	r4, [sp, #12]
 8000d16:	9404      	str	r4, [sp, #16]
 8000d18:	9405      	str	r4, [sp, #20]
 8000d1a:	9406      	str	r4, [sp, #24]
 8000d1c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2c:	f042 0202 	orr.w	r2, r2, #2
 8000d30:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d34:	f002 0202 	and.w	r2, r2, #2
 8000d38:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000d3a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f042 0202 	orr.w	r2, r2, #2
 8000d42:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000d4c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000d4e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8000d52:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000d54:	4d0c      	ldr	r5, [pc, #48]	; (8000d88 <DBG_Init+0x94>)
 8000d56:	a903      	add	r1, sp, #12
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f001 fb71 	bl	8002440 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000d5e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000d62:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000d64:	a903      	add	r1, sp, #12
 8000d66:	4628      	mov	r0, r5
 8000d68:	f001 fb6a 	bl	8002440 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000d6c:	4622      	mov	r2, r4
 8000d6e:	4639      	mov	r1, r7
 8000d70:	4628      	mov	r0, r5
 8000d72:	f001 fcb5 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000d76:	4622      	mov	r2, r4
 8000d78:	4631      	mov	r1, r6
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	f001 fcb0 	bl	80026e0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000d80:	b009      	add	sp, #36	; 0x24
 8000d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d84:	58000800 	.word	0x58000800
 8000d88:	48000400 	.word	0x48000400

08000d8c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <TIMER_IF_SetTimerContext+0x1c>)
 8000d8e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000d90:	e001      	b.n	8000d96 <TIMER_IF_SetTimerContext+0xa>
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <TIMER_IF_SetTimerContext+0x1c>)
 8000d94:	6898      	ldr	r0, [r3, #8]
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <TIMER_IF_SetTimerContext+0x1c>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4283      	cmp	r3, r0
 8000d9c:	d1f9      	bne.n	8000d92 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8000d9e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <TIMER_IF_SetTimerContext+0x20>)
 8000da2:	6018      	str	r0, [r3, #0]
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40002800 	.word	0x40002800
 8000dac:	2000007c 	.word	0x2000007c

08000db0 <TIMER_IF_GetTimerContext>:
}
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <TIMER_IF_GetTimerContext+0x8>)
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000007c 	.word	0x2000007c

08000dbc <TIMER_IF_GetTimerElapsedTime>:
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000dbe:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000dc0:	e001      	b.n	8000dc6 <TIMER_IF_GetTimerElapsedTime+0xa>
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000dc4:	6898      	ldr	r0, [r3, #8]
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	4283      	cmp	r3, r0
 8000dcc:	d1f9      	bne.n	8000dc2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8000dce:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <TIMER_IF_GetTimerElapsedTime+0x20>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	1ac0      	subs	r0, r0, r3
 8000dd6:	4770      	bx	lr
 8000dd8:	40002800 	.word	0x40002800
 8000ddc:	2000007c 	.word	0x2000007c

08000de0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <TIMER_IF_GetTimerValue+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b153      	cbz	r3, 8000dfc <TIMER_IF_GetTimerValue+0x1c>
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <TIMER_IF_GetTimerValue+0x24>)
 8000de8:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000dea:	e001      	b.n	8000df0 <TIMER_IF_GetTimerValue+0x10>
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <TIMER_IF_GetTimerValue+0x24>)
 8000dee:	6898      	ldr	r0, [r3, #8]
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <TIMER_IF_GetTimerValue+0x24>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	4283      	cmp	r3, r0
 8000df6:	d1f9      	bne.n	8000dec <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8000df8:	43c0      	mvns	r0, r0
 8000dfa:	4770      	bx	lr
  uint32_t ret = 0;
 8000dfc:	2000      	movs	r0, #0
}
 8000dfe:	4770      	bx	lr
 8000e00:	20000079 	.word	0x20000079
 8000e04:	40002800 	.word	0x40002800

08000e08 <TIMER_IF_GetMinimumTimeout>:
}
 8000e08:	2003      	movs	r0, #3
 8000e0a:	4770      	bx	lr

08000e0c <TIMER_IF_Convert_ms2Tick>:
{
 8000e0c:	b508      	push	{r3, lr}
 8000e0e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	2300      	movs	r3, #0
 8000e16:	0280      	lsls	r0, r0, #10
 8000e18:	0d89      	lsrs	r1, r1, #22
 8000e1a:	f7ff fb9d 	bl	8000558 <__aeabi_uldivmod>
}
 8000e1e:	bd08      	pop	{r3, pc}

08000e20 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000e20:	0ec2      	lsrs	r2, r0, #27
 8000e22:	0143      	lsls	r3, r0, #5
 8000e24:	1a1b      	subs	r3, r3, r0
 8000e26:	f162 0200 	sbc.w	r2, r2, #0
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	181b      	adds	r3, r3, r0
 8000e34:	f142 0000 	adc.w	r0, r2, #0
 8000e38:	00c0      	lsls	r0, r0, #3
 8000e3a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8000e3e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8000e42:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8000e46:	4770      	bx	lr

08000e48 <TIMER_IF_StopTimer>:
{
 8000e48:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <TIMER_IF_StopTimer+0x20>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e50:	4c06      	ldr	r4, [pc, #24]	; (8000e6c <TIMER_IF_StopTimer+0x24>)
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	4620      	mov	r0, r4
 8000e58:	f002 fbc0 	bl	80035dc <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	6323      	str	r3, [r4, #48]	; 0x30
}
 8000e62:	2000      	movs	r0, #0
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	40002800 	.word	0x40002800
 8000e6c:	20000034 	.word	0x20000034

08000e70 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8000e70:	b508      	push	{r3, lr}
 8000e72:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000e74:	2102      	movs	r1, #2
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8000e78:	f002 fdfb 	bl	8003a72 <HAL_RTCEx_BKUPWrite>
}
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000034 	.word	0x20000034

08000e84 <TIMER_IF_Init>:
{
 8000e84:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <TIMER_IF_Init+0x40>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b10b      	cbz	r3, 8000e90 <TIMER_IF_Init+0xc>
}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e90:	4c0d      	ldr	r4, [pc, #52]	; (8000ec8 <TIMER_IF_Init+0x44>)
 8000e92:	f04f 35ff 	mov.w	r5, #4294967295
 8000e96:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8000e98:	f7ff fdb8 	bl	8000a0c <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8000e9c:	f7ff ffd4 	bl	8000e48 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f002 fb99 	bl	80035dc <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000eaa:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000eac:	4620      	mov	r0, r4
 8000eae:	f002 fd7f 	bl	80039b0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff ffdc 	bl	8000e70 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8000eb8:	f7ff ff68 	bl	8000d8c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <TIMER_IF_Init+0x40>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	e7e3      	b.n	8000e8c <TIMER_IF_Init+0x8>
 8000ec4:	20000079 	.word	0x20000079
 8000ec8:	20000034 	.word	0x20000034

08000ecc <TIMER_IF_BkUp_Write_Seconds>:
{
 8000ecc:	b508      	push	{r3, lr}
 8000ece:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8000ed4:	f002 fdcd 	bl	8003a72 <HAL_RTCEx_BKUPWrite>
}
 8000ed8:	bd08      	pop	{r3, pc}
 8000eda:	bf00      	nop
 8000edc:	20000034 	.word	0x20000034

08000ee0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8000ee0:	b508      	push	{r3, lr}
 8000ee2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8000ee8:	f002 fdc3 	bl	8003a72 <HAL_RTCEx_BKUPWrite>
}
 8000eec:	bd08      	pop	{r3, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000034 	.word	0x20000034

08000ef4 <TIMER_IF_StartTimer>:
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8000efa:	222c      	movs	r2, #44	; 0x2c
 8000efc:	2100      	movs	r1, #0
 8000efe:	a801      	add	r0, sp, #4
 8000f00:	f007 faec 	bl	80084dc <memset>
  TIMER_IF_StopTimer();
 8000f04:	f7ff ffa0 	bl	8000e48 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <TIMER_IF_StartTimer+0x48>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000f12:	43e4      	mvns	r4, r4
 8000f14:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f16:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000f18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f1c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f24:	2201      	movs	r2, #1
 8000f26:	a901      	add	r1, sp, #4
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <TIMER_IF_StartTimer+0x4c>)
 8000f2a:	f002 fc85 	bl	8003838 <HAL_RTC_SetAlarm_IT>
 8000f2e:	b910      	cbnz	r0, 8000f36 <TIMER_IF_StartTimer+0x42>
}
 8000f30:	2000      	movs	r0, #0
 8000f32:	b00c      	add	sp, #48	; 0x30
 8000f34:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f36:	f7ff fd13 	bl	8000960 <Error_Handler>
 8000f3a:	e7f9      	b.n	8000f30 <TIMER_IF_StartTimer+0x3c>
 8000f3c:	2000007c 	.word	0x2000007c
 8000f40:	20000034 	.word	0x20000034

08000f44 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8000f44:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000f46:	2102      	movs	r1, #2
 8000f48:	4801      	ldr	r0, [pc, #4]	; (8000f50 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8000f4a:	f002 fd99 	bl	8003a80 <HAL_RTCEx_BKUPRead>
}
 8000f4e:	bd08      	pop	{r3, pc}
 8000f50:	20000034 	.word	0x20000034

08000f54 <TIMER_IF_GetTime>:
{
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4605      	mov	r5, r0
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <TIMER_IF_GetTime+0x34>)
 8000f5a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000f5c:	e001      	b.n	8000f62 <TIMER_IF_GetTime+0xe>
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <TIMER_IF_GetTime+0x34>)
 8000f60:	689c      	ldr	r4, [r3, #8]
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <TIMER_IF_GetTime+0x34>)
 8000f64:	6892      	ldr	r2, [r2, #8]
 8000f66:	42a2      	cmp	r2, r4
 8000f68:	d1f9      	bne.n	8000f5e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8000f6a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000f6c:	f7ff ffea 	bl	8000f44 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000f70:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f72:	0aa4      	lsrs	r4, r4, #10
 8000f74:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f78:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8000f7c:	f7ff ff50 	bl	8000e20 <TIMER_IF_Convert_Tick2ms>
 8000f80:	8028      	strh	r0, [r5, #0]
}
 8000f82:	4620      	mov	r0, r4
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	40002800 	.word	0x40002800

08000f8c <TIMER_IF_BkUp_Read_Seconds>:
{
 8000f8c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4801      	ldr	r0, [pc, #4]	; (8000f98 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8000f92:	f002 fd75 	bl	8003a80 <HAL_RTCEx_BKUPRead>
}
 8000f96:	bd08      	pop	{r3, pc}
 8000f98:	20000034 	.word	0x20000034

08000f9c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8000f9c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4801      	ldr	r0, [pc, #4]	; (8000fa8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8000fa2:	f002 fd6d 	bl	8003a80 <HAL_RTCEx_BKUPRead>
}
 8000fa6:	bd08      	pop	{r3, pc}
 8000fa8:	20000034 	.word	0x20000034

08000fac <TIMER_IF_DelayMs>:
{
 8000fac:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000fae:	f7ff ff2d 	bl	8000e0c <TIMER_IF_Convert_ms2Tick>
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fb4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fb6:	e001      	b.n	8000fbc <TIMER_IF_DelayMs+0x10>
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fba:	6899      	ldr	r1, [r3, #8]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fbe:	6892      	ldr	r2, [r2, #8]
 8000fc0:	428a      	cmp	r2, r1
 8000fc2:	d1f9      	bne.n	8000fb8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8000fc4:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000fc6:	e00a      	b.n	8000fde <TIMER_IF_DelayMs+0x32>
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fce:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d1f9      	bne.n	8000fc8 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8000fd4:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000fd6:	1a5b      	subs	r3, r3, r1
 8000fd8:	4283      	cmp	r3, r0
 8000fda:	d203      	bcs.n	8000fe4 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8000fdc:	bf00      	nop
 8000fde:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <TIMER_IF_DelayMs+0x3c>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8000fe2:	e7f3      	b.n	8000fcc <TIMER_IF_DelayMs+0x20>
}
 8000fe4:	bd08      	pop	{r3, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40002800 	.word	0x40002800

08000fec <HAL_RTC_AlarmAEventCallback>:
{
 8000fec:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000fee:	f007 f89d 	bl	800812c <UTIL_TIMER_IRQ_Handler>
}
 8000ff2:	bd08      	pop	{r3, pc}

08000ff4 <HAL_RTCEx_SSRUEventCallback>:
{
 8000ff4:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000ff6:	f7ff ffa5 	bl	8000f44 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000ffa:	3001      	adds	r0, #1
 8000ffc:	f7ff ff38 	bl	8000e70 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001000:	bd08      	pop	{r3, pc}
	...

08001004 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001004:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <MX_USART2_UART_Init+0x60>)
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_USART2_UART_Init+0x64>)
 800100a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800100c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001010:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	2300      	movs	r3, #0
 8001014:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001016:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001018:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101a:	220c      	movs	r2, #12
 800101c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001026:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001028:	f004 f888 	bl	800513c <HAL_UART_Init>
 800102c:	b970      	cbnz	r0, 800104c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_USART2_UART_Init+0x60>)
 8001032:	f004 fa38 	bl	80054a6 <HAL_UARTEx_SetTxFifoThreshold>
 8001036:	b960      	cbnz	r0, 8001052 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <MX_USART2_UART_Init+0x60>)
 800103c:	f004 fa58 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001040:	b950      	cbnz	r0, 8001058 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <MX_USART2_UART_Init+0x60>)
 8001044:	f004 fa0b 	bl	800545e <HAL_UARTEx_EnableFifoMode>
 8001048:	b948      	cbnz	r0, 800105e <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800104c:	f7ff fc88 	bl	8000960 <Error_Handler>
 8001050:	e7ed      	b.n	800102e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001052:	f7ff fc85 	bl	8000960 <Error_Handler>
 8001056:	e7ef      	b.n	8001038 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001058:	f7ff fc82 	bl	8000960 <Error_Handler>
 800105c:	e7f1      	b.n	8001042 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800105e:	f7ff fc7f 	bl	8000960 <Error_Handler>
}
 8001062:	e7f2      	b.n	800104a <MX_USART2_UART_Init+0x46>
 8001064:	200000e0 	.word	0x200000e0
 8001068:	40004400 	.word	0x40004400

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b530      	push	{r4, r5, lr}
 800106e:	b097      	sub	sp, #92	; 0x5c
 8001070:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	2100      	movs	r1, #0
 8001074:	9111      	str	r1, [sp, #68]	; 0x44
 8001076:	9112      	str	r1, [sp, #72]	; 0x48
 8001078:	9113      	str	r1, [sp, #76]	; 0x4c
 800107a:	9114      	str	r1, [sp, #80]	; 0x50
 800107c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107e:	2238      	movs	r2, #56	; 0x38
 8001080:	a803      	add	r0, sp, #12
 8001082:	f007 fa2b 	bl	80084dc <memset>
  if(uartHandle->Instance==USART2)
 8001086:	6822      	ldr	r2, [r4, #0]
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_UART_MspInit+0xd4>)
 800108a:	429a      	cmp	r2, r3
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800108e:	b017      	add	sp, #92	; 0x5c
 8001090:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001092:	2302      	movs	r3, #2
 8001094:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_UART_MspInit+0xd8>)
 8001098:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	a803      	add	r0, sp, #12
 800109c:	f002 f954 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d144      	bne.n	800112e <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010ae:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010b2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80010b6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80010b8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80010cc:	230c      	movs	r3, #12
 80010ce:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2500      	movs	r5, #0
 80010d6:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010dc:	2307      	movs	r3, #7
 80010de:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	a911      	add	r1, sp, #68	; 0x44
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 f9ab 	bl	8002440 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80010ea:	4817      	ldr	r0, [pc, #92]	; (8001148 <HAL_UART_MspInit+0xdc>)
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0xe0>)
 80010ee:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010f0:	2314      	movs	r3, #20
 80010f2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f4:	2310      	movs	r3, #16
 80010f6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001100:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001102:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001104:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001106:	f000 ff79 	bl	8001ffc <HAL_DMA_Init>
 800110a:	b998      	cbnz	r0, 8001134 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800110c:	2110      	movs	r1, #16
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <HAL_UART_MspInit+0xdc>)
 8001110:	f001 f976 	bl	8002400 <HAL_DMA_ConfigChannelAttributes>
 8001114:	b988      	cbnz	r0, 800113a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_UART_MspInit+0xdc>)
 8001118:	67e3      	str	r3, [r4, #124]	; 0x7c
 800111a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	2025      	movs	r0, #37	; 0x25
 8001122:	f000 fea3 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001126:	2025      	movs	r0, #37	; 0x25
 8001128:	f000 fed8 	bl	8001edc <HAL_NVIC_EnableIRQ>
}
 800112c:	e7af      	b.n	800108e <HAL_UART_MspInit+0x22>
      Error_Handler();
 800112e:	f7ff fc17 	bl	8000960 <Error_Handler>
 8001132:	e7b7      	b.n	80010a4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001134:	f7ff fc14 	bl	8000960 <Error_Handler>
 8001138:	e7e8      	b.n	800110c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800113a:	f7ff fc11 	bl	8000960 <Error_Handler>
 800113e:	e7ea      	b.n	8001116 <HAL_UART_MspInit+0xaa>
 8001140:	40004400 	.word	0x40004400
 8001144:	000c0004 	.word	0x000c0004
 8001148:	20000080 	.word	0x20000080
 800114c:	40020058 	.word	0x40020058

08001150 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001150:	6802      	ldr	r2, [r0, #0]
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_UART_MspDeInit+0x34>)
 8001154:	429a      	cmp	r2, r3
 8001156:	d000      	beq.n	800115a <HAL_UART_MspDeInit+0xa>
 8001158:	4770      	bx	lr
{
 800115a:	b510      	push	{r4, lr}
 800115c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800115e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001162:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001168:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800116a:	210c      	movs	r1, #12
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f001 fa38 	bl	80025e4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001174:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001176:	f000 ffb3 	bl	80020e0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800117a:	2025      	movs	r0, #37	; 0x25
 800117c:	f000 febc 	bl	8001ef8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001180:	bd10      	pop	{r4, pc}
 8001182:	bf00      	nop
 8001184:	40004400 	.word	0x40004400

08001188 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <vcom_Init+0x20>)
 800118c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800118e:	f7ff fb65 	bl	800085c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001192:	f7ff ff37 	bl	8001004 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <vcom_Init+0x24>)
 8001198:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800119c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80011a4:	2000      	movs	r0, #0
 80011a6:	bd08      	pop	{r3, pc}
 80011a8:	20000178 	.word	0x20000178
 80011ac:	58000800 	.word	0x58000800

080011b0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80011b0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80011be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <vcom_DeInit+0x28>)
 80011c8:	f7ff ffc2 	bl	8001150 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80011cc:	200f      	movs	r0, #15
 80011ce:	f000 fe93 	bl	8001ef8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	bd08      	pop	{r3, pc}
 80011d6:	bf00      	nop
 80011d8:	200000e0 	.word	0x200000e0

080011dc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80011dc:	b508      	push	{r3, lr}
 80011de:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80011e0:	4601      	mov	r1, r0
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <vcom_Trace_DMA+0x10>)
 80011e4:	f003 f82a 	bl	800423c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd08      	pop	{r3, pc}
 80011ec:	200000e0 	.word	0x200000e0

080011f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <vcom_ReceiveInit+0x50>)
 80011f6:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80011f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011fc:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80011fe:	ab02      	add	r3, sp, #8
 8001200:	e913 0006 	ldmdb	r3, {r1, r2}
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <vcom_ReceiveInit+0x54>)
 8001206:	f004 f8d2 	bl	80053ae <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <vcom_ReceiveInit+0x54>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001214:	d1f9      	bne.n	800120a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800121c:	d0fb      	beq.n	8001216 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001224:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001226:	4c07      	ldr	r4, [pc, #28]	; (8001244 <vcom_ReceiveInit+0x54>)
 8001228:	4620      	mov	r0, r4
 800122a:	f004 f901 	bl	8005430 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800122e:	2201      	movs	r2, #1
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <vcom_ReceiveInit+0x58>)
 8001232:	4620      	mov	r0, r4
 8001234:	f004 f854 	bl	80052e0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001238:	2000      	movs	r0, #0
 800123a:	b002      	add	sp, #8
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	20000174 	.word	0x20000174
 8001244:	200000e0 	.word	0x200000e0
 8001248:	2000017c 	.word	0x2000017c

0800124c <vcom_Resume>:

void vcom_Resume(void)
{
 800124c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <vcom_Resume+0x20>)
 8001250:	f003 ff74 	bl	800513c <HAL_UART_Init>
 8001254:	b920      	cbnz	r0, 8001260 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <vcom_Resume+0x24>)
 8001258:	f000 fed0 	bl	8001ffc <HAL_DMA_Init>
 800125c:	b918      	cbnz	r0, 8001266 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800125e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001260:	f7ff fb7e 	bl	8000960 <Error_Handler>
 8001264:	e7f7      	b.n	8001256 <vcom_Resume+0xa>
    Error_Handler();
 8001266:	f7ff fb7b 	bl	8000960 <Error_Handler>
}
 800126a:	e7f8      	b.n	800125e <vcom_Resume+0x12>
 800126c:	200000e0 	.word	0x200000e0
 8001270:	20000080 	.word	0x20000080

08001274 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001276:	6802      	ldr	r2, [r0, #0]
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_UART_TxCpltCallback+0x18>)
 800127a:	429a      	cmp	r2, r3
 800127c:	d000      	beq.n	8001280 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800127e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_UART_TxCpltCallback+0x1c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2000      	movs	r0, #0
 8001286:	4798      	blx	r3
}
 8001288:	e7f9      	b.n	800127e <HAL_UART_TxCpltCallback+0xa>
 800128a:	bf00      	nop
 800128c:	40004400 	.word	0x40004400
 8001290:	20000178 	.word	0x20000178

08001294 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_UART_RxCpltCallback+0x2c>)
 8001298:	429a      	cmp	r2, r3
 800129a:	d000      	beq.n	800129e <HAL_UART_RxCpltCallback+0xa>
 800129c:	4770      	bx	lr
{
 800129e:	b510      	push	{r4, lr}
 80012a0:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_UART_RxCpltCallback+0x30>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b12b      	cbz	r3, 80012b4 <HAL_UART_RxCpltCallback+0x20>
 80012a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80012ac:	b912      	cbnz	r2, 80012b4 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80012ae:	2101      	movs	r1, #1
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_UART_RxCpltCallback+0x34>)
 80012b2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	4904      	ldr	r1, [pc, #16]	; (80012c8 <HAL_UART_RxCpltCallback+0x34>)
 80012b8:	4620      	mov	r0, r4
 80012ba:	f004 f811 	bl	80052e0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	40004400 	.word	0x40004400
 80012c4:	20000174 	.word	0x20000174
 80012c8:	2000017c 	.word	0x2000017c

080012cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d0:	f000 fd7d 	bl	8001dce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d6:	490d      	ldr	r1, [pc, #52]	; (800130c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <LoopForever+0xe>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ec:	4c0a      	ldr	r4, [pc, #40]	; (8001318 <LoopForever+0x16>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012fa:	f007 f8bd 	bl	8008478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fe:	f7ff fb78 	bl	80009f2 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   r0, =_estack
 8001304:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001310:	08008d68 	.word	0x08008d68
  ldr r2, =_sbss
 8001314:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001318:	200008c8 	.word	0x200008c8

0800131c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>

0800131e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800131e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001320:	f7ff fc9a 	bl	8000c58 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8001324:	f000 f99a 	bl	800165c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001328:	bd08      	pop	{r3, pc}

0800132a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800132a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f006 fcee 	bl	8007d10 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001334:	bd08      	pop	{r3, pc}
	...

08001338 <Tb_OnRxTimeout>:
  /* USER CODE END OnRxError */
}


static void Tb_OnRxTimeout(void)
{
 8001338:	b500      	push	{lr}
 800133a:	b083      	sub	sp, #12
  /* USER CODE BEGIN OnTxTimeout */

  if(Testbench_State == TB_RX_SYNCH){
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <Tb_OnRxTimeout+0x60>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d11c      	bne.n	800137e <Tb_OnRxTimeout+0x46>
	  rx_synch_flag = false; // timeout for the REPLY synch frame from TX Node
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <Tb_OnRxTimeout+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
	  synch_retransmit_ctr++;
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <Tb_OnRxTimeout+0x68>)
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	6013      	str	r3, [r2, #0]
	  if (synch_retransmit_ctr == MAX_SYNCH_RETRIES){
 8001352:	2b32      	cmp	r3, #50	; 0x32
 8001354:	d007      	beq.n	8001366 <Tb_OnRxTimeout+0x2e>
		  synch_retransmit_ctr = 0;
		  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxTimeout - RX SYNCH TIMEOUT MAX RETRIES CTR: %d\n\r", synch_retransmit_ctr);
		  Testbench_State = TB_WAIT_USER_TRIG; // max retries reached - wait for user input
	  }
	  else{
		  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxTimeout - RX SYNCH TIMEOUT CTR: %d\n\r", synch_retransmit_ctr);
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <Tb_OnRxTimeout+0x6c>)
 800135a:	2201      	movs	r2, #1
 800135c:	2100      	movs	r1, #0
 800135e:	4610      	mov	r0, r2
 8001360:	f006 fb78 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 8001364:	e011      	b.n	800138a <Tb_OnRxTimeout+0x52>
		  synch_retransmit_ctr = 0;
 8001366:	2100      	movs	r1, #0
 8001368:	6011      	str	r1, [r2, #0]
		  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxTimeout - RX SYNCH TIMEOUT MAX RETRIES CTR: %d\n\r", synch_retransmit_ctr);
 800136a:	9100      	str	r1, [sp, #0]
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <Tb_OnRxTimeout+0x70>)
 800136e:	2201      	movs	r2, #1
 8001370:	4610      	mov	r0, r2
 8001372:	f006 fb6f 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
		  Testbench_State = TB_WAIT_USER_TRIG; // max retries reached - wait for user input
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <Tb_OnRxTimeout+0x60>)
 8001378:	2207      	movs	r2, #7
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e005      	b.n	800138a <Tb_OnRxTimeout+0x52>
		  // Remain in TB_RX_SYNCH state - send new synch frame
	  }
  }
  else{
	  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxTimeout\n\r");
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <Tb_OnRxTimeout+0x74>)
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	4610      	mov	r0, r2
 8001386:	f006 fb65 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  }

  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800138a:	2100      	movs	r1, #0
 800138c:	2001      	movs	r0, #1
 800138e:	f006 fc8b 	bl	8007ca8 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 8001392:	b003      	add	sp, #12
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
 8001398:	20000000 	.word	0x20000000
 800139c:	20000001 	.word	0x20000001
 80013a0:	200003b4 	.word	0x200003b4
 80013a4:	080085f4 	.word	0x080085f4
 80013a8:	080085bc 	.word	0x080085bc
 80013ac:	08008620 	.word	0x08008620

080013b0 <Tb_OnRxError>:
{
 80013b0:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxError: PKT ERROR\r");
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <Tb_OnRxError+0x18>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	2100      	movs	r1, #0
 80013b8:	4610      	mov	r0, r2
 80013ba:	f006 fb4b 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2001      	movs	r0, #1
 80013c2:	f006 fc71 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 80013c6:	bd08      	pop	{r3, pc}
 80013c8:	08008634 	.word	0x08008634

080013cc <Tb_OnTxTimeout>:
{
 80013cc:	b508      	push	{r3, lr}
  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnTxTimeout\n\r");
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <Tb_OnTxTimeout+0x20>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	2100      	movs	r1, #0
 80013d4:	4610      	mov	r0, r2
 80013d6:	f006 fb3d 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  Testbench_State = TB_TX_TIMEOUT;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <Tb_OnTxTimeout+0x24>)
 80013dc:	2205      	movs	r2, #5
 80013de:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2001      	movs	r0, #1
 80013e4:	f006 fc60 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop
 80013ec:	08008650 	.word	0x08008650
 80013f0:	20000000 	.word	0x20000000

080013f4 <Tb_OnTxDone>:
{
 80013f4:	b530      	push	{r4, r5, lr}
 80013f6:	b083      	sub	sp, #12
  uint32_t current_time = HAL_GetTick();
 80013f8:	f7ff fc66 	bl	8000cc8 <HAL_GetTick>
  float delta = (float)(current_time - tx_start_timestamp)/1024; // transmission time on air in seconds
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <Tb_OnTxDone+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1ac0      	subs	r0, r0, r3
 8001402:	f7ff f82b 	bl	800045c <__aeabi_ui2f>
 8001406:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 800140a:	f7fe febd 	bl	8000188 <__aeabi_fmul>
 800140e:	4604      	mov	r4, r0
  int deltaInt = (int)delta;
 8001410:	f7ff f87c 	bl	800050c <__aeabi_f2iz>
 8001414:	4605      	mov	r5, r0
  int deltaDec = (int)((delta - deltaInt) * 1000);
 8001416:	f7ff f825 	bl	8000464 <__aeabi_i2f>
 800141a:	4601      	mov	r1, r0
 800141c:	4620      	mov	r0, r4
 800141e:	f7fe ff6b 	bl	80002f8 <__aeabi_fsub>
 8001422:	491d      	ldr	r1, [pc, #116]	; (8001498 <Tb_OnTxDone+0xa4>)
 8001424:	f7fe feb0 	bl	8000188 <__aeabi_fmul>
 8001428:	f7ff f870 	bl	800050c <__aeabi_f2iz>
  if (Testbench_State == TB_TX){
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <Tb_OnTxDone+0xa8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d009      	beq.n	8001448 <Tb_OnTxDone+0x54>
  else if(Testbench_State == TB_TX_SYNCH){
 8001434:	2b06      	cmp	r3, #6
 8001436:	d013      	beq.n	8001460 <Tb_OnTxDone+0x6c>
  else if(Testbench_State == TB_RX_SYNCH){
 8001438:	2b02      	cmp	r3, #2
 800143a:	d01b      	beq.n	8001474 <Tb_OnTxDone+0x80>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800143c:	2100      	movs	r1, #0
 800143e:	2001      	movs	r0, #1
 8001440:	f006 fc32 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 8001444:	b003      	add	sp, #12
 8001446:	bd30      	pop	{r4, r5, pc}
	  Testbench_State = TB_TX_DONE;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <Tb_OnTxDone+0xa8>)
 800144a:	2204      	movs	r2, #4
 800144c:	701a      	strb	r2, [r3, #0]
	  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnTxDone - TOA=%ds%03d\r", deltaInt, deltaDec);
 800144e:	9001      	str	r0, [sp, #4]
 8001450:	9500      	str	r5, [sp, #0]
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <Tb_OnTxDone+0xac>)
 8001454:	2201      	movs	r2, #1
 8001456:	2100      	movs	r1, #0
 8001458:	4610      	mov	r0, r2
 800145a:	f006 fafb 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 800145e:	e7ed      	b.n	800143c <Tb_OnTxDone+0x48>
	  Testbench_State = TB_TX_DONE;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <Tb_OnTxDone+0xa8>)
 8001462:	2204      	movs	r2, #4
 8001464:	701a      	strb	r2, [r3, #0]
	  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnTxDone - TX SYNCH REPLY SENT\n\r");
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <Tb_OnTxDone+0xb0>)
 8001468:	2201      	movs	r2, #1
 800146a:	2100      	movs	r1, #0
 800146c:	4610      	mov	r0, r2
 800146e:	f006 faf1 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 8001472:	e7e3      	b.n	800143c <Tb_OnTxDone+0x48>
	  rx_synch_flag = true;
 8001474:	2401      	movs	r4, #1
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <Tb_OnTxDone+0xb4>)
 8001478:	701c      	strb	r4, [r3, #0]
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // BLUE Led
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <Tb_OnTxDone+0xb8>)
 8001482:	f001 f92d 	bl	80026e0 <HAL_GPIO_WritePin>
  	  APP_LOG(TS_ON, VLEVEL_L, "Tb_OnTxDone - RX SYNCH FRAME SENT\n\r");
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <Tb_OnTxDone+0xbc>)
 8001488:	4622      	mov	r2, r4
 800148a:	2100      	movs	r1, #0
 800148c:	4620      	mov	r0, r4
 800148e:	f006 fae1 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 8001492:	e7d3      	b.n	800143c <Tb_OnTxDone+0x48>
 8001494:	200003d0 	.word	0x200003d0
 8001498:	447a0000 	.word	0x447a0000
 800149c:	20000000 	.word	0x20000000
 80014a0:	08008664 	.word	0x08008664
 80014a4:	08008680 	.word	0x08008680
 80014a8:	20000001 	.word	0x20000001
 80014ac:	48000400 	.word	0x48000400
 80014b0:	080086a4 	.word	0x080086a4

080014b4 <Tb_OnTimerRxSynch>:
	UTIL_TIMER_SetPeriod(&timerRxSynch, rx_synch_timer_value_ms);
	UTIL_TIMER_Start(&timerRxSynch);
}


static void Tb_OnTimerRxSynch(void *context){
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	b085      	sub	sp, #20
	uint32_t cycle_end_timestamp;
	cycle_end_timestamp = HAL_GetTick();
 80014b8:	f7ff fc06 	bl	8000cc8 <HAL_GetTick>
	float delta = (float)(cycle_end_timestamp - cycle_start_timestamp)/1024;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <Tb_OnTimerRxSynch+0x7c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1ac0      	subs	r0, r0, r3
 80014c2:	f7fe ffcb 	bl	800045c <__aeabi_ui2f>
 80014c6:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80014ca:	f7fe fe5d 	bl	8000188 <__aeabi_fmul>
 80014ce:	4605      	mov	r5, r0
	int deltaInt = (int)delta;
 80014d0:	f7ff f81c 	bl	800050c <__aeabi_f2iz>
 80014d4:	4604      	mov	r4, r0
	int deltaDec = (int)((delta - deltaInt) * 1000);
 80014d6:	f7fe ffc5 	bl	8000464 <__aeabi_i2f>
 80014da:	4601      	mov	r1, r0
 80014dc:	4628      	mov	r0, r5
 80014de:	f7fe ff0b 	bl	80002f8 <__aeabi_fsub>
 80014e2:	4914      	ldr	r1, [pc, #80]	; (8001534 <Tb_OnTimerRxSynch+0x80>)
 80014e4:	f7fe fe50 	bl	8000188 <__aeabi_fmul>
 80014e8:	f7ff f810 	bl	800050c <__aeabi_f2iz>
	// This function is called at the end of a Full TX Power Cycle - Move to Next LoRa Data Rate
	APP_LOG(TS_ON, VLEVEL_L, "Cycle END - Packets Received (%d) - Cycle Time %ds%03d\n\r",
 80014ec:	9002      	str	r0, [sp, #8]
 80014ee:	9401      	str	r4, [sp, #4]
 80014f0:	4c11      	ldr	r4, [pc, #68]	; (8001538 <Tb_OnTimerRxSynch+0x84>)
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <Tb_OnTimerRxSynch+0x88>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	2100      	movs	r1, #0
 80014fc:	4610      	mov	r0, r2
 80014fe:	f006 faa9 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
			n_tx_ctr, deltaInt, deltaDec);
	n_tx_ctr = 0; // reset counter
 8001502:	2300      	movs	r3, #0
 8001504:	6023      	str	r3, [r4, #0]
	if (lora_data_rate == MAX_LORA_DR){
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <Tb_OnTimerRxSynch+0x8c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d00b      	beq.n	8001526 <Tb_OnTimerRxSynch+0x72>
		Testbench_State = TB_END; // all DR cycles completed
	}
	else{
		if (DR_CHANGE_MANUAL == 0){ // RX in Auto config
			// When in MANUAL config, the next DR cycle synch is automatically executed
			lora_data_rate++; // Set Data Rate for next Cycle
 800150e:	3301      	adds	r3, #1
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <Tb_OnTimerRxSynch+0x8c>)
 8001512:	7013      	strb	r3, [r2, #0]
			Testbench_State = TB_RX_SYNCH; // run synch again
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <Tb_OnTimerRxSynch+0x90>)
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
			lora_data_rate++; // Set Data Rate for next Cycle
			Testbench_State = TB_WAIT_USER_TRIG; // Wait for User input to run synch again
		}
	}

	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f006 fbc3 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 8001522:	b005      	add	sp, #20
 8001524:	bd30      	pop	{r4, r5, pc}
		Testbench_State = TB_END; // all DR cycles completed
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <Tb_OnTimerRxSynch+0x90>)
 8001528:	2208      	movs	r2, #8
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	e7f5      	b.n	800151a <Tb_OnTimerRxSynch+0x66>
 800152e:	bf00      	nop
 8001530:	200003a8 	.word	0x200003a8
 8001534:	447a0000 	.word	0x447a0000
 8001538:	200003b0 	.word	0x200003b0
 800153c:	080086c8 	.word	0x080086c8
 8001540:	200003ac 	.word	0x200003ac
 8001544:	20000000 	.word	0x20000000

08001548 <Tb_OnRxDone>:
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	4607      	mov	r7, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4615      	mov	r5, r2
 8001552:	461e      	mov	r6, r3
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8001554:	22ff      	movs	r2, #255	; 0xff
 8001556:	2100      	movs	r1, #0
 8001558:	4834      	ldr	r0, [pc, #208]	; (800162c <Tb_OnRxDone+0xe4>)
 800155a:	f006 ffbf 	bl	80084dc <memset>
  RxBufferSize = size;
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <Tb_OnRxDone+0xe8>)
 8001560:	801c      	strh	r4, [r3, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 8001562:	2cff      	cmp	r4, #255	; 0xff
 8001564:	d927      	bls.n	80015b6 <Tb_OnRxDone+0x6e>
  APP_LOG(TS_ON, VLEVEL_L, "RSSI=%04ddBm; SNR=%03ddB; PAYLOAD(%d): KEY(%x%x%x) CTR(%02x%02x) DR(%02x) TXPWR(%02x)\r",
 8001566:	4831      	ldr	r0, [pc, #196]	; (800162c <Tb_OnRxDone+0xe4>)
 8001568:	7803      	ldrb	r3, [r0, #0]
 800156a:	7842      	ldrb	r2, [r0, #1]
 800156c:	7881      	ldrb	r1, [r0, #2]
 800156e:	7907      	ldrb	r7, [r0, #4]
 8001570:	f890 c003 	ldrb.w	ip, [r0, #3]
 8001574:	f890 e005 	ldrb.w	lr, [r0, #5]
 8001578:	7980      	ldrb	r0, [r0, #6]
 800157a:	9009      	str	r0, [sp, #36]	; 0x24
 800157c:	f8cd e020 	str.w	lr, [sp, #32]
 8001580:	f8cd c01c 	str.w	ip, [sp, #28]
 8001584:	9706      	str	r7, [sp, #24]
 8001586:	9105      	str	r1, [sp, #20]
 8001588:	9204      	str	r2, [sp, #16]
 800158a:	9303      	str	r3, [sp, #12]
 800158c:	9402      	str	r4, [sp, #8]
 800158e:	9601      	str	r6, [sp, #4]
 8001590:	9500      	str	r5, [sp, #0]
 8001592:	4b28      	ldr	r3, [pc, #160]	; (8001634 <Tb_OnRxDone+0xec>)
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	4610      	mov	r0, r2
 800159a:	f006 fa5b 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
    if (Testbench_State == TB_RX){ // Regular reception during Testbench run
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <Tb_OnRxDone+0xf0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b973      	cbnz	r3, 80015c2 <Tb_OnRxDone+0x7a>
    	Testbench_State = TB_RX_DONE;
 80015a4:	4b24      	ldr	r3, [pc, #144]	; (8001638 <Tb_OnRxDone+0xf0>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2001      	movs	r0, #1
 80015ae:	f006 fb7b 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 80015b2:	b00b      	add	sp, #44	; 0x2c
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(BufferRx, payload, RxBufferSize);
 80015b6:	4622      	mov	r2, r4
 80015b8:	4639      	mov	r1, r7
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <Tb_OnRxDone+0xe4>)
 80015bc:	f006 ff80 	bl	80084c0 <memcpy>
 80015c0:	e7d1      	b.n	8001566 <Tb_OnRxDone+0x1e>
    else if(Testbench_State == TB_TX_SYNCH){ // TX synch sate - Waiting for RX Node to send synch frame
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d00c      	beq.n	80015e0 <Tb_OnRxDone+0x98>
    else if(Testbench_State == TB_RX_SYNCH){ // RX synch sate - Waiting for TX Node to send REPLY synch frame
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d1ef      	bne.n	80015aa <Tb_OnRxDone+0x62>
    	if (BufferRx[0] == 0xbf){
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <Tb_OnRxDone+0xe4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2bbf      	cmp	r3, #191	; 0xbf
 80015d0:	d01e      	beq.n	8001610 <Tb_OnRxDone+0xc8>
    		APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxDone - RX SYNCH ERROR - RECEIVED WRONG KEY VALUE\n\r");
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <Tb_OnRxDone+0xf4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	2100      	movs	r1, #0
 80015d8:	4610      	mov	r0, r2
 80015da:	f006 fa3b 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 80015de:	e7e4      	b.n	80015aa <Tb_OnRxDone+0x62>
    	if (BufferRx[0] == 0xaf){
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <Tb_OnRxDone+0xe4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2baf      	cmp	r3, #175	; 0xaf
 80015e6:	d006      	beq.n	80015f6 <Tb_OnRxDone+0xae>
    		APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxDone - TX SYNCH ERROR - RECEIVED WRONG KEY VALUE\n\r");
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <Tb_OnRxDone+0xf8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	2100      	movs	r1, #0
 80015ee:	4610      	mov	r0, r2
 80015f0:	f006 fa30 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 80015f4:	e7d9      	b.n	80015aa <Tb_OnRxDone+0x62>
    		tx_synch_flag = true; // Received Cycle synch frame
 80015f6:	2001      	movs	r0, #1
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <Tb_OnRxDone+0xfc>)
 80015fa:	7018      	strb	r0, [r3, #0]
    		lora_data_rate = BufferRx[1]; // DR is set by the RX node
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <Tb_OnRxDone+0xe4>)
 80015fe:	785a      	ldrb	r2, [r3, #1]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <Tb_OnRxDone+0x100>)
 8001602:	701a      	strb	r2, [r3, #0]
    		APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxDone - TX SYNCH OK - SENDING REPLY\n\r");
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <Tb_OnRxDone+0x104>)
 8001606:	4602      	mov	r2, r0
 8001608:	2100      	movs	r1, #0
 800160a:	f006 fa23 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 800160e:	e7cc      	b.n	80015aa <Tb_OnRxDone+0x62>
    		synch_retransmit_ctr = 0;
 8001610:	2100      	movs	r1, #0
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <Tb_OnRxDone+0x108>)
 8001614:	6019      	str	r1, [r3, #0]
    		rx_synch_flag = true; // Received REPLY synch frame - reset flag for next synch cycle
 8001616:	2401      	movs	r4, #1
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <Tb_OnRxDone+0x10c>)
 800161a:	701c      	strb	r4, [r3, #0]
    		APP_LOG(TS_ON, VLEVEL_L, "Tb_OnRxDone - RX SYNCH REPLY OK\n\r");
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <Tb_OnRxDone+0x110>)
 800161e:	4622      	mov	r2, r4
 8001620:	4620      	mov	r0, r4
 8001622:	f006 fa17 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
    		Testbench_State = TB_RX_DONE;
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <Tb_OnRxDone+0xf0>)
 8001628:	701c      	strb	r4, [r3, #0]
 800162a:	e7be      	b.n	80015aa <Tb_OnRxDone+0x62>
 800162c:	20000180 	.word	0x20000180
 8001630:	2000039c 	.word	0x2000039c
 8001634:	08008704 	.word	0x08008704
 8001638:	20000000 	.word	0x20000000
 800163c:	080087e8 	.word	0x080087e8
 8001640:	08008788 	.word	0x08008788
 8001644:	20000003 	.word	0x20000003
 8001648:	200003ac 	.word	0x200003ac
 800164c:	0800875c 	.word	0x0800875c
 8001650:	200003b4 	.word	0x200003b4
 8001654:	20000001 	.word	0x20000001
 8001658:	080087c4 	.word	0x080087c4

0800165c <SubghzApp_Init>:
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b085      	sub	sp, #20
  APP_LOG(TS_OFF, VLEVEL_M, "\n---------------\rLORA RADIO TESTBENCH FOR SIGNAL ATTENUATION MEASUREMENT\r");
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <SubghzApp_Init+0xbc>)
 8001662:	2200      	movs	r2, #0
 8001664:	4611      	mov	r1, r2
 8001666:	2002      	movs	r0, #2
 8001668:	f006 f9f4 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "RECEIVER MODE CONFIGURATION\n\r");
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <SubghzApp_Init+0xc0>)
 800166e:	2200      	movs	r2, #0
 8001670:	4611      	mov	r1, r2
 8001672:	2002      	movs	r0, #2
 8001674:	f006 f9ee 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r",
 8001678:	2400      	movs	r4, #0
 800167a:	9402      	str	r4, [sp, #8]
 800167c:	2603      	movs	r6, #3
 800167e:	9601      	str	r6, [sp, #4]
 8001680:	2501      	movs	r5, #1
 8001682:	9500      	str	r5, [sp, #0]
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <SubghzApp_Init+0xc4>)
 8001686:	4622      	mov	r2, r4
 8001688:	4621      	mov	r1, r4
 800168a:	2002      	movs	r0, #2
 800168c:	f006 f9e2 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r",
 8001690:	9402      	str	r4, [sp, #8]
 8001692:	9601      	str	r6, [sp, #4]
 8001694:	9500      	str	r5, [sp, #0]
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <SubghzApp_Init+0xc8>)
 8001698:	4622      	mov	r2, r4
 800169a:	4621      	mov	r1, r4
 800169c:	2002      	movs	r0, #2
 800169e:	f006 f9d9 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerRxSynch, RX_CYCLE_TIME_DR0, UTIL_TIMER_ONESHOT, Tb_OnTimerRxSynch, NULL);
 80016a2:	4f21      	ldr	r7, [pc, #132]	; (8001728 <SubghzApp_Init+0xcc>)
 80016a4:	4e21      	ldr	r6, [pc, #132]	; (800172c <SubghzApp_Init+0xd0>)
 80016a6:	9400      	str	r4, [sp, #0]
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <SubghzApp_Init+0xd4>)
 80016aa:	4622      	mov	r2, r4
 80016ac:	4639      	mov	r1, r7
 80016ae:	4630      	mov	r0, r6
 80016b0:	f006 fc24 	bl	8007efc <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerRxSynch, RX_CYCLE_TIME_DR0);
 80016b4:	4639      	mov	r1, r7
 80016b6:	4630      	mov	r0, r6
 80016b8:	f006 fd1e 	bl	80080f8 <UTIL_TIMER_SetPeriod>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80016bc:	4629      	mov	r1, r5
 80016be:	4620      	mov	r0, r4
 80016c0:	f000 fa62 	bl	8001b88 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80016c4:	4629      	mov	r1, r5
 80016c6:	4628      	mov	r0, r5
 80016c8:	f000 fa5e 	bl	8001b88 <BSP_PB_Init>
  RadioEvents.TxDone = Tb_OnTxDone;
 80016cc:	4819      	ldr	r0, [pc, #100]	; (8001734 <SubghzApp_Init+0xd8>)
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <SubghzApp_Init+0xdc>)
 80016d0:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = Tb_OnRxDone;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <SubghzApp_Init+0xe0>)
 80016d4:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = Tb_OnTxTimeout;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <SubghzApp_Init+0xe4>)
 80016d8:	6043      	str	r3, [r0, #4]
  RadioEvents.RxError = Tb_OnRxError;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <SubghzApp_Init+0xe8>)
 80016dc:	6103      	str	r3, [r0, #16]
  RadioEvents.RxTimeout = Tb_OnRxTimeout;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <SubghzApp_Init+0xec>)
 80016e0:	60c3      	str	r3, [r0, #12]
  Radio.Init(&RadioEvents);
 80016e2:	4e1a      	ldr	r6, [pc, #104]	; (800174c <SubghzApp_Init+0xf0>)
 80016e4:	6833      	ldr	r3, [r6, #0]
 80016e6:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 80016e8:	68f3      	ldr	r3, [r6, #12]
 80016ea:	4819      	ldr	r0, [pc, #100]	; (8001750 <SubghzApp_Init+0xf4>)
 80016ec:	4798      	blx	r3
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 80016ee:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80016f0:	21ff      	movs	r1, #255	; 0xff
 80016f2:	4628      	mov	r0, r5
 80016f4:	4798      	blx	r3
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80016f6:	22ff      	movs	r2, #255	; 0xff
 80016f8:	4621      	mov	r1, r4
 80016fa:	4816      	ldr	r0, [pc, #88]	; (8001754 <SubghzApp_Init+0xf8>)
 80016fc:	f006 feee 	bl	80084dc <memset>
	  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, Tb_Rx_Process);
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <SubghzApp_Init+0xfc>)
 8001702:	4621      	mov	r1, r4
 8001704:	4628      	mov	r0, r5
 8001706:	f006 fb9b 	bl	8007e40 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800170a:	4621      	mov	r1, r4
 800170c:	4628      	mov	r0, r5
 800170e:	f006 facb 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 8001712:	b005      	add	sp, #20
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	08008824 	.word	0x08008824
 800171c:	08008870 	.word	0x08008870
 8001720:	08008890 	.word	0x08008890
 8001724:	080088b0 	.word	0x080088b0
 8001728:	000c4a7c 	.word	0x000c4a7c
 800172c:	200003b8 	.word	0x200003b8
 8001730:	080014b5 	.word	0x080014b5
 8001734:	20000380 	.word	0x20000380
 8001738:	080013f5 	.word	0x080013f5
 800173c:	08001549 	.word	0x08001549
 8001740:	080013cd 	.word	0x080013cd
 8001744:	080013b1 	.word	0x080013b1
 8001748:	08001339 	.word	0x08001339
 800174c:	08008bac 	.word	0x08008bac
 8001750:	33bca100 	.word	0x33bca100
 8001754:	20000280 	.word	0x20000280
 8001758:	08001931 	.word	0x08001931

0800175c <Tb_Config_Radio>:
{
 800175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001760:	b08b      	sub	sp, #44	; 0x2c
 8001762:	4683      	mov	fp, r0
 8001764:	460c      	mov	r4, r1
	if (new_tx_power_dbm < MIN_TX_OUTPUT_POWER || new_tx_power_dbm > MAX_TX_OUTPUT_POWER){
 8001766:	1f83      	subs	r3, r0, #6
 8001768:	2b0a      	cmp	r3, #10
 800176a:	d80b      	bhi.n	8001784 <Tb_Config_Radio+0x28>
	Radio.Sleep();
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <Tb_Config_Radio+0x13c>)
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	4798      	blx	r3
	switch(new_data_rate){
 8001772:	2c06      	cmp	r4, #6
 8001774:	f200 8084 	bhi.w	8001880 <Tb_Config_Radio+0x124>
 8001778:	e8df f004 	tbb	[pc, r4]
 800177c:	76738b0d 	.word	0x76738b0d
 8001780:	7c79      	.short	0x7c79
 8001782:	7f          	.byte	0x7f
 8001783:	00          	.byte	0x00
		APP_LOG(TS_OFF, VLEVEL_M, "LORA CONFIG: POWER CONFIGURATION OUT OF RANGE\n\r");
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <Tb_Config_Radio+0x140>)
 8001786:	2200      	movs	r2, #0
 8001788:	4611      	mov	r1, r2
 800178a:	2002      	movs	r0, #2
 800178c:	f006 f962 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
		new_tx_power_dbm = DEFAULT_TX_OUTPUT_POWER;
 8001790:	f04f 0b0e 	mov.w	fp, #14
 8001794:	e7ea      	b.n	800176c <Tb_Config_Radio+0x10>
	switch(new_data_rate){
 8001796:	4626      	mov	r6, r4
 8001798:	270c      	movs	r7, #12
	  APP_LOG(TS_OFF, VLEVEL_M, "\n---------------\r");
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <Tb_Config_Radio+0x144>)
 800179c:	2200      	movs	r2, #0
 800179e:	4611      	mov	r1, r2
 80017a0:	2002      	movs	r0, #2
 80017a2:	f006 f957 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "RADIO CONFIG\r");
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <Tb_Config_Radio+0x148>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	4611      	mov	r1, r2
 80017ac:	2002      	movs	r0, #2
 80017ae:	f006 f951 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\r");
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <Tb_Config_Radio+0x14c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	4611      	mov	r1, r2
 80017b8:	2002      	movs	r0, #2
 80017ba:	f006 f94b 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "TX_OUTPUT_POWER=%d dBm\r", new_tx_power_dbm);
 80017be:	f8cd b000 	str.w	fp, [sp]
 80017c2:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <Tb_Config_Radio+0x150>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	4611      	mov	r1, r2
 80017c8:	2002      	movs	r0, #2
 80017ca:	f006 f943 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "LORA DATA RATE=%d\r", new_data_rate);
 80017ce:	9400      	str	r4, [sp, #0]
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <Tb_Config_Radio+0x154>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	4611      	mov	r1, r2
 80017d6:	2002      	movs	r0, #2
 80017d8:	f006 f93c 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\r", (1 << lora_bandwidth) * 125);
 80017dc:	237d      	movs	r3, #125	; 0x7d
 80017de:	40b3      	lsls	r3, r6
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <Tb_Config_Radio+0x158>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	4611      	mov	r1, r2
 80017e8:	2002      	movs	r0, #2
 80017ea:	f006 f933 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\r", lora_spreading_factor);
 80017ee:	9700      	str	r7, [sp, #0]
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <Tb_Config_Radio+0x15c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	4611      	mov	r1, r2
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 f92c 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	  Radio.SetTxConfig(MODEM_LORA, new_tx_power_dbm, 0, lora_bandwidth,
 80017fc:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001898 <Tb_Config_Radio+0x13c>
 8001800:	f242 7310 	movw	r3, #10000	; 0x2710
 8001804:	9308      	str	r3, [sp, #32]
 8001806:	2400      	movs	r4, #0
 8001808:	9407      	str	r4, [sp, #28]
 800180a:	9406      	str	r4, [sp, #24]
 800180c:	9405      	str	r4, [sp, #20]
 800180e:	2501      	movs	r5, #1
 8001810:	9504      	str	r5, [sp, #16]
 8001812:	9403      	str	r4, [sp, #12]
 8001814:	f04f 0908 	mov.w	r9, #8
 8001818:	f8cd 9008 	str.w	r9, [sp, #8]
 800181c:	f04f 0802 	mov.w	r8, #2
 8001820:	f8cd 8004 	str.w	r8, [sp, #4]
 8001824:	9700      	str	r7, [sp, #0]
 8001826:	4633      	mov	r3, r6
 8001828:	4622      	mov	r2, r4
 800182a:	fa4f f18b 	sxtb.w	r1, fp
 800182e:	4628      	mov	r0, r5
 8001830:	f8da c01c 	ldr.w	ip, [sl, #28]
 8001834:	47e0      	blx	ip
	  Radio.SetRxConfig(MODEM_LORA, lora_bandwidth, lora_spreading_factor,
 8001836:	f8da a018 	ldr.w	sl, [sl, #24]
 800183a:	9509      	str	r5, [sp, #36]	; 0x24
 800183c:	9408      	str	r4, [sp, #32]
 800183e:	9407      	str	r4, [sp, #28]
 8001840:	9406      	str	r4, [sp, #24]
 8001842:	9505      	str	r5, [sp, #20]
 8001844:	9404      	str	r4, [sp, #16]
 8001846:	9403      	str	r4, [sp, #12]
 8001848:	2305      	movs	r3, #5
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001850:	9400      	str	r4, [sp, #0]
 8001852:	4643      	mov	r3, r8
 8001854:	463a      	mov	r2, r7
 8001856:	4631      	mov	r1, r6
 8001858:	4628      	mov	r0, r5
 800185a:	47d0      	blx	sl
}
 800185c:	b00b      	add	sp, #44	; 0x2c
 800185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lora_bandwidth = 0; // 125 kHz
 8001862:	2600      	movs	r6, #0
			lora_spreading_factor = 10;
 8001864:	270a      	movs	r7, #10
			break;
 8001866:	e798      	b.n	800179a <Tb_Config_Radio+0x3e>
			lora_bandwidth = 0; // 125 kHz
 8001868:	2600      	movs	r6, #0
			lora_spreading_factor = 9;
 800186a:	2709      	movs	r7, #9
			break;
 800186c:	e795      	b.n	800179a <Tb_Config_Radio+0x3e>
			lora_bandwidth = 0; // 125 kHz
 800186e:	2600      	movs	r6, #0
			lora_spreading_factor = 8;
 8001870:	2708      	movs	r7, #8
			break;
 8001872:	e792      	b.n	800179a <Tb_Config_Radio+0x3e>
			lora_bandwidth = 0; // 125 kHz
 8001874:	2600      	movs	r6, #0
			lora_spreading_factor = 7;
 8001876:	2707      	movs	r7, #7
			break;
 8001878:	e78f      	b.n	800179a <Tb_Config_Radio+0x3e>
			lora_bandwidth = 1; // 250 kHz
 800187a:	2601      	movs	r6, #1
			lora_spreading_factor = 7;
 800187c:	2707      	movs	r7, #7
			break;
 800187e:	e78c      	b.n	800179a <Tb_Config_Radio+0x3e>
			APP_LOG(TS_OFF, VLEVEL_M, "LORA CONFIG: DATA RATE OUT OF RANGE\n\r");
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <Tb_Config_Radio+0x160>)
 8001882:	2200      	movs	r2, #0
 8001884:	4611      	mov	r1, r2
 8001886:	2002      	movs	r0, #2
 8001888:	f006 f8e4 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	int lora_bandwidth = 0; // 125 kHz
 800188c:	2600      	movs	r6, #0
	int lora_spreading_factor = 12;
 800188e:	270c      	movs	r7, #12
		    break;
 8001890:	e783      	b.n	800179a <Tb_Config_Radio+0x3e>
			lora_bandwidth = 0; // 125 kHz
 8001892:	2600      	movs	r6, #0
			lora_spreading_factor = 11;
 8001894:	270b      	movs	r7, #11
 8001896:	e780      	b.n	800179a <Tb_Config_Radio+0x3e>
 8001898:	08008bac 	.word	0x08008bac
 800189c:	080088d0 	.word	0x080088d0
 80018a0:	08008928 	.word	0x08008928
 80018a4:	0800893c 	.word	0x0800893c
 80018a8:	0800894c 	.word	0x0800894c
 80018ac:	08008960 	.word	0x08008960
 80018b0:	08008978 	.word	0x08008978
 80018b4:	0800898c 	.word	0x0800898c
 80018b8:	0800899c 	.word	0x0800899c
 80018bc:	08008900 	.word	0x08008900

080018c0 <Tb_Set_Synch_Timer>:
void Tb_Set_Synch_Timer(uint8_t cycle_lora_data_rate){
 80018c0:	b510      	push	{r4, lr}
	switch(cycle_lora_data_rate){
 80018c2:	2806      	cmp	r0, #6
 80018c4:	d818      	bhi.n	80018f8 <Tb_Set_Synch_Timer+0x38>
 80018c6:	e8df f000 	tbb	[pc, r0]
 80018ca:	1f04      	.short	0x1f04
 80018cc:	13110f0d 	.word	0x13110f0d
 80018d0:	15          	.byte	0x15
 80018d1:	00          	.byte	0x00
 80018d2:	490e      	ldr	r1, [pc, #56]	; (800190c <Tb_Set_Synch_Timer+0x4c>)
	UTIL_TIMER_SetPeriod(&timerRxSynch, rx_synch_timer_value_ms);
 80018d4:	4c0e      	ldr	r4, [pc, #56]	; (8001910 <Tb_Set_Synch_Timer+0x50>)
 80018d6:	4620      	mov	r0, r4
 80018d8:	f006 fc0e 	bl	80080f8 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start(&timerRxSynch);
 80018dc:	4620      	mov	r0, r4
 80018de:	f006 fbc5 	bl	800806c <UTIL_TIMER_Start>
}
 80018e2:	bd10      	pop	{r4, pc}
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR2;
 80018e4:	490b      	ldr	r1, [pc, #44]	; (8001914 <Tb_Set_Synch_Timer+0x54>)
			break;
 80018e6:	e7f5      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR3;
 80018e8:	490b      	ldr	r1, [pc, #44]	; (8001918 <Tb_Set_Synch_Timer+0x58>)
			break;
 80018ea:	e7f3      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR4;
 80018ec:	490b      	ldr	r1, [pc, #44]	; (800191c <Tb_Set_Synch_Timer+0x5c>)
			break;
 80018ee:	e7f1      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR5;
 80018f0:	490b      	ldr	r1, [pc, #44]	; (8001920 <Tb_Set_Synch_Timer+0x60>)
			break;
 80018f2:	e7ef      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR6;
 80018f4:	490b      	ldr	r1, [pc, #44]	; (8001924 <Tb_Set_Synch_Timer+0x64>)
			break;
 80018f6:	e7ed      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			APP_LOG(TS_OFF, VLEVEL_M, "RX SYNCH: DATA RATE OUT OF RANGE\n\r");
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <Tb_Set_Synch_Timer+0x68>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	4611      	mov	r1, r2
 80018fe:	2002      	movs	r0, #2
 8001900:	f006 f8a8 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
	uint32_t rx_synch_timer_value_ms = RX_CYCLE_TIME_DR0;
 8001904:	4901      	ldr	r1, [pc, #4]	; (800190c <Tb_Set_Synch_Timer+0x4c>)
			break;
 8001906:	e7e5      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
			rx_synch_timer_value_ms = RX_CYCLE_TIME_DR1;
 8001908:	4908      	ldr	r1, [pc, #32]	; (800192c <Tb_Set_Synch_Timer+0x6c>)
 800190a:	e7e3      	b.n	80018d4 <Tb_Set_Synch_Timer+0x14>
 800190c:	000c4a7c 	.word	0x000c4a7c
 8001910:	200003b8 	.word	0x200003b8
 8001914:	0003ff70 	.word	0x0003ff70
 8001918:	00029bf8 	.word	0x00029bf8
 800191c:	000203a0 	.word	0x000203a0
 8001920:	0001abbc 	.word	0x0001abbc
 8001924:	00017318 	.word	0x00017318
 8001928:	080089a8 	.word	0x080089a8
 800192c:	0006c278 	.word	0x0006c278

08001930 <Tb_Rx_Process>:
static void Tb_Rx_Process(void){
 8001930:	b530      	push	{r4, r5, lr}
 8001932:	b083      	sub	sp, #12
	switch (Testbench_State){
 8001934:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <Tb_Rx_Process+0x1b4>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d833      	bhi.n	80019a4 <Tb_Rx_Process+0x74>
 800193c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001940:	007c0071 	.word	0x007c0071
 8001944:	00320034 	.word	0x00320034
 8001948:	00320032 	.word	0x00320032
 800194c:	000a0032 	.word	0x000a0032
 8001950:	00c400b0 	.word	0x00c400b0
			Radio.Sleep();
 8001954:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	4798      	blx	r3
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); // GREEN Led
 800195a:	4c64      	ldr	r4, [pc, #400]	; (8001aec <Tb_Rx_Process+0x1bc>)
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001962:	4620      	mov	r0, r4
 8001964:	f000 febc 	bl	80026e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // RED Led
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800196e:	4620      	mov	r0, r4
 8001970:	f000 feb6 	bl	80026e0 <HAL_GPIO_WritePin>
			while(button1_event == 0){
 8001974:	e000      	b.n	8001978 <Tb_Rx_Process+0x48>
				__NOP();
 8001976:	bf00      	nop
			while(button1_event == 0){
 8001978:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <Tb_Rx_Process+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0fa      	beq.n	8001976 <Tb_Rx_Process+0x46>
			button1_event = 0;
 8001980:	2400      	movs	r4, #0
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <Tb_Rx_Process+0x1c0>)
 8001984:	601c      	str	r4, [r3, #0]
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); // RED Led
 8001986:	4622      	mov	r2, r4
 8001988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198c:	4857      	ldr	r0, [pc, #348]	; (8001aec <Tb_Rx_Process+0x1bc>)
 800198e:	f000 fea7 	bl	80026e0 <HAL_GPIO_WritePin>
			rx_synch_flag = false;
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <Tb_Rx_Process+0x1c4>)
 8001994:	701c      	strb	r4, [r3, #0]
			Testbench_State = TB_RX_SYNCH;
 8001996:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <Tb_Rx_Process+0x1b4>)
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800199c:	4621      	mov	r1, r4
 800199e:	2001      	movs	r0, #1
 80019a0:	f006 f982 	bl	8007ca8 <UTIL_SEQ_SetTask>
}
 80019a4:	b003      	add	sp, #12
 80019a6:	bd30      	pop	{r4, r5, pc}
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); // GREEN Led
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ae:	484f      	ldr	r0, [pc, #316]	; (8001aec <Tb_Rx_Process+0x1bc>)
 80019b0:	f000 fe96 	bl	80026e0 <HAL_GPIO_WritePin>
			if (rx_synch_flag == false){
 80019b4:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <Tb_Rx_Process+0x1c4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	bb23      	cbnz	r3, 8001a04 <Tb_Rx_Process+0xd4>
				Radio.Sleep();
 80019ba:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	4798      	blx	r3
				memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE); // clear buffer
 80019c0:	4c4d      	ldr	r4, [pc, #308]	; (8001af8 <Tb_Rx_Process+0x1c8>)
 80019c2:	22ff      	movs	r2, #255	; 0xff
 80019c4:	2100      	movs	r1, #0
 80019c6:	4620      	mov	r0, r4
 80019c8:	f006 fd88 	bl	80084dc <memset>
				BufferTx[0] = 0xaf; // key for synch frame
 80019cc:	23af      	movs	r3, #175	; 0xaf
 80019ce:	7023      	strb	r3, [r4, #0]
				BufferTx[1] = lora_data_rate; // cycle DR
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <Tb_Rx_Process+0x1cc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	7063      	strb	r3, [r4, #1]
				if (synch_retransmit_ctr == 0){
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <Tb_Rx_Process+0x1d0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b173      	cbz	r3, 80019fa <Tb_Rx_Process+0xca>
				HAL_Delay(50);
 80019dc:	2032      	movs	r0, #50	; 0x32
 80019de:	f7ff f97f 	bl	8000ce0 <HAL_Delay>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // BLUE Led
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e8:	4840      	ldr	r0, [pc, #256]	; (8001aec <Tb_Rx_Process+0x1bc>)
 80019ea:	f000 fe79 	bl	80026e0 <HAL_GPIO_WritePin>
				Radio.Send(BufferTx, TB_PAYLOAD_LEN); // send synch frame - callback set FSM to TB_RX
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2110      	movs	r1, #16
 80019f4:	4840      	ldr	r0, [pc, #256]	; (8001af8 <Tb_Rx_Process+0x1c8>)
 80019f6:	4798      	blx	r3
 80019f8:	e7d4      	b.n	80019a4 <Tb_Rx_Process+0x74>
					Tb_Config_Radio(DEFAULT_TX_OUTPUT_POWER, DEFAULT_DATA_RATE);
 80019fa:	2100      	movs	r1, #0
 80019fc:	200e      	movs	r0, #14
 80019fe:	f7ff fead 	bl	800175c <Tb_Config_Radio>
 8001a02:	e7eb      	b.n	80019dc <Tb_Rx_Process+0xac>
				APP_LOG(TS_ON, VLEVEL_L, "RX SYNCH WAIT FOR REPLY - Cycle DR %d\n\r", lora_data_rate);
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <Tb_Rx_Process+0x1cc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <Tb_Rx_Process+0x1d4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4610      	mov	r0, r2
 8001a12:	f006 f81f 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
				Radio.Rx(RX_TIMEOUT_VALUE);
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a1e:	4798      	blx	r3
 8001a20:	e7c0      	b.n	80019a4 <Tb_Rx_Process+0x74>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); // GREEN Led
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a28:	4830      	ldr	r0, [pc, #192]	; (8001aec <Tb_Rx_Process+0x1bc>)
 8001a2a:	f000 fe59 	bl	80026e0 <HAL_GPIO_WritePin>
			Radio.Rx(0); // Continuous Mode
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2000      	movs	r0, #0
 8001a34:	4798      	blx	r3
			break;
 8001a36:	e7b5      	b.n	80019a4 <Tb_Rx_Process+0x74>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); // GREEN Led
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3e:	482b      	ldr	r0, [pc, #172]	; (8001aec <Tb_Rx_Process+0x1bc>)
 8001a40:	f000 fe4e 	bl	80026e0 <HAL_GPIO_WritePin>
			Radio.Sleep();
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <Tb_Rx_Process+0x1b8>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4798      	blx	r3
			if (rx_synch_flag == true){ // received REPLY synch frame - Synch is OK - Configure the Radio for the Cycle test
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <Tb_Rx_Process+0x1c4>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b973      	cbnz	r3, 8001a6e <Tb_Rx_Process+0x13e>
				n_tx_ctr++; // increment received packet count - reset is done in the synch timer callback
 8001a50:	4a2d      	ldr	r2, [pc, #180]	; (8001b08 <Tb_Rx_Process+0x1d8>)
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
			Testbench_State = TB_RX; // resume RX
 8001a58:	2400      	movs	r4, #0
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <Tb_Rx_Process+0x1b4>)
 8001a5c:	701c      	strb	r4, [r3, #0]
			HAL_Delay(50);
 8001a5e:	2032      	movs	r0, #50	; 0x32
 8001a60:	f7ff f93e 	bl	8000ce0 <HAL_Delay>
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8001a64:	4621      	mov	r1, r4
 8001a66:	2001      	movs	r0, #1
 8001a68:	f006 f91e 	bl	8007ca8 <UTIL_SEQ_SetTask>
			break;
 8001a6c:	e79a      	b.n	80019a4 <Tb_Rx_Process+0x74>
				rx_synch_flag = false; // reset flag for next cycle synch
 8001a6e:	2500      	movs	r5, #0
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <Tb_Rx_Process+0x1c4>)
 8001a72:	701d      	strb	r5, [r3, #0]
				Tb_Config_Radio(tx_power_dbm, lora_data_rate);
 8001a74:	4c21      	ldr	r4, [pc, #132]	; (8001afc <Tb_Rx_Process+0x1cc>)
 8001a76:	7821      	ldrb	r1, [r4, #0]
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <Tb_Rx_Process+0x1dc>)
 8001a7a:	7818      	ldrb	r0, [r3, #0]
 8001a7c:	f7ff fe6e 	bl	800175c <Tb_Config_Radio>
				Tb_Set_Synch_Timer(lora_data_rate); // Configure the Timer with the Cycle DR Time
 8001a80:	7820      	ldrb	r0, [r4, #0]
 8001a82:	f7ff ff1d 	bl	80018c0 <Tb_Set_Synch_Timer>
				cycle_start_timestamp = HAL_GetTick();
 8001a86:	f7ff f91f 	bl	8000cc8 <HAL_GetTick>
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <Tb_Rx_Process+0x1e0>)
 8001a8c:	6018      	str	r0, [r3, #0]
				APP_LOG(TS_ON, VLEVEL_L, "RX SYNCH OK! - Cycle START DR %d\n\r", lora_data_rate);
 8001a8e:	7823      	ldrb	r3, [r4, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <Tb_Rx_Process+0x1e4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	4629      	mov	r1, r5
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f005 ffdb 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 8001a9e:	e7db      	b.n	8001a58 <Tb_Rx_Process+0x128>
			APP_LOG(TS_ON, VLEVEL_L, "TEST END - OK\n\r");
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <Tb_Rx_Process+0x1e8>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f005 ffd4 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // BLUE Led
 8001aac:	4c0f      	ldr	r4, [pc, #60]	; (8001aec <Tb_Rx_Process+0x1bc>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f000 fe13 	bl	80026e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // RED Led
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f000 fe0d 	bl	80026e0 <HAL_GPIO_WritePin>
			break;
 8001ac6:	e76d      	b.n	80019a4 <Tb_Rx_Process+0x74>
			APP_LOG(TS_ON, VLEVEL_L, "TEST ERROR\n\r");
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <Tb_Rx_Process+0x1ec>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	2100      	movs	r1, #0
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f005 ffc0 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); // RED Led
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ada:	4804      	ldr	r0, [pc, #16]	; (8001aec <Tb_Rx_Process+0x1bc>)
 8001adc:	f000 fe00 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8001ae0:	e760      	b.n	80019a4 <Tb_Rx_Process+0x74>
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	08008bac 	.word	0x08008bac
 8001aec:	48000400 	.word	0x48000400
 8001af0:	200003a0 	.word	0x200003a0
 8001af4:	20000001 	.word	0x20000001
 8001af8:	20000280 	.word	0x20000280
 8001afc:	200003ac 	.word	0x200003ac
 8001b00:	200003b4 	.word	0x200003b4
 8001b04:	080089cc 	.word	0x080089cc
 8001b08:	200003b0 	.word	0x200003b0
 8001b0c:	20000002 	.word	0x20000002
 8001b10:	200003a8 	.word	0x200003a8
 8001b14:	080089f4 	.word	0x080089f4
 8001b18:	08008a18 	.word	0x08008a18
 8001b1c:	08008a28 	.word	0x08008a28

08001b20 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == BUTTON_SW1_PIN && Testbench_State == TB_WAIT_USER_TRIG)
 8001b20:	2801      	cmp	r0, #1
 8001b22:	d002      	beq.n	8001b2a <HAL_GPIO_EXTI_Callback+0xa>
  {
    button1_event = 1;
  }
  else if (GPIO_Pin == BUTTON_SW2_PIN && Testbench_State == TB_TX_DONE)
 8001b24:	2802      	cmp	r0, #2
 8001b26:	d008      	beq.n	8001b3a <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  button2_event = 1;
  }

}
 8001b28:	4770      	bx	lr
  if (GPIO_Pin == BUTTON_SW1_PIN && Testbench_State == TB_WAIT_USER_TRIG)
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b07      	cmp	r3, #7
 8001b30:	d1f8      	bne.n	8001b24 <HAL_GPIO_EXTI_Callback+0x4>
    button1_event = 1;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4770      	bx	lr
  else if (GPIO_Pin == BUTTON_SW2_PIN && Testbench_State == TB_TX_DONE)
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d1f2      	bne.n	8001b28 <HAL_GPIO_EXTI_Callback+0x8>
	  button2_event = 1;
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x34>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	e7ee      	b.n	8001b28 <HAL_GPIO_EXTI_Callback+0x8>
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	200003a0 	.word	0x200003a0
 8001b54:	200003a4 	.word	0x200003a4

08001b58 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001b58:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001b5a:	f000 f89d 	bl	8001c98 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001b5e:	bd08      	pop	{r3, pc}

08001b60 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001b60:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001b62:	f000 f8db 	bl	8001d1c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001b66:	bd08      	pop	{r3, pc}

08001b68 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001b68:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001b6a:	f000 f925 	bl	8001db8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001b6e:	bd08      	pop	{r3, pc}

08001b70 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001b70:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001b72:	f000 f923 	bl	8001dbc <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001b76:	bd08      	pop	{r3, pc}

08001b78 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001b78:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001b7a:	f000 f921 	bl	8001dc0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001b7e:	bd08      	pop	{r3, pc}

08001b80 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001b80:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001b82:	f000 f91f 	bl	8001dc4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001b86:	bd08      	pop	{r3, pc}

08001b88 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b88:	b530      	push	{r4, r5, lr}
 8001b8a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9303      	str	r3, [sp, #12]
 8001b90:	9304      	str	r3, [sp, #16]
 8001b92:	9305      	str	r3, [sp, #20]
 8001b94:	9306      	str	r3, [sp, #24]
 8001b96:	9307      	str	r3, [sp, #28]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b98:	4604      	mov	r4, r0
 8001b9a:	b9e0      	cbnz	r0, 8001bd6 <BSP_PB_Init+0x4e>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001bb0:	9b00      	ldr	r3, [sp, #0]
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <BSP_PB_Init+0xd4>)
 8001bb4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001bb8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9306      	str	r3, [sp, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001bc2:	bb21      	cbnz	r1, 8001c0e <BSP_PB_Init+0x86>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001bc4:	a903      	add	r1, sp, #12
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <BSP_PB_Init+0xd8>)
 8001bc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001bcc:	f000 fc38 	bl	8002440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }

  return BSP_ERROR_NONE;
}
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	b009      	add	sp, #36	; 0x24
 8001bd4:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001bd6:	2801      	cmp	r0, #1
 8001bd8:	d00d      	beq.n	8001bf6 <BSP_PB_Init+0x6e>
 8001bda:	2802      	cmp	r0, #2
 8001bdc:	d1e9      	bne.n	8001bb2 <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be4:	f042 0204 	orr.w	r2, r2, #4
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001bf2:	9b02      	ldr	r3, [sp, #8]
}
 8001bf4:	e7dd      	b.n	8001bb2 <BSP_PB_Init+0x2a>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c0a:	9b01      	ldr	r3, [sp, #4]
}
 8001c0c:	e7d1      	b.n	8001bb2 <BSP_PB_Init+0x2a>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001c0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c12:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c14:	a903      	add	r1, sp, #12
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <BSP_PB_Init+0xd8>)
 8001c18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001c1c:	f000 fc10 	bl	8002440 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8001c20:	4d10      	ldr	r5, [pc, #64]	; (8001c64 <BSP_PB_Init+0xdc>)
 8001c22:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <BSP_PB_Init+0xe0>)
 8001c28:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f000 fc01 	bl	8002434 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <BSP_PB_Init+0xe4>)
 8001c34:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f000 fbf3 	bl	8002426 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <BSP_PB_Init+0xe8>)
 8001c42:	571d      	ldrsb	r5, [r3, r4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <BSP_PB_Init+0xec>)
 8001c48:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f000 f90d 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 f942 	bl	8001edc <HAL_NVIC_EnableIRQ>
 8001c58:	e7ba      	b.n	8001bd0 <BSP_PB_Init+0x48>
 8001c5a:	bf00      	nop
 8001c5c:	08008a3c 	.word	0x08008a3c
 8001c60:	08008a44 	.word	0x08008a44
 8001c64:	200003d4 	.word	0x200003d4
 8001c68:	08008a5c 	.word	0x08008a5c
 8001c6c:	08008a50 	.word	0x08008a50
 8001c70:	08008a38 	.word	0x08008a38
 8001c74:	08008a68 	.word	0x08008a68

08001c78 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c78:	4770      	bx	lr

08001c7a <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8001c7a:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW3);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fffb 	bl	8001c78 <BSP_PB_Callback>
}
 8001c82:	bd08      	pop	{r3, pc}

08001c84 <BUTTON_SW2_EXTI_Callback>:
{
 8001c84:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW2);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff fff6 	bl	8001c78 <BSP_PB_Callback>
}
 8001c8c:	bd08      	pop	{r3, pc}

08001c8e <BUTTON_SW1_EXTI_Callback>:
{
 8001c8e:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_SW1);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff fff1 	bl	8001c78 <BSP_PB_Callback>
}
 8001c96:	bd08      	pop	{r3, pc}

08001c98 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c9c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	9401      	str	r4, [sp, #4]
 8001ca2:	9402      	str	r4, [sp, #8]
 8001ca4:	9403      	str	r4, [sp, #12]
 8001ca6:	9404      	str	r4, [sp, #16]
 8001ca8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb0:	f042 0204 	orr.w	r2, r2, #4
 8001cb4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001cbe:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001cc0:	2710      	movs	r7, #16
 8001cc2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001ccc:	4d12      	ldr	r5, [pc, #72]	; (8001d18 <BSP_RADIO_Init+0x80>)
 8001cce:	a901      	add	r1, sp, #4
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f000 fbb5 	bl	8002440 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001cd6:	f04f 0820 	mov.w	r8, #32
 8001cda:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001cde:	a901      	add	r1, sp, #4
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	f000 fbad 	bl	8002440 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001ce6:	2608      	movs	r6, #8
 8001ce8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001cea:	a901      	add	r1, sp, #4
 8001cec:	4628      	mov	r0, r5
 8001cee:	f000 fba7 	bl	8002440 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	4641      	mov	r1, r8
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f000 fcf2 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	4639      	mov	r1, r7
 8001d00:	4628      	mov	r0, r5
 8001d02:	f000 fced 	bl	80026e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001d06:	4622      	mov	r2, r4
 8001d08:	4631      	mov	r1, r6
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f000 fce8 	bl	80026e0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8001d10:	4620      	mov	r0, r4
 8001d12:	b006      	add	sp, #24
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d18:	48000800 	.word	0x48000800

08001d1c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001d1c:	b510      	push	{r4, lr}
  switch (Config)
 8001d1e:	2803      	cmp	r0, #3
 8001d20:	d813      	bhi.n	8001d4a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001d22:	e8df f000 	tbb	[pc, r0]
 8001d26:	1402      	.short	0x1402
 8001d28:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001d2a:	4c22      	ldr	r4, [pc, #136]	; (8001db4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2108      	movs	r1, #8
 8001d30:	4620      	mov	r0, r4
 8001d32:	f000 fcd5 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f000 fcd0 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2120      	movs	r1, #32
 8001d44:	4620      	mov	r0, r4
 8001d46:	f000 fccb 	bl	80026e0 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001d4e:	4c19      	ldr	r4, [pc, #100]	; (8001db4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	2108      	movs	r1, #8
 8001d54:	4620      	mov	r0, r4
 8001d56:	f000 fcc3 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f000 fcbe 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001d64:	2200      	movs	r2, #0
 8001d66:	2120      	movs	r1, #32
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 fcb9 	bl	80026e0 <HAL_GPIO_WritePin>
      break;
 8001d6e:	e7ec      	b.n	8001d4a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001d70:	4c10      	ldr	r4, [pc, #64]	; (8001db4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	4620      	mov	r0, r4
 8001d78:	f000 fcb2 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4620      	mov	r0, r4
 8001d82:	f000 fcad 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001d86:	2201      	movs	r2, #1
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f000 fca8 	bl	80026e0 <HAL_GPIO_WritePin>
      break;
 8001d90:	e7db      	b.n	8001d4a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001d92:	4c08      	ldr	r4, [pc, #32]	; (8001db4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	2108      	movs	r1, #8
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f000 fca1 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2110      	movs	r1, #16
 8001da2:	4620      	mov	r0, r4
 8001da4:	f000 fc9c 	bl	80026e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001da8:	2201      	movs	r2, #1
 8001daa:	2120      	movs	r1, #32
 8001dac:	4620      	mov	r0, r4
 8001dae:	f000 fc97 	bl	80026e0 <HAL_GPIO_WritePin>
      break;
 8001db2:	e7ca      	b.n	8001d4a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8001db4:	48000800 	.word	0x48000800

08001db8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8001db8:	2000      	movs	r0, #0
 8001dba:	4770      	bx	lr

08001dbc <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	4770      	bx	lr

08001dc0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	4770      	bx	lr

08001dc4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001dc4:	b908      	cbnz	r0, 8001dca <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001dca:	2016      	movs	r0, #22
  }

  return ret;
}
 8001dcc:	4770      	bx	lr

08001dce <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f000 f838 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dd8:	f000 fe20 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_Init+0x28>)
 8001dde:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de0:	200f      	movs	r0, #15
 8001de2:	f7fe ff6f 	bl	8000cc4 <HAL_InitTick>
 8001de6:	b110      	cbz	r0, 8001dee <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001de8:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8001dea:	4620      	mov	r0, r4
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	4604      	mov	r4, r0
    HAL_MspInit();
 8001df0:	f7fe feaa 	bl	8000b48 <HAL_MspInit>
 8001df4:	e7f9      	b.n	8001dea <HAL_Init+0x1a>
 8001df6:	bf00      	nop
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001dfc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001e00:	6913      	ldr	r3, [r2, #16]
 8001e02:	f023 0302 	bic.w	r3, r3, #2
 8001e06:	6113      	str	r3, [r2, #16]
}
 8001e08:	4770      	bx	lr

08001e0a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001e0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001e0e:	6913      	ldr	r3, [r2, #16]
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6113      	str	r3, [r2, #16]
}
 8001e16:	4770      	bx	lr

08001e18 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001e18:	4a02      	ldr	r2, [pc, #8]	; (8001e24 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001e1a:	6853      	ldr	r3, [r2, #4]
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8001e22:	4770      	bx	lr
 8001e24:	e0042000 	.word	0xe0042000

08001e28 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001e2a:	6853      	ldr	r3, [r2, #4]
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8001e32:	4770      	bx	lr
 8001e34:	e0042000 	.word	0xe0042000

08001e38 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001e38:	4a02      	ldr	r2, [pc, #8]	; (8001e44 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8001e3a:	6853      	ldr	r3, [r2, #4]
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8001e42:	4770      	bx	lr
 8001e44:	e0042000 	.word	0xe0042000

08001e48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	0200      	lsls	r0, r0, #8
 8001e56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e64:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_NVIC_SetPriority+0x68>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e76:	f1c3 0c07 	rsb	ip, r3, #7
 8001e7a:	f1bc 0f04 	cmp.w	ip, #4
 8001e7e:	bf28      	it	cs
 8001e80:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e84:	f103 0e04 	add.w	lr, r3, #4
 8001e88:	f1be 0f06 	cmp.w	lr, #6
 8001e8c:	d918      	bls.n	8001ec0 <HAL_NVIC_SetPriority+0x54>
 8001e8e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 3eff 	mov.w	lr, #4294967295
 8001e94:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001e98:	ea21 010c 	bic.w	r1, r1, ip
 8001e9c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9e:	fa0e f303 	lsl.w	r3, lr, r3
 8001ea2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	db0b      	blt.n	8001ec4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	0109      	lsls	r1, r1, #4
 8001eae:	b2c9      	uxtb	r1, r1
 8001eb0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001eb4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001eb8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ebc:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e7e5      	b.n	8001e90 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	f000 000f 	and.w	r0, r0, #15
 8001ec8:	0109      	lsls	r1, r1, #4
 8001eca:	b2c9      	uxtb	r1, r1
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_NVIC_SetPriority+0x6c>)
 8001ece:	5419      	strb	r1, [r3, r0]
 8001ed0:	e7f4      	b.n	8001ebc <HAL_NVIC_SetPriority+0x50>
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	e000ed14 	.word	0xe000ed14

08001edc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001edc:	2800      	cmp	r0, #0
 8001ede:	db07      	blt.n	8001ef0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee0:	f000 021f 	and.w	r2, r0, #31
 8001ee4:	0940      	lsrs	r0, r0, #5
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	4a02      	ldr	r2, [pc, #8]	; (8001ef4 <HAL_NVIC_EnableIRQ+0x18>)
 8001eec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	db0c      	blt.n	8001f16 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efc:	f000 021f 	and.w	r2, r0, #31
 8001f00:	0940      	lsrs	r0, r0, #5
 8001f02:	2301      	movs	r3, #1
 8001f04:	4093      	lsls	r3, r2
 8001f06:	3020      	adds	r0, #32
 8001f08:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <HAL_NVIC_DisableIRQ+0x20>)
 8001f0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f12:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f1e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001f20:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8001f24:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001f28:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001f2a:	b124      	cbz	r4, 8001f36 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001f2e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8001f32:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f36:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f38:	f004 0c1c 	and.w	ip, r4, #28
 8001f3c:	2401      	movs	r4, #1
 8001f3e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f42:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8001f46:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f4a:	6804      	ldr	r4, [r0, #0]
 8001f4c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f4e:	6883      	ldr	r3, [r0, #8]
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d005      	beq.n	8001f60 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001f54:	6803      	ldr	r3, [r0, #0]
 8001f56:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001f58:	6803      	ldr	r3, [r0, #0]
 8001f5a:	60da      	str	r2, [r3, #12]
  }
}
 8001f5c:	bc10      	pop	{r4}
 8001f5e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001f60:	6803      	ldr	r3, [r0, #0]
 8001f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f64:	6803      	ldr	r3, [r0, #0]
 8001f66:	60d9      	str	r1, [r3, #12]
 8001f68:	e7f8      	b.n	8001f5c <DMA_SetConfig+0x40>
	...

08001f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f6c:	6803      	ldr	r3, [r0, #0]
 8001f6e:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d816      	bhi.n	8001fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001f74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001f76:	f022 0203 	bic.w	r2, r2, #3
 8001f7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001f7e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8001f82:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3b08      	subs	r3, #8
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8001f92:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2201      	movs	r2, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001fa0:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001fa2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001fa4:	f022 0103 	bic.w	r1, r2, #3
 8001fa8:	4a08      	ldr	r2, [pc, #32]	; (8001fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8001faa:	440a      	add	r2, r1
 8001fac:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	3307      	adds	r3, #7
 8001fbc:	e7e8      	b.n	8001f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8001fbe:	bf00      	nop
 8001fc0:	40020407 	.word	0x40020407
 8001fc4:	cccccccd 	.word	0xcccccccd
 8001fc8:	40020880 	.word	0x40020880
 8001fcc:	4002081c 	.word	0x4002081c

08001fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fd0:	6843      	ldr	r3, [r0, #4]
 8001fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001fd8:	441a      	add	r2, r3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8001fe0:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2201      	movs	r2, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	1000823f 	.word	0x1000823f
 8001ff8:	40020940 	.word	0x40020940

08001ffc <HAL_DMA_Init>:
  if (hdma == NULL)
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d060      	beq.n	80020c2 <HAL_DMA_Init+0xc6>
{
 8002000:	b510      	push	{r4, lr}
 8002002:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002004:	6802      	ldr	r2, [r0, #0]
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_DMA_Init+0xcc>)
 8002008:	429a      	cmp	r2, r3
 800200a:	d842      	bhi.n	8002092 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_DMA_Init+0xd0>)
 800200e:	4413      	add	r3, r2
 8002010:	492f      	ldr	r1, [pc, #188]	; (80020d0 <HAL_DMA_Init+0xd4>)
 8002012:	fba1 1303 	umull	r1, r3, r1, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_DMA_Init+0xd8>)
 800201e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002026:	6813      	ldr	r3, [r2, #0]
 8002028:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002030:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002032:	6821      	ldr	r1, [r4, #0]
 8002034:	680a      	ldr	r2, [r1, #0]
 8002036:	68a3      	ldr	r3, [r4, #8]
 8002038:	68e0      	ldr	r0, [r4, #12]
 800203a:	4303      	orrs	r3, r0
 800203c:	6920      	ldr	r0, [r4, #16]
 800203e:	4303      	orrs	r3, r0
 8002040:	6960      	ldr	r0, [r4, #20]
 8002042:	4303      	orrs	r3, r0
 8002044:	69a0      	ldr	r0, [r4, #24]
 8002046:	4303      	orrs	r3, r0
 8002048:	69e0      	ldr	r0, [r4, #28]
 800204a:	4303      	orrs	r3, r0
 800204c:	6a20      	ldr	r0, [r4, #32]
 800204e:	4303      	orrs	r3, r0
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ff89 	bl	8001f6c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800205a:	68a3      	ldr	r3, [r4, #8]
 800205c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002060:	d022      	beq.n	80020a8 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002062:	6863      	ldr	r3, [r4, #4]
 8002064:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800206a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800206c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800206e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002070:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	3b01      	subs	r3, #1
 8002076:	2b03      	cmp	r3, #3
 8002078:	d919      	bls.n	80020ae <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800207e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002080:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	2000      	movs	r0, #0
 8002084:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002086:	2301      	movs	r3, #1
 8002088:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800208c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002090:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_DMA_Init+0xdc>)
 8002094:	4413      	add	r3, r2
 8002096:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_DMA_Init+0xd4>)
 8002098:	fba1 1303 	umull	r1, r3, r1, r3
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_DMA_Init+0xe0>)
 80020a4:	6403      	str	r3, [r0, #64]	; 0x40
 80020a6:	e7bb      	b.n	8002020 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020a8:	2300      	movs	r3, #0
 80020aa:	6063      	str	r3, [r4, #4]
 80020ac:	e7d9      	b.n	8002062 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7ff ff8e 	bl	8001fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	e7df      	b.n	8002082 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40020407 	.word	0x40020407
 80020cc:	bffdfff8 	.word	0xbffdfff8
 80020d0:	cccccccd 	.word	0xcccccccd
 80020d4:	40020000 	.word	0x40020000
 80020d8:	bffdfbf8 	.word	0xbffdfbf8
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d04b      	beq.n	800217c <HAL_DMA_DeInit+0x9c>
{
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020f2:	6802      	ldr	r2, [r0, #0]
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_DMA_DeInit+0xa0>)
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d82c      	bhi.n	8002154 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_DMA_DeInit+0xa4>)
 80020fc:	4413      	add	r3, r2
 80020fe:	4922      	ldr	r1, [pc, #136]	; (8002188 <HAL_DMA_DeInit+0xa8>)
 8002100:	fba1 1303 	umull	r1, r3, r1, r3
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_DMA_DeInit+0xac>)
 800210c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800210e:	2500      	movs	r5, #0
 8002110:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002112:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002114:	f003 021c 	and.w	r2, r3, #28
 8002118:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800211a:	2301      	movs	r3, #1
 800211c:	4093      	lsls	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff ff23 	bl	8001f6c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8002126:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002128:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800212c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800212e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002130:	6863      	ldr	r3, [r4, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	2b03      	cmp	r3, #3
 8002136:	d918      	bls.n	800216a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8002138:	2000      	movs	r0, #0
 800213a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800213c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800213e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002140:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002142:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002144:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002146:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002148:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800214a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800214e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002152:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_DMA_DeInit+0xb0>)
 8002156:	4413      	add	r3, r2
 8002158:	490b      	ldr	r1, [pc, #44]	; (8002188 <HAL_DMA_DeInit+0xa8>)
 800215a:	fba1 1303 	umull	r1, r3, r1, r3
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_DMA_DeInit+0xb4>)
 8002166:	6403      	str	r3, [r0, #64]	; 0x40
 8002168:	e7d1      	b.n	800210e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ff30 	bl	8001fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002172:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002176:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	e7dd      	b.n	8002138 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800217c:	2001      	movs	r0, #1
}
 800217e:	4770      	bx	lr
 8002180:	40020407 	.word	0x40020407
 8002184:	bffdfff8 	.word	0xbffdfff8
 8002188:	cccccccd 	.word	0xcccccccd
 800218c:	40020000 	.word	0x40020000
 8002190:	bffdfbf8 	.word	0xbffdfbf8
 8002194:	40020400 	.word	0x40020400

08002198 <HAL_DMA_Start_IT>:
{
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800219c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80021a0:	2801      	cmp	r0, #1
 80021a2:	d043      	beq.n	800222c <HAL_DMA_Start_IT+0x94>
 80021a4:	2001      	movs	r0, #1
 80021a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80021aa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80021ae:	b2c0      	uxtb	r0, r0
 80021b0:	2801      	cmp	r0, #1
 80021b2:	d006      	beq.n	80021c2 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80021b8:	2300      	movs	r3, #0
 80021ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 80021be:	2001      	movs	r0, #1
}
 80021c0:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c2:	2002      	movs	r0, #2
 80021c4:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c8:	2000      	movs	r0, #0
 80021ca:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80021cc:	6825      	ldr	r5, [r4, #0]
 80021ce:	6828      	ldr	r0, [r5, #0]
 80021d0:	f020 0001 	bic.w	r0, r0, #1
 80021d4:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff fea0 	bl	8001f1c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80021dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021de:	b1d3      	cbz	r3, 8002216 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e0:	6822      	ldr	r2, [r4, #0]
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	f043 030e 	orr.w	r3, r3, #14
 80021e8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fa:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80021fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021fe:	b11b      	cbz	r3, 8002208 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002206:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002208:	6822      	ldr	r2, [r4, #0]
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2000      	movs	r0, #0
 8002214:	e7d4      	b.n	80021c0 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f043 030a 	orr.w	r3, r3, #10
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e7de      	b.n	80021ea <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800222c:	2002      	movs	r0, #2
 800222e:	e7c7      	b.n	80021c0 <HAL_DMA_Start_IT+0x28>

08002230 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002230:	4603      	mov	r3, r0
 8002232:	2800      	cmp	r0, #0
 8002234:	d034      	beq.n	80022a0 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	2a02      	cmp	r2, #2
 800223e:	d006      	beq.n	800224e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	2204      	movs	r2, #4
 8002242:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002244:	2200      	movs	r2, #0
 8002246:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
 800224c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224e:	6801      	ldr	r1, [r0, #0]
 8002250:	680a      	ldr	r2, [r1, #0]
 8002252:	f022 020e 	bic.w	r2, r2, #14
 8002256:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002258:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800225a:	680a      	ldr	r2, [r1, #0]
 800225c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002260:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002262:	6801      	ldr	r1, [r0, #0]
 8002264:	680a      	ldr	r2, [r1, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800226c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800226e:	f002 011c 	and.w	r1, r2, #28
 8002272:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002274:	2201      	movs	r2, #1
 8002276:	408a      	lsls	r2, r1
 8002278:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800227a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800227c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800227e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8002280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002282:	b132      	cbz	r2, 8002292 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002284:	6811      	ldr	r1, [r2, #0]
 8002286:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800228a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800228c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800228e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002290:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002298:	2000      	movs	r0, #0
 800229a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800229e:	4770      	bx	lr
    return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
}
 80022a2:	4770      	bx	lr

080022a4 <HAL_DMA_Abort_IT>:
{
 80022a4:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d003      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	2304      	movs	r3, #4
 80022b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80022b4:	2001      	movs	r0, #1
}
 80022b6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b8:	6802      	ldr	r2, [r0, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f023 030e 	bic.w	r3, r3, #14
 80022c0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80022c2:	6802      	ldr	r2, [r0, #0]
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022cc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80022d8:	f003 021c 	and.w	r2, r3, #28
 80022dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022de:	2301      	movs	r3, #1
 80022e0:	4093      	lsls	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80022e6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80022e8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80022ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80022ec:	b133      	cbz	r3, 80022fc <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80022f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80022fa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002302:	2300      	movs	r3, #0
 8002304:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8002308:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800230a:	b113      	cbz	r3, 8002312 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800230c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2000      	movs	r0, #0
 8002310:	e7d1      	b.n	80022b6 <HAL_DMA_Abort_IT+0x12>
 8002312:	2000      	movs	r0, #0
 8002314:	e7cf      	b.n	80022b6 <HAL_DMA_Abort_IT+0x12>
	...

08002318 <HAL_DMA_IRQHandler>:
{
 8002318:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800231a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800231c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800231e:	6804      	ldr	r4, [r0, #0]
 8002320:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002322:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002324:	f003 031c 	and.w	r3, r3, #28
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	420a      	tst	r2, r1
 800232e:	d015      	beq.n	800235c <HAL_DMA_IRQHandler+0x44>
 8002330:	f015 0f04 	tst.w	r5, #4
 8002334:	d012      	beq.n	800235c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	f013 0f20 	tst.w	r3, #32
 800233c:	d103      	bne.n	8002346 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002346:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002348:	f003 021c 	and.w	r2, r3, #28
 800234c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800234e:	2304      	movs	r3, #4
 8002350:	4093      	lsls	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002354:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002356:	b103      	cbz	r3, 800235a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8002358:	4798      	blx	r3
}
 800235a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800235c:	2202      	movs	r2, #2
 800235e:	409a      	lsls	r2, r3
 8002360:	420a      	tst	r2, r1
 8002362:	d028      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x9e>
 8002364:	f015 0f02 	tst.w	r5, #2
 8002368:	d025      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	f013 0f20 	tst.w	r3, #32
 8002370:	d106      	bne.n	8002380 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	f023 030a 	bic.w	r3, r3, #10
 8002378:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 800237a:	2301      	movs	r3, #1
 800237c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002380:	6802      	ldr	r2, [r0, #0]
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_DMA_IRQHandler+0xdc>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d90e      	bls.n	80023a6 <HAL_DMA_IRQHandler+0x8e>
 8002388:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800238a:	f003 021c 	and.w	r2, r3, #28
 800238e:	2302      	movs	r3, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_DMA_IRQHandler+0xe0>)
 8002394:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8002396:	2300      	movs	r3, #0
 8002398:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 800239c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0db      	beq.n	800235a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 80023a2:	4798      	blx	r3
 80023a4:	e7d9      	b.n	800235a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80023a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023a8:	f003 021c 	and.w	r2, r3, #28
 80023ac:	2302      	movs	r3, #2
 80023ae:	4093      	lsls	r3, r2
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_DMA_IRQHandler+0xe4>)
 80023b2:	6053      	str	r3, [r2, #4]
 80023b4:	e7ef      	b.n	8002396 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80023b6:	2208      	movs	r2, #8
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	420b      	tst	r3, r1
 80023be:	d0cc      	beq.n	800235a <HAL_DMA_IRQHandler+0x42>
 80023c0:	f015 0f08 	tst.w	r5, #8
 80023c4:	d0c9      	beq.n	800235a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f023 030e 	bic.w	r3, r3, #14
 80023cc:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023d0:	f003 031c 	and.w	r3, r3, #28
 80023d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023de:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80023e0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80023e4:	2300      	movs	r3, #0
 80023e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80023ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0b4      	beq.n	800235a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80023f0:	4798      	blx	r3
  return;
 80023f2:	e7b2      	b.n	800235a <HAL_DMA_IRQHandler+0x42>
 80023f4:	40020080 	.word	0x40020080
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8002400:	b178      	cbz	r0, 8002422 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002406:	f011 0f10 	tst.w	r1, #16
 800240a:	d004      	beq.n	8002416 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800240c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002410:	d004      	beq.n	800241c <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002412:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002416:	601a      	str	r2, [r3, #0]
  return status;
 8002418:	2000      	movs	r0, #0
 800241a:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800241c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002420:	e7f9      	b.n	8002416 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8002422:	2001      	movs	r0, #1
}
 8002424:	4770      	bx	lr

08002426 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002426:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002428:	4608      	mov	r0, r1
 800242a:	b909      	cbnz	r1, 8002430 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800242c:	605a      	str	r2, [r3, #4]
      break;
 800242e:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002430:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002432:	4770      	bx	lr

08002434 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002434:	b110      	cbz	r0, 800243c <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002436:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002438:	2000      	movs	r0, #0
 800243a:	4770      	bx	lr
    return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
  }
}
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002444:	e069      	b.n	800251a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002446:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002448:	005e      	lsls	r6, r3, #1
 800244a:	2403      	movs	r4, #3
 800244c:	40b4      	lsls	r4, r6
 800244e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	68cc      	ldr	r4, [r1, #12]
 8002454:	40b4      	lsls	r4, r6
 8002456:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002458:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245c:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002460:	684c      	ldr	r4, [r1, #4]
 8002462:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002466:	409c      	lsls	r4, r3
 8002468:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800246c:	6044      	str	r4, [r0, #4]
 800246e:	e065      	b.n	800253c <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002470:	08dd      	lsrs	r5, r3, #3
 8002472:	3508      	adds	r5, #8
 8002474:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002478:	f003 0407 	and.w	r4, r3, #7
 800247c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002480:	240f      	movs	r4, #15
 8002482:	fa04 f40c 	lsl.w	r4, r4, ip
 8002486:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248a:	690c      	ldr	r4, [r1, #16]
 800248c:	fa04 f40c 	lsl.w	r4, r4, ip
 8002490:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002494:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002498:	e067      	b.n	800256a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800249a:	2402      	movs	r4, #2
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x60>
 800249e:	2400      	movs	r4, #0
 80024a0:	fa04 f40e 	lsl.w	r4, r4, lr
 80024a4:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a6:	f10c 0c02 	add.w	ip, ip, #2
 80024aa:	4d4b      	ldr	r5, [pc, #300]	; (80025d8 <HAL_GPIO_Init+0x198>)
 80024ac:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b0:	4c4a      	ldr	r4, [pc, #296]	; (80025dc <HAL_GPIO_Init+0x19c>)
 80024b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80024b4:	43d4      	mvns	r4, r2
 80024b6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ba:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80024be:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80024c2:	d001      	beq.n	80024c8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80024c4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80024c8:	4d44      	ldr	r5, [pc, #272]	; (80025dc <HAL_GPIO_Init+0x19c>)
 80024ca:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80024cc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80024ce:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d2:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80024d6:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80024da:	d001      	beq.n	80024e0 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80024dc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80024e0:	4d3e      	ldr	r5, [pc, #248]	; (80025dc <HAL_GPIO_Init+0x19c>)
 80024e2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80024e4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024e8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ec:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80024f0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80024f4:	d001      	beq.n	80024fa <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80024f6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80024fa:	4d38      	ldr	r5, [pc, #224]	; (80025dc <HAL_GPIO_Init+0x19c>)
 80024fc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002500:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002504:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002506:	684e      	ldr	r6, [r1, #4]
 8002508:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800250c:	d001      	beq.n	8002512 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800250e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_GPIO_Init+0x19c>)
 8002514:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002518:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251a:	680a      	ldr	r2, [r1, #0]
 800251c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002520:	d058      	beq.n	80025d4 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002522:	f04f 0c01 	mov.w	ip, #1
 8002526:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800252a:	ea1c 0202 	ands.w	r2, ip, r2
 800252e:	d0f3      	beq.n	8002518 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002530:	684c      	ldr	r4, [r1, #4]
 8002532:	f004 0403 	and.w	r4, r4, #3
 8002536:	3c01      	subs	r4, #1
 8002538:	2c01      	cmp	r4, #1
 800253a:	d984      	bls.n	8002446 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	684c      	ldr	r4, [r1, #4]
 800253e:	f004 0403 	and.w	r4, r4, #3
 8002542:	2c03      	cmp	r4, #3
 8002544:	d00c      	beq.n	8002560 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8002546:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002548:	005d      	lsls	r5, r3, #1
 800254a:	f04f 0c03 	mov.w	ip, #3
 800254e:	fa0c fc05 	lsl.w	ip, ip, r5
 8002552:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002556:	688c      	ldr	r4, [r1, #8]
 8002558:	40ac      	lsls	r4, r5
 800255a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800255e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	684c      	ldr	r4, [r1, #4]
 8002562:	f004 0403 	and.w	r4, r4, #3
 8002566:	2c02      	cmp	r4, #2
 8002568:	d082      	beq.n	8002470 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800256a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800256c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002570:	f04f 0c03 	mov.w	ip, #3
 8002574:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002578:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257c:	684c      	ldr	r4, [r1, #4]
 800257e:	f004 0403 	and.w	r4, r4, #3
 8002582:	fa04 f40e 	lsl.w	r4, r4, lr
 8002586:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800258a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800258c:	684c      	ldr	r4, [r1, #4]
 800258e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002592:	d0c1      	beq.n	8002518 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8002594:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002598:	f10c 0502 	add.w	r5, ip, #2
 800259c:	4c0e      	ldr	r4, [pc, #56]	; (80025d8 <HAL_GPIO_Init+0x198>)
 800259e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025a2:	f003 0403 	and.w	r4, r3, #3
 80025a6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80025aa:	2407      	movs	r4, #7
 80025ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80025b0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025b4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80025b8:	f43f af71 	beq.w	800249e <HAL_GPIO_Init+0x5e>
 80025bc:	4c08      	ldr	r4, [pc, #32]	; (80025e0 <HAL_GPIO_Init+0x1a0>)
 80025be:	42a0      	cmp	r0, r4
 80025c0:	d006      	beq.n	80025d0 <HAL_GPIO_Init+0x190>
 80025c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80025c6:	42a0      	cmp	r0, r4
 80025c8:	f43f af67 	beq.w	800249a <HAL_GPIO_Init+0x5a>
 80025cc:	2407      	movs	r4, #7
 80025ce:	e767      	b.n	80024a0 <HAL_GPIO_Init+0x60>
 80025d0:	2401      	movs	r4, #1
 80025d2:	e765      	b.n	80024a0 <HAL_GPIO_Init+0x60>
  }
}
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	bf00      	nop
 80025d8:	40010000 	.word	0x40010000
 80025dc:	58000800 	.word	0x58000800
 80025e0:	48000400 	.word	0x48000400

080025e4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80025e4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025e6:	fa31 f203 	lsrs.w	r2, r1, r3
 80025ea:	d071      	beq.n	80026d0 <HAL_GPIO_DeInit+0xec>
{
 80025ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ee:	e02e      	b.n	800264e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80025f0:	2502      	movs	r5, #2
 80025f2:	e000      	b.n	80025f6 <HAL_GPIO_DeInit+0x12>
 80025f4:	2500      	movs	r5, #0
 80025f6:	fa05 fc0c 	lsl.w	ip, r5, ip
 80025fa:	45a4      	cmp	ip, r4
 80025fc:	d049      	beq.n	8002692 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80025fe:	6804      	ldr	r4, [r0, #0]
 8002600:	005d      	lsls	r5, r3, #1
 8002602:	f04f 0c03 	mov.w	ip, #3
 8002606:	fa0c fc05 	lsl.w	ip, ip, r5
 800260a:	ea44 040c 	orr.w	r4, r4, ip
 800260e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002610:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002614:	f10e 0e08 	add.w	lr, lr, #8
 8002618:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800261c:	f003 0507 	and.w	r5, r3, #7
 8002620:	00ae      	lsls	r6, r5, #2
 8002622:	250f      	movs	r5, #15
 8002624:	40b5      	lsls	r5, r6
 8002626:	ea24 0405 	bic.w	r4, r4, r5
 800262a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800262e:	6884      	ldr	r4, [r0, #8]
 8002630:	ea24 040c 	bic.w	r4, r4, ip
 8002634:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	6844      	ldr	r4, [r0, #4]
 8002638:	ea24 0202 	bic.w	r2, r4, r2
 800263c:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800263e:	68c2      	ldr	r2, [r0, #12]
 8002640:	ea22 020c 	bic.w	r2, r2, ip
 8002644:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8002646:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002648:	fa31 f203 	lsrs.w	r2, r1, r3
 800264c:	d03f      	beq.n	80026ce <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800264e:	2201      	movs	r2, #1
 8002650:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8002652:	ea12 0701 	ands.w	r7, r2, r1
 8002656:	d0f6      	beq.n	8002646 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002658:	089e      	lsrs	r6, r3, #2
 800265a:	1cb5      	adds	r5, r6, #2
 800265c:	4c1d      	ldr	r4, [pc, #116]	; (80026d4 <HAL_GPIO_DeInit+0xf0>)
 800265e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002662:	f003 0c03 	and.w	ip, r3, #3
 8002666:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800266a:	f04f 0e07 	mov.w	lr, #7
 800266e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002672:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002676:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800267a:	d0bb      	beq.n	80025f4 <HAL_GPIO_DeInit+0x10>
 800267c:	4d16      	ldr	r5, [pc, #88]	; (80026d8 <HAL_GPIO_DeInit+0xf4>)
 800267e:	42a8      	cmp	r0, r5
 8002680:	d005      	beq.n	800268e <HAL_GPIO_DeInit+0xaa>
 8002682:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002686:	42a8      	cmp	r0, r5
 8002688:	d0b2      	beq.n	80025f0 <HAL_GPIO_DeInit+0xc>
 800268a:	2507      	movs	r5, #7
 800268c:	e7b3      	b.n	80025f6 <HAL_GPIO_DeInit+0x12>
 800268e:	2501      	movs	r5, #1
 8002690:	e7b1      	b.n	80025f6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8002692:	4c12      	ldr	r4, [pc, #72]	; (80026dc <HAL_GPIO_DeInit+0xf8>)
 8002694:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8002698:	ea25 0507 	bic.w	r5, r5, r7
 800269c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80026a0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80026a4:	ea25 0507 	bic.w	r5, r5, r7
 80026a8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	ea25 0507 	bic.w	r5, r5, r7
 80026b2:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80026b4:	6865      	ldr	r5, [r4, #4]
 80026b6:	ea25 0707 	bic.w	r7, r5, r7
 80026ba:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80026bc:	4d05      	ldr	r5, [pc, #20]	; (80026d4 <HAL_GPIO_DeInit+0xf0>)
 80026be:	3602      	adds	r6, #2
 80026c0:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80026c4:	ea24 040e 	bic.w	r4, r4, lr
 80026c8:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80026cc:	e797      	b.n	80025fe <HAL_GPIO_DeInit+0x1a>
  }
}
 80026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	48000400 	.word	0x48000400
 80026dc:	58000800 	.word	0x58000800

080026e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e0:	b10a      	cbz	r2, 80026e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026e2:	6181      	str	r1, [r0, #24]
 80026e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026ec:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4203      	tst	r3, r0
 80026f4:	d100      	bne.n	80026f8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80026f6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80026fa:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026fc:	f7ff fa10 	bl	8001b20 <HAL_GPIO_EXTI_Callback>
}
 8002700:	e7f9      	b.n	80026f6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002702:	bf00      	nop
 8002704:	58000800 	.word	0x58000800

08002708 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002708:	4a02      	ldr	r2, [pc, #8]	; (8002714 <HAL_PWR_EnableBkUpAccess+0xc>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	4770      	bx	lr
 8002714:	58000400 	.word	0x58000400

08002718 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002718:	b510      	push	{r4, lr}
 800271a:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800271c:	b9a0      	cbnz	r0, 8002748 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_PWR_EnterSLEEPMode+0x44>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002726:	d10a      	bne.n	800273e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_PWR_EnterSLEEPMode+0x48>)
 800272a:	6913      	ldr	r3, [r2, #16]
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002732:	2c01      	cmp	r4, #1
 8002734:	d010      	beq.n	8002758 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002736:	bf40      	sev
    __WFE();
 8002738:	bf20      	wfe
    __WFE();
 800273a:	bf20      	wfe
  }
}
 800273c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800273e:	f000 f821 	bl	8002784 <HAL_PWREx_DisableLowPowerRunMode>
 8002742:	2800      	cmp	r0, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_PWR_EnterSLEEPMode+0x10>
 8002746:	e7f9      	b.n	800273c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_PWR_EnterSLEEPMode+0x44>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002750:	d1ea      	bne.n	8002728 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8002752:	f000 f80f 	bl	8002774 <HAL_PWREx_EnableLowPowerRunMode>
 8002756:	e7e7      	b.n	8002728 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8002758:	bf30      	wfi
 800275a:	e7ef      	b.n	800273c <HAL_PWR_EnterSLEEPMode+0x24>
 800275c:	58000400 	.word	0x58000400
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <HAL_PWREx_GetVoltageRange+0xc>)
 8002766:	6818      	ldr	r0, [r3, #0]
}
 8002768:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	58000400 	.word	0x58000400

08002774 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002774:	4a02      	ldr	r2, [pc, #8]	; (8002780 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	4770      	bx	lr
 8002780:	58000400 	.word	0x58000400

08002784 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2232      	movs	r2, #50	; 0x32
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027a0:	e000      	b.n	80027a4 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80027a2:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80027a6:	6952      	ldr	r2, [r2, #20]
 80027a8:	f412 7f00 	tst.w	r2, #512	; 0x200
 80027ac:	d001      	beq.n	80027b2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f7      	bne.n	80027a2 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80027ba:	d101      	bne.n	80027c0 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
 80027be:	4770      	bx	lr
    return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3
}
 80027c2:	4770      	bx	lr
 80027c4:	58000400 	.word	0x58000400
 80027c8:	20000004 	.word	0x20000004
 80027cc:	431bde83 	.word	0x431bde83

080027d0 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	f023 0307 	bic.w	r3, r3, #7
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80027e0:	6913      	ldr	r3, [r2, #16]
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80027e8:	2801      	cmp	r0, #1
 80027ea:	d008      	beq.n	80027fe <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80027ec:	bf40      	sev
    __WFE();
 80027ee:	bf20      	wfe
    __WFE();
 80027f0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80027f4:	6913      	ldr	r3, [r2, #16]
 80027f6:	f023 0304 	bic.w	r3, r3, #4
 80027fa:	6113      	str	r3, [r2, #16]
}
 80027fc:	4770      	bx	lr
    __WFI();
 80027fe:	bf30      	wfi
 8002800:	e7f7      	b.n	80027f2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8002802:	bf00      	nop
 8002804:	58000400 	.word	0x58000400
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800280c:	b530      	push	{r4, r5, lr}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	4604      	mov	r4, r0
 8002812:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002814:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <RCC_SetFlashLatency+0xb4>)
 8002816:	e893 0003 	ldmia.w	r3, {r0, r1}
 800281a:	9006      	str	r0, [sp, #24]
 800281c:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002820:	f103 0208 	add.w	r2, r3, #8
 8002824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002828:	9004      	str	r0, [sp, #16]
 800282a:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800282e:	ad01      	add	r5, sp, #4
 8002830:	3310      	adds	r3, #16
 8002832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002836:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800283e:	d007      	beq.n	8002850 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002840:	2300      	movs	r3, #0
 8002842:	e014      	b.n	800286e <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8002844:	aa08      	add	r2, sp, #32
 8002846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800284a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800284e:	e01e      	b.n	800288e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002850:	2300      	movs	r3, #0
 8002852:	2b02      	cmp	r3, #2
 8002854:	d808      	bhi.n	8002868 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002856:	aa08      	add	r2, sp, #32
 8002858:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800285c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8002860:	42a2      	cmp	r2, r4
 8002862:	d2ef      	bcs.n	8002844 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002864:	3301      	adds	r3, #1
 8002866:	e7f4      	b.n	8002852 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002868:	2500      	movs	r5, #0
 800286a:	e010      	b.n	800288e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800286c:	3301      	adds	r3, #1
 800286e:	2b02      	cmp	r3, #2
 8002870:	d80c      	bhi.n	800288c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002872:	aa08      	add	r2, sp, #32
 8002874:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002878:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800287c:	42a2      	cmp	r2, r4
 800287e:	d3f5      	bcc.n	800286c <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002880:	aa08      	add	r2, sp, #32
 8002882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002886:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800288a:	e000      	b.n	800288e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800288c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800288e:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <RCC_SetFlashLatency+0xb8>)
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 0307 	bic.w	r3, r3, #7
 8002896:	432b      	orrs	r3, r5
 8002898:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800289a:	f7fe fa15 	bl	8000cc8 <HAL_GetTick>
 800289e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <RCC_SetFlashLatency+0xb8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	42ab      	cmp	r3, r5
 80028aa:	d006      	beq.n	80028ba <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028ac:	f7fe fa0c 	bl	8000cc8 <HAL_GetTick>
 80028b0:	1b00      	subs	r0, r0, r4
 80028b2:	2802      	cmp	r0, #2
 80028b4:	d9f4      	bls.n	80028a0 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
 80028b8:	e000      	b.n	80028bc <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80028ba:	2000      	movs	r0, #0
}
 80028bc:	b009      	add	sp, #36	; 0x24
 80028be:	bd30      	pop	{r4, r5, pc}
 80028c0:	08008508 	.word	0x08008508
 80028c4:	58004000 	.word	0x58004000

080028c8 <RCC_SetFlashLatencyFromMSIRange>:
{
 80028c8:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80028ca:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80028d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80028e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028e6:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028ea:	f7ff ff3b 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 80028ee:	4601      	mov	r1, r0
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80028f2:	fba0 3004 	umull	r3, r0, r0, r4
 80028f6:	0c80      	lsrs	r0, r0, #18
 80028f8:	f7ff ff88 	bl	800280c <RCC_SetFlashLatency>
}
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	bf00      	nop
 8002900:	08008ad4 	.word	0x08008ad4
 8002904:	08008a74 	.word	0x08008a74
 8002908:	431bde83 	.word	0x431bde83

0800290c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002918:	f011 010c 	ands.w	r1, r1, #12
 800291c:	d00a      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x28>
 800291e:	290c      	cmp	r1, #12
 8002920:	d006      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002922:	2904      	cmp	r1, #4
 8002924:	d047      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002926:	2908      	cmp	r1, #8
 8002928:	d03b      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800292a:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800292c:	4610      	mov	r0, r2
 800292e:	e026      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002930:	2b01      	cmp	r3, #1
 8002932:	d1f6      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f013 0308 	ands.w	r3, r3, #8
 800293e:	d00d      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x50>
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f013 0308 	ands.w	r3, r3, #8
 800294a:	d124      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002950:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002954:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x104>)
 8002956:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800295a:	e00e      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800295c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	f012 0f08 	tst.w	r2, #8
 8002966:	d112      	bne.n	800298e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002970:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x104>)
 8002976:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800297a:	b1d1      	cbz	r1, 80029b2 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800297c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	2b0c      	cmp	r3, #12
 800298a:	d01a      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800298c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800298e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	e7ee      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x68>
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800299c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029a0:	e7d8      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80029ae:	4819      	ldr	r0, [pc, #100]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	e7e5      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80029b2:	4610      	mov	r0, r2
 80029b4:	e7e3      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80029b6:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80029b8:	4817      	ldr	r0, [pc, #92]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ba:	e7e0      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80029bc:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80029be:	4816      	ldr	r0, [pc, #88]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029c0:	e7dd      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d009      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0xd8>
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d108      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80029e0:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	68d8      	ldr	r0, [r3, #12]
 80029ec:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029f0:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029f4:	68d8      	ldr	r0, [r3, #12]
 80029f6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80029fa:	3001      	adds	r0, #1
 80029fc:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a00:	68d8      	ldr	r0, [r3, #12]
 8002a02:	0f40      	lsrs	r0, r0, #29
 8002a04:	3001      	adds	r0, #1
 8002a06:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8002a0a:	e7bf      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a0e:	e7ea      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xda>
 8002a10:	08008ad4 	.word	0x08008ad4
 8002a14:	01e84800 	.word	0x01e84800
 8002a18:	00f42400 	.word	0x00f42400

08002a1c <HAL_RCC_GetHCLKFreq>:
{
 8002a1c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a1e:	f7ff ff75 	bl	800290c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x1c>)
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002a32:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a36:	bd08      	pop	{r3, pc}
 8002a38:	08008a74 	.word	0x08008a74

08002a3c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	f000 8311 	beq.w	8003064 <HAL_RCC_OscConfig+0x628>
{
 8002a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a44:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	689d      	ldr	r5, [r3, #8]
 8002a4c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a50:	68de      	ldr	r6, [r3, #12]
 8002a52:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	f013 0f20 	tst.w	r3, #32
 8002a5c:	d02a      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a5e:	2d00      	cmp	r5, #0
 8002a60:	d065      	beq.n	8002b2e <HAL_RCC_OscConfig+0xf2>
 8002a62:	2d0c      	cmp	r5, #12
 8002a64:	d061      	beq.n	8002b2a <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a66:	6a23      	ldr	r3, [r4, #32]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80bf 	beq.w	8002bec <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a7a:	f7fe f925 	bl	8000cc8 <HAL_GetTick>
 8002a7e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f013 0f02 	tst.w	r3, #2
 8002a8a:	f000 80a7 	beq.w	8002bdc <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f042 0208 	orr.w	r2, r2, #8
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002aa0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002aae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ab2:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	f000 80b5 	beq.w	8002c28 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002abe:	2d08      	cmp	r5, #8
 8002ac0:	f000 80ae 	beq.w	8002c20 <HAL_RCC_OscConfig+0x1e4>
 8002ac4:	2d0c      	cmp	r5, #12
 8002ac6:	f000 80a8 	beq.w	8002c1a <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ace:	6813      	ldr	r3, [r2, #0]
 8002ad0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ad4:	68a1      	ldr	r1, [r4, #8]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	f000 80c4 	beq.w	8002c6c <HAL_RCC_OscConfig+0x230>
 8002ae4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002ae8:	f000 80c5 	beq.w	8002c76 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002af6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002afe:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	6863      	ldr	r3, [r4, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c2 	beq.w	8002c8c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8002b08:	f7fe f8de 	bl	8000cc8 <HAL_GetTick>
 8002b0c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b18:	f040 8086 	bne.w	8002c28 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f8d4 	bl	8000cc8 <HAL_GetTick>
 8002b20:	1bc0      	subs	r0, r0, r7
 8002b22:	2864      	cmp	r0, #100	; 0x64
 8002b24:	d9f3      	bls.n	8002b0e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
 8002b28:	e2a9      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b2a:	2e01      	cmp	r6, #1
 8002b2c:	d19b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b2e:	6a23      	ldr	r3, [r4, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8299 	beq.w	8003068 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f013 0f08 	tst.w	r3, #8
 8002b42:	d029      	beq.n	8002b98 <HAL_RCC_OscConfig+0x15c>
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d92a      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b52:	f7ff feb9 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	f040 8288 	bne.w	800306c <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f042 0208 	orr.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002b7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b80:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b82:	f7ff ff4b 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002b86:	4bba      	ldr	r3, [pc, #744]	; (8002e70 <HAL_RCC_OscConfig+0x434>)
 8002b88:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002b8a:	4bba      	ldr	r3, [pc, #744]	; (8002e74 <HAL_RCC_OscConfig+0x438>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	f7fe f899 	bl	8000cc4 <HAL_InitTick>
        if (status != HAL_OK)
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d08e      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x78>
 8002b96:	e272      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba6:	e7d2      	b.n	8002b4e <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f042 0208 	orr.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002bba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002bc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bcc:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002bd0:	f7ff fe7a 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d0d4      	beq.n	8002b82 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
 8002bda:	e250      	b.n	800307e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f874 	bl	8000cc8 <HAL_GetTick>
 8002be0:	1bc0      	subs	r0, r0, r7
 8002be2:	2802      	cmp	r0, #2
 8002be4:	f67f af4c 	bls.w	8002a80 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8002be8:	2003      	movs	r0, #3
 8002bea:	e248      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf0:	6813      	ldr	r3, [r2, #0]
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f866 	bl	8000cc8 <HAL_GetTick>
 8002bfc:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f013 0f02 	tst.w	r3, #2
 8002c08:	f43f af54 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0c:	f7fe f85c 	bl	8000cc8 <HAL_GetTick>
 8002c10:	1bc0      	subs	r0, r0, r7
 8002c12:	2802      	cmp	r0, #2
 8002c14:	d9f3      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8002c16:	2003      	movs	r0, #3
 8002c18:	e231      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c1a:	2e03      	cmp	r6, #3
 8002c1c:	f47f af55 	bne.w	8002aca <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8224 	beq.w	8003070 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	f013 0f02 	tst.w	r3, #2
 8002c2e:	d056      	beq.n	8002cde <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c30:	2d04      	cmp	r5, #4
 8002c32:	d03d      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x274>
 8002c34:	2d0c      	cmp	r5, #12
 8002c36:	d039      	beq.n	8002cac <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	6923      	ldr	r3, [r4, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 808a 	beq.w	8002d54 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f83c 	bl	8000cc8 <HAL_GetTick>
 8002c50:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c5c:	d136      	bne.n	8002ccc <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe f833 	bl	8000cc8 <HAL_GetTick>
 8002c62:	1b80      	subs	r0, r0, r6
 8002c64:	2802      	cmp	r0, #2
 8002c66:	d9f4      	bls.n	8002c52 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e208      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
}
 8002c74:	e744      	b.n	8002b00 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c80:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	e739      	b.n	8002b00 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f81c 	bl	8000cc8 <HAL_GetTick>
 8002c90:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c9c:	d0c4      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9e:	f7fe f813 	bl	8000cc8 <HAL_GetTick>
 8002ca2:	1bc0      	subs	r0, r0, r7
 8002ca4:	2864      	cmp	r0, #100	; 0x64
 8002ca6:	d9f4      	bls.n	8002c92 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8002ca8:	2003      	movs	r0, #3
 8002caa:	e1e8      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cac:	2e02      	cmp	r6, #2
 8002cae:	d1c3      	bne.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002cb0:	6923      	ldr	r3, [r4, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 81de 	beq.w	8003074 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cbe:	6853      	ldr	r3, [r2, #4]
 8002cc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cc4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cc8:	6053      	str	r3, [r2, #4]
}
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd2:	6853      	ldr	r3, [r2, #4]
 8002cd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cd8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cdc:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	f013 0f08 	tst.w	r3, #8
 8002ce4:	d07e      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce6:	69a3      	ldr	r3, [r4, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d062      	beq.n	8002db2 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002cf4:	69e1      	ldr	r1, [r4, #28]
 8002cf6:	f003 0210 	and.w	r2, r3, #16
 8002cfa:	4291      	cmp	r1, r2
 8002cfc:	d011      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	2a02      	cmp	r2, #2
 8002d04:	f000 81b8 	beq.w	8003078 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d08:	f013 0f01 	tst.w	r3, #1
 8002d0c:	d138      	bne.n	8002d80 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d12:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d16:	f023 0310 	bic.w	r3, r3, #16
 8002d1a:	69e1      	ldr	r1, [r4, #28]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d26:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d32:	f7fd ffc9 	bl	8000cc8 <HAL_GetTick>
 8002d36:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	f013 0f02 	tst.w	r3, #2
 8002d44:	d14e      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fd ffbf 	bl	8000cc8 <HAL_GetTick>
 8002d4a:	1b80      	subs	r0, r0, r6
 8002d4c:	2811      	cmp	r0, #17
 8002d4e:	d9f3      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8002d50:	2003      	movs	r0, #3
 8002d52:	e194      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d60:	f7fd ffb2 	bl	8000cc8 <HAL_GetTick>
 8002d64:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002d70:	d0b5      	beq.n	8002cde <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fd ffa9 	bl	8000cc8 <HAL_GetTick>
 8002d76:	1b80      	subs	r0, r0, r6
 8002d78:	2802      	cmp	r0, #2
 8002d7a:	d9f4      	bls.n	8002d66 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	e17e      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d84:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8002d90:	f7fd ff9a 	bl	8000cc8 <HAL_GetTick>
 8002d94:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	f013 0f02 	tst.w	r3, #2
 8002da2:	d0b4      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fd ff90 	bl	8000cc8 <HAL_GetTick>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	2811      	cmp	r0, #17
 8002dac:	d9f3      	bls.n	8002d96 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8002dae:	2003      	movs	r0, #3
 8002db0:	e165      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002dc2:	f7fd ff81 	bl	8000cc8 <HAL_GetTick>
 8002dc6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f013 0f02 	tst.w	r3, #2
 8002dd4:	d006      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fd ff77 	bl	8000cc8 <HAL_GetTick>
 8002dda:	1b80      	subs	r0, r0, r6
 8002ddc:	2811      	cmp	r0, #17
 8002dde:	d9f3      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8002de0:	2003      	movs	r0, #3
 8002de2:	e14c      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	f013 0f04 	tst.w	r3, #4
 8002dea:	f000 80b8 	beq.w	8002f5e <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_OscConfig+0x43c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002df6:	d110      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8002df8:	f7ff fc86 	bl	8002708 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8002dfc:	f7fd ff64 	bl	8000cc8 <HAL_GetTick>
 8002e00:	4606      	mov	r6, r0
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_RCC_OscConfig+0x43c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fd ff5c 	bl	8000cc8 <HAL_GetTick>
 8002e10:	1b80      	subs	r0, r0, r6
 8002e12:	2802      	cmp	r0, #2
 8002e14:	d9f5      	bls.n	8002e02 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8002e16:	2003      	movs	r0, #3
 8002e18:	e131      	b.n	800307e <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	68e3      	ldr	r3, [r4, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d068      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002e20:	2b85      	cmp	r3, #133	; 0x85
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002e38:	f7fd ff46 	bl	8000cc8 <HAL_GetTick>
 8002e3c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f013 0f02 	tst.w	r3, #2
 8002e5a:	d10f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd ff34 	bl	8000cc8 <HAL_GetTick>
 8002e60:	1b80      	subs	r0, r0, r6
 8002e62:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e66:	4298      	cmp	r0, r3
 8002e68:	d9f1      	bls.n	8002e4e <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	e107      	b.n	800307e <HAL_RCC_OscConfig+0x642>
 8002e6e:	bf00      	nop
 8002e70:	20000004 	.word	0x20000004
 8002e74:	20000008 	.word	0x20000008
 8002e78:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e7c:	68e3      	ldr	r3, [r4, #12]
 8002e7e:	2b81      	cmp	r3, #129	; 0x81
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002e82:	2b85      	cmp	r3, #133	; 0x85
 8002e84:	d11a      	bne.n	8002ebc <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8002e86:	f7fd ff1f 	bl	8000cc8 <HAL_GetTick>
 8002e8a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002ea8:	d159      	bne.n	8002f5e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fd ff0d 	bl	8000cc8 <HAL_GetTick>
 8002eae:	1b80      	subs	r0, r0, r6
 8002eb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	d9f1      	bls.n	8002e9c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
 8002eba:	e0e0      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8002ebc:	f7fd ff04 	bl	8000cc8 <HAL_GetTick>
 8002ec0:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002ede:	d03e      	beq.n	8002f5e <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fef2 	bl	8000cc8 <HAL_GetTick>
 8002ee4:	1b80      	subs	r0, r0, r6
 8002ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eea:	4298      	cmp	r0, r3
 8002eec:	d9f1      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8002eee:	2003      	movs	r0, #3
 8002ef0:	e0c5      	b.n	800307e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8002ef2:	f7fd fee9 	bl	8000cc8 <HAL_GetTick>
 8002ef6:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002f14:	d008      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7fd fed7 	bl	8000cc8 <HAL_GetTick>
 8002f1a:	1b80      	subs	r0, r0, r6
 8002f1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f20:	4298      	cmp	r0, r3
 8002f22:	d9f1      	bls.n	8002f08 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	e0aa      	b.n	800307e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8002f28:	f7fd fece 	bl	8000cc8 <HAL_GetTick>
 8002f2c:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f013 0f02 	tst.w	r3, #2
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd febc 	bl	8000cc8 <HAL_GetTick>
 8002f50:	1b80      	subs	r0, r0, r6
 8002f52:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d9f1      	bls.n	8002f3e <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	e08f      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808b 	beq.w	800307c <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f66:	2d0c      	cmp	r5, #12
 8002f68:	d060      	beq.n	800302c <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fea5 	bl	8000cc8 <HAL_GetTick>
 8002f7e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f8a:	d148      	bne.n	800301e <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f90:	68d1      	ldr	r1, [r2, #12]
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x65c>)
 8002f94:	400b      	ands	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e070      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa0:	6813      	ldr	r3, [r2, #0]
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fe8e 	bl	8000cc8 <HAL_GetTick>
 8002fac:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fb8:	d12a      	bne.n	8003010 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbe:	68d3      	ldr	r3, [r2, #12]
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x660>)
 8002fc2:	4019      	ands	r1, r3
 8002fc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002fc8:	4303      	orrs	r3, r0
 8002fca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002fcc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002fd0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fd2:	4303      	orrs	r3, r0
 8002fd4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fd6:	4303      	orrs	r3, r0
 8002fd8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002fda:	4303      	orrs	r3, r0
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe8:	68d3      	ldr	r3, [r2, #12]
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fe6a 	bl	8000cc8 <HAL_GetTick>
 8002ff4:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003000:	d13e      	bne.n	8003080 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fd fe61 	bl	8000cc8 <HAL_GetTick>
 8003006:	1b00      	subs	r0, r0, r4
 8003008:	280a      	cmp	r0, #10
 800300a:	d9f4      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 800300c:	2003      	movs	r0, #3
 800300e:	e036      	b.n	800307e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003010:	f7fd fe5a 	bl	8000cc8 <HAL_GetTick>
 8003014:	1b40      	subs	r0, r0, r5
 8003016:	280a      	cmp	r0, #10
 8003018:	d9c9      	bls.n	8002fae <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800301a:	2003      	movs	r0, #3
 800301c:	e02f      	b.n	800307e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fd fe53 	bl	8000cc8 <HAL_GetTick>
 8003022:	1b00      	subs	r0, r0, r4
 8003024:	280a      	cmp	r0, #10
 8003026:	d9ab      	bls.n	8002f80 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8003028:	2003      	movs	r0, #3
 800302a:	e028      	b.n	800307e <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	2b01      	cmp	r3, #1
 800302e:	d029      	beq.n	8003084 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003036:	f003 0103 	and.w	r1, r3, #3
 800303a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800303c:	4291      	cmp	r1, r2
 800303e:	d123      	bne.n	8003088 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003040:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003046:	428a      	cmp	r2, r1
 8003048:	d120      	bne.n	800308c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800304a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800304e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003050:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003056:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800305a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800305c:	4293      	cmp	r3, r2
 800305e:	d119      	bne.n	8003094 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8003060:	2000      	movs	r0, #0
 8003062:	e00c      	b.n	800307e <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8003064:	2001      	movs	r0, #1
}
 8003066:	4770      	bx	lr
        return HAL_ERROR;
 8003068:	2001      	movs	r0, #1
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 800306c:	2001      	movs	r0, #1
 800306e:	e006      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003070:	2001      	movs	r0, #1
 8003072:	e004      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003074:	2001      	movs	r0, #1
 8003076:	e002      	b.n	800307e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 800307c:	2000      	movs	r0, #0
}
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003080:	2000      	movs	r0, #0
 8003082:	e7fc      	b.n	800307e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
 8003086:	e7fa      	b.n	800307e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
 800308a:	e7f8      	b.n	800307e <HAL_RCC_OscConfig+0x642>
 800308c:	2001      	movs	r0, #1
 800308e:	e7f6      	b.n	800307e <HAL_RCC_OscConfig+0x642>
 8003090:	2001      	movs	r0, #1
 8003092:	e7f4      	b.n	800307e <HAL_RCC_OscConfig+0x642>
 8003094:	2001      	movs	r0, #1
 8003096:	e7f2      	b.n	800307e <HAL_RCC_OscConfig+0x642>
 8003098:	eefefffc 	.word	0xeefefffc
 800309c:	11c1808c 	.word	0x11c1808c

080030a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80030a0:	2800      	cmp	r0, #0
 80030a2:	f000 8127 	beq.w	80032f4 <HAL_RCC_ClockConfig+0x254>
{
 80030a6:	b570      	push	{r4, r5, r6, lr}
 80030a8:	460c      	mov	r4, r1
 80030aa:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b93      	ldr	r3, [pc, #588]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d32d      	bcc.n	8003114 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	f013 0f02 	tst.w	r3, #2
 80030be:	d13f      	bne.n	8003140 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	f013 0f20 	tst.w	r3, #32
 80030c6:	d153      	bne.n	8003170 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030ce:	d16a      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	682b      	ldr	r3, [r5, #0]
 80030d2:	f013 0f04 	tst.w	r3, #4
 80030d6:	f040 8083 	bne.w	80031e0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030da:	682b      	ldr	r3, [r5, #0]
 80030dc:	f013 0f08 	tst.w	r3, #8
 80030e0:	f040 8097 	bne.w	8003212 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	f013 0f01 	tst.w	r3, #1
 80030ea:	f000 80de 	beq.w	80032aa <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ee:	686b      	ldr	r3, [r5, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f000 80a8 	beq.w	8003246 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	f000 80ad 	beq.w	8003256 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 80b2 	bne.w	8003266 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	f012 0f02 	tst.w	r2, #2
 800310c:	f040 80b1 	bne.w	8003272 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003110:	2001      	movs	r0, #1
 8003112:	e0ee      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003114:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f023 0307 	bic.w	r3, r3, #7
 800311c:	430b      	orrs	r3, r1
 800311e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003120:	f7fd fdd2 	bl	8000cc8 <HAL_GetTick>
 8003124:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b75      	ldr	r3, [pc, #468]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	42a3      	cmp	r3, r4
 8003130:	d0c2      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003132:	f7fd fdc9 	bl	8000cc8 <HAL_GetTick>
 8003136:	1b80      	subs	r0, r0, r6
 8003138:	2802      	cmp	r0, #2
 800313a:	d9f4      	bls.n	8003126 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800313c:	2003      	movs	r0, #3
 800313e:	e0d8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	688a      	ldr	r2, [r1, #8]
 8003148:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003150:	f7fd fdba 	bl	8000cc8 <HAL_GetTick>
 8003154:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003160:	d1ae      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003162:	f7fd fdb1 	bl	8000cc8 <HAL_GetTick>
 8003166:	1b80      	subs	r0, r0, r6
 8003168:	2802      	cmp	r0, #2
 800316a:	d9f4      	bls.n	8003156 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800316c:	2003      	movs	r0, #3
 800316e:	e0c0      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003170:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003176:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800317a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003184:	f7fd fda0 	bl	8000cc8 <HAL_GetTick>
 8003188:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003192:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003196:	d197      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003198:	f7fd fd96 	bl	8000cc8 <HAL_GetTick>
 800319c:	1b80      	subs	r0, r0, r6
 800319e:	2802      	cmp	r0, #2
 80031a0:	d9f3      	bls.n	800318a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e0a5      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80031a6:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80031a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ac:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80031b0:	f023 030f 	bic.w	r3, r3, #15
 80031b4:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80031b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80031bc:	f7fd fd84 	bl	8000cc8 <HAL_GetTick>
 80031c0:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031ce:	f47f af7f 	bne.w	80030d0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031d2:	f7fd fd79 	bl	8000cc8 <HAL_GetTick>
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	2802      	cmp	r0, #2
 80031da:	d9f2      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80031dc:	2003      	movs	r0, #3
 80031de:	e088      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	688a      	ldr	r2, [r1, #8]
 80031e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80031f0:	f7fd fd6a 	bl	8000cc8 <HAL_GetTick>
 80031f4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003200:	f47f af6b 	bne.w	80030da <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003204:	f7fd fd60 	bl	8000cc8 <HAL_GetTick>
 8003208:	1b80      	subs	r0, r0, r6
 800320a:	2802      	cmp	r0, #2
 800320c:	d9f3      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800320e:	2003      	movs	r0, #3
 8003210:	e06f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003212:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003218:	6893      	ldr	r3, [r2, #8]
 800321a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800321e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003222:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003224:	f7fd fd50 	bl	8000cc8 <HAL_GetTick>
 8003228:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003234:	f47f af56 	bne.w	80030e4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003238:	f7fd fd46 	bl	8000cc8 <HAL_GetTick>
 800323c:	1b80      	subs	r0, r0, r6
 800323e:	2802      	cmp	r0, #2
 8003240:	d9f3      	bls.n	800322a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003242:	2003      	movs	r0, #3
 8003244:	e055      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003250:	d10f      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003252:	2001      	movs	r0, #1
 8003254:	e04d      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003262:	2001      	movs	r0, #1
 8003264:	e045      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003270:	d042      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003276:	688a      	ldr	r2, [r1, #8]
 8003278:	f022 0203 	bic.w	r2, r2, #3
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003280:	f7fd fd22 	bl	8000cc8 <HAL_GetTick>
 8003284:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003290:	686a      	ldr	r2, [r5, #4]
 8003292:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fd fd16 	bl	8000cc8 <HAL_GetTick>
 800329c:	1b80      	subs	r0, r0, r6
 800329e:	f241 3388 	movw	r3, #5000	; 0x1388
 80032a2:	4298      	cmp	r0, r3
 80032a4:	d9ef      	bls.n	8003286 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80032a6:	2003      	movs	r0, #3
 80032a8:	e023      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	42a3      	cmp	r3, r4
 80032b4:	d915      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	4323      	orrs	r3, r4
 80032c0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80032c2:	f7fd fd01 	bl	8000cc8 <HAL_GetTick>
 80032c6:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d006      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032d4:	f7fd fcf8 	bl	8000cc8 <HAL_GetTick>
 80032d8:	1b40      	subs	r0, r0, r5
 80032da:	2802      	cmp	r0, #2
 80032dc:	d9f4      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80032de:	2003      	movs	r0, #3
 80032e0:	e007      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032e2:	f7ff fb9b 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_ClockConfig+0x264>)
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	f7fd fce9 	bl	8000cc4 <HAL_InitTick>
}
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80032f4:	2001      	movs	r0, #1
}
 80032f6:	4770      	bx	lr
        return HAL_ERROR;
 80032f8:	2001      	movs	r0, #1
 80032fa:	e7fa      	b.n	80032f2 <HAL_RCC_ClockConfig+0x252>
 80032fc:	58004000 	.word	0x58004000
 8003300:	20000004 	.word	0x20000004
 8003304:	20000008 	.word	0x20000008

08003308 <HAL_RCC_GetPCLK1Freq>:
{
 8003308:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800330a:	f7ff fb87 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003318:	4a02      	ldr	r2, [pc, #8]	; (8003324 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800331a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800331e:	40d8      	lsrs	r0, r3
 8003320:	bd08      	pop	{r3, pc}
 8003322:	bf00      	nop
 8003324:	08008ab4 	.word	0x08008ab4

08003328 <HAL_RCC_GetPCLK2Freq>:
{
 8003328:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800332a:	f7ff fb77 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003338:	4a02      	ldr	r2, [pc, #8]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800333e:	40d8      	lsrs	r0, r3
 8003340:	bd08      	pop	{r3, pc}
 8003342:	bf00      	nop
 8003344:	08008ab4 	.word	0x08008ab4

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	6803      	ldr	r3, [r0, #0]
 800334e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003352:	f040 80ab 	bne.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003356:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f013 0f01 	tst.w	r3, #1
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003360:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003366:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800336a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800336e:	b292      	uxth	r2, r2
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	f013 0f02 	tst.w	r3, #2
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337e:	68a2      	ldr	r2, [r4, #8]
 8003380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003384:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003388:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800338c:	b292      	uxth	r2, r2
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f013 0f20 	tst.w	r3, #32
 800339a:	d009      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800339c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800339e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80033b6:	d00c      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033b8:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033c2:	0c02      	lsrs	r2, r0, #16
 80033c4:	0412      	lsls	r2, r2, #16
 80033c6:	ea23 0302 	bic.w	r3, r3, r2
 80033ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80033d8:	d00c      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80033dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033e0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033e4:	0c02      	lsrs	r2, r0, #16
 80033e6:	0412      	lsls	r2, r2, #16
 80033e8:	ea23 0302 	bic.w	r3, r3, r2
 80033ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80033fa:	d00c      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80033fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80033fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003402:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003406:	0c02      	lsrs	r2, r0, #16
 8003408:	0412      	lsls	r2, r2, #16
 800340a:	ea23 0302 	bic.w	r3, r3, r2
 800340e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	f013 0f40 	tst.w	r3, #64	; 0x40
 800341c:	f040 809e 	bne.w	800355c <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003426:	f040 80aa 	bne.w	800357e <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003430:	f040 80b6 	bne.w	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f013 0f10 	tst.w	r3, #16
 800343a:	d00e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800343c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800343e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003442:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003450:	68e3      	ldr	r3, [r4, #12]
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	f000 80b4 	beq.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003460:	d00f      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003462:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003468:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800346c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003478:	b91b      	cbnz	r3, 8003482 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800347a:	68cb      	ldr	r3, [r1, #12]
 800347c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003480:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003488:	d00e      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800348a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800348c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003490:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800349e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a4:	f000 8092 	beq.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80034a8:	4628      	mov	r0, r5
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80034ac:	f7ff f92c 	bl	8002708 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80034b0:	f7fd fc0a 	bl	8000cc8 <HAL_GetTick>
 80034b4:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80034b6:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034be:	d106      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fd fc02 	bl	8000cc8 <HAL_GetTick>
 80034c4:	1b40      	subs	r0, r0, r5
 80034c6:	2802      	cmp	r0, #2
 80034c8:	d9f5      	bls.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80034ca:	2503      	movs	r5, #3
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80034ce:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80034d0:	2d00      	cmp	r5, #0
 80034d2:	f47f af41 	bne.w	8003358 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80034e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d024      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80034f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034f4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80034f8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80034fc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003500:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003504:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003508:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800350c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003510:	f012 0f02 	tst.w	r2, #2
 8003514:	d10f      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8003516:	2d00      	cmp	r5, #0
 8003518:	f47f af1e 	bne.w	8003358 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800351e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003522:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003526:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003530:	e712      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8003532:	2200      	movs	r2, #0
 8003534:	e7ec      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8003536:	f7fd fbc7 	bl	8000cc8 <HAL_GetTick>
 800353a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f013 0f02 	tst.w	r3, #2
 8003548:	d1e5      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fbbd 	bl	8000cc8 <HAL_GetTick>
 800354e:	1b80      	subs	r0, r0, r6
 8003550:	f241 3388 	movw	r3, #5000	; 0x1388
 8003554:	4298      	cmp	r0, r3
 8003556:	d9f1      	bls.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8003558:	2503      	movs	r5, #3
 800355a:	e7dc      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800355e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003562:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003566:	0919      	lsrs	r1, r3, #4
 8003568:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800356c:	ea22 0201 	bic.w	r2, r2, r1
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800357c:	e750      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003580:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003584:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003588:	0919      	lsrs	r1, r3, #4
 800358a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800358e:	ea22 0201 	bic.w	r2, r2, r1
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800359e:	e744      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a0:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035a2:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80035a6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80035aa:	0919      	lsrs	r1, r3, #4
 80035ac:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80035b0:	ea22 0201 	bic.w	r2, r2, r1
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80035c0:	e738      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80035c2:	68cb      	ldr	r3, [r1, #12]
 80035c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c8:	60cb      	str	r3, [r1, #12]
 80035ca:	e746      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035cc:	68cb      	ldr	r3, [r1, #12]
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	60cb      	str	r3, [r1, #12]
 80035d4:	e768      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035d6:	bf00      	nop
 80035d8:	58000400 	.word	0x58000400

080035dc <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d036      	beq.n	8003652 <HAL_RTC_DeactivateAlarm+0x76>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RTC_DeactivateAlarm+0x7c>)
 80035f2:	22ca      	movs	r2, #202	; 0xca
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
 80035f6:	2253      	movs	r2, #83	; 0x53
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80035fa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80035fe:	d019      	beq.n	8003634 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003608:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800360a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003610:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003612:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003614:	f022 0202 	bic.w	r2, r2, #2
 8003618:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800361a:	2202      	movs	r2, #2
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RTC_DeactivateAlarm+0x7c>)
 8003620:	22ff      	movs	r2, #255	; 0xff
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003624:	2301      	movs	r3, #1
 8003626:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800362a:	2300      	movs	r3, #0
 800362c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003630:	4618      	mov	r0, r3
 8003632:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800363a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800363c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003644:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800364c:	2201      	movs	r2, #1
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003650:	e7e5      	b.n	800361e <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8003652:	2002      	movs	r0, #2
}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40002800 	.word	0x40002800

0800365c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8003662:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8003664:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003666:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003668:	f015 0f01 	tst.w	r5, #1
 800366c:	d106      	bne.n	800367c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800366e:	f015 0f02 	tst.w	r5, #2
 8003672:	d109      	bne.n	8003688 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003674:	2301      	movs	r3, #1
 8003676:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800367a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800367e:	2201      	movs	r2, #1
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003682:	f7fd fcb3 	bl	8000fec <HAL_RTC_AlarmAEventCallback>
 8003686:	e7f2      	b.n	800366e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800368a:	2202      	movs	r2, #2
 800368c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800368e:	4620      	mov	r0, r4
 8003690:	f000 f9ee 	bl	8003a70 <HAL_RTCEx_AlarmBEventCallback>
 8003694:	e7ee      	b.n	8003674 <HAL_RTC_AlarmIRQHandler+0x18>
 8003696:	bf00      	nop
 8003698:	40002800 	.word	0x40002800

0800369c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800369c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800369e:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <HAL_RTC_WaitForSynchro+0x30>)
 80036a0:	68d3      	ldr	r3, [r2, #12]
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80036a8:	f7fd fb0e 	bl	8000cc8 <HAL_GetTick>
 80036ac:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_RTC_WaitForSynchro+0x30>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f013 0f20 	tst.w	r3, #32
 80036b6:	d107      	bne.n	80036c8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036b8:	f7fd fb06 	bl	8000cc8 <HAL_GetTick>
 80036bc:	1b00      	subs	r0, r0, r4
 80036be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036c2:	d9f4      	bls.n	80036ae <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80036c4:	2003      	movs	r0, #3
 80036c6:	e000      	b.n	80036ca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80036c8:	2000      	movs	r0, #0
}
 80036ca:	bd10      	pop	{r4, pc}
 80036cc:	40002800 	.word	0x40002800

080036d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80036d2:	4b11      	ldr	r3, [pc, #68]	; (8003718 <RTC_EnterInitMode+0x48>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036da:	d002      	beq.n	80036e2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80036de:	4620      	mov	r0, r4
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80036e4:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <RTC_EnterInitMode+0x48>)
 80036e6:	68d3      	ldr	r3, [r2, #12]
 80036e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ec:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80036ee:	f7fd faeb 	bl	8000cc8 <HAL_GetTick>
 80036f2:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <RTC_EnterInitMode+0x48>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036fe:	d1ee      	bne.n	80036de <RTC_EnterInitMode+0xe>
 8003700:	2c03      	cmp	r4, #3
 8003702:	d0ec      	beq.n	80036de <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003704:	f7fd fae0 	bl	8000cc8 <HAL_GetTick>
 8003708:	1b43      	subs	r3, r0, r5
 800370a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370e:	d9f2      	bls.n	80036f6 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003710:	2403      	movs	r4, #3
 8003712:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8003716:	e7ee      	b.n	80036f6 <RTC_EnterInitMode+0x26>
 8003718:	40002800 	.word	0x40002800

0800371c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <RTC_ExitInitMode+0x4c>)
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003728:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f013 0f20 	tst.w	r3, #32
 8003730:	d107      	bne.n	8003742 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003732:	f7ff ffb3 	bl	800369c <HAL_RTC_WaitForSynchro>
 8003736:	4603      	mov	r3, r0
 8003738:	b1a0      	cbz	r0, 8003764 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003740:	e010      	b.n	8003764 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <RTC_ExitInitMode+0x4c>)
 8003744:	6993      	ldr	r3, [r2, #24]
 8003746:	f023 0320 	bic.w	r3, r3, #32
 800374a:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800374c:	f7ff ffa6 	bl	800369c <HAL_RTC_WaitForSynchro>
 8003750:	4603      	mov	r3, r0
 8003752:	b110      	cbz	r0, 800375a <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800375a:	4903      	ldr	r1, [pc, #12]	; (8003768 <RTC_ExitInitMode+0x4c>)
 800375c:	698a      	ldr	r2, [r1, #24]
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd10      	pop	{r4, pc}
 8003768:	40002800 	.word	0x40002800

0800376c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800376c:	2800      	cmp	r0, #0
 800376e:	d052      	beq.n	8003816 <HAL_RTC_Init+0xaa>
{
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003774:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003778:	b163      	cbz	r3, 8003794 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_RTC_Init+0xb0>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f013 0f10 	tst.w	r3, #16
 8003788:	d009      	beq.n	800379e <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800378a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800378c:	2301      	movs	r3, #1
 800378e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003792:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003794:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8003798:	f7fd f976 	bl	8000a88 <HAL_RTC_MspInit>
 800379c:	e7ed      	b.n	800377a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <HAL_RTC_Init+0xb0>)
 80037a0:	22ca      	movs	r2, #202	; 0xca
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
 80037a4:	2253      	movs	r2, #83	; 0x53
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7ff ff91 	bl	80036d0 <RTC_EnterInitMode>
      if (status == HAL_OK)
 80037ae:	b128      	cbz	r0, 80037bc <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_RTC_Init+0xb0>)
 80037b2:	22ff      	movs	r2, #255	; 0xff
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1eb      	bne.n	8003792 <HAL_RTC_Init+0x26>
 80037ba:	e7e7      	b.n	800378c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_RTC_Init+0xb0>)
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80037c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80037ca:	6999      	ldr	r1, [r3, #24]
 80037cc:	6862      	ldr	r2, [r4, #4]
 80037ce:	6920      	ldr	r0, [r4, #16]
 80037d0:	4302      	orrs	r2, r0
 80037d2:	69a0      	ldr	r0, [r4, #24]
 80037d4:	4302      	orrs	r2, r0
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80037da:	68e2      	ldr	r2, [r4, #12]
 80037dc:	68a1      	ldr	r1, [r4, #8]
 80037de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80037ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80037ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80037ee:	4301      	orrs	r1, r0
 80037f0:	430a      	orrs	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff ff91 	bl	800371c <RTC_ExitInitMode>
        if (status == HAL_OK)
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d1d8      	bne.n	80037b0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 80037fe:	4907      	ldr	r1, [pc, #28]	; (800381c <HAL_RTC_Init+0xb0>)
 8003800:	698b      	ldr	r3, [r1, #24]
 8003802:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003806:	6a22      	ldr	r2, [r4, #32]
 8003808:	69e5      	ldr	r5, [r4, #28]
 800380a:	432a      	orrs	r2, r5
 800380c:	6965      	ldr	r5, [r4, #20]
 800380e:	432a      	orrs	r2, r5
 8003810:	4313      	orrs	r3, r2
 8003812:	618b      	str	r3, [r1, #24]
 8003814:	e7cc      	b.n	80037b0 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003816:	2001      	movs	r0, #1
}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40002800 	.word	0x40002800

08003820 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8003820:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8003822:	e002      	b.n	800382a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8003824:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8003826:	380a      	subs	r0, #10
 8003828:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800382a:	2809      	cmp	r0, #9
 800382c:	d8fa      	bhi.n	8003824 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	b2db      	uxtb	r3, r3
}
 8003832:	4318      	orrs	r0, r3
 8003834:	4770      	bx	lr
	...

08003838 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8003838:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800383c:	2b01      	cmp	r3, #1
 800383e:	f000 80b0 	beq.w	80039a2 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8003842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003846:	4605      	mov	r5, r0
 8003848:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800384a:	2301      	movs	r3, #1
 800384c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003858:	68de      	ldr	r6, [r3, #12]
 800385a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800385e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003862:	d043      	beq.n	80038ec <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8003864:	bb12      	cbnz	r2, 80038ac <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f013 0f40 	tst.w	r3, #64	; 0x40
 800386c:	d101      	bne.n	8003872 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003872:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003876:	7820      	ldrb	r0, [r4, #0]
 8003878:	f7ff ffd2 	bl	8003820 <RTC_ByteToBcd2>
 800387c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800387e:	7860      	ldrb	r0, [r4, #1]
 8003880:	f7ff ffce 	bl	8003820 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003884:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003888:	78a0      	ldrb	r0, [r4, #2]
 800388a:	f7ff ffc9 	bl	8003820 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800388e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003890:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003892:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003896:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800389a:	f7ff ffc1 	bl	8003820 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800389e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038a2:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80038a4:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038a6:	ea48 0000 	orr.w	r0, r8, r0
 80038aa:	e020      	b.n	80038ee <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80038ac:	6948      	ldr	r0, [r1, #20]
 80038ae:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80038b2:	d009      	beq.n	80038c8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80038b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80038b8:	d006      	beq.n	80038c8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038c2:	d101      	bne.n	80038c8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038c8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038ca:	7863      	ldrb	r3, [r4, #1]
 80038cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80038d2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038d4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80038d6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80038d8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80038dc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80038e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038e4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80038e6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80038e8:	4318      	orrs	r0, r3
 80038ea:	e000      	b.n	80038ee <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80038ec:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 80038f0:	22ca      	movs	r2, #202	; 0xca
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
 80038f4:	2253      	movs	r2, #83	; 0x53
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80038f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	d02a      	beq.n	8003956 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003900:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003908:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800390a:	2202      	movs	r2, #2
 800390c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800390e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003912:	d040      	beq.n	8003996 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003916:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003918:	69a2      	ldr	r2, [r4, #24]
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003920:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003922:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003924:	f042 0202 	orr.w	r2, r2, #2
 8003928:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8003930:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_RTC_SetAlarm_IT+0x174>)
 8003934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003942:	22ff      	movs	r2, #255	; 0xff
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003946:	2301      	movs	r3, #1
 8003948:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800394c:	2000      	movs	r0, #0
 800394e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8003952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800395e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003960:	2201      	movs	r2, #1
 8003962:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8003964:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003968:	d00f      	beq.n	800398a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 800396c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800396e:	69a2      	ldr	r2, [r4, #24]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003976:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003978:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8003986:	619a      	str	r2, [r3, #24]
 8003988:	e7d3      	b.n	8003932 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800398a:	69a3      	ldr	r3, [r4, #24]
 800398c:	69e2      	ldr	r2, [r4, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 8003992:	6453      	str	r3, [r2, #68]	; 0x44
 8003994:	e7ed      	b.n	8003972 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003996:	69a3      	ldr	r3, [r4, #24]
 8003998:	69e2      	ldr	r2, [r4, #28]
 800399a:	4313      	orrs	r3, r2
 800399c:	4a02      	ldr	r2, [pc, #8]	; (80039a8 <HAL_RTC_SetAlarm_IT+0x170>)
 800399e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a0:	e7bc      	b.n	800391c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80039a2:	2002      	movs	r0, #2
}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40002800 	.word	0x40002800
 80039ac:	58000800 	.word	0x58000800

080039b0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d017      	beq.n	80039e8 <HAL_RTCEx_EnableBypassShadow+0x38>
 80039b8:	2101      	movs	r1, #1
 80039ba:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80039c6:	22ca      	movs	r2, #202	; 0xca
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
 80039ca:	2253      	movs	r2, #83	; 0x53
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	f042 0220 	orr.w	r2, r2, #32
 80039d4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d6:	22ff      	movs	r2, #255	; 0xff
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039da:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039de:	2300      	movs	r3, #0
 80039e0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80039e4:	4618      	mov	r0, r3
 80039e6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80039e8:	2002      	movs	r0, #2
}
 80039ea:	4770      	bx	lr
 80039ec:	40002800 	.word	0x40002800

080039f0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d020      	beq.n	8003a3a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80039f8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80039fa:	2101      	movs	r1, #1
 80039fc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8003a08:	22ca      	movs	r2, #202	; 0xca
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a0c:	2253      	movs	r2, #83	; 0x53
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a16:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8003a18:	4c0a      	ldr	r4, [pc, #40]	; (8003a44 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8003a1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003a1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a22:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a2a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8003a34:	4618      	mov	r0, r3
}
 8003a36:	bc10      	pop	{r4}
 8003a38:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8003a3a:	2002      	movs	r0, #2
}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40002800 	.word	0x40002800
 8003a44:	58000800 	.word	0x58000800

08003a48 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a54:	d103      	bne.n	8003a5e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003a5c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8003a5e:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8003a60:	2240      	movs	r2, #64	; 0x40
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8003a64:	f7fd fac6 	bl	8000ff4 <HAL_RTCEx_SSRUEventCallback>
 8003a68:	e7f5      	b.n	8003a56 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8003a6a:	bf00      	nop
 8003a6c:	40002800 	.word	0x40002800

08003a70 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a70:	4770      	bx	lr

08003a72 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8003a72:	0089      	lsls	r1, r1, #2
 8003a74:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003a78:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003a7c:	600a      	str	r2, [r1, #0]
}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8003a80:	0089      	lsls	r1, r1, #2
 8003a82:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003a86:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003a8a:	6808      	ldr	r0, [r1, #0]
}
 8003a8c:	4770      	bx	lr
	...

08003a90 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <SUBGHZSPI_Init+0x20>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003a9a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8003a9e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003aa0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	4770      	bx	lr
 8003ab0:	58010000 	.word	0x58010000

08003ab4 <HAL_SUBGHZ_Init>:
{
 8003ab4:	b530      	push	{r4, r5, lr}
 8003ab6:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d058      	beq.n	8003b6e <HAL_SUBGHZ_Init+0xba>
 8003abc:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8003abe:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003ac0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003ac4:	b10b      	cbz	r3, 8003aca <HAL_SUBGHZ_Init+0x16>
 8003ac6:	2d03      	cmp	r5, #3
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8003aca:	2300      	movs	r3, #0
 8003acc:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fd f884 	bl	8000bdc <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_SUBGHZ_Init+0xc0>)
 8003ad6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003ada:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003ae2:	b185      	cbz	r5, 8003b06 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_SUBGHZ_Init+0xc4>)
 8003ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aea:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8003aec:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	f7ff ffce 	bl	8003a90 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003afc:	2301      	movs	r3, #1
 8003afe:	71a3      	strb	r3, [r4, #6]
}
 8003b00:	4628      	mov	r0, r5
 8003b02:	b003      	add	sp, #12
 8003b04:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003b12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b1a:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <HAL_SUBGHZ_Init+0xc8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b22:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b26:	2264      	movs	r2, #100	; 0x64
 8003b28:	fb02 f303 	mul.w	r3, r2, r3
 8003b2c:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	b1d3      	cbz	r3, 8003b68 <HAL_SUBGHZ_Init+0xb4>
      count--;
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003b44:	d1f3      	bne.n	8003b2e <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_SUBGHZ_Init+0xc4>)
 8003b48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003b4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5a:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b60:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d1ca      	bne.n	8003afc <HAL_SUBGHZ_Init+0x48>
 8003b66:	e7c2      	b.n	8003aee <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b68:	2501      	movs	r5, #1
 8003b6a:	60a5      	str	r5, [r4, #8]
        break;
 8003b6c:	e7eb      	b.n	8003b46 <HAL_SUBGHZ_Init+0x92>
    return status;
 8003b6e:	2501      	movs	r5, #1
 8003b70:	e7c6      	b.n	8003b00 <HAL_SUBGHZ_Init+0x4c>
 8003b72:	bf00      	nop
 8003b74:	58000800 	.word	0x58000800
 8003b78:	58000400 	.word	0x58000400
 8003b7c:	20000004 	.word	0x20000004

08003b80 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003b80:	b082      	sub	sp, #8
 8003b82:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <SUBGHZSPI_Transmit+0x70>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003b8c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003b90:	2064      	movs	r0, #100	; 0x64
 8003b92:	fb00 f303 	mul.w	r3, r0, r3
 8003b96:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	b14b      	cbz	r3, 8003bb0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003b9c:	9b01      	ldr	r3, [sp, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003ba2:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <SUBGHZSPI_Transmit+0x74>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f013 0f02 	tst.w	r3, #2
 8003baa:	d0f5      	beq.n	8003b98 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2000      	movs	r0, #0
 8003bae:	e001      	b.n	8003bb4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <SUBGHZSPI_Transmit+0x74>)
 8003bb6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <SUBGHZSPI_Transmit+0x70>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003bc0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003bc4:	2164      	movs	r1, #100	; 0x64
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003bcc:	9b01      	ldr	r3, [sp, #4]
 8003bce:	b143      	cbz	r3, 8003be2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003bd0:	9b01      	ldr	r3, [sp, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003bd6:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <SUBGHZSPI_Transmit+0x74>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f013 0f01 	tst.w	r3, #1
 8003bde:	d0f5      	beq.n	8003bcc <SUBGHZSPI_Transmit+0x4c>
 8003be0:	e001      	b.n	8003be6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003be2:	2001      	movs	r0, #1
 8003be4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <SUBGHZSPI_Transmit+0x74>)
 8003be8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8003bea:	b002      	add	sp, #8
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000004 	.word	0x20000004
 8003bf4:	58010000 	.word	0x58010000

08003bf8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <SUBGHZSPI_Receive+0x78>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c04:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003c08:	2064      	movs	r0, #100	; 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	b14b      	cbz	r3, 8003c28 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003c14:	9b01      	ldr	r3, [sp, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <SUBGHZSPI_Receive+0x7c>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f013 0f02 	tst.w	r3, #2
 8003c22:	d0f5      	beq.n	8003c10 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2000      	movs	r0, #0
 8003c26:	e001      	b.n	8003c2c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c28:	2001      	movs	r0, #1
 8003c2a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <SUBGHZSPI_Receive+0x7c>)
 8003c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003c32:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <SUBGHZSPI_Receive+0x78>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003c3e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8003c42:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8003c46:	fb0c f303 	mul.w	r3, ip, r3
 8003c4a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	b143      	cbz	r3, 8003c62 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003c50:	9b01      	ldr	r3, [sp, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <SUBGHZSPI_Receive+0x7c>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f013 0f01 	tst.w	r3, #1
 8003c5e:	d0f5      	beq.n	8003c4c <SUBGHZSPI_Receive+0x54>
 8003c60:	e001      	b.n	8003c66 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003c62:	2001      	movs	r0, #1
 8003c64:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <SUBGHZSPI_Receive+0x7c>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	700b      	strb	r3, [r1, #0]

  return status;
}
 8003c6c:	b002      	add	sp, #8
 8003c6e:	4770      	bx	lr
 8003c70:	20000004 	.word	0x20000004
 8003c74:	58010000 	.word	0x58010000

08003c78 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003c78:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <SUBGHZ_WaitOnBusy+0x50>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c82:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8003c86:	2264      	movs	r2, #100	; 0x64
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	e006      	b.n	8003c9e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003c90:	2302      	movs	r3, #2
 8003c92:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8003c94:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8003c96:	b002      	add	sp, #8
 8003c98:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003c9a:	4213      	tst	r3, r2
 8003c9c:	d012      	beq.n	8003cc4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <SUBGHZ_WaitOnBusy+0x54>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f013 0304 	ands.w	r3, r3, #4
 8003ca6:	d000      	beq.n	8003caa <SUBGHZ_WaitOnBusy+0x32>
 8003ca8:	2301      	movs	r3, #1
    if (count == 0U)
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d0ef      	beq.n	8003c90 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8003cb0:	9a01      	ldr	r2, [sp, #4]
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <SUBGHZ_WaitOnBusy+0x54>)
 8003cb8:	6952      	ldr	r2, [r2, #20]
 8003cba:	f012 0202 	ands.w	r2, r2, #2
 8003cbe:	d0ec      	beq.n	8003c9a <SUBGHZ_WaitOnBusy+0x22>
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	e7ea      	b.n	8003c9a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	e7e6      	b.n	8003c96 <SUBGHZ_WaitOnBusy+0x1e>
 8003cc8:	20000004 	.word	0x20000004
 8003ccc:	58000400 	.word	0x58000400

08003cd0 <SUBGHZ_CheckDeviceReady>:
{
 8003cd0:	b500      	push	{lr}
 8003cd2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003cd4:	7903      	ldrb	r3, [r0, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d004      	beq.n	8003ce4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003cda:	f7ff ffcd 	bl	8003c78 <SUBGHZ_WaitOnBusy>
}
 8003cde:	b003      	add	sp, #12
 8003ce0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <SUBGHZ_CheckDeviceReady+0x4c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003cec:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8003cf0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <SUBGHZ_CheckDeviceReady+0x50>)
 8003cf4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8003d00:	9b01      	ldr	r3, [sp, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f9      	bne.n	8003d00 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <SUBGHZ_CheckDeviceReady+0x50>)
 8003d0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d1a:	e7de      	b.n	8003cda <SUBGHZ_CheckDeviceReady+0xa>
 8003d1c:	20000004 	.word	0x20000004
 8003d20:	58000400 	.word	0x58000400

08003d24 <HAL_SUBGHZ_WriteRegisters>:
{
 8003d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d28:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d2a:	7980      	ldrb	r0, [r0, #6]
 8003d2c:	fa5f f880 	uxtb.w	r8, r0
 8003d30:	f1b8 0f01 	cmp.w	r8, #1
 8003d34:	d13e      	bne.n	8003db4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8003d36:	460c      	mov	r4, r1
 8003d38:	4617      	mov	r7, r2
 8003d3a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003d3c:	796b      	ldrb	r3, [r5, #5]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d03b      	beq.n	8003dba <HAL_SUBGHZ_WriteRegisters+0x96>
 8003d42:	2301      	movs	r3, #1
 8003d44:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff ffc0 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d50:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003d52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003d5e:	210d      	movs	r1, #13
 8003d60:	4628      	mov	r0, r5
 8003d62:	f7ff ff0d 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003d66:	0a21      	lsrs	r1, r4, #8
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff ff09 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003d6e:	b2e1      	uxtb	r1, r4
 8003d70:	4628      	mov	r0, r5
 8003d72:	f7ff ff05 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d76:	2400      	movs	r4, #0
 8003d78:	e005      	b.n	8003d86 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d7a:	5d39      	ldrb	r1, [r7, r4]
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff feff 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d82:	3401      	adds	r4, #1
 8003d84:	b2a4      	uxth	r4, r4
 8003d86:	42b4      	cmp	r4, r6
 8003d88:	d3f7      	bcc.n	8003d7a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8003d8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f7ff ff6d 	bl	8003c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d9e:	68ab      	ldr	r3, [r5, #8]
 8003da0:	b90b      	cbnz	r3, 8003da6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8003da2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003da6:	2301      	movs	r3, #1
 8003da8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003daa:	2300      	movs	r3, #0
 8003dac:	716b      	strb	r3, [r5, #5]
}
 8003dae:	4640      	mov	r0, r8
 8003db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003db4:	f04f 0802 	mov.w	r8, #2
 8003db8:	e7f9      	b.n	8003dae <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8003dba:	f04f 0802 	mov.w	r8, #2
 8003dbe:	e7f6      	b.n	8003dae <HAL_SUBGHZ_WriteRegisters+0x8a>
 8003dc0:	58000400 	.word	0x58000400

08003dc4 <HAL_SUBGHZ_ReadRegisters>:
{
 8003dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dca:	7980      	ldrb	r0, [r0, #6]
 8003dcc:	fa5f f880 	uxtb.w	r8, r0
 8003dd0:	f1b8 0f01 	cmp.w	r8, #1
 8003dd4:	d141      	bne.n	8003e5a <HAL_SUBGHZ_ReadRegisters+0x96>
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	4615      	mov	r5, r2
 8003dda:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003ddc:	7973      	ldrb	r3, [r6, #5]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d03e      	beq.n	8003e60 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8003de2:	2301      	movs	r3, #1
 8003de4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff ff72 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003dec:	4a1e      	ldr	r2, [pc, #120]	; (8003e68 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003dee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003dfa:	211d      	movs	r1, #29
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f7ff febf 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003e02:	0a21      	lsrs	r1, r4, #8
 8003e04:	4630      	mov	r0, r6
 8003e06:	f7ff febb 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003e0a:	b2e1      	uxtb	r1, r4
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f7ff feb7 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003e12:	2100      	movs	r1, #0
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff feb3 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e1a:	2400      	movs	r4, #0
 8003e1c:	e006      	b.n	8003e2c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e1e:	4629      	mov	r1, r5
 8003e20:	4630      	mov	r0, r6
 8003e22:	f7ff fee9 	bl	8003bf8 <SUBGHZSPI_Receive>
      pData++;
 8003e26:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003e28:	3401      	adds	r4, #1
 8003e2a:	b2a4      	uxth	r4, r4
 8003e2c:	42bc      	cmp	r4, r7
 8003e2e:	d3f6      	bcc.n	8003e1e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8003e32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff ff1a 	bl	8003c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e44:	68b3      	ldr	r3, [r6, #8]
 8003e46:	b90b      	cbnz	r3, 8003e4c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8003e48:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003e50:	2300      	movs	r3, #0
 8003e52:	7173      	strb	r3, [r6, #5]
}
 8003e54:	4640      	mov	r0, r8
 8003e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003e5a:	f04f 0802 	mov.w	r8, #2
 8003e5e:	e7f9      	b.n	8003e54 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8003e60:	f04f 0802 	mov.w	r8, #2
 8003e64:	e7f6      	b.n	8003e54 <HAL_SUBGHZ_ReadRegisters+0x90>
 8003e66:	bf00      	nop
 8003e68:	58000400 	.word	0x58000400

08003e6c <HAL_SUBGHZ_ExecSetCmd>:
{
 8003e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e70:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e72:	7980      	ldrb	r0, [r0, #6]
 8003e74:	fa5f f980 	uxtb.w	r9, r0
 8003e78:	f1b9 0f01 	cmp.w	r9, #1
 8003e7c:	d143      	bne.n	8003f06 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4617      	mov	r7, r2
 8003e82:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8003e84:	796b      	ldrb	r3, [r5, #5]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d040      	beq.n	8003f0c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7ff ff1e 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003e94:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003e98:	d005      	beq.n	8003ea6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8003e9a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	712b      	strb	r3, [r5, #4]
 8003ea4:	e001      	b.n	8003eaa <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003eac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003eb8:	4641      	mov	r1, r8
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f7ff fe60 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e005      	b.n	8003ed0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003ec4:	5d39      	ldrb	r1, [r7, r4]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7ff fe5a 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003ecc:	3401      	adds	r4, #1
 8003ece:	b2a4      	uxth	r4, r4
 8003ed0:	42b4      	cmp	r4, r6
 8003ed2:	d3f7      	bcc.n	8003ec4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003ed4:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8003ed6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8003ee2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8003ee6:	d10a      	bne.n	8003efe <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ee8:	68ab      	ldr	r3, [r5, #8]
 8003eea:	b90b      	cbnz	r3, 8003ef0 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8003eec:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	716b      	strb	r3, [r5, #5]
}
 8003ef8:	4648      	mov	r0, r9
 8003efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7ff feba 	bl	8003c78 <SUBGHZ_WaitOnBusy>
 8003f04:	e7f0      	b.n	8003ee8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8003f06:	f04f 0902 	mov.w	r9, #2
 8003f0a:	e7f5      	b.n	8003ef8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8003f0c:	f04f 0902 	mov.w	r9, #2
 8003f10:	e7f2      	b.n	8003ef8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8003f12:	bf00      	nop
 8003f14:	58000400 	.word	0x58000400

08003f18 <HAL_SUBGHZ_ExecGetCmd>:
{
 8003f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f1e:	7980      	ldrb	r0, [r0, #6]
 8003f20:	fa5f f880 	uxtb.w	r8, r0
 8003f24:	f1b8 0f01 	cmp.w	r8, #1
 8003f28:	d139      	bne.n	8003f9e <HAL_SUBGHZ_ExecGetCmd+0x86>
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	4615      	mov	r5, r2
 8003f2e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8003f30:	7973      	ldrb	r3, [r6, #5]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d036      	beq.n	8003fa4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8003f36:	2301      	movs	r3, #1
 8003f38:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff fec8 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f40:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003f42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003f4e:	4621      	mov	r1, r4
 8003f50:	4630      	mov	r0, r6
 8003f52:	f7ff fe15 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003f56:	2100      	movs	r1, #0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff fe11 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f5e:	2400      	movs	r4, #0
 8003f60:	e006      	b.n	8003f70 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003f62:	4629      	mov	r1, r5
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7ff fe47 	bl	8003bf8 <SUBGHZSPI_Receive>
      pData++;
 8003f6a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8003f6c:	3401      	adds	r4, #1
 8003f6e:	b2a4      	uxth	r4, r4
 8003f70:	42bc      	cmp	r4, r7
 8003f72:	d3f6      	bcc.n	8003f62 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003f74:	4a0d      	ldr	r2, [pc, #52]	; (8003fac <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8003f76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f82:	4630      	mov	r0, r6
 8003f84:	f7ff fe78 	bl	8003c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f88:	68b3      	ldr	r3, [r6, #8]
 8003f8a:	b90b      	cbnz	r3, 8003f90 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8003f8c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003f90:	2301      	movs	r3, #1
 8003f92:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8003f94:	2300      	movs	r3, #0
 8003f96:	7173      	strb	r3, [r6, #5]
}
 8003f98:	4640      	mov	r0, r8
 8003f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003f9e:	f04f 0802 	mov.w	r8, #2
 8003fa2:	e7f9      	b.n	8003f98 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8003fa4:	f04f 0802 	mov.w	r8, #2
 8003fa8:	e7f6      	b.n	8003f98 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8003faa:	bf00      	nop
 8003fac:	58000400 	.word	0x58000400

08003fb0 <HAL_SUBGHZ_IRQHandler>:
{
 8003fb0:	b530      	push	{r4, r5, lr}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	aa01      	add	r2, sp, #4
 8003fc0:	2112      	movs	r1, #18
 8003fc2:	f7ff ffa9 	bl	8003f18 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003fc6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003fca:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8003fce:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	aa01      	add	r2, sp, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff ff47 	bl	8003e6c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003fde:	f014 0f01 	tst.w	r4, #1
 8003fe2:	d123      	bne.n	800402c <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003fe4:	f014 0f02 	tst.w	r4, #2
 8003fe8:	d124      	bne.n	8004034 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003fea:	f014 0f04 	tst.w	r4, #4
 8003fee:	d125      	bne.n	800403c <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003ff0:	f014 0f08 	tst.w	r4, #8
 8003ff4:	d126      	bne.n	8004044 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003ff6:	f014 0f10 	tst.w	r4, #16
 8003ffa:	d127      	bne.n	800404c <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003ffc:	f014 0f20 	tst.w	r4, #32
 8004000:	d128      	bne.n	8004054 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004002:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004006:	d129      	bne.n	800405c <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004008:	f014 0f80 	tst.w	r4, #128	; 0x80
 800400c:	d006      	beq.n	800401c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800400e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004012:	d027      	beq.n	8004064 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004014:	2101      	movs	r1, #1
 8004016:	4628      	mov	r0, r5
 8004018:	f003 fb8a 	bl	8007730 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800401c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004020:	d125      	bne.n	800406e <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004022:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8004026:	d126      	bne.n	8004076 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8004028:	b003      	add	sp, #12
 800402a:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800402c:	4628      	mov	r0, r5
 800402e:	f003 fb67 	bl	8007700 <HAL_SUBGHZ_TxCpltCallback>
 8004032:	e7d7      	b.n	8003fe4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004034:	4628      	mov	r0, r5
 8004036:	f003 fb6b 	bl	8007710 <HAL_SUBGHZ_RxCpltCallback>
 800403a:	e7d6      	b.n	8003fea <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800403c:	4628      	mov	r0, r5
 800403e:	f003 fb9b 	bl	8007778 <HAL_SUBGHZ_PreambleDetectedCallback>
 8004042:	e7d5      	b.n	8003ff0 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004044:	4628      	mov	r0, r5
 8004046:	f003 fb9f 	bl	8007788 <HAL_SUBGHZ_SyncWordValidCallback>
 800404a:	e7d4      	b.n	8003ff6 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800404c:	4628      	mov	r0, r5
 800404e:	f003 fba3 	bl	8007798 <HAL_SUBGHZ_HeaderValidCallback>
 8004052:	e7d3      	b.n	8003ffc <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004054:	4628      	mov	r0, r5
 8004056:	f003 fb87 	bl	8007768 <HAL_SUBGHZ_HeaderErrorCallback>
 800405a:	e7d2      	b.n	8004002 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800405c:	4628      	mov	r0, r5
 800405e:	f003 fb5f 	bl	8007720 <HAL_SUBGHZ_CRCErrorCallback>
 8004062:	e7d1      	b.n	8004008 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004064:	2100      	movs	r1, #0
 8004066:	4628      	mov	r0, r5
 8004068:	f003 fb62 	bl	8007730 <HAL_SUBGHZ_CADStatusCallback>
 800406c:	e7d6      	b.n	800401c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800406e:	4628      	mov	r0, r5
 8004070:	f003 fb70 	bl	8007754 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004074:	e7d5      	b.n	8004022 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004076:	4628      	mov	r0, r5
 8004078:	f003 fb96 	bl	80077a8 <HAL_SUBGHZ_LrFhssHopCallback>
}
 800407c:	e7d4      	b.n	8004028 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08004080 <HAL_SUBGHZ_WriteBuffer>:
{
 8004080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004084:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004086:	7980      	ldrb	r0, [r0, #6]
 8004088:	fa5f f880 	uxtb.w	r8, r0
 800408c:	f1b8 0f01 	cmp.w	r8, #1
 8004090:	d138      	bne.n	8004104 <HAL_SUBGHZ_WriteBuffer+0x84>
 8004092:	460c      	mov	r4, r1
 8004094:	4617      	mov	r7, r2
 8004096:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004098:	796b      	ldrb	r3, [r5, #5]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d035      	beq.n	800410a <HAL_SUBGHZ_WriteBuffer+0x8a>
 800409e:	2301      	movs	r3, #1
 80040a0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80040a2:	4628      	mov	r0, r5
 80040a4:	f7ff fe14 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80040aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80040ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80040b6:	210e      	movs	r1, #14
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7ff fd61 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7ff fd5d 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040c6:	2400      	movs	r4, #0
 80040c8:	e005      	b.n	80040d6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80040ca:	5d39      	ldrb	r1, [r7, r4]
 80040cc:	4628      	mov	r0, r5
 80040ce:	f7ff fd57 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80040d2:	3401      	adds	r4, #1
 80040d4:	b2a4      	uxth	r4, r4
 80040d6:	42b4      	cmp	r4, r6
 80040d8:	d3f7      	bcc.n	80040ca <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80040da:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80040dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80040e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80040e8:	4628      	mov	r0, r5
 80040ea:	f7ff fdc5 	bl	8003c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80040ee:	68ab      	ldr	r3, [r5, #8]
 80040f0:	b90b      	cbnz	r3, 80040f6 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80040f2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80040f6:	2301      	movs	r3, #1
 80040f8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80040fa:	2300      	movs	r3, #0
 80040fc:	716b      	strb	r3, [r5, #5]
}
 80040fe:	4640      	mov	r0, r8
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004104:	f04f 0802 	mov.w	r8, #2
 8004108:	e7f9      	b.n	80040fe <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800410a:	f04f 0802 	mov.w	r8, #2
 800410e:	e7f6      	b.n	80040fe <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004110:	58000400 	.word	0x58000400

08004114 <HAL_SUBGHZ_ReadBuffer>:
{
 8004114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004118:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800411a:	7980      	ldrb	r0, [r0, #6]
 800411c:	fa5f f880 	uxtb.w	r8, r0
 8004120:	f1b8 0f01 	cmp.w	r8, #1
 8004124:	d13d      	bne.n	80041a2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004126:	460c      	mov	r4, r1
 8004128:	4615      	mov	r5, r2
 800412a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800412c:	7973      	ldrb	r3, [r6, #5]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d03a      	beq.n	80041a8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8004132:	2301      	movs	r3, #1
 8004134:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff fdca 	bl	8003cd0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800413e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800414a:	211e      	movs	r1, #30
 800414c:	4630      	mov	r0, r6
 800414e:	f7ff fd17 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004152:	4621      	mov	r1, r4
 8004154:	4630      	mov	r0, r6
 8004156:	f7ff fd13 	bl	8003b80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800415a:	2100      	movs	r1, #0
 800415c:	4630      	mov	r0, r6
 800415e:	f7ff fd0f 	bl	8003b80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004162:	2400      	movs	r4, #0
 8004164:	e006      	b.n	8004174 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004166:	4629      	mov	r1, r5
 8004168:	4630      	mov	r0, r6
 800416a:	f7ff fd45 	bl	8003bf8 <SUBGHZSPI_Receive>
      pData++;
 800416e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004170:	3401      	adds	r4, #1
 8004172:	b2a4      	uxth	r4, r4
 8004174:	42bc      	cmp	r4, r7
 8004176:	d3f6      	bcc.n	8004166 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800417a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800417e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004186:	4630      	mov	r0, r6
 8004188:	f7ff fd76 	bl	8003c78 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800418c:	68b3      	ldr	r3, [r6, #8]
 800418e:	b90b      	cbnz	r3, 8004194 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8004190:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004194:	2301      	movs	r3, #1
 8004196:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004198:	2300      	movs	r3, #0
 800419a:	7173      	strb	r3, [r6, #5]
}
 800419c:	4640      	mov	r0, r8
 800419e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80041a2:	f04f 0802 	mov.w	r8, #2
 80041a6:	e7f9      	b.n	800419c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80041a8:	f04f 0802 	mov.w	r8, #2
 80041ac:	e7f6      	b.n	800419c <HAL_SUBGHZ_ReadBuffer+0x88>
 80041ae:	bf00      	nop
 80041b0:	58000400 	.word	0x58000400

080041b4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80041b4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	e852 3f00 	ldrex	r3, [r2]
 80041ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	e842 3100 	strex	r1, r3, [r2]
 80041c2:	2900      	cmp	r1, #0
 80041c4:	d1f6      	bne.n	80041b4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80041c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	f102 0308 	add.w	r3, r2, #8
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	3208      	adds	r2, #8
 80041d6:	e842 3100 	strex	r1, r3, [r2]
 80041da:	2900      	cmp	r1, #0
 80041dc:	d1f3      	bne.n	80041c6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041de:	2320      	movs	r3, #32
 80041e0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80041e4:	4770      	bx	lr

080041e6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	e852 3f00 	ldrex	r3, [r2]
 80041ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	e842 3100 	strex	r1, r3, [r2]
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d1f6      	bne.n	80041e6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041f8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	f102 0308 	add.w	r3, r2, #8
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	3208      	adds	r2, #8
 800420c:	e842 3100 	strex	r1, r3, [r2]
 8004210:	2900      	cmp	r1, #0
 8004212:	d1f1      	bne.n	80041f8 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004216:	2b01      	cmp	r3, #1
 8004218:	d006      	beq.n	8004228 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421a:	2320      	movs	r3, #32
 800421c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	2300      	movs	r3, #0
 8004222:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004224:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004226:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004228:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	e852 3f00 	ldrex	r3, [r2]
 800422e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	e842 3100 	strex	r1, r3, [r2]
 8004236:	2900      	cmp	r1, #0
 8004238:	d1f6      	bne.n	8004228 <UART_EndRxTransfer+0x42>
 800423a:	e7ee      	b.n	800421a <UART_EndRxTransfer+0x34>

0800423c <HAL_UART_Transmit_DMA>:
{
 800423c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800423e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004242:	2a20      	cmp	r2, #32
 8004244:	d13d      	bne.n	80042c2 <HAL_UART_Transmit_DMA+0x86>
{
 8004246:	b510      	push	{r4, lr}
 8004248:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800424a:	2900      	cmp	r1, #0
 800424c:	d03b      	beq.n	80042c6 <HAL_UART_Transmit_DMA+0x8a>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03b      	beq.n	80042ca <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8004252:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004254:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8004258:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	2200      	movs	r2, #0
 800425e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004262:	2221      	movs	r2, #33	; 0x21
 8004264:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8004268:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800426a:	b1ca      	cbz	r2, 80042a0 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800426c:	4918      	ldr	r1, [pc, #96]	; (80042d0 <HAL_UART_Transmit_DMA+0x94>)
 800426e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004270:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004272:	4918      	ldr	r1, [pc, #96]	; (80042d4 <HAL_UART_Transmit_DMA+0x98>)
 8004274:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004276:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004278:	4917      	ldr	r1, [pc, #92]	; (80042d8 <HAL_UART_Transmit_DMA+0x9c>)
 800427a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800427c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800427e:	2100      	movs	r1, #0
 8004280:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004282:	6802      	ldr	r2, [r0, #0]
 8004284:	3228      	adds	r2, #40	; 0x28
 8004286:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004288:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800428a:	f7fd ff85 	bl	8002198 <HAL_DMA_Start_IT>
 800428e:	b138      	cbz	r0, 80042a0 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004290:	2310      	movs	r3, #16
 8004292:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8004296:	2320      	movs	r3, #32
 8004298:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 800429c:	2001      	movs	r0, #1
 800429e:	e00f      	b.n	80042c0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	2240      	movs	r2, #64	; 0x40
 80042a4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f102 0308 	add.w	r3, r2, #8
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	3208      	adds	r2, #8
 80042b6:	e842 3100 	strex	r1, r3, [r2]
 80042ba:	2900      	cmp	r1, #0
 80042bc:	d1f3      	bne.n	80042a6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80042be:	2000      	movs	r0, #0
}
 80042c0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80042c2:	2002      	movs	r0, #2
}
 80042c4:	4770      	bx	lr
      return HAL_ERROR;
 80042c6:	2001      	movs	r0, #1
 80042c8:	e7fa      	b.n	80042c0 <HAL_UART_Transmit_DMA+0x84>
 80042ca:	2001      	movs	r0, #1
 80042cc:	e7f8      	b.n	80042c0 <HAL_UART_Transmit_DMA+0x84>
 80042ce:	bf00      	nop
 80042d0:	080042dd 	.word	0x080042dd
 80042d4:	0800434b 	.word	0x0800434b
 80042d8:	08004357 	.word	0x08004357

080042dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042dc:	b508      	push	{r3, lr}
 80042de:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f013 0f20 	tst.w	r3, #32
 80042ea:	d118      	bne.n	800431e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	f102 0308 	add.w	r3, r2, #8
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	3208      	adds	r2, #8
 8004302:	e842 3100 	strex	r1, r3, [r2]
 8004306:	2900      	cmp	r1, #0
 8004308:	d1f3      	bne.n	80042f2 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800430a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	e852 3f00 	ldrex	r3, [r2]
 8004310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	e842 3100 	strex	r1, r3, [r2]
 8004318:	2900      	cmp	r1, #0
 800431a:	d1f6      	bne.n	800430a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800431c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800431e:	f7fc ffa9 	bl	8001274 <HAL_UART_TxCpltCallback>
}
 8004322:	e7fb      	b.n	800431c <UART_DMATransmitCplt+0x40>

08004324 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004324:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004326:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	e852 3f00 	ldrex	r3, [r2]
 800432c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	e842 3100 	strex	r1, r3, [r2]
 8004334:	2900      	cmp	r1, #0
 8004336:	d1f6      	bne.n	8004326 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004338:	2320      	movs	r3, #32
 800433a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004342:	f7fc ff97 	bl	8001274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004346:	bd08      	pop	{r3, pc}

08004348 <HAL_UART_TxHalfCpltCallback>:
}
 8004348:	4770      	bx	lr

0800434a <UART_DMATxHalfCplt>:
{
 800434a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800434c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800434e:	f7ff fffb 	bl	8004348 <HAL_UART_TxHalfCpltCallback>
}
 8004352:	bd08      	pop	{r3, pc}

08004354 <HAL_UART_ErrorCallback>:
}
 8004354:	4770      	bx	lr

08004356 <UART_DMAError>:
{
 8004356:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004358:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800435a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800435e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f013 0f80 	tst.w	r3, #128	; 0x80
 800436a:	d001      	beq.n	8004370 <UART_DMAError+0x1a>
 800436c:	2a21      	cmp	r2, #33	; 0x21
 800436e:	d010      	beq.n	8004392 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004378:	d001      	beq.n	800437e <UART_DMAError+0x28>
 800437a:	2d22      	cmp	r5, #34	; 0x22
 800437c:	d010      	beq.n	80043a0 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800437e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff ffe2 	bl	8004354 <HAL_UART_ErrorCallback>
}
 8004390:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff ff0b 	bl	80041b4 <UART_EndTxTransfer>
 800439e:	e7e7      	b.n	8004370 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7ff ff1d 	bl	80041e6 <UART_EndRxTransfer>
 80043ac:	e7e7      	b.n	800437e <UART_DMAError+0x28>

080043ae <UART_DMAAbortOnError>:
{
 80043ae:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80043b8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80043bc:	f7ff ffca 	bl	8004354 <HAL_UART_ErrorCallback>
}
 80043c0:	bd08      	pop	{r3, pc}

080043c2 <HAL_UARTEx_RxEventCallback>:
}
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_IRQHandler>:
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043c8:	6801      	ldr	r1, [r0, #0]
 80043ca:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043cc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ce:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043d0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80043d4:	401a      	ands	r2, r3
 80043d6:	d108      	bne.n	80043ea <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043d8:	f013 0f20 	tst.w	r3, #32
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043de:	f010 0f20 	tst.w	r0, #32
 80043e2:	d134      	bne.n	800444e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043e4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80043e8:	d131      	bne.n	800444e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80043ea:	b12a      	cbz	r2, 80043f8 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043ec:	4a99      	ldr	r2, [pc, #612]	; (8004654 <HAL_UART_IRQHandler+0x290>)
 80043ee:	402a      	ands	r2, r5
 80043f0:	d133      	bne.n	800445a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043f2:	4e99      	ldr	r6, [pc, #612]	; (8004658 <HAL_UART_IRQHandler+0x294>)
 80043f4:	4230      	tst	r0, r6
 80043f6:	d130      	bne.n	800445a <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	f000 80c6 	beq.w	800458c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004400:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004404:	d003      	beq.n	800440e <HAL_UART_IRQHandler+0x4a>
 8004406:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800440a:	f040 8165 	bne.w	80046d8 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800440e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004412:	d007      	beq.n	8004424 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004414:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004418:	f040 8165 	bne.w	80046e6 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800441c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8004420:	f040 8161 	bne.w	80046e6 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004424:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x6e>
 800442a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800442e:	f040 8161 	bne.w	80046f4 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004432:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004436:	d003      	beq.n	8004440 <HAL_UART_IRQHandler+0x7c>
 8004438:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800443c:	f040 815e 	bne.w	80046fc <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004440:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004444:	d002      	beq.n	800444c <HAL_UART_IRQHandler+0x88>
 8004446:	2800      	cmp	r0, #0
 8004448:	f2c0 815c 	blt.w	8004704 <HAL_UART_IRQHandler+0x340>
}
 800444c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800444e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0fb      	beq.n	800444c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8004454:	4620      	mov	r0, r4
 8004456:	4798      	blx	r3
      return;
 8004458:	e7f8      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800445a:	f013 0f01 	tst.w	r3, #1
 800445e:	d009      	beq.n	8004474 <HAL_UART_IRQHandler+0xb0>
 8004460:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004464:	d006      	beq.n	8004474 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004466:	2601      	movs	r6, #1
 8004468:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800446e:	4331      	orrs	r1, r6
 8004470:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004474:	f013 0f02 	tst.w	r3, #2
 8004478:	d00b      	beq.n	8004492 <HAL_UART_IRQHandler+0xce>
 800447a:	f015 0f01 	tst.w	r5, #1
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004480:	6821      	ldr	r1, [r4, #0]
 8004482:	2602      	movs	r6, #2
 8004484:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004486:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800448a:	f041 0104 	orr.w	r1, r1, #4
 800448e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004492:	f013 0f04 	tst.w	r3, #4
 8004496:	d00b      	beq.n	80044b0 <HAL_UART_IRQHandler+0xec>
 8004498:	f015 0f01 	tst.w	r5, #1
 800449c:	d008      	beq.n	80044b0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800449e:	6821      	ldr	r1, [r4, #0]
 80044a0:	2604      	movs	r6, #4
 80044a2:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80044a8:	f041 0102 	orr.w	r1, r1, #2
 80044ac:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b0:	f013 0f08 	tst.w	r3, #8
 80044b4:	d00b      	beq.n	80044ce <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044b6:	f010 0f20 	tst.w	r0, #32
 80044ba:	d100      	bne.n	80044be <HAL_UART_IRQHandler+0xfa>
 80044bc:	b13a      	cbz	r2, 80044ce <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044be:	6822      	ldr	r2, [r4, #0]
 80044c0:	2108      	movs	r1, #8
 80044c2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044c4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80044c8:	430a      	orrs	r2, r1
 80044ca:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80044d2:	d00c      	beq.n	80044ee <HAL_UART_IRQHandler+0x12a>
 80044d4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80044d8:	d009      	beq.n	80044ee <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044e0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044e2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ee:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d0aa      	beq.n	800444c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044f6:	f013 0f20 	tst.w	r3, #32
 80044fa:	d009      	beq.n	8004510 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044fc:	f010 0f20 	tst.w	r0, #32
 8004500:	d102      	bne.n	8004508 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004502:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004506:	d003      	beq.n	8004510 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8004508:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800450a:	b10b      	cbz	r3, 8004510 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800450c:	4620      	mov	r0, r4
 800450e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004510:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f013 0f40 	tst.w	r3, #64	; 0x40
 800451c:	d102      	bne.n	8004524 <HAL_UART_IRQHandler+0x160>
 800451e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8004522:	d02c      	beq.n	800457e <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff fe5e 	bl	80041e6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004532:	d020      	beq.n	8004576 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004534:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	f102 0308 	add.w	r3, r2, #8
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	3208      	adds	r2, #8
 8004544:	e842 3100 	strex	r1, r3, [r2]
 8004548:	2900      	cmp	r1, #0
 800454a:	d1f3      	bne.n	8004534 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800454c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004550:	b16b      	cbz	r3, 800456e <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004552:	4a42      	ldr	r2, [pc, #264]	; (800465c <HAL_UART_IRQHandler+0x298>)
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004556:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800455a:	f7fd fea3 	bl	80022a4 <HAL_DMA_Abort_IT>
 800455e:	2800      	cmp	r0, #0
 8004560:	f43f af74 	beq.w	800444c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004564:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004568:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800456a:	4798      	blx	r3
 800456c:	e76e      	b.n	800444c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800456e:	4620      	mov	r0, r4
 8004570:	f7ff fef0 	bl	8004354 <HAL_UART_ErrorCallback>
 8004574:	e76a      	b.n	800444c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff feec 	bl	8004354 <HAL_UART_ErrorCallback>
 800457c:	e766      	b.n	800444c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff fee8 	bl	8004354 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800458a:	e75f      	b.n	800444c <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800458c:	f013 0f10 	tst.w	r3, #16
 8004590:	f43f af36 	beq.w	8004400 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004594:	f010 0f10 	tst.w	r0, #16
 8004598:	f43f af32 	beq.w	8004400 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800459c:	2310      	movs	r3, #16
 800459e:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045a8:	d05a      	beq.n	8004660 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f43f af49 	beq.w	800444c <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80045be:	4299      	cmp	r1, r3
 80045c0:	f67f af44 	bls.w	800444c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80045c4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f013 0f20 	tst.w	r3, #32
 80045d0:	d132      	bne.n	8004638 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	e852 3f00 	ldrex	r3, [r2]
 80045d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	e842 3100 	strex	r1, r3, [r2]
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d1f6      	bne.n	80045d2 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	f102 0308 	add.w	r3, r2, #8
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	3208      	adds	r2, #8
 80045f4:	e842 3100 	strex	r1, r3, [r2]
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d1f3      	bne.n	80045e4 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	f102 0308 	add.w	r3, r2, #8
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	3208      	adds	r2, #8
 800460c:	e842 3100 	strex	r1, r3, [r2]
 8004610:	2900      	cmp	r1, #0
 8004612:	d1f3      	bne.n	80045fc <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8004614:	2320      	movs	r3, #32
 8004616:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	2300      	movs	r3, #0
 800461c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	e852 3f00 	ldrex	r3, [r2]
 8004624:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	e842 3100 	strex	r1, r3, [r2]
 800462c:	2900      	cmp	r1, #0
 800462e:	d1f6      	bne.n	800461e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004630:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004634:	f7fd fdfc 	bl	8002230 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004638:	2302      	movs	r3, #2
 800463a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800463c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004640:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ac9      	subs	r1, r1, r3
 8004648:	b289      	uxth	r1, r1
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff feb9 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
      return;
 8004650:	e6fc      	b.n	800444c <HAL_UART_IRQHandler+0x88>
 8004652:	bf00      	nop
 8004654:	10000001 	.word	0x10000001
 8004658:	04000120 	.word	0x04000120
 800465c:	080043af 	.word	0x080043af
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004660:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004664:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004668:	b29b      	uxth	r3, r3
 800466a:	1ac9      	subs	r1, r1, r3
 800466c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800466e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	f43f aee9 	beq.w	800444c <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800467a:	2900      	cmp	r1, #0
 800467c:	f43f aee6 	beq.w	800444c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004680:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	e852 3f00 	ldrex	r3, [r2]
 8004686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	e842 3000 	strex	r0, r3, [r2]
 800468e:	2800      	cmp	r0, #0
 8004690:	d1f6      	bne.n	8004680 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004692:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	f102 0308 	add.w	r3, r2, #8
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	3208      	adds	r2, #8
 80046a6:	e842 3000 	strex	r0, r3, [r2]
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d1f1      	bne.n	8004692 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 80046ae:	2320      	movs	r3, #32
 80046b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b4:	2300      	movs	r3, #0
 80046b6:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80046b8:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	e852 3f00 	ldrex	r3, [r2]
 80046c0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	e842 3000 	strex	r0, r3, [r2]
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1f6      	bne.n	80046ba <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046cc:	2302      	movs	r3, #2
 80046ce:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff fe76 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
      return;
 80046d6:	e6b9      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046dc:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80046de:	4620      	mov	r0, r4
 80046e0:	f000 fe62 	bl	80053a8 <HAL_UARTEx_WakeupCallback>
    return;
 80046e4:	e6b2      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80046e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f43f aeaf 	beq.w	800444c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80046ee:	4620      	mov	r0, r4
 80046f0:	4798      	blx	r3
    return;
 80046f2:	e6ab      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff fe15 	bl	8004324 <UART_EndTransmit_IT>
    return;
 80046fa:	e6a7      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 fe55 	bl	80053ac <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004702:	e6a3      	b.n	800444c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004704:	4620      	mov	r0, r4
 8004706:	f000 fe50 	bl	80053aa <HAL_UARTEx_RxFifoFullCallback>
    return;
 800470a:	e69f      	b.n	800444c <HAL_UART_IRQHandler+0x88>

0800470c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800470c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800470e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004712:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004716:	2a22      	cmp	r2, #34	; 0x22
 8004718:	d005      	beq.n	8004726 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800471a:	6802      	ldr	r2, [r0, #0]
 800471c:	6993      	ldr	r3, [r2, #24]
 800471e:	f043 0308 	orr.w	r3, r3, #8
 8004722:	6193      	str	r3, [r2, #24]
  }
}
 8004724:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004726:	6802      	ldr	r2, [r0, #0]
 8004728:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800472a:	b2db      	uxtb	r3, r3
 800472c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800472e:	400b      	ands	r3, r1
 8004730:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004732:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004734:	3301      	adds	r3, #1
 8004736:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004738:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004746:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e9      	bne.n	8004724 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004750:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	e852 3f00 	ldrex	r3, [r2]
 8004756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	e842 3100 	strex	r1, r3, [r2]
 800475e:	2900      	cmp	r1, #0
 8004760:	d1f6      	bne.n	8004750 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	f102 0308 	add.w	r3, r2, #8
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	3208      	adds	r2, #8
 8004772:	e842 3100 	strex	r1, r3, [r2]
 8004776:	2900      	cmp	r1, #0
 8004778:	d1f3      	bne.n	8004762 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800477a:	2320      	movs	r3, #32
 800477c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004784:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004786:	6803      	ldr	r3, [r0, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <UART_RxISR_8BIT+0xd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00c      	beq.n	80047a8 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004794:	d008      	beq.n	80047a8 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004796:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	e852 3f00 	ldrex	r3, [r2]
 800479c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	e842 3100 	strex	r1, r3, [r2]
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d1f6      	bne.n	8004796 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d116      	bne.n	80047dc <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	2300      	movs	r3, #0
 80047b0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	e852 3f00 	ldrex	r3, [r2]
 80047b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	e842 3100 	strex	r1, r3, [r2]
 80047c0:	2900      	cmp	r1, #0
 80047c2:	d1f6      	bne.n	80047b2 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047c4:	6803      	ldr	r3, [r0, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	f012 0f10 	tst.w	r2, #16
 80047cc:	d001      	beq.n	80047d2 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ce:	2210      	movs	r2, #16
 80047d0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80047d6:	f7ff fdf4 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
 80047da:	e7a3      	b.n	8004724 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80047dc:	f7fc fd5a 	bl	8001294 <HAL_UART_RxCpltCallback>
 80047e0:	e7a0      	b.n	8004724 <UART_RxISR_8BIT+0x18>
 80047e2:	bf00      	nop
 80047e4:	40008000 	.word	0x40008000

080047e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047e8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047ea:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	d005      	beq.n	8004802 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047f6:	6802      	ldr	r2, [r0, #0]
 80047f8:	6993      	ldr	r3, [r2, #24]
 80047fa:	f043 0308 	orr.w	r3, r3, #8
 80047fe:	6193      	str	r3, [r2, #24]
  }
}
 8004800:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004802:	6803      	ldr	r3, [r0, #0]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004806:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8004808:	4013      	ands	r3, r2
 800480a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800480c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800480e:	3302      	adds	r3, #2
 8004810:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004812:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29b      	uxth	r3, r3
 800481c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004820:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ea      	bne.n	8004800 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800482a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	e852 3f00 	ldrex	r3, [r2]
 8004830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	e842 3100 	strex	r1, r3, [r2]
 8004838:	2900      	cmp	r1, #0
 800483a:	d1f6      	bne.n	800482a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	f102 0308 	add.w	r3, r2, #8
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	3208      	adds	r2, #8
 800484c:	e842 3100 	strex	r1, r3, [r2]
 8004850:	2900      	cmp	r1, #0
 8004852:	d1f3      	bne.n	800483c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8004854:	2320      	movs	r3, #32
 8004856:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485e:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	4a16      	ldr	r2, [pc, #88]	; (80048bc <UART_RxISR_16BIT+0xd4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00c      	beq.n	8004882 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800486e:	d008      	beq.n	8004882 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004870:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	e852 3f00 	ldrex	r3, [r2]
 8004876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	e842 3100 	strex	r1, r3, [r2]
 800487e:	2900      	cmp	r1, #0
 8004880:	d1f6      	bne.n	8004870 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004882:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d116      	bne.n	80048b6 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	2300      	movs	r3, #0
 800488a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	e852 3f00 	ldrex	r3, [r2]
 8004892:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	e842 3100 	strex	r1, r3, [r2]
 800489a:	2900      	cmp	r1, #0
 800489c:	d1f6      	bne.n	800488c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800489e:	6803      	ldr	r3, [r0, #0]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	f012 0f10 	tst.w	r2, #16
 80048a6:	d001      	beq.n	80048ac <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048a8:	2210      	movs	r2, #16
 80048aa:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ac:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80048b0:	f7ff fd87 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
 80048b4:	e7a4      	b.n	8004800 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80048b6:	f7fc fced 	bl	8001294 <HAL_UART_RxCpltCallback>
 80048ba:	e7a1      	b.n	8004800 <UART_RxISR_16BIT+0x18>
 80048bc:	40008000 	.word	0x40008000

080048c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80048c4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048c8:	6803      	ldr	r3, [r0, #0]
 80048ca:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048cc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048d0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80048d8:	2a22      	cmp	r2, #34	; 0x22
 80048da:	d005      	beq.n	80048e8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	619a      	str	r2, [r3, #24]
  }
}
 80048e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80048ea:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048ee:	e008      	b.n	8004902 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d14c      	bne.n	8004992 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80048f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04e      	beq.n	80049a0 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004902:	2f00      	cmp	r7, #0
 8004904:	f000 809a 	beq.w	8004a3c <UART_RxISR_8BIT_FIFOEN+0x17c>
 8004908:	f015 0f20 	tst.w	r5, #32
 800490c:	f000 8096 	beq.w	8004a3c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004914:	b2f3      	uxtb	r3, r6
 8004916:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004918:	400b      	ands	r3, r1
 800491a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800491c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800491e:	3301      	adds	r3, #1
 8004920:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004922:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29b      	uxth	r3, r3
 800492c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004934:	f015 0f07 	tst.w	r5, #7
 8004938:	d0de      	beq.n	80048f8 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800493a:	f015 0f01 	tst.w	r5, #1
 800493e:	d009      	beq.n	8004954 <UART_RxISR_8BIT_FIFOEN+0x94>
 8004940:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004944:	d006      	beq.n	8004954 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004946:	2201      	movs	r2, #1
 8004948:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800494a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004954:	f015 0f02 	tst.w	r5, #2
 8004958:	d00b      	beq.n	8004972 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800495a:	f018 0f01 	tst.w	r8, #1
 800495e:	d008      	beq.n	8004972 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004966:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004972:	f015 0f04 	tst.w	r5, #4
 8004976:	d0bb      	beq.n	80048f0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8004978:	f018 0f01 	tst.w	r8, #1
 800497c:	d0b8      	beq.n	80048f0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	2204      	movs	r2, #4
 8004982:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004984:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004990:	e7ae      	b.n	80048f0 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004992:	4620      	mov	r0, r4
 8004994:	f7ff fcde 	bl	8004354 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800499e:	e7ab      	b.n	80048f8 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	e852 3f00 	ldrex	r3, [r2]
 80049a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	e842 3100 	strex	r1, r3, [r2]
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d1f6      	bne.n	80049a0 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	f102 0308 	add.w	r3, r2, #8
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	3208      	adds	r2, #8
 80049c6:	e842 3100 	strex	r1, r3, [r2]
 80049ca:	2900      	cmp	r1, #0
 80049cc:	d1f1      	bne.n	80049b2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80049ce:	2320      	movs	r3, #32
 80049d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d8:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80049e8:	d106      	bne.n	80049f8 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d00d      	beq.n	8004a0c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7fc fc4f 	bl	8001294 <HAL_UART_RxCpltCallback>
 80049f6:	e784      	b.n	8004902 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	e852 3f00 	ldrex	r3, [r2]
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	e842 3100 	strex	r1, r3, [r2]
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d1f6      	bne.n	80049f8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004a0a:	e7ee      	b.n	80049ea <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	e852 3f00 	ldrex	r3, [r2]
 8004a16:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	e842 3100 	strex	r1, r3, [r2]
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	d1f6      	bne.n	8004a10 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	f012 0f10 	tst.w	r2, #16
 8004a2a:	d001      	beq.n	8004a30 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a30:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff fcc4 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
 8004a3a:	e762      	b.n	8004902 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004a3c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004a40:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f43f af4e 	beq.w	80048e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004a48:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	f67f af49 	bls.w	80048e4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	f102 0308 	add.w	r3, r2, #8
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	3208      	adds	r2, #8
 8004a62:	e842 3100 	strex	r1, r3, [r2]
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d1f3      	bne.n	8004a52 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8004a6c:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	e852 3f00 	ldrex	r3, [r2]
 8004a74:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	e842 3100 	strex	r1, r3, [r2]
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	d1f6      	bne.n	8004a6e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8004a80:	e730      	b.n	80048e4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8004a82:	bf00      	nop
 8004a84:	40008000 	.word	0x40008000
 8004a88:	0800470d 	.word	0x0800470d

08004a8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004a90:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a94:	6803      	ldr	r3, [r0, #0]
 8004a96:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a98:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a9c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aa0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004aa4:	2a22      	cmp	r2, #34	; 0x22
 8004aa6:	d005      	beq.n	8004ab4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	619a      	str	r2, [r3, #24]
  }
}
 8004ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8004ab6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004aba:	e008      	b.n	8004ace <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004abc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d14b      	bne.n	8004b5c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8004ac4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04d      	beq.n	8004b6a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	f000 8099 	beq.w	8004c06 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8004ad4:	f015 0f20 	tst.w	r5, #32
 8004ad8:	f000 8095 	beq.w	8004c06 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ae0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8004ae2:	4033      	ands	r3, r6
 8004ae4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae8:	3302      	adds	r3, #2
 8004aea:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004aec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004afe:	f015 0f07 	tst.w	r5, #7
 8004b02:	d0df      	beq.n	8004ac4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b04:	f015 0f01 	tst.w	r5, #1
 8004b08:	d009      	beq.n	8004b1e <UART_RxISR_16BIT_FIFOEN+0x92>
 8004b0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004b0e:	d006      	beq.n	8004b1e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b10:	2201      	movs	r2, #1
 8004b12:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b14:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1e:	f015 0f02 	tst.w	r5, #2
 8004b22:	d00b      	beq.n	8004b3c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8004b24:	f018 0f01 	tst.w	r8, #1
 8004b28:	d008      	beq.n	8004b3c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b30:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b3c:	f015 0f04 	tst.w	r5, #4
 8004b40:	d0bc      	beq.n	8004abc <UART_RxISR_16BIT_FIFOEN+0x30>
 8004b42:	f018 0f01 	tst.w	r8, #1
 8004b46:	d0b9      	beq.n	8004abc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004b52:	f043 0302 	orr.w	r3, r3, #2
 8004b56:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004b5a:	e7af      	b.n	8004abc <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff fbf9 	bl	8004354 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004b68:	e7ac      	b.n	8004ac4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b6a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	e852 3f00 	ldrex	r3, [r2]
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	e842 3100 	strex	r1, r3, [r2]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d1f6      	bne.n	8004b6a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	f102 0308 	add.w	r3, r2, #8
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	3208      	adds	r2, #8
 8004b90:	e842 3100 	strex	r1, r3, [r2]
 8004b94:	2900      	cmp	r1, #0
 8004b96:	d1f1      	bne.n	8004b7c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba2:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	4a29      	ldr	r2, [pc, #164]	; (8004c4c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004bb2:	d106      	bne.n	8004bc2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d00d      	beq.n	8004bd6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7fc fb6a 	bl	8001294 <HAL_UART_RxCpltCallback>
 8004bc0:	e785      	b.n	8004ace <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bc2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	e852 3f00 	ldrex	r3, [r2]
 8004bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	e842 3100 	strex	r1, r3, [r2]
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d1f6      	bne.n	8004bc2 <UART_RxISR_16BIT_FIFOEN+0x136>
 8004bd4:	e7ee      	b.n	8004bb4 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bda:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	e852 3f00 	ldrex	r3, [r2]
 8004be0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	e842 3100 	strex	r1, r3, [r2]
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d1f6      	bne.n	8004bda <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	f012 0f10 	tst.w	r2, #16
 8004bf4:	d001      	beq.n	8004bfa <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7ff fbdf 	bl	80043c2 <HAL_UARTEx_RxEventCallback>
 8004c04:	e763      	b.n	8004ace <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8004c06:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004c0a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f43f af4f 	beq.w	8004ab0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004c12:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004c16:	429a      	cmp	r2, r3
 8004c18:	f67f af4a 	bls.w	8004ab0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	f102 0308 	add.w	r3, r2, #8
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	3208      	adds	r2, #8
 8004c2c:	e842 3100 	strex	r1, r3, [r2]
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d1f3      	bne.n	8004c1c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8004c36:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	e852 3f00 	ldrex	r3, [r2]
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	e842 3100 	strex	r1, r3, [r2]
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d1f6      	bne.n	8004c38 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8004c4a:	e731      	b.n	8004ab0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8004c4c:	40008000 	.word	0x40008000
 8004c50:	080047e9 	.word	0x080047e9

08004c54 <UART_SetConfig>:
{
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c58:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5a:	6883      	ldr	r3, [r0, #8]
 8004c5c:	6902      	ldr	r2, [r0, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	6942      	ldr	r2, [r0, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	69c2      	ldr	r2, [r0, #28]
 8004c66:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	6808      	ldr	r0, [r1, #0]
 8004c6a:	4a9d      	ldr	r2, [pc, #628]	; (8004ee0 <UART_SetConfig+0x28c>)
 8004c6c:	4002      	ands	r2, r0
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	6853      	ldr	r3, [r2, #4]
 8004c76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c7a:	68e1      	ldr	r1, [r4, #12]
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c80:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	4b97      	ldr	r3, [pc, #604]	; (8004ee4 <UART_SetConfig+0x290>)
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d001      	beq.n	8004c8e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8004c8a:	6a23      	ldr	r3, [r4, #32]
 8004c8c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c8e:	6893      	ldr	r3, [r2, #8]
 8004c90:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c94:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ca0:	f023 030f 	bic.w	r3, r3, #15
 8004ca4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	4a8e      	ldr	r2, [pc, #568]	; (8004ee8 <UART_SetConfig+0x294>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01c      	beq.n	8004cec <UART_SetConfig+0x98>
 8004cb2:	4a8e      	ldr	r2, [pc, #568]	; (8004eec <UART_SetConfig+0x298>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d031      	beq.n	8004d1c <UART_SetConfig+0xc8>
 8004cb8:	4a8a      	ldr	r2, [pc, #552]	; (8004ee4 <UART_SetConfig+0x290>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d04b      	beq.n	8004d56 <UART_SetConfig+0x102>
 8004cbe:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc0:	4988      	ldr	r1, [pc, #544]	; (8004ee4 <UART_SetConfig+0x290>)
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d068      	beq.n	8004d98 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc6:	69e0      	ldr	r0, [r4, #28]
 8004cc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ccc:	f000 80a5 	beq.w	8004e1a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8004cd0:	2a08      	cmp	r2, #8
 8004cd2:	f200 811f 	bhi.w	8004f14 <UART_SetConfig+0x2c0>
 8004cd6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004cda:	00d3      	.short	0x00d3
 8004cdc:	00d100f5 	.word	0x00d100f5
 8004ce0:	00f8011d 	.word	0x00f8011d
 8004ce4:	011d011d 	.word	0x011d011d
 8004ce8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004cf4:	f002 0203 	and.w	r2, r2, #3
 8004cf8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cfc:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8004d00:	2a03      	cmp	r2, #3
 8004d02:	d809      	bhi.n	8004d18 <UART_SetConfig+0xc4>
 8004d04:	e8df f002 	tbb	[pc, r2]
 8004d08:	063c0402 	.word	0x063c0402
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	e7d7      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d10:	2204      	movs	r2, #4
 8004d12:	e7d5      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d14:	2208      	movs	r2, #8
 8004d16:	e7d3      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d18:	2210      	movs	r2, #16
 8004d1a:	e7d1      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004d24:	f002 020c 	and.w	r2, r2, #12
 8004d28:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8004d2c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8004d30:	2a0c      	cmp	r2, #12
 8004d32:	d80e      	bhi.n	8004d52 <UART_SetConfig+0xfe>
 8004d34:	e8df f002 	tbb	[pc, r2]
 8004d38:	0d0d0d07 	.word	0x0d0d0d07
 8004d3c:	0d0d0d09 	.word	0x0d0d0d09
 8004d40:	0d0d0d26 	.word	0x0d0d0d26
 8004d44:	0b          	.byte	0x0b
 8004d45:	00          	.byte	0x00
 8004d46:	2200      	movs	r2, #0
 8004d48:	e7ba      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	e7b8      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d4e:	2208      	movs	r2, #8
 8004d50:	e7b6      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d52:	2210      	movs	r2, #16
 8004d54:	e7b4      	b.n	8004cc0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004d5e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004d62:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004d66:	d00f      	beq.n	8004d88 <UART_SetConfig+0x134>
 8004d68:	d805      	bhi.n	8004d76 <UART_SetConfig+0x122>
 8004d6a:	b17a      	cbz	r2, 8004d8c <UART_SetConfig+0x138>
 8004d6c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004d70:	d10e      	bne.n	8004d90 <UART_SetConfig+0x13c>
 8004d72:	2204      	movs	r2, #4
 8004d74:	e7a4      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d76:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8004d7a:	d10b      	bne.n	8004d94 <UART_SetConfig+0x140>
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	e79f      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d80:	2202      	movs	r2, #2
 8004d82:	e79d      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d84:	2202      	movs	r2, #2
 8004d86:	e79b      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d88:	2202      	movs	r2, #2
 8004d8a:	e799      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	e797      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d90:	2210      	movs	r2, #16
 8004d92:	e795      	b.n	8004cc0 <UART_SetConfig+0x6c>
 8004d94:	2210      	movs	r2, #16
 8004d96:	e793      	b.n	8004cc0 <UART_SetConfig+0x6c>
    switch (clocksource)
 8004d98:	2a08      	cmp	r2, #8
 8004d9a:	f200 809c 	bhi.w	8004ed6 <UART_SetConfig+0x282>
 8004d9e:	e8df f002 	tbb	[pc, r2]
 8004da2:	9a08      	.short	0x9a08
 8004da4:	9a379a3a 	.word	0x9a379a3a
 8004da8:	9a9a      	.short	0x9a9a
 8004daa:	05          	.byte	0x05
 8004dab:	00          	.byte	0x00
 8004dac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004db0:	e004      	b.n	8004dbc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db2:	f7fe faa9 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004db6:	2800      	cmp	r0, #0
 8004db8:	f000 808f 	beq.w	8004eda <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <UART_SetConfig+0x29c>)
 8004dc0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004dc4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dc8:	6865      	ldr	r5, [r4, #4]
 8004dca:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	f200 8094 	bhi.w	8004efc <UART_SetConfig+0x2a8>
 8004dd4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8004dd8:	f200 8092 	bhi.w	8004f00 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4633      	mov	r3, r6
 8004de0:	4631      	mov	r1, r6
 8004de2:	f7fb fbb9 	bl	8000558 <__aeabi_uldivmod>
 8004de6:	0209      	lsls	r1, r1, #8
 8004de8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004dec:	0200      	lsls	r0, r0, #8
 8004dee:	086b      	lsrs	r3, r5, #1
 8004df0:	18c0      	adds	r0, r0, r3
 8004df2:	462a      	mov	r2, r5
 8004df4:	4633      	mov	r3, r6
 8004df6:	f141 0100 	adc.w	r1, r1, #0
 8004dfa:	f7fb fbad 	bl	8000558 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dfe:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004e02:	4b3c      	ldr	r3, [pc, #240]	; (8004ef4 <UART_SetConfig+0x2a0>)
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d87d      	bhi.n	8004f04 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	60d8      	str	r0, [r3, #12]
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	e050      	b.n	8004eb2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e10:	f7fd fd7c 	bl	800290c <HAL_RCC_GetSysClockFreq>
        break;
 8004e14:	e7cf      	b.n	8004db6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8004e16:	4838      	ldr	r0, [pc, #224]	; (8004ef8 <UART_SetConfig+0x2a4>)
 8004e18:	e7d0      	b.n	8004dbc <UART_SetConfig+0x168>
    switch (clocksource)
 8004e1a:	2a08      	cmp	r2, #8
 8004e1c:	d874      	bhi.n	8004f08 <UART_SetConfig+0x2b4>
 8004e1e:	e8df f002 	tbb	[pc, r2]
 8004e22:	2707      	.short	0x2707
 8004e24:	732a7305 	.word	0x732a7305
 8004e28:	7373      	.short	0x7373
 8004e2a:	0b          	.byte	0x0b
 8004e2b:	00          	.byte	0x00
 8004e2c:	4832      	ldr	r0, [pc, #200]	; (8004ef8 <UART_SetConfig+0x2a4>)
 8004e2e:	e003      	b.n	8004e38 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e30:	f7fe fa6a 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d069      	beq.n	8004f0c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <UART_SetConfig+0x29c>)
 8004e3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e40:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e44:	6862      	ldr	r2, [r4, #4]
 8004e46:	0853      	lsrs	r3, r2, #1
 8004e48:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004e4c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e50:	f1a0 0210 	sub.w	r2, r0, #16
 8004e54:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d859      	bhi.n	8004f10 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e5c:	b283      	uxth	r3, r0
 8004e5e:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e62:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8004e66:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	60d8      	str	r0, [r3, #12]
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e020      	b.n	8004eb2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fe fa5a 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
        break;
 8004e74:	e7de      	b.n	8004e34 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e76:	f7fd fd49 	bl	800290c <HAL_RCC_GetSysClockFreq>
        break;
 8004e7a:	e7db      	b.n	8004e34 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8004e7c:	481e      	ldr	r0, [pc, #120]	; (8004ef8 <UART_SetConfig+0x2a4>)
 8004e7e:	e003      	b.n	8004e88 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e80:	f7fe fa42 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d047      	beq.n	8004f18 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <UART_SetConfig+0x29c>)
 8004e8c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004e90:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004e9a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e9e:	f1a0 0210 	sub.w	r2, r0, #16
 8004ea2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d838      	bhi.n	8004f1c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	b280      	uxth	r0, r0
 8004eae:	60d8      	str	r0, [r3, #12]
 8004eb0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004eb8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004ec0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec4:	f7fe fa30 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
        break;
 8004ec8:	e7dc      	b.n	8004e84 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fd fd1f 	bl	800290c <HAL_RCC_GetSysClockFreq>
        break;
 8004ece:	e7d9      	b.n	8004e84 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8004ed0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ed4:	e7d8      	b.n	8004e88 <UART_SetConfig+0x234>
    switch (clocksource)
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	e7eb      	b.n	8004eb2 <UART_SetConfig+0x25e>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e7e9      	b.n	8004eb2 <UART_SetConfig+0x25e>
 8004ede:	bf00      	nop
 8004ee0:	cfff69f3 	.word	0xcfff69f3
 8004ee4:	40008000 	.word	0x40008000
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	08008b14 	.word	0x08008b14
 8004ef4:	000ffcff 	.word	0x000ffcff
 8004ef8:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
 8004efe:	e7d8      	b.n	8004eb2 <UART_SetConfig+0x25e>
 8004f00:	2001      	movs	r0, #1
 8004f02:	e7d6      	b.n	8004eb2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e7d4      	b.n	8004eb2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8004f08:	2001      	movs	r0, #1
 8004f0a:	e7d2      	b.n	8004eb2 <UART_SetConfig+0x25e>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e7d0      	b.n	8004eb2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8004f10:	2001      	movs	r0, #1
 8004f12:	e7ce      	b.n	8004eb2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8004f14:	2001      	movs	r0, #1
 8004f16:	e7cc      	b.n	8004eb2 <UART_SetConfig+0x25e>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7ca      	b.n	8004eb2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	e7c8      	b.n	8004eb2 <UART_SetConfig+0x25e>

08004f20 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f22:	f013 0f01 	tst.w	r3, #1
 8004f26:	d006      	beq.n	8004f36 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f28:	6802      	ldr	r2, [r0, #0]
 8004f2a:	6853      	ldr	r3, [r2, #4]
 8004f2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f30:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f38:	f013 0f02 	tst.w	r3, #2
 8004f3c:	d006      	beq.n	8004f4c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f3e:	6802      	ldr	r2, [r0, #0]
 8004f40:	6853      	ldr	r3, [r2, #4]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f46:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f4e:	f013 0f04 	tst.w	r3, #4
 8004f52:	d006      	beq.n	8004f62 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f54:	6802      	ldr	r2, [r0, #0]
 8004f56:	6853      	ldr	r3, [r2, #4]
 8004f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f64:	f013 0f08 	tst.w	r3, #8
 8004f68:	d006      	beq.n	8004f78 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6a:	6802      	ldr	r2, [r0, #0]
 8004f6c:	6853      	ldr	r3, [r2, #4]
 8004f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f72:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f7a:	f013 0f10 	tst.w	r3, #16
 8004f7e:	d006      	beq.n	8004f8e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f80:	6802      	ldr	r2, [r0, #0]
 8004f82:	6893      	ldr	r3, [r2, #8]
 8004f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f88:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f90:	f013 0f20 	tst.w	r3, #32
 8004f94:	d006      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f96:	6802      	ldr	r2, [r0, #0]
 8004f98:	6893      	ldr	r3, [r2, #8]
 8004f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004fa6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fac:	6802      	ldr	r2, [r0, #0]
 8004fae:	6853      	ldr	r3, [r2, #4]
 8004fb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fb4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc0:	d00b      	beq.n	8004fda <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004fc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fc8:	d006      	beq.n	8004fd8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fca:	6802      	ldr	r2, [r0, #0]
 8004fcc:	6853      	ldr	r3, [r2, #4]
 8004fce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004fd2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6053      	str	r3, [r2, #4]
}
 8004fd8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fda:	6802      	ldr	r2, [r0, #0]
 8004fdc:	6853      	ldr	r3, [r2, #4]
 8004fde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fe2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6053      	str	r3, [r2, #4]
 8004fe8:	e7eb      	b.n	8004fc2 <UART_AdvFeatureConfig+0xa2>

08004fea <UART_WaitOnFlagUntilTimeout>:
{
 8004fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	460f      	mov	r7, r1
 8004ff2:	4616      	mov	r6, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffa:	682c      	ldr	r4, [r5, #0]
 8004ffc:	69e4      	ldr	r4, [r4, #28]
 8004ffe:	ea37 0304 	bics.w	r3, r7, r4
 8005002:	bf0c      	ite	eq
 8005004:	f04f 0c01 	moveq.w	ip, #1
 8005008:	f04f 0c00 	movne.w	ip, #0
 800500c:	45b4      	cmp	ip, r6
 800500e:	d157      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8005010:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005014:	d0f1      	beq.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005016:	f7fb fe57 	bl	8000cc8 <HAL_GetTick>
 800501a:	eba0 0009 	sub.w	r0, r0, r9
 800501e:	4540      	cmp	r0, r8
 8005020:	d82f      	bhi.n	8005082 <UART_WaitOnFlagUntilTimeout+0x98>
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	d02c      	beq.n	8005082 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	f012 0f04 	tst.w	r2, #4
 8005030:	d0e3      	beq.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005038:	d0df      	beq.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005040:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	e852 3f00 	ldrex	r3, [r2]
 8005046:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	e842 3100 	strex	r1, r3, [r2]
 800504e:	2900      	cmp	r1, #0
 8005050:	d1f6      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	f102 0308 	add.w	r3, r2, #8
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	3208      	adds	r2, #8
 8005062:	e842 3100 	strex	r1, r3, [r2]
 8005066:	2900      	cmp	r1, #0
 8005068:	d1f3      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800506a:	2320      	movs	r3, #32
 800506c:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005070:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005074:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8005078:	2300      	movs	r3, #0
 800507a:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800507e:	2003      	movs	r0, #3
 8005080:	e01f      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005082:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	e852 3f00 	ldrex	r3, [r2]
 8005088:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	e842 3100 	strex	r1, r3, [r2]
 8005090:	2900      	cmp	r1, #0
 8005092:	d1f6      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	f102 0308 	add.w	r3, r2, #8
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	3208      	adds	r2, #8
 80050a4:	e842 3100 	strex	r1, r3, [r2]
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d1f3      	bne.n	8005094 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80050ac:	2320      	movs	r3, #32
 80050ae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80050b2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80050b6:	2300      	movs	r3, #0
 80050b8:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80050bc:	2003      	movs	r0, #3
 80050be:	e000      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80050c0:	2000      	movs	r0, #0
}
 80050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080050c6 <UART_CheckIdleState>:
{
 80050c6:	b530      	push	{r4, r5, lr}
 80050c8:	b083      	sub	sp, #12
 80050ca:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80050d2:	f7fb fdf9 	bl	8000cc8 <HAL_GetTick>
 80050d6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	f012 0f08 	tst.w	r2, #8
 80050e0:	d110      	bne.n	8005104 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f013 0f04 	tst.w	r3, #4
 80050ea:	d119      	bne.n	8005120 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80050ec:	2320      	movs	r3, #32
 80050ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	2000      	movs	r0, #0
 80050f8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fa:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80050fc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005100:	b003      	add	sp, #12
 8005102:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	4603      	mov	r3, r0
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005112:	4620      	mov	r0, r4
 8005114:	f7ff ff69 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8005118:	2800      	cmp	r0, #0
 800511a:	d0e2      	beq.n	80050e2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800511c:	2003      	movs	r0, #3
 800511e:	e7ef      	b.n	8005100 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	462b      	mov	r3, r5
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff ff5b 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 8005134:	2800      	cmp	r0, #0
 8005136:	d0d9      	beq.n	80050ec <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005138:	2003      	movs	r0, #3
 800513a:	e7e1      	b.n	8005100 <UART_CheckIdleState+0x3a>

0800513c <HAL_UART_Init>:
  if (huart == NULL)
 800513c:	b378      	cbz	r0, 800519e <HAL_UART_Init+0x62>
{
 800513e:	b510      	push	{r4, lr}
 8005140:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005142:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005146:	b30b      	cbz	r3, 800518c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	2324      	movs	r3, #36	; 0x24
 800514a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	6813      	ldr	r3, [r2, #0]
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff fd7b 	bl	8004c54 <UART_SetConfig>
 800515e:	2801      	cmp	r0, #1
 8005160:	d013      	beq.n	800518a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005164:	b9bb      	cbnz	r3, 8005196 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	6853      	ldr	r3, [r2, #4]
 800516a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800516e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	6893      	ldr	r3, [r2, #8]
 8005174:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005178:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff ff9e 	bl	80050c6 <UART_CheckIdleState>
}
 800518a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800518c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8005190:	f7fb ff6c 	bl	800106c <HAL_UART_MspInit>
 8005194:	e7d8      	b.n	8005148 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff fec2 	bl	8004f20 <UART_AdvFeatureConfig>
 800519c:	e7e3      	b.n	8005166 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800519e:	2001      	movs	r0, #1
}
 80051a0:	4770      	bx	lr
	...

080051a4 <UART_Start_Receive_IT>:
{
 80051a4:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80051a6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80051a8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80051ac:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 80051b4:	6883      	ldr	r3, [r0, #8]
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d006      	beq.n	80051ca <UART_Start_Receive_IT+0x26>
 80051bc:	b9a3      	cbnz	r3, 80051e8 <UART_Start_Receive_IT+0x44>
 80051be:	6903      	ldr	r3, [r0, #16]
 80051c0:	b973      	cbnz	r3, 80051e0 <UART_Start_Receive_IT+0x3c>
 80051c2:	23ff      	movs	r3, #255	; 0xff
 80051c4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80051c8:	e014      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
 80051ca:	6903      	ldr	r3, [r0, #16]
 80051cc:	b923      	cbnz	r3, 80051d8 <UART_Start_Receive_IT+0x34>
 80051ce:	f240 13ff 	movw	r3, #511	; 0x1ff
 80051d2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80051d6:	e00d      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
 80051d8:	23ff      	movs	r3, #255	; 0xff
 80051da:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80051de:	e009      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
 80051e0:	237f      	movs	r3, #127	; 0x7f
 80051e2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80051e6:	e005      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
 80051e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051ec:	d02d      	beq.n	800524a <UART_Start_Receive_IT+0xa6>
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fa:	2322      	movs	r3, #34	; 0x22
 80051fc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	f101 0308 	add.w	r3, r1, #8
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	3108      	adds	r1, #8
 8005210:	e841 3400 	strex	r4, r3, [r1]
 8005214:	2c00      	cmp	r4, #0
 8005216:	d1f3      	bne.n	8005200 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005218:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800521a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521e:	d01e      	beq.n	800525e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005220:	6883      	ldr	r3, [r0, #8]
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d042      	beq.n	80052ae <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <UART_Start_Receive_IT+0x12c>)
 800522a:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800522c:	6903      	ldr	r3, [r0, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d043      	beq.n	80052ba <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005232:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	e852 3f00 	ldrex	r3, [r2]
 8005238:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	e842 3100 	strex	r1, r3, [r2]
 8005240:	2900      	cmp	r1, #0
 8005242:	d1f6      	bne.n	8005232 <UART_Start_Receive_IT+0x8e>
}
 8005244:	2000      	movs	r0, #0
 8005246:	bc10      	pop	{r4}
 8005248:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800524a:	6903      	ldr	r3, [r0, #16]
 800524c:	b91b      	cbnz	r3, 8005256 <UART_Start_Receive_IT+0xb2>
 800524e:	237f      	movs	r3, #127	; 0x7f
 8005250:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005254:	e7ce      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
 8005256:	233f      	movs	r3, #63	; 0x3f
 8005258:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800525c:	e7ca      	b.n	80051f4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800525e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005262:	4293      	cmp	r3, r2
 8005264:	d8dc      	bhi.n	8005220 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005266:	6883      	ldr	r3, [r0, #8]
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526c:	d019      	beq.n	80052a2 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <UART_Start_Receive_IT+0x130>)
 8005270:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005272:	6903      	ldr	r3, [r0, #16]
 8005274:	b143      	cbz	r3, 8005288 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005276:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	e852 3f00 	ldrex	r3, [r2]
 800527c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	e842 3100 	strex	r1, r3, [r2]
 8005284:	2900      	cmp	r1, #0
 8005286:	d1f6      	bne.n	8005276 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005288:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	f102 0308 	add.w	r3, r2, #8
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	3208      	adds	r2, #8
 8005298:	e842 3100 	strex	r1, r3, [r2]
 800529c:	2900      	cmp	r1, #0
 800529e:	d1f3      	bne.n	8005288 <UART_Start_Receive_IT+0xe4>
 80052a0:	e7d0      	b.n	8005244 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	6903      	ldr	r3, [r0, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e2      	bne.n	800526e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <UART_Start_Receive_IT+0x134>)
 80052aa:	6743      	str	r3, [r0, #116]	; 0x74
 80052ac:	e7e1      	b.n	8005272 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ae:	6903      	ldr	r3, [r0, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1b9      	bne.n	8005228 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <UART_Start_Receive_IT+0x138>)
 80052b6:	6743      	str	r3, [r0, #116]	; 0x74
 80052b8:	e7b8      	b.n	800522c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052ba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	e852 3f00 	ldrex	r3, [r2]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	e842 3100 	strex	r1, r3, [r2]
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d1f6      	bne.n	80052ba <UART_Start_Receive_IT+0x116>
 80052cc:	e7ba      	b.n	8005244 <UART_Start_Receive_IT+0xa0>
 80052ce:	bf00      	nop
 80052d0:	0800470d 	.word	0x0800470d
 80052d4:	080048c1 	.word	0x080048c1
 80052d8:	08004a8d 	.word	0x08004a8d
 80052dc:	080047e9 	.word	0x080047e9

080052e0 <HAL_UART_Receive_IT>:
{
 80052e0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d117      	bne.n	800531a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80052ea:	b1c1      	cbz	r1, 800531e <HAL_UART_Receive_IT+0x3e>
 80052ec:	b1ca      	cbz	r2, 8005322 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	2300      	movs	r3, #0
 80052f0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052f2:	6803      	ldr	r3, [r0, #0]
 80052f4:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <HAL_UART_Receive_IT+0x48>)
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	d00c      	beq.n	8005314 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005300:	d008      	beq.n	8005314 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005302:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	e854 3f00 	ldrex	r3, [r4]
 8005308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	e844 3500 	strex	r5, r3, [r4]
 8005310:	2d00      	cmp	r5, #0
 8005312:	d1f6      	bne.n	8005302 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005314:	f7ff ff46 	bl	80051a4 <UART_Start_Receive_IT>
 8005318:	e000      	b.n	800531c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800531a:	2002      	movs	r0, #2
}
 800531c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800531e:	2001      	movs	r0, #1
 8005320:	e7fc      	b.n	800531c <HAL_UART_Receive_IT+0x3c>
 8005322:	2001      	movs	r0, #1
 8005324:	e7fa      	b.n	800531c <HAL_UART_Receive_IT+0x3c>
 8005326:	bf00      	nop
 8005328:	40008000 	.word	0x40008000

0800532c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800532c:	b082      	sub	sp, #8
 800532e:	ab02      	add	r3, sp, #8
 8005330:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005334:	6802      	ldr	r2, [r0, #0]
 8005336:	6853      	ldr	r3, [r2, #4]
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005340:	430b      	orrs	r3, r1
 8005342:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005344:	6802      	ldr	r2, [r0, #0]
 8005346:	6853      	ldr	r3, [r2, #4]
 8005348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800534c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005350:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005354:	6053      	str	r3, [r2, #4]
}
 8005356:	b002      	add	sp, #8
 8005358:	4770      	bx	lr
	...

0800535c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800535c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800535e:	b92b      	cbnz	r3, 800536c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005360:	2301      	movs	r3, #1
 8005362:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005366:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800536a:	4770      	bx	lr
{
 800536c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800536e:	6803      	ldr	r3, [r0, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005376:	6899      	ldr	r1, [r3, #8]
 8005378:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800537a:	4d09      	ldr	r5, [pc, #36]	; (80053a0 <UARTEx_SetNbDataToProcess+0x44>)
 800537c:	5c6b      	ldrb	r3, [r5, r1]
 800537e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005380:	4c08      	ldr	r4, [pc, #32]	; (80053a4 <UARTEx_SetNbDataToProcess+0x48>)
 8005382:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005384:	fb93 f3f1 	sdiv	r3, r3, r1
 8005388:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800538c:	5cab      	ldrb	r3, [r5, r2]
 800538e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005390:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005392:	fb93 f3f2 	sdiv	r3, r3, r2
 8005396:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800539a:	bc30      	pop	{r4, r5}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	08008b34 	.word	0x08008b34
 80053a4:	08008b2c 	.word	0x08008b2c

080053a8 <HAL_UARTEx_WakeupCallback>:
}
 80053a8:	4770      	bx	lr

080053aa <HAL_UARTEx_RxFifoFullCallback>:
}
 80053aa:	4770      	bx	lr

080053ac <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80053ac:	4770      	bx	lr

080053ae <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80053ae:	b510      	push	{r4, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	ab04      	add	r3, sp, #16
 80053b4:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80053b8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d035      	beq.n	800542c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80053c0:	4604      	mov	r4, r0
 80053c2:	2301      	movs	r3, #1
 80053c4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80053c8:	2324      	movs	r3, #36	; 0x24
 80053ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80053ce:	6802      	ldr	r2, [r0, #0]
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80053d8:	6801      	ldr	r1, [r0, #0]
 80053da:	688b      	ldr	r3, [r1, #8]
 80053dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80053e0:	9a02      	ldr	r2, [sp, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80053e6:	b1aa      	cbz	r2, 8005414 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80053f2:	f7fb fc69 	bl	8000cc8 <HAL_GetTick>
 80053f6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80053fc:	9200      	str	r2, [sp, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff fdf0 	bl	8004fea <UART_WaitOnFlagUntilTimeout>
 800540a:	b948      	cbnz	r0, 8005420 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800540c:	2320      	movs	r3, #32
 800540e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005412:	e006      	b.n	8005422 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005414:	ab04      	add	r3, sp, #16
 8005416:	e913 0006 	ldmdb	r3, {r1, r2}
 800541a:	f7ff ff87 	bl	800532c <UARTEx_Wakeup_AddressConfig>
 800541e:	e7e3      	b.n	80053e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8005420:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8005428:	b004      	add	sp, #16
 800542a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800542c:	2002      	movs	r0, #2
 800542e:	e7fb      	b.n	8005428 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08005430 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8005430:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005434:	2b01      	cmp	r3, #1
 8005436:	d010      	beq.n	800545a <HAL_UARTEx_EnableStopMode+0x2a>
 8005438:	2301      	movs	r3, #1
 800543a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800543e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	e852 3f00 	ldrex	r3, [r2]
 8005444:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	e842 3100 	strex	r1, r3, [r2]
 800544c:	2900      	cmp	r1, #0
 800544e:	d1f6      	bne.n	800543e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8005450:	2300      	movs	r3, #0
 8005452:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8005456:	4618      	mov	r0, r3
 8005458:	4770      	bx	lr
  __HAL_LOCK(huart);
 800545a:	2002      	movs	r0, #2
}
 800545c:	4770      	bx	lr

0800545e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800545e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005462:	2b01      	cmp	r3, #1
 8005464:	d01d      	beq.n	80054a2 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8005466:	b510      	push	{r4, lr}
 8005468:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800546a:	2301      	movs	r3, #1
 800546c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005470:	2324      	movs	r3, #36	; 0x24
 8005472:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005476:	6802      	ldr	r2, [r0, #0]
 8005478:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800547a:	6811      	ldr	r1, [r2, #0]
 800547c:	f021 0101 	bic.w	r1, r1, #1
 8005480:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005486:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800548a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548c:	6802      	ldr	r2, [r0, #0]
 800548e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8005490:	f7ff ff64 	bl	800535c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005494:	2320      	movs	r3, #32
 8005496:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800549a:	2000      	movs	r0, #0
 800549c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80054a0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80054a2:	2002      	movs	r0, #2
}
 80054a4:	4770      	bx	lr

080054a6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80054a6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80054a8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d01d      	beq.n	80054ec <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80054b0:	4604      	mov	r4, r0
 80054b2:	2301      	movs	r3, #1
 80054b4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	2324      	movs	r3, #36	; 0x24
 80054ba:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054be:	6803      	ldr	r3, [r0, #0]
 80054c0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054ca:	6802      	ldr	r2, [r0, #0]
 80054cc:	6893      	ldr	r3, [r2, #8]
 80054ce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80054d2:	4319      	orrs	r1, r3
 80054d4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80054d6:	f7ff ff41 	bl	800535c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80054de:	2320      	movs	r3, #32
 80054e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80054ec:	2002      	movs	r0, #2
 80054ee:	e7fc      	b.n	80054ea <HAL_UARTEx_SetTxFifoThreshold+0x44>

080054f0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80054f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80054f2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d01d      	beq.n	8005536 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80054fa:	4604      	mov	r4, r0
 80054fc:	2301      	movs	r3, #1
 80054fe:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005502:	2324      	movs	r3, #36	; 0x24
 8005504:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005508:	6803      	ldr	r3, [r0, #0]
 800550a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005514:	6802      	ldr	r2, [r0, #0]
 8005516:	6893      	ldr	r3, [r2, #8]
 8005518:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800551c:	4319      	orrs	r1, r3
 800551e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005520:	f7ff ff1c 	bl	800535c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005528:	2320      	movs	r3, #32
 800552a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800552e:	2000      	movs	r0, #0
 8005530:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005534:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005536:	2002      	movs	r0, #2
 8005538:	e7fc      	b.n	8005534 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800553a <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800553a:	2001      	movs	r0, #1
 800553c:	4770      	bx	lr
	...

08005540 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8005540:	280a      	cmp	r0, #10
 8005542:	d807      	bhi.n	8005554 <RadioGetLoRaBandwidthInHz+0x14>
 8005544:	e8df f000 	tbb	[pc, r0]
 8005548:	17110b20 	.word	0x17110b20
 800554c:	061e1c1a 	.word	0x061e1c1a
 8005550:	0e08      	.short	0x0e08
 8005552:	14          	.byte	0x14
 8005553:	00          	.byte	0x00
 8005554:	2000      	movs	r0, #0
 8005556:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005558:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800555c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800555e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8005562:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005564:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8005568:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800556a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800556e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005570:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8005574:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005576:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800557a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800557c:	4804      	ldr	r0, [pc, #16]	; (8005590 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800557e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005580:	4804      	ldr	r0, [pc, #16]	; (8005594 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8005582:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005584:	4804      	ldr	r0, [pc, #16]	; (8005598 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8005586:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8005588:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	0001e848 	.word	0x0001e848
 8005594:	0003d090 	.word	0x0003d090
 8005598:	0007a120 	.word	0x0007a120

0800559c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800559c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80055a0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80055a2:	b953      	cbnz	r3, 80055ba <RadioGetGfskTimeOnAirNumerator+0x1e>
 80055a4:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80055a6:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80055a8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80055aa:	b141      	cbz	r1, 80055be <RadioGetGfskTimeOnAirNumerator+0x22>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f89d 0000 	ldrb.w	r0, [sp]
 80055b2:	4418      	add	r0, r3
}
 80055b4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80055b8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80055ba:	2000      	movs	r0, #0
 80055bc:	e7f3      	b.n	80055a6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80055be:	2300      	movs	r3, #0
 80055c0:	e7f5      	b.n	80055ae <RadioGetGfskTimeOnAirNumerator+0x12>

080055c2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80055c8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80055cc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80055ce:	f1a1 0c05 	sub.w	ip, r1, #5
 80055d2:	f1bc 0f01 	cmp.w	ip, #1
 80055d6:	d932      	bls.n	800563e <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80055d8:	b918      	cbnz	r0, 80055e2 <RadioGetLoRaTimeOnAirNumerator+0x20>
 80055da:	f1a1 060b 	sub.w	r6, r1, #11
 80055de:	2e01      	cmp	r6, #1
 80055e0:	d935      	bls.n	800564e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 80055e2:	2801      	cmp	r0, #1
 80055e4:	d02f      	beq.n	8005646 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 80055e6:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80055e8:	f89d e014 	ldrb.w	lr, [sp, #20]
 80055ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80055f0:	b38d      	cbz	r5, 8005656 <RadioGetLoRaTimeOnAirNumerator+0x94>
 80055f2:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80055f6:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 80055f8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80055fa:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80055fe:	b36c      	cbz	r4, 800565c <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8005600:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8005604:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8005606:	2906      	cmp	r1, #6
 8005608:	d904      	bls.n	8005614 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800560a:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800560e:	b10e      	cbz	r6, 8005614 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005610:	1e88      	subs	r0, r1, #2
 8005612:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8005614:	f1bc 0f00 	cmp.w	ip, #0
 8005618:	db23      	blt.n	8005662 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800561a:	4484      	add	ip, r0
 800561c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005620:	fb9c fcf0 	sdiv	ip, ip, r0
 8005624:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8005628:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800562c:	2906      	cmp	r1, #6
 800562e:	d801      	bhi.n	8005634 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8005630:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005634:	0080      	lsls	r0, r0, #2
 8005636:	3001      	adds	r0, #1
 8005638:	3902      	subs	r1, #2
}
 800563a:	4088      	lsls	r0, r1
 800563c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800563e:	2b0b      	cmp	r3, #11
 8005640:	d8ca      	bhi.n	80055d8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8005642:	230c      	movs	r3, #12
 8005644:	e7c8      	b.n	80055d8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005646:	290c      	cmp	r1, #12
 8005648:	d003      	beq.n	8005652 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800564a:	2600      	movs	r6, #0
 800564c:	e7cc      	b.n	80055e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800564e:	2601      	movs	r6, #1
 8005650:	e7ca      	b.n	80055e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8005652:	2601      	movs	r6, #1
 8005654:	e7c8      	b.n	80055e8 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8005656:	f04f 0c00 	mov.w	ip, #0
 800565a:	e7cc      	b.n	80055f6 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800565c:	f04f 0c14 	mov.w	ip, #20
 8005660:	e7d0      	b.n	8005604 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8005662:	f04f 0c00 	mov.w	ip, #0
 8005666:	e7d8      	b.n	800561a <RadioGetLoRaTimeOnAirNumerator+0x58>

08005668 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b085      	sub	sp, #20
 800566c:	460e      	mov	r6, r1
 800566e:	4615      	mov	r5, r2
 8005670:	4619      	mov	r1, r3
 8005672:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8005676:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800567a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800567e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8005682:	b148      	cbz	r0, 8005698 <RadioTimeOnAir+0x30>
 8005684:	2801      	cmp	r0, #1
 8005686:	d012      	beq.n	80056ae <RadioTimeOnAir+0x46>
 8005688:	2501      	movs	r5, #1
 800568a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800568c:	442c      	add	r4, r5
 800568e:	1e60      	subs	r0, r4, #1
}
 8005690:	fbb0 f0f5 	udiv	r0, r0, r5
 8005694:	b005      	add	sp, #20
 8005696:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005698:	f8cd c004 	str.w	ip, [sp, #4]
 800569c:	9700      	str	r7, [sp, #0]
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff ff7c 	bl	800559c <RadioGetGfskTimeOnAirNumerator>
 80056a4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80056a8:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80056ac:	e7ee      	b.n	800568c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80056ae:	f8cd c008 	str.w	ip, [sp, #8]
 80056b2:	9701      	str	r7, [sp, #4]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	460a      	mov	r2, r1
 80056ba:	4629      	mov	r1, r5
 80056bc:	4630      	mov	r0, r6
 80056be:	f7ff ff80 	bl	80055c2 <RadioGetLoRaTimeOnAirNumerator>
 80056c2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80056c6:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <RadioTimeOnAir+0x70>)
 80056cc:	5d98      	ldrb	r0, [r3, r6]
 80056ce:	f7ff ff37 	bl	8005540 <RadioGetLoRaBandwidthInHz>
 80056d2:	4605      	mov	r5, r0
        break;
 80056d4:	e7da      	b.n	800568c <RadioTimeOnAir+0x24>
 80056d6:	bf00      	nop
 80056d8:	08008ba8 	.word	0x08008ba8

080056dc <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80056dc:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <RadioOnTxTimeoutProcess+0x18>)
 80056e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <RadioOnTxTimeoutProcess+0x1c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	b113      	cbz	r3, 80056f2 <RadioOnTxTimeoutProcess+0x16>
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b103      	cbz	r3, 80056f2 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80056f0:	4798      	blx	r3
    }
}
 80056f2:	bd08      	pop	{r3, pc}
 80056f4:	48000400 	.word	0x48000400
 80056f8:	200004ec 	.word	0x200004ec

080056fc <RadioOnTxTimeoutIrq>:
{
 80056fc:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80056fe:	f7ff ffed 	bl	80056dc <RadioOnTxTimeoutProcess>
}
 8005702:	bd08      	pop	{r3, pc}

08005704 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8005704:	b508      	push	{r3, lr}
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <RadioOnRxTimeoutProcess+0x18>)
 8005708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800570c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800570e:	4b04      	ldr	r3, [pc, #16]	; (8005720 <RadioOnRxTimeoutProcess+0x1c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	b113      	cbz	r3, 800571a <RadioOnRxTimeoutProcess+0x16>
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	b103      	cbz	r3, 800571a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8005718:	4798      	blx	r3
    }
}
 800571a:	bd08      	pop	{r3, pc}
 800571c:	48000400 	.word	0x48000400
 8005720:	200004ec 	.word	0x200004ec

08005724 <RadioOnRxTimeoutIrq>:
{
 8005724:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8005726:	f7ff ffed 	bl	8005704 <RadioOnRxTimeoutProcess>
}
 800572a:	bd08      	pop	{r3, pc}

0800572c <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800572c:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 800572e:	2300      	movs	r3, #0
 8005730:	e005      	b.n	800573e <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8005732:	5ccc      	ldrb	r4, [r1, r3]
 8005734:	43e4      	mvns	r4, r4
 8005736:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8005738:	2400      	movs	r4, #0
 800573a:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 800573c:	3301      	adds	r3, #1
 800573e:	429a      	cmp	r2, r3
 8005740:	dcf7      	bgt.n	8005732 <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8005742:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8005744:	461c      	mov	r4, r3
 8005746:	e013      	b.n	8005770 <payload_integration+0x44>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8005748:	f103 0c07 	add.w	ip, r3, #7
 800574c:	e024      	b.n	8005798 <payload_integration+0x6c>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800574e:	b2ed      	uxtb	r5, r5
 8005750:	5d4d      	ldrb	r5, [r1, r5]
 8005752:	fa45 fe0e 	asr.w	lr, r5, lr
 8005756:	f00e 0e01 	and.w	lr, lr, #1
        /* integration */
        prevInt ^= currBit;
 800575a:	ea84 040e 	eor.w	r4, r4, lr
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800575e:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8005762:	fa04 fc0c 	lsl.w	ip, r4, ip
 8005766:	5d46      	ldrb	r6, [r0, r5]
 8005768:	ea46 0c0c 	orr.w	ip, r6, ip
 800576c:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8005770:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005774:	da26      	bge.n	80057c4 <payload_integration+0x98>
        index_bit = 7 - ( i % 8 );
 8005776:	425d      	negs	r5, r3
 8005778:	f003 0c07 	and.w	ip, r3, #7
 800577c:	f005 0507 	and.w	r5, r5, #7
 8005780:	bf58      	it	pl
 8005782:	f1c5 0c00 	rsbpl	ip, r5, #0
 8005786:	fa5f fe8c 	uxtb.w	lr, ip
 800578a:	f1ce 0e07 	rsb	lr, lr, #7
 800578e:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 8005792:	469c      	mov	ip, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	dbd7      	blt.n	8005748 <payload_integration+0x1c>
 8005798:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800579c:	3301      	adds	r3, #1
 800579e:	425e      	negs	r6, r3
 80057a0:	f003 0c07 	and.w	ip, r3, #7
 80057a4:	f006 0607 	and.w	r6, r6, #7
 80057a8:	bf58      	it	pl
 80057aa:	f1c6 0c00 	rsbpl	ip, r6, #0
 80057ae:	fa5f fc8c 	uxtb.w	ip, ip
 80057b2:	f1cc 0c07 	rsb	ip, ip, #7
 80057b6:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 80057ba:	461e      	mov	r6, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dac6      	bge.n	800574e <payload_integration+0x22>
 80057c0:	1dde      	adds	r6, r3, #7
 80057c2:	e7c4      	b.n	800574e <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80057c4:	01a3      	lsls	r3, r4, #6
 80057c6:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 80057ca:	b25b      	sxtb	r3, r3
 80057cc:	b91c      	cbnz	r4, 80057d6 <payload_integration+0xaa>
 80057ce:	2120      	movs	r1, #32
 80057d0:	430b      	orrs	r3, r1
 80057d2:	5483      	strb	r3, [r0, r2]
}
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80057d6:	2100      	movs	r1, #0
 80057d8:	e7fa      	b.n	80057d0 <payload_integration+0xa4>

080057da <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 80057da:	2001      	movs	r0, #1
 80057dc:	4770      	bx	lr

080057de <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 80057de:	2001      	movs	r0, #1
 80057e0:	4770      	bx	lr
	...

080057e4 <RadioSetMaxPayloadLength>:
{
 80057e4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80057e6:	2801      	cmp	r0, #1
 80057e8:	d004      	beq.n	80057f4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <RadioSetMaxPayloadLength+0x30>)
 80057ec:	7d5b      	ldrb	r3, [r3, #21]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d008      	beq.n	8005804 <RadioSetMaxPayloadLength+0x20>
}
 80057f2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <RadioSetMaxPayloadLength+0x34>)
 80057f6:	7019      	strb	r1, [r3, #0]
 80057f8:	4806      	ldr	r0, [pc, #24]	; (8005814 <RadioSetMaxPayloadLength+0x30>)
 80057fa:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057fc:	300e      	adds	r0, #14
 80057fe:	f001 fe3b 	bl	8007478 <SUBGRF_SetPacketParams>
 8005802:	e7f6      	b.n	80057f2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <RadioSetMaxPayloadLength+0x34>)
 8005806:	7019      	strb	r1, [r3, #0]
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <RadioSetMaxPayloadLength+0x30>)
 800580a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800580c:	300e      	adds	r0, #14
 800580e:	f001 fe33 	bl	8007478 <SUBGRF_SetPacketParams>
}
 8005812:	e7ee      	b.n	80057f2 <RadioSetMaxPayloadLength+0xe>
 8005814:	20000508 	.word	0x20000508
 8005818:	2000000c 	.word	0x2000000c

0800581c <RadioRead>:
{
 800581c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800581e:	f001 f9c9 	bl	8006bb4 <SUBGRF_ReadRegister>
}
 8005822:	bd08      	pop	{r3, pc}

08005824 <RadioWrite>:
{
 8005824:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8005826:	f001 f9b5 	bl	8006b94 <SUBGRF_WriteRegister>
}
 800582a:	bd08      	pop	{r3, pc}

0800582c <RadioTxCw>:
{
 800582c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800582e:	f001 ff4d 	bl	80076cc <SUBGRF_SetRfTxPower>
 8005832:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005834:	210e      	movs	r1, #14
 8005836:	f640 101f 	movw	r0, #2335	; 0x91f
 800583a:	f001 f9ab 	bl	8006b94 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800583e:	2101      	movs	r1, #1
 8005840:	4620      	mov	r0, r4
 8005842:	f001 ff2f 	bl	80076a4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005846:	f001 fb75 	bl	8006f34 <SUBGRF_SetTxContinuousWave>
}
 800584a:	bd10      	pop	{r4, pc}

0800584c <RadioTxPrbs>:
{
 800584c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800584e:	2101      	movs	r1, #1
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <RadioTxPrbs+0x24>)
 8005852:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8005856:	f001 ff25 	bl	80076a4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800585a:	212d      	movs	r1, #45	; 0x2d
 800585c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005860:	f7ff ffe0 	bl	8005824 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8005864:	f001 fb6d 	bl	8006f42 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8005868:	4802      	ldr	r0, [pc, #8]	; (8005874 <RadioTxPrbs+0x28>)
 800586a:	f001 faa3 	bl	8006db4 <SUBGRF_SetTx>
}
 800586e:	bd08      	pop	{r3, pc}
 8005870:	20000508 	.word	0x20000508
 8005874:	000fffff 	.word	0x000fffff

08005878 <RadioSetRxDutyCycle>:
{
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800587e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8005882:	4e09      	ldr	r6, [pc, #36]	; (80058a8 <RadioSetRxDutyCycle+0x30>)
 8005884:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005886:	2300      	movs	r3, #0
 8005888:	461a      	mov	r2, r3
 800588a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800588e:	4608      	mov	r0, r1
 8005890:	f001 fc23 	bl	80070da <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005894:	2100      	movs	r1, #0
 8005896:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800589a:	f001 ff03 	bl	80076a4 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800589e:	4629      	mov	r1, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f001 fb17 	bl	8006ed4 <SUBGRF_SetRxDutyCycle>
}
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	20000508 	.word	0x20000508

080058ac <RadioRxBoosted>:
{
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80058b0:	f001 ffea 	bl	8007888 <RFW_Is_Init>
 80058b4:	2801      	cmp	r0, #1
 80058b6:	d019      	beq.n	80058ec <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80058b8:	2300      	movs	r3, #0
 80058ba:	461a      	mov	r2, r3
 80058bc:	f240 2162 	movw	r1, #610	; 0x262
 80058c0:	4608      	mov	r0, r1
 80058c2:	f001 fc0a 	bl	80070da <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80058c6:	b9a4      	cbnz	r4, 80058f2 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80058c8:	4c11      	ldr	r4, [pc, #68]	; (8005910 <RadioRxBoosted+0x64>)
 80058ca:	2100      	movs	r1, #0
 80058cc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80058ce:	4b11      	ldr	r3, [pc, #68]	; (8005914 <RadioRxBoosted+0x68>)
 80058d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d4:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80058d6:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80058da:	f001 fee3 	bl	80076a4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80058de:	7863      	ldrb	r3, [r4, #1]
 80058e0:	b183      	cbz	r3, 8005904 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80058e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80058e6:	f001 fad7 	bl	8006e98 <SUBGRF_SetRxBoosted>
}
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80058ec:	f001 ffd4 	bl	8007898 <RFW_ReceiveInit>
 80058f0:	e7e9      	b.n	80058c6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80058f2:	4d09      	ldr	r5, [pc, #36]	; (8005918 <RadioRxBoosted+0x6c>)
 80058f4:	4621      	mov	r1, r4
 80058f6:	4628      	mov	r0, r5
 80058f8:	f002 fbfe 	bl	80080f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80058fc:	4628      	mov	r0, r5
 80058fe:	f002 fbb5 	bl	800806c <UTIL_TIMER_Start>
 8005902:	e7e1      	b.n	80058c8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <RadioRxBoosted+0x64>)
 8005906:	6898      	ldr	r0, [r3, #8]
 8005908:	0180      	lsls	r0, r0, #6
 800590a:	f001 fac5 	bl	8006e98 <SUBGRF_SetRxBoosted>
}
 800590e:	e7ec      	b.n	80058ea <RadioRxBoosted+0x3e>
 8005910:	20000508 	.word	0x20000508
 8005914:	48000400 	.word	0x48000400
 8005918:	200004f0 	.word	0x200004f0

0800591c <RadioStandby>:
{
 800591c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800591e:	2000      	movs	r0, #0
 8005920:	f001 fa2e 	bl	8006d80 <SUBGRF_SetStandby>
}
 8005924:	bd08      	pop	{r3, pc}

08005926 <RadioGetStatus>:
{
 8005926:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8005928:	f001 f928 	bl	8006b7c <SUBGRF_GetOperatingMode>
 800592c:	2805      	cmp	r0, #5
 800592e:	d007      	beq.n	8005940 <RadioGetStatus+0x1a>
 8005930:	2807      	cmp	r0, #7
 8005932:	d007      	beq.n	8005944 <RadioGetStatus+0x1e>
 8005934:	2804      	cmp	r0, #4
 8005936:	d001      	beq.n	800593c <RadioGetStatus+0x16>
            return RF_IDLE;
 8005938:	2000      	movs	r0, #0
}
 800593a:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800593c:	2002      	movs	r0, #2
 800593e:	e7fc      	b.n	800593a <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8005940:	2001      	movs	r0, #1
 8005942:	e7fa      	b.n	800593a <RadioGetStatus+0x14>
            return RF_CAD;
 8005944:	2003      	movs	r0, #3
 8005946:	e7f8      	b.n	800593a <RadioGetStatus+0x14>

08005948 <RadioIrqProcess>:
{
 8005948:	b530      	push	{r4, r5, lr}
 800594a:	b083      	sub	sp, #12
    uint8_t size = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8005952:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8005954:	4ba5      	ldr	r3, [pc, #660]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005956:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800595a:	2b20      	cmp	r3, #32
 800595c:	d829      	bhi.n	80059b2 <RadioIrqProcess+0x6a>
 800595e:	b21a      	sxth	r2, r3
 8005960:	2a00      	cmp	r2, #0
 8005962:	f000 8140 	beq.w	8005be6 <RadioIrqProcess+0x29e>
 8005966:	3b01      	subs	r3, #1
 8005968:	2b1f      	cmp	r3, #31
 800596a:	f200 813c 	bhi.w	8005be6 <RadioIrqProcess+0x29e>
 800596e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005972:	0063      	.short	0x0063
 8005974:	013a007f 	.word	0x013a007f
 8005978:	013a00f7 	.word	0x013a00f7
 800597c:	013a013a 	.word	0x013a013a
 8005980:	013a0127 	.word	0x013a0127
 8005984:	013a013a 	.word	0x013a013a
 8005988:	013a013a 	.word	0x013a013a
 800598c:	013a013a 	.word	0x013a013a
 8005990:	013a0134 	.word	0x013a0134
 8005994:	013a013a 	.word	0x013a013a
 8005998:	013a013a 	.word	0x013a013a
 800599c:	013a013a 	.word	0x013a013a
 80059a0:	013a013a 	.word	0x013a013a
 80059a4:	013a013a 	.word	0x013a013a
 80059a8:	013a013a 	.word	0x013a013a
 80059ac:	013a013a 	.word	0x013a013a
 80059b0:	0155      	.short	0x0155
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	f000 80b3 	beq.w	8005b20 <RadioIrqProcess+0x1d8>
 80059ba:	d928      	bls.n	8005a0e <RadioIrqProcess+0xc6>
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c0:	f040 8111 	bne.w	8005be6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80059c4:	4b8a      	ldr	r3, [pc, #552]	; (8005bf0 <RadioIrqProcess+0x2a8>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	2100      	movs	r1, #0
 80059ca:	2002      	movs	r0, #2
 80059cc:	f002 f842 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80059d0:	f001 f8d4 	bl	8006b7c <SUBGRF_GetOperatingMode>
 80059d4:	2804      	cmp	r0, #4
 80059d6:	f000 80b0 	beq.w	8005b3a <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80059da:	f001 f8cf 	bl	8006b7c <SUBGRF_GetOperatingMode>
 80059de:	2805      	cmp	r0, #5
 80059e0:	f040 8101 	bne.w	8005be6 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 80059e4:	4b83      	ldr	r3, [pc, #524]	; (8005bf4 <RadioIrqProcess+0x2ac>)
 80059e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80059ec:	4882      	ldr	r0, [pc, #520]	; (8005bf8 <RadioIrqProcess+0x2b0>)
 80059ee:	f002 fae3 	bl	8007fb8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80059f2:	2000      	movs	r0, #0
 80059f4:	f001 f9c4 	bl	8006d80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80059f8:	4b80      	ldr	r3, [pc, #512]	; (8005bfc <RadioIrqProcess+0x2b4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80f2 	beq.w	8005be6 <RadioIrqProcess+0x29e>
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80ee 	beq.w	8005be6 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8005a0a:	4798      	blx	r3
 8005a0c:	e0eb      	b.n	8005be6 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	f000 811d 	beq.w	8005c4e <RadioIrqProcess+0x306>
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	f040 80e6 	bne.w	8005be6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f001 f9b0 	bl	8006d80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005a20:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80de 	beq.w	8005be6 <RadioIrqProcess+0x29e>
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80da 	beq.w	8005be6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8005a32:	2000      	movs	r0, #0
 8005a34:	4798      	blx	r3
 8005a36:	e0d6      	b.n	8005be6 <RadioIrqProcess+0x29e>
 8005a38:	4b6e      	ldr	r3, [pc, #440]	; (8005bf4 <RadioIrqProcess+0x2ac>)
 8005a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8005a40:	486f      	ldr	r0, [pc, #444]	; (8005c00 <RadioIrqProcess+0x2b8>)
 8005a42:	f002 fab9 	bl	8007fb8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8005a46:	2000      	movs	r0, #0
 8005a48:	f001 f99a 	bl	8006d80 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8005a4c:	f001 ff1e 	bl	800788c <RFW_Is_LongPacketModeEnabled>
 8005a50:	2801      	cmp	r0, #1
 8005a52:	d00a      	beq.n	8005a6a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005a54:	4b69      	ldr	r3, [pc, #420]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80c4 	beq.w	8005be6 <RadioIrqProcess+0x29e>
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80c0 	beq.w	8005be6 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8005a66:	4798      	blx	r3
 8005a68:	e0bd      	b.n	8005be6 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8005a6a:	f001 ff18 	bl	800789e <RFW_DeInit_TxLongPacket>
 8005a6e:	e7f1      	b.n	8005a54 <RadioIrqProcess+0x10c>
 8005a70:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <RadioIrqProcess+0x2ac>)
 8005a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8005a78:	485f      	ldr	r0, [pc, #380]	; (8005bf8 <RadioIrqProcess+0x2b0>)
 8005a7a:	f002 fa9d 	bl	8007fb8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005a7e:	4b5b      	ldr	r3, [pc, #364]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	b303      	cbz	r3, 8005ac6 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f10d 0107 	add.w	r1, sp, #7
 8005a8a:	485e      	ldr	r0, [pc, #376]	; (8005c04 <RadioIrqProcess+0x2bc>)
 8005a8c:	f001 fdb4 	bl	80075f8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8005a90:	485d      	ldr	r0, [pc, #372]	; (8005c08 <RadioIrqProcess+0x2c0>)
 8005a92:	f001 fdcb 	bl	800762c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005a96:	4b59      	ldr	r3, [pc, #356]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80a3 	beq.w	8005be6 <RadioIrqProcess+0x29e>
 8005aa0:	689c      	ldr	r4, [r3, #8]
 8005aa2:	2c00      	cmp	r4, #0
 8005aa4:	f000 809f 	beq.w	8005be6 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8005aa8:	4b50      	ldr	r3, [pc, #320]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d11d      	bne.n	8005aee <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8005ab2:	4a4e      	ldr	r2, [pc, #312]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005ab4:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8005ab8:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8005abc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005ac0:	4850      	ldr	r0, [pc, #320]	; (8005c04 <RadioIrqProcess+0x2bc>)
 8005ac2:	47a0      	blx	r4
                break;
 8005ac4:	e08f      	b.n	8005be6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	f001 f95a 	bl	8006d80 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8005acc:	2100      	movs	r1, #0
 8005ace:	f640 1002 	movw	r0, #2306	; 0x902
 8005ad2:	f001 f85f 	bl	8006b94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8005ad6:	f640 1044 	movw	r0, #2372	; 0x944
 8005ada:	f001 f86b 	bl	8006bb4 <SUBGRF_ReadRegister>
 8005ade:	f040 0102 	orr.w	r1, r0, #2
 8005ae2:	b2c9      	uxtb	r1, r1
 8005ae4:	f640 1044 	movw	r0, #2372	; 0x944
 8005ae8:	f001 f854 	bl	8006b94 <SUBGRF_WriteRegister>
 8005aec:	e7ca      	b.n	8005a84 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8005aee:	4c3f      	ldr	r4, [pc, #252]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005af0:	4669      	mov	r1, sp
 8005af2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005af4:	f001 fe7a 	bl	80077ec <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8005af8:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689d      	ldr	r5, [r3, #8]
 8005afe:	9b00      	ldr	r3, [sp, #0]
 8005b00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b04:	4a41      	ldr	r2, [pc, #260]	; (8005c0c <RadioIrqProcess+0x2c4>)
 8005b06:	fb82 1203 	smull	r1, r2, r2, r3
 8005b0a:	17db      	asrs	r3, r3, #31
 8005b0c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8005b16:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005b1a:	483a      	ldr	r0, [pc, #232]	; (8005c04 <RadioIrqProcess+0x2bc>)
 8005b1c:	47a8      	blx	r5
                break;
 8005b1e:	e062      	b.n	8005be6 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8005b20:	2000      	movs	r0, #0
 8005b22:	f001 f92d 	bl	8006d80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005b26:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d05b      	beq.n	8005be6 <RadioIrqProcess+0x29e>
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d058      	beq.n	8005be6 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8005b34:	2001      	movs	r0, #1
 8005b36:	4798      	blx	r3
 8005b38:	e055      	b.n	8005be6 <RadioIrqProcess+0x29e>
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <RadioIrqProcess+0x2ac>)
 8005b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8005b42:	482f      	ldr	r0, [pc, #188]	; (8005c00 <RadioIrqProcess+0x2b8>)
 8005b44:	f002 fa38 	bl	8007fb8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f001 f919 	bl	8006d80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005b4e:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <RadioIrqProcess+0x2b4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d047      	beq.n	8005be6 <RadioIrqProcess+0x29e>
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d044      	beq.n	8005be6 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8005b5c:	4798      	blx	r3
 8005b5e:	e042      	b.n	8005be6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <RadioIrqProcess+0x2c8>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	2100      	movs	r1, #0
 8005b66:	2002      	movs	r0, #2
 8005b68:	f001 ff74 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8005b6c:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005b6e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005b70:	b3c9      	cbz	r1, 8005be6 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8005b72:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8005b76:	f640 1003 	movw	r0, #2307	; 0x903
 8005b7a:	f7ff fe53 	bl	8005824 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8005b7e:	4c1b      	ldr	r4, [pc, #108]	; (8005bec <RadioIrqProcess+0x2a4>)
 8005b80:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8005b84:	f640 1004 	movw	r0, #2308	; 0x904
 8005b88:	f7ff fe4c 	bl	8005824 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8005b8c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8005b90:	f640 1005 	movw	r0, #2309	; 0x905
 8005b94:	f7ff fe46 	bl	8005824 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8005b98:	f640 1002 	movw	r0, #2306	; 0x902
 8005b9c:	f7ff fe3e 	bl	800581c <RadioRead>
 8005ba0:	f040 0101 	orr.w	r1, r0, #1
 8005ba4:	b2c9      	uxtb	r1, r1
 8005ba6:	f640 1002 	movw	r0, #2306	; 0x902
 8005baa:	f7ff fe3b 	bl	8005824 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8005bae:	2200      	movs	r2, #0
 8005bb0:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	f240 2162 	movw	r1, #610	; 0x262
 8005bb8:	4608      	mov	r0, r1
 8005bba:	f001 fa8e 	bl	80070da <SUBGRF_SetDioIrqParams>
 8005bbe:	e012      	b.n	8005be6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <RadioIrqProcess+0x2cc>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	2002      	movs	r0, #2
 8005bc8:	f001 ff44 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8005bcc:	f001 fe5c 	bl	8007888 <RFW_Is_Init>
 8005bd0:	2801      	cmp	r0, #1
 8005bd2:	d108      	bne.n	8005be6 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8005bd4:	f001 fe64 	bl	80078a0 <RFW_ReceivePayload>
 8005bd8:	e005      	b.n	8005be6 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8005bda:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <RadioIrqProcess+0x2d0>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2100      	movs	r1, #0
 8005be0:	2002      	movs	r0, #2
 8005be2:	f001 ff37 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
}
 8005be6:	b003      	add	sp, #12
 8005be8:	bd30      	pop	{r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	20000508 	.word	0x20000508
 8005bf0:	08008b3c 	.word	0x08008b3c
 8005bf4:	48000400 	.word	0x48000400
 8005bf8:	200004f0 	.word	0x200004f0
 8005bfc:	200004ec 	.word	0x200004ec
 8005c00:	20000564 	.word	0x20000564
 8005c04:	200003ec 	.word	0x200003ec
 8005c08:	2000052c 	.word	0x2000052c
 8005c0c:	10624dd3 	.word	0x10624dd3
 8005c10:	08008b50 	.word	0x08008b50
 8005c14:	08008b5c 	.word	0x08008b5c
 8005c18:	08008b68 	.word	0x08008b68
        TimerStop( &RxTimeoutTimer );
 8005c1c:	4817      	ldr	r0, [pc, #92]	; (8005c7c <RadioIrqProcess+0x334>)
 8005c1e:	f002 f9cb 	bl	8007fb8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <RadioIrqProcess+0x338>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	b173      	cbz	r3, 8005c46 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005c28:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <RadioIrqProcess+0x33c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0da      	beq.n	8005be6 <RadioIrqProcess+0x29e>
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0d7      	beq.n	8005be6 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8005c36:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <RadioIrqProcess+0x340>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	2002      	movs	r0, #2
 8005c40:	f001 ff08 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
 8005c44:	e7cf      	b.n	8005be6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005c46:	2000      	movs	r0, #0
 8005c48:	f001 f89a 	bl	8006d80 <SUBGRF_SetStandby>
 8005c4c:	e7ec      	b.n	8005c28 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <RadioIrqProcess+0x344>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	2100      	movs	r1, #0
 8005c54:	2002      	movs	r0, #2
 8005c56:	f001 fefd 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <RadioIrqProcess+0x338>)
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	b143      	cbz	r3, 8005c72 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8005c60:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <RadioIrqProcess+0x33c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0be      	beq.n	8005be6 <RadioIrqProcess+0x29e>
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0bb      	beq.n	8005be6 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8005c6e:	4798      	blx	r3
}
 8005c70:	e7b9      	b.n	8005be6 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8005c72:	2000      	movs	r0, #0
 8005c74:	f001 f884 	bl	8006d80 <SUBGRF_SetStandby>
 8005c78:	e7f2      	b.n	8005c60 <RadioIrqProcess+0x318>
 8005c7a:	bf00      	nop
 8005c7c:	200004f0 	.word	0x200004f0
 8005c80:	20000508 	.word	0x20000508
 8005c84:	200004ec 	.word	0x200004ec
 8005c88:	08008b74 	.word	0x08008b74
 8005c8c:	08008b80 	.word	0x08008b80

08005c90 <RadioOnDioIrq>:
{
 8005c90:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8005c92:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <RadioOnDioIrq+0x10>)
 8005c94:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8005c98:	f7ff fe56 	bl	8005948 <RadioIrqProcess>
}
 8005c9c:	bd08      	pop	{r3, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000508 	.word	0x20000508

08005ca4 <RadioGetWakeupTime>:
{
 8005ca4:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8005ca6:	f001 fd28 	bl	80076fa <SUBGRF_GetRadioWakeUpTime>
}
 8005caa:	3003      	adds	r0, #3
 8005cac:	bd08      	pop	{r3, pc}

08005cae <RadioReadRegisters>:
{
 8005cae:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8005cb0:	f000 fffe 	bl	8006cb0 <SUBGRF_ReadRegisters>
}
 8005cb4:	bd08      	pop	{r3, pc}

08005cb6 <RadioWriteRegisters>:
{
 8005cb6:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8005cb8:	f000 ffb8 	bl	8006c2c <SUBGRF_WriteRegisters>
}
 8005cbc:	bd08      	pop	{r3, pc}

08005cbe <RadioRssi>:
{
 8005cbe:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8005cc0:	f001 fc6a 	bl	8007598 <SUBGRF_GetRssiInst>
}
 8005cc4:	b200      	sxth	r0, r0
 8005cc6:	bd08      	pop	{r3, pc}

08005cc8 <RadioSetTxContinuousWave>:
{
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8005ccc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005cd0:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8005cd4:	f001 fa74 	bl	80071c0 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f001 fcf7 	bl	80076cc <SUBGRF_SetRfTxPower>
 8005cde:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005ce0:	210e      	movs	r1, #14
 8005ce2:	f640 101f 	movw	r0, #2335	; 0x91f
 8005ce6:	f000 ff55 	bl	8006b94 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005cea:	2101      	movs	r1, #1
 8005cec:	4628      	mov	r0, r5
 8005cee:	f001 fcd9 	bl	80076a4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8005cf2:	f001 f91f 	bl	8006f34 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005cf6:	4d04      	ldr	r5, [pc, #16]	; (8005d08 <RadioSetTxContinuousWave+0x40>)
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f002 f9fc 	bl	80080f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005d00:	4628      	mov	r0, r5
 8005d02:	f002 f9b3 	bl	800806c <UTIL_TIMER_Start>
}
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000564 	.word	0x20000564

08005d0c <RadioSetChannel>:
{
 8005d0c:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8005d0e:	f001 fa57 	bl	80071c0 <SUBGRF_SetRfFrequency>
}
 8005d12:	bd08      	pop	{r3, pc}

08005d14 <RadioStartCad>:
{
 8005d14:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005d16:	2100      	movs	r1, #0
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <RadioStartCad+0x24>)
 8005d1a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8005d1e:	f001 fcc1 	bl	80076a4 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005d22:	2300      	movs	r3, #0
 8005d24:	461a      	mov	r2, r3
 8005d26:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	f001 f9d5 	bl	80070da <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8005d30:	f001 f8f4 	bl	8006f1c <SUBGRF_SetCad>
}
 8005d34:	bd08      	pop	{r3, pc}
 8005d36:	bf00      	nop
 8005d38:	20000508 	.word	0x20000508

08005d3c <RadioRx>:
{
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8005d40:	f001 fda2 	bl	8007888 <RFW_Is_Init>
 8005d44:	2801      	cmp	r0, #1
 8005d46:	d019      	beq.n	8005d7c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005d48:	2300      	movs	r3, #0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f240 2162 	movw	r1, #610	; 0x262
 8005d50:	4608      	mov	r0, r1
 8005d52:	f001 f9c2 	bl	80070da <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8005d56:	b9a4      	cbnz	r4, 8005d82 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005d58:	4c11      	ldr	r4, [pc, #68]	; (8005da0 <RadioRx+0x64>)
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <RadioRx+0x68>)
 8005d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d64:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005d66:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8005d6a:	f001 fc9b 	bl	80076a4 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8005d6e:	7863      	ldrb	r3, [r4, #1]
 8005d70:	b183      	cbz	r3, 8005d94 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005d72:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005d76:	f001 f83f 	bl	8006df8 <SUBGRF_SetRx>
}
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8005d7c:	f001 fd8c 	bl	8007898 <RFW_ReceiveInit>
 8005d80:	e7e9      	b.n	8005d56 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005d82:	4d09      	ldr	r5, [pc, #36]	; (8005da8 <RadioRx+0x6c>)
 8005d84:	4621      	mov	r1, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	f002 f9b6 	bl	80080f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f002 f96d 	bl	800806c <UTIL_TIMER_Start>
 8005d92:	e7e1      	b.n	8005d58 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005d94:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <RadioRx+0x64>)
 8005d96:	6898      	ldr	r0, [r3, #8]
 8005d98:	0180      	lsls	r0, r0, #6
 8005d9a:	f001 f82d 	bl	8006df8 <SUBGRF_SetRx>
}
 8005d9e:	e7ec      	b.n	8005d7a <RadioRx+0x3e>
 8005da0:	20000508 	.word	0x20000508
 8005da4:	48000400 	.word	0x48000400
 8005da8:	200004f0 	.word	0x200004f0

08005dac <RadioSleep>:
{
 8005dac:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8005dae:	f04f 0004 	mov.w	r0, #4
 8005db2:	f000 ffc5 	bl	8006d40 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8005db6:	2002      	movs	r0, #2
 8005db8:	f7fa ff92 	bl	8000ce0 <HAL_Delay>
}
 8005dbc:	bd08      	pop	{r3, pc}
	...

08005dc0 <RadioSend>:
{
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005dc8:	2300      	movs	r3, #0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f240 2101 	movw	r1, #513	; 0x201
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	f001 f982 	bl	80070da <SUBGRF_SetDioIrqParams>
 8005dd6:	4b5e      	ldr	r3, [pc, #376]	; (8005f50 <RadioSend+0x190>)
 8005dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ddc:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005dde:	4e5d      	ldr	r6, [pc, #372]	; (8005f54 <RadioSend+0x194>)
 8005de0:	2101      	movs	r1, #1
 8005de2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8005de6:	f001 fc5d 	bl	80076a4 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005dea:	7833      	ldrb	r3, [r6, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d103      	bne.n	8005df8 <RadioSend+0x38>
 8005df0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8005df4:	2b06      	cmp	r3, #6
 8005df6:	d013      	beq.n	8005e20 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005df8:	f640 0089 	movw	r0, #2185	; 0x889
 8005dfc:	f000 feda 	bl	8006bb4 <SUBGRF_ReadRegister>
 8005e00:	f040 0104 	orr.w	r1, r0, #4
 8005e04:	b2c9      	uxtb	r1, r1
 8005e06:	f640 0089 	movw	r0, #2185	; 0x889
 8005e0a:	f000 fec3 	bl	8006b94 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8005e0e:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <RadioSend+0x194>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d819      	bhi.n	8005e4a <RadioSend+0x8a>
 8005e16:	e8df f003 	tbb	[pc, r3]
 8005e1a:	0e24      	.short	0x0e24
 8005e1c:	5024      	.short	0x5024
 8005e1e:	5d          	.byte	0x5d
 8005e1f:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005e20:	f640 0089 	movw	r0, #2185	; 0x889
 8005e24:	f000 fec6 	bl	8006bb4 <SUBGRF_ReadRegister>
 8005e28:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8005e2c:	f640 0089 	movw	r0, #2185	; 0x889
 8005e30:	f000 feb0 	bl	8006b94 <SUBGRF_WriteRegister>
 8005e34:	e7eb      	b.n	8005e0e <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005e36:	4847      	ldr	r0, [pc, #284]	; (8005f54 <RadioSend+0x194>)
 8005e38:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005e3a:	300e      	adds	r0, #14
 8005e3c:	f001 fb1c 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005e40:	2200      	movs	r2, #0
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 ffcf 	bl	8006de8 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005e4a:	4c43      	ldr	r4, [pc, #268]	; (8005f58 <RadioSend+0x198>)
 8005e4c:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <RadioSend+0x194>)
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	4620      	mov	r0, r4
 8005e52:	f002 f951 	bl	80080f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8005e56:	4620      	mov	r0, r4
 8005e58:	f002 f908 	bl	800806c <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8005e5c:	2000      	movs	r0, #0
}
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8005e62:	f001 fd11 	bl	8007888 <RFW_Is_Init>
 8005e66:	2801      	cmp	r0, #1
 8005e68:	d00a      	beq.n	8005e80 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005e6a:	483a      	ldr	r0, [pc, #232]	; (8005f54 <RadioSend+0x194>)
 8005e6c:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005e6e:	300e      	adds	r0, #14
 8005e70:	f001 fb02 	bl	8007478 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8005e74:	2200      	movs	r2, #0
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 ffb5 	bl	8006de8 <SUBGRF_SendPayload>
 8005e7e:	e7e4      	b.n	8005e4a <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005e80:	f10d 0207 	add.w	r2, sp, #7
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f001 fd03 	bl	8007892 <RFW_TransmitInit>
 8005e8c:	b968      	cbnz	r0, 8005eaa <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005e8e:	4831      	ldr	r0, [pc, #196]	; (8005f54 <RadioSend+0x194>)
 8005e90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e94:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005e96:	300e      	adds	r0, #14
 8005e98:	f001 faee 	bl	8007478 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 ffa0 	bl	8006de8 <SUBGRF_SendPayload>
 8005ea8:	e7cf      	b.n	8005e4a <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8005eaa:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <RadioSend+0x19c>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	2100      	movs	r1, #0
 8005eb0:	2002      	movs	r0, #2
 8005eb2:	f001 fdcf 	bl	8007a54 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8005eb6:	2003      	movs	r0, #3
 8005eb8:	e7d1      	b.n	8005e5e <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005eba:	4826      	ldr	r0, [pc, #152]	; (8005f54 <RadioSend+0x194>)
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005ec0:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ec2:	300e      	adds	r0, #14
 8005ec4:	f001 fad8 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 ff8b 	bl	8006de8 <SUBGRF_SendPayload>
            break;
 8005ed2:	e7ba      	b.n	8005e4a <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4821      	ldr	r0, [pc, #132]	; (8005f60 <RadioSend+0x1a0>)
 8005eda:	f7ff fc27 	bl	800572c <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005ede:	4e1d      	ldr	r6, [pc, #116]	; (8005f54 <RadioSend+0x194>)
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005ee4:	1c65      	adds	r5, r4, #1
 8005ee6:	b2ed      	uxtb	r5, r5
 8005ee8:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005eea:	f106 000e 	add.w	r0, r6, #14
 8005eee:	f001 fac3 	bl	8007478 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	20f1      	movs	r0, #241	; 0xf1
 8005ef6:	f7ff fc95 	bl	8005824 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8005efa:	2100      	movs	r1, #0
 8005efc:	20f0      	movs	r0, #240	; 0xf0
 8005efe:	f7ff fc91 	bl	8005824 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005f02:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005f04:	2b64      	cmp	r3, #100	; 0x64
 8005f06:	d019      	beq.n	8005f3c <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8005f08:	21e1      	movs	r1, #225	; 0xe1
 8005f0a:	20f3      	movs	r0, #243	; 0xf3
 8005f0c:	f7ff fc8a 	bl	8005824 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005f10:	2104      	movs	r1, #4
 8005f12:	20f2      	movs	r0, #242	; 0xf2
 8005f14:	f7ff fc86 	bl	8005824 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8005f18:	00e1      	lsls	r1, r4, #3
 8005f1a:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005f1c:	0a09      	lsrs	r1, r1, #8
 8005f1e:	20f4      	movs	r0, #244	; 0xf4
 8005f20:	f7ff fc80 	bl	8005824 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005f24:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8005f28:	20f5      	movs	r0, #245	; 0xf5
 8005f2a:	f7ff fc7b 	bl	8005824 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8005f2e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005f32:	4629      	mov	r1, r5
 8005f34:	480a      	ldr	r0, [pc, #40]	; (8005f60 <RadioSend+0x1a0>)
 8005f36:	f000 ff57 	bl	8006de8 <SUBGRF_SendPayload>
            break;
 8005f3a:	e786      	b.n	8005e4a <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8005f3c:	2170      	movs	r1, #112	; 0x70
 8005f3e:	20f3      	movs	r0, #243	; 0xf3
 8005f40:	f7ff fc70 	bl	8005824 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8005f44:	211d      	movs	r1, #29
 8005f46:	20f2      	movs	r0, #242	; 0xf2
 8005f48:	f7ff fc6c 	bl	8005824 <RadioWrite>
 8005f4c:	e7e4      	b.n	8005f18 <RadioSend+0x158>
 8005f4e:	bf00      	nop
 8005f50:	48000400 	.word	0x48000400
 8005f54:	20000508 	.word	0x20000508
 8005f58:	20000564 	.word	0x20000564
 8005f5c:	08008b90 	.word	0x08008b90
 8005f60:	200003ec 	.word	0x200003ec

08005f64 <RadioRandom>:
{
 8005f64:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005f66:	2300      	movs	r3, #0
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f8b4 	bl	80070da <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8005f72:	f000 ff5b 	bl	8006e2c <SUBGRF_GetRandom>
}
 8005f76:	bd08      	pop	{r3, pc}

08005f78 <RadioSetModem>:
{
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <RadioSetModem+0x78>)
 8005f7e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8005f80:	f001 fc8f 	bl	80078a2 <RFW_SetRadioModem>
    switch( modem )
 8005f84:	2c05      	cmp	r4, #5
 8005f86:	d804      	bhi.n	8005f92 <RadioSetModem+0x1a>
 8005f88:	e8df f004 	tbb	[pc, r4]
 8005f8c:	1d03110a 	.word	0x1d03110a
 8005f90:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005f92:	2003      	movs	r0, #3
 8005f94:	f001 f940 	bl	8007218 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <RadioSetModem+0x78>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	735a      	strb	r2, [r3, #13]
}
 8005f9e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f001 f939 	bl	8007218 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <RadioSetModem+0x78>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	735a      	strb	r2, [r3, #13]
        break;
 8005fac:	e7f7      	b.n	8005f9e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f001 f932 	bl	8007218 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <RadioSetModem+0x78>)
 8005fb6:	7b5a      	ldrb	r2, [r3, #13]
 8005fb8:	7b18      	ldrb	r0, [r3, #12]
 8005fba:	4282      	cmp	r2, r0
 8005fbc:	d0ef      	beq.n	8005f9e <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8005fbe:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005fc0:	f000 fade 	bl	8006580 <RadioSetPublicNetwork>
 8005fc4:	e7eb      	b.n	8005f9e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005fc6:	2002      	movs	r0, #2
 8005fc8:	f001 f926 	bl	8007218 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <RadioSetModem+0x78>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	735a      	strb	r2, [r3, #13]
        break;
 8005fd2:	e7e4      	b.n	8005f9e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8005fd4:	2002      	movs	r0, #2
 8005fd6:	f001 f91f 	bl	8007218 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <RadioSetModem+0x78>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	735a      	strb	r2, [r3, #13]
        break;
 8005fe0:	e7dd      	b.n	8005f9e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f001 f918 	bl	8007218 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8005fe8:	4b01      	ldr	r3, [pc, #4]	; (8005ff0 <RadioSetModem+0x78>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	735a      	strb	r2, [r3, #13]
}
 8005fee:	e7d6      	b.n	8005f9e <RadioSetModem+0x26>
 8005ff0:	20000508 	.word	0x20000508

08005ff4 <RadioSetTxGenericConfig>:
{
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	4605      	mov	r5, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	4617      	mov	r7, r2
 8006000:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8006002:	2100      	movs	r1, #0
 8006004:	9104      	str	r1, [sp, #16]
 8006006:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006008:	f001 fc3d 	bl	8007886 <RFW_DeInit>
    switch( modem )
 800600c:	2d03      	cmp	r5, #3
 800600e:	f200 8156 	bhi.w	80062be <RadioSetTxGenericConfig+0x2ca>
 8006012:	e8df f015 	tbh	[pc, r5, lsl #1]
 8006016:	007a      	.short	0x007a
 8006018:	014000dd 	.word	0x014000dd
 800601c:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 800601e:	7ca2      	ldrb	r2, [r4, #18]
 8006020:	2a08      	cmp	r2, #8
 8006022:	f200 8159 	bhi.w	80062d8 <RadioSetTxGenericConfig+0x2e4>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8006026:	68a1      	ldr	r1, [r4, #8]
 8006028:	a804      	add	r0, sp, #16
 800602a:	f001 fe29 	bl	8007c80 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8154 	beq.w	80062de <RadioSetTxGenericConfig+0x2ea>
        else if( config->msk.BitRate <= 10000 )
 8006036:	f242 7210 	movw	r2, #10000	; 0x2710
 800603a:	4293      	cmp	r3, r2
 800603c:	d823      	bhi.n	8006086 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800603e:	4bae      	ldr	r3, [pc, #696]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006040:	2203      	movs	r2, #3
 8006042:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8006044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800604c:	7ce2      	ldrb	r2, [r4, #19]
 800604e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 8006052:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	00da      	lsls	r2, r3, #3
 8006058:	4ba7      	ldr	r3, [pc, #668]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 800605a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800605c:	2204      	movs	r2, #4
 800605e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8006060:	7ca2      	ldrb	r2, [r4, #18]
 8006062:	00d2      	lsls	r2, r2, #3
 8006064:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006066:	2200      	movs	r2, #0
 8006068:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800606a:	7da3      	ldrb	r3, [r4, #22]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d018      	beq.n	80060a2 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006070:	7d23      	ldrb	r3, [r4, #20]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d015      	beq.n	80060a2 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8006076:	7d62      	ldrb	r2, [r4, #21]
 8006078:	4b9f      	ldr	r3, [pc, #636]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 800607a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800607c:	7da2      	ldrb	r2, [r4, #22]
 800607e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8006080:	7d22      	ldrb	r2, [r4, #20]
 8006082:	755a      	strb	r2, [r3, #21]
 8006084:	e026      	b.n	80060d4 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006086:	4b9c      	ldr	r3, [pc, #624]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006088:	2500      	movs	r5, #0
 800608a:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800608c:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006094:	7ce2      	ldrb	r2, [r4, #19]
 8006096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	0892      	lsrs	r2, r2, #2
 800609e:	641a      	str	r2, [r3, #64]	; 0x40
 80060a0:	e7d8      	b.n	8006054 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80060a2:	7d62      	ldrb	r2, [r4, #21]
 80060a4:	f102 030f 	add.w	r3, r2, #15
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d901      	bls.n	80060b2 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80060ae:	2a01      	cmp	r2, #1
 80060b0:	d128      	bne.n	8006104 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig = config;
 80060b2:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80060ba:	4a90      	ldr	r2, [pc, #576]	; (80062fc <RadioSetTxGenericConfig+0x308>)
 80060bc:	4b90      	ldr	r3, [pc, #576]	; (8006300 <RadioSetTxGenericConfig+0x30c>)
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	a801      	add	r0, sp, #4
 80060c2:	f001 fbdd 	bl	8007880 <RFW_Init>
 80060c6:	b9e8      	cbnz	r0, 8006104 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80060c8:	4b8b      	ldr	r3, [pc, #556]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80060ce:	2101      	movs	r1, #1
 80060d0:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80060d2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80060d4:	f7ff fc22 	bl	800591c <RadioStandby>
        RadioSetModem( radio_modem );
 80060d8:	4628      	mov	r0, r5
 80060da:	f7ff ff4d 	bl	8005f78 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80060de:	4d86      	ldr	r5, [pc, #536]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80060e0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80060e4:	f001 f940 	bl	8007368 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060e8:	f105 000e 	add.w	r0, r5, #14
 80060ec:	f001 f9c4 	bl	8007478 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80060f0:	a804      	add	r0, sp, #16
 80060f2:	f000 fdab 	bl	8006c4c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80060f6:	8a20      	ldrh	r0, [r4, #16]
 80060f8:	f000 fd7f 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80060fc:	89a0      	ldrh	r0, [r4, #12]
 80060fe:	f000 fdc2 	bl	8006c86 <SUBGRF_SetCrcPolynomial>
        break;
 8006102:	e0dc      	b.n	80062be <RadioSetTxGenericConfig+0x2ca>
                return -1;
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	e0e3      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
        if( config->fsk.BitRate == 0 )
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80e9 	beq.w	80062e4 <RadioSetTxGenericConfig+0x2f0>
        if( config->fsk.SyncWordLength > 8 )
 8006112:	7ca2      	ldrb	r2, [r4, #18]
 8006114:	2a08      	cmp	r2, #8
 8006116:	f200 80e8 	bhi.w	80062ea <RadioSetTxGenericConfig+0x2f6>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800611a:	68a1      	ldr	r1, [r4, #8]
 800611c:	a804      	add	r0, sp, #16
 800611e:	f001 fdaf 	bl	8007c80 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006122:	4b75      	ldr	r3, [pc, #468]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800612a:	6821      	ldr	r1, [r4, #0]
 800612c:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800612e:	7ce1      	ldrb	r1, [r4, #19]
 8006130:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006134:	69a1      	ldr	r1, [r4, #24]
 8006136:	6419      	str	r1, [r3, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006138:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800613a:	6861      	ldr	r1, [r4, #4]
 800613c:	00c9      	lsls	r1, r1, #3
 800613e:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006140:	2104      	movs	r1, #4
 8006142:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006144:	7ca1      	ldrb	r1, [r4, #18]
 8006146:	00c9      	lsls	r1, r1, #3
 8006148:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800614a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800614c:	7da3      	ldrb	r3, [r4, #22]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d00a      	beq.n	8006168 <RadioSetTxGenericConfig+0x174>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006152:	7d23      	ldrb	r3, [r4, #20]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d007      	beq.n	8006168 <RadioSetTxGenericConfig+0x174>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006158:	7d62      	ldrb	r2, [r4, #21]
 800615a:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 800615c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800615e:	7da2      	ldrb	r2, [r4, #22]
 8006160:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006162:	7d22      	ldrb	r2, [r4, #20]
 8006164:	755a      	strb	r2, [r3, #21]
 8006166:	e018      	b.n	800619a <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006168:	7d62      	ldrb	r2, [r4, #21]
 800616a:	f102 030f 	add.w	r3, r2, #15
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d901      	bls.n	8006178 <RadioSetTxGenericConfig+0x184>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006174:	2a01      	cmp	r2, #1
 8006176:	d128      	bne.n	80061ca <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 8006178:	2301      	movs	r3, #1
 800617a:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800617e:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006180:	4a5e      	ldr	r2, [pc, #376]	; (80062fc <RadioSetTxGenericConfig+0x308>)
 8006182:	4b5f      	ldr	r3, [pc, #380]	; (8006300 <RadioSetTxGenericConfig+0x30c>)
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	a801      	add	r0, sp, #4
 8006188:	f001 fb7a 	bl	8007880 <RFW_Init>
 800618c:	b9e8      	cbnz	r0, 80061ca <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800618e:	4b5a      	ldr	r3, [pc, #360]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006190:	2200      	movs	r2, #0
 8006192:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006194:	2101      	movs	r1, #1
 8006196:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006198:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800619a:	f7ff fbbf 	bl	800591c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800619e:	2000      	movs	r0, #0
 80061a0:	f7ff feea 	bl	8005f78 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80061a4:	4d54      	ldr	r5, [pc, #336]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80061a6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80061aa:	f001 f8dd 	bl	8007368 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80061ae:	f105 000e 	add.w	r0, r5, #14
 80061b2:	f001 f961 	bl	8007478 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80061b6:	a804      	add	r0, sp, #16
 80061b8:	f000 fd48 	bl	8006c4c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80061bc:	8a20      	ldrh	r0, [r4, #16]
 80061be:	f000 fd1c 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80061c2:	89a0      	ldrh	r0, [r4, #12]
 80061c4:	f000 fd5f 	bl	8006c86 <SUBGRF_SetCrcPolynomial>
        break;
 80061c8:	e079      	b.n	80062be <RadioSetTxGenericConfig+0x2ca>
                return -1;
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	e080      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80061d0:	4b49      	ldr	r3, [pc, #292]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80061d8:	7822      	ldrb	r2, [r4, #0]
 80061da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80061de:	7862      	ldrb	r2, [r4, #1]
 80061e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80061e4:	78a2      	ldrb	r2, [r4, #2]
 80061e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80061ea:	78e3      	ldrb	r3, [r4, #3]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d033      	beq.n	8006258 <RadioSetTxGenericConfig+0x264>
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d036      	beq.n	8006262 <RadioSetTxGenericConfig+0x26e>
 80061f4:	b35b      	cbz	r3, 800624e <RadioSetTxGenericConfig+0x25a>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80061f6:	4d40      	ldr	r5, [pc, #256]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80061f8:	f04f 0801 	mov.w	r8, #1
 80061fc:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006200:	88a3      	ldrh	r3, [r4, #4]
 8006202:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006204:	79a3      	ldrb	r3, [r4, #6]
 8006206:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006208:	79e3      	ldrb	r3, [r4, #7]
 800620a:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800620e:	7a23      	ldrb	r3, [r4, #8]
 8006210:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8006214:	f7ff fb82 	bl	800591c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006218:	4640      	mov	r0, r8
 800621a:	f7ff fead 	bl	8005f78 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800621e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006222:	f001 f8a1 	bl	8007368 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006226:	f105 000e 	add.w	r0, r5, #14
 800622a:	f001 f925 	bl	8007478 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800622e:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8006232:	2b06      	cmp	r3, #6
 8006234:	d024      	beq.n	8006280 <RadioSetTxGenericConfig+0x28c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006236:	f640 0089 	movw	r0, #2185	; 0x889
 800623a:	f000 fcbb 	bl	8006bb4 <SUBGRF_ReadRegister>
 800623e:	f040 0104 	orr.w	r1, r0, #4
 8006242:	b2c9      	uxtb	r1, r1
 8006244:	f640 0089 	movw	r0, #2185	; 0x889
 8006248:	f000 fca4 	bl	8006b94 <SUBGRF_WriteRegister>
 800624c:	e037      	b.n	80062be <RadioSetTxGenericConfig+0x2ca>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006256:	e7ce      	b.n	80061f6 <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006258:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006260:	e7c9      	b.n	80061f6 <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006262:	7823      	ldrb	r3, [r4, #0]
 8006264:	3b0b      	subs	r3, #11
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	d904      	bls.n	8006276 <RadioSetTxGenericConfig+0x282>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006274:	e7bf      	b.n	80061f6 <RadioSetTxGenericConfig+0x202>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800627e:	e7ba      	b.n	80061f6 <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006280:	f640 0089 	movw	r0, #2185	; 0x889
 8006284:	f000 fc96 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006288:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800628c:	f640 0089 	movw	r0, #2185	; 0x889
 8006290:	f000 fc80 	bl	8006b94 <SUBGRF_WriteRegister>
 8006294:	e013      	b.n	80062be <RadioSetTxGenericConfig+0x2ca>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629e:	d227      	bcs.n	80062f0 <RadioSetTxGenericConfig+0x2fc>
        RadioSetModem( MODEM_BPSK );
 80062a0:	2003      	movs	r0, #3
 80062a2:	f7ff fe69 	bl	8005f78 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80062a6:	4814      	ldr	r0, [pc, #80]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80062a8:	2302      	movs	r3, #2
 80062aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80062b2:	2316      	movs	r3, #22
 80062b4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80062b8:	3038      	adds	r0, #56	; 0x38
 80062ba:	f001 f855 	bl	8007368 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80062be:	4638      	mov	r0, r7
 80062c0:	f001 fa04 	bl	80076cc <SUBGRF_SetRfTxPower>
 80062c4:	4c0c      	ldr	r4, [pc, #48]	; (80062f8 <RadioSetTxGenericConfig+0x304>)
 80062c6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80062ca:	f001 fae1 	bl	8007890 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80062ce:	6066      	str	r6, [r4, #4]
    return 0;
 80062d0:	2000      	movs	r0, #0
}
 80062d2:	b006      	add	sp, #24
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e7f9      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	e7f6      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	e7f3      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	e7f0      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
            return -1;
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	e7ed      	b.n	80062d2 <RadioSetTxGenericConfig+0x2de>
 80062f6:	bf00      	nop
 80062f8:	20000508 	.word	0x20000508
 80062fc:	20000564 	.word	0x20000564
 8006300:	200004ec 	.word	0x200004ec

08006304 <RadioSetRxGenericConfig>:
{
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	4606      	mov	r6, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4615      	mov	r5, r2
 8006310:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8006312:	2300      	movs	r3, #0
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006318:	f001 fab5 	bl	8007886 <RFW_DeInit>
    if( rxContinuous != 0 )
 800631c:	b105      	cbz	r5, 8006320 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800631e:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006320:	3d00      	subs	r5, #0
 8006322:	bf18      	it	ne
 8006324:	2501      	movne	r5, #1
 8006326:	4b93      	ldr	r3, [pc, #588]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006328:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800632a:	b136      	cbz	r6, 800633a <RadioSetRxGenericConfig+0x36>
 800632c:	2e01      	cmp	r6, #1
 800632e:	f000 808f 	beq.w	8006450 <RadioSetRxGenericConfig+0x14c>
 8006332:	2000      	movs	r0, #0
}
 8006334:	b006      	add	sp, #24
 8006336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 810d 	beq.w	800655c <RadioSetRxGenericConfig+0x258>
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 810c 	beq.w	8006562 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800634a:	7fa2      	ldrb	r2, [r4, #30]
 800634c:	2a08      	cmp	r2, #8
 800634e:	f200 810b 	bhi.w	8006568 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8006352:	6921      	ldr	r1, [r4, #16]
 8006354:	a804      	add	r0, sp, #16
 8006356:	f001 fc93 	bl	8007c80 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	3800      	subs	r0, #0
 800635e:	bf18      	it	ne
 8006360:	2001      	movne	r0, #1
 8006362:	f000 fdf5 	bl	8006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006366:	4d83      	ldr	r5, [pc, #524]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006368:	2600      	movs	r6, #0
 800636a:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800636e:	68a3      	ldr	r3, [r4, #8]
 8006370:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006372:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006376:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800637a:	6860      	ldr	r0, [r4, #4]
 800637c:	f001 fa1e 	bl	80077bc <SUBGRF_GetFskBandwidthRegValue>
 8006380:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006384:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800638c:	7fe3      	ldrb	r3, [r4, #31]
 800638e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006390:	7fa3      	ldrb	r3, [r4, #30]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006396:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800639a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800639c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80063a0:	b973      	cbnz	r3, 80063c0 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80063a2:	6961      	ldr	r1, [r4, #20]
 80063a4:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80063a6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80063aa:	2a02      	cmp	r2, #2
 80063ac:	d012      	beq.n	80063d4 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d010      	beq.n	80063d4 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80063b2:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80063b6:	496f      	ldr	r1, [pc, #444]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 80063b8:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80063ba:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80063bc:	754b      	strb	r3, [r1, #21]
 80063be:	e023      	b.n	8006408 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d003      	beq.n	80063cc <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80063c4:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 80063c6:	21ff      	movs	r1, #255	; 0xff
 80063c8:	7591      	strb	r1, [r2, #22]
 80063ca:	e7ec      	b.n	80063a6 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80063cc:	4a69      	ldr	r2, [pc, #420]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 80063ce:	21ff      	movs	r1, #255	; 0xff
 80063d0:	7591      	strb	r1, [r2, #22]
 80063d2:	e7e8      	b.n	80063a6 <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80063d4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80063d8:	f102 030f 	add.w	r3, r2, #15
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d901      	bls.n	80063e6 <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80063e2:	2a01      	cmp	r2, #1
 80063e4:	d131      	bne.n	800644a <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 80063ec:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80063ee:	4a62      	ldr	r2, [pc, #392]	; (8006578 <RadioSetRxGenericConfig+0x274>)
 80063f0:	4b62      	ldr	r3, [pc, #392]	; (800657c <RadioSetRxGenericConfig+0x278>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	a801      	add	r0, sp, #4
 80063f6:	f001 fa43 	bl	8007880 <RFW_Init>
 80063fa:	bb30      	cbnz	r0, 800644a <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80063fc:	4b5d      	ldr	r3, [pc, #372]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 80063fe:	2200      	movs	r2, #0
 8006400:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006402:	2101      	movs	r1, #1
 8006404:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006406:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006408:	f7ff fa88 	bl	800591c <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff fdb3 	bl	8005f78 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006412:	4d58      	ldr	r5, [pc, #352]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006414:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006418:	f000 ffa6 	bl	8007368 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800641c:	f105 000e 	add.w	r0, r5, #14
 8006420:	f001 f82a 	bl	8007478 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006424:	a804      	add	r0, sp, #16
 8006426:	f000 fc11 	bl	8006c4c <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800642a:	8ba0      	ldrh	r0, [r4, #28]
 800642c:	f000 fbe5 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006430:	8b20      	ldrh	r0, [r4, #24]
 8006432:	f000 fc28 	bl	8006c86 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006436:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800643a:	fb03 f707 	mul.w	r7, r3, r7
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	fbb7 f7f3 	udiv	r7, r7, r3
 8006444:	60af      	str	r7, [r5, #8]
    return status;
 8006446:	2000      	movs	r0, #0
        break;
 8006448:	e774      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
                return -1;
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
 800644e:	e771      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8006450:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 808b 	beq.w	800656e <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006458:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800645c:	2b01      	cmp	r3, #1
 800645e:	d055      	beq.n	800650c <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8006460:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006464:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006466:	3800      	subs	r0, #0
 8006468:	bf18      	it	ne
 800646a:	2001      	movne	r0, #1
 800646c:	f000 fd70 	bl	8006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006470:	b2f8      	uxtb	r0, r7
 8006472:	f000 fd7a 	bl	8006f6a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006476:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800647e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8006482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006486:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800648a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800648e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8006492:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006496:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800649a:	2b01      	cmp	r3, #1
 800649c:	d03e      	beq.n	800651c <RadioSetRxGenericConfig+0x218>
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d041      	beq.n	8006526 <RadioSetRxGenericConfig+0x222>
 80064a2:	b3b3      	cbz	r3, 8006512 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80064a4:	4d33      	ldr	r5, [pc, #204]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 80064a6:	2601      	movs	r6, #1
 80064a8:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80064aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80064ac:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80064ae:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80064b2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80064b4:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80064b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80064bc:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80064c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80064c4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 80064c8:	f7ff fa28 	bl	800591c <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff fd53 	bl	8005f78 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80064d2:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80064d6:	f000 ff47 	bl	8007368 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80064da:	f105 000e 	add.w	r0, r5, #14
 80064de:	f000 ffcb 	bl	8007478 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80064e2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80064e6:	42b3      	cmp	r3, r6
 80064e8:	d02d      	beq.n	8006546 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80064ea:	f240 7036 	movw	r0, #1846	; 0x736
 80064ee:	f000 fb61 	bl	8006bb4 <SUBGRF_ReadRegister>
 80064f2:	f040 0104 	orr.w	r1, r0, #4
 80064f6:	b2c9      	uxtb	r1, r1
 80064f8:	f240 7036 	movw	r0, #1846	; 0x736
 80064fc:	f000 fb4a 	bl	8006b94 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006506:	609a      	str	r2, [r3, #8]
    return status;
 8006508:	2000      	movs	r0, #0
        break;
 800650a:	e713      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800650c:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006510:	e7a8      	b.n	8006464 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006512:	4b18      	ldr	r3, [pc, #96]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800651a:	e7c3      	b.n	80064a4 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006524:	e7be      	b.n	80064a4 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006526:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800652a:	3b0b      	subs	r3, #11
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	d904      	bls.n	800653c <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800653a:	e7b3      	b.n	80064a4 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800653c:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <RadioSetRxGenericConfig+0x270>)
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006544:	e7ae      	b.n	80064a4 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006546:	f240 7036 	movw	r0, #1846	; 0x736
 800654a:	f000 fb33 	bl	8006bb4 <SUBGRF_ReadRegister>
 800654e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006552:	f240 7036 	movw	r0, #1846	; 0x736
 8006556:	f000 fb1d 	bl	8006b94 <SUBGRF_WriteRegister>
 800655a:	e7d1      	b.n	8006500 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e6e8      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
 8006562:	f04f 30ff 	mov.w	r0, #4294967295
 8006566:	e6e5      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
            return -1;
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e6e2      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
            return -1;
 800656e:	f04f 30ff 	mov.w	r0, #4294967295
 8006572:	e6df      	b.n	8006334 <RadioSetRxGenericConfig+0x30>
 8006574:	20000508 	.word	0x20000508
 8006578:	200004f0 	.word	0x200004f0
 800657c:	200004ec 	.word	0x200004ec

08006580 <RadioSetPublicNetwork>:
{
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <RadioSetPublicNetwork+0x40>)
 8006586:	7318      	strb	r0, [r3, #12]
 8006588:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800658a:	2001      	movs	r0, #1
 800658c:	f7ff fcf4 	bl	8005f78 <RadioSetModem>
    if( enable == true )
 8006590:	b154      	cbz	r4, 80065a8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006592:	2134      	movs	r1, #52	; 0x34
 8006594:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006598:	f000 fafc 	bl	8006b94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800659c:	2144      	movs	r1, #68	; 0x44
 800659e:	f240 7041 	movw	r0, #1857	; 0x741
 80065a2:	f000 faf7 	bl	8006b94 <SUBGRF_WriteRegister>
}
 80065a6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80065a8:	2114      	movs	r1, #20
 80065aa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80065ae:	f000 faf1 	bl	8006b94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80065b2:	2124      	movs	r1, #36	; 0x24
 80065b4:	f240 7041 	movw	r0, #1857	; 0x741
 80065b8:	f000 faec 	bl	8006b94 <SUBGRF_WriteRegister>
}
 80065bc:	e7f3      	b.n	80065a6 <RadioSetPublicNetwork+0x26>
 80065be:	bf00      	nop
 80065c0:	20000508 	.word	0x20000508

080065c4 <RadioSetTxConfig>:
{
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	b083      	sub	sp, #12
 80065ca:	4604      	mov	r4, r0
 80065cc:	460d      	mov	r5, r1
 80065ce:	4691      	mov	r9, r2
 80065d0:	461f      	mov	r7, r3
 80065d2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80065d6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80065da:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 80065de:	f001 f952 	bl	8007886 <RFW_DeInit>
    switch( modem )
 80065e2:	2c01      	cmp	r4, #1
 80065e4:	d05d      	beq.n	80066a2 <RadioSetTxConfig+0xde>
 80065e6:	2c04      	cmp	r4, #4
 80065e8:	f000 80aa 	beq.w	8006740 <RadioSetTxConfig+0x17c>
 80065ec:	b19c      	cbz	r4, 8006616 <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80065ee:	4628      	mov	r0, r5
 80065f0:	f001 f86c 	bl	80076cc <SUBGRF_SetRfTxPower>
 80065f4:	4c5a      	ldr	r4, [pc, #360]	; (8006760 <RadioSetTxConfig+0x19c>)
 80065f6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80065fa:	210e      	movs	r1, #14
 80065fc:	f640 101f 	movw	r0, #2335	; 0x91f
 8006600:	f000 fac8 	bl	8006b94 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006604:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8006608:	f001 f942 	bl	8007890 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800660c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800660e:	6063      	str	r3, [r4, #4]
}
 8006610:	b003      	add	sp, #12
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006616:	4c52      	ldr	r4, [pc, #328]	; (8006760 <RadioSetTxConfig+0x19c>)
 8006618:	f04f 0b00 	mov.w	fp, #0
 800661c:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006622:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006624:	230b      	movs	r3, #11
 8006626:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800662a:	4638      	mov	r0, r7
 800662c:	f001 f8c6 	bl	80077bc <SUBGRF_GetFskBandwidthRegValue>
 8006630:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006634:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006638:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800663c:	00f6      	lsls	r6, r6, #3
 800663e:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006640:	2304      	movs	r3, #4
 8006642:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006644:	2318      	movs	r3, #24
 8006646:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006648:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800664c:	f088 0801 	eor.w	r8, r8, #1
 8006650:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8006654:	f1ba 0f00 	cmp.w	sl, #0
 8006658:	d01f      	beq.n	800669a <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800665a:	22f2      	movs	r2, #242	; 0xf2
 800665c:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800665e:	4c40      	ldr	r4, [pc, #256]	; (8006760 <RadioSetTxConfig+0x19c>)
 8006660:	2301      	movs	r3, #1
 8006662:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006664:	f7ff f95a 	bl	800591c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006668:	2000      	movs	r0, #0
 800666a:	f7ff fc85 	bl	8005f78 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800666e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006672:	f000 fe79 	bl	8007368 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006676:	f104 000e 	add.w	r0, r4, #14
 800667a:	f000 fefd 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800667e:	4a39      	ldr	r2, [pc, #228]	; (8006764 <RadioSetTxConfig+0x1a0>)
 8006680:	466b      	mov	r3, sp
 8006682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006686:	e883 0003 	stmia.w	r3, {r0, r1}
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fade 	bl	8006c4c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006690:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006694:	f000 fab1 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
            break;
 8006698:	e7a9      	b.n	80065ee <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800669a:	4b31      	ldr	r3, [pc, #196]	; (8006760 <RadioSetTxConfig+0x19c>)
 800669c:	2201      	movs	r2, #1
 800669e:	75da      	strb	r2, [r3, #23]
 80066a0:	e7dd      	b.n	800665e <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80066a2:	4a2f      	ldr	r2, [pc, #188]	; (8006760 <RadioSetTxConfig+0x19c>)
 80066a4:	2301      	movs	r3, #1
 80066a6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80066aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80066b2:	492d      	ldr	r1, [pc, #180]	; (8006768 <RadioSetTxConfig+0x1a4>)
 80066b4:	5dc9      	ldrb	r1, [r1, r7]
 80066b6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80066ba:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80066be:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80066c2:	b91f      	cbnz	r7, 80066cc <RadioSetTxConfig+0x108>
 80066c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066c6:	3a0b      	subs	r2, #11
 80066c8:	2a01      	cmp	r2, #1
 80066ca:	d92b      	bls.n	8006724 <RadioSetTxConfig+0x160>
 80066cc:	2f01      	cmp	r7, #1
 80066ce:	d026      	beq.n	800671e <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80066d0:	4a23      	ldr	r2, [pc, #140]	; (8006760 <RadioSetTxConfig+0x19c>)
 80066d2:	2100      	movs	r1, #0
 80066d4:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80066d8:	4a21      	ldr	r2, [pc, #132]	; (8006760 <RadioSetTxConfig+0x19c>)
 80066da:	2101      	movs	r1, #1
 80066dc:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80066de:	3b05      	subs	r3, #5
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	428b      	cmp	r3, r1
 80066e4:	d923      	bls.n	800672e <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80066e6:	4b1e      	ldr	r3, [pc, #120]	; (8006760 <RadioSetTxConfig+0x19c>)
 80066e8:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80066ea:	4c1d      	ldr	r4, [pc, #116]	; (8006760 <RadioSetTxConfig+0x19c>)
 80066ec:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80066f0:	4b1e      	ldr	r3, [pc, #120]	; (800676c <RadioSetTxConfig+0x1a8>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80066f6:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80066fa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80066fe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006702:	f7ff f90b 	bl	800591c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006706:	2001      	movs	r0, #1
 8006708:	f7ff fc36 	bl	8005f78 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800670c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006710:	f000 fe2a 	bl	8007368 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006714:	f104 000e 	add.w	r0, r4, #14
 8006718:	f000 feae 	bl	8007478 <SUBGRF_SetPacketParams>
            break;
 800671c:	e767      	b.n	80065ee <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800671e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006720:	2a0c      	cmp	r2, #12
 8006722:	d1d5      	bne.n	80066d0 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006724:	4a0e      	ldr	r2, [pc, #56]	; (8006760 <RadioSetTxConfig+0x19c>)
 8006726:	2101      	movs	r1, #1
 8006728:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800672c:	e7d4      	b.n	80066d8 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 800672e:	2e0b      	cmp	r6, #11
 8006730:	d803      	bhi.n	800673a <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006732:	4613      	mov	r3, r2
 8006734:	220c      	movs	r2, #12
 8006736:	839a      	strh	r2, [r3, #28]
 8006738:	e7d7      	b.n	80066ea <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <RadioSetTxConfig+0x19c>)
 800673c:	839e      	strh	r6, [r3, #28]
 800673e:	e7d4      	b.n	80066ea <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006740:	2004      	movs	r0, #4
 8006742:	f7ff fc19 	bl	8005f78 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006746:	4806      	ldr	r0, [pc, #24]	; (8006760 <RadioSetTxConfig+0x19c>)
 8006748:	2302      	movs	r3, #2
 800674a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800674e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006750:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006752:	2316      	movs	r3, #22
 8006754:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006758:	3038      	adds	r0, #56	; 0x38
 800675a:	f000 fe05 	bl	8007368 <SUBGRF_SetModulationParams>
            break;
 800675e:	e746      	b.n	80065ee <RadioSetTxConfig+0x2a>
 8006760:	20000508 	.word	0x20000508
 8006764:	08008524 	.word	0x08008524
 8006768:	08008ba8 	.word	0x08008ba8
 800676c:	2000000c 	.word	0x2000000c

08006770 <RadioSetRxConfig>:
{
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	b087      	sub	sp, #28
 8006776:	4604      	mov	r4, r0
 8006778:	460e      	mov	r6, r1
 800677a:	4615      	mov	r5, r2
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8006782:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8006786:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800678a:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 800678e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8006792:	4bb0      	ldr	r3, [pc, #704]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006794:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8006798:	f001 f875 	bl	8007886 <RFW_DeInit>
    if( rxContinuous == true )
 800679c:	f1b8 0f00 	cmp.w	r8, #0
 80067a0:	d001      	beq.n	80067a6 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80067a2:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80067a6:	b16f      	cbz	r7, 80067c4 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 80067a8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80067ac:	4baa      	ldr	r3, [pc, #680]	; (8006a58 <RadioSetRxConfig+0x2e8>)
 80067ae:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80067b0:	2c01      	cmp	r4, #1
 80067b2:	f000 80d2 	beq.w	800695a <RadioSetRxConfig+0x1ea>
 80067b6:	2c05      	cmp	r4, #5
 80067b8:	d008      	beq.n	80067cc <RadioSetRxConfig+0x5c>
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d07c      	beq.n	80068b8 <RadioSetRxConfig+0x148>
}
 80067be:	b007      	add	sp, #28
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80067c4:	4ba4      	ldr	r3, [pc, #656]	; (8006a58 <RadioSetRxConfig+0x2e8>)
 80067c6:	22ff      	movs	r2, #255	; 0xff
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e7f1      	b.n	80067b0 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80067cc:	2001      	movs	r0, #1
 80067ce:	f000 fbbf 	bl	8006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80067d2:	4ca0      	ldr	r4, [pc, #640]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 80067d4:	2700      	movs	r7, #0
 80067d6:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80067da:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80067dc:	2309      	movs	r3, #9
 80067de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80067e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80067e6:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80067e8:	4630      	mov	r0, r6
 80067ea:	f000 ffe7 	bl	80077bc <SUBGRF_GetFskBandwidthRegValue>
 80067ee:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80067f2:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80067f4:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80067f8:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80067fc:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80067fe:	2310      	movs	r3, #16
 8006800:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006802:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006804:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006806:	4b94      	ldr	r3, [pc, #592]	; (8006a58 <RadioSetRxConfig+0x2e8>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800680c:	2301      	movs	r3, #1
 800680e:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006810:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8006812:	2005      	movs	r0, #5
 8006814:	f7ff fbb0 	bl	8005f78 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006818:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800681c:	f000 fda4 	bl	8007368 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006820:	f104 000e 	add.w	r0, r4, #14
 8006824:	f000 fe28 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006828:	ab02      	add	r3, sp, #8
 800682a:	4a8c      	ldr	r2, [pc, #560]	; (8006a5c <RadioSetRxConfig+0x2ec>)
 800682c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006830:	e883 0003 	stmia.w	r3, {r0, r1}
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fa09 	bl	8006c4c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800683a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800683e:	f000 f9dc 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006842:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006846:	f7fe ffe9 	bl	800581c <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800684a:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 800684e:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006852:	f7fe ffe7 	bl	8005824 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006856:	2104      	movs	r1, #4
 8006858:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800685c:	f7fe ffe2 	bl	8005824 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006860:	f640 009b 	movw	r0, #2203	; 0x89b
 8006864:	f7fe ffda 	bl	800581c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006868:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800686c:	f041 0108 	orr.w	r1, r1, #8
 8006870:	f640 009b 	movw	r0, #2203	; 0x89b
 8006874:	f7fe ffd6 	bl	8005824 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8006878:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800687c:	f7fe ffce 	bl	800581c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006880:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006884:	f041 0118 	orr.w	r1, r1, #24
 8006888:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800688c:	f7fe ffca 	bl	8005824 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8006890:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006894:	f7fe ffc2 	bl	800581c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006898:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800689c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80068a0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80068a4:	f7fe ffbe 	bl	8005824 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80068a8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80068ac:	fb03 fa0a 	mul.w	sl, r3, sl
 80068b0:	fbba f5f5 	udiv	r5, sl, r5
 80068b4:	60a5      	str	r5, [r4, #8]
            break;
 80068b6:	e782      	b.n	80067be <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80068b8:	2000      	movs	r0, #0
 80068ba:	f000 fb49 	bl	8006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80068be:	4c65      	ldr	r4, [pc, #404]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 80068c0:	f04f 0800 	mov.w	r8, #0
 80068c4:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80068c8:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80068ca:	230b      	movs	r3, #11
 80068cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 ff73 	bl	80077bc <SUBGRF_GetFskBandwidthRegValue>
 80068d6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80068da:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80068de:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80068e2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80068e6:	2304      	movs	r3, #4
 80068e8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80068ea:	2318      	movs	r3, #24
 80068ec:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80068ee:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80068f2:	f087 0701 	eor.w	r7, r7, #1
 80068f6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80068f8:	4b57      	ldr	r3, [pc, #348]	; (8006a58 <RadioSetRxConfig+0x2e8>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80068fe:	f1bb 0f00 	cmp.w	fp, #0
 8006902:	d026      	beq.n	8006952 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006904:	22f2      	movs	r2, #242	; 0xf2
 8006906:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006908:	4c52      	ldr	r4, [pc, #328]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 800690a:	2301      	movs	r3, #1
 800690c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800690e:	f7ff f805 	bl	800591c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006912:	2000      	movs	r0, #0
 8006914:	f7ff fb30 	bl	8005f78 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006918:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800691c:	f000 fd24 	bl	8007368 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006920:	f104 000e 	add.w	r0, r4, #14
 8006924:	f000 fda8 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006928:	4a4d      	ldr	r2, [pc, #308]	; (8006a60 <RadioSetRxConfig+0x2f0>)
 800692a:	ab04      	add	r3, sp, #16
 800692c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006930:	e883 0003 	stmia.w	r3, {r0, r1}
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f989 	bl	8006c4c <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800693a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800693e:	f000 f95c 	bl	8006bfa <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006942:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006946:	fb03 fa0a 	mul.w	sl, r3, sl
 800694a:	fbba f5f5 	udiv	r5, sl, r5
 800694e:	60a5      	str	r5, [r4, #8]
            break;
 8006950:	e735      	b.n	80067be <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006952:	4b40      	ldr	r3, [pc, #256]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006954:	2201      	movs	r2, #1
 8006956:	75da      	strb	r2, [r3, #23]
 8006958:	e7d6      	b.n	8006908 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800695a:	2000      	movs	r0, #0
 800695c:	f000 faf8 	bl	8006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006960:	4a3c      	ldr	r2, [pc, #240]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006962:	2301      	movs	r3, #1
 8006964:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006968:	b2eb      	uxtb	r3, r5
 800696a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800696e:	493d      	ldr	r1, [pc, #244]	; (8006a64 <RadioSetRxConfig+0x2f4>)
 8006970:	5d89      	ldrb	r1, [r1, r6]
 8006972:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006976:	9901      	ldr	r1, [sp, #4]
 8006978:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800697c:	b91e      	cbnz	r6, 8006986 <RadioSetRxConfig+0x216>
 800697e:	f1a5 020b 	sub.w	r2, r5, #11
 8006982:	2a01      	cmp	r2, #1
 8006984:	d94b      	bls.n	8006a1e <RadioSetRxConfig+0x2ae>
 8006986:	2e01      	cmp	r6, #1
 8006988:	d047      	beq.n	8006a1a <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800698a:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 800698c:	2100      	movs	r1, #0
 800698e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006992:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006994:	2101      	movs	r1, #1
 8006996:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006998:	3b05      	subs	r3, #5
 800699a:	b2db      	uxtb	r3, r3
 800699c:	428b      	cmp	r3, r1
 800699e:	d943      	bls.n	8006a28 <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80069a0:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 80069a2:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80069a6:	4c2b      	ldr	r4, [pc, #172]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 80069a8:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80069aa:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <RadioSetRxConfig+0x2e8>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80069b0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80069b4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80069b8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80069bc:	f7fe ffae 	bl	800591c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80069c0:	2001      	movs	r0, #1
 80069c2:	f7ff fad9 	bl	8005f78 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80069c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80069ca:	f000 fccd 	bl	8007368 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069ce:	f104 000e 	add.w	r0, r4, #14
 80069d2:	f000 fd51 	bl	8007478 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80069d6:	fa5f f08a 	uxtb.w	r0, sl
 80069da:	f000 fac6 	bl	8006f6a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80069de:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80069e2:	f000 f8e7 	bl	8006bb4 <SUBGRF_ReadRegister>
 80069e6:	f000 0101 	and.w	r1, r0, #1
 80069ea:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80069ee:	f000 f8d1 	bl	8006b94 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80069f2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d021      	beq.n	8006a3e <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80069fa:	f240 7036 	movw	r0, #1846	; 0x736
 80069fe:	f000 f8d9 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006a02:	f040 0104 	orr.w	r1, r0, #4
 8006a06:	b2c9      	uxtb	r1, r1
 8006a08:	f240 7036 	movw	r0, #1846	; 0x736
 8006a0c:	f000 f8c2 	bl	8006b94 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	e6d1      	b.n	80067be <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006a1a:	2d0c      	cmp	r5, #12
 8006a1c:	d1b5      	bne.n	800698a <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006a1e:	4a0d      	ldr	r2, [pc, #52]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006a20:	2101      	movs	r1, #1
 8006a22:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8006a26:	e7b4      	b.n	8006992 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 8006a28:	f1b9 0f0b 	cmp.w	r9, #11
 8006a2c:	d803      	bhi.n	8006a36 <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006a2e:	4613      	mov	r3, r2
 8006a30:	220c      	movs	r2, #12
 8006a32:	839a      	strh	r2, [r3, #28]
 8006a34:	e7b7      	b.n	80069a6 <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <RadioSetRxConfig+0x2e4>)
 8006a38:	f8a3 901c 	strh.w	r9, [r3, #28]
 8006a3c:	e7b3      	b.n	80069a6 <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006a3e:	f240 7036 	movw	r0, #1846	; 0x736
 8006a42:	f000 f8b7 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006a46:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006a4a:	f240 7036 	movw	r0, #1846	; 0x736
 8006a4e:	f000 f8a1 	bl	8006b94 <SUBGRF_WriteRegister>
 8006a52:	e7dd      	b.n	8006a10 <RadioSetRxConfig+0x2a0>
 8006a54:	20000508 	.word	0x20000508
 8006a58:	2000000c 	.word	0x2000000c
 8006a5c:	0800852c 	.word	0x0800852c
 8006a60:	08008524 	.word	0x08008524
 8006a64:	08008ba8 	.word	0x08008ba8

08006a68 <RadioIsChannelFree>:
{
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b08b      	sub	sp, #44	; 0x2c
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	4616      	mov	r6, r2
 8006a72:	461d      	mov	r5, r3
    RadioStandby( );
 8006a74:	f7fe ff52 	bl	800591c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7ff fa7d 	bl	8005f78 <RadioSetModem>
    RadioSetChannel( freq );
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff f944 	bl	8005d0c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006a84:	2301      	movs	r3, #1
 8006a86:	9309      	str	r3, [sp, #36]	; 0x24
 8006a88:	2400      	movs	r4, #0
 8006a8a:	9408      	str	r4, [sp, #32]
 8006a8c:	9407      	str	r4, [sp, #28]
 8006a8e:	9406      	str	r4, [sp, #24]
 8006a90:	9405      	str	r4, [sp, #20]
 8006a92:	9404      	str	r4, [sp, #16]
 8006a94:	9403      	str	r4, [sp, #12]
 8006a96:	9402      	str	r4, [sp, #8]
 8006a98:	2303      	movs	r3, #3
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	9700      	str	r7, [sp, #0]
 8006a9e:	4623      	mov	r3, r4
 8006aa0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7ff fe62 	bl	8006770 <RadioSetRxConfig>
    RadioRx( 0 );
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7ff f945 	bl	8005d3c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006ab2:	f7ff f8f7 	bl	8005ca4 <RadioGetWakeupTime>
 8006ab6:	f7fa f913 	bl	8000ce0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8006aba:	f001 fa3d 	bl	8007f38 <UTIL_TIMER_GetCurrentTime>
 8006abe:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f001 fa43 	bl	8007f4c <UTIL_TIMER_GetElapsedTime>
 8006ac6:	42a8      	cmp	r0, r5
 8006ac8:	d206      	bcs.n	8006ad8 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8006aca:	2000      	movs	r0, #0
 8006acc:	f7ff f8f7 	bl	8005cbe <RadioRssi>
        if( rssi > rssiThresh )
 8006ad0:	42b0      	cmp	r0, r6
 8006ad2:	ddf5      	ble.n	8006ac0 <RadioIsChannelFree+0x58>
            status = false;
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	e000      	b.n	8006ada <RadioIsChannelFree+0x72>
    bool status = true;
 8006ad8:	2401      	movs	r4, #1
    RadioStandby( );
 8006ada:	f7fe ff1f 	bl	800591c <RadioStandby>
}
 8006ade:	4620      	mov	r0, r4
 8006ae0:	b00b      	add	sp, #44	; 0x2c
 8006ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ae4 <RadioInit>:
{
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	b082      	sub	sp, #8
    RadioEvents = events;
 8006ae8:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <RadioInit+0x7c>)
 8006aea:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8006aec:	4d1d      	ldr	r5, [pc, #116]	; (8006b64 <RadioInit+0x80>)
 8006aee:	2400      	movs	r4, #0
 8006af0:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8006af2:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8006af4:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006af6:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8006af8:	481b      	ldr	r0, [pc, #108]	; (8006b68 <RadioInit+0x84>)
 8006afa:	f000 fb27 	bl	800714c <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8006afe:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8006b00:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8006b02:	f000 fa53 	bl	8006fac <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006b06:	4621      	mov	r1, r4
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fd27 	bl	800755c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006b0e:	2204      	movs	r2, #4
 8006b10:	4621      	mov	r1, r4
 8006b12:	2001      	movs	r0, #1
 8006b14:	f000 fb9a 	bl	800724c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006b18:	4623      	mov	r3, r4
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b20:	4608      	mov	r0, r1
 8006b22:	f000 fada 	bl	80070da <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8006b26:	f7ff f941 	bl	8005dac <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006b2a:	4e10      	ldr	r6, [pc, #64]	; (8006b6c <RadioInit+0x88>)
 8006b2c:	9400      	str	r4, [sp, #0]
 8006b2e:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <RadioInit+0x8c>)
 8006b30:	4622      	mov	r2, r4
 8006b32:	f04f 31ff 	mov.w	r1, #4294967295
 8006b36:	4630      	mov	r0, r6
 8006b38:	f001 f9e0 	bl	8007efc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006b3c:	4d0d      	ldr	r5, [pc, #52]	; (8006b74 <RadioInit+0x90>)
 8006b3e:	9400      	str	r4, [sp, #0]
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <RadioInit+0x94>)
 8006b42:	4622      	mov	r2, r4
 8006b44:	f04f 31ff 	mov.w	r1, #4294967295
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f001 f9d7 	bl	8007efc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f001 fa32 	bl	8007fb8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006b54:	4628      	mov	r0, r5
 8006b56:	f001 fa2f 	bl	8007fb8 <UTIL_TIMER_Stop>
}
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	bf00      	nop
 8006b60:	200004ec 	.word	0x200004ec
 8006b64:	20000508 	.word	0x20000508
 8006b68:	08005c91 	.word	0x08005c91
 8006b6c:	20000564 	.word	0x20000564
 8006b70:	080056fd 	.word	0x080056fd
 8006b74:	200004f0 	.word	0x200004f0
 8006b78:	08005725 	.word	0x08005725

08006b7c <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <SUBGRF_GetOperatingMode+0x8>)
 8006b7e:	7818      	ldrb	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000582 	.word	0x20000582

08006b88 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <SUBGRF_GetPacketType+0x8>)
 8006b8a:	7818      	ldrb	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000583 	.word	0x20000583

08006b94 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8006b94:	b500      	push	{lr}
 8006b96:	b083      	sub	sp, #12
 8006b98:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f10d 0207 	add.w	r2, sp, #7
 8006ba2:	4601      	mov	r1, r0
 8006ba4:	4802      	ldr	r0, [pc, #8]	; (8006bb0 <SUBGRF_WriteRegister+0x1c>)
 8006ba6:	f7fd f8bd 	bl	8003d24 <HAL_SUBGHZ_WriteRegisters>
}
 8006baa:	b003      	add	sp, #12
 8006bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bb0:	2000006c 	.word	0x2000006c

08006bb4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8006bb4:	b500      	push	{lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f10d 0207 	add.w	r2, sp, #7
 8006bc0:	4803      	ldr	r0, [pc, #12]	; (8006bd0 <SUBGRF_ReadRegister+0x1c>)
 8006bc2:	f7fd f8ff 	bl	8003dc4 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8006bc6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006bca:	b003      	add	sp, #12
 8006bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bd0:	2000006c 	.word	0x2000006c

08006bd4 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8006bd8:	f7fa ffce 	bl	8001b78 <RBI_IsDCDC>
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d000      	beq.n	8006be2 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8006be0:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006be2:	f640 1023 	movw	r0, #2339	; 0x923
 8006be6:	f7ff ffe5 	bl	8006bb4 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8006bea:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006bee:	4321      	orrs	r1, r4
 8006bf0:	f640 1023 	movw	r0, #2339	; 0x923
 8006bf4:	f7ff ffce 	bl	8006b94 <SUBGRF_WriteRegister>
}
 8006bf8:	e7f2      	b.n	8006be0 <Radio_SMPS_Set+0xc>

08006bfa <SUBGRF_SetWhiteningSeed>:
{
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8006bfe:	f7ff ffc3 	bl	8006b88 <SUBGRF_GetPacketType>
 8006c02:	b100      	cbz	r0, 8006c06 <SUBGRF_SetWhiteningSeed+0xc>
}
 8006c04:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8006c06:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006c0a:	f7ff ffd3 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006c0e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8006c12:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8006c16:	4301      	orrs	r1, r0
 8006c18:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006c1c:	f7ff ffba 	bl	8006b94 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8006c20:	b2e1      	uxtb	r1, r4
 8006c22:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8006c26:	f7ff ffb5 	bl	8006b94 <SUBGRF_WriteRegister>
}
 8006c2a:	e7eb      	b.n	8006c04 <SUBGRF_SetWhiteningSeed+0xa>

08006c2c <SUBGRF_WriteRegisters>:
{
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c30:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006c34:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006c36:	460a      	mov	r2, r1
 8006c38:	4601      	mov	r1, r0
 8006c3a:	4803      	ldr	r0, [pc, #12]	; (8006c48 <SUBGRF_WriteRegisters+0x1c>)
 8006c3c:	f7fd f872 	bl	8003d24 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	f384 8810 	msr	PRIMASK, r4
}
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	2000006c 	.word	0x2000006c

08006c4c <SUBGRF_SetSyncWord>:
{
 8006c4c:	b508      	push	{r3, lr}
 8006c4e:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8006c50:	2208      	movs	r2, #8
 8006c52:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8006c56:	f7ff ffe9 	bl	8006c2c <SUBGRF_WriteRegisters>
}
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	bd08      	pop	{r3, pc}

08006c5e <SUBGRF_SetCrcSeed>:
{
 8006c5e:	b500      	push	{lr}
 8006c60:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8006c62:	0a03      	lsrs	r3, r0, #8
 8006c64:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8006c68:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8006c6c:	f7ff ff8c 	bl	8006b88 <SUBGRF_GetPacketType>
 8006c70:	b110      	cbz	r0, 8006c78 <SUBGRF_SetCrcSeed+0x1a>
}
 8006c72:	b003      	add	sp, #12
 8006c74:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8006c78:	2202      	movs	r2, #2
 8006c7a:	a901      	add	r1, sp, #4
 8006c7c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8006c80:	f7ff ffd4 	bl	8006c2c <SUBGRF_WriteRegisters>
}
 8006c84:	e7f5      	b.n	8006c72 <SUBGRF_SetCrcSeed+0x14>

08006c86 <SUBGRF_SetCrcPolynomial>:
{
 8006c86:	b500      	push	{lr}
 8006c88:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8006c8a:	0a03      	lsrs	r3, r0, #8
 8006c8c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8006c90:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8006c94:	f7ff ff78 	bl	8006b88 <SUBGRF_GetPacketType>
 8006c98:	b110      	cbz	r0, 8006ca0 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8006c9a:	b003      	add	sp, #12
 8006c9c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	a901      	add	r1, sp, #4
 8006ca4:	f240 60be 	movw	r0, #1726	; 0x6be
 8006ca8:	f7ff ffc0 	bl	8006c2c <SUBGRF_WriteRegisters>
}
 8006cac:	e7f5      	b.n	8006c9a <SUBGRF_SetCrcPolynomial+0x14>
	...

08006cb0 <SUBGRF_ReadRegisters>:
{
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006cb8:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8006cba:	460a      	mov	r2, r1
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	4803      	ldr	r0, [pc, #12]	; (8006ccc <SUBGRF_ReadRegisters+0x1c>)
 8006cc0:	f7fd f880 	bl	8003dc4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	f384 8810 	msr	PRIMASK, r4
}
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	bf00      	nop
 8006ccc:	2000006c 	.word	0x2000006c

08006cd0 <SUBGRF_WriteBuffer>:
{
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006cd8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006cda:	460a      	mov	r2, r1
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4803      	ldr	r0, [pc, #12]	; (8006cec <SUBGRF_WriteBuffer+0x1c>)
 8006ce0:	f7fd f9ce 	bl	8004080 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce4:	f384 8810 	msr	PRIMASK, r4
}
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	bf00      	nop
 8006cec:	2000006c 	.word	0x2000006c

08006cf0 <SUBGRF_SetPayload>:
{
 8006cf0:	b508      	push	{r3, lr}
 8006cf2:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8006cf4:	4601      	mov	r1, r0
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7ff ffea 	bl	8006cd0 <SUBGRF_WriteBuffer>
}
 8006cfc:	bd08      	pop	{r3, pc}
	...

08006d00 <SUBGRF_ReadBuffer>:
{
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d04:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006d08:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4803      	ldr	r0, [pc, #12]	; (8006d1c <SUBGRF_ReadBuffer+0x1c>)
 8006d10:	f7fd fa00 	bl	8004114 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	f384 8810 	msr	PRIMASK, r4
}
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2000006c 	.word	0x2000006c

08006d20 <SUBGRF_WriteCommand>:
{
 8006d20:	b510      	push	{r4, lr}
 8006d22:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d24:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006d28:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	4601      	mov	r1, r0
 8006d2e:	4803      	ldr	r0, [pc, #12]	; (8006d3c <SUBGRF_WriteCommand+0x1c>)
 8006d30:	f7fd f89c 	bl	8003e6c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d34:	f384 8810 	msr	PRIMASK, r4
}
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000006c 	.word	0x2000006c

08006d40 <SUBGRF_SetSleep>:
{
 8006d40:	b510      	push	{r4, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8006d46:	2000      	movs	r0, #0
 8006d48:	f7fa ff0a 	bl	8001b60 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006d4c:	2002      	movs	r0, #2
 8006d4e:	f7ff ff41 	bl	8006bd4 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006d52:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006d56:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006d5a:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8006d5c:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8006d60:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8006d62:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8006d66:	2201      	movs	r2, #1
 8006d68:	f10d 0107 	add.w	r1, sp, #7
 8006d6c:	2084      	movs	r0, #132	; 0x84
 8006d6e:	f7ff ffd7 	bl	8006d20 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8006d72:	4b02      	ldr	r3, [pc, #8]	; (8006d7c <SUBGRF_SetSleep+0x3c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
}
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd10      	pop	{r4, pc}
 8006d7c:	20000582 	.word	0x20000582

08006d80 <SUBGRF_SetStandby>:
{
 8006d80:	b500      	push	{lr}
 8006d82:	b083      	sub	sp, #12
 8006d84:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f10d 0107 	add.w	r1, sp, #7
 8006d8e:	2080      	movs	r0, #128	; 0x80
 8006d90:	f7ff ffc6 	bl	8006d20 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8006d94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d98:	b92b      	cbnz	r3, 8006da6 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <SUBGRF_SetStandby+0x30>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
}
 8006da0:	b003      	add	sp, #12
 8006da2:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8006da6:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <SUBGRF_SetStandby+0x30>)
 8006da8:	2202      	movs	r2, #2
 8006daa:	701a      	strb	r2, [r3, #0]
}
 8006dac:	e7f8      	b.n	8006da0 <SUBGRF_SetStandby+0x20>
 8006dae:	bf00      	nop
 8006db0:	20000582 	.word	0x20000582

08006db4 <SUBGRF_SetTx>:
{
 8006db4:	b500      	push	{lr}
 8006db6:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8006db8:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <SUBGRF_SetTx+0x30>)
 8006dba:	2204      	movs	r2, #4
 8006dbc:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006dbe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006dc2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006dc6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006dca:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006dce:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	a901      	add	r1, sp, #4
 8006dd6:	2083      	movs	r0, #131	; 0x83
 8006dd8:	f7ff ffa2 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006ddc:	b003      	add	sp, #12
 8006dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8006de2:	bf00      	nop
 8006de4:	20000582 	.word	0x20000582

08006de8 <SUBGRF_SendPayload>:
{
 8006de8:	b510      	push	{r4, lr}
 8006dea:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8006dec:	f7ff ff80 	bl	8006cf0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8006df0:	4620      	mov	r0, r4
 8006df2:	f7ff ffdf 	bl	8006db4 <SUBGRF_SetTx>
}
 8006df6:	bd10      	pop	{r4, pc}

08006df8 <SUBGRF_SetRx>:
{
 8006df8:	b500      	push	{lr}
 8006dfa:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <SUBGRF_SetRx+0x30>)
 8006dfe:	2205      	movs	r2, #5
 8006e00:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006e02:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006e06:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006e0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006e0e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006e12:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006e16:	2203      	movs	r2, #3
 8006e18:	a901      	add	r1, sp, #4
 8006e1a:	2082      	movs	r0, #130	; 0x82
 8006e1c:	f7ff ff80 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006e20:	b003      	add	sp, #12
 8006e22:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e26:	bf00      	nop
 8006e28:	20000582 	.word	0x20000582

08006e2c <SUBGRF_GetRandom>:
{
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8006e30:	2600      	movs	r6, #0
 8006e32:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8006e34:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006e38:	f7ff febc 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006e3c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8006e3e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8006e42:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006e46:	f7ff fea5 	bl	8006b94 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8006e4a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e4e:	f7ff feb1 	bl	8006bb4 <SUBGRF_ReadRegister>
 8006e52:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8006e54:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006e58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e5c:	f7ff fe9a 	bl	8006b94 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006e60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e64:	f7ff ffc8 	bl	8006df8 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8006e68:	2204      	movs	r2, #4
 8006e6a:	eb0d 0102 	add.w	r1, sp, r2
 8006e6e:	f640 0019 	movw	r0, #2073	; 0x819
 8006e72:	f7ff ff1d 	bl	8006cb0 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ff82 	bl	8006d80 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8006e82:	f7ff fe87 	bl	8006b94 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8006e86:	4621      	mov	r1, r4
 8006e88:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8006e8c:	f7ff fe82 	bl	8006b94 <SUBGRF_WriteRegister>
}
 8006e90:	9801      	ldr	r0, [sp, #4]
 8006e92:	b002      	add	sp, #8
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e98 <SUBGRF_SetRxBoosted>:
{
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <SUBGRF_SetRxBoosted+0x38>)
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8006ea4:	2197      	movs	r1, #151	; 0x97
 8006ea6:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8006eaa:	f7ff fe73 	bl	8006b94 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8006eae:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8006eb2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8006eb6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006eba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8006ebe:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	a901      	add	r1, sp, #4
 8006ec6:	2082      	movs	r0, #130	; 0x82
 8006ec8:	f7ff ff2a 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	20000582 	.word	0x20000582

08006ed4 <SUBGRF_SetRxDutyCycle>:
{
 8006ed4:	b500      	push	{lr}
 8006ed6:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8006ed8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8006edc:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8006ee0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006ee4:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8006ee8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8006eec:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8006ef0:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8006ef4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006ef8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8006efc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8006f00:	2206      	movs	r2, #6
 8006f02:	4669      	mov	r1, sp
 8006f04:	2094      	movs	r0, #148	; 0x94
 8006f06:	f7ff ff0b 	bl	8006d20 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <SUBGRF_SetRxDutyCycle+0x44>)
 8006f0c:	2206      	movs	r2, #6
 8006f0e:	701a      	strb	r2, [r3, #0]
}
 8006f10:	b003      	add	sp, #12
 8006f12:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f16:	bf00      	nop
 8006f18:	20000582 	.word	0x20000582

08006f1c <SUBGRF_SetCad>:
{
 8006f1c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8006f1e:	2200      	movs	r2, #0
 8006f20:	4611      	mov	r1, r2
 8006f22:	20c5      	movs	r0, #197	; 0xc5
 8006f24:	f7ff fefc 	bl	8006d20 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8006f28:	4b01      	ldr	r3, [pc, #4]	; (8006f30 <SUBGRF_SetCad+0x14>)
 8006f2a:	2207      	movs	r2, #7
 8006f2c:	701a      	strb	r2, [r3, #0]
}
 8006f2e:	bd08      	pop	{r3, pc}
 8006f30:	20000582 	.word	0x20000582

08006f34 <SUBGRF_SetTxContinuousWave>:
{
 8006f34:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8006f36:	2200      	movs	r2, #0
 8006f38:	4611      	mov	r1, r2
 8006f3a:	20d1      	movs	r0, #209	; 0xd1
 8006f3c:	f7ff fef0 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006f40:	bd08      	pop	{r3, pc}

08006f42 <SUBGRF_SetTxInfinitePreamble>:
{
 8006f42:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8006f44:	2200      	movs	r2, #0
 8006f46:	4611      	mov	r1, r2
 8006f48:	20d2      	movs	r0, #210	; 0xd2
 8006f4a:	f7ff fee9 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006f4e:	bd08      	pop	{r3, pc}

08006f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8006f50:	b500      	push	{lr}
 8006f52:	b083      	sub	sp, #12
 8006f54:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f10d 0107 	add.w	r1, sp, #7
 8006f5e:	209f      	movs	r0, #159	; 0x9f
 8006f60:	f7ff fede 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006f64:	b003      	add	sp, #12
 8006f66:	f85d fb04 	ldr.w	pc, [sp], #4

08006f6a <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8006f6a:	b500      	push	{lr}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8006f72:	2201      	movs	r2, #1
 8006f74:	f10d 0107 	add.w	r1, sp, #7
 8006f78:	20a0      	movs	r0, #160	; 0xa0
 8006f7a:	f7ff fed1 	bl	8006d20 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8006f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f82:	2b3f      	cmp	r3, #63	; 0x3f
 8006f84:	d90f      	bls.n	8006fa6 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8006f86:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8006f88:	2200      	movs	r2, #0
        while( mant > 31 )
 8006f8a:	e002      	b.n	8006f92 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8006f8c:	089b      	lsrs	r3, r3, #2
            exp++;
 8006f8e:	1c51      	adds	r1, r2, #1
 8006f90:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8006f92:	2b1f      	cmp	r3, #31
 8006f94:	d8fa      	bhi.n	8006f8c <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8006f96:	00d9      	lsls	r1, r3, #3
 8006f98:	b2c9      	uxtb	r1, r1
 8006f9a:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8006f9c:	b2c9      	uxtb	r1, r1
 8006f9e:	f240 7006 	movw	r0, #1798	; 0x706
 8006fa2:	f7ff fdf7 	bl	8006b94 <SUBGRF_WriteRegister>
}
 8006fa6:	b003      	add	sp, #12
 8006fa8:	f85d fb04 	ldr.w	pc, [sp], #4

08006fac <SUBGRF_SetRegulatorMode>:
{
 8006fac:	b500      	push	{lr}
 8006fae:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8006fb0:	f7fa fde2 	bl	8001b78 <RBI_IsDCDC>
 8006fb4:	2801      	cmp	r0, #1
 8006fb6:	d00b      	beq.n	8006fd0 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f10d 0107 	add.w	r1, sp, #7
 8006fc4:	2096      	movs	r0, #150	; 0x96
 8006fc6:	f7ff feab 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8006fca:	b003      	add	sp, #12
 8006fcc:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006fd6:	e7f2      	b.n	8006fbe <SUBGRF_SetRegulatorMode+0x12>

08006fd8 <SUBGRF_Calibrate>:
{
 8006fd8:	b500      	push	{lr}
 8006fda:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006fdc:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006fe0:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006fe4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006fe6:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006fea:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006fec:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006ff0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006ff2:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006ff6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006ff8:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006ffc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8006ffe:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007002:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007004:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007008:	2201      	movs	r2, #1
 800700a:	f10d 0107 	add.w	r1, sp, #7
 800700e:	2089      	movs	r0, #137	; 0x89
 8007010:	f7ff fe86 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007014:	b003      	add	sp, #12
 8007016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800701c <SUBGRF_CalibrateImage>:
{
 800701c:	b500      	push	{lr}
 800701e:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8007020:	4b1f      	ldr	r3, [pc, #124]	; (80070a0 <SUBGRF_CalibrateImage+0x84>)
 8007022:	4298      	cmp	r0, r3
 8007024:	d90d      	bls.n	8007042 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8007026:	23e1      	movs	r3, #225	; 0xe1
 8007028:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800702c:	23e9      	movs	r3, #233	; 0xe9
 800702e:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007032:	2202      	movs	r2, #2
 8007034:	a901      	add	r1, sp, #4
 8007036:	2098      	movs	r0, #152	; 0x98
 8007038:	f7ff fe72 	bl	8006d20 <SUBGRF_WriteCommand>
}
 800703c:	b003      	add	sp, #12
 800703e:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8007042:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <SUBGRF_CalibrateImage+0x88>)
 8007044:	4298      	cmp	r0, r3
 8007046:	d906      	bls.n	8007056 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8007048:	23d7      	movs	r3, #215	; 0xd7
 800704a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800704e:	23db      	movs	r3, #219	; 0xdb
 8007050:	f88d 3005 	strb.w	r3, [sp, #5]
 8007054:	e7ed      	b.n	8007032 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <SUBGRF_CalibrateImage+0x8c>)
 8007058:	4298      	cmp	r0, r3
 800705a:	d906      	bls.n	800706a <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800705c:	23c1      	movs	r3, #193	; 0xc1
 800705e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8007062:	23c5      	movs	r3, #197	; 0xc5
 8007064:	f88d 3005 	strb.w	r3, [sp, #5]
 8007068:	e7e3      	b.n	8007032 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800706a:	4b10      	ldr	r3, [pc, #64]	; (80070ac <SUBGRF_CalibrateImage+0x90>)
 800706c:	4298      	cmp	r0, r3
 800706e:	d906      	bls.n	800707e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8007070:	2375      	movs	r3, #117	; 0x75
 8007072:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8007076:	2381      	movs	r3, #129	; 0x81
 8007078:	f88d 3005 	strb.w	r3, [sp, #5]
 800707c:	e7d9      	b.n	8007032 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <SUBGRF_CalibrateImage+0x94>)
 8007080:	4298      	cmp	r0, r3
 8007082:	d906      	bls.n	8007092 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8007084:	236b      	movs	r3, #107	; 0x6b
 8007086:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800708a:	236f      	movs	r3, #111	; 0x6f
 800708c:	f88d 3005 	strb.w	r3, [sp, #5]
 8007090:	e7cf      	b.n	8007032 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8007092:	2329      	movs	r3, #41	; 0x29
 8007094:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8007098:	232b      	movs	r3, #43	; 0x2b
 800709a:	f88d 3005 	strb.w	r3, [sp, #5]
 800709e:	e7c8      	b.n	8007032 <SUBGRF_CalibrateImage+0x16>
 80070a0:	35a4e900 	.word	0x35a4e900
 80070a4:	32a9f880 	.word	0x32a9f880
 80070a8:	2de54480 	.word	0x2de54480
 80070ac:	1b6b0b00 	.word	0x1b6b0b00
 80070b0:	1954fc40 	.word	0x1954fc40

080070b4 <SUBGRF_SetPaConfig>:
{
 80070b4:	b500      	push	{lr}
 80070b6:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80070b8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80070bc:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80070c0:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80070c4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80070c8:	2204      	movs	r2, #4
 80070ca:	eb0d 0102 	add.w	r1, sp, r2
 80070ce:	2095      	movs	r0, #149	; 0x95
 80070d0:	f7ff fe26 	bl	8006d20 <SUBGRF_WriteCommand>
}
 80070d4:	b003      	add	sp, #12
 80070d6:	f85d fb04 	ldr.w	pc, [sp], #4

080070da <SUBGRF_SetDioIrqParams>:
{
 80070da:	b500      	push	{lr}
 80070dc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80070de:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80070e2:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80070e6:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80070ea:	0a08      	lsrs	r0, r1, #8
 80070ec:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80070f0:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80070f4:	0a11      	lsrs	r1, r2, #8
 80070f6:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80070fa:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80070fe:	0a1a      	lsrs	r2, r3, #8
 8007100:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007104:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8007108:	2208      	movs	r2, #8
 800710a:	4669      	mov	r1, sp
 800710c:	4610      	mov	r0, r2
 800710e:	f7ff fe07 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007112:	b003      	add	sp, #12
 8007114:	f85d fb04 	ldr.w	pc, [sp], #4

08007118 <SUBGRF_SetTcxoMode>:
{
 8007118:	b500      	push	{lr}
 800711a:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800711c:	f000 0007 	and.w	r0, r0, #7
 8007120:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007124:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007128:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800712c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007130:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007134:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8007138:	2204      	movs	r2, #4
 800713a:	eb0d 0102 	add.w	r1, sp, r2
 800713e:	2097      	movs	r0, #151	; 0x97
 8007140:	f7ff fdee 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007144:	b003      	add	sp, #12
 8007146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800714c <SUBGRF_Init>:
{
 800714c:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800714e:	b108      	cbz	r0, 8007154 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8007150:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <SUBGRF_Init+0x68>)
 8007152:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8007154:	f7f9 fd34 	bl	8000bc0 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007158:	2002      	movs	r0, #2
 800715a:	f7ff fd3b 	bl	8006bd4 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800715e:	2000      	movs	r0, #0
 8007160:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <SUBGRF_Init+0x6c>)
 8007162:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8007164:	f7ff fe0c 	bl	8006d80 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8007168:	f7fa fd02 	bl	8001b70 <RBI_IsTCXO>
 800716c:	2801      	cmp	r0, #1
 800716e:	d014      	beq.n	800719a <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007170:	2120      	movs	r1, #32
 8007172:	f640 1011 	movw	r0, #2321	; 0x911
 8007176:	f7ff fd0d 	bl	8006b94 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800717a:	2120      	movs	r1, #32
 800717c:	f640 1012 	movw	r0, #2322	; 0x912
 8007180:	f7ff fd08 	bl	8006b94 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007184:	210e      	movs	r1, #14
 8007186:	f640 101f 	movw	r0, #2335	; 0x91f
 800718a:	f7ff fd03 	bl	8006b94 <SUBGRF_WriteRegister>
    RBI_Init();
 800718e:	f7fa fce3 	bl	8001b58 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <SUBGRF_Init+0x70>)
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
}
 8007198:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800719a:	2140      	movs	r1, #64	; 0x40
 800719c:	f7ff ffbc 	bl	8007118 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80071a0:	2100      	movs	r1, #0
 80071a2:	f640 1011 	movw	r0, #2321	; 0x911
 80071a6:	f7ff fcf5 	bl	8006b94 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80071aa:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80071ae:	f7ff ff13 	bl	8006fd8 <SUBGRF_Calibrate>
 80071b2:	e7e7      	b.n	8007184 <SUBGRF_Init+0x38>
 80071b4:	20000584 	.word	0x20000584
 80071b8:	20000580 	.word	0x20000580
 80071bc:	20000582 	.word	0x20000582

080071c0 <SUBGRF_SetRfFrequency>:
{
 80071c0:	b510      	push	{r4, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80071c6:	4b12      	ldr	r3, [pc, #72]	; (8007210 <SUBGRF_SetRfFrequency+0x50>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b1d3      	cbz	r3, 8007202 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80071cc:	4a11      	ldr	r2, [pc, #68]	; (8007214 <SUBGRF_SetRfFrequency+0x54>)
 80071ce:	2300      	movs	r3, #0
 80071d0:	0660      	lsls	r0, r4, #25
 80071d2:	09e1      	lsrs	r1, r4, #7
 80071d4:	f7f9 f9c0 	bl	8000558 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80071d8:	0e03      	lsrs	r3, r0, #24
 80071da:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80071de:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80071e2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80071e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80071ea:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80071ee:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80071f2:	2204      	movs	r2, #4
 80071f4:	eb0d 0102 	add.w	r1, sp, r2
 80071f8:	2086      	movs	r0, #134	; 0x86
 80071fa:	f7ff fd91 	bl	8006d20 <SUBGRF_WriteCommand>
}
 80071fe:	b002      	add	sp, #8
 8007200:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8007202:	f7ff ff0b 	bl	800701c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007206:	4b02      	ldr	r3, [pc, #8]	; (8007210 <SUBGRF_SetRfFrequency+0x50>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e7de      	b.n	80071cc <SUBGRF_SetRfFrequency+0xc>
 800720e:	bf00      	nop
 8007210:	20000580 	.word	0x20000580
 8007214:	01e84800 	.word	0x01e84800

08007218 <SUBGRF_SetPacketType>:
{
 8007218:	b500      	push	{lr}
 800721a:	b083      	sub	sp, #12
 800721c:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8007220:	b2c3      	uxtb	r3, r0
 8007222:	4a09      	ldr	r2, [pc, #36]	; (8007248 <SUBGRF_SetPacketType+0x30>)
 8007224:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8007226:	b143      	cbz	r3, 800723a <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007228:	2201      	movs	r2, #1
 800722a:	f10d 0107 	add.w	r1, sp, #7
 800722e:	208a      	movs	r0, #138	; 0x8a
 8007230:	f7ff fd76 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007234:	b003      	add	sp, #12
 8007236:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800723a:	2100      	movs	r1, #0
 800723c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007240:	f7ff fca8 	bl	8006b94 <SUBGRF_WriteRegister>
 8007244:	e7f0      	b.n	8007228 <SUBGRF_SetPacketType+0x10>
 8007246:	bf00      	nop
 8007248:	20000583 	.word	0x20000583

0800724c <SUBGRF_SetTxParams>:
{
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	460c      	mov	r4, r1
 8007252:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8007254:	2801      	cmp	r0, #1
 8007256:	d035      	beq.n	80072c4 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8007258:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800725c:	f7ff fcaa 	bl	8006bb4 <SUBGRF_ReadRegister>
 8007260:	f040 011e 	orr.w	r1, r0, #30
 8007264:	b2c9      	uxtb	r1, r1
 8007266:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800726a:	f7ff fc93 	bl	8006b94 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800726e:	2001      	movs	r0, #1
 8007270:	f7fa fc86 	bl	8001b80 <RBI_GetRFOMaxPowerConfig>
 8007274:	4605      	mov	r5, r0
        if (power > max_power)
 8007276:	4284      	cmp	r4, r0
 8007278:	dd00      	ble.n	800727c <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800727a:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800727c:	2d14      	cmp	r5, #20
 800727e:	d054      	beq.n	800732a <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8007280:	2d11      	cmp	r5, #17
 8007282:	d05c      	beq.n	800733e <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8007284:	2d0e      	cmp	r5, #14
 8007286:	d064      	beq.n	8007352 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007288:	2301      	movs	r3, #1
 800728a:	2200      	movs	r2, #0
 800728c:	2107      	movs	r1, #7
 800728e:	2004      	movs	r0, #4
 8007290:	f7ff ff10 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	3416      	adds	r4, #22
 8007298:	b264      	sxtb	r4, r4
        if (power < -9)
 800729a:	f114 0f09 	cmn.w	r4, #9
 800729e:	da01      	bge.n	80072a4 <SUBGRF_SetTxParams+0x58>
            power = -9;
 80072a0:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80072a4:	2138      	movs	r1, #56	; 0x38
 80072a6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80072aa:	f7ff fc73 	bl	8006b94 <SUBGRF_WriteRegister>
    buf[0] = power;
 80072ae:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 80072b2:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80072b6:	2202      	movs	r2, #2
 80072b8:	a901      	add	r1, sp, #4
 80072ba:	208e      	movs	r0, #142	; 0x8e
 80072bc:	f7ff fd30 	bl	8006d20 <SUBGRF_WriteCommand>
}
 80072c0:	b002      	add	sp, #8
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7fa fc5b 	bl	8001b80 <RBI_GetRFOMaxPowerConfig>
 80072ca:	4605      	mov	r5, r0
        if (power >  max_power)
 80072cc:	4284      	cmp	r4, r0
 80072ce:	dd00      	ble.n	80072d2 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80072d0:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80072d2:	2d0e      	cmp	r5, #14
 80072d4:	d015      	beq.n	8007302 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80072d6:	2d0a      	cmp	r5, #10
 80072d8:	d01d      	beq.n	8007316 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80072da:	2301      	movs	r3, #1
 80072dc:	461a      	mov	r2, r3
 80072de:	2100      	movs	r1, #0
 80072e0:	2007      	movs	r0, #7
 80072e2:	f7ff fee7 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	340e      	adds	r4, #14
 80072ea:	b264      	sxtb	r4, r4
        if (power < -17)
 80072ec:	f114 0f11 	cmn.w	r4, #17
 80072f0:	da01      	bge.n	80072f6 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80072f2:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80072f6:	2118      	movs	r1, #24
 80072f8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80072fc:	f7ff fc4a 	bl	8006b94 <SUBGRF_WriteRegister>
 8007300:	e7d5      	b.n	80072ae <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8007302:	2301      	movs	r3, #1
 8007304:	461a      	mov	r2, r3
 8007306:	2100      	movs	r1, #0
 8007308:	2004      	movs	r0, #4
 800730a:	f7ff fed3 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	340e      	adds	r4, #14
 8007312:	b264      	sxtb	r4, r4
 8007314:	e7ea      	b.n	80072ec <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8007316:	2301      	movs	r3, #1
 8007318:	461a      	mov	r2, r3
 800731a:	2100      	movs	r1, #0
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fec9 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8007322:	1b64      	subs	r4, r4, r5
 8007324:	340d      	adds	r4, #13
 8007326:	b264      	sxtb	r4, r4
 8007328:	e7e0      	b.n	80072ec <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800732a:	2301      	movs	r3, #1
 800732c:	2200      	movs	r2, #0
 800732e:	2105      	movs	r1, #5
 8007330:	2003      	movs	r0, #3
 8007332:	f7ff febf 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007336:	1b64      	subs	r4, r4, r5
 8007338:	3416      	adds	r4, #22
 800733a:	b264      	sxtb	r4, r4
 800733c:	e7ad      	b.n	800729a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800733e:	2301      	movs	r3, #1
 8007340:	2200      	movs	r2, #0
 8007342:	2103      	movs	r1, #3
 8007344:	2002      	movs	r0, #2
 8007346:	f7ff feb5 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800734a:	1b64      	subs	r4, r4, r5
 800734c:	3416      	adds	r4, #22
 800734e:	b264      	sxtb	r4, r4
 8007350:	e7a3      	b.n	800729a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8007352:	2301      	movs	r3, #1
 8007354:	2200      	movs	r2, #0
 8007356:	2102      	movs	r1, #2
 8007358:	4608      	mov	r0, r1
 800735a:	f7ff feab 	bl	80070b4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800735e:	1b64      	subs	r4, r4, r5
 8007360:	340e      	adds	r4, #14
 8007362:	b264      	sxtb	r4, r4
 8007364:	e799      	b.n	800729a <SUBGRF_SetTxParams+0x4e>
	...

08007368 <SUBGRF_SetModulationParams>:
{
 8007368:	b510      	push	{r4, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800736e:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <SUBGRF_SetModulationParams+0x100>)
 8007370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007374:	ab02      	add	r3, sp, #8
 8007376:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800737a:	7820      	ldrb	r0, [r4, #0]
 800737c:	4b3b      	ldr	r3, [pc, #236]	; (800746c <SUBGRF_SetModulationParams+0x104>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	4298      	cmp	r0, r3
 8007382:	d106      	bne.n	8007392 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8007384:	7823      	ldrb	r3, [r4, #0]
 8007386:	2b03      	cmp	r3, #3
 8007388:	d82c      	bhi.n	80073e4 <SUBGRF_SetModulationParams+0x7c>
 800738a:	e8df f003 	tbb	[pc, r3]
 800738e:	4205      	.short	0x4205
 8007390:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007392:	f7ff ff41 	bl	8007218 <SUBGRF_SetPacketType>
 8007396:	e7f5      	b.n	8007384 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007398:	6862      	ldr	r2, [r4, #4]
 800739a:	4b35      	ldr	r3, [pc, #212]	; (8007470 <SUBGRF_SetModulationParams+0x108>)
 800739c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80073a0:	0c1a      	lsrs	r2, r3, #16
 80073a2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80073a6:	0a1a      	lsrs	r2, r3, #8
 80073a8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80073ac:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80073b0:	7b23      	ldrb	r3, [r4, #12]
 80073b2:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80073b6:	7b63      	ldrb	r3, [r4, #13]
 80073b8:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80073bc:	68a1      	ldr	r1, [r4, #8]
 80073be:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <SUBGRF_SetModulationParams+0x10c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	0648      	lsls	r0, r1, #25
 80073c4:	09c9      	lsrs	r1, r1, #7
 80073c6:	f7f9 f8c7 	bl	8000558 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80073ca:	0c03      	lsrs	r3, r0, #16
 80073cc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80073d0:	0a03      	lsrs	r3, r0, #8
 80073d2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80073d6:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80073da:	2208      	movs	r2, #8
 80073dc:	4669      	mov	r1, sp
 80073de:	208b      	movs	r0, #139	; 0x8b
 80073e0:	f7ff fc9e 	bl	8006d20 <SUBGRF_WriteCommand>
}
 80073e4:	b002      	add	sp, #8
 80073e6:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	4b21      	ldr	r3, [pc, #132]	; (8007470 <SUBGRF_SetModulationParams+0x108>)
 80073ec:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80073f0:	0c1a      	lsrs	r2, r3, #16
 80073f2:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80073f6:	0a1a      	lsrs	r2, r3, #8
 80073f8:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80073fc:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007400:	7d23      	ldrb	r3, [r4, #20]
 8007402:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007406:	2204      	movs	r2, #4
 8007408:	4669      	mov	r1, sp
 800740a:	208b      	movs	r0, #139	; 0x8b
 800740c:	f7ff fc88 	bl	8006d20 <SUBGRF_WriteCommand>
        break;
 8007410:	e7e8      	b.n	80073e4 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007412:	7e23      	ldrb	r3, [r4, #24]
 8007414:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007418:	7e63      	ldrb	r3, [r4, #25]
 800741a:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800741e:	7ea3      	ldrb	r3, [r4, #26]
 8007420:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007424:	7ee3      	ldrb	r3, [r4, #27]
 8007426:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800742a:	2204      	movs	r2, #4
 800742c:	4669      	mov	r1, sp
 800742e:	208b      	movs	r0, #139	; 0x8b
 8007430:	f7ff fc76 	bl	8006d20 <SUBGRF_WriteCommand>
        break;
 8007434:	e7d6      	b.n	80073e4 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007436:	6862      	ldr	r2, [r4, #4]
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <SUBGRF_SetModulationParams+0x108>)
 800743a:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800743e:	0c1a      	lsrs	r2, r3, #16
 8007440:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007444:	0a1a      	lsrs	r2, r3, #8
 8007446:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800744a:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800744e:	7b23      	ldrb	r3, [r4, #12]
 8007450:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007454:	7b63      	ldrb	r3, [r4, #13]
 8007456:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800745a:	2205      	movs	r2, #5
 800745c:	4669      	mov	r1, sp
 800745e:	208b      	movs	r0, #139	; 0x8b
 8007460:	f7ff fc5e 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007464:	e7be      	b.n	80073e4 <SUBGRF_SetModulationParams+0x7c>
 8007466:	bf00      	nop
 8007468:	08008534 	.word	0x08008534
 800746c:	20000583 	.word	0x20000583
 8007470:	3d090000 	.word	0x3d090000
 8007474:	01e84800 	.word	0x01e84800

08007478 <SUBGRF_SetPacketParams>:
{
 8007478:	b510      	push	{r4, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800747e:	ab01      	add	r3, sp, #4
 8007480:	4a33      	ldr	r2, [pc, #204]	; (8007550 <SUBGRF_SetPacketParams+0xd8>)
 8007482:	ca07      	ldmia	r2, {r0, r1, r2}
 8007484:	c303      	stmia	r3!, {r0, r1}
 8007486:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8007488:	7820      	ldrb	r0, [r4, #0]
 800748a:	4b32      	ldr	r3, [pc, #200]	; (8007554 <SUBGRF_SetPacketParams+0xdc>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4298      	cmp	r0, r3
 8007490:	d106      	bne.n	80074a0 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8007492:	7823      	ldrb	r3, [r4, #0]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d82a      	bhi.n	80074ee <SUBGRF_SetPacketParams+0x76>
 8007498:	e8df f003 	tbb	[pc, r3]
 800749c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80074a0:	f7ff feba 	bl	8007218 <SUBGRF_SetPacketType>
 80074a4:	e7f5      	b.n	8007492 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80074a6:	7a63      	ldrb	r3, [r4, #9]
 80074a8:	2bf1      	cmp	r3, #241	; 0xf1
 80074aa:	d022      	beq.n	80074f2 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80074ac:	2bf2      	cmp	r3, #242	; 0xf2
 80074ae:	d02a      	beq.n	8007506 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80074b0:	8862      	ldrh	r2, [r4, #2]
 80074b2:	0a11      	lsrs	r1, r2, #8
 80074b4:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80074b8:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80074bc:	7922      	ldrb	r2, [r4, #4]
 80074be:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80074c2:	7962      	ldrb	r2, [r4, #5]
 80074c4:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80074c8:	79a2      	ldrb	r2, [r4, #6]
 80074ca:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80074ce:	79e2      	ldrb	r2, [r4, #7]
 80074d0:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80074d4:	7a22      	ldrb	r2, [r4, #8]
 80074d6:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80074da:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80074de:	7aa3      	ldrb	r3, [r4, #10]
 80074e0:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80074e4:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80074e6:	a901      	add	r1, sp, #4
 80074e8:	208c      	movs	r0, #140	; 0x8c
 80074ea:	f7ff fc19 	bl	8006d20 <SUBGRF_WriteCommand>
}
 80074ee:	b004      	add	sp, #16
 80074f0:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80074f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80074f6:	f7ff fbb2 	bl	8006c5e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80074fa:	f248 0005 	movw	r0, #32773	; 0x8005
 80074fe:	f7ff fbc2 	bl	8006c86 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007502:	2302      	movs	r3, #2
 8007504:	e7d4      	b.n	80074b0 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007506:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800750a:	f7ff fba8 	bl	8006c5e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800750e:	f241 0021 	movw	r0, #4129	; 0x1021
 8007512:	f7ff fbb8 	bl	8006c86 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007516:	2306      	movs	r3, #6
 8007518:	e7ca      	b.n	80074b0 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800751a:	7b23      	ldrb	r3, [r4, #12]
 800751c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8007520:	2201      	movs	r2, #1
        break;
 8007522:	e7e0      	b.n	80074e6 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007524:	89e3      	ldrh	r3, [r4, #14]
 8007526:	0a1a      	lsrs	r2, r3, #8
 8007528:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800752c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007530:	7c23      	ldrb	r3, [r4, #16]
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <SUBGRF_SetPacketParams+0xe0>)
 8007534:	7013      	strb	r3, [r2, #0]
 8007536:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800753a:	7c63      	ldrb	r3, [r4, #17]
 800753c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007540:	7ca3      	ldrb	r3, [r4, #18]
 8007542:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007546:	7ce3      	ldrb	r3, [r4, #19]
 8007548:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800754c:	2206      	movs	r2, #6
        break;
 800754e:	e7ca      	b.n	80074e6 <SUBGRF_SetPacketParams+0x6e>
 8007550:	0800853c 	.word	0x0800853c
 8007554:	20000583 	.word	0x20000583
 8007558:	20000581 	.word	0x20000581

0800755c <SUBGRF_SetBufferBaseAddress>:
{
 800755c:	b500      	push	{lr}
 800755e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8007560:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8007564:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007568:	2202      	movs	r2, #2
 800756a:	a901      	add	r1, sp, #4
 800756c:	208f      	movs	r0, #143	; 0x8f
 800756e:	f7ff fbd7 	bl	8006d20 <SUBGRF_WriteCommand>
}
 8007572:	b003      	add	sp, #12
 8007574:	f85d fb04 	ldr.w	pc, [sp], #4

08007578 <SUBGRF_ReadCommand>:
{
 8007578:	b510      	push	{r4, lr}
 800757a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800757c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007580:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007582:	460a      	mov	r2, r1
 8007584:	4601      	mov	r1, r0
 8007586:	4803      	ldr	r0, [pc, #12]	; (8007594 <SUBGRF_ReadCommand+0x1c>)
 8007588:	f7fc fcc6 	bl	8003f18 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758c:	f384 8810 	msr	PRIMASK, r4
}
 8007590:	bd10      	pop	{r4, pc}
 8007592:	bf00      	nop
 8007594:	2000006c 	.word	0x2000006c

08007598 <SUBGRF_GetRssiInst>:
{
 8007598:	b500      	push	{lr}
 800759a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800759c:	2201      	movs	r2, #1
 800759e:	a901      	add	r1, sp, #4
 80075a0:	2015      	movs	r0, #21
 80075a2:	f7ff ffe9 	bl	8007578 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80075a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80075aa:	4240      	negs	r0, r0
}
 80075ac:	1040      	asrs	r0, r0, #1
 80075ae:	b003      	add	sp, #12
 80075b0:	f85d fb04 	ldr.w	pc, [sp], #4

080075b4 <SUBGRF_GetRxBufferStatus>:
{
 80075b4:	b530      	push	{r4, r5, lr}
 80075b6:	b083      	sub	sp, #12
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80075bc:	2202      	movs	r2, #2
 80075be:	a901      	add	r1, sp, #4
 80075c0:	2013      	movs	r0, #19
 80075c2:	f7ff ffd9 	bl	8007578 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80075c6:	f7ff fadf 	bl	8006b88 <SUBGRF_GetPacketType>
 80075ca:	2801      	cmp	r0, #1
 80075cc:	d007      	beq.n	80075de <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80075ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80075d2:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80075d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80075d8:	7023      	strb	r3, [r4, #0]
}
 80075da:	b003      	add	sp, #12
 80075dc:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <SUBGRF_GetRxBufferStatus+0x40>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d1f2      	bne.n	80075ce <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80075e8:	f240 7002 	movw	r0, #1794	; 0x702
 80075ec:	f7ff fae2 	bl	8006bb4 <SUBGRF_ReadRegister>
 80075f0:	7028      	strb	r0, [r5, #0]
 80075f2:	e7ef      	b.n	80075d4 <SUBGRF_GetRxBufferStatus+0x20>
 80075f4:	20000581 	.word	0x20000581

080075f8 <SUBGRF_GetPayload>:
{
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	4606      	mov	r6, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8007608:	f10d 0107 	add.w	r1, sp, #7
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff ffd1 	bl	80075b4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007612:	7822      	ldrb	r2, [r4, #0]
 8007614:	42aa      	cmp	r2, r5
 8007616:	d902      	bls.n	800761e <SUBGRF_GetPayload+0x26>
        return 1;
 8007618:	2001      	movs	r0, #1
}
 800761a:	b002      	add	sp, #8
 800761c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800761e:	4631      	mov	r1, r6
 8007620:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007624:	f7ff fb6c 	bl	8006d00 <SUBGRF_ReadBuffer>
    return 0;
 8007628:	2000      	movs	r0, #0
 800762a:	e7f6      	b.n	800761a <SUBGRF_GetPayload+0x22>

0800762c <SUBGRF_GetPacketStatus>:
{
 800762c:	b510      	push	{r4, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007632:	2203      	movs	r2, #3
 8007634:	a901      	add	r1, sp, #4
 8007636:	2014      	movs	r0, #20
 8007638:	f7ff ff9e 	bl	8007578 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800763c:	f7ff faa4 	bl	8006b88 <SUBGRF_GetPacketType>
 8007640:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8007642:	b148      	cbz	r0, 8007658 <SUBGRF_GetPacketStatus+0x2c>
 8007644:	2801      	cmp	r0, #1
 8007646:	d018      	beq.n	800767a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007648:	2214      	movs	r2, #20
 800764a:	2100      	movs	r1, #0
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fb22 	bl	8007c96 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007652:	230f      	movs	r3, #15
 8007654:	7023      	strb	r3, [r4, #0]
}
 8007656:	e00e      	b.n	8007676 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800765c:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800765e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007662:	425b      	negs	r3, r3
 8007664:	105b      	asrs	r3, r3, #1
 8007666:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007668:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800766c:	425b      	negs	r3, r3
 800766e:	105b      	asrs	r3, r3, #1
 8007670:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	60a3      	str	r3, [r4, #8]
}
 8007676:	b002      	add	sp, #8
 8007678:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800767a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800767e:	425b      	negs	r3, r3
 8007680:	105b      	asrs	r3, r3, #1
 8007682:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007684:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8007688:	3302      	adds	r3, #2
 800768a:	109b      	asrs	r3, r3, #2
 800768c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800768e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007692:	425b      	negs	r3, r3
 8007694:	105b      	asrs	r3, r3, #1
 8007696:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007698:	4b01      	ldr	r3, [pc, #4]	; (80076a0 <SUBGRF_GetPacketStatus+0x74>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6123      	str	r3, [r4, #16]
            break;
 800769e:	e7ea      	b.n	8007676 <SUBGRF_GetPacketStatus+0x4a>
 80076a0:	2000057c 	.word	0x2000057c

080076a4 <SUBGRF_SetSwitch>:
{
 80076a4:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80076a6:	2901      	cmp	r1, #1
 80076a8:	d003      	beq.n	80076b2 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80076aa:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80076ac:	f7fa fa58 	bl	8001b60 <RBI_ConfigRFSwitch>
}
 80076b0:	bd10      	pop	{r4, pc}
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80076b6:	2c01      	cmp	r4, #1
 80076b8:	d003      	beq.n	80076c2 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80076ba:	2c02      	cmp	r4, #2
 80076bc:	d1f6      	bne.n	80076ac <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80076be:	2003      	movs	r0, #3
 80076c0:	e7f4      	b.n	80076ac <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80076c2:	2004      	movs	r0, #4
 80076c4:	f7ff fa86 	bl	8006bd4 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80076c8:	2002      	movs	r0, #2
 80076ca:	e7f6      	b.n	80076ba <SUBGRF_SetSwitch+0x16>

080076cc <SUBGRF_SetRfTxPower>:
{
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80076d0:	f7fa fa4a 	bl	8001b68 <RBI_GetTxConfig>
    switch (TxConfig)
 80076d4:	b148      	cbz	r0, 80076ea <SUBGRF_SetRfTxPower+0x1e>
 80076d6:	2802      	cmp	r0, #2
 80076d8:	d10d      	bne.n	80076f6 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80076da:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80076dc:	2202      	movs	r2, #2
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f7ff fdb3 	bl	800724c <SUBGRF_SetTxParams>
}
 80076e6:	4628      	mov	r0, r5
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80076ea:	2c0f      	cmp	r4, #15
 80076ec:	dc01      	bgt.n	80076f2 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80076ee:	2501      	movs	r5, #1
 80076f0:	e7f4      	b.n	80076dc <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80076f2:	2502      	movs	r5, #2
 80076f4:	e7f2      	b.n	80076dc <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80076f6:	2501      	movs	r5, #1
 80076f8:	e7f0      	b.n	80076dc <SUBGRF_SetRfTxPower+0x10>

080076fa <SUBGRF_GetRadioWakeUpTime>:
}
 80076fa:	2001      	movs	r0, #1
 80076fc:	4770      	bx	lr
	...

08007700 <HAL_SUBGHZ_TxCpltCallback>:
{
 8007700:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007702:	4b02      	ldr	r3, [pc, #8]	; (800770c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2001      	movs	r0, #1
 8007708:	4798      	blx	r3
}
 800770a:	bd08      	pop	{r3, pc}
 800770c:	20000584 	.word	0x20000584

08007710 <HAL_SUBGHZ_RxCpltCallback>:
{
 8007710:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007712:	4b02      	ldr	r3, [pc, #8]	; (800771c <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2002      	movs	r0, #2
 8007718:	4798      	blx	r3
}
 800771a:	bd08      	pop	{r3, pc}
 800771c:	20000584 	.word	0x20000584

08007720 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8007720:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007722:	4b02      	ldr	r3, [pc, #8]	; (800772c <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2040      	movs	r0, #64	; 0x40
 8007728:	4798      	blx	r3
}
 800772a:	bd08      	pop	{r3, pc}
 800772c:	20000584 	.word	0x20000584

08007730 <HAL_SUBGHZ_CADStatusCallback>:
{
 8007730:	b508      	push	{r3, lr}
    switch (cadstatus)
 8007732:	b111      	cbz	r1, 800773a <HAL_SUBGHZ_CADStatusCallback+0xa>
 8007734:	2901      	cmp	r1, #1
 8007736:	d005      	beq.n	8007744 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8007738:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2080      	movs	r0, #128	; 0x80
 8007740:	4798      	blx	r3
            break;
 8007742:	e7f9      	b.n	8007738 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f44f 7080 	mov.w	r0, #256	; 0x100
 800774c:	4798      	blx	r3
}
 800774e:	e7f3      	b.n	8007738 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8007750:	20000584 	.word	0x20000584

08007754 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8007754:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007756:	4b03      	ldr	r3, [pc, #12]	; (8007764 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800775e:	4798      	blx	r3
}
 8007760:	bd08      	pop	{r3, pc}
 8007762:	bf00      	nop
 8007764:	20000584 	.word	0x20000584

08007768 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8007768:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800776a:	4b02      	ldr	r3, [pc, #8]	; (8007774 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2020      	movs	r0, #32
 8007770:	4798      	blx	r3
}
 8007772:	bd08      	pop	{r3, pc}
 8007774:	20000584 	.word	0x20000584

08007778 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8007778:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800777a:	4b02      	ldr	r3, [pc, #8]	; (8007784 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2004      	movs	r0, #4
 8007780:	4798      	blx	r3
}
 8007782:	bd08      	pop	{r3, pc}
 8007784:	20000584 	.word	0x20000584

08007788 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8007788:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800778a:	4b02      	ldr	r3, [pc, #8]	; (8007794 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2008      	movs	r0, #8
 8007790:	4798      	blx	r3
}
 8007792:	bd08      	pop	{r3, pc}
 8007794:	20000584 	.word	0x20000584

08007798 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8007798:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800779a:	4b02      	ldr	r3, [pc, #8]	; (80077a4 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2010      	movs	r0, #16
 80077a0:	4798      	blx	r3
}
 80077a2:	bd08      	pop	{r3, pc}
 80077a4:	20000584 	.word	0x20000584

080077a8 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80077a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80077aa:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80077b2:	4798      	blx	r3
}
 80077b4:	bd08      	pop	{r3, pc}
 80077b6:	bf00      	nop
 80077b8:	20000584 	.word	0x20000584

080077bc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80077bc:	4601      	mov	r1, r0
 80077be:	b188      	cbz	r0, 80077e4 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b15      	cmp	r3, #21
 80077c4:	d80d      	bhi.n	80077e2 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80077c6:	4618      	mov	r0, r3
 80077c8:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80077ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80077ce:	428a      	cmp	r2, r1
 80077d0:	d802      	bhi.n	80077d8 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	e7f4      	b.n	80077c2 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80077d8:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80077da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80077de:	7900      	ldrb	r0, [r0, #4]
 80077e0:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 80077e2:	e7fe      	b.n	80077e2 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 80077e4:	201f      	movs	r0, #31
}
 80077e6:	4770      	bx	lr
 80077e8:	08008c38 	.word	0x08008c38

080077ec <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	4606      	mov	r6, r0
 80077f2:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80077f4:	4b1d      	ldr	r3, [pc, #116]	; (800786c <SUBGRF_GetCFO+0x80>)
 80077f6:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80077f8:	f640 0007 	movw	r0, #2055	; 0x807
 80077fc:	f7ff f9da 	bl	8006bb4 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8007800:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8007804:	3308      	adds	r3, #8
 8007806:	446b      	add	r3, sp
 8007808:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 800780c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8007810:	3301      	adds	r3, #1
 8007812:	fa05 f303 	lsl.w	r3, r5, r3
 8007816:	4d16      	ldr	r5, [pc, #88]	; (8007870 <SUBGRF_GetCFO+0x84>)
 8007818:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800781c:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8007820:	2a07      	cmp	r2, #7
 8007822:	d921      	bls.n	8007868 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8007824:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8007826:	fb00 f202 	mul.w	r2, r0, r2
 800782a:	2a03      	cmp	r2, #3
 800782c:	d800      	bhi.n	8007830 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 800782e:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8007830:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8007834:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8007838:	f7ff f9bc 	bl	8006bb4 <SUBGRF_ReadRegister>
 800783c:	0200      	lsls	r0, r0, #8
 800783e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8007842:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8007846:	f7ff f9b5 	bl	8006bb4 <SUBGRF_ReadRegister>
 800784a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800784c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8007850:	d003      	beq.n	800785a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8007852:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8007856:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800785a:	096d      	lsrs	r5, r5, #5
 800785c:	fb05 f000 	mul.w	r0, r5, r0
 8007860:	11c0      	asrs	r0, r0, #7
 8007862:	6020      	str	r0, [r4, #0]
}
 8007864:	b002      	add	sp, #8
 8007866:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8007868:	2002      	movs	r0, #2
 800786a:	e7dc      	b.n	8007826 <SUBGRF_GetCFO+0x3a>
 800786c:	0c0a0804 	.word	0x0c0a0804
 8007870:	01e84800 	.word	0x01e84800

08007874 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	4770      	bx	lr

0800787a <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	4770      	bx	lr

08007880 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	4770      	bx	lr

08007886 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8007886:	4770      	bx	lr

08007888 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8007888:	2000      	movs	r0, #0
 800788a:	4770      	bx	lr

0800788c <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800788c:	2000      	movs	r0, #0
 800788e:	4770      	bx	lr

08007890 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8007890:	4770      	bx	lr

08007892 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
 8007896:	4770      	bx	lr

08007898 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	4770      	bx	lr

0800789e <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800789e:	4770      	bx	lr

080078a0 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80078a0:	4770      	bx	lr

080078a2 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80078a2:	4770      	bx	lr

080078a4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80078a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80078aa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80078ac:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <TRACE_AllocateBufer+0x84>)
 80078ae:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80078b2:	8a1a      	ldrh	r2, [r3, #16]
 80078b4:	4594      	cmp	ip, r2
 80078b6:	d011      	beq.n	80078dc <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80078b8:	4594      	cmp	ip, r2
 80078ba:	d921      	bls.n	8007900 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80078bc:	f5cc 7300 	rsb	r3, ip, #512	; 0x200
 80078c0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80078c2:	4283      	cmp	r3, r0
 80078c4:	d81f      	bhi.n	8007906 <TRACE_AllocateBufer+0x62>
 80078c6:	4282      	cmp	r2, r0
 80078c8:	d91d      	bls.n	8007906 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80078ca:	4b17      	ldr	r3, [pc, #92]	; (8007928 <TRACE_AllocateBufer+0x84>)
 80078cc:	2401      	movs	r4, #1
 80078ce:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80078d0:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80078d4:	2400      	movs	r4, #0
 80078d6:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80078d8:	4613      	mov	r3, r2
 80078da:	e014      	b.n	8007906 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80078dc:	f5cc 7300 	rsb	r3, ip, #512	; 0x200
 80078e0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80078e2:	4298      	cmp	r0, r3
 80078e4:	d30f      	bcc.n	8007906 <TRACE_AllocateBufer+0x62>
 80078e6:	4282      	cmp	r2, r0
 80078e8:	d90d      	bls.n	8007906 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <TRACE_AllocateBufer+0x84>)
 80078ec:	2401      	movs	r4, #1
 80078ee:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80078f0:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80078f4:	f04f 0c00 	mov.w	ip, #0
 80078f8:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80078fc:	4613      	mov	r3, r2
 80078fe:	e002      	b.n	8007906 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8007900:	eba2 030c 	sub.w	r3, r2, ip
 8007904:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8007906:	4283      	cmp	r3, r0
 8007908:	d90a      	bls.n	8007920 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800790a:	4a07      	ldr	r2, [pc, #28]	; (8007928 <TRACE_AllocateBufer+0x84>)
 800790c:	8a53      	ldrh	r3, [r2, #18]
 800790e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007910:	4403      	add	r3, r0
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8007918:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800791e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e7f9      	b.n	800791a <TRACE_AllocateBufer+0x76>
 8007926:	bf00      	nop
 8007928:	20000788 	.word	0x20000788

0800792c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007930:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8007932:	4a03      	ldr	r2, [pc, #12]	; (8007940 <TRACE_Lock+0x14>)
 8007934:	8ad3      	ldrh	r3, [r2, #22]
 8007936:	3301      	adds	r3, #1
 8007938:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800793e:	4770      	bx	lr
 8007940:	20000788 	.word	0x20000788

08007944 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007944:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007948:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800794a:	4a03      	ldr	r2, [pc, #12]	; (8007958 <TRACE_UnLock+0x14>)
 800794c:	8ad3      	ldrh	r3, [r2, #22]
 800794e:	3b01      	subs	r3, #1
 8007950:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007952:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8007956:	4770      	bx	lr
 8007958:	20000788 	.word	0x20000788

0800795c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <TRACE_IsLocked+0xc>)
 800795e:	8ad8      	ldrh	r0, [r3, #22]
}
 8007960:	3800      	subs	r0, #0
 8007962:	bf18      	it	ne
 8007964:	2001      	movne	r0, #1
 8007966:	4770      	bx	lr
 8007968:	20000788 	.word	0x20000788

0800796c <UTIL_ADV_TRACE_Init>:
{
 800796c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800796e:	2218      	movs	r2, #24
 8007970:	2100      	movs	r1, #0
 8007972:	4807      	ldr	r0, [pc, #28]	; (8007990 <UTIL_ADV_TRACE_Init+0x24>)
 8007974:	f000 f98f 	bl	8007c96 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8007978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800797c:	2100      	movs	r1, #0
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <UTIL_ADV_TRACE_Init+0x28>)
 8007980:	f000 f989 	bl	8007c96 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <UTIL_ADV_TRACE_Init+0x2c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4804      	ldr	r0, [pc, #16]	; (800799c <UTIL_ADV_TRACE_Init+0x30>)
 800798a:	4798      	blx	r3
}
 800798c:	bd08      	pop	{r3, pc}
 800798e:	bf00      	nop
 8007990:	20000788 	.word	0x20000788
 8007994:	20000588 	.word	0x20000588
 8007998:	080085ac 	.word	0x080085ac
 800799c:	08007b21 	.word	0x08007b21

080079a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80079a0:	4b01      	ldr	r3, [pc, #4]	; (80079a8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80079a2:	6058      	str	r0, [r3, #4]
}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000788 	.word	0x20000788

080079ac <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80079ac:	4b01      	ldr	r3, [pc, #4]	; (80079b4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80079ae:	7218      	strb	r0, [r3, #8]
}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000788 	.word	0x20000788

080079b8 <TRACE_Send>:
{
 80079b8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80079be:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80079c0:	f7ff ffcc 	bl	800795c <TRACE_IsLocked>
 80079c4:	b118      	cbz	r0, 80079ce <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80079ca:	2000      	movs	r0, #0
}
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80079ce:	f7ff ffad 	bl	800792c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <TRACE_Send+0x90>)
 80079d4:	8a1a      	ldrh	r2, [r3, #16]
 80079d6:	8a5b      	ldrh	r3, [r3, #18]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d02e      	beq.n	8007a3a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80079dc:	491a      	ldr	r1, [pc, #104]	; (8007a48 <TRACE_Send+0x90>)
 80079de:	7889      	ldrb	r1, [r1, #2]
 80079e0:	2901      	cmp	r1, #1
 80079e2:	d017      	beq.n	8007a14 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80079e4:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <TRACE_Send+0x90>)
 80079e6:	7892      	ldrb	r2, [r2, #2]
 80079e8:	b932      	cbnz	r2, 80079f8 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <TRACE_Send+0x90>)
 80079ec:	8a12      	ldrh	r2, [r2, #16]
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d91e      	bls.n	8007a30 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <TRACE_Send+0x90>)
 80079f6:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80079f8:	4e13      	ldr	r6, [pc, #76]	; (8007a48 <TRACE_Send+0x90>)
 80079fa:	8a33      	ldrh	r3, [r6, #16]
 80079fc:	4d13      	ldr	r5, [pc, #76]	; (8007a4c <TRACE_Send+0x94>)
 80079fe:	441d      	add	r5, r3
 8007a00:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8007a04:	f7f9 f952 	bl	8000cac <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007a08:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <TRACE_Send+0x98>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	8ab1      	ldrh	r1, [r6, #20]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	4798      	blx	r3
 8007a12:	e7db      	b.n	80079cc <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8007a14:	480c      	ldr	r0, [pc, #48]	; (8007a48 <TRACE_Send+0x90>)
 8007a16:	8801      	ldrh	r1, [r0, #0]
 8007a18:	1a8a      	subs	r2, r1, r2
 8007a1a:	b292      	uxth	r2, r2
 8007a1c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007a1e:	2102      	movs	r1, #2
 8007a20:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007a22:	2100      	movs	r1, #0
 8007a24:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	d1dc      	bne.n	80079e4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007a2a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007a2c:	8201      	strh	r1, [r0, #16]
 8007a2e:	e7d9      	b.n	80079e4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007a30:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 8007a34:	4a04      	ldr	r2, [pc, #16]	; (8007a48 <TRACE_Send+0x90>)
 8007a36:	8293      	strh	r3, [r2, #20]
 8007a38:	e7de      	b.n	80079f8 <TRACE_Send+0x40>
      TRACE_UnLock();
 8007a3a:	f7ff ff83 	bl	8007944 <TRACE_UnLock>
 8007a3e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8007a42:	2000      	movs	r0, #0
}
 8007a44:	e7c2      	b.n	80079cc <TRACE_Send+0x14>
 8007a46:	bf00      	nop
 8007a48:	20000788 	.word	0x20000788
 8007a4c:	20000588 	.word	0x20000588
 8007a50:	080085ac 	.word	0x080085ac

08007a54 <UTIL_ADV_TRACE_COND_FSend>:
{
 8007a54:	b408      	push	{r3}
 8007a56:	b530      	push	{r4, r5, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8007a62:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007a64:	7a1b      	ldrb	r3, [r3, #8]
 8007a66:	4283      	cmp	r3, r0
 8007a68:	d34d      	bcc.n	8007b06 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8007a6a:	4b2a      	ldr	r3, [pc, #168]	; (8007b14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	ea31 0303 	bics.w	r3, r1, r3
 8007a72:	d14b      	bne.n	8007b0c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	b123      	cbz	r3, 8007a84 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8007a7a:	b11a      	cbz	r2, 8007a84 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8007a7c:	f10d 0102 	add.w	r1, sp, #2
 8007a80:	a801      	add	r0, sp, #4
 8007a82:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8007a84:	ab0a      	add	r3, sp, #40	; 0x28
 8007a86:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007a88:	4622      	mov	r2, r4
 8007a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a8e:	4822      	ldr	r0, [pc, #136]	; (8007b18 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8007a90:	f000 fc2e 	bl	80082f0 <tiny_vsnprintf_like>
 8007a94:	b285      	uxth	r5, r0
  TRACE_Lock();
 8007a96:	f7ff ff49 	bl	800792c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8007a9a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8007a9e:	4428      	add	r0, r5
 8007aa0:	4669      	mov	r1, sp
 8007aa2:	b280      	uxth	r0, r0
 8007aa4:	f7ff fefe 	bl	80078a4 <TRACE_AllocateBufer>
 8007aa8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007aac:	d026      	beq.n	8007afc <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e00d      	b.n	8007ace <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8007ab2:	f8bd 2000 	ldrh.w	r2, [sp]
 8007ab6:	f103 0118 	add.w	r1, r3, #24
 8007aba:	4469      	add	r1, sp
 8007abc:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8007ac0:	4916      	ldr	r1, [pc, #88]	; (8007b1c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8007ac2:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8007ac4:	3201      	adds	r2, #1
 8007ac6:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8007aca:	3301      	adds	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d8ed      	bhi.n	8007ab2 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8007ad6:	f8bd 0000 	ldrh.w	r0, [sp]
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	4622      	mov	r2, r4
 8007ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ae2:	4c0e      	ldr	r4, [pc, #56]	; (8007b1c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8007ae4:	4420      	add	r0, r4
 8007ae6:	f000 fc03 	bl	80082f0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8007aea:	f7ff ff2b 	bl	8007944 <TRACE_UnLock>
    return TRACE_Send();
 8007aee:	f7ff ff63 	bl	80079b8 <TRACE_Send>
}
 8007af2:	b006      	add	sp, #24
 8007af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af8:	b001      	add	sp, #4
 8007afa:	4770      	bx	lr
  TRACE_UnLock();
 8007afc:	f7ff ff22 	bl	8007944 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8007b00:	f06f 0002 	mvn.w	r0, #2
 8007b04:	e7f5      	b.n	8007af2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8007b06:	f06f 0004 	mvn.w	r0, #4
 8007b0a:	e7f2      	b.n	8007af2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8007b0c:	f06f 0005 	mvn.w	r0, #5
 8007b10:	e7ef      	b.n	8007af2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8007b12:	bf00      	nop
 8007b14:	20000788 	.word	0x20000788
 8007b18:	200007a0 	.word	0x200007a0
 8007b1c:	20000588 	.word	0x20000588

08007b20 <TRACE_TxCpltCallback>:
{
 8007b20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b22:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b26:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8007b28:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b2a:	789b      	ldrb	r3, [r3, #2]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d016      	beq.n	8007b5e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8007b30:	4a23      	ldr	r2, [pc, #140]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b32:	8a13      	ldrh	r3, [r2, #16]
 8007b34:	8a90      	ldrh	r0, [r2, #20]
 8007b36:	4403      	add	r3, r0
 8007b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8007b3e:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b40:	8a1a      	ldrh	r2, [r3, #16]
 8007b42:	8a5b      	ldrh	r3, [r3, #18]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d003      	beq.n	8007b50 <TRACE_TxCpltCallback+0x30>
 8007b48:	481d      	ldr	r0, [pc, #116]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b4a:	8ac0      	ldrh	r0, [r0, #22]
 8007b4c:	2801      	cmp	r0, #1
 8007b4e:	d00b      	beq.n	8007b68 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b50:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8007b54:	f7f9 f8b0 	bl	8000cb8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8007b58:	f7ff fef4 	bl	8007944 <TRACE_UnLock>
}
 8007b5c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007b64:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8007b66:	e7ea      	b.n	8007b3e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8007b68:	4815      	ldr	r0, [pc, #84]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b6a:	7880      	ldrb	r0, [r0, #2]
 8007b6c:	2801      	cmp	r0, #1
 8007b6e:	d014      	beq.n	8007b9a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8007b70:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b72:	7892      	ldrb	r2, [r2, #2]
 8007b74:	b932      	cbnz	r2, 8007b84 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b78:	8a12      	ldrh	r2, [r2, #16]
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d91b      	bls.n	8007bb6 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b82:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b86:	8a1a      	ldrh	r2, [r3, #16]
 8007b88:	480e      	ldr	r0, [pc, #56]	; (8007bc4 <TRACE_TxCpltCallback+0xa4>)
 8007b8a:	4410      	add	r0, r2
 8007b8c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8007b90:	4a0d      	ldr	r2, [pc, #52]	; (8007bc8 <TRACE_TxCpltCallback+0xa8>)
 8007b92:	68d2      	ldr	r2, [r2, #12]
 8007b94:	8a99      	ldrh	r1, [r3, #20]
 8007b96:	4790      	blx	r2
 8007b98:	e7e0      	b.n	8007b5c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8007b9a:	4c09      	ldr	r4, [pc, #36]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007b9c:	8820      	ldrh	r0, [r4, #0]
 8007b9e:	1a82      	subs	r2, r0, r2
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8007ba4:	2002      	movs	r0, #2
 8007ba6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8007ba8:	2000      	movs	r0, #0
 8007baa:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	d1df      	bne.n	8007b70 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8007bb0:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8007bb2:	8220      	strh	r0, [r4, #16]
 8007bb4:	e7dc      	b.n	8007b70 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8007bb6:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
 8007bba:	4a01      	ldr	r2, [pc, #4]	; (8007bc0 <TRACE_TxCpltCallback+0xa0>)
 8007bbc:	8293      	strh	r3, [r2, #20]
 8007bbe:	e7e1      	b.n	8007b84 <TRACE_TxCpltCallback+0x64>
 8007bc0:	20000788 	.word	0x20000788
 8007bc4:	20000588 	.word	0x20000588
 8007bc8:	080085ac 	.word	0x080085ac

08007bcc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4a02      	ldr	r2, [pc, #8]	; (8007bd8 <UTIL_LPM_Init+0xc>)
 8007bd0:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007bd2:	4a02      	ldr	r2, [pc, #8]	; (8007bdc <UTIL_LPM_Init+0x10>)
 8007bd4:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007bd6:	4770      	bx	lr
 8007bd8:	200008a4 	.word	0x200008a4
 8007bdc:	200008a0 	.word	0x200008a0

08007be0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007be4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8007be6:	b141      	cbz	r1, 8007bfa <UTIL_LPM_SetStopMode+0x1a>
 8007be8:	2901      	cmp	r1, #1
 8007bea:	d103      	bne.n	8007bf4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8007bec:	4906      	ldr	r1, [pc, #24]	; (8007c08 <UTIL_LPM_SetStopMode+0x28>)
 8007bee:	680a      	ldr	r2, [r1, #0]
 8007bf0:	4310      	orrs	r0, r2
 8007bf2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007bf8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8007bfa:	4903      	ldr	r1, [pc, #12]	; (8007c08 <UTIL_LPM_SetStopMode+0x28>)
 8007bfc:	680a      	ldr	r2, [r1, #0]
 8007bfe:	ea22 0000 	bic.w	r0, r2, r0
 8007c02:	6008      	str	r0, [r1, #0]
      break;
 8007c04:	e7f6      	b.n	8007bf4 <UTIL_LPM_SetStopMode+0x14>
 8007c06:	bf00      	nop
 8007c08:	200008a4 	.word	0x200008a4

08007c0c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007c10:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8007c12:	b141      	cbz	r1, 8007c26 <UTIL_LPM_SetOffMode+0x1a>
 8007c14:	2901      	cmp	r1, #1
 8007c16:	d103      	bne.n	8007c20 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007c18:	4906      	ldr	r1, [pc, #24]	; (8007c34 <UTIL_LPM_SetOffMode+0x28>)
 8007c1a:	680a      	ldr	r2, [r1, #0]
 8007c1c:	4310      	orrs	r0, r2
 8007c1e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c20:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007c24:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8007c26:	4903      	ldr	r1, [pc, #12]	; (8007c34 <UTIL_LPM_SetOffMode+0x28>)
 8007c28:	680a      	ldr	r2, [r1, #0]
 8007c2a:	ea22 0000 	bic.w	r0, r2, r0
 8007c2e:	6008      	str	r0, [r1, #0]
      break;
 8007c30:	e7f6      	b.n	8007c20 <UTIL_LPM_SetOffMode+0x14>
 8007c32:	bf00      	nop
 8007c34:	200008a0 	.word	0x200008a0

08007c38 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8007c38:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007c3e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8007c40:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <UTIL_LPM_EnterLowPower+0x3c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	b13b      	cbz	r3, 8007c56 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8007c46:	4d0c      	ldr	r5, [pc, #48]	; (8007c78 <UTIL_LPM_EnterLowPower+0x40>)
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8007c4c:	686b      	ldr	r3, [r5, #4]
 8007c4e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c50:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <UTIL_LPM_EnterLowPower+0x44>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	b12b      	cbz	r3, 8007c68 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8007c5c:	4d06      	ldr	r5, [pc, #24]	; (8007c78 <UTIL_LPM_EnterLowPower+0x40>)
 8007c5e:	68ab      	ldr	r3, [r5, #8]
 8007c60:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8007c62:	68eb      	ldr	r3, [r5, #12]
 8007c64:	4798      	blx	r3
 8007c66:	e7f3      	b.n	8007c50 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8007c68:	4d03      	ldr	r5, [pc, #12]	; (8007c78 <UTIL_LPM_EnterLowPower+0x40>)
 8007c6a:	692b      	ldr	r3, [r5, #16]
 8007c6c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8007c6e:	696b      	ldr	r3, [r5, #20]
 8007c70:	4798      	blx	r3
 8007c72:	e7ed      	b.n	8007c50 <UTIL_LPM_EnterLowPower+0x18>
 8007c74:	200008a4 	.word	0x200008a4
 8007c78:	08008548 	.word	0x08008548
 8007c7c:	200008a0 	.word	0x200008a0

08007c80 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8007c80:	e004      	b.n	8007c8c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8007c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c86:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	1e53      	subs	r3, r2, #1
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1f6      	bne.n	8007c82 <UTIL_MEM_cpy_8+0x2>
    }
}
 8007c94:	4770      	bx	lr

08007c96 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8007c96:	e002      	b.n	8007c9e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8007c98:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	1e53      	subs	r3, r2, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1f8      	bne.n	8007c98 <UTIL_MEM_set_8+0x2>
  }
}
 8007ca6:	4770      	bx	lr

08007ca8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007cac:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8007cae:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <UTIL_SEQ_SetTask+0x20>)
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	4303      	orrs	r3, r0
 8007cb4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007cb6:	4a05      	ldr	r2, [pc, #20]	; (8007ccc <UTIL_SEQ_SetTask+0x24>)
 8007cb8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8007cbc:	4318      	orrs	r0, r3
 8007cbe:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8007cc6:	4770      	bx	lr
 8007cc8:	200008c0 	.word	0x200008c0
 8007ccc:	200008b8 	.word	0x200008b8

08007cd0 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007cd0:	4770      	bx	lr

08007cd2 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8007cd2:	4770      	bx	lr

08007cd4 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007cd4:	0c03      	lsrs	r3, r0, #16
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	b9b3      	cbnz	r3, 8007d08 <SEQ_BitPosition+0x34>
 8007cda:	0400      	lsls	r0, r0, #16
 8007cdc:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007cde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ce2:	d102      	bne.n	8007cea <SEQ_BitPosition+0x16>
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007cea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cee:	d102      	bne.n	8007cf6 <SEQ_BitPosition+0x22>
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007cf6:	0f00      	lsrs	r0, r0, #28
 8007cf8:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <SEQ_BitPosition+0x38>)
 8007cfa:	5c10      	ldrb	r0, [r2, r0]
 8007cfc:	4418      	add	r0, r3
 8007cfe:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8007d00:	f1c0 001f 	rsb	r0, r0, #31
}
 8007d04:	b2c0      	uxtb	r0, r0
 8007d06:	4770      	bx	lr
uint8_t n = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e7e8      	b.n	8007cde <SEQ_BitPosition+0xa>
 8007d0c:	08008ce8 	.word	0x08008ce8

08007d10 <UTIL_SEQ_Run>:
{
 8007d10:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8007d12:	4b43      	ldr	r3, [pc, #268]	; (8007e20 <UTIL_SEQ_Run+0x110>)
 8007d14:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8007d16:	4020      	ands	r0, r4
 8007d18:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8007d1a:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <UTIL_SEQ_Run+0x114>)
 8007d1c:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8007d1e:	4b42      	ldr	r3, [pc, #264]	; (8007e28 <UTIL_SEQ_Run+0x118>)
 8007d20:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8007d22:	4a42      	ldr	r2, [pc, #264]	; (8007e2c <UTIL_SEQ_Run+0x11c>)
 8007d24:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8007d26:	4a42      	ldr	r2, [pc, #264]	; (8007e30 <UTIL_SEQ_Run+0x120>)
 8007d28:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007d2a:	e030      	b.n	8007d8e <UTIL_SEQ_Run+0x7e>
      counter++;
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	e035      	b.n	8007d9c <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007d30:	4d40      	ldr	r5, [pc, #256]	; (8007e34 <UTIL_SEQ_Run+0x124>)
 8007d32:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007d36:	6868      	ldr	r0, [r5, #4]
 8007d38:	4010      	ands	r0, r2
 8007d3a:	f7ff ffcb 	bl	8007cd4 <SEQ_BitPosition>
 8007d3e:	493e      	ldr	r1, [pc, #248]	; (8007e38 <UTIL_SEQ_Run+0x128>)
 8007d40:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007d42:	686a      	ldr	r2, [r5, #4]
 8007d44:	2301      	movs	r3, #1
 8007d46:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4a:	ea22 0000 	bic.w	r0, r2, r0
 8007d4e:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d50:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d54:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8007d56:	680a      	ldr	r2, [r1, #0]
 8007d58:	fa03 f202 	lsl.w	r2, r3, r2
 8007d5c:	ea6f 0c02 	mvn.w	ip, r2
 8007d60:	4830      	ldr	r0, [pc, #192]	; (8007e24 <UTIL_SEQ_Run+0x114>)
 8007d62:	6801      	ldr	r1, [r0, #0]
 8007d64:	ea21 0202 	bic.w	r2, r1, r2
 8007d68:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d12d      	bne.n	8007dca <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6e:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8007d72:	4b31      	ldr	r3, [pc, #196]	; (8007e38 <UTIL_SEQ_Run+0x128>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4b31      	ldr	r3, [pc, #196]	; (8007e3c <UTIL_SEQ_Run+0x12c>)
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	4798      	blx	r3
    local_taskset = TaskSet;
 8007d7e:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <UTIL_SEQ_Run+0x114>)
 8007d80:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8007d82:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <UTIL_SEQ_Run+0x118>)
 8007d84:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8007d86:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <UTIL_SEQ_Run+0x11c>)
 8007d88:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8007d8a:	4a29      	ldr	r2, [pc, #164]	; (8007e30 <UTIL_SEQ_Run+0x120>)
 8007d8c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007d8e:	4001      	ands	r1, r0
 8007d90:	4d23      	ldr	r5, [pc, #140]	; (8007e20 <UTIL_SEQ_Run+0x110>)
 8007d92:	682d      	ldr	r5, [r5, #0]
 8007d94:	4229      	tst	r1, r5
 8007d96:	d021      	beq.n	8007ddc <UTIL_SEQ_Run+0xcc>
 8007d98:	4013      	ands	r3, r2
 8007d9a:	d11f      	bne.n	8007ddc <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8007d9c:	4a25      	ldr	r2, [pc, #148]	; (8007e34 <UTIL_SEQ_Run+0x124>)
 8007d9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007da2:	4002      	ands	r2, r0
 8007da4:	422a      	tst	r2, r5
 8007da6:	d0c1      	beq.n	8007d2c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8007da8:	4922      	ldr	r1, [pc, #136]	; (8007e34 <UTIL_SEQ_Run+0x124>)
 8007daa:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007dae:	4002      	ands	r2, r0
 8007db0:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007db2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007db6:	6849      	ldr	r1, [r1, #4]
 8007db8:	4211      	tst	r1, r2
 8007dba:	d1b9      	bne.n	8007d30 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007dbc:	491d      	ldr	r1, [pc, #116]	; (8007e34 <UTIL_SEQ_Run+0x124>)
 8007dbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc6:	6048      	str	r0, [r1, #4]
 8007dc8:	e7b2      	b.n	8007d30 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	4919      	ldr	r1, [pc, #100]	; (8007e34 <UTIL_SEQ_Run+0x124>)
 8007dce:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8007dd2:	ea0c 0202 	and.w	r2, ip, r2
 8007dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007dda:	e7c6      	b.n	8007d6a <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <UTIL_SEQ_Run+0x128>)
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295
 8007de2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007de4:	f7ff ff74 	bl	8007cd0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007dec:	b672      	cpsid	i
  local_taskset = TaskSet;
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <UTIL_SEQ_Run+0x114>)
 8007df0:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8007df2:	4a0d      	ldr	r2, [pc, #52]	; (8007e28 <UTIL_SEQ_Run+0x118>)
 8007df4:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8007df6:	4a0d      	ldr	r2, [pc, #52]	; (8007e2c <UTIL_SEQ_Run+0x11c>)
 8007df8:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	4a08      	ldr	r2, [pc, #32]	; (8007e20 <UTIL_SEQ_Run+0x110>)
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	4213      	tst	r3, r2
 8007e02:	d103      	bne.n	8007e0c <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <UTIL_SEQ_Run+0x120>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	420b      	tst	r3, r1
 8007e0a:	d006      	beq.n	8007e1a <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8007e10:	f7ff ff5f 	bl	8007cd2 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8007e14:	4b02      	ldr	r3, [pc, #8]	; (8007e20 <UTIL_SEQ_Run+0x110>)
 8007e16:	601c      	str	r4, [r3, #0]
}
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8007e1a:	f7f8 ff43 	bl	8000ca4 <UTIL_SEQ_Idle>
 8007e1e:	e7f5      	b.n	8007e0c <UTIL_SEQ_Run+0xfc>
 8007e20:	20000010 	.word	0x20000010
 8007e24:	200008c0 	.word	0x200008c0
 8007e28:	200008ac 	.word	0x200008ac
 8007e2c:	20000014 	.word	0x20000014
 8007e30:	200008b0 	.word	0x200008b0
 8007e34:	200008b8 	.word	0x200008b8
 8007e38:	200008a8 	.word	0x200008a8
 8007e3c:	200008b4 	.word	0x200008b4

08007e40 <UTIL_SEQ_RegTask>:
{
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e44:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007e48:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007e4a:	f7ff ff43 	bl	8007cd4 <SEQ_BitPosition>
 8007e4e:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <UTIL_SEQ_RegTask+0x1c>)
 8007e50:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e54:	f385 8810 	msr	PRIMASK, r5
}
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200008b4 	.word	0x200008b4

08007e60 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8007e60:	b082      	sub	sp, #8
 8007e62:	b082      	sub	sp, #8
 8007e64:	f10d 0c08 	add.w	ip, sp, #8
 8007e68:	e90c 0006 	stmdb	ip, {r1, r2}
 8007e6c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8007e6e:	2200      	movs	r2, #0
 8007e70:	6002      	str	r2, [r0, #0]
 8007e72:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8007e74:	440b      	add	r3, r1
 8007e76:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8007e78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007e7c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8007e80:	440a      	add	r2, r1
 8007e82:	b291      	uxth	r1, r2
 8007e84:	b212      	sxth	r2, r2
 8007e86:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8007e88:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007e8c:	db04      	blt.n	8007e98 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8007e8e:	3301      	adds	r3, #1
 8007e90:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8007e92:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007e96:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8007e98:	b002      	add	sp, #8
 8007e9a:	b002      	add	sp, #8
 8007e9c:	4770      	bx	lr
	...

08007ea0 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8007ea0:	b530      	push	{r4, r5, lr}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8007eae:	6003      	str	r3, [r0, #0]
 8007eb0:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8007eb2:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <SysTimeGet+0x40>)
 8007eb4:	692b      	ldr	r3, [r5, #16]
 8007eb6:	a805      	add	r0, sp, #20
 8007eb8:	4798      	blx	r3
 8007eba:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8007ebc:	68eb      	ldr	r3, [r5, #12]
 8007ebe:	4798      	blx	r3
 8007ec0:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8007ec4:	686b      	ldr	r3, [r5, #4]
 8007ec6:	4798      	blx	r3
 8007ec8:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8007eca:	9b05      	ldr	r3, [sp, #20]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	aa02      	add	r2, sp, #8
 8007ed2:	ca06      	ldmia	r2, {r1, r2}
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7ff ffc3 	bl	8007e60 <SysTimeAdd>

  return sysTime;
}
 8007eda:	4620      	mov	r0, r4
 8007edc:	b007      	add	sp, #28
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	0800856c 	.word	0x0800856c

08007ee4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8007ee4:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8007ee6:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <UTIL_TIMER_Init+0x10>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <UTIL_TIMER_Init+0x14>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4798      	blx	r3
}
 8007ef2:	bd08      	pop	{r3, pc}
 8007ef4:	200008c4 	.word	0x200008c4
 8007ef8:	08008580 	.word	0x08008580

08007efc <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8007efc:	b1a8      	cbz	r0, 8007f2a <UTIL_TIMER_Create+0x2e>
{
 8007efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f00:	4617      	mov	r7, r2
 8007f02:	461e      	mov	r6, r3
 8007f04:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8007f06:	b193      	cbz	r3, 8007f2e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8007f08:	2500      	movs	r5, #0
 8007f0a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8007f0c:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <UTIL_TIMER_Create+0x38>)
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	4608      	mov	r0, r1
 8007f12:	4798      	blx	r3
 8007f14:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8007f16:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8007f18:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8007f1a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8007f1c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8007f1e:	9b06      	ldr	r3, [sp, #24]
 8007f20:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8007f22:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8007f24:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8007f26:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8007f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8007f2a:	2001      	movs	r0, #1
}
 8007f2c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7fa      	b.n	8007f28 <UTIL_TIMER_Create+0x2c>
 8007f32:	bf00      	nop
 8007f34:	08008580 	.word	0x08008580

08007f38 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007f38:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8007f3a:	4c03      	ldr	r4, [pc, #12]	; (8007f48 <UTIL_TIMER_GetCurrentTime+0x10>)
 8007f3c:	69e3      	ldr	r3, [r4, #28]
 8007f3e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8007f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f42:	4798      	blx	r3
}
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	bf00      	nop
 8007f48:	08008580 	.word	0x08008580

08007f4c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8007f50:	4d05      	ldr	r5, [pc, #20]	; (8007f68 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8007f52:	69eb      	ldr	r3, [r5, #28]
 8007f54:	4798      	blx	r3
 8007f56:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007f58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8007f5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007f60:	1a20      	subs	r0, r4, r0
 8007f62:	4798      	blx	r3
}
 8007f64:	bd70      	pop	{r4, r5, r6, pc}
 8007f66:	bf00      	nop
 8007f68:	08008580 	.word	0x08008580

08007f6c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <TimerExists+0x18>)
 8007f6e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8007f70:	e000      	b.n	8007f74 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8007f72:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8007f74:	b11b      	cbz	r3, 8007f7e <TimerExists+0x12>
    if( cur == TimerObject )
 8007f76:	4283      	cmp	r3, r0
 8007f78:	d1fb      	bne.n	8007f72 <TimerExists+0x6>
      return true;
 8007f7a:	2001      	movs	r0, #1
  }
  return false;
}
 8007f7c:	4770      	bx	lr
  return false;
 8007f7e:	2000      	movs	r0, #0
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	200008c4 	.word	0x200008c4

08007f88 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8007f8c:	4e09      	ldr	r6, [pc, #36]	; (8007fb4 <TimerSetTimeout+0x2c>)
 8007f8e:	6a33      	ldr	r3, [r6, #32]
 8007f90:	4798      	blx	r3
 8007f92:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8007f94:	2301      	movs	r3, #1
 8007f96:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8007f98:	6827      	ldr	r7, [r4, #0]
 8007f9a:	69b6      	ldr	r6, [r6, #24]
 8007f9c:	47b0      	blx	r6
 8007f9e:	4428      	add	r0, r5
 8007fa0:	4287      	cmp	r7, r0
 8007fa2:	d202      	bcs.n	8007faa <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8007fa4:	47b0      	blx	r6
 8007fa6:	4405      	add	r5, r0
 8007fa8:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8007faa:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <TimerSetTimeout+0x2c>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	4798      	blx	r3
}
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb4:	08008580 	.word	0x08008580

08007fb8 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8007fb8:	b368      	cbz	r0, 8008016 <UTIL_TIMER_Stop+0x5e>
{
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007fc2:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8007fc4:	4b15      	ldr	r3, [pc, #84]	; (800801c <UTIL_TIMER_Stop+0x64>)
 8007fc6:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8007fcc:	b1e1      	cbz	r1, 8008008 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8007fd2:	4288      	cmp	r0, r1
 8007fd4:	d006      	beq.n	8007fe4 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8007fd6:	460b      	mov	r3, r1
        while( cur != NULL )
 8007fd8:	b1b3      	cbz	r3, 8008008 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d011      	beq.n	8008002 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8007fde:	4619      	mov	r1, r3
            cur = cur->Next;
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	e7f9      	b.n	8007fd8 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8007fe4:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8007fe6:	6948      	ldr	r0, [r1, #20]
 8007fe8:	b120      	cbz	r0, 8007ff4 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <UTIL_TIMER_Stop+0x64>)
 8007fec:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8007fee:	f7ff ffcb 	bl	8007f88 <TimerSetTimeout>
 8007ff2:	e009      	b.n	8008008 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <UTIL_TIMER_Stop+0x68>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4798      	blx	r3
            TimerListHead = NULL;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <UTIL_TIMER_Stop+0x64>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e002      	b.n	8008008 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	b123      	cbz	r3, 8008010 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8008006:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008008:	f384 8810 	msr	PRIMASK, r4
}
 800800c:	2000      	movs	r0, #0
}
 800800e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8008010:	2300      	movs	r3, #0
 8008012:	614b      	str	r3, [r1, #20]
 8008014:	e7f8      	b.n	8008008 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8008016:	2001      	movs	r0, #1
}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	200008c4 	.word	0x200008c4
 8008020:	08008580 	.word	0x08008580

08008024 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008024:	4b09      	ldr	r3, [pc, #36]	; (800804c <TimerInsertTimer+0x28>)
 8008026:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8008028:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800802a:	e001      	b.n	8008030 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800802c:	461a      	mov	r2, r3
        next = next->Next;
 800802e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8008030:	6951      	ldr	r1, [r2, #20]
 8008032:	b139      	cbz	r1, 8008044 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8008034:	6819      	ldr	r1, [r3, #0]
 8008036:	f8d0 c000 	ldr.w	ip, [r0]
 800803a:	458c      	cmp	ip, r1
 800803c:	d8f6      	bhi.n	800802c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800803e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8008040:	6143      	str	r3, [r0, #20]
        return;
 8008042:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8008044:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	6143      	str	r3, [r0, #20]
}
 800804a:	4770      	bx	lr
 800804c:	200008c4 	.word	0x200008c4

08008050 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8008050:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <TimerInsertNewHeadTimer+0x18>)
 8008054:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8008056:	b10b      	cbz	r3, 800805c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8008058:	2200      	movs	r2, #0
 800805a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800805c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800805e:	4b02      	ldr	r3, [pc, #8]	; (8008068 <TimerInsertNewHeadTimer+0x18>)
 8008060:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8008062:	f7ff ff91 	bl	8007f88 <TimerSetTimeout>
}
 8008066:	bd08      	pop	{r3, pc}
 8008068:	200008c4 	.word	0x200008c4

0800806c <UTIL_TIMER_Start>:
{
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800806e:	2800      	cmp	r0, #0
 8008070:	d036      	beq.n	80080e0 <UTIL_TIMER_Start+0x74>
 8008072:	4604      	mov	r4, r0
 8008074:	f7ff ff7a 	bl	8007f6c <TimerExists>
 8008078:	2800      	cmp	r0, #0
 800807a:	d134      	bne.n	80080e6 <UTIL_TIMER_Start+0x7a>
 800807c:	7a65      	ldrb	r5, [r4, #9]
 800807e:	2d00      	cmp	r5, #0
 8008080:	d133      	bne.n	80080ea <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008082:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008086:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8008088:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800808a:	4b19      	ldr	r3, [pc, #100]	; (80080f0 <UTIL_TIMER_Start+0x84>)
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	4798      	blx	r3
    if( ticks < minValue )
 8008090:	4287      	cmp	r7, r0
 8008092:	d300      	bcc.n	8008096 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8008094:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8008096:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800809c:	2201      	movs	r2, #1
 800809e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80080a0:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80080a2:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <UTIL_TIMER_Start+0x88>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	b183      	cbz	r3, 80080ca <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <UTIL_TIMER_Start+0x84>)
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	4418      	add	r0, r3
 80080b2:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <UTIL_TIMER_Start+0x88>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4298      	cmp	r0, r3
 80080bc:	d20c      	bcs.n	80080d8 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80080be:	4620      	mov	r0, r4
 80080c0:	f7ff ffc6 	bl	8008050 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c4:	f386 8810 	msr	PRIMASK, r6
}
 80080c8:	e00b      	b.n	80080e2 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <UTIL_TIMER_Start+0x84>)
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff ffbd 	bl	8008050 <TimerInsertNewHeadTimer>
 80080d6:	e7f5      	b.n	80080c4 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff ffa3 	bl	8008024 <TimerInsertTimer>
 80080de:	e7f1      	b.n	80080c4 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80080e0:	2501      	movs	r5, #1
}
 80080e2:	4628      	mov	r0, r5
 80080e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80080e6:	2501      	movs	r5, #1
 80080e8:	e7fb      	b.n	80080e2 <UTIL_TIMER_Start+0x76>
 80080ea:	2501      	movs	r5, #1
 80080ec:	e7f9      	b.n	80080e2 <UTIL_TIMER_Start+0x76>
 80080ee:	bf00      	nop
 80080f0:	08008580 	.word	0x08008580
 80080f4:	200008c4 	.word	0x200008c4

080080f8 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80080f8:	b198      	cbz	r0, 8008122 <UTIL_TIMER_SetPeriod+0x2a>
{
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <UTIL_TIMER_SetPeriod+0x30>)
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	4608      	mov	r0, r1
 8008104:	4798      	blx	r3
 8008106:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8008108:	4620      	mov	r0, r4
 800810a:	f7ff ff2f 	bl	8007f6c <TimerExists>
 800810e:	b908      	cbnz	r0, 8008114 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008110:	2000      	movs	r0, #0
}
 8008112:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8008114:	4620      	mov	r0, r4
 8008116:	f7ff ff4f 	bl	8007fb8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800811a:	4620      	mov	r0, r4
 800811c:	f7ff ffa6 	bl	800806c <UTIL_TIMER_Start>
 8008120:	e7f7      	b.n	8008112 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008122:	2001      	movs	r0, #1
}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	08008580 	.word	0x08008580

0800812c <UTIL_TIMER_IRQ_Handler>:
{
 800812c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800812e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008132:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8008134:	4c1e      	ldr	r4, [pc, #120]	; (80081b0 <UTIL_TIMER_IRQ_Handler+0x84>)
 8008136:	6963      	ldr	r3, [r4, #20]
 8008138:	4798      	blx	r3
 800813a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8008140:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	b923      	cbnz	r3, 8008152 <UTIL_TIMER_IRQ_Handler+0x26>
 8008148:	e018      	b.n	800817c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800814e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8008150:	b1a3      	cbz	r3, 800817c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	42a2      	cmp	r2, r4
 8008156:	d9f8      	bls.n	800814a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8008158:	1a31      	subs	r1, r6, r0
 800815a:	440a      	add	r2, r1
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e7f6      	b.n	800814e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8008160:	4b14      	ldr	r3, [pc, #80]	; (80081b4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008162:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8008164:	6962      	ldr	r2, [r4, #20]
 8008166:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800816c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	6920      	ldr	r0, [r4, #16]
 8008172:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8008174:	8963      	ldrh	r3, [r4, #10]
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d012      	beq.n	80081a2 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <UTIL_TIMER_IRQ_Handler+0x88>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	b13b      	cbz	r3, 8008192 <UTIL_TIMER_IRQ_Handler+0x66>
 8008182:	681c      	ldr	r4, [r3, #0]
 8008184:	2c00      	cmp	r4, #0
 8008186:	d0eb      	beq.n	8008160 <UTIL_TIMER_IRQ_Handler+0x34>
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <UTIL_TIMER_IRQ_Handler+0x84>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4798      	blx	r3
 800818e:	4284      	cmp	r4, r0
 8008190:	d3e6      	bcc.n	8008160 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	b108      	cbz	r0, 800819c <UTIL_TIMER_IRQ_Handler+0x70>
 8008198:	7a03      	ldrb	r3, [r0, #8]
 800819a:	b133      	cbz	r3, 80081aa <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800819c:	f385 8810 	msr	PRIMASK, r5
}
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff ff62 	bl	800806c <UTIL_TIMER_Start>
 80081a8:	e7e8      	b.n	800817c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80081aa:	f7ff feed 	bl	8007f88 <TimerSetTimeout>
 80081ae:	e7f5      	b.n	800819c <UTIL_TIMER_IRQ_Handler+0x70>
 80081b0:	08008580 	.word	0x08008580
 80081b4:	200008c4 	.word	0x200008c4

080081b8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80081b8:	4601      	mov	r1, r0
  int i = 0;
 80081ba:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80081bc:	e007      	b.n	80081ce <ee_skip_atoi+0x16>
 80081be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80081c2:	1c53      	adds	r3, r2, #1
 80081c4:	600b      	str	r3, [r1, #0]
 80081c6:	7813      	ldrb	r3, [r2, #0]
 80081c8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80081cc:	3830      	subs	r0, #48	; 0x30
 80081ce:	680a      	ldr	r2, [r1, #0]
 80081d0:	7813      	ldrb	r3, [r2, #0]
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	d9f1      	bls.n	80081be <ee_skip_atoi+0x6>
  return i;
}
 80081da:	4770      	bx	lr

080081dc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80081dc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80081e0:	b093      	sub	sp, #76	; 0x4c
 80081e2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80081e4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80081e6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80081ea:	d110      	bne.n	800820e <ee_number+0x32>
  char *dig = lower_digits;
 80081ec:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80082e8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80081f0:	1e9f      	subs	r7, r3, #2
 80081f2:	2f22      	cmp	r7, #34	; 0x22
 80081f4:	d875      	bhi.n	80082e2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80081f6:	f016 0401 	ands.w	r4, r6, #1
 80081fa:	d00b      	beq.n	8008214 <ee_number+0x38>
 80081fc:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8008200:	f016 0f02 	tst.w	r6, #2
 8008204:	d00f      	beq.n	8008226 <ee_number+0x4a>
  {
    if (num < 0)
 8008206:	2a00      	cmp	r2, #0
 8008208:	db07      	blt.n	800821a <ee_number+0x3e>
  sign = 0;
 800820a:	2700      	movs	r7, #0
 800820c:	e00c      	b.n	8008228 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800820e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80082ec <ee_number+0x110>
 8008212:	e7ed      	b.n	80081f0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8008214:	f04f 0e20 	mov.w	lr, #32
 8008218:	e7f2      	b.n	8008200 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800821a:	4252      	negs	r2, r2
      size--;
 800821c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800821e:	3e01      	subs	r6, #1
 8008220:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8008222:	272d      	movs	r7, #45	; 0x2d
 8008224:	e000      	b.n	8008228 <ee_number+0x4c>
  sign = 0;
 8008226:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8008228:	bb5a      	cbnz	r2, 8008282 <ee_number+0xa6>
    tmp[i++] = '0';
 800822a:	2330      	movs	r3, #48	; 0x30
 800822c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008230:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8008234:	45ac      	cmp	ip, r5
 8008236:	dd00      	ble.n	800823a <ee_number+0x5e>
 8008238:	4665      	mov	r5, ip
  size -= precision;
 800823a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800823c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800823e:	b31c      	cbz	r4, 8008288 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8008240:	b11f      	cbz	r7, 800824a <ee_number+0x6e>
 8008242:	f800 7b01 	strb.w	r7, [r0], #1
 8008246:	3901      	subs	r1, #1
 8008248:	d007      	beq.n	800825a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800824a:	2b00      	cmp	r3, #0
 800824c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008250:	dd24      	ble.n	800829c <ee_number+0xc0>
 8008252:	f800 eb01 	strb.w	lr, [r0], #1
 8008256:	3901      	subs	r1, #1
 8008258:	d1f7      	bne.n	800824a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800825a:	b013      	add	sp, #76	; 0x4c
 800825c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008260:	fbb2 f6f3 	udiv	r6, r2, r3
 8008264:	fb03 2216 	mls	r2, r3, r6, r2
 8008268:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800826c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8008270:	446a      	add	r2, sp
 8008272:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8008276:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008278:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800827c:	2a00      	cmp	r2, #0
 800827e:	d1ef      	bne.n	8008260 <ee_number+0x84>
 8008280:	e7d8      	b.n	8008234 <ee_number+0x58>
  i = 0;
 8008282:	f04f 0c00 	mov.w	ip, #0
 8008286:	e7f9      	b.n	800827c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008288:	2b00      	cmp	r3, #0
 800828a:	f103 33ff 	add.w	r3, r3, #4294967295
 800828e:	ddd7      	ble.n	8008240 <ee_number+0x64>
 8008290:	2220      	movs	r2, #32
 8008292:	f800 2b01 	strb.w	r2, [r0], #1
 8008296:	3901      	subs	r1, #1
 8008298:	d1f6      	bne.n	8008288 <ee_number+0xac>
 800829a:	e7de      	b.n	800825a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800829c:	4565      	cmp	r5, ip
 800829e:	f105 35ff 	add.w	r5, r5, #4294967295
 80082a2:	dd05      	ble.n	80082b0 <ee_number+0xd4>
 80082a4:	2230      	movs	r2, #48	; 0x30
 80082a6:	f800 2b01 	strb.w	r2, [r0], #1
 80082aa:	3901      	subs	r1, #1
 80082ac:	d1f6      	bne.n	800829c <ee_number+0xc0>
 80082ae:	e7d4      	b.n	800825a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80082b0:	4662      	mov	r2, ip
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082b8:	dd09      	ble.n	80082ce <ee_number+0xf2>
 80082ba:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80082be:	446a      	add	r2, sp
 80082c0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80082c4:	f800 2b01 	strb.w	r2, [r0], #1
 80082c8:	3901      	subs	r1, #1
 80082ca:	d1f1      	bne.n	80082b0 <ee_number+0xd4>
 80082cc:	e7c5      	b.n	800825a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80082d4:	ddc1      	ble.n	800825a <ee_number+0x7e>
 80082d6:	2220      	movs	r2, #32
 80082d8:	f800 2b01 	strb.w	r2, [r0], #1
 80082dc:	3901      	subs	r1, #1
 80082de:	d1f6      	bne.n	80082ce <ee_number+0xf2>
 80082e0:	e7bb      	b.n	800825a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80082e2:	2000      	movs	r0, #0
 80082e4:	e7b9      	b.n	800825a <ee_number+0x7e>
 80082e6:	bf00      	nop
 80082e8:	08008d20 	.word	0x08008d20
 80082ec:	08008cf8 	.word	0x08008cf8

080082f0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80082f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082f4:	b087      	sub	sp, #28
 80082f6:	9205      	str	r2, [sp, #20]
 80082f8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80082fa:	1e0f      	subs	r7, r1, #0
 80082fc:	f340 80b8 	ble.w	8008470 <tiny_vsnprintf_like+0x180>
 8008300:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008302:	4604      	mov	r4, r0
 8008304:	e004      	b.n	8008310 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8008306:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800830a:	9b05      	ldr	r3, [sp, #20]
 800830c:	3301      	adds	r3, #1
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	9905      	ldr	r1, [sp, #20]
 8008312:	780a      	ldrb	r2, [r1, #0]
 8008314:	b922      	cbnz	r2, 8008320 <tiny_vsnprintf_like+0x30>
 8008316:	1ba3      	subs	r3, r4, r6
 8008318:	1e78      	subs	r0, r7, #1
 800831a:	4283      	cmp	r3, r0
 800831c:	f2c0 80a2 	blt.w	8008464 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8008320:	1ba3      	subs	r3, r4, r6
 8008322:	f107 38ff 	add.w	r8, r7, #4294967295
 8008326:	4543      	cmp	r3, r8
 8008328:	f280 809c 	bge.w	8008464 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800832c:	2a25      	cmp	r2, #37	; 0x25
 800832e:	d1ea      	bne.n	8008306 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8008330:	1c4b      	adds	r3, r1, #1
 8008332:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8008334:	784b      	ldrb	r3, [r1, #1]
 8008336:	2b30      	cmp	r3, #48	; 0x30
 8008338:	d020      	beq.n	800837c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800833a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800833e:	3b30      	subs	r3, #48	; 0x30
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b09      	cmp	r3, #9
 8008344:	d91d      	bls.n	8008382 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8008346:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800834a:	9b05      	ldr	r3, [sp, #20]
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8008352:	2b20      	cmp	r3, #32
 8008354:	d867      	bhi.n	8008426 <tiny_vsnprintf_like+0x136>
 8008356:	e8df f003 	tbb	[pc, r3]
 800835a:	664a      	.short	0x664a
 800835c:	66666666 	.word	0x66666666
 8008360:	66666666 	.word	0x66666666
 8008364:	66621e66 	.word	0x66621e66
 8008368:	62666666 	.word	0x62666666
 800836c:	66666666 	.word	0x66666666
 8008370:	66666666 	.word	0x66666666
 8008374:	19662866 	.word	0x19662866
 8008378:	6666      	.short	0x6666
 800837a:	7c          	.byte	0x7c
 800837b:	00          	.byte	0x00
      flags |= ZEROPAD;
 800837c:	f04f 0901 	mov.w	r9, #1
 8008380:	e7dd      	b.n	800833e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8008382:	a805      	add	r0, sp, #20
 8008384:	f7ff ff18 	bl	80081b8 <ee_skip_atoi>
 8008388:	4605      	mov	r5, r0
 800838a:	e7de      	b.n	800834a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800838c:	230a      	movs	r3, #10
 800838e:	e031      	b.n	80083f4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8008390:	2320      	movs	r3, #32
 8008392:	f804 3b01 	strb.w	r3, [r4], #1
 8008396:	3d01      	subs	r5, #1
 8008398:	2d00      	cmp	r5, #0
 800839a:	dcf9      	bgt.n	8008390 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	1d1a      	adds	r2, r3, #4
 80083a0:	9204      	str	r2, [sp, #16]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80083a8:	e7af      	b.n	800830a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	1d1a      	adds	r2, r3, #4
 80083ae:	9204      	str	r2, [sp, #16]
 80083b0:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80083b4:	f1b8 0f00 	cmp.w	r8, #0
 80083b8:	d003      	beq.n	80083c2 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80083ba:	4640      	mov	r0, r8
 80083bc:	f7f7 fedc 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 80083c0:	e006      	b.n	80083d0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 80083c2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8008474 <tiny_vsnprintf_like+0x184>
 80083c6:	e7f8      	b.n	80083ba <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80083c8:	2220      	movs	r2, #32
 80083ca:	f804 2b01 	strb.w	r2, [r4], #1
 80083ce:	461d      	mov	r5, r3
 80083d0:	1e6b      	subs	r3, r5, #1
 80083d2:	4285      	cmp	r5, r0
 80083d4:	dcf8      	bgt.n	80083c8 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80083d6:	2200      	movs	r2, #0
 80083d8:	e006      	b.n	80083e8 <tiny_vsnprintf_like+0xf8>
 80083da:	4643      	mov	r3, r8
 80083dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80083e0:	f804 1b01 	strb.w	r1, [r4], #1
 80083e4:	3201      	adds	r2, #1
 80083e6:	4698      	mov	r8, r3
 80083e8:	4282      	cmp	r2, r0
 80083ea:	dbf6      	blt.n	80083da <tiny_vsnprintf_like+0xea>
 80083ec:	e78d      	b.n	800830a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80083ee:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80083f2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80083f4:	f019 0f02 	tst.w	r9, #2
 80083f8:	d02f      	beq.n	800845a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	1d11      	adds	r1, r2, #4
 80083fe:	9104      	str	r1, [sp, #16]
 8008400:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8008402:	1ba1      	subs	r1, r4, r6
 8008404:	f8cd 9008 	str.w	r9, [sp, #8]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	9001      	str	r0, [sp, #4]
 800840e:	9500      	str	r5, [sp, #0]
 8008410:	eba8 0101 	sub.w	r1, r8, r1
 8008414:	4620      	mov	r0, r4
 8008416:	f7ff fee1 	bl	80081dc <ee_number>
 800841a:	4604      	mov	r4, r0
 800841c:	e775      	b.n	800830a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800841e:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8008422:	230a      	movs	r3, #10
 8008424:	e7e6      	b.n	80083f4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8008426:	2a25      	cmp	r2, #37	; 0x25
 8008428:	d002      	beq.n	8008430 <tiny_vsnprintf_like+0x140>
 800842a:	2325      	movs	r3, #37	; 0x25
 800842c:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008430:	1ba3      	subs	r3, r4, r6
 8008432:	4598      	cmp	r8, r3
 8008434:	dd0f      	ble.n	8008456 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8008436:	9b05      	ldr	r3, [sp, #20]
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	b13a      	cbz	r2, 800844c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800843c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008440:	1ba3      	subs	r3, r4, r6
 8008442:	4598      	cmp	r8, r3
 8008444:	f73f af61 	bgt.w	800830a <tiny_vsnprintf_like+0x1a>
    base = 10;
 8008448:	230a      	movs	r3, #10
    if (qualifier == 'l')
 800844a:	e7d3      	b.n	80083f4 <tiny_vsnprintf_like+0x104>
          --fmt;
 800844c:	3b01      	subs	r3, #1
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	e7f6      	b.n	8008440 <tiny_vsnprintf_like+0x150>
        base = 16;
 8008452:	2310      	movs	r3, #16
 8008454:	e7ce      	b.n	80083f4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8008456:	230a      	movs	r3, #10
 8008458:	e7cc      	b.n	80083f4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	1d11      	adds	r1, r2, #4
 800845e:	9104      	str	r1, [sp, #16]
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	e7ce      	b.n	8008402 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8008464:	2300      	movs	r3, #0
 8008466:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8008468:	1ba0      	subs	r0, r4, r6
}
 800846a:	b007      	add	sp, #28
 800846c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8008470:	2000      	movs	r0, #0
 8008472:	e7fa      	b.n	800846a <tiny_vsnprintf_like+0x17a>
 8008474:	08008d48 	.word	0x08008d48

08008478 <__libc_init_array>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	4d0d      	ldr	r5, [pc, #52]	; (80084b0 <__libc_init_array+0x38>)
 800847c:	4c0d      	ldr	r4, [pc, #52]	; (80084b4 <__libc_init_array+0x3c>)
 800847e:	1b64      	subs	r4, r4, r5
 8008480:	10a4      	asrs	r4, r4, #2
 8008482:	2600      	movs	r6, #0
 8008484:	42a6      	cmp	r6, r4
 8008486:	d109      	bne.n	800849c <__libc_init_array+0x24>
 8008488:	4d0b      	ldr	r5, [pc, #44]	; (80084b8 <__libc_init_array+0x40>)
 800848a:	4c0c      	ldr	r4, [pc, #48]	; (80084bc <__libc_init_array+0x44>)
 800848c:	f000 f82e 	bl	80084ec <_init>
 8008490:	1b64      	subs	r4, r4, r5
 8008492:	10a4      	asrs	r4, r4, #2
 8008494:	2600      	movs	r6, #0
 8008496:	42a6      	cmp	r6, r4
 8008498:	d105      	bne.n	80084a6 <__libc_init_array+0x2e>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a0:	4798      	blx	r3
 80084a2:	3601      	adds	r6, #1
 80084a4:	e7ee      	b.n	8008484 <__libc_init_array+0xc>
 80084a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084aa:	4798      	blx	r3
 80084ac:	3601      	adds	r6, #1
 80084ae:	e7f2      	b.n	8008496 <__libc_init_array+0x1e>
 80084b0:	08008d58 	.word	0x08008d58
 80084b4:	08008d58 	.word	0x08008d58
 80084b8:	08008d58 	.word	0x08008d58
 80084bc:	08008d5c 	.word	0x08008d5c

080084c0 <memcpy>:
 80084c0:	440a      	add	r2, r1
 80084c2:	4291      	cmp	r1, r2
 80084c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80084c8:	d100      	bne.n	80084cc <memcpy+0xc>
 80084ca:	4770      	bx	lr
 80084cc:	b510      	push	{r4, lr}
 80084ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d1f9      	bne.n	80084ce <memcpy+0xe>
 80084da:	bd10      	pop	{r4, pc}

080084dc <memset>:
 80084dc:	4402      	add	r2, r0
 80084de:	4603      	mov	r3, r0
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d100      	bne.n	80084e6 <memset+0xa>
 80084e4:	4770      	bx	lr
 80084e6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ea:	e7f9      	b.n	80084e0 <memset+0x4>

080084ec <_init>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr

080084f8 <_fini>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr
 8008504:	0000      	movs	r0, r0
	...
