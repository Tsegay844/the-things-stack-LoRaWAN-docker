
BB-STM32WLE-WAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fef0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08020030  08020030  00030030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c8c  08020c8c  00040a98  2**0
                  CONTENTS
  4 .ARM          00000008  08020c8c  08020c8c  00030c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020c94  08020c94  00040a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020c94  08020c94  00030c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c9c  08020c9c  00030c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a98  20000000  08020ca0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001348  20000a98  08021738  00040a98  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  08021738  00041de0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00040a98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004846c  00000000  00000000  00040ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ea0  00000000  00000000  00088f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003950  00000000  00000000  00091dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035e8  00000000  00000000  00095720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d4a  00000000  00000000  00098d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e836  00000000  00000000  000c0a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6abf  00000000  00000000  000ff288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d5d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001068c  00000000  00000000  001d5d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000a98 	.word	0x20000a98
 800015c:	00000000 	.word	0x00000000
 8000160:	08020018 	.word	0x08020018

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000a9c 	.word	0x20000a9c
 800017c:	08020018 	.word	0x08020018

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_ldivmod>:
 80010a0:	b97b      	cbnz	r3, 80010c2 <__aeabi_ldivmod+0x22>
 80010a2:	b972      	cbnz	r2, 80010c2 <__aeabi_ldivmod+0x22>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bfbe      	ittt	lt
 80010a8:	2000      	movlt	r0, #0
 80010aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80010ae:	e006      	blt.n	80010be <__aeabi_ldivmod+0x1e>
 80010b0:	bf08      	it	eq
 80010b2:	2800      	cmpeq	r0, #0
 80010b4:	bf1c      	itt	ne
 80010b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80010ba:	f04f 30ff 	movne.w	r0, #4294967295
 80010be:	f000 b9bf 	b.w	8001440 <__aeabi_idiv0>
 80010c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ca:	2900      	cmp	r1, #0
 80010cc:	db09      	blt.n	80010e2 <__aeabi_ldivmod+0x42>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db1a      	blt.n	8001108 <__aeabi_ldivmod+0x68>
 80010d2:	f000 f84d 	bl	8001170 <__udivmoddi4>
 80010d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010de:	b004      	add	sp, #16
 80010e0:	4770      	bx	lr
 80010e2:	4240      	negs	r0, r0
 80010e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db1b      	blt.n	8001124 <__aeabi_ldivmod+0x84>
 80010ec:	f000 f840 	bl	8001170 <__udivmoddi4>
 80010f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f8:	b004      	add	sp, #16
 80010fa:	4240      	negs	r0, r0
 80010fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001100:	4252      	negs	r2, r2
 8001102:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001106:	4770      	bx	lr
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	f000 f82f 	bl	8001170 <__udivmoddi4>
 8001112:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111a:	b004      	add	sp, #16
 800111c:	4240      	negs	r0, r0
 800111e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001122:	4770      	bx	lr
 8001124:	4252      	negs	r2, r2
 8001126:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800112a:	f000 f821 	bl	8001170 <__udivmoddi4>
 800112e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001136:	b004      	add	sp, #16
 8001138:	4252      	negs	r2, r2
 800113a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113e:	4770      	bx	lr

08001140 <__aeabi_uldivmod>:
 8001140:	b953      	cbnz	r3, 8001158 <__aeabi_uldivmod+0x18>
 8001142:	b94a      	cbnz	r2, 8001158 <__aeabi_uldivmod+0x18>
 8001144:	2900      	cmp	r1, #0
 8001146:	bf08      	it	eq
 8001148:	2800      	cmpeq	r0, #0
 800114a:	bf1c      	itt	ne
 800114c:	f04f 31ff 	movne.w	r1, #4294967295
 8001150:	f04f 30ff 	movne.w	r0, #4294967295
 8001154:	f000 b974 	b.w	8001440 <__aeabi_idiv0>
 8001158:	f1ad 0c08 	sub.w	ip, sp, #8
 800115c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001160:	f000 f806 	bl	8001170 <__udivmoddi4>
 8001164:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9e08      	ldr	r6, [sp, #32]
 8001176:	460d      	mov	r5, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14d      	bne.n	800121c <__udivmoddi4+0xac>
 8001180:	428a      	cmp	r2, r1
 8001182:	4694      	mov	ip, r2
 8001184:	d968      	bls.n	8001258 <__udivmoddi4+0xe8>
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b152      	cbz	r2, 80011a2 <__udivmoddi4+0x32>
 800118c:	fa01 f302 	lsl.w	r3, r1, r2
 8001190:	f1c2 0120 	rsb	r1, r2, #32
 8001194:	fa20 f101 	lsr.w	r1, r0, r1
 8001198:	fa0c fc02 	lsl.w	ip, ip, r2
 800119c:	ea41 0803 	orr.w	r8, r1, r3
 80011a0:	4094      	lsls	r4, r2
 80011a2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011a6:	0c21      	lsrs	r1, r4, #16
 80011a8:	fbb8 fef5 	udiv	lr, r8, r5
 80011ac:	fa1f f78c 	uxth.w	r7, ip
 80011b0:	fb05 831e 	mls	r3, r5, lr, r8
 80011b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011b8:	fb0e f107 	mul.w	r1, lr, r7
 80011bc:	4299      	cmp	r1, r3
 80011be:	d90b      	bls.n	80011d8 <__udivmoddi4+0x68>
 80011c0:	eb1c 0303 	adds.w	r3, ip, r3
 80011c4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011c8:	f080 811e 	bcs.w	8001408 <__udivmoddi4+0x298>
 80011cc:	4299      	cmp	r1, r3
 80011ce:	f240 811b 	bls.w	8001408 <__udivmoddi4+0x298>
 80011d2:	f1ae 0e02 	sub.w	lr, lr, #2
 80011d6:	4463      	add	r3, ip
 80011d8:	1a5b      	subs	r3, r3, r1
 80011da:	b2a4      	uxth	r4, r4
 80011dc:	fbb3 f0f5 	udiv	r0, r3, r5
 80011e0:	fb05 3310 	mls	r3, r5, r0, r3
 80011e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011e8:	fb00 f707 	mul.w	r7, r0, r7
 80011ec:	42a7      	cmp	r7, r4
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x96>
 80011f0:	eb1c 0404 	adds.w	r4, ip, r4
 80011f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f8:	f080 8108 	bcs.w	800140c <__udivmoddi4+0x29c>
 80011fc:	42a7      	cmp	r7, r4
 80011fe:	f240 8105 	bls.w	800140c <__udivmoddi4+0x29c>
 8001202:	4464      	add	r4, ip
 8001204:	3802      	subs	r0, #2
 8001206:	1be4      	subs	r4, r4, r7
 8001208:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800120c:	2100      	movs	r1, #0
 800120e:	b11e      	cbz	r6, 8001218 <__udivmoddi4+0xa8>
 8001210:	40d4      	lsrs	r4, r2
 8001212:	2300      	movs	r3, #0
 8001214:	e9c6 4300 	strd	r4, r3, [r6]
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	428b      	cmp	r3, r1
 800121e:	d908      	bls.n	8001232 <__udivmoddi4+0xc2>
 8001220:	2e00      	cmp	r6, #0
 8001222:	f000 80ee 	beq.w	8001402 <__udivmoddi4+0x292>
 8001226:	2100      	movs	r1, #0
 8001228:	e9c6 0500 	strd	r0, r5, [r6]
 800122c:	4608      	mov	r0, r1
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14a      	bne.n	80012d0 <__udivmoddi4+0x160>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xd4>
 800123e:	4282      	cmp	r2, r0
 8001240:	f200 80f9 	bhi.w	8001436 <__udivmoddi4+0x2c6>
 8001244:	1a84      	subs	r4, r0, r2
 8001246:	eb65 0303 	sbc.w	r3, r5, r3
 800124a:	2001      	movs	r0, #1
 800124c:	4698      	mov	r8, r3
 800124e:	2e00      	cmp	r6, #0
 8001250:	d0e2      	beq.n	8001218 <__udivmoddi4+0xa8>
 8001252:	e9c6 4800 	strd	r4, r8, [r6]
 8001256:	e7df      	b.n	8001218 <__udivmoddi4+0xa8>
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xec>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	2a00      	cmp	r2, #0
 8001262:	f040 8091 	bne.w	8001388 <__udivmoddi4+0x218>
 8001266:	eba1 050c 	sub.w	r5, r1, ip
 800126a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800126e:	fa1f fe8c 	uxth.w	lr, ip
 8001272:	2101      	movs	r1, #1
 8001274:	fbb5 f3f7 	udiv	r3, r5, r7
 8001278:	fb07 5013 	mls	r0, r7, r3, r5
 800127c:	0c25      	lsrs	r5, r4, #16
 800127e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001282:	fb0e f003 	mul.w	r0, lr, r3
 8001286:	42a8      	cmp	r0, r5
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x12c>
 800128a:	eb1c 0505 	adds.w	r5, ip, r5
 800128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x12a>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f200 80cb 	bhi.w	8001430 <__udivmoddi4+0x2c0>
 800129a:	4643      	mov	r3, r8
 800129c:	1a2d      	subs	r5, r5, r0
 800129e:	b2a4      	uxth	r4, r4
 80012a0:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a4:	fb07 5510 	mls	r5, r7, r0, r5
 80012a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012ac:	fb0e fe00 	mul.w	lr, lr, r0
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x156>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x154>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	f200 80bb 	bhi.w	800143a <__udivmoddi4+0x2ca>
 80012c4:	4628      	mov	r0, r5
 80012c6:	eba4 040e 	sub.w	r4, r4, lr
 80012ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ce:	e79e      	b.n	800120e <__udivmoddi4+0x9e>
 80012d0:	f1c1 0720 	rsb	r7, r1, #32
 80012d4:	408b      	lsls	r3, r1
 80012d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012da:	ea4c 0c03 	orr.w	ip, ip, r3
 80012de:	fa20 f407 	lsr.w	r4, r0, r7
 80012e2:	fa05 f301 	lsl.w	r3, r5, r1
 80012e6:	431c      	orrs	r4, r3
 80012e8:	40fd      	lsrs	r5, r7
 80012ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012ee:	fa00 f301 	lsl.w	r3, r0, r1
 80012f2:	fbb5 f8f9 	udiv	r8, r5, r9
 80012f6:	0c20      	lsrs	r0, r4, #16
 80012f8:	fa1f fe8c 	uxth.w	lr, ip
 80012fc:	fb09 5518 	mls	r5, r9, r8, r5
 8001300:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001304:	fb08 f00e 	mul.w	r0, r8, lr
 8001308:	42a8      	cmp	r0, r5
 800130a:	fa02 f201 	lsl.w	r2, r2, r1
 800130e:	d90b      	bls.n	8001328 <__udivmoddi4+0x1b8>
 8001310:	eb1c 0505 	adds.w	r5, ip, r5
 8001314:	f108 3aff 	add.w	sl, r8, #4294967295
 8001318:	f080 8088 	bcs.w	800142c <__udivmoddi4+0x2bc>
 800131c:	42a8      	cmp	r0, r5
 800131e:	f240 8085 	bls.w	800142c <__udivmoddi4+0x2bc>
 8001322:	f1a8 0802 	sub.w	r8, r8, #2
 8001326:	4465      	add	r5, ip
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	b2a4      	uxth	r4, r4
 800132c:	fbb5 f0f9 	udiv	r0, r5, r9
 8001330:	fb09 5510 	mls	r5, r9, r0, r5
 8001334:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001338:	fb00 fe0e 	mul.w	lr, r0, lr
 800133c:	45ae      	cmp	lr, r5
 800133e:	d908      	bls.n	8001352 <__udivmoddi4+0x1e2>
 8001340:	eb1c 0505 	adds.w	r5, ip, r5
 8001344:	f100 34ff 	add.w	r4, r0, #4294967295
 8001348:	d26c      	bcs.n	8001424 <__udivmoddi4+0x2b4>
 800134a:	45ae      	cmp	lr, r5
 800134c:	d96a      	bls.n	8001424 <__udivmoddi4+0x2b4>
 800134e:	3802      	subs	r0, #2
 8001350:	4465      	add	r5, ip
 8001352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001356:	fba0 9402 	umull	r9, r4, r0, r2
 800135a:	eba5 050e 	sub.w	r5, r5, lr
 800135e:	42a5      	cmp	r5, r4
 8001360:	46c8      	mov	r8, r9
 8001362:	46a6      	mov	lr, r4
 8001364:	d356      	bcc.n	8001414 <__udivmoddi4+0x2a4>
 8001366:	d053      	beq.n	8001410 <__udivmoddi4+0x2a0>
 8001368:	b15e      	cbz	r6, 8001382 <__udivmoddi4+0x212>
 800136a:	ebb3 0208 	subs.w	r2, r3, r8
 800136e:	eb65 050e 	sbc.w	r5, r5, lr
 8001372:	fa05 f707 	lsl.w	r7, r5, r7
 8001376:	fa22 f301 	lsr.w	r3, r2, r1
 800137a:	40cd      	lsrs	r5, r1
 800137c:	431f      	orrs	r7, r3
 800137e:	e9c6 7500 	strd	r7, r5, [r6]
 8001382:	2100      	movs	r1, #0
 8001384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001388:	f1c2 0320 	rsb	r3, r2, #32
 800138c:	fa20 f103 	lsr.w	r1, r0, r3
 8001390:	fa0c fc02 	lsl.w	ip, ip, r2
 8001394:	fa25 f303 	lsr.w	r3, r5, r3
 8001398:	4095      	lsls	r5, r2
 800139a:	430d      	orrs	r5, r1
 800139c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013a0:	fa1f fe8c 	uxth.w	lr, ip
 80013a4:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a8:	fb07 3011 	mls	r0, r7, r1, r3
 80013ac:	0c2b      	lsrs	r3, r5, #16
 80013ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013b2:	fb01 f00e 	mul.w	r0, r1, lr
 80013b6:	4298      	cmp	r0, r3
 80013b8:	fa04 f402 	lsl.w	r4, r4, r2
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x260>
 80013be:	eb1c 0303 	adds.w	r3, ip, r3
 80013c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c6:	d22f      	bcs.n	8001428 <__udivmoddi4+0x2b8>
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d92d      	bls.n	8001428 <__udivmoddi4+0x2b8>
 80013cc:	3902      	subs	r1, #2
 80013ce:	4463      	add	r3, ip
 80013d0:	1a1b      	subs	r3, r3, r0
 80013d2:	b2ad      	uxth	r5, r5
 80013d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80013d8:	fb07 3310 	mls	r3, r7, r0, r3
 80013dc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013e0:	fb00 f30e 	mul.w	r3, r0, lr
 80013e4:	42ab      	cmp	r3, r5
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x28a>
 80013e8:	eb1c 0505 	adds.w	r5, ip, r5
 80013ec:	f100 38ff 	add.w	r8, r0, #4294967295
 80013f0:	d216      	bcs.n	8001420 <__udivmoddi4+0x2b0>
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	d914      	bls.n	8001420 <__udivmoddi4+0x2b0>
 80013f6:	3802      	subs	r0, #2
 80013f8:	4465      	add	r5, ip
 80013fa:	1aed      	subs	r5, r5, r3
 80013fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001400:	e738      	b.n	8001274 <__udivmoddi4+0x104>
 8001402:	4631      	mov	r1, r6
 8001404:	4630      	mov	r0, r6
 8001406:	e707      	b.n	8001218 <__udivmoddi4+0xa8>
 8001408:	4686      	mov	lr, r0
 800140a:	e6e5      	b.n	80011d8 <__udivmoddi4+0x68>
 800140c:	4618      	mov	r0, r3
 800140e:	e6fa      	b.n	8001206 <__udivmoddi4+0x96>
 8001410:	454b      	cmp	r3, r9
 8001412:	d2a9      	bcs.n	8001368 <__udivmoddi4+0x1f8>
 8001414:	ebb9 0802 	subs.w	r8, r9, r2
 8001418:	eb64 0e0c 	sbc.w	lr, r4, ip
 800141c:	3801      	subs	r0, #1
 800141e:	e7a3      	b.n	8001368 <__udivmoddi4+0x1f8>
 8001420:	4640      	mov	r0, r8
 8001422:	e7ea      	b.n	80013fa <__udivmoddi4+0x28a>
 8001424:	4620      	mov	r0, r4
 8001426:	e794      	b.n	8001352 <__udivmoddi4+0x1e2>
 8001428:	4641      	mov	r1, r8
 800142a:	e7d1      	b.n	80013d0 <__udivmoddi4+0x260>
 800142c:	46d0      	mov	r8, sl
 800142e:	e77b      	b.n	8001328 <__udivmoddi4+0x1b8>
 8001430:	3b02      	subs	r3, #2
 8001432:	4465      	add	r5, ip
 8001434:	e732      	b.n	800129c <__udivmoddi4+0x12c>
 8001436:	4608      	mov	r0, r1
 8001438:	e709      	b.n	800124e <__udivmoddi4+0xde>
 800143a:	4464      	add	r4, ip
 800143c:	3802      	subs	r0, #2
 800143e:	e742      	b.n	80012c6 <__udivmoddi4+0x156>

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	715a      	strb	r2, [r3, #5]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800147a:	b580      	push	{r7, lr}
 800147c:	b08a      	sub	sp, #40	; 0x28
 800147e:	af04      	add	r7, sp, #16
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	460b      	mov	r3, r1
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001494:	7afb      	ldrb	r3, [r7, #11]
 8001496:	b29a      	uxth	r2, r3
 8001498:	8af9      	ldrh	r1, [r7, #22]
 800149a:	f241 3388 	movw	r3, #5000	; 0x1388
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	f004 fd14 	bl	8005ed8 <HAL_I2C_Mem_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10b      	bne.n	80014ce <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80014b6:	7d7b      	ldrb	r3, [r7, #21]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7d3b      	ldrb	r3, [r7, #20]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	801a      	strh	r2, [r3, #0]
		return true;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <read_register16+0x56>
	} else
		return false;
 80014ce:	2300      	movs	r3, #0

}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	; 0x2c
 80014dc:	af04      	add	r7, sp, #16
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	72fb      	strb	r3, [r7, #11]
 80014e8:	4613      	mov	r3, r2
 80014ea:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014f8:	7afb      	ldrb	r3, [r7, #11]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	8af9      	ldrh	r1, [r7, #22]
 8001502:	f241 3488 	movw	r4, #5000	; 0x1388
 8001506:	9402      	str	r4, [sp, #8]
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	f004 fce2 	bl	8005ed8 <HAL_I2C_Mem_Read>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <read_data+0x46>
		return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <read_data+0x48>
	else
		return 1;
 800151e:	2301      	movs	r3, #1

}
 8001520:	4618      	mov	r0, r3
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd90      	pop	{r4, r7, pc}

08001528 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	2188      	movs	r1, #136	; 0x88
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff9f 	bl	800147a <read_register16>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06f      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3302      	adds	r3, #2
 8001546:	461a      	mov	r2, r3
 8001548:	218a      	movs	r1, #138	; 0x8a
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff95 	bl	800147a <read_register16>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d065      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
 800155a:	461a      	mov	r2, r3
 800155c:	218c      	movs	r1, #140	; 0x8c
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff8b 	bl	800147a <read_register16>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d05b      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3306      	adds	r3, #6
 800156e:	461a      	mov	r2, r3
 8001570:	218e      	movs	r1, #142	; 0x8e
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff81 	bl	800147a <read_register16>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d051      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3308      	adds	r3, #8
 8001582:	461a      	mov	r2, r3
 8001584:	2190      	movs	r1, #144	; 0x90
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ff77 	bl	800147a <read_register16>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d047      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	330a      	adds	r3, #10
 8001596:	461a      	mov	r2, r3
 8001598:	2192      	movs	r1, #146	; 0x92
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff6d 	bl	800147a <read_register16>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03d      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	330c      	adds	r3, #12
 80015aa:	461a      	mov	r2, r3
 80015ac:	2194      	movs	r1, #148	; 0x94
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff63 	bl	800147a <read_register16>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d033      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	330e      	adds	r3, #14
 80015be:	461a      	mov	r2, r3
 80015c0:	2196      	movs	r1, #150	; 0x96
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff59 	bl	800147a <read_register16>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d029      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3310      	adds	r3, #16
 80015d2:	461a      	mov	r2, r3
 80015d4:	2198      	movs	r1, #152	; 0x98
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff4f 	bl	800147a <read_register16>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01f      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3312      	adds	r3, #18
 80015e6:	461a      	mov	r2, r3
 80015e8:	219a      	movs	r1, #154	; 0x9a
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff45 	bl	800147a <read_register16>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3314      	adds	r3, #20
 80015fa:	461a      	mov	r2, r3
 80015fc:	219c      	movs	r1, #156	; 0x9c
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff3b 	bl	800147a <read_register16>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800160e:	461a      	mov	r2, r3
 8001610:	219e      	movs	r1, #158	; 0x9e
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff31 	bl	800147a <read_register16>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <read_calibration_data+0xfa>

		return true;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <read_calibration_data+0xfc>
	}

	return false;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f103 0218 	add.w	r2, r3, #24
 800163a:	2301      	movs	r3, #1
 800163c:	21a1      	movs	r1, #161	; 0xa1
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff4a 	bl	80014d8 <read_data>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d14b      	bne.n	80016e2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	331a      	adds	r3, #26
 800164e:	461a      	mov	r2, r3
 8001650:	21e1      	movs	r1, #225	; 0xe1
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff11 	bl	800147a <read_register16>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d041      	beq.n	80016e2 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 021c 	add.w	r2, r3, #28
 8001664:	2301      	movs	r3, #1
 8001666:	21e3      	movs	r1, #227	; 0xe3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff35 	bl	80014d8 <read_data>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d136      	bne.n	80016e2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001674:	f107 030e 	add.w	r3, r7, #14
 8001678:	461a      	mov	r2, r3
 800167a:	21e4      	movs	r1, #228	; 0xe4
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fefc 	bl	800147a <read_register16>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d02c      	beq.n	80016e2 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	461a      	mov	r2, r3
 800168e:	21e5      	movs	r1, #229	; 0xe5
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fef2 	bl	800147a <read_register16>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d022      	beq.n	80016e2 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80016a2:	2301      	movs	r3, #1
 80016a4:	21e7      	movs	r1, #231	; 0xe7
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff16 	bl	80014d8 <read_data>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d117      	bne.n	80016e2 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80016bc:	b21a      	sxth	r2, r3
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	121b      	asrs	r3, r3, #8
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b21a      	sxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	841a      	strh	r2, [r3, #32]

		return true;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <read_hum_calibration_data+0xb8>
	}

	return false;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
 80016f8:	4613      	mov	r3, r2
 80016fa:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	b29a      	uxth	r2, r3
 800170c:	89f9      	ldrh	r1, [r7, #14]
 800170e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	2301      	movs	r3, #1
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2301      	movs	r3, #1
 800171e:	f004 fac7 	bl	8005cb0 <HAL_I2C_Mem_Write>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <write_register8+0x40>
		return false;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <write_register8+0x42>
	else
		return true;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001744:	2b76      	cmp	r3, #118	; 0x76
 8001746:	d005      	beq.n	8001754 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800174c:	2b77      	cmp	r3, #119	; 0x77
 800174e:	d001      	beq.n	8001754 <bmp280_init+0x1e>

		return false;
 8001750:	2300      	movs	r3, #0
 8001752:	e099      	b.n	8001888 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800175a:	2301      	movs	r3, #1
 800175c:	21d0      	movs	r1, #208	; 0xd0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff feba 	bl	80014d8 <read_data>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bmp280_init+0x38>
		return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e08c      	b.n	8001888 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001774:	2b58      	cmp	r3, #88	; 0x58
 8001776:	d006      	beq.n	8001786 <bmp280_init+0x50>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800177e:	2b60      	cmp	r3, #96	; 0x60
 8001780:	d001      	beq.n	8001786 <bmp280_init+0x50>

		return false;
 8001782:	2300      	movs	r3, #0
 8001784:	e080      	b.n	8001888 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001786:	22b6      	movs	r2, #182	; 0xb6
 8001788:	21e0      	movs	r1, #224	; 0xe0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffae 	bl	80016ec <write_register8>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <bmp280_init+0x64>
		return false;
 8001796:	2300      	movs	r3, #0
 8001798:	e076      	b.n	8001888 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	2301      	movs	r3, #1
 80017a0:	21f3      	movs	r1, #243	; 0xf3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe98 	bl	80014d8 <read_data>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f5      	bne.n	800179a <bmp280_init+0x64>
				&& (status & 1) == 0)
 80017ae:	7b3b      	ldrb	r3, [r7, #12]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff feb5 	bl	8001528 <read_calibration_data>
 80017be:	4603      	mov	r3, r0
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d100      	bne.n	80017cc <bmp280_init+0x96>
 80017ca:	e001      	b.n	80017d0 <bmp280_init+0x9a>
		return false;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e05b      	b.n	8001888 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017d6:	2b60      	cmp	r3, #96	; 0x60
 80017d8:	d10a      	bne.n	80017f0 <bmp280_init+0xba>
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff26 	bl	800162c <read_hum_calibration_data>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f083 0301 	eor.w	r3, r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <bmp280_init+0xba>
		return false;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e04b      	b.n	8001888 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	795b      	ldrb	r3, [r3, #5]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	b25a      	sxtb	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	b25b      	sxtb	r3, r3
 8001804:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	461a      	mov	r2, r3
 800180a:	21f5      	movs	r1, #245	; 0xf5
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff6d 	bl	80016ec <write_register8>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <bmp280_init+0xe6>
		return false;
 8001818:	2300      	movs	r3, #0
 800181a:	e035      	b.n	8001888 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	78db      	ldrb	r3, [r3, #3]
 800182e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001830:	b25a      	sxtb	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	b25b      	sxtb	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b25a      	sxtb	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b25b      	sxtb	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001848:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001850:	2b60      	cmp	r3, #96	; 0x60
 8001852:	d10d      	bne.n	8001870 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	461a      	mov	r2, r3
 800185e:	21f2      	movs	r1, #242	; 0xf2
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff43 	bl	80016ec <write_register8>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <bmp280_init+0x13a>
			return false;
 800186c:	2300      	movs	r3, #0
 800186e:	e00b      	b.n	8001888 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	461a      	mov	r2, r3
 8001874:	21f4      	movs	r1, #244	; 0xf4
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff38 	bl	80016ec <write_register8>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <bmp280_init+0x150>
		return false;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <bmp280_init+0x152>
	}

	return true;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	10da      	asrs	r2, r3, #3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80018b2:	12db      	asrs	r3, r3, #11
 80018b4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	111b      	asrs	r3, r3, #4
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	1112      	asrs	r2, r2, #4
 80018c4:	68f9      	ldr	r1, [r7, #12]
 80018c6:	8809      	ldrh	r1, [r1, #0]
 80018c8:	1a52      	subs	r2, r2, r1
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80018da:	139b      	asrs	r3, r3, #14
 80018dc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	441a      	add	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3380      	adds	r3, #128	; 0x80
 80018f4:	121b      	asrs	r3, r3, #8
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b0cc      	sub	sp, #304	; 0x130
 8001906:	af00      	add	r7, sp, #0
 8001908:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 800190c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001910:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001918:	17da      	asrs	r2, r3, #31
 800191a:	461c      	mov	r4, r3
 800191c:	4615      	mov	r5, r2
 800191e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001922:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001926:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800192a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800192e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001932:	fb03 f102 	mul.w	r1, r3, r2
 8001936:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800193a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	18ca      	adds	r2, r1, r3
 8001944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001948:	fba3 8903 	umull	r8, r9, r3, r3
 800194c:	eb02 0309 	add.w	r3, r2, r9
 8001950:	4699      	mov	r9, r3
 8001952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001956:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800195a:	b21b      	sxth	r3, r3
 800195c:	17da      	asrs	r2, r3, #31
 800195e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001962:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001966:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800196a:	4603      	mov	r3, r0
 800196c:	fb03 f209 	mul.w	r2, r3, r9
 8001970:	460b      	mov	r3, r1
 8001972:	fb08 f303 	mul.w	r3, r8, r3
 8001976:	4413      	add	r3, r2
 8001978:	4602      	mov	r2, r0
 800197a:	fba8 2102 	umull	r2, r1, r8, r2
 800197e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001982:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800198a:	4413      	add	r3, r2
 800198c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001990:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001994:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001998:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800199c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	17da      	asrs	r2, r3, #31
 80019a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80019ac:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80019b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019b4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80019b8:	462a      	mov	r2, r5
 80019ba:	fb02 f203 	mul.w	r2, r2, r3
 80019be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019c2:	4621      	mov	r1, r4
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	441a      	add	r2, r3
 80019ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019ce:	4621      	mov	r1, r4
 80019d0:	fba3 3101 	umull	r3, r1, r3, r1
 80019d4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80019d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019e0:	18d3      	adds	r3, r2, r3
 80019e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80019f2:	462b      	mov	r3, r5
 80019f4:	0459      	lsls	r1, r3, #17
 80019f6:	4622      	mov	r2, r4
 80019f8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019fc:	4623      	mov	r3, r4
 80019fe:	0458      	lsls	r0, r3, #17
 8001a00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a04:	1814      	adds	r4, r2, r0
 8001a06:	643c      	str	r4, [r7, #64]	; 0x40
 8001a08:	414b      	adcs	r3, r1
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a10:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a18:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	17da      	asrs	r2, r3, #31
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a34:	00d9      	lsls	r1, r3, #3
 8001a36:	2000      	movs	r0, #0
 8001a38:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a3c:	1814      	adds	r4, r2, r0
 8001a3e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001a40:	414b      	adcs	r3, r1
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a44:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001a48:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a54:	fb03 f102 	mul.w	r1, r3, r2
 8001a58:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	18ca      	adds	r2, r1, r3
 8001a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a6a:	fba3 3103 	umull	r3, r1, r3, r3
 8001a6e:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a7a:	18d3      	adds	r3, r2, r3
 8001a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	17da      	asrs	r2, r3, #31
 8001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001a94:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001a98:	4622      	mov	r2, r4
 8001a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	464d      	mov	r5, r9
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4603      	mov	r3, r0
 8001aac:	fb03 f305 	mul.w	r3, r3, r5
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	fba2 2101 	umull	r2, r1, r2, r1
 8001aba:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001abe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001ac2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001ad8:	4623      	mov	r3, r4
 8001ada:	0a18      	lsrs	r0, r3, #8
 8001adc:	462a      	mov	r2, r5
 8001ade:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001aea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001af6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001afe:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001b02:	464a      	mov	r2, r9
 8001b04:	fb02 f203 	mul.w	r2, r2, r3
 8001b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b0c:	4644      	mov	r4, r8
 8001b0e:	fb04 f303 	mul.w	r3, r4, r3
 8001b12:	441a      	add	r2, r3
 8001b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b18:	4644      	mov	r4, r8
 8001b1a:	fba3 3404 	umull	r3, r4, r3, r4
 8001b1e:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8001b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001b2a:	18d3      	adds	r3, r2, r3
 8001b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001b3c:	464c      	mov	r4, r9
 8001b3e:	0323      	lsls	r3, r4, #12
 8001b40:	46c4      	mov	ip, r8
 8001b42:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b46:	4644      	mov	r4, r8
 8001b48:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001b4a:	1884      	adds	r4, r0, r2
 8001b4c:	633c      	str	r4, [r7, #48]	; 0x30
 8001b4e:	eb41 0303 	adc.w	r3, r1, r3
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
 8001b54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001b58:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001b5c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b60:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b64:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001b68:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b70:	88db      	ldrh	r3, [r3, #6]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2200      	movs	r2, #0
 8001b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b7a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b7e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001b82:	4622      	mov	r2, r4
 8001b84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001b88:	4641      	mov	r1, r8
 8001b8a:	fb01 f202 	mul.w	r2, r1, r2
 8001b8e:	464d      	mov	r5, r9
 8001b90:	4618      	mov	r0, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	4603      	mov	r3, r0
 8001b96:	fb03 f305 	mul.w	r3, r3, r5
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	fba2 2101 	umull	r2, r1, r2, r1
 8001ba4:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001ba8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001bac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	104a      	asrs	r2, r1, #1
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	17cb      	asrs	r3, r1, #31
 8001bca:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001bce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	d101      	bne.n	8001bda <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e146      	b.n	8001e68 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bde:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001bec:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001bf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bf4:	105b      	asrs	r3, r3, #1
 8001bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bfe:	07db      	lsls	r3, r3, #31
 8001c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c08:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	1aa4      	subs	r4, r4, r2
 8001c10:	67bc      	str	r4, [r7, #120]	; 0x78
 8001c12:	eb61 0303 	sbc.w	r3, r1, r3
 8001c16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c18:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	462b      	mov	r3, r5
 8001c20:	1891      	adds	r1, r2, r2
 8001c22:	6239      	str	r1, [r7, #32]
 8001c24:	415b      	adcs	r3, r3
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	1851      	adds	r1, r2, r1
 8001c30:	61b9      	str	r1, [r7, #24]
 8001c32:	4629      	mov	r1, r5
 8001c34:	414b      	adcs	r3, r1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c44:	4649      	mov	r1, r9
 8001c46:	018b      	lsls	r3, r1, #6
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4e:	4641      	mov	r1, r8
 8001c50:	018a      	lsls	r2, r1, #6
 8001c52:	4641      	mov	r1, r8
 8001c54:	1889      	adds	r1, r1, r2
 8001c56:	6139      	str	r1, [r7, #16]
 8001c58:	4649      	mov	r1, r9
 8001c5a:	eb43 0101 	adc.w	r1, r3, r1
 8001c5e:	6179      	str	r1, [r7, #20]
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	008b      	lsls	r3, r1, #2
 8001c70:	46c4      	mov	ip, r8
 8001c72:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c76:	4641      	mov	r1, r8
 8001c78:	008a      	lsls	r2, r1, #2
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4622      	mov	r2, r4
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	460b      	mov	r3, r1
 8001c88:	462a      	mov	r2, r5
 8001c8a:	eb42 0303 	adc.w	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	008b      	lsls	r3, r1, #2
 8001ca0:	46c4      	mov	ip, r8
 8001ca2:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	008a      	lsls	r2, r1, #2
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4622      	mov	r2, r4
 8001cb2:	189b      	adds	r3, r3, r2
 8001cb4:	673b      	str	r3, [r7, #112]	; 0x70
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	460a      	mov	r2, r1
 8001cba:	eb42 0303 	adc.w	r3, r2, r3
 8001cbe:	677b      	str	r3, [r7, #116]	; 0x74
 8001cc0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001cc4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001cc8:	f7ff f9ea 	bl	80010a0 <__aeabi_ldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cd8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	17da      	asrs	r2, r3, #31
 8001ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ce2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ce4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0b50      	lsrs	r0, r2, #13
 8001cf2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cf6:	1359      	asrs	r1, r3, #13
 8001cf8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	fb00 f203 	mul.w	r2, r0, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	fb03 f301 	mul.w	r3, r3, r1
 8001d08:	4413      	add	r3, r2
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	fba2 2100 	umull	r2, r1, r2, r0
 8001d10:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001d14:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001d18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001d22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0b50      	lsrs	r0, r2, #13
 8001d30:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d34:	1359      	asrs	r1, r3, #13
 8001d36:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	fb00 f203 	mul.w	r2, r0, r3
 8001d40:	4623      	mov	r3, r4
 8001d42:	fb03 f301 	mul.w	r3, r3, r1
 8001d46:	4413      	add	r3, r2
 8001d48:	4622      	mov	r2, r4
 8001d4a:	fba2 2100 	umull	r2, r1, r2, r0
 8001d4e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001d52:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001d56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	0e4a      	lsrs	r2, r1, #25
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	460c      	mov	r4, r1
 8001d76:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d7a:	164b      	asrs	r3, r1, #25
 8001d7c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d84:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	17da      	asrs	r2, r3, #31
 8001d8c:	663b      	str	r3, [r7, #96]	; 0x60
 8001d8e:	667a      	str	r2, [r7, #100]	; 0x64
 8001d90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d98:	462a      	mov	r2, r5
 8001d9a:	fb02 f203 	mul.w	r2, r2, r3
 8001d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001da2:	4621      	mov	r1, r4
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dae:	4621      	mov	r1, r4
 8001db0:	fba2 2101 	umull	r2, r1, r2, r1
 8001db4:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001db8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001dbc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	0cca      	lsrs	r2, r1, #19
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	460c      	mov	r4, r1
 8001ddc:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001de0:	14cb      	asrs	r3, r1, #19
 8001de2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001de6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001dea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001dee:	1884      	adds	r4, r0, r2
 8001df0:	65bc      	str	r4, [r7, #88]	; 0x58
 8001df2:	eb41 0303 	adc.w	r3, r1, r3
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001df8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001dfc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001e00:	4621      	mov	r1, r4
 8001e02:	1889      	adds	r1, r1, r2
 8001e04:	6539      	str	r1, [r7, #80]	; 0x50
 8001e06:	4629      	mov	r1, r5
 8001e08:	eb43 0101 	adc.w	r1, r3, r1
 8001e0c:	6579      	str	r1, [r7, #84]	; 0x54
 8001e0e:	f04f 0000 	mov.w	r0, #0
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	0a18      	lsrs	r0, r3, #8
 8001e1e:	462a      	mov	r2, r5
 8001e20:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e24:	462b      	mov	r3, r5
 8001e26:	1219      	asrs	r1, r3, #8
 8001e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	17da      	asrs	r2, r3, #31
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001e44:	464c      	mov	r4, r9
 8001e46:	0123      	lsls	r3, r4, #4
 8001e48:	46c4      	mov	ip, r8
 8001e4a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e4e:	4644      	mov	r4, r8
 8001e50:	0122      	lsls	r2, r4, #4
 8001e52:	1884      	adds	r4, r0, r2
 8001e54:	603c      	str	r4, [r7, #0]
 8001e56:	eb41 0303 	adc.w	r3, r1, r3
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e60:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001e64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e74 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001e86:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	039a      	lsls	r2, r3, #14
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e92:	051b      	lsls	r3, r3, #20
 8001e94:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001eaa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fb01 f202 	mul.w	r2, r1, r2
 8001eba:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	7f09      	ldrb	r1, [r1, #28]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	6979      	ldr	r1, [r7, #20]
 8001ec4:	fb00 f101 	mul.w	r1, r0, r1
 8001ec8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001eca:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001ece:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ed2:	1292      	asrs	r2, r2, #10
 8001ed4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001ede:	fb01 f202 	mul.w	r2, r1, r2
 8001ee2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001ee6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	13db      	asrs	r3, r3, #15
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	13d2      	asrs	r2, r2, #15
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	7e12      	ldrb	r2, [r2, #24]
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f12:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001f1a:	bfa8      	it	ge
 8001f1c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001f20:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	131b      	asrs	r3, r3, #12
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	d007      	beq.n	8001f58 <bmp280_read_fixed+0x28>
		if (humidity)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <bmp280_read_fixed+0x32>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e000      	b.n	8001f64 <bmp280_read_fixed+0x34>
 8001f62:	2306      	movs	r3, #6
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f107 0218 	add.w	r2, r7, #24
 8001f6e:	21f7      	movs	r1, #247	; 0xf7
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fab1 	bl	80014d8 <read_data>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <bmp280_read_fixed+0x50>
		return false;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e038      	b.n	8001ff2 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f80:	7e3b      	ldrb	r3, [r7, #24]
 8001f82:	031a      	lsls	r2, r3, #12
 8001f84:	7e7b      	ldrb	r3, [r7, #25]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	7eba      	ldrb	r2, [r7, #26]
 8001f8c:	0912      	lsrs	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	4313      	orrs	r3, r2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f94:	7efb      	ldrb	r3, [r7, #27]
 8001f96:	031a      	lsls	r2, r3, #12
 8001f98:	7f3b      	ldrb	r3, [r7, #28]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	7f7a      	ldrb	r2, [r7, #29]
 8001fa0:	0912      	lsrs	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	461a      	mov	r2, r3
 8001fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff fc6d 	bl	8001890 <compensate_temperature>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff fc9c 	bl	8001900 <compensate_pressure>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001fd4:	7fbb      	ldrb	r3, [r7, #30]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	7ffa      	ldrb	r2, [r7, #31]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ff45 	bl	8001e74 <compensate_humidity>
 8001fea:	4602      	mov	r2, r0
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3730      	adds	r7, #48	; 0x30
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <bmp280_read_float+0x1a>
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	e000      	b.n	8002018 <bmp280_read_float+0x1c>
 8002016:	2300      	movs	r3, #0
 8002018:	f107 0218 	add.w	r2, r7, #24
 800201c:	f107 011c 	add.w	r1, r7, #28
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff ff85 	bl	8001f30 <bmp280_read_fixed>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d02d      	beq.n	8002088 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fe4c 	bl	8000ccc <__aeabi_i2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4917      	ldr	r1, [pc, #92]	; (8002094 <bmp280_read_float+0x98>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ff4f 	bl	8000edc <__aeabi_fdiv>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fe3b 	bl	8000cc4 <__aeabi_ui2f>
 800204e:	4603      	mov	r3, r0
 8002050:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff41 	bl	8000edc <__aeabi_fdiv>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00d      	beq.n	8002084 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fe2a 	bl	8000cc4 <__aeabi_ui2f>
 8002070:	4603      	mov	r3, r0
 8002072:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ff30 	bl	8000edc <__aeabi_fdiv>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	601a      	str	r2, [r3, #0]
		return true;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <bmp280_read_float+0x8e>
	}

	return false;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	42c80000 	.word	0x42c80000

08002098 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(MAG_HandleTypedef *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af04      	add	r7, sp, #16
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	460b      	mov	r3, r1
 80020a6:	72fb      	strb	r3, [r7, #11]
 80020a8:	4613      	mov	r3, r2
 80020aa:	813b      	strh	r3, [r7, #8]
	uint16_t tx_buff;
		tx_buff = (ctx->addr << 1);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	891b      	ldrh	r3, [r3, #8]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	82fb      	strh	r3, [r7, #22]
		if (HAL_I2C_Mem_Read(ctx->i2c, tx_buff, reg, 1, data, len, 5000) == HAL_OK)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	8af9      	ldrh	r1, [r7, #22]
 80020be:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	f003 ff03 	bl	8005ed8 <HAL_I2C_Mem_Read>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <iis2mdc_read_reg+0x44>
			return IIS2MDC_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e001      	b.n	80020e0 <iis2mdc_read_reg+0x48>
		else
			return IIS2MDC_ERROR;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295



}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(MAG_HandleTypedef *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	; 0x28
 80020ec:	af04      	add	r7, sp, #16
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	72fb      	strb	r3, [r7, #11]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]

 uint16_t tx_buff;
	tx_buff = (ctx->addr << 1);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	891b      	ldrh	r3, [r3, #8]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Write(ctx->i2c, tx_buff, reg, 1, data, len, 10000) == HAL_OK)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	68d8      	ldr	r0, [r3, #12]
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	b29a      	uxth	r2, r3
 800210c:	8af9      	ldrh	r1, [r7, #22]
 800210e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	893b      	ldrh	r3, [r7, #8]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	f003 fdc7 	bl	8005cb0 <HAL_I2C_Mem_Write>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <iis2mdc_write_reg+0x44>
		return IIS2MDC_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e001      	b.n	8002130 <iis2mdc_write_reg+0x48>
	else
		return IIS2MDC_ERROR;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(MAG_HandleTypedef *ctx,
                                   iis2mdc_md_t val)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	2301      	movs	r3, #1
 800214a:	2160      	movs	r1, #96	; 0x60
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffa3 	bl	8002098 <iis2mdc_read_reg>
 8002152:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	b2da      	uxtb	r2, r3
 8002162:	7a3b      	ldrb	r3, [r7, #8]
 8002164:	f362 0301 	bfi	r3, r2, #0, #2
 8002168:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800216a:	f107 0208 	add.w	r2, r7, #8
 800216e:	2301      	movs	r3, #1
 8002170:	2160      	movs	r1, #96	; 0x60
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffb8 	bl	80020e8 <iis2mdc_write_reg>
 8002178:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(MAG_HandleTypedef *ctx, iis2mdc_odr_t val)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002190:	f107 0208 	add.w	r2, r7, #8
 8002194:	2301      	movs	r3, #1
 8002196:	2160      	movs	r1, #96	; 0x60
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff7d 	bl	8002098 <iis2mdc_read_reg>
 800219e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10f      	bne.n	80021c6 <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	7a3b      	ldrb	r3, [r7, #8]
 80021b0:	f362 0383 	bfi	r3, r2, #2, #2
 80021b4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80021b6:	f107 0208 	add.w	r2, r7, #8
 80021ba:	2301      	movs	r3, #1
 80021bc:	2160      	movs	r1, #96	; 0x60
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff92 	bl	80020e8 <iis2mdc_write_reg>
 80021c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(MAG_HandleTypedef *ctx, uint8_t val)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80021dc:	f107 0208 	add.w	r2, r7, #8
 80021e0:	2301      	movs	r3, #1
 80021e2:	2162      	movs	r1, #98	; 0x62
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff57 	bl	8002098 <iis2mdc_read_reg>
 80021ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	7a3b      	ldrb	r3, [r7, #8]
 80021fc:	f362 1304 	bfi	r3, r2, #4, #1
 8002200:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002202:	f107 0208 	add.w	r2, r7, #8
 8002206:	2301      	movs	r3, #1
 8002208:	2162      	movs	r1, #98	; 0x62
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff6c 	bl	80020e8 <iis2mdc_write_reg>
 8002210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(MAG_HandleTypedef *ctx, int16_t *val)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8002226:	f107 020c 	add.w	r2, r7, #12
 800222a:	2306      	movs	r3, #6
 800222c:	2168      	movs	r1, #104	; 0x68
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ff32 	bl	8002098 <iis2mdc_read_reg>
 8002234:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	b21a      	sxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002244:	b29b      	uxth	r3, r3
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b29a      	uxth	r2, r3
 800224a:	7b3b      	ldrb	r3, [r7, #12]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b29b      	uxth	r3, r3
 8002252:	b21a      	sxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	3302      	adds	r3, #2
 800225e:	b212      	sxth	r2, r2
 8002260:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	3302      	adds	r3, #2
 8002266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226a:	b29b      	uxth	r3, r3
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b29a      	uxth	r2, r3
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4413      	add	r3, r2
 8002276:	b29a      	uxth	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	3302      	adds	r3, #2
 800227c:	b212      	sxth	r2, r2
 800227e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002280:	7c7a      	ldrb	r2, [r7, #17]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3304      	adds	r3, #4
 8002286:	b212      	sxth	r2, r2
 8002288:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002292:	b29b      	uxth	r3, r3
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b29a      	uxth	r2, r3
 8002298:	7c3b      	ldrb	r3, [r7, #16]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4413      	add	r3, r2
 800229e:	b29a      	uxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	3304      	adds	r3, #4
 80022a4:	b212      	sxth	r2, r2
 80022a6:	801a      	strh	r2, [r3, #0]

  return ret;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(MAG_HandleTypedef *ctx, uint8_t val)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80022be:	f107 0208 	add.w	r2, r7, #8
 80022c2:	2301      	movs	r3, #1
 80022c4:	2162      	movs	r1, #98	; 0x62
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fee6 	bl	8002098 <iis2mdc_read_reg>
 80022cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	7a3b      	ldrb	r3, [r7, #8]
 80022de:	f362 0341 	bfi	r3, r2, #1, #1
 80022e2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80022e4:	f107 0208 	add.w	r2, r7, #8
 80022e8:	2301      	movs	r3, #1
 80022ea:	2162      	movs	r1, #98	; 0x62
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fefb 	bl	80020e8 <iis2mdc_write_reg>
 80022f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f023 0218 	bic.w	r2, r3, #24
 8002312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4313      	orrs	r3, r2
 800236e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002390:	1d39      	adds	r1, r7, #4
 8002392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002396:	2201      	movs	r2, #1
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <__io_putchar+0x20>)
 800239a:	f007 f98f 	bl	80096bc <HAL_UART_Transmit>

  return ch;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000c54 	.word	0x20000c54

080023ac <Mag_begin>:


int32_t Mag_begin(MAG_HandleTypedef *ctx)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */

  if (iis2mdc_block_data_update_set(ctx, PROPERTY_ENABLE) != IIS2MDC_OK)
 80023b4:	2101      	movs	r1, #1
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff0a 	bl	80021d0 <iis2mdc_block_data_update_set>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <Mag_begin+0x1c>
  {
    return IIS2MDC_ERROR;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	e028      	b.n	800241a <Mag_begin+0x6e>
  }

  /* Operating mode selection - power down */

  if (iis2mdc_operating_mode_set(ctx, IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80023c8:	2102      	movs	r1, #2
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff feb4 	bl	8002138 <iis2mdc_operating_mode_set>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <Mag_begin+0x30>
  {
    return IIS2MDC_ERROR;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e01e      	b.n	800241a <Mag_begin+0x6e>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(ctx, IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80023dc:	2103      	movs	r1, #3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fed0 	bl	8002184 <iis2mdc_data_rate_set>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <Mag_begin+0x44>
  {
    return IIS2MDC_ERROR;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e014      	b.n	800241a <Mag_begin+0x6e>
  }
   /* Self Test disabled. */
  if (iis2mdc_self_test_set(ctx, PROPERTY_DISABLE) != IIS2MDC_OK)
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ff5d 	bl	80022b2 <iis2mdc_self_test_set>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <Mag_begin+0x58>
  {
    return IIS2MDC_ERROR;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	e00a      	b.n	800241a <Mag_begin+0x6e>
  }

  /* Output data rate selection. */
   if (iis2mdc_operating_mode_set(ctx, IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002404:	2100      	movs	r1, #0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fe96 	bl	8002138 <iis2mdc_operating_mode_set>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <Mag_begin+0x6c>
   {
     return IIS2MDC_ERROR;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	e000      	b.n	800241a <Mag_begin+0x6e>
   }

   return IIS2MDC_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <MagGetAxes>:
IIS2MDCStatusTypeDef MagGetAxes(MAG_HandleTypedef *ctx, uint16_t *MagneticField)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
 axis3bit16_t data_raw;

  float sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 800242c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002430:	617b      	str	r3, [r7, #20]

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(ctx, data_raw.i16bit) != IIS2MDC_OK)
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff feef 	bl	800221c <iis2mdc_magnetic_raw_get>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <MagGetAxes+0x28>
  {
    return IIS2MDC_ERROR;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e038      	b.n	80024bc <MagGetAxes+0x9a>
  }

  /* Get IIS2MDC actual sensitivity. */

  /* Calculate the data. */
  MagneticField[0] = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800244a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fc3c 	bl	8000ccc <__aeabi_i2f>
 8002454:	4603      	mov	r3, r0
 8002456:	6979      	ldr	r1, [r7, #20]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fc8b 	bl	8000d74 <__aeabi_fmul>
 800245e:	4603      	mov	r3, r0
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fdd7 	bl	8001014 <__aeabi_f2iz>
 8002466:	4603      	mov	r3, r0
 8002468:	b29a      	uxth	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	801a      	strh	r2, [r3, #0]
  MagneticField[1] = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800246e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fc2a 	bl	8000ccc <__aeabi_i2f>
 8002478:	4603      	mov	r3, r0
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fc79 	bl	8000d74 <__aeabi_fmul>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fdc5 	bl	8001014 <__aeabi_f2iz>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3302      	adds	r3, #2
 8002490:	b292      	uxth	r2, r2
 8002492:	801a      	strh	r2, [r3, #0]
  MagneticField[2] = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002494:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fc17 	bl	8000ccc <__aeabi_i2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fc66 	bl	8000d74 <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fdb2 	bl	8001014 <__aeabi_f2iz>
 80024b0:	4602      	mov	r2, r0
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	b292      	uxth	r2, r2
 80024b8:	801a      	strh	r2, [r3, #0]

  return IIS2MDC_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ca:	f001 fb8f 	bl	8003bec <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ce:	f000 f887 	bl	80025e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d2:	f000 fb53 	bl	8002b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80024d6:	f000 fb37 	bl	8002b48 <MX_DMA_Init>
  MX_I2C1_Init();
 80024da:	f000 f969 	bl	80027b0 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80024de:	f000 f9a7 	bl	8002830 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80024e2:	f000 f9f1 	bl	80028c8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80024e6:	f000 fadf 	bl	8002aa8 <MX_SPI1_Init>
  MX_SUBGHZ_Init();
 80024ea:	f000 fb1b 	bl	8002b24 <MX_SUBGHZ_Init>
  MX_RTC_Init();
 80024ee:	f000 fa37 	bl	8002960 <MX_RTC_Init>
  MX_LoRaWAN_Init();
 80024f2:	f008 fa99 	bl	800aa28 <MX_LoRaWAN_Init>
  MX_ADC_Init();
 80024f6:	f000 f8cb 	bl	8002690 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */


	bmp280_init_default_params(&bmp280.params);
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <main+0xe0>)
 80024fc:	f7fe ffa2 	bl	8001444 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <main+0xe4>)
 8002502:	2277      	movs	r2, #119	; 0x77
 8002504:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <main+0xe4>)
 8002508:	4a28      	ldr	r2, [pc, #160]	; (80025ac <main+0xe8>)
 800250a:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800250c:	e013      	b.n	8002536 <main+0x72>
		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800250e:	4928      	ldr	r1, [pc, #160]	; (80025b0 <main+0xec>)
 8002510:	4828      	ldr	r0, [pc, #160]	; (80025b4 <main+0xf0>)
 8002512:	f017 fdd9 	bl	801a0c8 <sprintf>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <main+0xf4>)
 800251c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Data, size, 1000);
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <main+0xf4>)
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	4923      	ldr	r1, [pc, #140]	; (80025b4 <main+0xf0>)
 8002528:	4824      	ldr	r0, [pc, #144]	; (80025bc <main+0xf8>)
 800252a:	f007 f8c7 	bl	80096bc <HAL_UART_Transmit>
		HAL_Delay(2000);
 800252e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002532:	f001 f9a4 	bl	800387e <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <main+0xe0>)
 8002538:	481b      	ldr	r0, [pc, #108]	; (80025a8 <main+0xe4>)
 800253a:	f7ff f8fc 	bl	8001736 <bmp280_init>
 800253e:	4603      	mov	r3, r0
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e1      	bne.n	800250e <main+0x4a>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <main+0xe4>)
 800254c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002550:	2b60      	cmp	r3, #96	; 0x60
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
	printf("BMP280: found %s\r\n", bme280p ? "BME280" : "BMP280");
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <main+0xa0>
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <main+0xfc>)
 8002562:	e000      	b.n	8002566 <main+0xa2>
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <main+0x100>)
 8002566:	4619      	mov	r1, r3
 8002568:	4817      	ldr	r0, [pc, #92]	; (80025c8 <main+0x104>)
 800256a:	f017 fd4d 	bl	801a008 <printf>



 // Mag_begin();
	mag.i2c = &hi2c1;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <main+0x108>)
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <main+0xe8>)
 8002572:	60da      	str	r2, [r3, #12]
	mag.addr = IIS2MDC_I2C_ADD;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <main+0x108>)
 8002576:	221e      	movs	r2, #30
 8002578:	811a      	strh	r2, [r3, #8]

if (Mag_begin(&(mag)) == IIS2MDC_OK)
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <main+0x108>)
 800257c:	f7ff ff16 	bl	80023ac <Mag_begin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <main+0xca>
{
printf("MAG IIS2MDC OK\r\n");
 8002586:	4812      	ldr	r0, [pc, #72]	; (80025d0 <main+0x10c>)
 8002588:	f017 fd96 	bl	801a0b8 <puts>
 800258c:	e002      	b.n	8002594 <main+0xd0>
} else
{
	 printf("MAG Failed!!!!\r\n");
 800258e:	4811      	ldr	r0, [pc, #68]	; (80025d4 <main+0x110>)
 8002590:	f017 fd92 	bl	801a0b8 <puts>

}
//The link between hadc1 and hdma_adc1 was completed in stm32f1xx_hal_msp.c:
HAL_ADC_Start_DMA(&hadc, adcBuf, ADC_BUFLEN); //Link DMA to ADC1
 8002594:	2202      	movs	r2, #2
 8002596:	4910      	ldr	r1, [pc, #64]	; (80025d8 <main+0x114>)
 8002598:	4810      	ldr	r0, [pc, #64]	; (80025dc <main+0x118>)
 800259a:	f001 ffcd 	bl	8004538 <HAL_ADC_Start_DMA>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800259e:	f008 fa4b 	bl	800aa38 <MX_LoRaWAN_Process>
 80025a2:	e7fc      	b.n	800259e <main+0xda>
 80025a4:	20000db8 	.word	0x20000db8
 80025a8:	20000d8c 	.word	0x20000d8c
 80025ac:	20000b78 	.word	0x20000b78
 80025b0:	08020030 	.word	0x08020030
 80025b4:	20000dd0 	.word	0x20000dd0
 80025b8:	20000dcc 	.word	0x20000dcc
 80025bc:	20000c54 	.word	0x20000c54
 80025c0:	08020050 	.word	0x08020050
 80025c4:	08020058 	.word	0x08020058
 80025c8:	08020060 	.word	0x08020060
 80025cc:	20000ed4 	.word	0x20000ed4
 80025d0:	08020074 	.word	0x08020074
 80025d4:	08020084 	.word	0x08020084
 80025d8:	20000ed0 	.word	0x20000ed0
 80025dc:	20000ab4 	.word	0x20000ab4

080025e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b09a      	sub	sp, #104	; 0x68
 80025e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	2248      	movs	r2, #72	; 0x48
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f017 fd02 	bl	8019ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002606:	f004 f8b1 	bl	800676c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 800260a:	2008      	movs	r0, #8
 800260c:	f7ff fe77 	bl	80022fe <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <SystemClock_Config+0xac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002618:	4a1c      	ldr	r2, [pc, #112]	; (800268c <SystemClock_Config+0xac>)
 800261a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b1a      	ldr	r3, [pc, #104]	; (800268c <SystemClock_Config+0xac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800262c:	2306      	movs	r3, #6
 800262e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002630:	2381      	movs	r3, #129	; 0x81
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800263a:	2340      	movs	r3, #64	; 0x40
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800263e:	2300      	movs	r3, #0
 8002640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fb86 	bl	8006d58 <HAL_RCC_OscConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002652:	f000 fcb1 	bl	8002fb8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002656:	234f      	movs	r3, #79	; 0x4f
 8002658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800265a:	2301      	movs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f004 ff0b 	bl	8007490 <HAL_RCC_ClockConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002680:	f000 fc9a 	bl	8002fb8 <Error_Handler>
  }
}
 8002684:	bf00      	nop
 8002686:	3768      	adds	r7, #104	; 0x68
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58000400 	.word	0x58000400

08002690 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80026a2:	4b3e      	ldr	r3, [pc, #248]	; (800279c <MX_ADC_Init+0x10c>)
 80026a4:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <MX_ADC_Init+0x110>)
 80026a6:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80026a8:	4b3c      	ldr	r3, [pc, #240]	; (800279c <MX_ADC_Init+0x10c>)
 80026aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <MX_ADC_Init+0x10c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <MX_ADC_Init+0x10c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026bc:	4b37      	ldr	r3, [pc, #220]	; (800279c <MX_ADC_Init+0x10c>)
 80026be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026c2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <MX_ADC_Init+0x10c>)
 80026c6:	2208      	movs	r2, #8
 80026c8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <MX_ADC_Init+0x10c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <MX_ADC_Init+0x10c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <MX_ADC_Init+0x10c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 2;
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <MX_ADC_Init+0x10c>)
 80026de:	2202      	movs	r2, #2
 80026e0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <MX_ADC_Init+0x10c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <MX_ADC_Init+0x10c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <MX_ADC_Init+0x10c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <MX_ADC_Init+0x10c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <MX_ADC_Init+0x10c>)
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002704:	4b25      	ldr	r3, [pc, #148]	; (800279c <MX_ADC_Init+0x10c>)
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <MX_ADC_Init+0x10c>)
 800270c:	2200      	movs	r2, #0
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <MX_ADC_Init+0x10c>)
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <MX_ADC_Init+0x10c>)
 800271a:	2200      	movs	r2, #0
 800271c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800271e:	481f      	ldr	r0, [pc, #124]	; (800279c <MX_ADC_Init+0x10c>)
 8002720:	f001 fc34 	bl	8003f8c <HAL_ADC_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_ADC_Init+0x9e>
  {
    Error_Handler();
 800272a:	f000 fc45 	bl	8002fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <MX_ADC_Init+0x114>)
 8002730:	617b      	str	r3, [r7, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4816      	ldr	r0, [pc, #88]	; (800279c <MX_ADC_Init+0x10c>)
 8002742:	f002 f8bd 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800274c:	f000 fc34 	bl	8002fb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_ADC_Init+0x118>)
 8002752:	617b      	str	r3, [r7, #20]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002754:	2304      	movs	r3, #4
 8002756:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	480f      	ldr	r0, [pc, #60]	; (800279c <MX_ADC_Init+0x10c>)
 8002760:	f002 f8ae 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_ADC_Init+0xde>
  {
    Error_Handler();
 800276a:	f000 fc25 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276e:	463b      	mov	r3, r7
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800277c:	2310      	movs	r3, #16
 800277e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002780:	2303      	movs	r3, #3
 8002782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	4807      	ldr	r0, [pc, #28]	; (80027ac <MX_ADC_Init+0x11c>)
 800278e:	f003 f86f 	bl	8005870 <HAL_GPIO_Init>
  /* USER CODE END ADC_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000ab4 	.word	0x20000ab4
 80027a0:	40012400 	.word	0x40012400
 80027a4:	0c000008 	.word	0x0c000008
 80027a8:	b8004000 	.word	0xb8004000
 80027ac:	48000400 	.word	0x48000400

080027b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_I2C1_Init+0x74>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <MX_I2C1_Init+0x78>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_I2C1_Init+0x74>)
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <MX_I2C1_Init+0x7c>)
 80027be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_I2C1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_I2C1_Init+0x74>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_I2C1_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_I2C1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_I2C1_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_I2C1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_I2C1_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ea:	480e      	ldr	r0, [pc, #56]	; (8002824 <MX_I2C1_Init+0x74>)
 80027ec:	f003 f9d0 	bl	8005b90 <HAL_I2C_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027f6:	f000 fbdf 	bl	8002fb8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027fa:	2100      	movs	r1, #0
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <MX_I2C1_Init+0x74>)
 80027fe:	f003 feaf 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002808:	f000 fbd6 	bl	8002fb8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_I2C1_Init+0x74>)
 8002810:	f003 fef0 	bl	80065f4 <HAL_I2CEx_ConfigDigitalFilter>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800281a:	f000 fbcd 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000b78 	.word	0x20000b78
 8002828:	40005400 	.word	0x40005400
 800282c:	00303d5b 	.word	0x00303d5b

08002830 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002836:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <MX_LPUART1_UART_Init+0x94>)
 8002838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800283c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002840:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002856:	220c      	movs	r2, #12
 8002858:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 8002874:	2200      	movs	r2, #0
 8002876:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002878:	4811      	ldr	r0, [pc, #68]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800287a:	f006 fecf 	bl	800961c <HAL_UART_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002884:	f000 fb98 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	480d      	ldr	r0, [pc, #52]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800288c:	f008 f803 	bl	800a896 <HAL_UARTEx_SetTxFifoThreshold>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002896:	f000 fb8f 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800289a:	2100      	movs	r1, #0
 800289c:	4808      	ldr	r0, [pc, #32]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 800289e:	f008 f838 	bl	800a912 <HAL_UARTEx_SetRxFifoThreshold>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028a8:	f000 fb86 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <MX_LPUART1_UART_Init+0x90>)
 80028ae:	f007 ffba 	bl	800a826 <HAL_UARTEx_DisableFifoMode>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028b8:	f000 fb7e 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000bc4 	.word	0x20000bc4
 80028c4:	40008000 	.word	0x40008000

080028c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <MX_USART1_UART_Init+0x94>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_USART1_UART_Init+0x90>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <MX_USART1_UART_Init+0x90>)
 800290c:	2200      	movs	r2, #0
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002910:	4811      	ldr	r0, [pc, #68]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002912:	f006 fe83 	bl	800961c <HAL_UART_Init>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800291c:	f000 fb4c 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	480d      	ldr	r0, [pc, #52]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002924:	f007 ffb7 	bl	800a896 <HAL_UARTEx_SetTxFifoThreshold>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800292e:	f000 fb43 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002932:	2100      	movs	r1, #0
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002936:	f007 ffec 	bl	800a912 <HAL_UARTEx_SetRxFifoThreshold>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002940:	f000 fb3a 	bl	8002fb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_USART1_UART_Init+0x90>)
 8002946:	f007 ff6e 	bl	800a826 <HAL_UARTEx_DisableFifoMode>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002950:	f000 fb32 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000c54 	.word	0x20000c54
 800295c:	40013800 	.word	0x40013800

08002960 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b092      	sub	sp, #72	; 0x48
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	222c      	movs	r2, #44	; 0x2c
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f017 fb39 	bl	8019ff8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <MX_RTC_Init+0x140>)
 8002988:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <MX_RTC_Init+0x144>)
 800298a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800298c:	4b44      	ldr	r3, [pc, #272]	; (8002aa0 <MX_RTC_Init+0x140>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <MX_RTC_Init+0x140>)
 8002994:	227f      	movs	r2, #127	; 0x7f
 8002996:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <MX_RTC_Init+0x140>)
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80029a4:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029b0:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80029b8:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80029be:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029c4:	4836      	ldr	r0, [pc, #216]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029c6:	f005 fa53 	bl	8007e70 <HAL_RTC_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80029d0:	f000 faf2 	bl	8002fb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f2:	2201      	movs	r2, #1
 80029f4:	4619      	mov	r1, r3
 80029f6:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <MX_RTC_Init+0x140>)
 80029f8:	f005 fab4 	bl	8007f64 <HAL_RTC_SetTime>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8002a02:	f000 fad9 	bl	8002fb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	481e      	ldr	r0, [pc, #120]	; (8002aa0 <MX_RTC_Init+0x140>)
 8002a28:	f005 fb38 	bl	800809c <HAL_RTC_SetDate>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8002a32:	f000 fac1 	bl	8002fb8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8002a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MX_RTC_Init+0x140>)
 8002a6e:	f005 fb9b 	bl	80081a8 <HAL_RTC_SetAlarm>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8002a78:	f000 fa9e 	bl	8002fb8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <MX_RTC_Init+0x140>)
 8002a88:	f005 fd48 	bl	800851c <HAL_RTCEx_SetWakeUpTimer>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002a92:	f000 fa91 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	3748      	adds	r7, #72	; 0x48
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000ce4 	.word	0x20000ce4
 8002aa4:	40002800 	.word	0x40002800

08002aa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <MX_SPI1_Init+0x78>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ac2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ac6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ad6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ada:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002af6:	2207      	movs	r2, #7
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002b02:	2208      	movs	r2, #8
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_SPI1_Init+0x74>)
 8002b08:	f005 fd72 	bl	80085f0 <HAL_SPI_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b12:	f000 fa51 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000d1c 	.word	0x20000d1c
 8002b20:	40013000 	.word	0x40013000

08002b24 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_SUBGHZ_Init+0x20>)
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_SUBGHZ_Init+0x20>)
 8002b30:	f005 fecc 	bl	80088cc <HAL_SUBGHZ_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002b3a:	f000 fa3d 	bl	8002fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000d80 	.word	0x20000d80

08002b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	f7ff fbeb 	bl	8002328 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7ff fbe8 	bl	8002328 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	200b      	movs	r0, #11
 8002b5e:	f002 fa78 	bl	8005052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b62:	200b      	movs	r0, #11
 8002b64:	f002 fa8f 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	203d      	movs	r0, #61	; 0x3d
 8002b6e:	f002 fa70 	bl	8005052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8002b72:	203d      	movs	r0, #61	; 0x3d
 8002b74:	f002 fa87 	bl	8005086 <HAL_NVIC_EnableIRQ>

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff fbe1 	bl	8002358 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7ff fbde 	bl	8002358 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	2004      	movs	r0, #4
 8002b9e:	f7ff fbdb 	bl	8002358 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|FE_CTRL2_Pin|DUMMY_Pin, GPIO_PIN_RESET);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ba8:	4834      	ldr	r0, [pc, #208]	; (8002c7c <MX_GPIO_Init+0x100>)
 8002baa:	f002 ffc1 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMB_PWR_GPIO_Port, AMB_PWR_Pin, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb4:	4831      	ldr	r0, [pc, #196]	; (8002c7c <MX_GPIO_Init+0x100>)
 8002bb6:	f002 ffbb 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FE_CTRL1_GPIO_Port, FE_CTRL1_Pin, GPIO_PIN_SET);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc0:	482f      	ldr	r0, [pc, #188]	; (8002c80 <MX_GPIO_Init+0x104>)
 8002bc2:	f002 ffb5 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd0:	f002 ffae 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED3_Pin FE_CTRL2_Pin DUMMY_Pin
                           AMB_PWR_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|FE_CTRL2_Pin|DUMMY_Pin
 8002bd4:	f241 132c 	movw	r3, #4396	; 0x112c
 8002bd8:	607b      	str	r3, [r7, #4]
                          |AMB_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4824      	ldr	r0, [pc, #144]	; (8002c7c <MX_GPIO_Init+0x100>)
 8002bec:	f002 fe40 	bl	8005870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8002bf0:	2343      	movs	r3, #67	; 0x43
 8002bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c06:	f002 fe33 	bl	8005870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c10:	2303      	movs	r3, #3
 8002c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c20:	f002 fe26 	bl	8005870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c24:	2301      	movs	r3, #1
 8002c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4811      	ldr	r0, [pc, #68]	; (8002c7c <MX_GPIO_Init+0x100>)
 8002c36:	f002 fe1b 	bl	8005870 <HAL_GPIO_Init>

  /*Configure GPIO pin : FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL1_Pin;
 8002c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c40:	2301      	movs	r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FE_CTRL1_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <MX_GPIO_Init+0x104>)
 8002c52:	f002 fe0d 	bl	8005870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c70:	f002 fdfe 	bl	8005870 <HAL_GPIO_Init>

}
 8002c74:	bf00      	nop
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	48000400 	.word	0x48000400
 8002c80:	48000800 	.word	0x48000800

08002c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c88:	b08a      	sub	sp, #40	; 0x28
 8002c8a:	af04      	add	r7, sp, #16
 8002c8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
static int counter = 0;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4aa9      	ldr	r2, [pc, #676]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002c98:	f000 ffc8 	bl	8003c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
counter++;
 8002c9c:	4ba7      	ldr	r3, [pc, #668]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4aa6      	ldr	r2, [pc, #664]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ca4:	6013      	str	r3, [r2, #0]
if (counter == 9550){
 8002ca6:	4ba5      	ldr	r3, [pc, #660]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f242 524e 	movw	r2, #9550	; 0x254e
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d116      	bne.n	8002ce0 <HAL_TIM_PeriodElapsedCallback+0x5c>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbc:	f002 ff38 	bl	8005b30 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc, adcBuf, ADC_BUFLEN);
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	499f      	ldr	r1, [pc, #636]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002cc4:	489f      	ldr	r0, [pc, #636]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002cc6:	f001 fc37 	bl	8004538 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(&hadc);
 8002cca:	489e      	ldr	r0, [pc, #632]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002ccc:	f001 fb24 	bl	8004318 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	489c      	ldr	r0, [pc, #624]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002cd4:	f001 fb98 	bl	8004408 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc);
 8002cd8:	489a      	ldr	r0, [pc, #616]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002cda:	f001 fb63 	bl	80043a4 <HAL_ADC_Stop>




  /* USER CODE END Callback 1 */
}
 8002cde:	e160      	b.n	8002fa2 <HAL_TIM_PeriodElapsedCallback+0x31e>
if (counter > 10000){
 8002ce0:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	f340 815a 	ble.w	8002fa2 <HAL_TIM_PeriodElapsedCallback+0x31e>
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf6:	f002 ff32 	bl	8005b5e <HAL_GPIO_TogglePin>
	counter = 0;
 8002cfa:	4b90      	ldr	r3, [pc, #576]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
	uint16_t magnetometer[3]={0,0,0};
 8002d00:	2300      	movs	r3, #0
 8002d02:	81bb      	strh	r3, [r7, #12]
 8002d04:	2300      	movs	r3, #0
 8002d06:	81fb      	strh	r3, [r7, #14]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	823b      	strh	r3, [r7, #16]
	MagGetAxes(&(mag), magnetometer);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	488d      	ldr	r0, [pc, #564]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002d14:	f7ff fb85 	bl	8002422 <MagGetAxes>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002d18:	e006      	b.n	8002d28 <HAL_TIM_PeriodElapsedCallback+0xa4>
		printf("Temperature/pressure reading failed\r\n");
 8002d1a:	488c      	ldr	r0, [pc, #560]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002d1c:	f017 f9cc 	bl	801a0b8 <puts>
		HAL_Delay(2000);
 8002d20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d24:	f000 fdab 	bl	800387e <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002d28:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002d2a:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d2c:	498a      	ldr	r1, [pc, #552]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d2e:	488b      	ldr	r0, [pc, #556]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d30:	f7ff f964 	bl	8001ffc <bmp280_read_float>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ec      	bne.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x96>
	int env = adcBuf[0] - 1250;
 8002d40:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	f2a3 43e2 	subw	r3, r3, #1250	; 0x4e2
 8002d48:	617b      	str	r3, [r7, #20]
		if (env < 0) env = 0;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da01      	bge.n	8002d54 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
		env = env * 100;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2264      	movs	r2, #100	; 0x64
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
		env = env / 2850;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4a7f      	ldr	r2, [pc, #508]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002d62:	fb82 1203 	smull	r1, r2, r2, r3
 8002d66:	1292      	asrs	r2, r2, #10
 8002d68:	17db      	asrs	r3, r3, #31
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
		pressure = pressure / 100;
 8002d6e:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	497c      	ldr	r1, [pc, #496]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f8b1 	bl	8000edc <__aeabi_fdiv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d80:	601a      	str	r2, [r3, #0]
		printf("Pressure: %.0fhPa, Temperature: %.1f°C, Humidity: %.0f%%\r\n",
 8002d82:	4b74      	ldr	r3, [pc, #464]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbb6 	bl	80004f8 <__aeabi_f2d>
 8002d8c:	4680      	mov	r8, r0
 8002d8e:	4689      	mov	r9, r1
 8002d90:	4b71      	ldr	r3, [pc, #452]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbaf 	bl	80004f8 <__aeabi_f2d>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fba8 	bl	80004f8 <__aeabi_f2d>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002db0:	e9cd 4500 	strd	r4, r5, [sp]
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	486b      	ldr	r0, [pc, #428]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002dba:	f017 f925 	bl	801a008 <printf>
		printf("X: %d, Y: %d, Z: %d, light = %d%%, vbat = %dmV\r\n",magnetometer[0],magnetometer[1],magnetometer[2],(int)env,(int)adcBuf[1]<<1);
 8002dbe:	89bb      	ldrh	r3, [r7, #12]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	8a3b      	ldrh	r3, [r7, #16]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002dcc:	885b      	ldrh	r3, [r3, #2]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4864      	ldr	r0, [pc, #400]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002dda:	f017 f915 	bl	801a008 <printf>
	  UTIL_TIMER_Time_t nextTxIn = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
	  AppData.BufferSize = 14;
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002de4:	220e      	movs	r2, #14
 8002de6:	705a      	strb	r2, [r3, #1]
	  AppData.Buffer[0] = (uint8_t)((((int)adcBuf[1]<<1) / 100) >> 8);
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4a61      	ldr	r2, [pc, #388]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002df0:	fb82 1203 	smull	r1, r2, r2, r3
 8002df4:	1152      	asrs	r2, r2, #5
 8002df6:	17db      	asrs	r3, r3, #31
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	121a      	asrs	r2, r3, #8
 8002dfc:	4b5c      	ldr	r3, [pc, #368]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[1] = (uint8_t)((((int)adcBuf[1]<<1) / 100) & 0xff);
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002e06:	885b      	ldrh	r3, [r3, #2]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e10:	1152      	asrs	r2, r2, #5
 8002e12:	17db      	asrs	r3, r3, #31
 8002e14:	1ad2      	subs	r2, r2, r3
 8002e16:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[2] = (uint8_t)(((int)temperature / 100) >> 8);
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f8f5 	bl	8001014 <__aeabi_f2iz>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a51      	ldr	r2, [pc, #324]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e32:	1152      	asrs	r2, r2, #5
 8002e34:	17db      	asrs	r3, r3, #31
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	121a      	asrs	r2, r3, #8
 8002e3a:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[3] = (uint8_t)(((int)temperature  / 100) & 0xFF);
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe f8e3 	bl	8001014 <__aeabi_f2iz>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e52:	fb82 1203 	smull	r1, r2, r2, r3
 8002e56:	1152      	asrs	r2, r2, #5
 8002e58:	17db      	asrs	r3, r3, #31
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	3303      	adds	r3, #3
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[4] = (uint8_t)humidity;
 8002e66:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	1d1c      	adds	r4, r3, #4
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7fe f8f5 	bl	8001060 <__aeabi_f2uiz>
 8002e76:	4603      	mov	r3, r0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	7023      	strb	r3, [r4, #0]
	  AppData.Buffer[5] = (uint8_t)env;
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	3305      	adds	r3, #5
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[6] = (uint8_t)(((int)pressure) >> 8);
 8002e88:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f8c1 	bl	8001014 <__aeabi_f2iz>
 8002e92:	4603      	mov	r3, r0
 8002e94:	121a      	asrs	r2, r3, #8
 8002e96:	4b36      	ldr	r3, [pc, #216]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	3306      	adds	r3, #6
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[7] = (uint8_t)((((int)pressure) / 100) & 0xFF);
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f8b5 	bl	8001014 <__aeabi_f2iz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002eae:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb2:	1152      	asrs	r2, r2, #5
 8002eb4:	17db      	asrs	r3, r3, #31
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	3307      	adds	r3, #7
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[8] = (uint8_t)((magnetometer[0]) >> 8);
 8002ec2:	89bb      	ldrh	r3, [r7, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[9] = (uint8_t)((magnetometer[0]) & 0xFF);
 8002ed2:	89ba      	ldrh	r2, [r7, #12]
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	3309      	adds	r3, #9
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[10] = (uint8_t)((magnetometer[1]) >> 8);
 8002ede:	89fb      	ldrh	r3, [r7, #14]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	330a      	adds	r3, #10
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[11] = (uint8_t)((magnetometer[1]) & 0xFF);
 8002eee:	89fa      	ldrh	r2, [r7, #14]
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	330b      	adds	r3, #11
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[12] = (uint8_t)((magnetometer[2]) >> 8);
 8002efa:	8a3b      	ldrh	r3, [r7, #16]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	330c      	adds	r3, #12
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
	  AppData.Buffer[13] = (uint8_t)((magnetometer[2]) & 0xFF);
 8002f0a:	8a3a      	ldrh	r2, [r7, #16]
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	330d      	adds	r3, #13
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
	  LmHandlerErrorStatus_t result = LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, &nextTxIn, false);
 8002f16:	f107 0208 	add.w	r2, r7, #8
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4814      	ldr	r0, [pc, #80]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002f20:	f009 fb4a 	bl	800c5b8 <LmHandlerSend>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]
	  if (LORAMAC_HANDLER_SUCCESS == result)
 8002f28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d125      	bne.n	8002f7c <HAL_TIM_PeriodElapsedCallback+0x2f8>
	    printf("SEND REQUEST\r\n");
 8002f30:	4811      	ldr	r0, [pc, #68]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002f32:	f017 f8c1 	bl	801a0b8 <puts>
}
 8002f36:	e034      	b.n	8002fa2 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8002f38:	40014400 	.word	0x40014400
 8002f3c:	20000ee4 	.word	0x20000ee4
 8002f40:	20000ed0 	.word	0x20000ed0
 8002f44:	20000ab4 	.word	0x20000ab4
 8002f48:	20000ed4 	.word	0x20000ed4
 8002f4c:	08020094 	.word	0x08020094
 8002f50:	20000dc8 	.word	0x20000dc8
 8002f54:	20000dc0 	.word	0x20000dc0
 8002f58:	20000dc4 	.word	0x20000dc4
 8002f5c:	20000d8c 	.word	0x20000d8c
 8002f60:	5bfaf847 	.word	0x5bfaf847
 8002f64:	42c80000 	.word	0x42c80000
 8002f68:	080200bc 	.word	0x080200bc
 8002f6c:	080200f8 	.word	0x080200f8
 8002f70:	20000000 	.word	0x20000000
 8002f74:	51eb851f 	.word	0x51eb851f
 8002f78:	0802012c 	.word	0x0802012c
	  else if (nextTxIn > 0)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_TIM_PeriodElapsedCallback+0x312>
	    printf("Next Tx in  : ~%l second(s)\r\n", (nextTxIn / 1000));
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002f90:	f017 f83a 	bl	801a008 <printf>
}
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_PeriodElapsedCallback+0x31e>
		  printf("Respond: <%d>\r\n",result);
 8002f96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f9e:	f017 f833 	bl	801a008 <printf>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fac:	10624dd3 	.word	0x10624dd3
 8002fb0:	0802013c 	.word	0x0802013c
 8002fb4:	0802015c 	.word	0x0802015c

08002fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fbc:	b672      	cpsid	i
}
 8002fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <Error_Handler+0x8>

08002fc2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <LL_AHB2_GRP1_EnableClock>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4013      	ands	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4313      	orrs	r3, r2
 8003028:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4313      	orrs	r3, r2
 8003088:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80030d8:	463b      	mov	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	2005      	movs	r0, #5
 80030e6:	f001 ffb4 	bl	8005052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030ea:	2005      	movs	r0, #5
 80030ec:	f001 ffcb 	bl	8005086 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80030f8:	463b      	mov	r3, r7
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fb44 	bl	8006788 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003100:	f003 fb80 	bl	8006804 <HAL_PWR_EnablePVD>

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8003104:	f000 fdd6 	bl	8003cb4 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8003108:	2000      	movs	r0, #0
 800310a:	f000 fdbf 	bl	8003c8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b09a      	sub	sp, #104	; 0x68
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2238      	movs	r2, #56	; 0x38
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f016 ff5d 	bl	8019ff8 <memset>
  if(hadc->Instance==ADC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3a      	ldr	r2, [pc, #232]	; (800322c <HAL_ADC_MspInit+0x114>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d16c      	bne.n	8003222 <HAL_ADC_MspInit+0x10a>
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003148:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800314c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 800314e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fd6f 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003164:	f7ff ff28 	bl	8002fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800316c:	f7ff ff81 	bl	8003072 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003170:	2002      	movs	r0, #2
 8003172:	f7ff ff36 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = AMB_Pin;
 8003176:	2310      	movs	r3, #16
 8003178:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800317a:	2303      	movs	r3, #3
 800317c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AMB_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003186:	4619      	mov	r1, r3
 8003188:	4829      	ldr	r0, [pc, #164]	; (8003230 <HAL_ADC_MspInit+0x118>)
 800318a:	f002 fb71 	bl	8005870 <HAL_GPIO_Init>

    /* ADC DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 8003190:	4a29      	ldr	r2, [pc, #164]	; (8003238 <HAL_ADC_MspInit+0x120>)
 8003192:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 8003196:	2205      	movs	r2, #5
 8003198:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ba:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80031c8:	481a      	ldr	r0, [pc, #104]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031ca:	f001 ff6b 	bl	80050a4 <HAL_DMA_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80031d4:	f7ff fef0 	bl	8002fb8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80031d8:	2300      	movs	r3, #0
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80031dc:	2300      	movs	r3, #0
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 80031ec:	2301      	movs	r3, #1
 80031ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc, &pSyncConfig) != HAL_OK)
 80031f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031f4:	4619      	mov	r1, r3
 80031f6:	480f      	ldr	r0, [pc, #60]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 80031f8:	f002 faa8 	bl	800574c <HAL_DMAEx_ConfigMuxSync>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8003202:	f7ff fed9 	bl	8002fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_ADC_MspInit+0x11c>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	2012      	movs	r0, #18
 8003218:	f001 ff1b 	bl	8005052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800321c:	2012      	movs	r0, #18
 800321e:	f001 ff32 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8003222:	bf00      	nop
 8003224:	3768      	adds	r7, #104	; 0x68
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40012400 	.word	0x40012400
 8003230:	48000400 	.word	0x48000400
 8003234:	20000b18 	.word	0x20000b18
 8003238:	40020008 	.word	0x40020008

0800323c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b096      	sub	sp, #88	; 0x58
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2238      	movs	r2, #56	; 0x38
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f016 fecb 	bl	8019ff8 <memset>
  if(hi2c->Instance==I2C1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d127      	bne.n	80032bc <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800326c:	2340      	movs	r3, #64	; 0x40
 800326e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003270:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003274:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fcde 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003286:	f7ff fe97 	bl	8002fb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328a:	2001      	movs	r0, #1
 800328c:	f7ff fea9 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003290:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003296:	2312      	movs	r3, #18
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329a:	2301      	movs	r3, #1
 800329c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032a2:	2304      	movs	r3, #4
 80032a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032aa:	4619      	mov	r1, r3
 80032ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b0:	f002 fade 	bl	8005870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032b8:	f7ff feab 	bl	8003012 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	3758      	adds	r7, #88	; 0x58
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40005400 	.word	0x40005400

080032c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b096      	sub	sp, #88	; 0x58
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2238      	movs	r2, #56	; 0x38
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f016 fe85 	bl	8019ff8 <memset>
  if(huart->Instance==LPUART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <HAL_UART_MspInit+0xec>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d125      	bne.n	8003344 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032f8:	2320      	movs	r3, #32
 80032fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fc99 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003310:	f7ff fe52 	bl	8002fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003314:	2001      	movs	r0, #1
 8003316:	f7ff fe94 	bl	8003042 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2001      	movs	r0, #1
 800331c:	f7ff fe61 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003320:	230c      	movs	r3, #12
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003330:	2308      	movs	r3, #8
 8003332:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003338:	4619      	mov	r1, r3
 800333a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800333e:	f002 fa97 	bl	8005870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003342:	e032      	b.n	80033aa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_UART_MspInit+0xf0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d12d      	bne.n	80033aa <HAL_UART_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003352:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003356:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fc6d 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8003368:	f7ff fe26 	bl	8002fb8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800336c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003370:	f7ff fe7f 	bl	8003072 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003374:	2002      	movs	r0, #2
 8003376:	f7ff fe34 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800338a:	2307      	movs	r3, #7
 800338c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003392:	4619      	mov	r1, r3
 8003394:	4809      	ldr	r0, [pc, #36]	; (80033bc <HAL_UART_MspInit+0xf4>)
 8003396:	f002 fa6b 	bl	8005870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2100      	movs	r1, #0
 800339e:	2024      	movs	r0, #36	; 0x24
 80033a0:	f001 fe57 	bl	8005052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033a4:	2024      	movs	r0, #36	; 0x24
 80033a6:	f001 fe6e 	bl	8005086 <HAL_NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3758      	adds	r7, #88	; 0x58
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40008000 	.word	0x40008000
 80033b8:	40013800 	.word	0x40013800
 80033bc:	48000400 	.word	0x48000400

080033c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b090      	sub	sp, #64	; 0x40
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	2238      	movs	r2, #56	; 0x38
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f016 fe11 	bl	8019ff8 <memset>
  if(hrtc->Instance==RTC)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <HAL_RTC_MspInit+0x54>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d115      	bne.n	800340c <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fc23 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80033fc:	f7ff fddc 	bl	8002fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003400:	f7ff fddf 	bl	8002fc2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003404:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003408:	f7ff fe03 	bl	8003012 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800340c:	bf00      	nop
 800340e:	3740      	adds	r7, #64	; 0x40
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40002800 	.word	0x40002800

08003418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_SPI_MspInit+0x5c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d118      	bne.n	800346c <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800343a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800343e:	f7ff fe18 	bl	8003072 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2001      	movs	r0, #1
 8003444:	f7ff fdcd 	bl	8002fe2 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 8003448:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
 800344c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800345a:	2305      	movs	r3, #5
 800345c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003468:	f002 fa02 	bl	8005870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40013000 	.word	0x40013000

08003478 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8003480:	2001      	movs	r0, #1
 8003482:	f7ff fe0e 	bl	80030a2 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	2032      	movs	r0, #50	; 0x32
 800348c:	f001 fde1 	bl	8005052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8003490:	2032      	movs	r0, #50	; 0x32
 8003492:	f001 fdf8 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <LL_APB2_GRP1_EnableClock>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4013      	ands	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	; 0x30
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80034e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80034ea:	f7ff ffd8 	bl	800349e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 f9c5 	bl	8007888 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80034fe:	f004 f9b1 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 8003502:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <HAL_InitTick+0xbc>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	3b01      	subs	r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_InitTick+0xc0>)
 8003514:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_InitTick+0xc4>)
 8003516:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_InitTick+0xc0>)
 800351a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800351e:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_InitTick+0xc0>)
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_InitTick+0xc0>)
 8003528:	2200      	movs	r2, #0
 800352a:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <HAL_InitTick+0xc0>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 8003532:	4817      	ldr	r0, [pc, #92]	; (8003590 <HAL_InitTick+0xc0>)
 8003534:	f005 fde4 	bl	8009100 <HAL_TIM_Base_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800353e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11b      	bne.n	800357e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003546:	4812      	ldr	r0, [pc, #72]	; (8003590 <HAL_InitTick+0xc0>)
 8003548:	f005 fe3a 	bl	80091c0 <HAL_TIM_Base_Start_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003556:	2b00      	cmp	r3, #0
 8003558:	d111      	bne.n	800357e <HAL_InitTick+0xae>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800355a:	201c      	movs	r0, #28
 800355c:	f001 fd93 	bl	8005086 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d808      	bhi.n	8003578 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority, 0U);
 8003566:	2200      	movs	r2, #0
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	201c      	movs	r0, #28
 800356c:	f001 fd71 	bl	8005052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_InitTick+0xc8>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e002      	b.n	800357e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800357e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	431bde83 	.word	0x431bde83
 8003590:	20000fd8 	.word	0x20000fd8
 8003594:	40014400 	.word	0x40014400
 8003598:	2000000c 	.word	0x2000000c

0800359c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <NMI_Handler+0x4>

080035a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//return 0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <HardFault_Handler+0x4>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <MemManage_Handler+0x4>

080035ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler+0x4>

080035b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <UsageFault_Handler+0x4>

080035ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
HAL_IncTick();
 80035e2:	f000 fb23 	bl	8003c2c <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}

080035ea <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
	...

080035f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <DMA1_Channel1_IRQHandler+0x10>)
 80035fe:	f001 ff35 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000b18 	.word	0x20000b18

0800360c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <ADC_IRQHandler+0x10>)
 8003612:	f001 f817 	bl	8004644 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000ab4 	.word	0x20000ab4

08003620 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <TIM16_IRQHandler+0x10>)
 8003626:	f005 fe17 	bl	8009258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000fd8 	.word	0x20000fd8

08003634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <USART1_IRQHandler+0x10>)
 800363a:	f006 f8d5 	bl	80097e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000c54 	.word	0x20000c54

08003648 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <SUBGHZ_Radio_IRQHandler+0x10>)
 800364e:	f005 fbb9 	bl	8008dc4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000d80 	.word	0x20000d80

0800365c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMAMUX1_OVR_IRQHandler+0x10>)
 8003662:	f002 f8b3 	bl	80057cc <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000b18 	.word	0x20000b18

08003670 <MX_SUBGHZ_Init>:

// SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0

  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_SUBGHZ_Init+0x20>)
 8003676:	2208      	movs	r2, #8
 8003678:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <MX_SUBGHZ_Init+0x20>)
 800367c:	f005 f926 	bl	80088cc <HAL_SUBGHZ_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8003686:	f7ff fc97 	bl	8002fb8 <Error_Handler>
  }

}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000d80 	.word	0x20000d80

08003694 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <LL_FLASH_GetUDN+0x10>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	1fff7580 	.word	0x1fff7580

080036d0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <LL_FLASH_GetDeviceID+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	1fff7584 	.word	0x1fff7584

080036e8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <LL_FLASH_GetSTCompanyID+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0a1b      	lsrs	r3, r3, #8
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	1fff7584 	.word	0x1fff7584

08003700 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */
/* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8003704:	2000      	movs	r0, #0
 8003706:	f7ff ffc5 	bl	8003694 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800370a:	f016 fa3b 	bl	8019b84 <UTIL_TIMER_Init>
#elif !defined (LOW_POWER_DISABLE)
//#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE END SystemApp_Init_1 */

}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}

08003712 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800371c:	79fb      	ldrb	r3, [r7, #7]
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8003732:	88fb      	ldrh	r3, [r7, #6]
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800373e:	b590      	push	{r4, r7, lr}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800374a:	f7ff ffb7 	bl	80036bc <LL_FLASH_GetUDN>
 800374e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d138      	bne.n	80037ca <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8003758:	f000 fa7a 	bl	8003c50 <HAL_GetUIDw0>
 800375c:	4604      	mov	r4, r0
 800375e:	f000 fa8b 	bl	8003c78 <HAL_GetUIDw2>
 8003762:	4603      	mov	r3, r0
 8003764:	4423      	add	r3, r4
 8003766:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8003768:	f000 fa7c 	bl	8003c64 <HAL_GetUIDw1>
 800376c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	0e1a      	lsrs	r2, r3, #24
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3307      	adds	r3, #7
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	0c1a      	lsrs	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3306      	adds	r3, #6
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	0a1a      	lsrs	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3305      	adds	r3, #5
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	0e1a      	lsrs	r2, r3, #24
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3303      	adds	r3, #3
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0c1a      	lsrs	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3302      	adds	r3, #2
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	0a1a      	lsrs	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80037c8:	e031      	b.n	800382e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3307      	adds	r3, #7
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	0a1a      	lsrs	r2, r3, #8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3306      	adds	r3, #6
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	0c1a      	lsrs	r2, r3, #16
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3305      	adds	r3, #5
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	0e1a      	lsrs	r2, r3, #24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80037f8:	f7ff ff6a 	bl	80036d0 <LL_FLASH_GetDeviceID>
 80037fc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3303      	adds	r3, #3
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8003808:	f7ff ff6e 	bl	80036e8 <LL_FLASH_GetSTCompanyID>
 800380c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3302      	adds	r3, #2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	0a1a      	lsrs	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3301      	adds	r3, #1
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	701a      	strb	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}

08003836 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8003840:	f7ff ff3c 	bl	80036bc <LL_FLASH_GetUDN>
 8003844:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d10b      	bne.n	8003866 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800384e:	f000 f9ff 	bl	8003c50 <HAL_GetUIDw0>
 8003852:	4604      	mov	r4, r0
 8003854:	f000 fa06 	bl	8003c64 <HAL_GetUIDw1>
 8003858:	4603      	mov	r3, r0
 800385a:	405c      	eors	r4, r3
 800385c:	f000 fa0c 	bl	8003c78 <HAL_GetUIDw2>
 8003860:	4603      	mov	r3, r0
 8003862:	4063      	eors	r3, r4
 8003864:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8003866:	687b      	ldr	r3, [r7, #4]

}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}

08003870 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8003874:	f000 f917 	bl	8003aa6 <TIMER_IF_GetTimerValue>
 8003878:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800387a:	4618      	mov	r0, r3
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f93a 	bl	8003b02 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0
	return 1;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <_kill>:

int _kill(int pid, int sig)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038ae:	f016 fb79 	bl	8019fa4 <__errno>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2216      	movs	r2, #22
 80038b6:	601a      	str	r2, [r3, #0]
	return -1;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_exit>:

void _exit (int status)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ffe7 	bl	80038a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038d6:	e7fe      	b.n	80038d6 <_exit+0x12>

080038d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e00a      	b.n	8003900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038ea:	f3af 8000 	nop.w
 80038ee:	4601      	mov	r1, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	b2ca      	uxtb	r2, r1
 80038f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	dbf0      	blt.n	80038ea <_read+0x12>
	}

return len;
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e009      	b.n	8003938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	60ba      	str	r2, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fd2b 	bl	8002388 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3301      	adds	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	dbf1      	blt.n	8003924 <_write+0x12>
	}
	return len;
 8003940:	687b      	ldr	r3, [r7, #4]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_close>:

int _close(int file)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	return -1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003970:	605a      	str	r2, [r3, #4]
	return 0;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <_isatty>:

int _isatty(int file)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
	return 1;
 8003986:	2301      	movs	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
	return 0;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <_sbrk+0x5c>)
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <_sbrk+0x60>)
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <_sbrk+0x64>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <_sbrk+0x64>)
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <_sbrk+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <_sbrk+0x64>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d207      	bcs.n	80039ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039dc:	f016 fae2 	bl	8019fa4 <__errno>
 80039e0:	4603      	mov	r3, r0
 80039e2:	220c      	movs	r2, #12
 80039e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	e009      	b.n	8003a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <_sbrk+0x64>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039f2:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <_sbrk+0x64>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <_sbrk+0x64>)
 80039fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20008000 	.word	0x20008000
 8003a0c:	00000400 	.word	0x00000400
 8003a10:	20001024 	.word	0x20001024
 8003a14:	20001de0 	.word	0x20001de0

08003a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8003a6c:	4b02      	ldr	r3, [pc, #8]	; (8003a78 <TIMER_IF_SetTimerContext+0x10>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	20001028 	.word	0x20001028

08003a7c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8003a80:	4b02      	ldr	r3, [pc, #8]	; (8003a8c <TIMER_IF_GetTimerContext+0x10>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	20001028 	.word	0x20001028

08003a90 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8003a9a:	687b      	ldr	r3, [r7, #4]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8003ac6:	687b      	ldr	r3, [r7, #4]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8003ade:	68fb      	ldr	r3, [r7, #12]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 8003b5a:	687b      	ldr	r3, [r7, #4]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 8003b70:	687b      	ldr	r3, [r7, #4]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b80:	f7ff ff4a 	bl	8003a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b84:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <LoopForever+0xe>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b8c:	e002      	b.n	8003b94 <LoopCopyDataInit>

08003b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b92:	3304      	adds	r3, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b98:	d3f9      	bcc.n	8003b8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b9c:	4c0a      	ldr	r4, [pc, #40]	; (8003bc8 <LoopForever+0x16>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba0:	e001      	b.n	8003ba6 <LoopFillZerobss>

08003ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba4:	3204      	adds	r2, #4

08003ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba8:	d3fb      	bcc.n	8003ba2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003baa:	f016 fa01 	bl	8019fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bae:	f7fe fc89 	bl	80024c4 <main>

08003bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb2:	e7fe      	b.n	8003bb2 <LoopForever>
  ldr   r0, =_estack
 8003bb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bbc:	20000a98 	.word	0x20000a98
  ldr r2, =_sidata
 8003bc0:	08020ca0 	.word	0x08020ca0
  ldr r2, =_sbss
 8003bc4:	20000a98 	.word	0x20000a98
  ldr r4, =_ebss
 8003bc8:	20001de0 	.word	0x20001de0

08003bcc <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <AES_IRQHandler>
	...

08003bd0 <LL_VREFBUF_Disable>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <LL_VREFBUF_Disable+0x18>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <LL_VREFBUF_Disable+0x18>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	40010030 	.word	0x40010030

08003bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	f001 fa20 	bl	800503c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bfc:	f003 fe0c 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_Init+0x3c>)
 8003c04:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c06:	200f      	movs	r0, #15
 8003c08:	f7ff fc62 	bl	80034d0 <HAL_InitTick>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	71fb      	strb	r3, [r7, #7]
 8003c16:	e001      	b.n	8003c1c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c18:	f7ff fa5b 	bl	80030d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000008 	.word	0x20000008

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_IncTick+0x1c>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_IncTick+0x20>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a03      	ldr	r2, [pc, #12]	; (8003c4c <HAL_IncTick+0x20>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	2000102c 	.word	0x2000102c

08003c50 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_GetUIDw0+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	1fff7590 	.word	0x1fff7590

08003c64 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <HAL_GetUIDw1+0x10>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	1fff7594 	.word	0x1fff7594

08003c78 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <HAL_GetUIDw2+0x10>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	1fff7598 	.word	0x1fff7598

08003c8c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE : VREF+ pin is internally connect to VREFINT output.
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE : VREF+ pin is high impedance.
  * @retval HAL_OK/HAL_TIMEOUT
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 0202 	bic.w	r2, r3, #2
 8003c9c:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010030 	.word	0x40010030

08003cb4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  LL_VREFBUF_Disable();
 8003cb8:	f7ff ff8a 	bl	8003bd0 <LL_VREFBUF_Disable>
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2107      	movs	r1, #7
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	210f      	movs	r1, #15
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	f003 010f 	and.w	r1, r3, #15
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	0219      	lsls	r1, r3, #8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
 8003e24:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003e28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e4c:	f023 0317 	bic.w	r3, r3, #23
 8003e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e76:	d101      	bne.n	8003e7c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e98:	f023 0317 	bic.w	r3, r3, #23
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ebe:	f023 0317 	bic.w	r3, r3, #23
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <LL_ADC_IsEnabled+0x18>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LL_ADC_IsEnabled+0x1a>
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d101      	bne.n	8003f10 <LL_ADC_IsDisableOngoing+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_ADC_IsDisableOngoing+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f023 0317 	bic.w	r3, r3, #23
 8003f30:	f043 0204 	orr.w	r2, r3, #4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f52:	f023 0317 	bic.w	r3, r3, #23
 8003f56:	f043 0210 	orr.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d101      	bne.n	8003f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1ae      	b.n	800430c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff f8ab 	bl	8003118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff44 	bl	8003e62 <LL_ADC_IsInternalRegulatorEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff29 	bl	8003e3c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fea:	4b9b      	ldr	r3, [pc, #620]	; (8004258 <HAL_ADC_Init+0x2cc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	4a9a      	ldr	r2, [pc, #616]	; (800425c <HAL_ADC_Init+0x2d0>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	099b      	lsrs	r3, r3, #6
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ffe:	e002      	b.n	8004006 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3b01      	subs	r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f9      	bne.n	8004000 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff26 	bl	8003e62 <LL_ADC_IsInternalRegulatorEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f043 0210 	orr.w	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff93 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004042:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8154 	bne.w	80042fa <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 8150 	bne.w	80042fa <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff30 	bl	8003ed4 <LL_ADC_IsEnabled>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d14f      	bne.n	800411a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f023 0118 	bic.w	r1, r3, #24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800409c:	4313      	orrs	r3, r2
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d111      	bne.n	80040d2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80040ba:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80040c0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80040c6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	4b61      	ldr	r3, [pc, #388]	; (8004260 <HAL_ADC_Init+0x2d4>)
 80040da:	4013      	ands	r3, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80040ee:	d014      	beq.n	800411a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f8:	d00f      	beq.n	800411a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80040fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004102:	d00a      	beq.n	800411a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004104:	4b57      	ldr	r3, [pc, #348]	; (8004264 <HAL_ADC_Init+0x2d8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004114:	4953      	ldr	r1, [pc, #332]	; (8004264 <HAL_ADC_Init+0x2d8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7e1b      	ldrb	r3, [r3, #24]
 800411e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	7e5b      	ldrb	r3, [r3, #25]
 8004124:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004126:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7e9b      	ldrb	r3, [r3, #26]
 800412c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800412e:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004134:	2a00      	cmp	r2, #0
 8004136:	d002      	beq.n	800413e <HAL_ADC_Init+0x1b2>
 8004138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800413c:	e000      	b.n	8004140 <HAL_ADC_Init+0x1b4>
 800413e:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004140:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004146:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	da04      	bge.n	800415a <HAL_ADC_Init+0x1ce>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004158:	e001      	b.n	800415e <HAL_ADC_Init+0x1d2>
 800415a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800415e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004166:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004168:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7e9b      	ldrb	r3, [r3, #26]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e00b      	b.n	80041a4 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d009      	beq.n	80041c0 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80041b8:	4313      	orrs	r3, r2
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80041ca:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <HAL_ADC_Init+0x2dc>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	6979      	ldr	r1, [r7, #20]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	461a      	mov	r2, r3
 80041f6:	2100      	movs	r1, #0
 80041f8:	f7ff fd81 	bl	8003cfe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	461a      	mov	r2, r3
 8004206:	4919      	ldr	r1, [pc, #100]	; (800426c <HAL_ADC_Init+0x2e0>)
 8004208:	f7ff fd79 	bl	8003cfe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f062 020f 	orn	r2, r2, #15
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
 8004224:	e044      	b.n	80042b0 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800422e:	d13f      	bne.n	80042b0 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	e00c      	b.n	8004250 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	2b0f      	cmp	r3, #15
 8004248:	d012      	beq.n	8004270 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b07      	cmp	r3, #7
 8004254:	d9ef      	bls.n	8004236 <HAL_ADC_Init+0x2aa>
 8004256:	e00c      	b.n	8004272 <HAL_ADC_Init+0x2e6>
 8004258:	20000008 	.word	0x20000008
 800425c:	053e2d63 	.word	0x053e2d63
 8004260:	1ffffc02 	.word	0x1ffffc02
 8004264:	40012708 	.word	0x40012708
 8004268:	dffffc02 	.word	0xdffffc02
 800426c:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8004270:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f062 020f 	orn	r2, r2, #15
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
 8004288:	e012      	b.n	80042b0 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	3b01      	subs	r3, #1
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f003 031c 	and.w	r3, r3, #28
 800429c:	f06f 020f 	mvn.w	r2, #15
 80042a0:	fa02 f103 	lsl.w	r1, r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_ADC_Init+0x388>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d10b      	bne.n	80042d8 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042d6:	e018      	b.n	800430a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f023 0312 	bic.w	r3, r3, #18
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042f8:	e007      	b.n	800430a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f043 0210 	orr.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800430a:	7ffb      	ldrb	r3, [r7, #31]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	833fffe7 	.word	0x833fffe7

08004318 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fe1f 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d132      	bne.n	8004396 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_ADC_Start+0x26>
 800433a:	2302      	movs	r3, #2
 800433c:	e02e      	b.n	800439c <HAL_ADC_Start+0x84>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fc38 	bl	8004bbc <ADC_Enable>
 800434c:	4603      	mov	r3, r0
 800434e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11a      	bne.n	800438c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	221c      	movs	r2, #28
 8004376:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fdc9 	bl	8003f1c <LL_ADC_REG_StartConversion>
 800438a:	e006      	b.n	800439a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004394:	e001      	b.n	800439a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004396:	2302      	movs	r3, #2
 8004398:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_Stop+0x16>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e022      	b.n	8004400 <HAL_ADC_Stop+0x5c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fbb4 	bl	8004b30 <ADC_ConversionStop>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d111      	bne.n	80043f6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fc78 	bl	8004cc8 <ADC_Disable>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d102      	bne.n	8004420 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800441a:	2308      	movs	r3, #8
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e010      	b.n	8004442 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	f043 0220 	orr.w	r2, r3, #32
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e077      	b.n	800452e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800443e:	2304      	movs	r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004442:	f7ff fa15 	bl	8003870 <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004448:	e021      	b.n	800448e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004450:	d01d      	beq.n	800448e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004452:	f7ff fa0d 	bl	8003870 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d302      	bcc.n	8004468 <HAL_ADC_PollForConversion+0x60>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d112      	bne.n	800448e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e04f      	b.n	800452e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0d6      	beq.n	800444a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fc44 	bl	8003d3a <LL_ADC_REG_IsTriggerSourceSWStart>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d031      	beq.n	800451c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	7e9b      	ldrb	r3, [r3, #26]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d12d      	bne.n	800451c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d126      	bne.n	800451c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fd48 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d112      	bne.n	8004504 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 020c 	bic.w	r2, r2, #12
 80044ec:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	659a      	str	r2, [r3, #88]	; 0x58
 8004502:	e00b      	b.n	800451c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	f043 0201 	orr.w	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	7e1b      	ldrb	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d103      	bne.n	800452c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	220c      	movs	r2, #12
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fd0d 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d169      	bne.n	8004628 <HAL_ADC_Start_DMA+0xf0>
  {
    __HAL_LOCK(hadc);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_ADC_Start_DMA+0x2a>
 800455e:	2302      	movs	r3, #2
 8004560:	e065      	b.n	800462e <HAL_ADC_Start_DMA+0xf6>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d114      	bne.n	80045a2 <HAL_ADC_Start_DMA+0x6a>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fca9 	bl	8003ed4 <LL_ADC_IsEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <HAL_ADC_Start_DMA+0x5a>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fc8e 	bl	8003eae <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fb0a 	bl	8004bbc <ADC_Enable>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13c      	bne.n	800462c <HAL_ADC_Start_DMA+0xf4>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	4a19      	ldr	r2, [pc, #100]	; (8004638 <HAL_ADC_Start_DMA+0x100>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_ADC_Start_DMA+0x104>)
 80045da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <HAL_ADC_Start_DMA+0x108>)
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	221c      	movs	r2, #28
 80045ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0210 	orr.w	r2, r2, #16
 8004602:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3340      	adds	r3, #64	; 0x40
 800460e:	4619      	mov	r1, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f000 fdee 	bl	80051f4 <HAL_DMA_Start_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc7b 	bl	8003f1c <LL_ADC_REG_StartConversion>
 8004626:	e001      	b.n	800462c <HAL_ADC_Start_DMA+0xf4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004628:	2302      	movs	r3, #2
 800462a:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	08004d87 	.word	0x08004d87
 800463c:	08004e4f 	.word	0x08004e4f
 8004640:	08004e6b 	.word	0x08004e6b

08004644 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d017      	beq.n	800469a <HAL_ADC_IRQHandler+0x56>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fc18 	bl	8004ec2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2202      	movs	r2, #2
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_ADC_IRQHandler+0x6a>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d051      	beq.n	800475c <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04c      	beq.n	800475c <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fb2b 	bl	8003d3a <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d031      	beq.n	800474e <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	7e9b      	ldrb	r3, [r3, #26]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d12d      	bne.n	800474e <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d126      	bne.n	800474e <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fc2f 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d112      	bne.n	8004736 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 020c 	bic.w	r2, r2, #12
 800471e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	f043 0201 	orr.w	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58
 8004734:	e00b      	b.n	800474e <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	f043 0201 	orr.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f892 	bl	8004878 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	220c      	movs	r2, #12
 800475a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_ADC_IRQHandler+0x146>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f88d 	bl	800489c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <HAL_ADC_IRQHandler+0x176>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb77 	bl	8004e9e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_ADC_IRQHandler+0x1a6>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fb68 	bl	8004eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02b      	beq.n	800484c <HAL_ADC_IRQHandler+0x208>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d026      	beq.n	800484c <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 8004806:	2301      	movs	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e009      	b.n	8004820 <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff faea 	bl	8003dea <LL_ADC_REG_GetDMATransfer>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 800481c:	2301      	movs	r3, #1
 800481e:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10e      	bne.n	8004844 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f835 	bl	80048ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2210      	movs	r2, #16
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_ADC_IRQHandler+0x22c>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb37 	bl	8004ed4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486e:	601a      	str	r2, [r3, #0]
  }
}
 8004870:	bf00      	nop
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x28>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e110      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x24a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fb37 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 80f7 	bne.w	8004af0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	f000 80b1 	beq.w	8004a6e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004914:	d004      	beq.n	8004920 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800491a:	4a7e      	ldr	r2, [pc, #504]	; (8004b14 <HAL_ADC_ConfigChannel+0x254>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d108      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7ff fa38 	bl	8003da0 <LL_ADC_REG_SetSequencerChAdd>
 8004930:	e041      	b.n	80049b6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	210f      	movs	r1, #15
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_ADC_ConfigChannel+0xa0>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	e011      	b.n	8004984 <HAL_ADC_ConfigChannel+0xc4>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004978:	2320      	movs	r3, #32
 800497a:	e003      	b.n	8004984 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	6849      	ldr	r1, [r1, #4]
 8004988:	f001 011f 	and.w	r1, r1, #31
 800498c:	408b      	lsls	r3, r1
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d808      	bhi.n	80049b6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f7ff f9d4 	bl	8003d5e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6819      	ldr	r1, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7ff fa1e 	bl	8003e04 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f280 8097 	bge.w	8004b00 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d2:	4851      	ldr	r0, [pc, #324]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 80049d4:	f7ff f986 	bl	8003ce4 <LL_ADC_GetCommonPathInternalCh>
 80049d8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4f      	ldr	r2, [pc, #316]	; (8004b1c <HAL_ADC_ConfigChannel+0x25c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d120      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11b      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049f4:	4619      	mov	r1, r3
 80049f6:	4848      	ldr	r0, [pc, #288]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 80049f8:	f7ff f962 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049fc:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <HAL_ADC_ConfigChannel+0x260>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	4a48      	ldr	r2, [pc, #288]	; (8004b24 <HAL_ADC_ConfigChannel+0x264>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	099b      	lsrs	r3, r3, #6
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a16:	e002      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f9      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a24:	e06c      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3f      	ldr	r2, [pc, #252]	; (8004b28 <HAL_ADC_ConfigChannel+0x268>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10c      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x18a>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a40:	4619      	mov	r1, r3
 8004a42:	4835      	ldr	r0, [pc, #212]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004a44:	f7ff f93c 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
 8004a48:	e05a      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a37      	ldr	r2, [pc, #220]	; (8004b2c <HAL_ADC_ConfigChannel+0x26c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d155      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d150      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a64:	4619      	mov	r1, r3
 8004a66:	482c      	ldr	r0, [pc, #176]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004a68:	f7ff f92a 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
 8004a6c:	e048      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a76:	d004      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a7c:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <HAL_ADC_ConfigChannel+0x254>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d107      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7ff f999 	bl	8003dc4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da32      	bge.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a9a:	481f      	ldr	r0, [pc, #124]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004a9c:	f7ff f922 	bl	8003ce4 <LL_ADC_GetCommonPathInternalCh>
 8004aa0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_ADC_ConfigChannel+0x25c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d107      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4818      	ldr	r0, [pc, #96]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004ab6:	f7ff f903 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
 8004aba:	e021      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_ADC_ConfigChannel+0x268>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d107      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004acc:	4619      	mov	r1, r3
 8004ace:	4812      	ldr	r0, [pc, #72]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004ad0:	f7ff f8f6 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
 8004ad4:	e014      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <HAL_ADC_ConfigChannel+0x26c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10f      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <HAL_ADC_ConfigChannel+0x258>)
 8004aea:	f7ff f8e9 	bl	8003cc0 <LL_ADC_SetCommonPathInternalCh>
 8004aee:	e007      	b.n	8004b00 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	80000004 	.word	0x80000004
 8004b18:	40012708 	.word	0x40012708
 8004b1c:	b0001000 	.word	0xb0001000
 8004b20:	20000008 	.word	0x20000008
 8004b24:	053e2d63 	.word	0x053e2d63
 8004b28:	b8004000 	.word	0xb8004000
 8004b2c:	b4002000 	.word	0xb4002000

08004b30 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fa13 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d033      	beq.n	8004bb0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff f9d3 	bl	8003ef8 <LL_ADC_IsDisableOngoing>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f9f0 	bl	8003f42 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b62:	f7fe fe85 	bl	8003870 <HAL_GetTick>
 8004b66:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b68:	e01b      	b.n	8004ba2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b6a:	f7fe fe81 	bl	8003870 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d914      	bls.n	8004ba2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00d      	beq.n	8004ba2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e007      	b.n	8004bb2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1dc      	bne.n	8004b6a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f981 	bl	8003ed4 <LL_ADC_IsEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d169      	bne.n	8004cac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <ADC_Enable+0xfc>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f043 0210 	orr.w	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	f043 0201 	orr.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e055      	b.n	8004cae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff f93e 	bl	8003e88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004c0c:	482b      	ldr	r0, [pc, #172]	; (8004cbc <ADC_Enable+0x100>)
 8004c0e:	f7ff f869 	bl	8003ce4 <LL_ADC_GetCommonPathInternalCh>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00f      	beq.n	8004c3c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c1c:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <ADC_Enable+0x104>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <ADC_Enable+0x108>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c2e:	e002      	b.n	8004c36 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f9      	bne.n	8004c30 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7e5b      	ldrb	r3, [r3, #25]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d033      	beq.n	8004cac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004c44:	f7fe fe14 	bl	8003870 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c4a:	e028      	b.n	8004c9e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff f93f 	bl	8003ed4 <LL_ADC_IsEnabled>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff f911 	bl	8003e88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c66:	f7fe fe03 	bl	8003870 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d914      	bls.n	8004c9e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d00d      	beq.n	8004c9e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e007      	b.n	8004cae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d1cf      	bne.n	8004c4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	80000017 	.word	0x80000017
 8004cbc:	40012708 	.word	0x40012708
 8004cc0:	20000008 	.word	0x20000008
 8004cc4:	053e2d63 	.word	0x053e2d63

08004cc8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff f90f 	bl	8003ef8 <LL_ADC_IsDisableOngoing>
 8004cda:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f8f7 	bl	8003ed4 <LL_ADC_IsEnabled>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d047      	beq.n	8004d7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d144      	bne.n	8004d7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0305 	and.w	r3, r3, #5
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10c      	bne.n	8004d1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f8d2 	bl	8003eae <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d12:	f7fe fdad 	bl	8003870 <HAL_GetTick>
 8004d16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d18:	e029      	b.n	8004d6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	f043 0210 	orr.w	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e023      	b.n	8004d7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d36:	f7fe fd9b 	bl	8003870 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d914      	bls.n	8004d6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f043 0210 	orr.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1dc      	bne.n	8004d36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d143      	bne.n	8004e28 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fe ffc2 	bl	8003d3a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d031      	beq.n	8004e20 <ADC_DMAConvCplt+0x9a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	7e9b      	ldrb	r3, [r3, #26]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d12d      	bne.n	8004e20 <ADC_DMAConvCplt+0x9a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d126      	bne.n	8004e20 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff f8c6 	bl	8003f68 <LL_ADC_REG_IsConversionOngoing>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d112      	bne.n	8004e08 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 020c 	bic.w	r2, r2, #12
 8004df0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	659a      	str	r2, [r3, #88]	; 0x58
 8004e06:	e00b      	b.n	8004e20 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff fd29 	bl	8004878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e26:	e00e      	b.n	8004e46 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fd3a 	bl	80048ae <HAL_ADC_ErrorCallback>
}
 8004e3a:	e004      	b.n	8004e46 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	4798      	blx	r3
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff fd14 	bl	800488a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	f043 0204 	orr.w	r2, r3, #4
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff fd0c 	bl	80048ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr
	...

08004ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f04:	4013      	ands	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	60d3      	str	r3, [r2, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <__NVIC_GetPriorityGrouping+0x18>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 0307 	and.w	r3, r3, #7
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	db0b      	blt.n	8004f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	f003 021f 	and.w	r2, r3, #31
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <__NVIC_EnableIRQ+0x34>)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db0a      	blt.n	8004fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	490c      	ldr	r1, [pc, #48]	; (8004fd0 <__NVIC_SetPriority+0x4c>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fac:	e00a      	b.n	8004fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4908      	ldr	r1, [pc, #32]	; (8004fd4 <__NVIC_SetPriority+0x50>)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	761a      	strb	r2, [r3, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	e000e100 	.word	0xe000e100
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f1c3 0307 	rsb	r3, r3, #7
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf28      	it	cs
 8004ff6:	2304      	movcs	r3, #4
 8004ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d902      	bls.n	8005008 <NVIC_EncodePriority+0x30>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3b03      	subs	r3, #3
 8005006:	e000      	b.n	800500a <NVIC_EncodePriority+0x32>
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	401a      	ands	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005020:	f04f 31ff 	mov.w	r1, #4294967295
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	43d9      	mvns	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005030:	4313      	orrs	r3, r2
         );
}
 8005032:	4618      	mov	r0, r3
 8005034:	3724      	adds	r7, #36	; 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ff4f 	bl	8004ee8 <__NVIC_SetPriorityGrouping>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	4603      	mov	r3, r0
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005060:	f7ff ff66 	bl	8004f30 <__NVIC_GetPriorityGrouping>
 8005064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ffb4 	bl	8004fd8 <NVIC_EncodePriority>
 8005070:	4602      	mov	r2, r0
 8005072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff83 	bl	8004f84 <__NVIC_SetPriority>
}
 800507e:	bf00      	nop
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	4603      	mov	r3, r0
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ff59 	bl	8004f4c <__NVIC_EnableIRQ>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e08e      	b.n	80051d4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_DMA_Init+0x138>)
 80050be:	429a      	cmp	r2, r3
 80050c0:	d80f      	bhi.n	80050e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <HAL_DMA_Init+0x13c>)
 80050ca:	4413      	add	r3, r2
 80050cc:	4a45      	ldr	r2, [pc, #276]	; (80051e4 <HAL_DMA_Init+0x140>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	009a      	lsls	r2, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a42      	ldr	r2, [pc, #264]	; (80051e8 <HAL_DMA_Init+0x144>)
 80050de:	641a      	str	r2, [r3, #64]	; 0x40
 80050e0:	e00e      	b.n	8005100 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <HAL_DMA_Init+0x148>)
 80050ea:	4413      	add	r3, r2
 80050ec:	4a3d      	ldr	r2, [pc, #244]	; (80051e4 <HAL_DMA_Init+0x140>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <HAL_DMA_Init+0x14c>)
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa8e 	bl	8005674 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005160:	d102      	bne.n	8005168 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005174:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800517e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_DMA_Init+0x106>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d80c      	bhi.n	80051aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fab7 	bl	8005704 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	e008      	b.n	80051bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40020407 	.word	0x40020407
 80051e0:	bffdfff8 	.word	0xbffdfff8
 80051e4:	cccccccd 	.word	0xcccccccd
 80051e8:	40020000 	.word	0x40020000
 80051ec:	bffdfbf8 	.word	0xbffdfbf8
 80051f0:	40020400 	.word	0x40020400

080051f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_DMA_Start_IT+0x20>
 8005210:	2302      	movs	r3, #2
 8005212:	e069      	b.n	80052e8 <HAL_DMA_Start_IT+0xf4>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d155      	bne.n	80052d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f9d3 	bl	80055f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 020e 	orr.w	r2, r2, #14
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e00f      	b.n	800528c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 020a 	orr.w	r2, r2, #10
 800528a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e008      	b.n	80052e6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2280      	movs	r2, #128	; 0x80
 80052d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e04f      	b.n	80053a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d008      	beq.n	8005320 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2204      	movs	r2, #4
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e040      	b.n	80053a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 020e 	bic.w	r2, r2, #14
 800532e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	f003 021c 	and.w	r2, r3, #28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f202 	lsl.w	r2, r1, r2
 8005362:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800536c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005384:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800538e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d005      	beq.n	80053d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2204      	movs	r2, #4
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e047      	b.n	8005460 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 020e 	bic.w	r2, r2, #14
 80053de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f003 021c 	and.w	r2, r3, #28
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800541c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005434:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800543e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    }
  }
  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f003 031c 	and.w	r3, r3, #28
 800548c:	2204      	movs	r2, #4
 800548e:	409a      	lsls	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4013      	ands	r3, r2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d027      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x7c>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d022      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	f003 021c 	and.w	r2, r3, #28
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2104      	movs	r1, #4
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8081 	beq.w	80055e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80054e6:	e07b      	b.n	80055e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f003 031c 	and.w	r3, r3, #28
 80054f0:	2202      	movs	r2, #2
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d03d      	beq.n	8005578 <HAL_DMA_IRQHandler+0x10c>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d038      	beq.n	8005578 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 020a 	bic.w	r2, r2, #10
 8005522:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	4b2e      	ldr	r3, [pc, #184]	; (80055ec <HAL_DMA_IRQHandler+0x180>)
 8005534:	429a      	cmp	r2, r3
 8005536:	d909      	bls.n	800554c <HAL_DMA_IRQHandler+0xe0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 031c 	and.w	r3, r3, #28
 8005540:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_DMA_IRQHandler+0x184>)
 8005542:	2102      	movs	r1, #2
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	6053      	str	r3, [r2, #4]
 800554a:	e008      	b.n	800555e <HAL_DMA_IRQHandler+0xf2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f003 031c 	and.w	r3, r3, #28
 8005554:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_DMA_IRQHandler+0x188>)
 8005556:	2102      	movs	r1, #2
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d038      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005576:	e033      	b.n	80055e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	f003 031c 	and.w	r3, r3, #28
 8005580:	2208      	movs	r2, #8
 8005582:	409a      	lsls	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02a      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x176>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d025      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 020e 	bic.w	r2, r2, #14
 80055a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f003 021c 	and.w	r2, r3, #28
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f202 	lsl.w	r2, r1, r2
 80055b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
}
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40020080 	.word	0x40020080
 80055f0:	40020400 	.word	0x40020400
 80055f4:	40020000 	.word	0x40020000

080055f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800560e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005620:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f003 021c 	and.w	r2, r3, #28
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2101      	movs	r1, #1
 8005630:	fa01 f202 	lsl.w	r2, r1, r2
 8005634:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b10      	cmp	r3, #16
 8005644:	d108      	bne.n	8005658 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005656:	e007      	b.n	8005668 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
	...

08005674 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005684:	429a      	cmp	r2, r3
 8005686:	d813      	bhi.n	80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005694:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3b08      	subs	r3, #8
 80056a4:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e011      	b.n	80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	089b      	lsrs	r3, r3, #2
 80056b6:	009a      	lsls	r2, r3, #2
 80056b8:	4b10      	ldr	r3, [pc, #64]	; (80056fc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80056ba:	4413      	add	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	3b08      	subs	r3, #8
 80056c8:	4a0b      	ldr	r2, [pc, #44]	; (80056f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	3307      	adds	r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80056d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	409a      	lsls	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40020407 	.word	0x40020407
 80056f8:	cccccccd 	.word	0xcccccccd
 80056fc:	4002081c 	.word	0x4002081c
 8005700:	40020880 	.word	0x40020880

08005704 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005714:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005728:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3b01      	subs	r3, #1
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2201      	movs	r2, #1
 8005734:	409a      	lsls	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	1000823f 	.word	0x1000823f
 8005748:	40020940 	.word	0x40020940

0800574c <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d12b      	bne.n	80057ba <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_DMAEx_ConfigMuxSync+0x24>
 800576c:	2302      	movs	r3, #2
 800576e:	e028      	b.n	80057c2 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	3b01      	subs	r3, #1
 800578c:	04db      	lsls	r3, r3, #19
 800578e:	431a      	orrs	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	431a      	orrs	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	7a1b      	ldrb	r3, [r3, #8]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	7a5b      	ldrb	r3, [r3, #9]
 80057a2:	025b      	lsls	r3, r3, #9
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057aa:	430a      	orrs	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e003      	b.n	80057c2 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2280      	movs	r2, #128	; 0x80
 80057be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01a      	beq.n	800581a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d022      	beq.n	8005868 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800584a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
      }
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800587e:	e140      	b.n	8005b02 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	2101      	movs	r1, #1
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	fa01 f303 	lsl.w	r3, r1, r3
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8132 	beq.w	8005afc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d005      	beq.n	80058b0 <HAL_GPIO_Init+0x40>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0303 	and.w	r3, r3, #3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d130      	bne.n	8005912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	2203      	movs	r2, #3
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4013      	ands	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058e6:	2201      	movs	r2, #1
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f003 0201 	and.w	r2, r3, #1
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b03      	cmp	r3, #3
 800591c:	d017      	beq.n	800594e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	2203      	movs	r2, #3
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4013      	ands	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d123      	bne.n	80059a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	08da      	lsrs	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3208      	adds	r2, #8
 8005962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	220f      	movs	r2, #15
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	08da      	lsrs	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3208      	adds	r2, #8
 800599c:	6939      	ldr	r1, [r7, #16]
 800599e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	2203      	movs	r2, #3
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 0203 	and.w	r2, r3, #3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 808c 	beq.w	8005afc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80059e4:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <HAL_GPIO_Init+0x2b0>)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	3302      	adds	r3, #2
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	2207      	movs	r2, #7
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	43db      	mvns	r3, r3
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4013      	ands	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a0e:	d00d      	beq.n	8005a2c <HAL_GPIO_Init+0x1bc>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a44      	ldr	r2, [pc, #272]	; (8005b24 <HAL_GPIO_Init+0x2b4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <HAL_GPIO_Init+0x1b8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a43      	ldr	r2, [pc, #268]	; (8005b28 <HAL_GPIO_Init+0x2b8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_GPIO_Init+0x1b4>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e004      	b.n	8005a2e <HAL_GPIO_Init+0x1be>
 8005a24:	2307      	movs	r3, #7
 8005a26:	e002      	b.n	8005a2e <HAL_GPIO_Init+0x1be>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_GPIO_Init+0x1be>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	f002 0203 	and.w	r2, r2, #3
 8005a34:	0092      	lsls	r2, r2, #2
 8005a36:	4093      	lsls	r3, r2
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a3e:	4938      	ldr	r1, [pc, #224]	; (8005b20 <HAL_GPIO_Init+0x2b0>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	3302      	adds	r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005a4c:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a52:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005a72:	4a2e      	ldr	r2, [pc, #184]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a80:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	43db      	mvns	r3, r3
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005acc:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005af6:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <HAL_GPIO_Init+0x2bc>)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3301      	adds	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f aeb7 	bne.w	8005880 <HAL_GPIO_Init+0x10>
  }
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	48000400 	.word	0x48000400
 8005b28:	48000800 	.word	0x48000800
 8005b2c:	58000800 	.word	0x58000800

08005b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b40:	787b      	ldrb	r3, [r7, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b4c:	e002      	b.n	8005b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b4e:	887a      	ldrh	r2, [r7, #2]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b70:	887a      	ldrh	r2, [r7, #2]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4013      	ands	r3, r2
 8005b76:	041a      	lsls	r2, r3, #16
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	43d9      	mvns	r1, r3
 8005b7c:	887b      	ldrh	r3, [r7, #2]
 8005b7e:	400b      	ands	r3, r1
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e081      	b.n	8005ca6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fd fb40 	bl	800323c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2224      	movs	r2, #36	; 0x24
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e006      	b.n	8005c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d104      	bne.n	8005c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	817b      	strh	r3, [r7, #10]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	813b      	strh	r3, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	f040 80f9 	bne.w	8005eca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_I2C_Mem_Write+0x34>
 8005cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d105      	bne.n	8005cf0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0ed      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_I2C_Mem_Write+0x4e>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e0e6      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d06:	f7fd fdb3 	bl	8003870 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	2319      	movs	r3, #25
 8005d12:	2201      	movs	r2, #1
 8005d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fac2 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0d1      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2221      	movs	r2, #33	; 0x21
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2240      	movs	r2, #64	; 0x40
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a3a      	ldr	r2, [r7, #32]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d50:	88f8      	ldrh	r0, [r7, #6]
 8005d52:	893a      	ldrh	r2, [r7, #8]
 8005d54:	8979      	ldrh	r1, [r7, #10]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	4603      	mov	r3, r0
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f9d3 	bl	800610c <I2C_RequestMemoryWrite>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0a9      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2bff      	cmp	r3, #255	; 0xff
 8005d80:	d90e      	bls.n	8005da0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	8979      	ldrh	r1, [r7, #10]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fbb5 	bl	8006508 <I2C_TransferConfig>
 8005d9e:	e00f      	b.n	8005dc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	8979      	ldrh	r1, [r7, #10]
 8005db2:	2300      	movs	r3, #0
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fba4 	bl	8006508 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 faac 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e07b      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d034      	beq.n	8005e78 <HAL_I2C_Mem_Write+0x1c8>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d130      	bne.n	8005e78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2180      	movs	r1, #128	; 0x80
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fa3e 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e04d      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2bff      	cmp	r3, #255	; 0xff
 8005e38:	d90e      	bls.n	8005e58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	22ff      	movs	r2, #255	; 0xff
 8005e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	8979      	ldrh	r1, [r7, #10]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fb59 	bl	8006508 <I2C_TransferConfig>
 8005e56:	e00f      	b.n	8005e78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	8979      	ldrh	r1, [r7, #10]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fb48 	bl	8006508 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d19e      	bne.n	8005dc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fa8b 	bl	80063a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e01a      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_I2C_Mem_Write+0x224>)
 8005eaa:	400b      	ands	r3, r1
 8005eac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e000      	b.n	8005ecc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
  }
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	fe00e800 	.word	0xfe00e800

08005ed8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	817b      	strh	r3, [r7, #10]
 8005eea:	460b      	mov	r3, r1
 8005eec:	813b      	strh	r3, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	f040 80fd 	bne.w	80060fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_I2C_Mem_Read+0x34>
 8005f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0f1      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_I2C_Mem_Read+0x4e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e0ea      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f2e:	f7fd fc9f 	bl	8003870 <HAL_GetTick>
 8005f32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	2319      	movs	r3, #25
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f9ae 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0d5      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2222      	movs	r2, #34	; 0x22
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f78:	88f8      	ldrh	r0, [r7, #6]
 8005f7a:	893a      	ldrh	r2, [r7, #8]
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4603      	mov	r3, r0
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f913 	bl	80061b4 <I2C_RequestMemoryRead>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0ad      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2bff      	cmp	r3, #255	; 0xff
 8005fa8:	d90e      	bls.n	8005fc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	8979      	ldrh	r1, [r7, #10]
 8005fb8:	4b52      	ldr	r3, [pc, #328]	; (8006104 <HAL_I2C_Mem_Read+0x22c>)
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 faa1 	bl	8006508 <I2C_TransferConfig>
 8005fc6:	e00f      	b.n	8005fe8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	8979      	ldrh	r1, [r7, #10]
 8005fda:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <HAL_I2C_Mem_Read+0x22c>)
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fa90 	bl	8006508 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f955 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e07c      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d034      	beq.n	80060a8 <HAL_I2C_Mem_Read+0x1d0>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d130      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2200      	movs	r2, #0
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f926 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e04d      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d90e      	bls.n	8006088 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	22ff      	movs	r2, #255	; 0xff
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	8979      	ldrh	r1, [r7, #10]
 8006078:	2300      	movs	r3, #0
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fa41 	bl	8006508 <I2C_TransferConfig>
 8006086:	e00f      	b.n	80060a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	b2da      	uxtb	r2, r3
 8006098:	8979      	ldrh	r1, [r7, #10]
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fa30 	bl	8006508 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d19a      	bne.n	8005fe8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 f973 	bl	80063a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e01a      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2220      	movs	r2, #32
 80060cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <HAL_I2C_Mem_Read+0x230>)
 80060da:	400b      	ands	r3, r1
 80060dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e000      	b.n	80060fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060fa:	2302      	movs	r3, #2
  }
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	80002400 	.word	0x80002400
 8006108:	fe00e800 	.word	0xfe00e800

0800610c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	461a      	mov	r2, r3
 800611a:	4603      	mov	r3, r0
 800611c:	817b      	strh	r3, [r7, #10]
 800611e:	460b      	mov	r3, r1
 8006120:	813b      	strh	r3, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	8979      	ldrh	r1, [r7, #10]
 800612c:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <I2C_RequestMemoryWrite+0xa4>)
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f9e7 	bl	8006508 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	69b9      	ldr	r1, [r7, #24]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f8ef 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e02c      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006154:	893b      	ldrh	r3, [r7, #8]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	629a      	str	r2, [r3, #40]	; 0x28
 800615e:	e015      	b.n	800618c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006160:	893b      	ldrh	r3, [r7, #8]
 8006162:	0a1b      	lsrs	r3, r3, #8
 8006164:	b29b      	uxth	r3, r3
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f8d5 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e012      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2200      	movs	r2, #0
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f883 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	80002000 	.word	0x80002000

080061b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	817b      	strh	r3, [r7, #10]
 80061c6:	460b      	mov	r3, r1
 80061c8:	813b      	strh	r3, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	8979      	ldrh	r1, [r7, #10]
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <I2C_RequestMemoryRead+0xa4>)
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f994 	bl	8006508 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f89c 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e02c      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061fa:	893b      	ldrh	r3, [r7, #8]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
 8006204:	e015      	b.n	8006232 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b29b      	uxth	r3, r3
 800620c:	b2da      	uxtb	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	69b9      	ldr	r1, [r7, #24]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f882 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e012      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2200      	movs	r2, #0
 800623a:	2140      	movs	r1, #64	; 0x40
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f830 	bl	80062a2 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	80002000 	.word	0x80002000

0800625c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d103      	bne.n	800627a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d007      	beq.n	8006298 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	619a      	str	r2, [r3, #24]
  }
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b2:	e022      	b.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d01e      	beq.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062bc:	f7fd fad8 	bl	8003870 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d113      	bne.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e00f      	b.n	800631a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	429a      	cmp	r2, r3
 8006308:	bf0c      	ite	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	2300      	movne	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	429a      	cmp	r2, r3
 8006316:	d0cd      	beq.n	80062b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800632e:	e02c      	b.n	800638a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f871 	bl	800641c <I2C_IsAcknowledgeFailed>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e02a      	b.n	800639a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d01e      	beq.n	800638a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	f7fd fa90 	bl	8003870 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d113      	bne.n	800638a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e007      	b.n	800639a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d1cb      	bne.n	8006330 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ae:	e028      	b.n	8006402 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f831 	bl	800641c <I2C_IsAcknowledgeFailed>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e026      	b.n	8006412 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fd fa54 	bl	8003870 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d113      	bne.n	8006402 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e007      	b.n	8006412 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b20      	cmp	r3, #32
 800640e:	d1cf      	bne.n	80063b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b10      	cmp	r3, #16
 8006434:	d161      	bne.n	80064fa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006444:	d02b      	beq.n	800649e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006454:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006456:	e022      	b.n	800649e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d01e      	beq.n	800649e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006460:	f7fd fa06 	bl	8003870 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <I2C_IsAcknowledgeFailed+0x5a>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d113      	bne.n	800649e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02e      	b.n	80064fc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d1d5      	bne.n	8006458 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2210      	movs	r2, #16
 80064b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2220      	movs	r2, #32
 80064ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fecd 	bl	800625c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6859      	ldr	r1, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <I2C_IsAcknowledgeFailed+0xe8>)
 80064ce:	400b      	ands	r3, r1
 80064d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	f043 0204 	orr.w	r2, r3, #4
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	fe00e800 	.word	0xfe00e800

08006508 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	4613      	mov	r3, r2
 8006518:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	0d5b      	lsrs	r3, r3, #21
 8006524:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <I2C_TransferConfig+0x54>)
 800652a:	430b      	orrs	r3, r1
 800652c:	43db      	mvns	r3, r3
 800652e:	ea02 0103 	and.w	r1, r2, r3
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006538:	7a7b      	ldrb	r3, [r7, #9]
 800653a:	041b      	lsls	r3, r3, #16
 800653c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	431a      	orrs	r2, r3
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	03ff63ff 	.word	0x03ff63ff

08006560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d138      	bne.n	80065e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006580:	2302      	movs	r3, #2
 8006582:	e032      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	; 0x24
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	d139      	bne.n	800667e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006614:	2302      	movs	r3, #2
 8006616:	e033      	b.n	8006680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006646:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0201 	orr.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
	...

0800668c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006694:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8006696:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800669a:	4905      	ldr	r1, [pc, #20]	; (80066b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	58000800 	.word	0x58000800

080066b4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80066be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	4904      	ldr	r1, [pc, #16]	; (80066d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr
 80066d8:	58000800 	.word	0x58000800

080066dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	600b      	str	r3, [r1, #0]

}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	58000800 	.word	0x58000800

08006700 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006708:	4b05      	ldr	r3, [pc, #20]	; (8006720 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	43db      	mvns	r3, r3
 8006710:	4903      	ldr	r1, [pc, #12]	; (8006720 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8006712:	4013      	ands	r3, r2
 8006714:	600b      	str	r3, [r1, #0]

}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	58000800 	.word	0x58000800

08006724 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	4904      	ldr	r1, [pc, #16]	; (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	604b      	str	r3, [r1, #4]
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	58000800 	.word	0x58000800

08006748 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006750:	4b05      	ldr	r3, [pc, #20]	; (8006768 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	43db      	mvns	r3, r3
 8006758:	4903      	ldr	r1, [pc, #12]	; (8006768 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800675a:	4013      	ands	r3, r2
 800675c:	604b      	str	r3, [r1, #4]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr
 8006768:	58000800 	.word	0x58000800

0800676c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a03      	ldr	r2, [pc, #12]	; (8006784 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677a:	6013      	str	r3, [r2, #0]
}
 800677c:	bf00      	nop
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr
 8006784:	58000400 	.word	0x58000400

08006788 <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_PWR_ConfigPVD+0x78>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f023 020e 	bic.w	r2, r3, #14
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4918      	ldr	r1, [pc, #96]	; (8006800 <HAL_PWR_ConfigPVD+0x78>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80067a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067a6:	f7ff ff85 	bl	80066b4 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80067aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067ae:	f7ff ffcb 	bl	8006748 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80067b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067b6:	f7ff ffa3 	bl	8006700 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80067c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067ca:	f7ff ff5f 	bl	800668c <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80067da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067de:	f7ff ffa1 	bl	8006724 <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80067ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067f2:	f7ff ff73 	bl	80066dc <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	58000400 	.word	0x58000400

08006804 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <HAL_PWR_EnablePVD+0x18>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a03      	ldr	r2, [pc, #12]	; (800681c <HAL_PWR_EnablePVD+0x18>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	6053      	str	r3, [r2, #4]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	58000400 	.word	0x58000400

08006820 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006824:	4b03      	ldr	r3, [pc, #12]	; (8006834 <HAL_PWREx_GetVoltageRange+0x14>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800682c:	4618      	mov	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr
 8006834:	58000400 	.word	0x58000400

08006838 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006848:	d101      	bne.n	800684e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr
 8006858:	58000400 	.word	0x58000400

0800685c <LL_RCC_HSE_EnableTcxo>:
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800686a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <LL_RCC_HSE_DisableTcxo>:
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800688a:	6013      	str	r3, [r2, #0]
}
 800688c:	bf00      	nop
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a6:	d101      	bne.n	80068ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <LL_RCC_HSE_Enable>:
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
}
 80068ca:	bf00      	nop
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <LL_RCC_HSE_Disable>:
{
 80068d2:	b480      	push	{r7}
 80068d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80068d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e4:	6013      	str	r3, [r2, #0]
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr

080068ee <LL_RCC_HSE_IsReady>:
{
 80068ee:	b480      	push	{r7}
 80068f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80068f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006900:	d101      	bne.n	8006906 <LL_RCC_HSE_IsReady+0x18>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <LL_RCC_HSE_IsReady+0x1a>
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <LL_RCC_HSI_Enable>:
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006922:	6013      	str	r3, [r2, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <LL_RCC_HSI_Disable>:
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800693a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	bc80      	pop	{r7}
 8006946:	4770      	bx	lr

08006948 <LL_RCC_HSI_IsReady>:
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800694c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695a:	d101      	bne.n	8006960 <LL_RCC_HSI_IsReady+0x18>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <LL_RCC_HSI_IsReady+0x1a>
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <LL_RCC_HSI_SetCalibTrimming>:
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	061b      	lsls	r3, r3, #24
 8006980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006984:	4313      	orrs	r3, r2
 8006986:	604b      	str	r3, [r1, #4]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <LL_RCC_LSE_IsReady>:
{
 8006992:	b480      	push	{r7}
 8006994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d101      	bne.n	80069aa <LL_RCC_LSE_IsReady+0x18>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <LL_RCC_LSE_IsReady+0x1a>
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <LL_RCC_LSI_Enable>:
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80069b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <LL_RCC_LSI_Disable>:
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <LL_RCC_LSI_IsReady>:
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d101      	bne.n	8006a0c <LL_RCC_LSI_IsReady+0x18>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <LL_RCC_LSI_IsReady+0x1a>
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <LL_RCC_MSI_Enable>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6013      	str	r3, [r2, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <LL_RCC_MSI_Disable>:
{
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <LL_RCC_MSI_IsReady>:
{
 8006a4e:	b480      	push	{r7}
 8006a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d101      	bne.n	8006a64 <LL_RCC_MSI_IsReady+0x16>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <LL_RCC_MSI_IsReady+0x18>
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006a6e:	b480      	push	{r7}
 8006a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d101      	bne.n	8006a84 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <LL_RCC_MSI_GetRange>:
{
 8006a8e:	b480      	push	{r7}
 8006a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <LL_RCC_MSI_SetCalibTrimming>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	604b      	str	r3, [r1, #4]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <LL_RCC_SetSysClkSource>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 0203 	bic.w	r2, r3, #3
 8006af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	608b      	str	r3, [r1, #8]
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <LL_RCC_GetSysClkSource>:
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 030c 	and.w	r3, r3, #12
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <LL_RCC_SetAHBPrescaler>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	608b      	str	r3, [r1, #8]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <LL_RCC_SetAHB3Prescaler>:
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b56:	f023 020f 	bic.w	r2, r3, #15
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_SetAPB1Prescaler>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bc80      	pop	{r7}
 8006b96:	4770      	bx	lr

08006b98 <LL_RCC_SetAPB2Prescaler>:
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <LL_RCC_GetAHBPrescaler>:
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <LL_RCC_GetAHB3Prescaler>:
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_GetAPB1Prescaler>:
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <LL_RCC_GetAPB2Prescaler>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c2c:	6013      	str	r3, [r2, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006c36:	b480      	push	{r7}
 8006c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c48:	6013      	str	r3, [r2, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006c52:	b480      	push	{r7}
 8006c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c64:	d101      	bne.n	8006c6a <LL_RCC_PLL_IsReady+0x18>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <LL_RCC_PLL_IsReady+0x1a>
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr

08006c74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f003 0303 	and.w	r3, r3, #3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce0:	d101      	bne.n	8006ce6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d101      	bne.n	8006d0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d26:	d101      	bne.n	8006d2c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006d36:	b480      	push	{r7}
 8006d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d48:	d101      	bne.n	8006d4e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e38b      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d6a:	f7ff fece 	bl	8006b0a <LL_RCC_GetSysClkSource>
 8006d6e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d70:	f7ff ffa2 	bl	8006cb8 <LL_RCC_PLL_GetMainSource>
 8006d74:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80c9 	beq.w	8006f16 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <HAL_RCC_OscConfig+0x3e>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	2b0c      	cmp	r3, #12
 8006d8e:	d17b      	bne.n	8006e88 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d178      	bne.n	8006e88 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d96:	f7ff fe5a 	bl	8006a4e <LL_RCC_MSI_IsReady>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCC_OscConfig+0x54>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e36a      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <HAL_RCC_OscConfig+0x72>
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc8:	e006      	b.n	8006dd8 <HAL_RCC_OscConfig+0x80>
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d222      	bcs.n	8006e22 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fd85 	bl	80078f0 <RCC_SetFlashLatencyFromMSIRange>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e348      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dfa:	f043 0308 	orr.w	r3, r3, #8
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fe4e 	bl	8006abc <LL_RCC_MSI_SetCalibTrimming>
 8006e20:	e021      	b.n	8006e66 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e2c:	f043 0308 	orr.w	r3, r3, #8
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e44:	4313      	orrs	r3, r2
 8006e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fe35 	bl	8006abc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fd4a 	bl	80078f0 <RCC_SetFlashLatencyFromMSIRange>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e30d      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006e66:	f000 fcd7 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4aa1      	ldr	r2, [pc, #644]	; (80070f4 <HAL_RCC_OscConfig+0x39c>)
 8006e6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e70:	4ba1      	ldr	r3, [pc, #644]	; (80070f8 <HAL_RCC_OscConfig+0x3a0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fc fb2b 	bl	80034d0 <HAL_InitTick>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006e7e:	7cfb      	ldrb	r3, [r7, #19]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d047      	beq.n	8006f14 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006e84:	7cfb      	ldrb	r3, [r7, #19]
 8006e86:	e2fc      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d02c      	beq.n	8006eea <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e90:	f7ff fdc1 	bl	8006a16 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e94:	f7fc fcec 	bl	8003870 <HAL_GetTick>
 8006e98:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e9c:	f7fc fce8 	bl	8003870 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e2e9      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006eae:	f7ff fdce 	bl	8006a4e <LL_RCC_MSI_IsReady>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f1      	beq.n	8006e9c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec2:	f043 0308 	orr.w	r3, r3, #8
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006eda:	4313      	orrs	r3, r2
 8006edc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fdea 	bl	8006abc <LL_RCC_MSI_SetCalibTrimming>
 8006ee8:	e015      	b.n	8006f16 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006eea:	f7ff fda2 	bl	8006a32 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006eee:	f7fc fcbf 	bl	8003870 <HAL_GetTick>
 8006ef2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ef6:	f7fc fcbb 	bl	8003870 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e2bc      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f08:	f7ff fda1 	bl	8006a4e <LL_RCC_MSI_IsReady>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x19e>
 8006f12:	e000      	b.n	8006f16 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d05f      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1dc>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2b0c      	cmp	r3, #12
 8006f2c:	d10d      	bne.n	8006f4a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d10a      	bne.n	8006f4a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	f7ff fcdb 	bl	80068ee <LL_RCC_HSE_IsReady>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d050      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x288>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d14c      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e29b      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f68:	d102      	bne.n	8006f70 <HAL_RCC_OscConfig+0x218>
 8006f6a:	f7ff fca4 	bl	80068b6 <LL_RCC_HSE_Enable>
 8006f6e:	e00d      	b.n	8006f8c <HAL_RCC_OscConfig+0x234>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006f78:	d104      	bne.n	8006f84 <HAL_RCC_OscConfig+0x22c>
 8006f7a:	f7ff fc6f 	bl	800685c <LL_RCC_HSE_EnableTcxo>
 8006f7e:	f7ff fc9a 	bl	80068b6 <LL_RCC_HSE_Enable>
 8006f82:	e003      	b.n	8006f8c <HAL_RCC_OscConfig+0x234>
 8006f84:	f7ff fca5 	bl	80068d2 <LL_RCC_HSE_Disable>
 8006f88:	f7ff fc76 	bl	8006878 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d012      	beq.n	8006fba <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f94:	f7fc fc6c 	bl	8003870 <HAL_GetTick>
 8006f98:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f9c:	f7fc fc68 	bl	8003870 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	; 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e269      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fae:	f7ff fc9e 	bl	80068ee <LL_RCC_HSE_IsReady>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f1      	beq.n	8006f9c <HAL_RCC_OscConfig+0x244>
 8006fb8:	e013      	b.n	8006fe2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fba:	f7fc fc59 	bl	8003870 <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc2:	f7fc fc55 	bl	8003870 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b64      	cmp	r3, #100	; 0x64
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e256      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006fd4:	f7ff fc8b 	bl	80068ee <LL_RCC_HSE_IsReady>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1f1      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x26a>
 8006fde:	e000      	b.n	8006fe2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d04b      	beq.n	8007086 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d005      	beq.n	8007000 <HAL_RCC_OscConfig+0x2a8>
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b0c      	cmp	r3, #12
 8006ff8:	d113      	bne.n	8007022 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d110      	bne.n	8007022 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007000:	f7ff fca2 	bl	8006948 <LL_RCC_HSI_IsReady>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_RCC_OscConfig+0x2be>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e235      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	4618      	mov	r0, r3
 800701c:	f7ff fca5 	bl	800696a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007020:	e031      	b.n	8007086 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d019      	beq.n	800705e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800702a:	f7ff fc71 	bl	8006910 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702e:	f7fc fc1f 	bl	8003870 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007036:	f7fc fc1b 	bl	8003870 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e21c      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007048:	f7ff fc7e 	bl	8006948 <LL_RCC_HSI_IsReady>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0f1      	beq.n	8007036 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fc87 	bl	800696a <LL_RCC_HSI_SetCalibTrimming>
 800705c:	e013      	b.n	8007086 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800705e:	f7ff fc65 	bl	800692c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fc fc05 	bl	8003870 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800706a:	f7fc fc01 	bl	8003870 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e202      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800707c:	f7ff fc64 	bl	8006948 <LL_RCC_HSI_IsReady>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f1      	bne.n	800706a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d06f      	beq.n	8007172 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d057      	beq.n	800714a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800709a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070a2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d036      	beq.n	8007120 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d006      	beq.n	80070ca <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e1db      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d018      	beq.n	8007106 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80070d4:	f7ff fc7e 	bl	80069d4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070d8:	f7fc fbca 	bl	8003870 <HAL_GetTick>
 80070dc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80070de:	e00d      	b.n	80070fc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e0:	f7fc fbc6 	bl	8003870 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b11      	cmp	r3, #17
 80070ec:	d906      	bls.n	80070fc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e1c7      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
 80070f2:	bf00      	nop
 80070f4:	20000008 	.word	0x20000008
 80070f8:	2000000c 	.word	0x2000000c
          while (LL_RCC_LSI_IsReady() != 0U)
 80070fc:	f7ff fc7a 	bl	80069f4 <LL_RCC_LSI_IsReady>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ec      	bne.n	80070e0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800710a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800710e:	f023 0210 	bic.w	r2, r3, #16
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007120:	f7ff fc48 	bl	80069b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fc fba4 	bl	8003870 <HAL_GetTick>
 8007128:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712c:	f7fc fba0 	bl	8003870 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b11      	cmp	r3, #17
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e1a1      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800713e:	f7ff fc59 	bl	80069f4 <LL_RCC_LSI_IsReady>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f1      	beq.n	800712c <HAL_RCC_OscConfig+0x3d4>
 8007148:	e013      	b.n	8007172 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800714a:	f7ff fc43 	bl	80069d4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714e:	f7fc fb8f 	bl	8003870 <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007156:	f7fc fb8b 	bl	8003870 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b11      	cmp	r3, #17
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e18c      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007168:	f7ff fc44 	bl	80069f4 <LL_RCC_LSI_IsReady>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f1      	bne.n	8007156 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80d8 	beq.w	8007330 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007180:	f7ff fb5a 	bl	8006838 <LL_PWR_IsEnabledBkUpAccess>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d113      	bne.n	80071b2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800718a:	f7ff faef 	bl	800676c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800718e:	f7fc fb6f 	bl	8003870 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007196:	f7fc fb6b 	bl	8003870 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e16c      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80071a8:	f7ff fb46 	bl	8006838 <LL_PWR_IsEnabledBkUpAccess>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f1      	beq.n	8007196 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d07b      	beq.n	80072b2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b85      	cmp	r3, #133	; 0x85
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b05      	cmp	r3, #5
 80071c8:	d109      	bne.n	80071de <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80071ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071d6:	f043 0304 	orr.w	r3, r3, #4
 80071da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071de:	f7fc fb47 	bl	8003870 <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80071e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80071f8:	e00a      	b.n	8007210 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071fa:	f7fc fb39 	bl	8003870 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f241 3288 	movw	r2, #5000	; 0x1388
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e138      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007210:	f7ff fbbf 	bl	8006992 <LL_RCC_LSE_IsReady>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ef      	beq.n	80071fa <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b81      	cmp	r3, #129	; 0x81
 8007220:	d003      	beq.n	800722a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b85      	cmp	r3, #133	; 0x85
 8007228:	d121      	bne.n	800726e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722a:	f7fc fb21 	bl	8003870 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007244:	e00a      	b.n	800725c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007246:	f7fc fb13 	bl	8003870 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	; 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e112      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800725c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0ec      	beq.n	8007246 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800726c:	e060      	b.n	8007330 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726e:	f7fc faff 	bl	8003870 <HAL_GetTick>
 8007272:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007288:	e00a      	b.n	80072a0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc faf1 	bl	8003870 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e0f0      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80072a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ec      	bne.n	800728a <HAL_RCC_OscConfig+0x532>
 80072b0:	e03e      	b.n	8007330 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b2:	f7fc fadd 	bl	8003870 <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80072b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80072cc:	e00a      	b.n	80072e4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fc facf 	bl	8003870 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0ce      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80072e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ec      	bne.n	80072ce <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fc fabc 	bl	8003870 <HAL_GetTick>
 80072f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80072fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007306:	f023 0301 	bic.w	r3, r3, #1
 800730a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800730e:	e00a      	b.n	8007326 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007310:	f7fc faae 	bl	8003870 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0ad      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007326:	f7ff fb34 	bl	8006992 <LL_RCC_LSE_IsReady>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ef      	bne.n	8007310 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80a3 	beq.w	8007480 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d076      	beq.n	800742e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	2b02      	cmp	r3, #2
 8007346:	d14b      	bne.n	80073e0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007348:	f7ff fc75 	bl	8006c36 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734c:	f7fc fa90 	bl	8003870 <HAL_GetTick>
 8007350:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007352:	e008      	b.n	8007366 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007354:	f7fc fa8c 	bl	8003870 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	2b0a      	cmp	r3, #10
 8007360:	d901      	bls.n	8007366 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e08d      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007366:	f7ff fc74 	bl	8006c52 <LL_RCC_PLL_IsReady>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1f1      	bne.n	8007354 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_RCC_OscConfig+0x734>)
 8007378:	4013      	ands	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007388:	0212      	lsls	r2, r2, #8
 800738a:	4311      	orrs	r1, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007390:	4311      	orrs	r1, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007396:	4311      	orrs	r1, r2
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800739c:	430a      	orrs	r2, r1
 800739e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073a6:	f7ff fc38 	bl	8006c1a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ba:	f7fc fa59 	bl	8003870 <HAL_GetTick>
 80073be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c2:	f7fc fa55 	bl	8003870 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b0a      	cmp	r3, #10
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e056      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80073d4:	f7ff fc3d 	bl	8006c52 <LL_RCC_PLL_IsReady>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f1      	beq.n	80073c2 <HAL_RCC_OscConfig+0x66a>
 80073de:	e04f      	b.n	8007480 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e0:	f7ff fc29 	bl	8006c36 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80073e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80073f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073fe:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8007402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007406:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007408:	f7fc fa32 	bl	8003870 <HAL_GetTick>
 800740c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007410:	f7fc fa2e 	bl	8003870 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b0a      	cmp	r3, #10
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e02f      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007422:	f7ff fc16 	bl	8006c52 <LL_RCC_PLL_IsReady>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f1      	bne.n	8007410 <HAL_RCC_OscConfig+0x6b8>
 800742c:	e028      	b.n	8007480 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e023      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800743a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f003 0203 	and.w	r2, r3, #3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	429a      	cmp	r2, r3
 800744e:	d115      	bne.n	800747c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	429a      	cmp	r2, r3
 800745c:	d10e      	bne.n	800747c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	429a      	cmp	r2, r3
 800746c:	d106      	bne.n	800747c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	429a      	cmp	r2, r3
 800747a:	d001      	beq.n	8007480 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e000      	b.n	8007482 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	11c1808c 	.word	0x11c1808c

08007490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e10f      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074a4:	4b89      	ldr	r3, [pc, #548]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d91b      	bls.n	80074ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b2:	4b86      	ldr	r3, [pc, #536]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 0207 	bic.w	r2, r3, #7
 80074ba:	4984      	ldr	r1, [pc, #528]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fc f9d5 	bl	8003870 <HAL_GetTick>
 80074c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c8:	e008      	b.n	80074dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074ca:	f7fc f9d1 	bl	8003870 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0f3      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074dc:	4b7b      	ldr	r3, [pc, #492]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d1ef      	bne.n	80074ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d016      	beq.n	8007524 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff fb10 	bl	8006b20 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007500:	f7fc f9b6 	bl	8003870 <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007508:	f7fc f9b2 	bl	8003870 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e0d4      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800751a:	f7ff fbd8 	bl	8006cce <LL_RCC_IsActiveFlag_HPRE>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f1      	beq.n	8007508 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d016      	beq.n	800755e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff fb06 	bl	8006b46 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800753a:	f7fc f999 	bl	8003870 <HAL_GetTick>
 800753e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007540:	e008      	b.n	8007554 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007542:	f7fc f995 	bl	8003870 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d901      	bls.n	8007554 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e0b7      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007554:	f7ff fbcc 	bl	8006cf0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0f1      	beq.n	8007542 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff faff 	bl	8006b72 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007574:	f7fc f97c 	bl	8003870 <HAL_GetTick>
 8007578:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800757c:	f7fc f978 	bl	8003870 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e09a      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800758e:	f7ff fbc1 	bl	8006d14 <LL_RCC_IsActiveFlag_PPRE1>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f1      	beq.n	800757c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff faf4 	bl	8006b98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075b0:	f7fc f95e 	bl	8003870 <HAL_GetTick>
 80075b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075b8:	f7fc f95a 	bl	8003870 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e07c      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80075ca:	f7ff fbb4 	bl	8006d36 <LL_RCC_IsActiveFlag_PPRE2>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f1      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d043      	beq.n	8007668 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d106      	bne.n	80075f6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80075e8:	f7ff f981 	bl	80068ee <LL_RCC_HSE_IsReady>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d11e      	bne.n	8007630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e066      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d106      	bne.n	800760c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80075fe:	f7ff fb28 	bl	8006c52 <LL_RCC_PLL_IsReady>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d113      	bne.n	8007630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e05b      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007614:	f7ff fa1b 	bl	8006a4e <LL_RCC_MSI_IsReady>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e050      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007622:	f7ff f991 	bl	8006948 <LL_RCC_HSI_IsReady>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e049      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fa55 	bl	8006ae4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763a:	f7fc f919 	bl	8003870 <HAL_GetTick>
 800763e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007640:	e00a      	b.n	8007658 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007642:	f7fc f915 	bl	8003870 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007650:	4293      	cmp	r3, r2
 8007652:	d901      	bls.n	8007658 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e035      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007658:	f7ff fa57 	bl	8006b0a <LL_RCC_GetSysClkSource>
 800765c:	4602      	mov	r2, r0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	429a      	cmp	r2, r3
 8007666:	d1ec      	bne.n	8007642 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007668:	4b18      	ldr	r3, [pc, #96]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d21b      	bcs.n	80076ae <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007676:	4b15      	ldr	r3, [pc, #84]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f023 0207 	bic.w	r2, r3, #7
 800767e:	4913      	ldr	r1, [pc, #76]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007686:	f7fc f8f3 	bl	8003870 <HAL_GetTick>
 800768a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800768e:	f7fc f8ef 	bl	8003870 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e011      	b.n	80076c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <HAL_RCC_ClockConfig+0x23c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d1ef      	bne.n	800768e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80076ae:	f000 f8b3 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 80076b2:	4603      	mov	r3, r0
 80076b4:	4a06      	ldr	r2, [pc, #24]	; (80076d0 <HAL_RCC_ClockConfig+0x240>)
 80076b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <HAL_RCC_ClockConfig+0x244>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fb ff07 	bl	80034d0 <HAL_InitTick>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	58004000 	.word	0x58004000
 80076d0:	20000008 	.word	0x20000008
 80076d4:	2000000c 	.word	0x2000000c

080076d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e6:	f7ff fa10 	bl	8006b0a <LL_RCC_GetSysClkSource>
 80076ea:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076ec:	f7ff fae4 	bl	8006cb8 <LL_RCC_PLL_GetMainSource>
 80076f0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0x2c>
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d139      	bne.n	8007772 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d136      	bne.n	8007772 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007704:	f7ff f9b3 	bl	8006a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d115      	bne.n	800773a <HAL_RCC_GetSysClockFreq+0x62>
 800770e:	f7ff f9ae 	bl	8006a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8007712:	4603      	mov	r3, r0
 8007714:	2b01      	cmp	r3, #1
 8007716:	d106      	bne.n	8007726 <HAL_RCC_GetSysClockFreq+0x4e>
 8007718:	f7ff f9b9 	bl	8006a8e <LL_RCC_MSI_GetRange>
 800771c:	4603      	mov	r3, r0
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	e005      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x5a>
 8007726:	f7ff f9bd 	bl	8006aa4 <LL_RCC_MSI_GetRangeAfterStandby>
 800772a:	4603      	mov	r3, r0
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	4a36      	ldr	r2, [pc, #216]	; (800780c <HAL_RCC_GetSysClockFreq+0x134>)
 8007734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007738:	e014      	b.n	8007764 <HAL_RCC_GetSysClockFreq+0x8c>
 800773a:	f7ff f998 	bl	8006a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 800773e:	4603      	mov	r3, r0
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <HAL_RCC_GetSysClockFreq+0x7a>
 8007744:	f7ff f9a3 	bl	8006a8e <LL_RCC_MSI_GetRange>
 8007748:	4603      	mov	r3, r0
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	e005      	b.n	800775e <HAL_RCC_GetSysClockFreq+0x86>
 8007752:	f7ff f9a7 	bl	8006aa4 <LL_RCC_MSI_GetRangeAfterStandby>
 8007756:	4603      	mov	r3, r0
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	4a2b      	ldr	r2, [pc, #172]	; (800780c <HAL_RCC_GetSysClockFreq+0x134>)
 8007760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007764:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d115      	bne.n	8007798 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007770:	e012      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d102      	bne.n	800777e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <HAL_RCC_GetSysClockFreq+0x138>)
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e00c      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d109      	bne.n	8007798 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007784:	f7ff f886 	bl	8006894 <LL_RCC_HSE_IsEnabledDiv2>
 8007788:	4603      	mov	r3, r0
 800778a:	2b01      	cmp	r3, #1
 800778c:	d102      	bne.n	8007794 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800778e:	4b20      	ldr	r3, [pc, #128]	; (8007810 <HAL_RCC_GetSysClockFreq+0x138>)
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e001      	b.n	8007798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007794:	4b1f      	ldr	r3, [pc, #124]	; (8007814 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007796:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007798:	f7ff f9b7 	bl	8006b0a <LL_RCC_GetSysClkSource>
 800779c:	4603      	mov	r3, r0
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d12f      	bne.n	8007802 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80077a2:	f7ff fa89 	bl	8006cb8 <LL_RCC_PLL_GetMainSource>
 80077a6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d003      	beq.n	80077b6 <HAL_RCC_GetSysClockFreq+0xde>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d003      	beq.n	80077bc <HAL_RCC_GetSysClockFreq+0xe4>
 80077b4:	e00d      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80077b6:	4b16      	ldr	r3, [pc, #88]	; (8007810 <HAL_RCC_GetSysClockFreq+0x138>)
 80077b8:	60fb      	str	r3, [r7, #12]
        break;
 80077ba:	e00d      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80077bc:	f7ff f86a 	bl	8006894 <LL_RCC_HSE_IsEnabledDiv2>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80077c6:	4b12      	ldr	r3, [pc, #72]	; (8007810 <HAL_RCC_GetSysClockFreq+0x138>)
 80077c8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80077ca:	e005      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCC_GetSysClockFreq+0x13c>)
 80077ce:	60fb      	str	r3, [r7, #12]
        break;
 80077d0:	e002      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	60fb      	str	r3, [r7, #12]
        break;
 80077d6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80077d8:	f7ff fa4c 	bl	8006c74 <LL_RCC_PLL_GetN>
 80077dc:	4602      	mov	r2, r0
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	fb03 f402 	mul.w	r4, r3, r2
 80077e4:	f7ff fa5d 	bl	8006ca2 <LL_RCC_PLL_GetDivider>
 80077e8:	4603      	mov	r3, r0
 80077ea:	091b      	lsrs	r3, r3, #4
 80077ec:	3301      	adds	r3, #1
 80077ee:	fbb4 f4f3 	udiv	r4, r4, r3
 80077f2:	f7ff fa4b 	bl	8006c8c <LL_RCC_PLL_GetR>
 80077f6:	4603      	mov	r3, r0
 80077f8:	0f5b      	lsrs	r3, r3, #29
 80077fa:	3301      	adds	r3, #1
 80077fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8007800:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007802:	697b      	ldr	r3, [r7, #20]
}
 8007804:	4618      	mov	r0, r3
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd90      	pop	{r4, r7, pc}
 800780c:	0802039c 	.word	0x0802039c
 8007810:	00f42400 	.word	0x00f42400
 8007814:	01e84800 	.word	0x01e84800

08007818 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007818:	b598      	push	{r3, r4, r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800781c:	f7ff ff5c 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 8007820:	4604      	mov	r4, r0
 8007822:	f7ff f9cc 	bl	8006bbe <LL_RCC_GetAHBPrescaler>
 8007826:	4603      	mov	r3, r0
 8007828:	091b      	lsrs	r3, r3, #4
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	4a03      	ldr	r2, [pc, #12]	; (800783c <HAL_RCC_GetHCLKFreq+0x24>)
 8007830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007834:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd98      	pop	{r3, r4, r7, pc}
 800783c:	0802033c 	.word	0x0802033c

08007840 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007840:	b598      	push	{r3, r4, r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007844:	f7ff ffe8 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 8007848:	4604      	mov	r4, r0
 800784a:	f7ff f9d0 	bl	8006bee <LL_RCC_GetAPB1Prescaler>
 800784e:	4603      	mov	r3, r0
 8007850:	0a1b      	lsrs	r3, r3, #8
 8007852:	4a03      	ldr	r2, [pc, #12]	; (8007860 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007858:	fa24 f303 	lsr.w	r3, r4, r3
}
 800785c:	4618      	mov	r0, r3
 800785e:	bd98      	pop	{r3, r4, r7, pc}
 8007860:	0802037c 	.word	0x0802037c

08007864 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007864:	b598      	push	{r3, r4, r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007868:	f7ff ffd6 	bl	8007818 <HAL_RCC_GetHCLKFreq>
 800786c:	4604      	mov	r4, r0
 800786e:	f7ff f9c9 	bl	8006c04 <LL_RCC_GetAPB2Prescaler>
 8007872:	4603      	mov	r3, r0
 8007874:	0adb      	lsrs	r3, r3, #11
 8007876:	4a03      	ldr	r2, [pc, #12]	; (8007884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007880:	4618      	mov	r0, r3
 8007882:	bd98      	pop	{r3, r4, r7, pc}
 8007884:	0802037c 	.word	0x0802037c

08007888 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d024      	beq.n	80078e2 <HAL_RCC_GetClockConfig+0x5a>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d021      	beq.n	80078e2 <HAL_RCC_GetClockConfig+0x5a>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	224f      	movs	r2, #79	; 0x4f
 80078a2:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80078a4:	f7ff f931 	bl	8006b0a <LL_RCC_GetSysClkSource>
 80078a8:	4602      	mov	r2, r0
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80078ae:	f7ff f986 	bl	8006bbe <LL_RCC_GetAHBPrescaler>
 80078b2:	4602      	mov	r2, r0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80078b8:	f7ff f999 	bl	8006bee <LL_RCC_GetAPB1Prescaler>
 80078bc:	4602      	mov	r2, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80078c2:	f7ff f99f 	bl	8006c04 <LL_RCC_GetAPB2Prescaler>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	611a      	str	r2, [r3, #16]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 80078cc:	f7ff f982 	bl	8006bd4 <LL_RCC_GetAHB3Prescaler>
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_RCC_GetClockConfig+0x64>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0207 	and.w	r2, r3, #7
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	601a      	str	r2, [r3, #0]
  }
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	58004000 	.word	0x58004000

080078f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80078f0:	b590      	push	{r4, r7, lr}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	091b      	lsrs	r3, r3, #4
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	4a10      	ldr	r2, [pc, #64]	; (8007944 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007906:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007908:	f7ff f964 	bl	8006bd4 <LL_RCC_GetAHB3Prescaler>
 800790c:	4603      	mov	r3, r0
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	4a0c      	ldr	r2, [pc, #48]	; (8007948 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4a09      	ldr	r2, [pc, #36]	; (800794c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	0c9c      	lsrs	r4, r3, #18
 800792c:	f7fe ff78 	bl	8006820 <HAL_PWREx_GetVoltageRange>
 8007930:	4603      	mov	r3, r0
 8007932:	4619      	mov	r1, r3
 8007934:	4620      	mov	r0, r4
 8007936:	f000 f80b 	bl	8007950 <RCC_SetFlashLatency>
 800793a:	4603      	mov	r3, r0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	bd90      	pop	{r4, r7, pc}
 8007944:	0802039c 	.word	0x0802039c
 8007948:	0802033c 	.word	0x0802033c
 800794c:	431bde83 	.word	0x431bde83

08007950 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	; 0x38
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800795a:	4a3a      	ldr	r2, [pc, #232]	; (8007a44 <RCC_SetFlashLatency+0xf4>)
 800795c:	f107 0320 	add.w	r3, r7, #32
 8007960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	3304      	adds	r3, #4
 8007968:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800796a:	4a37      	ldr	r2, [pc, #220]	; (8007a48 <RCC_SetFlashLatency+0xf8>)
 800796c:	f107 0318 	add.w	r3, r7, #24
 8007970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007974:	6018      	str	r0, [r3, #0]
 8007976:	3304      	adds	r3, #4
 8007978:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800797a:	4a34      	ldr	r2, [pc, #208]	; (8007a4c <RCC_SetFlashLatency+0xfc>)
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	ca07      	ldmia	r2, {r0, r1, r2}
 8007982:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007986:	2300      	movs	r3, #0
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007990:	d11b      	bne.n	80079ca <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007992:	2300      	movs	r3, #0
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
 8007996:	e014      	b.n	80079c2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	3338      	adds	r3, #56	; 0x38
 800799e:	443b      	add	r3, r7
 80079a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80079a4:	461a      	mov	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d807      	bhi.n	80079bc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	3338      	adds	r3, #56	; 0x38
 80079b2:	443b      	add	r3, r7
 80079b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ba:	e021      	b.n	8007a00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	3301      	adds	r3, #1
 80079c0:	633b      	str	r3, [r7, #48]	; 0x30
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d9e7      	bls.n	8007998 <RCC_SetFlashLatency+0x48>
 80079c8:	e01a      	b.n	8007a00 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079ca:	2300      	movs	r3, #0
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ce:	e014      	b.n	80079fa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	3338      	adds	r3, #56	; 0x38
 80079d6:	443b      	add	r3, r7
 80079d8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80079dc:	461a      	mov	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d807      	bhi.n	80079f4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	3338      	adds	r3, #56	; 0x38
 80079ea:	443b      	add	r3, r7
 80079ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079f2:	e005      	b.n	8007a00 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	3301      	adds	r3, #1
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d9e7      	bls.n	80079d0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a00:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <RCC_SetFlashLatency+0x100>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f023 0207 	bic.w	r2, r3, #7
 8007a08:	4911      	ldr	r1, [pc, #68]	; (8007a50 <RCC_SetFlashLatency+0x100>)
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a10:	f7fb ff2e 	bl	8003870 <HAL_GetTick>
 8007a14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a16:	e008      	b.n	8007a2a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a18:	f7fb ff2a 	bl	8003870 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e007      	b.n	8007a3a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <RCC_SetFlashLatency+0x100>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d1ef      	bne.n	8007a18 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3738      	adds	r7, #56	; 0x38
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	0802016c 	.word	0x0802016c
 8007a48:	08020174 	.word	0x08020174
 8007a4c:	0802017c 	.word	0x0802017c
 8007a50:	58004000 	.word	0x58004000

08007a54 <LL_RCC_LSE_IsReady>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d101      	bne.n	8007a6c <LL_RCC_LSE_IsReady+0x18>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <LL_RCC_LSE_IsReady+0x1a>
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <LL_RCC_SetUSARTClockSource>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	401a      	ands	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr

08007aa6 <LL_RCC_SetI2SClockSource>:
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <LL_RCC_SetLPUARTClockSource>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <LL_RCC_SetI2CClockSource>:
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b12:	43db      	mvns	r3, r3
 8007b14:	401a      	ands	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <LL_RCC_SetLPTIMClockSource>:
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0c1b      	lsrs	r3, r3, #16
 8007b46:	041b      	lsls	r3, r3, #16
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <LL_RCC_SetRNGClockSource>:
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <LL_RCC_SetADCClockSource>:
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <LL_RCC_SetRTCClockSource>:
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr

08007be2 <LL_RCC_GetRTCClockSource>:
{
 8007be2:	b480      	push	{r7}
 8007be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr

08007bfa <LL_RCC_ForceBackupDomainReset>:
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c12:	bf00      	nop
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr

08007c1a <LL_RCC_ReleaseBackupDomainReset>:
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c32:	bf00      	nop
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
	...

08007c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007c48:	2300      	movs	r3, #0
 8007c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d058      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007c5c:	f7fe fd86 	bl	800676c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c60:	f7fb fe06 	bl	8003870 <HAL_GetTick>
 8007c64:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007c66:	e009      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c68:	f7fb fe02 	bl	8003870 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d902      	bls.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	74fb      	strb	r3, [r7, #19]
        break;
 8007c7a:	e006      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007c7c:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c88:	d1ee      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d13c      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007c90:	f7ff ffa7 	bl	8007be2 <LL_RCC_GetRTCClockSource>
 8007c94:	4602      	mov	r2, r0
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d00f      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007caa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cac:	f7ff ffa5 	bl	8007bfa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cb0:	f7ff ffb3 	bl	8007c1a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d014      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7fb fdd2 	bl	8003870 <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007cce:	e00b      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd0:	f7fb fdce 	bl	8003870 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d902      	bls.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	74fb      	strb	r3, [r7, #19]
            break;
 8007ce6:	e004      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007ce8:	f7ff feb4 	bl	8007a54 <LL_RCC_LSE_IsReady>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d1ee      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007cf2:	7cfb      	ldrb	r3, [r7, #19]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff ff5b 	bl	8007bb8 <LL_RCC_SetRTCClockSource>
 8007d02:	e004      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d04:	7cfb      	ldrb	r3, [r7, #19]
 8007d06:	74bb      	strb	r3, [r7, #18]
 8007d08:	e001      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0a:	7cfb      	ldrb	r3, [r7, #19]
 8007d0c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fea9 	bl	8007a76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff fe9e 	bl	8007a76 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fec0 	bl	8007ad0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fee6 	bl	8007b32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fedb 	bl	8007b32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff fed0 	bl	8007b32 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d004      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fea9 	bl	8007afa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff fe9e 	bl	8007afa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fe93 	bl	8007afa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0310 	and.w	r3, r3, #16
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fe5e 	bl	8007aa6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df2:	d107      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fea5 	bl	8007b64 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d107      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e30:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fea3 	bl	8007b8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007e62:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	58000400 	.word	0x58000400

08007e70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d068      	beq.n	8007f54 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fb fa92 	bl	80033c0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ea4:	4b2e      	ldr	r3, [pc, #184]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ea6:	22ca      	movs	r2, #202	; 0xca
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24
 8007eaa:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007eac:	2253      	movs	r2, #83	; 0x53
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 faa1 	bl	80083f8 <RTC_EnterInitMode>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d13f      	bne.n	8007f40 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007ec0:	4b27      	ldr	r3, [pc, #156]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ec6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ece:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007ed0:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6859      	ldr	r1, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	4319      	orrs	r1, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	491e      	ldr	r1, [pc, #120]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	041b      	lsls	r3, r3, #16
 8007ef4:	491a      	ldr	r1, [pc, #104]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007efa:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	4914      	ldr	r1, [pc, #80]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 faa4 	bl	8008460 <RTC_ExitInitMode>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10e      	bne.n	8007f40 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007f22:	4b0f      	ldr	r3, [pc, #60]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a19      	ldr	r1, [r3, #32]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	4319      	orrs	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	4909      	ldr	r1, [pc, #36]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <HAL_RTC_Init+0xf0>)
 8007f42:	22ff      	movs	r2, #255	; 0xff
 8007f44:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40002800 	.word	0x40002800

08007f64 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <HAL_RTC_SetTime+0x1a>
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e088      	b.n	8008090 <HAL_RTC_SetTime+0x12c>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f8e:	4b42      	ldr	r3, [pc, #264]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8007f90:	22ca      	movs	r2, #202	; 0xca
 8007f92:	625a      	str	r2, [r3, #36]	; 0x24
 8007f94:	4b40      	ldr	r3, [pc, #256]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8007f96:	2253      	movs	r2, #83	; 0x53
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fa2c 	bl	80083f8 <RTC_EnterInitMode>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d15e      	bne.n	8008068 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007faa:	4b3b      	ldr	r3, [pc, #236]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb6:	d057      	beq.n	8008068 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d125      	bne.n	800800a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007fbe:	4b36      	ldr	r3, [pc, #216]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fa81 	bl	80084dc <RTC_ByteToBcd2>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fa7a 	bl	80084dc <RTC_ByteToBcd2>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007fec:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	789b      	ldrb	r3, [r3, #2]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fa72 	bl	80084dc <RTC_ByteToBcd2>
 8007ff8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ffa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	78db      	ldrb	r3, [r3, #3]
 8008002:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e017      	b.n	800803a <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800800a:	4b23      	ldr	r3, [pc, #140]	; (8008098 <HAL_RTC_SetTime+0x134>)
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008028:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800802e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <HAL_RTC_SetTime+0x134>)
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008042:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008046:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <HAL_RTC_SetTime+0x134>)
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	4a12      	ldr	r2, [pc, #72]	; (8008098 <HAL_RTC_SetTime+0x134>)
 800804e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008052:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008054:	4b10      	ldr	r3, [pc, #64]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8008056:	699a      	ldr	r2, [r3, #24]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	68d9      	ldr	r1, [r3, #12]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	430b      	orrs	r3, r1
 8008062:	490d      	ldr	r1, [pc, #52]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8008064:	4313      	orrs	r3, r2
 8008066:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f9f9 	bl	8008460 <RTC_ExitInitMode>
 800806e:	4603      	mov	r3, r0
 8008070:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <HAL_RTC_SetTime+0x134>)
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800808e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008090:	4618      	mov	r0, r3
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	bd90      	pop	{r4, r7, pc}
 8008098:	40002800 	.word	0x40002800

0800809c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_RTC_SetDate+0x1a>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e071      	b.n	800819a <HAL_RTC_SetDate+0xfe>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10e      	bne.n	80080ea <HAL_RTC_SetDate+0x4e>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	f023 0310 	bic.w	r3, r3, #16
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	330a      	adds	r3, #10
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11c      	bne.n	800812a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 f9f1 	bl	80084dc <RTC_ByteToBcd2>
 80080fa:	4603      	mov	r3, r0
 80080fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	785b      	ldrb	r3, [r3, #1]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f9ea 	bl	80084dc <RTC_ByteToBcd2>
 8008108:	4603      	mov	r3, r0
 800810a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800810c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f9e2 	bl	80084dc <RTC_ByteToBcd2>
 8008118:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800811a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e00e      	b.n	8008148 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	78db      	ldrb	r3, [r3, #3]
 800812e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	785b      	ldrb	r3, [r3, #1]
 8008134:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008136:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800813c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008148:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <HAL_RTC_SetDate+0x108>)
 800814a:	22ca      	movs	r2, #202	; 0xca
 800814c:	625a      	str	r2, [r3, #36]	; 0x24
 800814e:	4b15      	ldr	r3, [pc, #84]	; (80081a4 <HAL_RTC_SetDate+0x108>)
 8008150:	2253      	movs	r2, #83	; 0x53
 8008152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f94f 	bl	80083f8 <RTC_EnterInitMode>
 800815a:	4603      	mov	r3, r0
 800815c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800815e:	7cfb      	ldrb	r3, [r7, #19]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10b      	bne.n	800817c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8008164:	4a0f      	ldr	r2, [pc, #60]	; (80081a4 <HAL_RTC_SetDate+0x108>)
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800816c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008170:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f974 	bl	8008460 <RTC_ExitInitMode>
 8008178:	4603      	mov	r3, r0
 800817a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RTC_SetDate+0x108>)
 800817e:	22ff      	movs	r2, #255	; 0xff
 8008180:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008182:	7cfb      	ldrb	r3, [r7, #19]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8008198:	7cfb      	ldrb	r3, [r7, #19]
}
 800819a:	4618      	mov	r0, r3
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd90      	pop	{r4, r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40002800 	.word	0x40002800

080081a8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d101      	bne.n	80081c6 <HAL_RTC_SetAlarm+0x1e>
 80081c2:	2302      	movs	r3, #2
 80081c4:	e0eb      	b.n	800839e <HAL_RTC_SetAlarm+0x1f6>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80081d6:	4b74      	ldr	r3, [pc, #464]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081de:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e6:	d06a      	beq.n	80082be <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d13a      	bne.n	8008264 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80081ee:	4b6e      	ldr	r3, [pc, #440]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2200      	movs	r2, #0
 80081fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f965 	bl	80084dc <RTC_ByteToBcd2>
 8008212:	4603      	mov	r3, r0
 8008214:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f95e 	bl	80084dc <RTC_ByteToBcd2>
 8008220:	4603      	mov	r3, r0
 8008222:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008224:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f956 	bl	80084dc <RTC_ByteToBcd2>
 8008230:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008232:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	78db      	ldrb	r3, [r3, #3]
 800823a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800823c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f948 	bl	80084dc <RTC_ByteToBcd2>
 800824c:	4603      	mov	r3, r0
 800824e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008250:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008258:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800825e:	4313      	orrs	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e02c      	b.n	80082be <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800826c:	d00d      	beq.n	800828a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008276:	d008      	beq.n	800828a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008278:	4b4b      	ldr	r3, [pc, #300]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2200      	movs	r2, #0
 8008288:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008296:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800829c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	78db      	ldrb	r3, [r3, #3]
 80082a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80082a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082ac:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80082ae:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80082b4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082be:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082c0:	22ca      	movs	r2, #202	; 0xca
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
 80082c4:	4b38      	ldr	r3, [pc, #224]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082c6:	2253      	movs	r2, #83	; 0x53
 80082c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d2:	d12c      	bne.n	800832e <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80082d4:	4b34      	ldr	r3, [pc, #208]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	4a33      	ldr	r2, [pc, #204]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80082de:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082e0:	4b31      	ldr	r3, [pc, #196]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ec:	d107      	bne.n	80082fe <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	492c      	ldr	r1, [pc, #176]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	644b      	str	r3, [r1, #68]	; 0x44
 80082fc:	e006      	b.n	800830c <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80082fe:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008304:	4a28      	ldr	r2, [pc, #160]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800830c:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	f043 0201 	orr.w	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8008320:	4b21      	ldr	r3, [pc, #132]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	4a20      	ldr	r2, [pc, #128]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800832a:	6193      	str	r3, [r2, #24]
 800832c:	e02b      	b.n	8008386 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 800832e:	4b1e      	ldr	r3, [pc, #120]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008334:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008338:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800833a:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 800833c:	2202      	movs	r2, #2
 800833e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008346:	d107      	bne.n	8008358 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	4915      	ldr	r1, [pc, #84]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008352:	4313      	orrs	r3, r2
 8008354:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008356:	e006      	b.n	8008366 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800835e:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008366:	4a10      	ldr	r2, [pc, #64]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f043 0202 	orr.w	r2, r3, #2
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	4a0a      	ldr	r2, [pc, #40]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008384:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008386:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <HAL_RTC_SetAlarm+0x200>)
 8008388:	22ff      	movs	r2, #255	; 0xff
 800838a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd90      	pop	{r4, r7, pc}
 80083a6:	bf00      	nop
 80083a8:	40002800 	.word	0x40002800

080083ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80083b4:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <HAL_RTC_WaitForSynchro+0x48>)
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	4a0e      	ldr	r2, [pc, #56]	; (80083f4 <HAL_RTC_WaitForSynchro+0x48>)
 80083ba:	f023 0320 	bic.w	r3, r3, #32
 80083be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80083c0:	f7fb fa56 	bl	8003870 <HAL_GetTick>
 80083c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083c6:	e009      	b.n	80083dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083c8:	f7fb fa52 	bl	8003870 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d6:	d901      	bls.n	80083dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e006      	b.n	80083ea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <HAL_RTC_WaitForSynchro+0x48>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0ef      	beq.n	80083c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40002800 	.word	0x40002800

080083f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008404:	4b15      	ldr	r3, [pc, #84]	; (800845c <RTC_EnterInitMode+0x64>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d120      	bne.n	8008452 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <RTC_EnterInitMode+0x64>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4a11      	ldr	r2, [pc, #68]	; (800845c <RTC_EnterInitMode+0x64>)
 8008416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800841c:	f7fb fa28 	bl	8003870 <HAL_GetTick>
 8008420:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008422:	e00d      	b.n	8008440 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008424:	f7fb fa24 	bl	8003870 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008432:	d905      	bls.n	8008440 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2203      	movs	r2, #3
 800843c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <RTC_EnterInitMode+0x64>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <RTC_EnterInitMode+0x5a>
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b03      	cmp	r3, #3
 8008450:	d1e8      	bne.n	8008424 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40002800 	.word	0x40002800

08008460 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800846c:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <RTC_ExitInitMode+0x78>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <RTC_ExitInitMode+0x78>)
 8008472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008476:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <RTC_ExitInitMode+0x78>)
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10c      	bne.n	800849e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ff91 	bl	80083ac <HAL_RTC_WaitForSynchro>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01e      	beq.n	80084ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e017      	b.n	80084ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800849e:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <RTC_ExitInitMode+0x78>)
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <RTC_ExitInitMode+0x78>)
 80084a4:	f023 0320 	bic.w	r3, r3, #32
 80084a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff7e 	bl	80083ac <HAL_RTC_WaitForSynchro>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2203      	movs	r2, #3
 80084ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <RTC_ExitInitMode+0x78>)
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	4a04      	ldr	r2, [pc, #16]	; (80084d8 <RTC_ExitInitMode+0x78>)
 80084c8:	f043 0320 	orr.w	r3, r3, #32
 80084cc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40002800 	.word	0x40002800

080084dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80084ee:	e005      	b.n	80084fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3b0a      	subs	r3, #10
 80084fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	2b09      	cmp	r3, #9
 8008500:	d8f6      	bhi.n	80084f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	b2da      	uxtb	r2, r3
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	4313      	orrs	r3, r2
 800850e:	b2db      	uxtb	r3, r3
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr
	...

0800851c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8008532:	2302      	movs	r3, #2
 8008534:	e055      	b.n	80085e2 <HAL_RTCEx_SetWakeUpTimer+0xc6>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8008548:	22ca      	movs	r2, #202	; 0xca
 800854a:	625a      	str	r2, [r3, #36]	; 0x24
 800854c:	4b27      	ldr	r3, [pc, #156]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800854e:	2253      	movs	r2, #83	; 0x53
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008552:	4b26      	ldr	r3, [pc, #152]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	4a25      	ldr	r2, [pc, #148]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8008558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800855c:	6193      	str	r3, [r2, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800855e:	4b23      	ldr	r3, [pc, #140]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d11e      	bne.n	80085a8 <HAL_RTCEx_SetWakeUpTimer+0x8c>
  {
    tickstart = HAL_GetTick();
 800856a:	f7fb f981 	bl	8003870 <HAL_GetTick>
 800856e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008570:	e014      	b.n	800859c <HAL_RTCEx_SetWakeUpTimer+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008572:	f7fb f97d 	bl	8003870 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008580:	d90c      	bls.n	800859c <HAL_RTCEx_SetWakeUpTimer+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 8008584:	22ff      	movs	r2, #255	; 0xff
 8008586:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2203      	movs	r2, #3
 800858c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e022      	b.n	80085e2 <HAL_RTCEx_SetWakeUpTimer+0xc6>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0e4      	beq.n	8008572 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	f023 0207 	bic.w	r2, r3, #7
 80085b0:	490e      	ldr	r1, [pc, #56]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	618b      	str	r3, [r1, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 80085b8:	4a0c      	ldr	r2, [pc, #48]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6153      	str	r3, [r2, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 80085be:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085c8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ca:	4b08      	ldr	r3, [pc, #32]	; (80085ec <HAL_RTCEx_SetWakeUpTimer+0xd0>)
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40002800 	.word	0x40002800

080085f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e0c6      	b.n	8008790 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008612:	d009      	beq.n	8008628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	61da      	str	r2, [r3, #28]
 800861a:	e005      	b.n	8008628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fa feeb 	bl	8003418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008658:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008662:	d902      	bls.n	800866a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	e002      	b.n	8008670 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800866a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800866e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008678:	d007      	beq.n	800868a <HAL_SPI_Init+0x9a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008682:	d002      	beq.n	800868a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086cc:	ea42 0103 	orr.w	r1, r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e8:	d11b      	bne.n	8008722 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10b      	bne.n	800870a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086fa:	d903      	bls.n	8008704 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
 8008702:	e002      	b.n	800870a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	2b02      	cmp	r3, #2
 8008710:	d107      	bne.n	8008722 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008720:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	f003 0204 	and.w	r2, r3, #4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	f003 0308 	and.w	r3, r3, #8
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008748:	ea42 0103 	orr.w	r1, r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008762:	d105      	bne.n	8008770 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	b292      	uxth	r2, r2
 800876e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800877e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80087a0:	4b06      	ldr	r3, [pc, #24]	; (80087bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087a8:	4904      	ldr	r1, [pc, #16]	; (80087bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	608b      	str	r3, [r1, #8]
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	58000400 	.word	0x58000400

080087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80087c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ca:	4a04      	ldr	r2, [pc, #16]	; (80087dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80087cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	58000400 	.word	0x58000400

080087e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	4a04      	ldr	r2, [pc, #16]	; (80087fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80087ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	58000400 	.word	0x58000400

08008800 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008804:	4b03      	ldr	r3, [pc, #12]	; (8008814 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800880a:	619a      	str	r2, [r3, #24]
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	58000400 	.word	0x58000400

08008818 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b02      	cmp	r3, #2
 8008826:	d101      	bne.n	800882c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	58000400 	.word	0x58000400

0800883c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d101      	bne.n	8008850 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	46bd      	mov	sp, r7
 8008856:	bc80      	pop	{r7}
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	58000400 	.word	0x58000400

08008860 <LL_RCC_RF_DisableReset>:
{
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800886c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008878:	bf00      	nop
 800887a:	46bd      	mov	sp, r7
 800887c:	bc80      	pop	{r7}
 800887e:	4770      	bx	lr

08008880 <LL_RCC_IsRFUnderReset>:
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800888c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008894:	d101      	bne.n	800889a <LL_RCC_IsRFUnderReset+0x1a>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <LL_RCC_IsRFUnderReset+0x1c>
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <LL_EXTI_EnableIT_32_63>:
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80088ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80088b2:	4905      	ldr	r1, [pc, #20]	; (80088c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bc80      	pop	{r7}
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	58000800 	.word	0x58000800

080088cc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	e04b      	b.n	800897a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	799b      	ldrb	r3, [r3, #6]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d105      	bne.n	80088fc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fa fdbe 	bl	8003478 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8008902:	f7ff ffad 	bl	8008860 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008906:	4b1f      	ldr	r3, [pc, #124]	; (8008984 <HAL_SUBGHZ_Init+0xb8>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	4613      	mov	r3, r2
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	0cdb      	lsrs	r3, r3, #19
 8008914:	2264      	movs	r2, #100	; 0x64
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	609a      	str	r2, [r3, #8]
      break;
 800892c:	e007      	b.n	800893e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3b01      	subs	r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8008934:	f7ff ffa4 	bl	8008880 <LL_RCC_IsRFUnderReset>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ee      	bne.n	800891c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800893e:	f7ff ff3f 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008942:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008946:	f7ff ffad 	bl	80088a4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800894a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800894e:	f7ff ff23 	bl	8008798 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008952:	f7ff ff55 	bl	8008800 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 faad 	bl	8008ec0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	719a      	strb	r2, [r3, #6]

  return status;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000008 	.word	0x20000008

08008988 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	461a      	mov	r2, r3
 8008994:	460b      	mov	r3, r1
 8008996:	817b      	strh	r3, [r7, #10]
 8008998:	4613      	mov	r3, r2
 800899a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	799b      	ldrb	r3, [r3, #6]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d14a      	bne.n	8008a3c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	795b      	ldrb	r3, [r3, #5]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80089ae:	2302      	movs	r3, #2
 80089b0:	e045      	b.n	8008a3e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2202      	movs	r2, #2
 80089bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fb4c 	bl	800905c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089c4:	f7ff ff0c 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80089c8:	210d      	movs	r1, #13
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 fa98 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fa90 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80089e0:	897b      	ldrh	r3, [r7, #10]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 fa8a 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089ec:	2300      	movs	r3, #0
 80089ee:	82bb      	strh	r3, [r7, #20]
 80089f0:	e00a      	b.n	8008a08 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089f2:	8abb      	ldrh	r3, [r7, #20]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fa7f 	bl	8008f00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a02:	8abb      	ldrh	r3, [r7, #20]
 8008a04:	3301      	adds	r3, #1
 8008a06:	82bb      	strh	r3, [r7, #20]
 8008a08:	8aba      	ldrh	r2, [r7, #20]
 8008a0a:	893b      	ldrh	r3, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d3f0      	bcc.n	80089f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a10:	f7ff fed6 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fb45 	bl	80090a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
 8008a26:	e001      	b.n	8008a2c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	715a      	strb	r2, [r3, #5]

    return status;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	e000      	b.n	8008a3e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
  }
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b088      	sub	sp, #32
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	461a      	mov	r2, r3
 8008a52:	460b      	mov	r3, r1
 8008a54:	817b      	strh	r3, [r7, #10]
 8008a56:	4613      	mov	r3, r2
 8008a58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	799b      	ldrb	r3, [r3, #6]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d14a      	bne.n	8008afe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	795b      	ldrb	r3, [r3, #5]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e045      	b.n	8008b00 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2201      	movs	r2, #1
 8008a78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 faee 	bl	800905c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a80:	f7ff feae 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008a84:	211d      	movs	r1, #29
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 fa3a 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008a8c:	897b      	ldrh	r3, [r7, #10]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	4619      	mov	r1, r3
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fa32 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008a9c:	897b      	ldrh	r3, [r7, #10]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fa2c 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fa28 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	82fb      	strh	r3, [r7, #22]
 8008ab4:	e009      	b.n	8008aca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008ab6:	69b9      	ldr	r1, [r7, #24]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fa77 	bl	8008fac <SUBGHZSPI_Receive>
      pData++;
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008ac4:	8afb      	ldrh	r3, [r7, #22]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	82fb      	strh	r3, [r7, #22]
 8008aca:	8afa      	ldrh	r2, [r7, #22]
 8008acc:	893b      	ldrh	r3, [r7, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d3f1      	bcc.n	8008ab6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ad2:	f7ff fe75 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fae4 	bl	80090a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	77fb      	strb	r3, [r7, #31]
 8008ae8:	e001      	b.n	8008aee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	715a      	strb	r2, [r3, #5]

    return status;
 8008afa:	7ffb      	ldrb	r3, [r7, #31]
 8008afc:	e000      	b.n	8008b00 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008afe:	2302      	movs	r3, #2
  }
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	461a      	mov	r2, r3
 8008b14:	460b      	mov	r3, r1
 8008b16:	72fb      	strb	r3, [r7, #11]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	799b      	ldrb	r3, [r3, #6]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d14a      	bne.n	8008bbc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e045      	b.n	8008bbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fa8f 	bl	800905c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	2b84      	cmp	r3, #132	; 0x84
 8008b42:	d002      	beq.n	8008b4a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	2b94      	cmp	r3, #148	; 0x94
 8008b48:	d103      	bne.n	8008b52 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	711a      	strb	r2, [r3, #4]
 8008b50:	e002      	b.n	8008b58 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b58:	f7ff fe42 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f9cd 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b66:	2300      	movs	r3, #0
 8008b68:	82bb      	strh	r3, [r7, #20]
 8008b6a:	e00a      	b.n	8008b82 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b6c:	8abb      	ldrh	r3, [r7, #20]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f9c2 	bl	8008f00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b7c:	8abb      	ldrh	r3, [r7, #20]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	82bb      	strh	r3, [r7, #20]
 8008b82:	8aba      	ldrh	r2, [r7, #20]
 8008b84:	893b      	ldrh	r3, [r7, #8]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3f0      	bcc.n	8008b6c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b8a:	f7ff fe19 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008b8e:	7afb      	ldrb	r3, [r7, #11]
 8008b90:	2b84      	cmp	r3, #132	; 0x84
 8008b92:	d002      	beq.n	8008b9a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 fa85 	bl	80090a4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	75fb      	strb	r3, [r7, #23]
 8008ba6:	e001      	b.n	8008bac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	715a      	strb	r2, [r3, #5]

    return status;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	e000      	b.n	8008bbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008bbc:	2302      	movs	r3, #2
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b088      	sub	sp, #32
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	72fb      	strb	r3, [r7, #11]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	799b      	ldrb	r3, [r3, #6]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d13d      	bne.n	8008c64 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	795b      	ldrb	r3, [r3, #5]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e038      	b.n	8008c66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fa2e 	bl	800905c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008c00:	f7ff fdee 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	4619      	mov	r1, r3
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 f979 	bl	8008f00 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008c0e:	2100      	movs	r1, #0
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f975 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008c16:	2300      	movs	r3, #0
 8008c18:	82fb      	strh	r3, [r7, #22]
 8008c1a:	e009      	b.n	8008c30 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008c1c:	69b9      	ldr	r1, [r7, #24]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f9c4 	bl	8008fac <SUBGHZSPI_Receive>
      pData++;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008c2a:	8afb      	ldrh	r3, [r7, #22]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	82fb      	strh	r3, [r7, #22]
 8008c30:	8afa      	ldrh	r2, [r7, #22]
 8008c32:	893b      	ldrh	r3, [r7, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d3f1      	bcc.n	8008c1c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c38:	f7ff fdc2 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fa31 	bl	80090a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	77fb      	strb	r3, [r7, #31]
 8008c4e:	e001      	b.n	8008c54 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	715a      	strb	r2, [r3, #5]

    return status;
 8008c60:	7ffb      	ldrb	r3, [r7, #31]
 8008c62:	e000      	b.n	8008c66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008c64:	2302      	movs	r3, #2
  }
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3720      	adds	r7, #32
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	72fb      	strb	r3, [r7, #11]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	799b      	ldrb	r3, [r3, #6]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d13e      	bne.n	8008d0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	795b      	ldrb	r3, [r3, #5]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e039      	b.n	8008d0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f9dc 	bl	800905c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008ca4:	f7ff fd9c 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008ca8:	210e      	movs	r1, #14
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f928 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f923 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008cba:	2300      	movs	r3, #0
 8008cbc:	82bb      	strh	r3, [r7, #20]
 8008cbe:	e00a      	b.n	8008cd6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008cc0:	8abb      	ldrh	r3, [r7, #20]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f918 	bl	8008f00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008cd0:	8abb      	ldrh	r3, [r7, #20]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	82bb      	strh	r3, [r7, #20]
 8008cd6:	8aba      	ldrh	r2, [r7, #20]
 8008cd8:	893b      	ldrh	r3, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d3f0      	bcc.n	8008cc0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008cde:	f7ff fd6f 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 f9de 	bl	80090a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
 8008cf4:	e001      	b.n	8008cfa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	715a      	strb	r2, [r3, #5]

    return status;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	e000      	b.n	8008d0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008d0a:	2302      	movs	r3, #2
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	72fb      	strb	r3, [r7, #11]
 8008d24:	4613      	mov	r3, r2
 8008d26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	799b      	ldrb	r3, [r3, #6]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d141      	bne.n	8008dba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	795b      	ldrb	r3, [r3, #5]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e03c      	b.n	8008dbc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f987 	bl	800905c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008d4e:	f7ff fd47 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008d52:	211e      	movs	r1, #30
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f8d3 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f8ce 	bl	8008f00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008d64:	2100      	movs	r1, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f8ca 	bl	8008f00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	82fb      	strh	r3, [r7, #22]
 8008d70:	e009      	b.n	8008d86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008d72:	69b9      	ldr	r1, [r7, #24]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f919 	bl	8008fac <SUBGHZSPI_Receive>
      pData++;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008d80:	8afb      	ldrh	r3, [r7, #22]
 8008d82:	3301      	adds	r3, #1
 8008d84:	82fb      	strh	r3, [r7, #22]
 8008d86:	8afa      	ldrh	r2, [r7, #22]
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d3f1      	bcc.n	8008d72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008d8e:	f7ff fd17 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f986 	bl	80090a4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	77fb      	strb	r3, [r7, #31]
 8008da4:	e001      	b.n	8008daa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2201      	movs	r2, #1
 8008dae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	715a      	strb	r2, [r3, #5]

    return status;
 8008db6:	7ffb      	ldrb	r3, [r7, #31]
 8008db8:	e000      	b.n	8008dbc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008dba:	2302      	movs	r3, #2
  }
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8008dcc:	2300      	movs	r3, #0
 8008dce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8008dd0:	f107 020c 	add.w	r2, r7, #12
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fef4 	bl	8008bc6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8008dde:	7b3b      	ldrb	r3, [r7, #12]
 8008de0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8008de2:	89fb      	ldrh	r3, [r7, #14]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	b21a      	sxth	r2, r3
 8008de8:	7b7b      	ldrb	r3, [r7, #13]
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	4313      	orrs	r3, r2
 8008dee:	b21b      	sxth	r3, r3
 8008df0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f010 f9e3 	bl	80191c8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008e02:	89fb      	ldrh	r3, [r7, #14]
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f010 f9e8 	bl	80191e4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008e14:	89fb      	ldrh	r3, [r7, #14]
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f010 fa37 	bl	8019294 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f010 fa3c 	bl	80192b0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	091b      	lsrs	r3, r3, #4
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f010 fa41 	bl	80192cc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008e4a:	89fb      	ldrh	r3, [r7, #14]
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f010 fa0e 	bl	8019278 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	099b      	lsrs	r3, r3, #6
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f010 f9c9 	bl	8019200 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008e6e:	89fb      	ldrh	r3, [r7, #14]
 8008e70:	09db      	lsrs	r3, r3, #7
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008e7a:	89fb      	ldrh	r3, [r7, #14]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008e86:	2101      	movs	r1, #1
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f010 f9c7 	bl	801921c <HAL_SUBGHZ_CADStatusCallback>
 8008e8e:	e003      	b.n	8008e98 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f010 f9c2 	bl	801921c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	0a5b      	lsrs	r3, r3, #9
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f010 f9d7 	bl	8019258 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008eaa:	f107 020c 	add.w	r2, r7, #12
 8008eae:	2302      	movs	r3, #2
 8008eb0:	2102      	movs	r1, #2
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fe28 	bl	8008b08 <HAL_SUBGHZ_ExecSetCmd>
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a0b      	ldr	r2, [pc, #44]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008ed4:	4a09      	ldr	r2, [pc, #36]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008edc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008ee0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008ee4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008ee6:	4b05      	ldr	r3, [pc, #20]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a04      	ldr	r2, [pc, #16]	; (8008efc <SUBGHZSPI_Init+0x3c>)
 8008eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef0:	6013      	str	r3, [r2, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bc80      	pop	{r7}
 8008efa:	4770      	bx	lr
 8008efc:	58010000 	.word	0x58010000

08008f00 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f10:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <SUBGHZSPI_Transmit+0xa0>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4613      	mov	r3, r2
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	1a9b      	subs	r3, r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	0cdb      	lsrs	r3, r3, #19
 8008f1e:	2264      	movs	r2, #100	; 0x64
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d105      	bne.n	8008f38 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	609a      	str	r2, [r3, #8]
      break;
 8008f36:	e008      	b.n	8008f4a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008f3e:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <SUBGHZSPI_Transmit+0xa4>)
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d1ed      	bne.n	8008f26 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008f4a:	4b17      	ldr	r3, [pc, #92]	; (8008fa8 <SUBGHZSPI_Transmit+0xa8>)
 8008f4c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008f54:	4b12      	ldr	r3, [pc, #72]	; (8008fa0 <SUBGHZSPI_Transmit+0xa0>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	0cdb      	lsrs	r3, r3, #19
 8008f62:	2264      	movs	r2, #100	; 0x64
 8008f64:	fb02 f303 	mul.w	r3, r2, r3
 8008f68:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	609a      	str	r2, [r3, #8]
      break;
 8008f7a:	e008      	b.n	8008f8e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008f82:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <SUBGHZSPI_Transmit+0xa4>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d1ed      	bne.n	8008f6a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008f8e:	4b05      	ldr	r3, [pc, #20]	; (8008fa4 <SUBGHZSPI_Transmit+0xa4>)
 8008f90:	68db      	ldr	r3, [r3, #12]

  return status;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000008 	.word	0x20000008
 8008fa4:	58010000 	.word	0x58010000
 8008fa8:	5801000c 	.word	0x5801000c

08008fac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008fba:	4b25      	ldr	r3, [pc, #148]	; (8009050 <SUBGHZSPI_Receive+0xa4>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	0cdb      	lsrs	r3, r3, #19
 8008fc8:	2264      	movs	r2, #100	; 0x64
 8008fca:	fb02 f303 	mul.w	r3, r2, r3
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d105      	bne.n	8008fe2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	609a      	str	r2, [r3, #8]
      break;
 8008fe0:	e008      	b.n	8008ff4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008fe8:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <SUBGHZSPI_Receive+0xa8>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d1ed      	bne.n	8008fd0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008ff4:	4b18      	ldr	r3, [pc, #96]	; (8009058 <SUBGHZSPI_Receive+0xac>)
 8008ff6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	22ff      	movs	r2, #255	; 0xff
 8008ffc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ffe:	4b14      	ldr	r3, [pc, #80]	; (8009050 <SUBGHZSPI_Receive+0xa4>)
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4613      	mov	r3, r2
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	0cdb      	lsrs	r3, r3, #19
 800900c:	2264      	movs	r2, #100	; 0x64
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d105      	bne.n	8009026 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	609a      	str	r2, [r3, #8]
      break;
 8009024:	e008      	b.n	8009038 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b01      	subs	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <SUBGHZSPI_Receive+0xa8>)
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b01      	cmp	r3, #1
 8009036:	d1ed      	bne.n	8009014 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <SUBGHZSPI_Receive+0xa8>)
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	701a      	strb	r2, [r3, #0]

  return status;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
}
 8009044:	4618      	mov	r0, r3
 8009046:	371c      	adds	r7, #28
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000008 	.word	0x20000008
 8009054:	58010000 	.word	0x58010000
 8009058:	5801000c 	.word	0x5801000c

0800905c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	791b      	ldrb	r3, [r3, #4]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d111      	bne.n	8009090 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <SUBGHZ_CheckDeviceReady+0x44>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800907c:	f7ff fbb0 	bl	80087e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3b01      	subs	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f9      	bne.n	8009080 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800908c:	f7ff fb98 	bl	80087c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f807 	bl	80090a4 <SUBGHZ_WaitOnBusy>
 8009096:	4603      	mov	r3, r0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000008 	.word	0x20000008

080090a4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80090b0:	4b12      	ldr	r3, [pc, #72]	; (80090fc <SUBGHZ_WaitOnBusy+0x58>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4613      	mov	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	4413      	add	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	0d1b      	lsrs	r3, r3, #20
 80090be:	2264      	movs	r2, #100	; 0x64
 80090c0:	fb02 f303 	mul.w	r3, r2, r3
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80090c6:	f7ff fbb9 	bl	800883c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80090ca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2202      	movs	r2, #2
 80090da:	609a      	str	r2, [r3, #8]
      break;
 80090dc:	e009      	b.n	80090f2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80090e4:	f7ff fb98 	bl	8008818 <LL_PWR_IsActiveFlag_RFBUSYS>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	4013      	ands	r3, r2
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d0e9      	beq.n	80090c6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000008 	.word	0x20000008

08009100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e049      	b.n	80091a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f841 	bl	80091ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f000 f9ce 	bl	80094e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr

080091c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d001      	beq.n	80091d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e036      	b.n	8009246 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a16      	ldr	r2, [pc, #88]	; (8009250 <HAL_TIM_Base_Start_IT+0x90>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x44>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009202:	d115      	bne.n	8009230 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <HAL_TIM_Base_Start_IT+0x94>)
 800920c:	4013      	ands	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b06      	cmp	r3, #6
 8009214:	d015      	beq.n	8009242 <HAL_TIM_Base_Start_IT+0x82>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800921c:	d011      	beq.n	8009242 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f042 0201 	orr.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800922e:	e008      	b.n	8009242 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e000      	b.n	8009244 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	bc80      	pop	{r7}
 800924e:	4770      	bx	lr
 8009250:	40012c00 	.word	0x40012c00
 8009254:	00010007 	.word	0x00010007

08009258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b02      	cmp	r3, #2
 800926c:	d122      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b02      	cmp	r3, #2
 800927a:	d11b      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0202 	mvn.w	r2, #2
 8009284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f904 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 80092a0:	e005      	b.n	80092ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f8f7 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f906 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d122      	bne.n	8009308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d11b      	bne.n	8009308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0204 	mvn.w	r2, #4
 80092d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2202      	movs	r2, #2
 80092de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f8da 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 80092f4:	e005      	b.n	8009302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f8cd 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f8dc 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b08      	cmp	r3, #8
 8009314:	d122      	bne.n	800935c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f003 0308 	and.w	r3, r3, #8
 8009320:	2b08      	cmp	r3, #8
 8009322:	d11b      	bne.n	800935c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f06f 0208 	mvn.w	r2, #8
 800932c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2204      	movs	r2, #4
 8009332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8b0 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 8009348:	e005      	b.n	8009356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f8a3 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f8b2 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0310 	and.w	r3, r3, #16
 8009366:	2b10      	cmp	r3, #16
 8009368:	d122      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0310 	and.w	r3, r3, #16
 8009374:	2b10      	cmp	r3, #16
 8009376:	d11b      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0210 	mvn.w	r2, #16
 8009380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2208      	movs	r2, #8
 8009386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f886 	bl	80094a8 <HAL_TIM_IC_CaptureCallback>
 800939c:	e005      	b.n	80093aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f879 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f888 	bl	80094ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d10e      	bne.n	80093dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d107      	bne.n	80093dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0201 	mvn.w	r2, #1
 80093d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7f9 fc54 	bl	8002c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d10e      	bne.n	8009408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f4:	2b80      	cmp	r3, #128	; 0x80
 80093f6:	d107      	bne.n	8009408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8d7 	bl	80095b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d10e      	bne.n	8009436 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d107      	bne.n	8009436 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f8c9 	bl	80095c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	d10e      	bne.n	8009462 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d107      	bne.n	8009462 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800945a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f835 	bl	80094cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b20      	cmp	r3, #32
 800946e:	d10e      	bne.n	800948e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b20      	cmp	r3, #32
 800947c:	d107      	bne.n	800948e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f06f 0220 	mvn.w	r2, #32
 8009486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f88b 	bl	80095a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr

080094ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr
	...

080094e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a29      	ldr	r2, [pc, #164]	; (8009598 <TIM_Base_SetConfig+0xb8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0x20>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fe:	d108      	bne.n	8009512 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a20      	ldr	r2, [pc, #128]	; (8009598 <TIM_Base_SetConfig+0xb8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_Base_SetConfig+0x52>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009520:	d007      	beq.n	8009532 <TIM_Base_SetConfig+0x52>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a1d      	ldr	r2, [pc, #116]	; (800959c <TIM_Base_SetConfig+0xbc>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_Base_SetConfig+0x52>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a1c      	ldr	r2, [pc, #112]	; (80095a0 <TIM_Base_SetConfig+0xc0>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d108      	bne.n	8009544 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4313      	orrs	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	4313      	orrs	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a0b      	ldr	r2, [pc, #44]	; (8009598 <TIM_Base_SetConfig+0xb8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_Base_SetConfig+0xa0>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a0a      	ldr	r2, [pc, #40]	; (800959c <TIM_Base_SetConfig+0xbc>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_Base_SetConfig+0xa0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <TIM_Base_SetConfig+0xc0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d103      	bne.n	8009588 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	691a      	ldr	r2, [r3, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	615a      	str	r2, [r3, #20]
}
 800958e:	bf00      	nop
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40014400 	.word	0x40014400
 80095a0:	40014800 	.word	0x40014800

080095a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr

080095b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <LL_RCC_GetUSARTClockSource>:
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80095e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	401a      	ands	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	4313      	orrs	r3, r2
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <LL_RCC_GetLPUARTClockSource>:
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4013      	ands	r3, r2
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e042      	b.n	80096b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7f9 fe41 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	; 0x24
 800964a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0201 	bic.w	r2, r2, #1
 800965c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fbf8 	bl	8009e54 <UART_SetConfig>
 8009664:	4603      	mov	r3, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	d101      	bne.n	800966e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e022      	b.n	80096b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d002      	beq.n	800967c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fe60 	bl	800a33c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800968a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800969a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0201 	orr.w	r2, r2, #1
 80096aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fee6 	bl	800a47e <UART_CheckIdleState>
 80096b2:	4603      	mov	r3, r0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	; 0x28
 80096c0:	af02      	add	r7, sp, #8
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	f040 8083 	bne.w	80097de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Transmit+0x28>
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e07b      	b.n	80097e0 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_UART_Transmit+0x3a>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e074      	b.n	80097e0 <HAL_UART_Transmit+0x124>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2221      	movs	r2, #33	; 0x21
 800970a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800970e:	f7fa f8af 	bl	8003870 <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	88fa      	ldrh	r2, [r7, #6]
 8009718:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	88fa      	ldrh	r2, [r7, #6]
 8009720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972c:	d108      	bne.n	8009740 <HAL_UART_Transmit+0x84>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	e003      	b.n	8009748 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009744:	2300      	movs	r3, #0
 8009746:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009750:	e02c      	b.n	80097ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	2180      	movs	r1, #128	; 0x80
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fed9 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e039      	b.n	80097e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10b      	bne.n	800978a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009780:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	3302      	adds	r3, #2
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	e007      	b.n	800979a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	3301      	adds	r3, #1
 8009798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1cc      	bne.n	8009752 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2200      	movs	r2, #0
 80097c0:	2140      	movs	r1, #64	; 0x40
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fea6 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e006      	b.n	80097e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	e000      	b.n	80097e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b0ba      	sub	sp, #232	; 0xe8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800980e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009812:	f640 030f 	movw	r3, #2063	; 0x80f
 8009816:	4013      	ands	r3, r2
 8009818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800981c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d11b      	bne.n	800985c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d015      	beq.n	800985c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009834:	f003 0320 	and.w	r3, r3, #32
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800983c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 82d6 	beq.w	8009dfe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
      }
      return;
 800985a:	e2d0      	b.n	8009dfe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800985c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 811f 	beq.w	8009aa4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009866:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800986a:	4b8b      	ldr	r3, [pc, #556]	; (8009a98 <HAL_UART_IRQHandler+0x2b0>)
 800986c:	4013      	ands	r3, r2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d106      	bne.n	8009880 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009872:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009876:	4b89      	ldr	r3, [pc, #548]	; (8009a9c <HAL_UART_IRQHandler+0x2b4>)
 8009878:	4013      	ands	r3, r2
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8112 	beq.w	8009aa4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009884:	f003 0301 	and.w	r3, r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d011      	beq.n	80098b0 <HAL_UART_IRQHandler+0xc8>
 800988c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2201      	movs	r2, #1
 800989e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a6:	f043 0201 	orr.w	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d011      	beq.n	80098e0 <HAL_UART_IRQHandler+0xf8>
 80098bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2202      	movs	r2, #2
 80098ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098d6:	f043 0204 	orr.w	r2, r3, #4
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d011      	beq.n	8009910 <HAL_UART_IRQHandler+0x128>
 80098ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00b      	beq.n	8009910 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2204      	movs	r2, #4
 80098fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009906:	f043 0202 	orr.w	r2, r3, #2
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d017      	beq.n	800994c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800991c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009928:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800992c:	4b5a      	ldr	r3, [pc, #360]	; (8009a98 <HAL_UART_IRQHandler+0x2b0>)
 800992e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2208      	movs	r2, #8
 800993a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009942:	f043 0208 	orr.w	r2, r3, #8
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800994c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009954:	2b00      	cmp	r3, #0
 8009956:	d012      	beq.n	800997e <HAL_UART_IRQHandler+0x196>
 8009958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800995c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00c      	beq.n	800997e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800996c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009974:	f043 0220 	orr.w	r2, r3, #32
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 823c 	beq.w	8009e02 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800998a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d013      	beq.n	80099be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999a:	f003 0320 	and.w	r3, r3, #32
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d005      	beq.n	80099e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80099d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d04f      	beq.n	8009a82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fe5e 	bl	800a6a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b40      	cmp	r3, #64	; 0x40
 80099f4:	d141      	bne.n	8009a7a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1d9      	bne.n	80099f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d013      	beq.n	8009a72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4e:	4a14      	ldr	r2, [pc, #80]	; (8009aa0 <HAL_UART_IRQHandler+0x2b8>)
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fb fca8 	bl	80053ac <HAL_DMA_Abort_IT>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d017      	beq.n	8009a92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	e00f      	b.n	8009a92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f9d9 	bl	8009e2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a78:	e00b      	b.n	8009a92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f9d5 	bl	8009e2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a80:	e007      	b.n	8009a92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9d1 	bl	8009e2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a90:	e1b7      	b.n	8009e02 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a92:	bf00      	nop
    return;
 8009a94:	e1b5      	b.n	8009e02 <HAL_UART_IRQHandler+0x61a>
 8009a96:	bf00      	nop
 8009a98:	10000001 	.word	0x10000001
 8009a9c:	04000120 	.word	0x04000120
 8009aa0:	0800a76f 	.word	0x0800a76f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	f040 814a 	bne.w	8009d42 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8009aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 8143 	beq.w	8009d42 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8009abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 813c 	beq.w	8009d42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2210      	movs	r2, #16
 8009ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	f040 80b5 	bne.w	8009c4c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8009aee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8187 	beq.w	8009e06 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b02:	429a      	cmp	r2, r3
 8009b04:	f080 817f 	bcs.w	8009e06 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f040 8086 	bne.w	8009c30 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1da      	bne.n	8009b24 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3308      	adds	r3, #8
 8009b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b80:	f023 0301 	bic.w	r3, r3, #1
 8009b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e1      	bne.n	8009b6e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3308      	adds	r3, #8
 8009bb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009bd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e3      	bne.n	8009baa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c00:	f023 0310 	bic.w	r3, r3, #16
 8009c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e4      	bne.n	8009bf0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fb fb60 	bl	80052f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f8f9 	bl	8009e3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009c4a:	e0dc      	b.n	8009e06 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 80ce 	beq.w	8009e0a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8009c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80c9 	beq.w	8009e0a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e4      	bne.n	8009c78 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e1      	bne.n	8009cae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 0310 	bic.w	r3, r3, #16
 8009d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69b9      	ldr	r1, [r7, #24]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e4      	bne.n	8009cfe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f87e 	bl	8009e3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009d40:	e063      	b.n	8009e0a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <HAL_UART_IRQHandler+0x584>
 8009d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d008      	beq.n	8009d6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fd43 	bl	800a7f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d6a:	e051      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d014      	beq.n	8009da2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d105      	bne.n	8009d90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d03a      	beq.n	8009e0e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	4798      	blx	r3
    }
    return;
 8009da0:	e035      	b.n	8009e0e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d009      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x5da>
 8009dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fced 	bl	800a79a <UART_EndTransmit_IT>
    return;
 8009dc0:	e026      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <HAL_UART_IRQHandler+0x5fa>
 8009dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd1a 	bl	800a814 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009de0:	e016      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d010      	beq.n	8009e10 <HAL_UART_IRQHandler+0x628>
 8009dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da0c      	bge.n	8009e10 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fd03 	bl	800a802 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dfc:	e008      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
      return;
 8009dfe:	bf00      	nop
 8009e00:	e006      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
    return;
 8009e02:	bf00      	nop
 8009e04:	e004      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
      return;
 8009e06:	bf00      	nop
 8009e08:	e002      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
      return;
 8009e0a:	bf00      	nop
 8009e0c:	e000      	b.n	8009e10 <HAL_UART_IRQHandler+0x628>
    return;
 8009e0e:	bf00      	nop
  }
}
 8009e10:	37e8      	adds	r7, #232	; 0xe8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop

08009e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr

08009e2a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr
	...

08009e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e58:	b08c      	sub	sp, #48	; 0x30
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b94      	ldr	r3, [pc, #592]	; (800a0d4 <UART_SetConfig+0x280>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	6812      	ldr	r2, [r2, #0]
 8009e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a89      	ldr	r2, [pc, #548]	; (800a0d8 <UART_SetConfig+0x284>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d004      	beq.n	8009ec0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009eca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	6812      	ldr	r2, [r2, #0]
 8009ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	f023 010f 	bic.w	r1, r3, #15
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a7a      	ldr	r2, [pc, #488]	; (800a0dc <UART_SetConfig+0x288>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d127      	bne.n	8009f48 <UART_SetConfig+0xf4>
 8009ef8:	2003      	movs	r0, #3
 8009efa:	f7ff fb6e 	bl	80095da <LL_RCC_GetUSARTClockSource>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d81b      	bhi.n	8009f40 <UART_SetConfig+0xec>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0xbc>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f21 	.word	0x08009f21
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f29 	.word	0x08009f29
 8009f1c:	08009f39 	.word	0x08009f39
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f26:	e080      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2e:	e07c      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f36:	e078      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3e:	e074      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f46:	e070      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a64      	ldr	r2, [pc, #400]	; (800a0e0 <UART_SetConfig+0x28c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d138      	bne.n	8009fc4 <UART_SetConfig+0x170>
 8009f52:	200c      	movs	r0, #12
 8009f54:	f7ff fb41 	bl	80095da <LL_RCC_GetUSARTClockSource>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009f5e:	2b0c      	cmp	r3, #12
 8009f60:	d82c      	bhi.n	8009fbc <UART_SetConfig+0x168>
 8009f62:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <UART_SetConfig+0x114>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f9d 	.word	0x08009f9d
 8009f6c:	08009fbd 	.word	0x08009fbd
 8009f70:	08009fbd 	.word	0x08009fbd
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009fad 	.word	0x08009fad
 8009f7c:	08009fbd 	.word	0x08009fbd
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fbd 	.word	0x08009fbd
 8009f88:	08009fa5 	.word	0x08009fa5
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fb5 	.word	0x08009fb5
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fa2:	e042      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009faa:	e03e      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009fac:	2304      	movs	r3, #4
 8009fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fb2:	e03a      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fba:	e036      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fc2:	e032      	b.n	800a02a <UART_SetConfig+0x1d6>
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a43      	ldr	r2, [pc, #268]	; (800a0d8 <UART_SetConfig+0x284>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d12a      	bne.n	800a024 <UART_SetConfig+0x1d0>
 8009fce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009fd2:	f7ff fb14 	bl	80095fe <LL_RCC_GetLPUARTClockSource>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fdc:	d01a      	beq.n	800a014 <UART_SetConfig+0x1c0>
 8009fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009fe2:	d81b      	bhi.n	800a01c <UART_SetConfig+0x1c8>
 8009fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fe8:	d00c      	beq.n	800a004 <UART_SetConfig+0x1b0>
 8009fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fee:	d815      	bhi.n	800a01c <UART_SetConfig+0x1c8>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <UART_SetConfig+0x1a8>
 8009ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ff8:	d008      	beq.n	800a00c <UART_SetConfig+0x1b8>
 8009ffa:	e00f      	b.n	800a01c <UART_SetConfig+0x1c8>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a002:	e012      	b.n	800a02a <UART_SetConfig+0x1d6>
 800a004:	2302      	movs	r3, #2
 800a006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a00a:	e00e      	b.n	800a02a <UART_SetConfig+0x1d6>
 800a00c:	2304      	movs	r3, #4
 800a00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a012:	e00a      	b.n	800a02a <UART_SetConfig+0x1d6>
 800a014:	2308      	movs	r3, #8
 800a016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a01a:	e006      	b.n	800a02a <UART_SetConfig+0x1d6>
 800a01c:	2310      	movs	r3, #16
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a022:	e002      	b.n	800a02a <UART_SetConfig+0x1d6>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a2a      	ldr	r2, [pc, #168]	; (800a0d8 <UART_SetConfig+0x284>)
 800a030:	4293      	cmp	r3, r2
 800a032:	f040 80a4 	bne.w	800a17e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a036:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a03a:	2b08      	cmp	r3, #8
 800a03c:	d823      	bhi.n	800a086 <UART_SetConfig+0x232>
 800a03e:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <UART_SetConfig+0x1f0>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a069 	.word	0x0800a069
 800a048:	0800a087 	.word	0x0800a087
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a087 	.word	0x0800a087
 800a054:	0800a077 	.word	0x0800a077
 800a058:	0800a087 	.word	0x0800a087
 800a05c:	0800a087 	.word	0x0800a087
 800a060:	0800a087 	.word	0x0800a087
 800a064:	0800a07f 	.word	0x0800a07f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a068:	f7fd fbea 	bl	8007840 <HAL_RCC_GetPCLK1Freq>
 800a06c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a06e:	e010      	b.n	800a092 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a070:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <UART_SetConfig+0x290>)
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a074:	e00d      	b.n	800a092 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a076:	f7fd fb2f 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a07c:	e009      	b.n	800a092 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a07e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a084:	e005      	b.n	800a092 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8137 	beq.w	800a308 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	4a12      	ldr	r2, [pc, #72]	; (800a0e8 <UART_SetConfig+0x294>)
 800a0a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	4413      	add	r3, r2
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d305      	bcc.n	800a0ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0c4:	69ba      	ldr	r2, [r7, #24]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d910      	bls.n	800a0ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a0d0:	e11a      	b.n	800a308 <UART_SetConfig+0x4b4>
 800a0d2:	bf00      	nop
 800a0d4:	cfff69f3 	.word	0xcfff69f3
 800a0d8:	40008000 	.word	0x40008000
 800a0dc:	40013800 	.word	0x40013800
 800a0e0:	40004400 	.word	0x40004400
 800a0e4:	00f42400 	.word	0x00f42400
 800a0e8:	0802041c 	.word	0x0802041c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	60bb      	str	r3, [r7, #8]
 800a0f2:	60fa      	str	r2, [r7, #12]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	4a8e      	ldr	r2, [pc, #568]	; (800a334 <UART_SetConfig+0x4e0>)
 800a0fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	2200      	movs	r2, #0
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	607a      	str	r2, [r7, #4]
 800a106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a10a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a10e:	f7f7 f817 	bl	8001140 <__aeabi_uldivmod>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4610      	mov	r0, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	f04f 0300 	mov.w	r3, #0
 800a122:	020b      	lsls	r3, r1, #8
 800a124:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a128:	0202      	lsls	r2, r0, #8
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	6849      	ldr	r1, [r1, #4]
 800a12e:	0849      	lsrs	r1, r1, #1
 800a130:	2000      	movs	r0, #0
 800a132:	460c      	mov	r4, r1
 800a134:	4605      	mov	r5, r0
 800a136:	eb12 0804 	adds.w	r8, r2, r4
 800a13a:	eb43 0905 	adc.w	r9, r3, r5
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	469a      	mov	sl, r3
 800a146:	4693      	mov	fp, r2
 800a148:	4652      	mov	r2, sl
 800a14a:	465b      	mov	r3, fp
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 fff6 	bl	8001140 <__aeabi_uldivmod>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4613      	mov	r3, r2
 800a15a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a162:	d308      	bcc.n	800a176 <UART_SetConfig+0x322>
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a16a:	d204      	bcs.n	800a176 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6a3a      	ldr	r2, [r7, #32]
 800a172:	60da      	str	r2, [r3, #12]
 800a174:	e0c8      	b.n	800a308 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a17c:	e0c4      	b.n	800a308 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a186:	d168      	bne.n	800a25a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d828      	bhi.n	800a1e2 <UART_SetConfig+0x38e>
 800a190:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <UART_SetConfig+0x344>)
 800a192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a196:	bf00      	nop
 800a198:	0800a1bd 	.word	0x0800a1bd
 800a19c:	0800a1c5 	.word	0x0800a1c5
 800a1a0:	0800a1cd 	.word	0x0800a1cd
 800a1a4:	0800a1e3 	.word	0x0800a1e3
 800a1a8:	0800a1d3 	.word	0x0800a1d3
 800a1ac:	0800a1e3 	.word	0x0800a1e3
 800a1b0:	0800a1e3 	.word	0x0800a1e3
 800a1b4:	0800a1e3 	.word	0x0800a1e3
 800a1b8:	0800a1db 	.word	0x0800a1db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1bc:	f7fd fb40 	bl	8007840 <HAL_RCC_GetPCLK1Freq>
 800a1c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1c2:	e014      	b.n	800a1ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1c4:	f7fd fb4e 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 800a1c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1ca:	e010      	b.n	800a1ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1cc:	4b5a      	ldr	r3, [pc, #360]	; (800a338 <UART_SetConfig+0x4e4>)
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1d0:	e00d      	b.n	800a1ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1d2:	f7fd fa81 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800a1d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1d8:	e009      	b.n	800a1ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1e0:	e005      	b.n	800a1ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 8089 	beq.w	800a308 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	4a4e      	ldr	r2, [pc, #312]	; (800a334 <UART_SetConfig+0x4e0>)
 800a1fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a200:	461a      	mov	r2, r3
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	fbb3 f3f2 	udiv	r3, r3, r2
 800a208:	005a      	lsls	r2, r3, #1
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	085b      	lsrs	r3, r3, #1
 800a210:	441a      	add	r2, r3
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2b0f      	cmp	r3, #15
 800a222:	d916      	bls.n	800a252 <UART_SetConfig+0x3fe>
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a22a:	d212      	bcs.n	800a252 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f023 030f 	bic.w	r3, r3, #15
 800a234:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	085b      	lsrs	r3, r3, #1
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	b29a      	uxth	r2, r3
 800a242:	8bfb      	ldrh	r3, [r7, #30]
 800a244:	4313      	orrs	r3, r2
 800a246:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	8bfa      	ldrh	r2, [r7, #30]
 800a24e:	60da      	str	r2, [r3, #12]
 800a250:	e05a      	b.n	800a308 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a258:	e056      	b.n	800a308 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a25a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d827      	bhi.n	800a2b2 <UART_SetConfig+0x45e>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <UART_SetConfig+0x414>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a29d 	.word	0x0800a29d
 800a274:	0800a2b3 	.word	0x0800a2b3
 800a278:	0800a2a3 	.word	0x0800a2a3
 800a27c:	0800a2b3 	.word	0x0800a2b3
 800a280:	0800a2b3 	.word	0x0800a2b3
 800a284:	0800a2b3 	.word	0x0800a2b3
 800a288:	0800a2ab 	.word	0x0800a2ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28c:	f7fd fad8 	bl	8007840 <HAL_RCC_GetPCLK1Freq>
 800a290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a292:	e014      	b.n	800a2be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a294:	f7fd fae6 	bl	8007864 <HAL_RCC_GetPCLK2Freq>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a29a:	e010      	b.n	800a2be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a29c:	4b26      	ldr	r3, [pc, #152]	; (800a338 <UART_SetConfig+0x4e4>)
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2a0:	e00d      	b.n	800a2be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2a2:	f7fd fa19 	bl	80076d8 <HAL_RCC_GetSysClockFreq>
 800a2a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2a8:	e009      	b.n	800a2be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2b0:	e005      	b.n	800a2be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2bc:	bf00      	nop
    }

    if (pclk != 0U)
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d021      	beq.n	800a308 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	4a1a      	ldr	r2, [pc, #104]	; (800a334 <UART_SetConfig+0x4e0>)
 800a2ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	085b      	lsrs	r3, r3, #1
 800a2dc:	441a      	add	r2, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	2b0f      	cmp	r3, #15
 800a2ee:	d908      	bls.n	800a302 <UART_SetConfig+0x4ae>
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f6:	d204      	bcs.n	800a302 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6a3a      	ldr	r2, [r7, #32]
 800a2fe:	60da      	str	r2, [r3, #12]
 800a300:	e002      	b.n	800a308 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2201      	movs	r2, #1
 800a314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2200      	movs	r2, #0
 800a31c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2200      	movs	r2, #0
 800a322:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a324:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3730      	adds	r7, #48	; 0x30
 800a32c:	46bd      	mov	sp, r7
 800a32e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a332:	bf00      	nop
 800a334:	0802041c 	.word	0x0802041c
 800a338:	00f42400 	.word	0x00f42400

0800a33c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00a      	beq.n	800a366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00a      	beq.n	800a388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00a      	beq.n	800a3cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	f003 0310 	and.w	r3, r3, #16
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01a      	beq.n	800a452 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a43a:	d10a      	bne.n	800a452 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	605a      	str	r2, [r3, #4]
  }
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af02      	add	r7, sp, #8
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a48e:	f7f9 f9ef 	bl	8003870 <HAL_GetTick>
 800a492:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0308 	and.w	r3, r3, #8
 800a49e:	2b08      	cmp	r3, #8
 800a4a0:	d10e      	bne.n	800a4c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f82f 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e025      	b.n	800a50c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d10e      	bne.n	800a4ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f819 	bl	800a514 <UART_WaitOnFlagUntilTimeout>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e00f      	b.n	800a50c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b09c      	sub	sp, #112	; 0x70
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a524:	e0a9      	b.n	800a67a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52c:	f000 80a5 	beq.w	800a67a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a530:	f7f9 f99e 	bl	8003870 <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d302      	bcc.n	800a546 <UART_WaitOnFlagUntilTimeout+0x32>
 800a540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a542:	2b00      	cmp	r3, #0
 800a544:	d140      	bne.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a55a:	667b      	str	r3, [r7, #100]	; 0x64
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a564:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a566:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a56a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e6      	bne.n	800a546 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	f023 0301 	bic.w	r3, r3, #1
 800a58e:	663b      	str	r3, [r7, #96]	; 0x60
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a598:	64ba      	str	r2, [r7, #72]	; 0x48
 800a59a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a59e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e5      	bne.n	800a578 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e069      	b.n	800a69c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d051      	beq.n	800a67a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e4:	d149      	bne.n	800a67a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a604:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60e:	637b      	str	r3, [r7, #52]	; 0x34
 800a610:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a616:	e841 2300 	strex	r3, r2, [r1]
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e6      	bne.n	800a5f0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	613b      	str	r3, [r7, #16]
   return(result);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f023 0301 	bic.w	r3, r3, #1
 800a638:	66bb      	str	r3, [r7, #104]	; 0x68
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3308      	adds	r3, #8
 800a640:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a642:	623a      	str	r2, [r7, #32]
 800a644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	69f9      	ldr	r1, [r7, #28]
 800a648:	6a3a      	ldr	r2, [r7, #32]
 800a64a:	e841 2300 	strex	r3, r2, [r1]
 800a64e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1e5      	bne.n	800a622 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2220      	movs	r2, #32
 800a65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2220      	movs	r2, #32
 800a662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e010      	b.n	800a69c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	69da      	ldr	r2, [r3, #28]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4013      	ands	r3, r2
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	429a      	cmp	r2, r3
 800a688:	bf0c      	ite	eq
 800a68a:	2301      	moveq	r3, #1
 800a68c:	2300      	movne	r3, #0
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	461a      	mov	r2, r3
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	429a      	cmp	r2, r3
 800a696:	f43f af46 	beq.w	800a526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3770      	adds	r7, #112	; 0x70
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b095      	sub	sp, #84	; 0x54
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a6cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e6      	bne.n	800a6ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f4:	f023 0301 	bic.w	r3, r3, #1
 800a6f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3308      	adds	r3, #8
 800a700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a702:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e3      	bne.n	800a6de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d118      	bne.n	800a750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f023 0310 	bic.w	r3, r3, #16
 800a732:	647b      	str	r3, [r7, #68]	; 0x44
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6979      	ldr	r1, [r7, #20]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	613b      	str	r3, [r7, #16]
   return(result);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a764:	bf00      	nop
 800a766:	3754      	adds	r7, #84	; 0x54
 800a768:	46bd      	mov	sp, r7
 800a76a:	bc80      	pop	{r7}
 800a76c:	4770      	bx	lr

0800a76e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff fb4c 	bl	8009e2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e6      	bne.n	800a7a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fb18 	bl	8009e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e8:	bf00      	nop
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr

0800a802 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	bc80      	pop	{r7}
 800a824:	4770      	bx	lr

0800a826 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_UARTEx_DisableFifoMode+0x16>
 800a838:	2302      	movs	r3, #2
 800a83a:	e027      	b.n	800a88c <HAL_UARTEx_DisableFifoMode+0x66>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2224      	movs	r2, #36	; 0x24
 800a848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0201 	bic.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a86a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	bc80      	pop	{r7}
 800a894:	4770      	bx	lr

0800a896 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d101      	bne.n	800a8ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	e02d      	b.n	800a90a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2224      	movs	r2, #36	; 0x24
 800a8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 0201 	bic.w	r2, r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f850 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a922:	2b01      	cmp	r3, #1
 800a924:	d101      	bne.n	800a92a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a926:	2302      	movs	r3, #2
 800a928:	e02d      	b.n	800a986 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2224      	movs	r2, #36	; 0x24
 800a936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0201 	bic.w	r2, r2, #1
 800a950:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	430a      	orrs	r2, r1
 800a964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f812 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2220      	movs	r2, #32
 800a978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d108      	bne.n	800a9b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9b0:	e031      	b.n	800aa16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b6:	2308      	movs	r3, #8
 800a9b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	0e5b      	lsrs	r3, r3, #25
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	0f5b      	lsrs	r3, r3, #29
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	7b3a      	ldrb	r2, [r7, #12]
 800a9de:	4910      	ldr	r1, [pc, #64]	; (800aa20 <UARTEx_SetNbDataToProcess+0x90>)
 800a9e0:	5c8a      	ldrb	r2, [r1, r2]
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e6:	7b3a      	ldrb	r2, [r7, #12]
 800a9e8:	490e      	ldr	r1, [pc, #56]	; (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	7b7a      	ldrb	r2, [r7, #13]
 800a9fc:	4908      	ldr	r1, [pc, #32]	; (800aa20 <UARTEx_SetNbDataToProcess+0x90>)
 800a9fe:	5c8a      	ldrb	r2, [r1, r2]
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa04:	7b7a      	ldrb	r2, [r7, #13]
 800aa06:	4907      	ldr	r1, [pc, #28]	; (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800aa08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bc80      	pop	{r7}
 800aa1e:	4770      	bx	lr
 800aa20:	08020434 	.word	0x08020434
 800aa24:	0802043c 	.word	0x0802043c

0800aa28 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800aa2c:	f7f8 fe68 	bl	8003700 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800aa30:	f000 f80a 	bl	800aa48 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800aa34:	bf00      	nop
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */
	UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	f00e ff24 	bl	801988c <UTIL_SEQ_Run>
  /* USER CODE END MX_LoRaWAN_Process_1 */
}
 800aa44:	bf00      	nop
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */
	 UTIL_TIMER_Init();
 800aa4c:	f00f f89a 	bl	8019b84 <UTIL_TIMER_Init>
	 UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800aa50:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <LoRaWAN_Init+0x30>)
 800aa52:	2100      	movs	r1, #0
 800aa54:	2001      	movs	r0, #1
 800aa56:	f00e fffd 	bl	8019a54 <UTIL_SEQ_RegTask>
	//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
	  /* Init Info table used by LmHandler*/
	   LoraInfo_Init();
 800aa5a:	f000 f8a9 	bl	800abb0 <LoraInfo_Init>
  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800aa5e:	4807      	ldr	r0, [pc, #28]	; (800aa7c <LoRaWAN_Init+0x34>)
 800aa60:	f001 fc2a 	bl	800c2b8 <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  LmHandlerConfigure(&LmHandlerParams);
 800aa64:	4806      	ldr	r0, [pc, #24]	; (800aa80 <LoRaWAN_Init+0x38>)
 800aa66:	f001 fc73 	bl	800c350 <LmHandlerConfigure>
  LmHandlerJoin(ActivationType);
 800aa6a:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <LoRaWAN_Init+0x3c>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fd2c 	bl	800c4cc <LmHandlerJoin>
  /* USER CODE END LoRaWAN_Init_Last */
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	0800c4b9 	.word	0x0800c4b9
 800aa7c:	20000014 	.word	0x20000014
 800aa80:	2000004c 	.word	0x2000004c
 800aa84:	20000048 	.word	0x20000048

0800aa88 <OnRxData>:


/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
	  uint32_t rxbuffer = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
	  if ((appData != NULL) && (params != NULL))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d008      	beq.n	800aaae <OnRxData+0x26>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <OnRxData+0x26>
	  {
	    printf( "\r\n Received Downlink on F_PORT:%d \r\n", appData->Port);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	4803      	ldr	r0, [pc, #12]	; (800aab8 <OnRxData+0x30>)
 800aaaa:	f00f faad 	bl	801a008 <printf>
	        UTIL_TIMER_Start(&RxLedTimer);
	    }
	    */
	  }
  /* USER CODE END OnRxData_1 */
}
 800aaae:	bf00      	nop
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	08020188 	.word	0x08020188

0800aabc <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
	 if ((params != NULL) && (params->IsMcpsConfirm != 0))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d02d      	beq.n	800ab26 <OnTxData+0x6a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d029      	beq.n	800ab26 <OnTxData+0x6a>
	  {
	    printf("\r\n###### ========== MCPS-Confirm =============\r\n");
 800aad2:	4817      	ldr	r0, [pc, #92]	; (800ab30 <OnTxData+0x74>)
 800aad4:	f00f faf0 	bl	801a0b8 <puts>
	    printf("###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6899      	ldr	r1, [r3, #8]
	            params->AppData.Port, params->Datarate, params->TxPower);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7b1b      	ldrb	r3, [r3, #12]
	    printf("###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aae0:	461a      	mov	r2, r3
	            params->AppData.Port, params->Datarate, params->TxPower);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f993 3004 	ldrsb.w	r3, [r3, #4]
	    printf("###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aae8:	4618      	mov	r0, r3
	            params->AppData.Port, params->Datarate, params->TxPower);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f993 3014 	ldrsb.w	r3, [r3, #20]
	    printf("###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	480f      	ldr	r0, [pc, #60]	; (800ab34 <OnTxData+0x78>)
 800aaf6:	f00f fa87 	bl	801a008 <printf>

	    printf(" | MSG TYPE:");
 800aafa:	480f      	ldr	r0, [pc, #60]	; (800ab38 <OnTxData+0x7c>)
 800aafc:	f00f fa84 	bl	801a008 <printf>
	    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	789b      	ldrb	r3, [r3, #2]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d10b      	bne.n	800ab20 <OnTxData+0x64>
	    {
	      printf("CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	78db      	ldrb	r3, [r3, #3]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <OnTxData+0x58>
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <OnTxData+0x80>)
 800ab12:	e000      	b.n	800ab16 <OnTxData+0x5a>
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <OnTxData+0x84>)
 800ab16:	4619      	mov	r1, r3
 800ab18:	480a      	ldr	r0, [pc, #40]	; (800ab44 <OnTxData+0x88>)
 800ab1a:	f00f fa75 	bl	801a008 <printf>
	    {
	      printf("UNCONFIRMED\r\n");
	    }
	  }
  /* USER CODE END OnTxData_1 */
}
 800ab1e:	e002      	b.n	800ab26 <OnTxData+0x6a>
	      printf("UNCONFIRMED\r\n");
 800ab20:	4809      	ldr	r0, [pc, #36]	; (800ab48 <OnTxData+0x8c>)
 800ab22:	f00f fac9 	bl	801a0b8 <puts>
}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	080201b0 	.word	0x080201b0
 800ab34:	080201e0 	.word	0x080201e0
 800ab38:	08020214 	.word	0x08020214
 800ab3c:	08020224 	.word	0x08020224
 800ab40:	08020228 	.word	0x08020228
 800ab44:	08020230 	.word	0x08020230
 800ab48:	08020244 	.word	0x08020244

0800ab4c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
	if (joinParams != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d016      	beq.n	800ab88 <OnJoinRequest+0x3c>
	  {
	    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10e      	bne.n	800ab82 <OnJoinRequest+0x36>
	    {
	      printf("\r\n###### = JOINED = ");
 800ab64:	480a      	ldr	r0, [pc, #40]	; (800ab90 <OnJoinRequest+0x44>)
 800ab66:	f00f fa4f 	bl	801a008 <printf>
	      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	789b      	ldrb	r3, [r3, #2]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d103      	bne.n	800ab7a <OnJoinRequest+0x2e>
	      {
	        printf( "ABP ======================\r\n");
 800ab72:	4808      	ldr	r0, [pc, #32]	; (800ab94 <OnJoinRequest+0x48>)
 800ab74:	f00f faa0 	bl	801a0b8 <puts>
	    {
	      printf("\r\n###### = JOIN FAILED\r\n");
	    }
	  }
  /* USER CODE END OnJoinRequest_1 */
}
 800ab78:	e006      	b.n	800ab88 <OnJoinRequest+0x3c>
	        printf("OTAA =====================\r\n");
 800ab7a:	4807      	ldr	r0, [pc, #28]	; (800ab98 <OnJoinRequest+0x4c>)
 800ab7c:	f00f fa9c 	bl	801a0b8 <puts>
}
 800ab80:	e002      	b.n	800ab88 <OnJoinRequest+0x3c>
	      printf("\r\n###### = JOIN FAILED\r\n");
 800ab82:	4806      	ldr	r0, [pc, #24]	; (800ab9c <OnJoinRequest+0x50>)
 800ab84:	f00f fa98 	bl	801a0b8 <puts>
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	08020254 	.word	0x08020254
 800ab94:	0802026c 	.word	0x0802026c
 800ab98:	08020288 	.word	0x08020288
 800ab9c:	080202a4 	.word	0x080202a4

0800aba0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800aba4:	2100      	movs	r1, #0
 800aba6:	2001      	movs	r0, #1
 800aba8:	f00e ff76 	bl	8019a98 <UTIL_SEQ_SetTask>
  /* USER CODE END OnMacProcessNotify_1 */
}
 800abac:	bf00      	nop
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800abb4:	4b10      	ldr	r3, [pc, #64]	; (800abf8 <LoraInfo_Init+0x48>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800abba:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <LoraInfo_Init+0x48>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800abc0:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <LoraInfo_Init+0x48>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800abc6:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <LoraInfo_Init+0x48>)
 800abc8:	2200      	movs	r2, #0
 800abca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <LoraInfo_Init+0x48>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f043 0320 	orr.w	r3, r3, #32
 800abd4:	4a08      	ldr	r2, [pc, #32]	; (800abf8 <LoraInfo_Init+0x48>)
 800abd6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <LoraInfo_Init+0x48>)
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d100      	bne.n	800abe2 <LoraInfo_Init+0x32>
  {
  /* USER CODE BEGIN LoraInfo_Init_NO_REGION */

  /* USER CODE END LoraInfo_Init_NO_REGION */
    while (1) {} /* At least one region shall be defined */
 800abe0:	e7fe      	b.n	800abe0 <LoraInfo_Init+0x30>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800abe2:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <LoraInfo_Init+0x48>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800abe8:	4b03      	ldr	r3, [pc, #12]	; (800abf8 <LoraInfo_Init+0x48>)
 800abea:	2203      	movs	r2, #3
 800abec:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800abee:	bf00      	nop
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20001030 	.word	0x20001030

0800abfc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <LoraInfo_GetPtr+0x10>)
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20001030 	.word	0x20001030

0800ac10 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
//#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800ac1a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bc80      	pop	{r7}
 800ac24:	4770      	bx	lr

0800ac26 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
//#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ac34:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr

0800ac40 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ac46:	2301      	movs	r3, #1
 800ac48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
//#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800ac4a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr

0800ac56 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
//#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800ac60:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800ac72:	2301      	movs	r3, #1
 800ac74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
//#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800ac76:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	33f1      	adds	r3, #241	; 0xf1
 800ac8e:	2210      	movs	r2, #16
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f00b fbb6 	bl	8016404 <memset1>
    ctx->M_n = 0;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	22f0      	movs	r2, #240	; 0xf0
 800aca4:	2100      	movs	r1, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f00b fbac 	bl	8016404 <memset1>
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	461a      	mov	r2, r3
 800acc2:	2110      	movs	r1, #16
 800acc4:	6838      	ldr	r0, [r7, #0]
 800acc6:	f000 fe5d 	bl	800b984 <lorawan_aes_set_key>
}
 800acca:	bf00      	nop
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b08c      	sub	sp, #48	; 0x30
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 80a1 	beq.w	800ae2c <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acf0:	f1c3 0310 	rsb	r3, r3, #16
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bf28      	it	cs
 800acfa:	4613      	movcs	r3, r2
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad0a:	4413      	add	r3, r2
 800ad0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f00b fb3b 	bl	801638e <memcpy1>
        ctx->M_n += mlen;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	441a      	add	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad2e:	2b0f      	cmp	r3, #15
 800ad30:	f240 808d 	bls.w	800ae4e <AES_CMAC_Update+0x17c>
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	f000 8088 	beq.w	800ae4e <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad3e:	2300      	movs	r3, #0
 800ad40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad42:	e015      	b.n	800ad70 <AES_CMAC_Update+0x9e>
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	4413      	add	r3, r2
 800ad4a:	33f1      	adds	r3, #241	; 0xf1
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	440b      	add	r3, r1
 800ad54:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	4053      	eors	r3, r2
 800ad5c:	b2d9      	uxtb	r1, r3
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad62:	4413      	add	r3, r2
 800ad64:	33f1      	adds	r3, #241	; 0xf1
 800ad66:	460a      	mov	r2, r1
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	2b0f      	cmp	r3, #15
 800ad74:	dde6      	ble.n	800ad44 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ad7c:	f107 0314 	add.w	r3, r7, #20
 800ad80:	2210      	movs	r2, #16
 800ad82:	4618      	mov	r0, r3
 800ad84:	f00b fb03 	bl	801638e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	f107 0114 	add.w	r1, r7, #20
 800ad8e:	f107 0314 	add.w	r3, r7, #20
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fed4 	bl	800bb40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	33f1      	adds	r3, #241	; 0xf1
 800ad9c:	f107 0114 	add.w	r1, r7, #20
 800ada0:	2210      	movs	r2, #16
 800ada2:	4618      	mov	r0, r3
 800ada4:	f00b faf3 	bl	801638e <memcpy1>

        data += mlen;
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	4413      	add	r3, r2
 800adae:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800adb8:	e038      	b.n	800ae2c <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800adba:	2300      	movs	r3, #0
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800adbe:	e013      	b.n	800ade8 <AES_CMAC_Update+0x116>
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	4413      	add	r3, r2
 800adc6:	33f1      	adds	r3, #241	; 0xf1
 800adc8:	781a      	ldrb	r2, [r3, #0]
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	440b      	add	r3, r1
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	4053      	eors	r3, r2
 800add4:	b2d9      	uxtb	r1, r3
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	4413      	add	r3, r2
 800addc:	33f1      	adds	r3, #241	; 0xf1
 800adde:	460a      	mov	r2, r1
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	3301      	adds	r3, #1
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	2b0f      	cmp	r3, #15
 800adec:	dde8      	ble.n	800adc0 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800adf4:	f107 0314 	add.w	r3, r7, #20
 800adf8:	2210      	movs	r2, #16
 800adfa:	4618      	mov	r0, r3
 800adfc:	f00b fac7 	bl	801638e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	f107 0114 	add.w	r1, r7, #20
 800ae06:	f107 0314 	add.w	r3, r7, #20
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fe98 	bl	800bb40 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	33f1      	adds	r3, #241	; 0xf1
 800ae14:	f107 0114 	add.w	r1, r7, #20
 800ae18:	2210      	movs	r2, #16
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f00b fab7 	bl	801638e <memcpy1>

        data += 16;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	3310      	adds	r3, #16
 800ae24:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3b10      	subs	r3, #16
 800ae2a:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	d8c3      	bhi.n	800adba <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	b292      	uxth	r2, r2
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f00b faa5 	bl	801638e <memcpy1>
    ctx->M_n = len;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae4c:	e000      	b.n	800ae50 <AES_CMAC_Update+0x17e>
            return;
 800ae4e:	bf00      	nop
}
 800ae50:	3730      	adds	r7, #48	; 0x30
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b092      	sub	sp, #72	; 0x48
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae60:	f107 031c 	add.w	r3, r7, #28
 800ae64:	2210      	movs	r2, #16
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f00b facb 	bl	8016404 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	f107 011c 	add.w	r1, r7, #28
 800ae74:	f107 031c 	add.w	r3, r7, #28
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fe61 	bl	800bb40 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ae7e:	7f3b      	ldrb	r3, [r7, #28]
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da30      	bge.n	800aee8 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ae86:	2300      	movs	r3, #0
 800ae88:	647b      	str	r3, [r7, #68]	; 0x44
 800ae8a:	e01b      	b.n	800aec4 <AES_CMAC_Final+0x6e>
 800ae8c:	f107 021c 	add.w	r2, r7, #28
 800ae90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae92:	4413      	add	r3, r2
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	b25a      	sxtb	r2, r3
 800ae9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	3348      	adds	r3, #72	; 0x48
 800aea0:	443b      	add	r3, r7
 800aea2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aea6:	09db      	lsrs	r3, r3, #7
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	b25b      	sxtb	r3, r3
 800aeac:	4313      	orrs	r3, r2
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	b2d9      	uxtb	r1, r3
 800aeb2:	f107 021c 	add.w	r2, r7, #28
 800aeb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb8:	4413      	add	r3, r2
 800aeba:	460a      	mov	r2, r1
 800aebc:	701a      	strb	r2, [r3, #0]
 800aebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec0:	3301      	adds	r3, #1
 800aec2:	647b      	str	r3, [r7, #68]	; 0x44
 800aec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec6:	2b0e      	cmp	r3, #14
 800aec8:	dde0      	ble.n	800ae8c <AES_CMAC_Final+0x36>
 800aeca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800aed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeda:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aede:	43db      	mvns	r3, r3
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aee6:	e027      	b.n	800af38 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800aee8:	2300      	movs	r3, #0
 800aeea:	643b      	str	r3, [r7, #64]	; 0x40
 800aeec:	e01b      	b.n	800af26 <AES_CMAC_Final+0xd0>
 800aeee:	f107 021c 	add.w	r2, r7, #28
 800aef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	005b      	lsls	r3, r3, #1
 800aefa:	b25a      	sxtb	r2, r3
 800aefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefe:	3301      	adds	r3, #1
 800af00:	3348      	adds	r3, #72	; 0x48
 800af02:	443b      	add	r3, r7
 800af04:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af08:	09db      	lsrs	r3, r3, #7
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	4313      	orrs	r3, r2
 800af10:	b25b      	sxtb	r3, r3
 800af12:	b2d9      	uxtb	r1, r3
 800af14:	f107 021c 	add.w	r2, r7, #28
 800af18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1a:	4413      	add	r3, r2
 800af1c:	460a      	mov	r2, r1
 800af1e:	701a      	strb	r2, [r3, #0]
 800af20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af22:	3301      	adds	r3, #1
 800af24:	643b      	str	r3, [r7, #64]	; 0x40
 800af26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af28:	2b0e      	cmp	r3, #14
 800af2a:	dde0      	ble.n	800aeee <AES_CMAC_Final+0x98>
 800af2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d11d      	bne.n	800af7e <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af46:	e016      	b.n	800af76 <AES_CMAC_Final+0x120>
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4c:	4413      	add	r3, r2
 800af4e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	f107 011c 	add.w	r1, r7, #28
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	440b      	add	r3, r1
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	4053      	eors	r3, r2
 800af60:	b2d9      	uxtb	r1, r3
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af66:	4413      	add	r3, r2
 800af68:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af6c:	460a      	mov	r2, r1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af72:	3301      	adds	r3, #1
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af78:	2b0f      	cmp	r3, #15
 800af7a:	dde5      	ble.n	800af48 <AES_CMAC_Final+0xf2>
 800af7c:	e096      	b.n	800b0ac <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800af7e:	7f3b      	ldrb	r3, [r7, #28]
 800af80:	b25b      	sxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	da30      	bge.n	800afe8 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800af86:	2300      	movs	r3, #0
 800af88:	63bb      	str	r3, [r7, #56]	; 0x38
 800af8a:	e01b      	b.n	800afc4 <AES_CMAC_Final+0x16e>
 800af8c:	f107 021c 	add.w	r2, r7, #28
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	4413      	add	r3, r2
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	b25a      	sxtb	r2, r3
 800af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9c:	3301      	adds	r3, #1
 800af9e:	3348      	adds	r3, #72	; 0x48
 800afa0:	443b      	add	r3, r7
 800afa2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afa6:	09db      	lsrs	r3, r3, #7
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	b25b      	sxtb	r3, r3
 800afac:	4313      	orrs	r3, r2
 800afae:	b25b      	sxtb	r3, r3
 800afb0:	b2d9      	uxtb	r1, r3
 800afb2:	f107 021c 	add.w	r2, r7, #28
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	4413      	add	r3, r2
 800afba:	460a      	mov	r2, r1
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc0:	3301      	adds	r3, #1
 800afc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	2b0e      	cmp	r3, #14
 800afc8:	dde0      	ble.n	800af8c <AES_CMAC_Final+0x136>
 800afca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800afd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afda:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800afde:	43db      	mvns	r3, r3
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afe6:	e027      	b.n	800b038 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800afe8:	2300      	movs	r3, #0
 800afea:	637b      	str	r3, [r7, #52]	; 0x34
 800afec:	e01b      	b.n	800b026 <AES_CMAC_Final+0x1d0>
 800afee:	f107 021c 	add.w	r2, r7, #28
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	4413      	add	r3, r2
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	b25a      	sxtb	r2, r3
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	3301      	adds	r3, #1
 800b000:	3348      	adds	r3, #72	; 0x48
 800b002:	443b      	add	r3, r7
 800b004:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b008:	09db      	lsrs	r3, r3, #7
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	b25b      	sxtb	r3, r3
 800b00e:	4313      	orrs	r3, r2
 800b010:	b25b      	sxtb	r3, r3
 800b012:	b2d9      	uxtb	r1, r3
 800b014:	f107 021c 	add.w	r2, r7, #28
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	4413      	add	r3, r2
 800b01c:	460a      	mov	r2, r1
 800b01e:	701a      	strb	r2, [r3, #0]
 800b020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b022:	3301      	adds	r3, #1
 800b024:	637b      	str	r3, [r7, #52]	; 0x34
 800b026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b028:	2b0e      	cmp	r3, #14
 800b02a:	dde0      	ble.n	800afee <AES_CMAC_Final+0x198>
 800b02c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	b2db      	uxtb	r3, r3
 800b034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	4413      	add	r3, r2
 800b042:	2280      	movs	r2, #128	; 0x80
 800b044:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b048:	e007      	b.n	800b05a <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	4413      	add	r3, r2
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b060:	1c5a      	adds	r2, r3, #1
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b06e:	2b0f      	cmp	r3, #15
 800b070:	d9eb      	bls.n	800b04a <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b072:	2300      	movs	r3, #0
 800b074:	633b      	str	r3, [r7, #48]	; 0x30
 800b076:	e016      	b.n	800b0a6 <AES_CMAC_Final+0x250>
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	4413      	add	r3, r2
 800b07e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	f107 011c 	add.w	r1, r7, #28
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	440b      	add	r3, r1
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	4053      	eors	r3, r2
 800b090:	b2d9      	uxtb	r1, r3
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	4413      	add	r3, r2
 800b098:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b09c:	460a      	mov	r2, r1
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	633b      	str	r3, [r7, #48]	; 0x30
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	2b0f      	cmp	r3, #15
 800b0aa:	dde5      	ble.n	800b078 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b0:	e015      	b.n	800b0de <AES_CMAC_Final+0x288>
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	4413      	add	r3, r2
 800b0b8:	33f1      	adds	r3, #241	; 0xf1
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	440b      	add	r3, r1
 800b0c2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	4053      	eors	r3, r2
 800b0ca:	b2d9      	uxtb	r1, r3
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	4413      	add	r3, r2
 800b0d2:	33f1      	adds	r3, #241	; 0xf1
 800b0d4:	460a      	mov	r2, r1
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	3301      	adds	r3, #1
 800b0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e0:	2b0f      	cmp	r3, #15
 800b0e2:	dde6      	ble.n	800b0b2 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	2210      	movs	r2, #16
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f00b f94c 	bl	801638e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	f107 030c 	add.w	r3, r7, #12
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 fd1e 	bl	800bb40 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b104:	f107 031c 	add.w	r3, r7, #28
 800b108:	2210      	movs	r2, #16
 800b10a:	2100      	movs	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f00b f979 	bl	8016404 <memset1>
}
 800b112:	bf00      	nop
 800b114:	3748      	adds	r7, #72	; 0x48
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b11a:	b480      	push	{r7}
 800b11c:	b083      	sub	sp, #12
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3301      	adds	r3, #1
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	7852      	ldrb	r2, [r2, #1]
 800b134:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3302      	adds	r3, #2
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	7892      	ldrb	r2, [r2, #2]
 800b13e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3303      	adds	r3, #3
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	78d2      	ldrb	r2, [r2, #3]
 800b148:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3304      	adds	r3, #4
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	7912      	ldrb	r2, [r2, #4]
 800b152:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3305      	adds	r3, #5
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	7952      	ldrb	r2, [r2, #5]
 800b15c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3306      	adds	r3, #6
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	7992      	ldrb	r2, [r2, #6]
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3307      	adds	r3, #7
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	79d2      	ldrb	r2, [r2, #7]
 800b170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3308      	adds	r3, #8
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	7a12      	ldrb	r2, [r2, #8]
 800b17a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3309      	adds	r3, #9
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	7a52      	ldrb	r2, [r2, #9]
 800b184:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	330a      	adds	r3, #10
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	7a92      	ldrb	r2, [r2, #10]
 800b18e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	330b      	adds	r3, #11
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	7ad2      	ldrb	r2, [r2, #11]
 800b198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	330c      	adds	r3, #12
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	7b12      	ldrb	r2, [r2, #12]
 800b1a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	330d      	adds	r3, #13
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	7b52      	ldrb	r2, [r2, #13]
 800b1ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	330e      	adds	r3, #14
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	7b92      	ldrb	r2, [r2, #14]
 800b1b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	330f      	adds	r3, #15
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	7bd2      	ldrb	r2, [r2, #15]
 800b1c0:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1c2:	bf00      	nop
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bc80      	pop	{r7}
 800b1ca:	4770      	bx	lr

0800b1cc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b1da:	e007      	b.n	800b1ec <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	1c53      	adds	r3, r2, #1
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1c59      	adds	r1, r3, #1
 800b1e6:	60f9      	str	r1, [r7, #12]
 800b1e8:	7812      	ldrb	r2, [r2, #0]
 800b1ea:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b1ec:	79fb      	ldrb	r3, [r7, #7]
 800b1ee:	1e5a      	subs	r2, r3, #1
 800b1f0:	71fa      	strb	r2, [r7, #7]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1f2      	bne.n	800b1dc <copy_block_nn+0x10>
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr

0800b202 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b202:	b480      	push	{r7}
 800b204:	b083      	sub	sp, #12
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	4053      	eors	r3, r2
 800b216:	b2da      	uxtb	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3301      	adds	r3, #1
 800b220:	7819      	ldrb	r1, [r3, #0]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	781a      	ldrb	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3301      	adds	r3, #1
 800b22c:	404a      	eors	r2, r1
 800b22e:	b2d2      	uxtb	r2, r2
 800b230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3302      	adds	r3, #2
 800b236:	7819      	ldrb	r1, [r3, #0]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	3302      	adds	r3, #2
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3302      	adds	r3, #2
 800b242:	404a      	eors	r2, r1
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3303      	adds	r3, #3
 800b24c:	7819      	ldrb	r1, [r3, #0]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	3303      	adds	r3, #3
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3303      	adds	r3, #3
 800b258:	404a      	eors	r2, r1
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3304      	adds	r3, #4
 800b262:	7819      	ldrb	r1, [r3, #0]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	3304      	adds	r3, #4
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3304      	adds	r3, #4
 800b26e:	404a      	eors	r2, r1
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3305      	adds	r3, #5
 800b278:	7819      	ldrb	r1, [r3, #0]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	3305      	adds	r3, #5
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3305      	adds	r3, #5
 800b284:	404a      	eors	r2, r1
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3306      	adds	r3, #6
 800b28e:	7819      	ldrb	r1, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	3306      	adds	r3, #6
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3306      	adds	r3, #6
 800b29a:	404a      	eors	r2, r1
 800b29c:	b2d2      	uxtb	r2, r2
 800b29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3307      	adds	r3, #7
 800b2a4:	7819      	ldrb	r1, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	3307      	adds	r3, #7
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3307      	adds	r3, #7
 800b2b0:	404a      	eors	r2, r1
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	7819      	ldrb	r1, [r3, #0]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	404a      	eors	r2, r1
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3309      	adds	r3, #9
 800b2d0:	7819      	ldrb	r1, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	3309      	adds	r3, #9
 800b2d6:	781a      	ldrb	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3309      	adds	r3, #9
 800b2dc:	404a      	eors	r2, r1
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	330a      	adds	r3, #10
 800b2e6:	7819      	ldrb	r1, [r3, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	330a      	adds	r3, #10
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	330a      	adds	r3, #10
 800b2f2:	404a      	eors	r2, r1
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	330b      	adds	r3, #11
 800b2fc:	7819      	ldrb	r1, [r3, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	330b      	adds	r3, #11
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	330b      	adds	r3, #11
 800b308:	404a      	eors	r2, r1
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	330c      	adds	r3, #12
 800b312:	7819      	ldrb	r1, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	330c      	adds	r3, #12
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	330c      	adds	r3, #12
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	330d      	adds	r3, #13
 800b328:	7819      	ldrb	r1, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	330d      	adds	r3, #13
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	330d      	adds	r3, #13
 800b334:	404a      	eors	r2, r1
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330e      	adds	r3, #14
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	330e      	adds	r3, #14
 800b344:	781a      	ldrb	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	330e      	adds	r3, #14
 800b34a:	404a      	eors	r2, r1
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	330f      	adds	r3, #15
 800b354:	7819      	ldrb	r1, [r3, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	330f      	adds	r3, #15
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	330f      	adds	r3, #15
 800b360:	404a      	eors	r2, r1
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
#endif
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bc80      	pop	{r7}
 800b36e:	4770      	bx	lr

0800b370 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	781a      	ldrb	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	4053      	eors	r3, r2
 800b386:	b2da      	uxtb	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	3301      	adds	r3, #1
 800b390:	7819      	ldrb	r1, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3301      	adds	r3, #1
 800b396:	781a      	ldrb	r2, [r3, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3301      	adds	r3, #1
 800b39c:	404a      	eors	r2, r1
 800b39e:	b2d2      	uxtb	r2, r2
 800b3a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	3302      	adds	r3, #2
 800b3a6:	7819      	ldrb	r1, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3302      	adds	r3, #2
 800b3ac:	781a      	ldrb	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3302      	adds	r3, #2
 800b3b2:	404a      	eors	r2, r1
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3303      	adds	r3, #3
 800b3bc:	7819      	ldrb	r1, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3303      	adds	r3, #3
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3303      	adds	r3, #3
 800b3c8:	404a      	eors	r2, r1
 800b3ca:	b2d2      	uxtb	r2, r2
 800b3cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	7819      	ldrb	r1, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	781a      	ldrb	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	404a      	eors	r2, r1
 800b3e0:	b2d2      	uxtb	r2, r2
 800b3e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	3305      	adds	r3, #5
 800b3e8:	7819      	ldrb	r1, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3305      	adds	r3, #5
 800b3ee:	781a      	ldrb	r2, [r3, #0]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	3305      	adds	r3, #5
 800b3f4:	404a      	eors	r2, r1
 800b3f6:	b2d2      	uxtb	r2, r2
 800b3f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3306      	adds	r3, #6
 800b3fe:	7819      	ldrb	r1, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3306      	adds	r3, #6
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3306      	adds	r3, #6
 800b40a:	404a      	eors	r2, r1
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3307      	adds	r3, #7
 800b414:	7819      	ldrb	r1, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3307      	adds	r3, #7
 800b41a:	781a      	ldrb	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3307      	adds	r3, #7
 800b420:	404a      	eors	r2, r1
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	3308      	adds	r3, #8
 800b42a:	7819      	ldrb	r1, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3308      	adds	r3, #8
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3308      	adds	r3, #8
 800b436:	404a      	eors	r2, r1
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	3309      	adds	r3, #9
 800b440:	7819      	ldrb	r1, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3309      	adds	r3, #9
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3309      	adds	r3, #9
 800b44c:	404a      	eors	r2, r1
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	330a      	adds	r3, #10
 800b456:	7819      	ldrb	r1, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	330a      	adds	r3, #10
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	330a      	adds	r3, #10
 800b462:	404a      	eors	r2, r1
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	330b      	adds	r3, #11
 800b46c:	7819      	ldrb	r1, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	330b      	adds	r3, #11
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	330b      	adds	r3, #11
 800b478:	404a      	eors	r2, r1
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	330c      	adds	r3, #12
 800b482:	7819      	ldrb	r1, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	330c      	adds	r3, #12
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	330c      	adds	r3, #12
 800b48e:	404a      	eors	r2, r1
 800b490:	b2d2      	uxtb	r2, r2
 800b492:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	330d      	adds	r3, #13
 800b498:	7819      	ldrb	r1, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	330d      	adds	r3, #13
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	330d      	adds	r3, #13
 800b4a4:	404a      	eors	r2, r1
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	330e      	adds	r3, #14
 800b4ae:	7819      	ldrb	r1, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	330e      	adds	r3, #14
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	330e      	adds	r3, #14
 800b4ba:	404a      	eors	r2, r1
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	330f      	adds	r3, #15
 800b4c4:	7819      	ldrb	r1, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	330f      	adds	r3, #15
 800b4ca:	781a      	ldrb	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	330f      	adds	r3, #15
 800b4d0:	404a      	eors	r2, r1
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bc80      	pop	{r7}
 800b4de:	4770      	bx	lr

0800b4e0 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fe88 	bl	800b202 <xor_block>
}
 800b4f2:	bf00      	nop
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	4b48      	ldr	r3, [pc, #288]	; (800b62c <shift_sub_rows+0x130>)
 800b50c:	5c9a      	ldrb	r2, [r3, r2]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3304      	adds	r3, #4
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	4619      	mov	r1, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3304      	adds	r3, #4
 800b51e:	4a43      	ldr	r2, [pc, #268]	; (800b62c <shift_sub_rows+0x130>)
 800b520:	5c52      	ldrb	r2, [r2, r1]
 800b522:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3308      	adds	r3, #8
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	4619      	mov	r1, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3308      	adds	r3, #8
 800b530:	4a3e      	ldr	r2, [pc, #248]	; (800b62c <shift_sub_rows+0x130>)
 800b532:	5c52      	ldrb	r2, [r2, r1]
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	330c      	adds	r3, #12
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	4619      	mov	r1, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	330c      	adds	r3, #12
 800b542:	4a3a      	ldr	r2, [pc, #232]	; (800b62c <shift_sub_rows+0x130>)
 800b544:	5c52      	ldrb	r2, [r2, r1]
 800b546:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	73fb      	strb	r3, [r7, #15]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3305      	adds	r3, #5
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	4619      	mov	r1, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3301      	adds	r3, #1
 800b55a:	4a34      	ldr	r2, [pc, #208]	; (800b62c <shift_sub_rows+0x130>)
 800b55c:	5c52      	ldrb	r2, [r2, r1]
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3309      	adds	r3, #9
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3305      	adds	r3, #5
 800b56c:	4a2f      	ldr	r2, [pc, #188]	; (800b62c <shift_sub_rows+0x130>)
 800b56e:	5c52      	ldrb	r2, [r2, r1]
 800b570:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	330d      	adds	r3, #13
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3309      	adds	r3, #9
 800b57e:	4a2b      	ldr	r2, [pc, #172]	; (800b62c <shift_sub_rows+0x130>)
 800b580:	5c52      	ldrb	r2, [r2, r1]
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	7bfa      	ldrb	r2, [r7, #15]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	330d      	adds	r3, #13
 800b58a:	4928      	ldr	r1, [pc, #160]	; (800b62c <shift_sub_rows+0x130>)
 800b58c:	5c8a      	ldrb	r2, [r1, r2]
 800b58e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	789b      	ldrb	r3, [r3, #2]
 800b594:	73fb      	strb	r3, [r7, #15]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	330a      	adds	r3, #10
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	4619      	mov	r1, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	4a22      	ldr	r2, [pc, #136]	; (800b62c <shift_sub_rows+0x130>)
 800b5a4:	5c52      	ldrb	r2, [r2, r1]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	7bfa      	ldrb	r2, [r7, #15]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	330a      	adds	r3, #10
 800b5ae:	491f      	ldr	r1, [pc, #124]	; (800b62c <shift_sub_rows+0x130>)
 800b5b0:	5c8a      	ldrb	r2, [r1, r2]
 800b5b2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	799b      	ldrb	r3, [r3, #6]
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	330e      	adds	r3, #14
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3306      	adds	r3, #6
 800b5c6:	4a19      	ldr	r2, [pc, #100]	; (800b62c <shift_sub_rows+0x130>)
 800b5c8:	5c52      	ldrb	r2, [r2, r1]
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	330e      	adds	r3, #14
 800b5d2:	4916      	ldr	r1, [pc, #88]	; (800b62c <shift_sub_rows+0x130>)
 800b5d4:	5c8a      	ldrb	r2, [r1, r2]
 800b5d6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7bdb      	ldrb	r3, [r3, #15]
 800b5dc:	73fb      	strb	r3, [r7, #15]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	330b      	adds	r3, #11
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	330f      	adds	r3, #15
 800b5ea:	4a10      	ldr	r2, [pc, #64]	; (800b62c <shift_sub_rows+0x130>)
 800b5ec:	5c52      	ldrb	r2, [r2, r1]
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3307      	adds	r3, #7
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	330b      	adds	r3, #11
 800b5fc:	4a0b      	ldr	r2, [pc, #44]	; (800b62c <shift_sub_rows+0x130>)
 800b5fe:	5c52      	ldrb	r2, [r2, r1]
 800b600:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3303      	adds	r3, #3
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	4619      	mov	r1, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3307      	adds	r3, #7
 800b60e:	4a07      	ldr	r2, [pc, #28]	; (800b62c <shift_sub_rows+0x130>)
 800b610:	5c52      	ldrb	r2, [r2, r1]
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	7bfa      	ldrb	r2, [r7, #15]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3303      	adds	r3, #3
 800b61a:	4904      	ldr	r1, [pc, #16]	; (800b62c <shift_sub_rows+0x130>)
 800b61c:	5c8a      	ldrb	r2, [r1, r2]
 800b61e:	701a      	strb	r2, [r3, #0]
}
 800b620:	bf00      	nop
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	bc80      	pop	{r7}
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	08020444 	.word	0x08020444

0800b630 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b638:	f107 0308 	add.w	r3, r7, #8
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fd6b 	bl	800b11a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b644:	7a3b      	ldrb	r3, [r7, #8]
 800b646:	461a      	mov	r2, r3
 800b648:	4b9a      	ldr	r3, [pc, #616]	; (800b8b4 <mix_sub_columns+0x284>)
 800b64a:	5c9a      	ldrb	r2, [r3, r2]
 800b64c:	7b7b      	ldrb	r3, [r7, #13]
 800b64e:	4619      	mov	r1, r3
 800b650:	4b99      	ldr	r3, [pc, #612]	; (800b8b8 <mix_sub_columns+0x288>)
 800b652:	5c5b      	ldrb	r3, [r3, r1]
 800b654:	4053      	eors	r3, r2
 800b656:	b2da      	uxtb	r2, r3
 800b658:	7cbb      	ldrb	r3, [r7, #18]
 800b65a:	4619      	mov	r1, r3
 800b65c:	4b97      	ldr	r3, [pc, #604]	; (800b8bc <mix_sub_columns+0x28c>)
 800b65e:	5c5b      	ldrb	r3, [r3, r1]
 800b660:	4053      	eors	r3, r2
 800b662:	b2da      	uxtb	r2, r3
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	4619      	mov	r1, r3
 800b668:	4b94      	ldr	r3, [pc, #592]	; (800b8bc <mix_sub_columns+0x28c>)
 800b66a:	5c5b      	ldrb	r3, [r3, r1]
 800b66c:	4053      	eors	r3, r2
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b674:	7a3b      	ldrb	r3, [r7, #8]
 800b676:	461a      	mov	r2, r3
 800b678:	4b90      	ldr	r3, [pc, #576]	; (800b8bc <mix_sub_columns+0x28c>)
 800b67a:	5c9a      	ldrb	r2, [r3, r2]
 800b67c:	7b7b      	ldrb	r3, [r7, #13]
 800b67e:	4619      	mov	r1, r3
 800b680:	4b8c      	ldr	r3, [pc, #560]	; (800b8b4 <mix_sub_columns+0x284>)
 800b682:	5c5b      	ldrb	r3, [r3, r1]
 800b684:	4053      	eors	r3, r2
 800b686:	b2da      	uxtb	r2, r3
 800b688:	7cbb      	ldrb	r3, [r7, #18]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4b8a      	ldr	r3, [pc, #552]	; (800b8b8 <mix_sub_columns+0x288>)
 800b68e:	5c5b      	ldrb	r3, [r3, r1]
 800b690:	4053      	eors	r3, r2
 800b692:	b2d9      	uxtb	r1, r3
 800b694:	7dfb      	ldrb	r3, [r7, #23]
 800b696:	461a      	mov	r2, r3
 800b698:	4b88      	ldr	r3, [pc, #544]	; (800b8bc <mix_sub_columns+0x28c>)
 800b69a:	5c9a      	ldrb	r2, [r3, r2]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	404a      	eors	r2, r1
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6a6:	7a3b      	ldrb	r3, [r7, #8]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4b84      	ldr	r3, [pc, #528]	; (800b8bc <mix_sub_columns+0x28c>)
 800b6ac:	5c9a      	ldrb	r2, [r3, r2]
 800b6ae:	7b7b      	ldrb	r3, [r7, #13]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4b82      	ldr	r3, [pc, #520]	; (800b8bc <mix_sub_columns+0x28c>)
 800b6b4:	5c5b      	ldrb	r3, [r3, r1]
 800b6b6:	4053      	eors	r3, r2
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	7cbb      	ldrb	r3, [r7, #18]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4b7d      	ldr	r3, [pc, #500]	; (800b8b4 <mix_sub_columns+0x284>)
 800b6c0:	5c5b      	ldrb	r3, [r3, r1]
 800b6c2:	4053      	eors	r3, r2
 800b6c4:	b2d9      	uxtb	r1, r3
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4b7b      	ldr	r3, [pc, #492]	; (800b8b8 <mix_sub_columns+0x288>)
 800b6cc:	5c9a      	ldrb	r2, [r3, r2]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	404a      	eors	r2, r1
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b6d8:	7a3b      	ldrb	r3, [r7, #8]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	4b76      	ldr	r3, [pc, #472]	; (800b8b8 <mix_sub_columns+0x288>)
 800b6de:	5c9a      	ldrb	r2, [r3, r2]
 800b6e0:	7b7b      	ldrb	r3, [r7, #13]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4b75      	ldr	r3, [pc, #468]	; (800b8bc <mix_sub_columns+0x28c>)
 800b6e6:	5c5b      	ldrb	r3, [r3, r1]
 800b6e8:	4053      	eors	r3, r2
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	7cbb      	ldrb	r3, [r7, #18]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4b72      	ldr	r3, [pc, #456]	; (800b8bc <mix_sub_columns+0x28c>)
 800b6f2:	5c5b      	ldrb	r3, [r3, r1]
 800b6f4:	4053      	eors	r3, r2
 800b6f6:	b2d9      	uxtb	r1, r3
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4b6d      	ldr	r3, [pc, #436]	; (800b8b4 <mix_sub_columns+0x284>)
 800b6fe:	5c9a      	ldrb	r2, [r3, r2]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3303      	adds	r3, #3
 800b704:	404a      	eors	r2, r1
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b70a:	7b3b      	ldrb	r3, [r7, #12]
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b69      	ldr	r3, [pc, #420]	; (800b8b4 <mix_sub_columns+0x284>)
 800b710:	5c9a      	ldrb	r2, [r3, r2]
 800b712:	7c7b      	ldrb	r3, [r7, #17]
 800b714:	4619      	mov	r1, r3
 800b716:	4b68      	ldr	r3, [pc, #416]	; (800b8b8 <mix_sub_columns+0x288>)
 800b718:	5c5b      	ldrb	r3, [r3, r1]
 800b71a:	4053      	eors	r3, r2
 800b71c:	b2da      	uxtb	r2, r3
 800b71e:	7dbb      	ldrb	r3, [r7, #22]
 800b720:	4619      	mov	r1, r3
 800b722:	4b66      	ldr	r3, [pc, #408]	; (800b8bc <mix_sub_columns+0x28c>)
 800b724:	5c5b      	ldrb	r3, [r3, r1]
 800b726:	4053      	eors	r3, r2
 800b728:	b2d9      	uxtb	r1, r3
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b63      	ldr	r3, [pc, #396]	; (800b8bc <mix_sub_columns+0x28c>)
 800b730:	5c9a      	ldrb	r2, [r3, r2]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3304      	adds	r3, #4
 800b736:	404a      	eors	r2, r1
 800b738:	b2d2      	uxtb	r2, r2
 800b73a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b73c:	7b3b      	ldrb	r3, [r7, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	4b5e      	ldr	r3, [pc, #376]	; (800b8bc <mix_sub_columns+0x28c>)
 800b742:	5c9a      	ldrb	r2, [r3, r2]
 800b744:	7c7b      	ldrb	r3, [r7, #17]
 800b746:	4619      	mov	r1, r3
 800b748:	4b5a      	ldr	r3, [pc, #360]	; (800b8b4 <mix_sub_columns+0x284>)
 800b74a:	5c5b      	ldrb	r3, [r3, r1]
 800b74c:	4053      	eors	r3, r2
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	7dbb      	ldrb	r3, [r7, #22]
 800b752:	4619      	mov	r1, r3
 800b754:	4b58      	ldr	r3, [pc, #352]	; (800b8b8 <mix_sub_columns+0x288>)
 800b756:	5c5b      	ldrb	r3, [r3, r1]
 800b758:	4053      	eors	r3, r2
 800b75a:	b2d9      	uxtb	r1, r3
 800b75c:	7afb      	ldrb	r3, [r7, #11]
 800b75e:	461a      	mov	r2, r3
 800b760:	4b56      	ldr	r3, [pc, #344]	; (800b8bc <mix_sub_columns+0x28c>)
 800b762:	5c9a      	ldrb	r2, [r3, r2]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3305      	adds	r3, #5
 800b768:	404a      	eors	r2, r1
 800b76a:	b2d2      	uxtb	r2, r2
 800b76c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b76e:	7b3b      	ldrb	r3, [r7, #12]
 800b770:	461a      	mov	r2, r3
 800b772:	4b52      	ldr	r3, [pc, #328]	; (800b8bc <mix_sub_columns+0x28c>)
 800b774:	5c9a      	ldrb	r2, [r3, r2]
 800b776:	7c7b      	ldrb	r3, [r7, #17]
 800b778:	4619      	mov	r1, r3
 800b77a:	4b50      	ldr	r3, [pc, #320]	; (800b8bc <mix_sub_columns+0x28c>)
 800b77c:	5c5b      	ldrb	r3, [r3, r1]
 800b77e:	4053      	eors	r3, r2
 800b780:	b2da      	uxtb	r2, r3
 800b782:	7dbb      	ldrb	r3, [r7, #22]
 800b784:	4619      	mov	r1, r3
 800b786:	4b4b      	ldr	r3, [pc, #300]	; (800b8b4 <mix_sub_columns+0x284>)
 800b788:	5c5b      	ldrb	r3, [r3, r1]
 800b78a:	4053      	eors	r3, r2
 800b78c:	b2d9      	uxtb	r1, r3
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	461a      	mov	r2, r3
 800b792:	4b49      	ldr	r3, [pc, #292]	; (800b8b8 <mix_sub_columns+0x288>)
 800b794:	5c9a      	ldrb	r2, [r3, r2]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3306      	adds	r3, #6
 800b79a:	404a      	eors	r2, r1
 800b79c:	b2d2      	uxtb	r2, r2
 800b79e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7a0:	7b3b      	ldrb	r3, [r7, #12]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4b44      	ldr	r3, [pc, #272]	; (800b8b8 <mix_sub_columns+0x288>)
 800b7a6:	5c9a      	ldrb	r2, [r3, r2]
 800b7a8:	7c7b      	ldrb	r3, [r7, #17]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4b43      	ldr	r3, [pc, #268]	; (800b8bc <mix_sub_columns+0x28c>)
 800b7ae:	5c5b      	ldrb	r3, [r3, r1]
 800b7b0:	4053      	eors	r3, r2
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	7dbb      	ldrb	r3, [r7, #22]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	4b40      	ldr	r3, [pc, #256]	; (800b8bc <mix_sub_columns+0x28c>)
 800b7ba:	5c5b      	ldrb	r3, [r3, r1]
 800b7bc:	4053      	eors	r3, r2
 800b7be:	b2d9      	uxtb	r1, r3
 800b7c0:	7afb      	ldrb	r3, [r7, #11]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4b3b      	ldr	r3, [pc, #236]	; (800b8b4 <mix_sub_columns+0x284>)
 800b7c6:	5c9a      	ldrb	r2, [r3, r2]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3307      	adds	r3, #7
 800b7cc:	404a      	eors	r2, r1
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b7d2:	7c3b      	ldrb	r3, [r7, #16]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4b37      	ldr	r3, [pc, #220]	; (800b8b4 <mix_sub_columns+0x284>)
 800b7d8:	5c9a      	ldrb	r2, [r3, r2]
 800b7da:	7d7b      	ldrb	r3, [r7, #21]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4b36      	ldr	r3, [pc, #216]	; (800b8b8 <mix_sub_columns+0x288>)
 800b7e0:	5c5b      	ldrb	r3, [r3, r1]
 800b7e2:	4053      	eors	r3, r2
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	7abb      	ldrb	r3, [r7, #10]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4b34      	ldr	r3, [pc, #208]	; (800b8bc <mix_sub_columns+0x28c>)
 800b7ec:	5c5b      	ldrb	r3, [r3, r1]
 800b7ee:	4053      	eors	r3, r2
 800b7f0:	b2d9      	uxtb	r1, r3
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4b31      	ldr	r3, [pc, #196]	; (800b8bc <mix_sub_columns+0x28c>)
 800b7f8:	5c9a      	ldrb	r2, [r3, r2]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	404a      	eors	r2, r1
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b804:	7c3b      	ldrb	r3, [r7, #16]
 800b806:	461a      	mov	r2, r3
 800b808:	4b2c      	ldr	r3, [pc, #176]	; (800b8bc <mix_sub_columns+0x28c>)
 800b80a:	5c9a      	ldrb	r2, [r3, r2]
 800b80c:	7d7b      	ldrb	r3, [r7, #21]
 800b80e:	4619      	mov	r1, r3
 800b810:	4b28      	ldr	r3, [pc, #160]	; (800b8b4 <mix_sub_columns+0x284>)
 800b812:	5c5b      	ldrb	r3, [r3, r1]
 800b814:	4053      	eors	r3, r2
 800b816:	b2da      	uxtb	r2, r3
 800b818:	7abb      	ldrb	r3, [r7, #10]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4b26      	ldr	r3, [pc, #152]	; (800b8b8 <mix_sub_columns+0x288>)
 800b81e:	5c5b      	ldrb	r3, [r3, r1]
 800b820:	4053      	eors	r3, r2
 800b822:	b2d9      	uxtb	r1, r3
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	461a      	mov	r2, r3
 800b828:	4b24      	ldr	r3, [pc, #144]	; (800b8bc <mix_sub_columns+0x28c>)
 800b82a:	5c9a      	ldrb	r2, [r3, r2]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3309      	adds	r3, #9
 800b830:	404a      	eors	r2, r1
 800b832:	b2d2      	uxtb	r2, r2
 800b834:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b836:	7c3b      	ldrb	r3, [r7, #16]
 800b838:	461a      	mov	r2, r3
 800b83a:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <mix_sub_columns+0x28c>)
 800b83c:	5c9a      	ldrb	r2, [r3, r2]
 800b83e:	7d7b      	ldrb	r3, [r7, #21]
 800b840:	4619      	mov	r1, r3
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <mix_sub_columns+0x28c>)
 800b844:	5c5b      	ldrb	r3, [r3, r1]
 800b846:	4053      	eors	r3, r2
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	7abb      	ldrb	r3, [r7, #10]
 800b84c:	4619      	mov	r1, r3
 800b84e:	4b19      	ldr	r3, [pc, #100]	; (800b8b4 <mix_sub_columns+0x284>)
 800b850:	5c5b      	ldrb	r3, [r3, r1]
 800b852:	4053      	eors	r3, r2
 800b854:	b2d9      	uxtb	r1, r3
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	461a      	mov	r2, r3
 800b85a:	4b17      	ldr	r3, [pc, #92]	; (800b8b8 <mix_sub_columns+0x288>)
 800b85c:	5c9a      	ldrb	r2, [r3, r2]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	330a      	adds	r3, #10
 800b862:	404a      	eors	r2, r1
 800b864:	b2d2      	uxtb	r2, r2
 800b866:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b868:	7c3b      	ldrb	r3, [r7, #16]
 800b86a:	461a      	mov	r2, r3
 800b86c:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <mix_sub_columns+0x288>)
 800b86e:	5c9a      	ldrb	r2, [r3, r2]
 800b870:	7d7b      	ldrb	r3, [r7, #21]
 800b872:	4619      	mov	r1, r3
 800b874:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <mix_sub_columns+0x28c>)
 800b876:	5c5b      	ldrb	r3, [r3, r1]
 800b878:	4053      	eors	r3, r2
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	7abb      	ldrb	r3, [r7, #10]
 800b87e:	4619      	mov	r1, r3
 800b880:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <mix_sub_columns+0x28c>)
 800b882:	5c5b      	ldrb	r3, [r3, r1]
 800b884:	4053      	eors	r3, r2
 800b886:	b2d9      	uxtb	r1, r3
 800b888:	7bfb      	ldrb	r3, [r7, #15]
 800b88a:	461a      	mov	r2, r3
 800b88c:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <mix_sub_columns+0x284>)
 800b88e:	5c9a      	ldrb	r2, [r3, r2]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	330b      	adds	r3, #11
 800b894:	404a      	eors	r2, r1
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b89a:	7d3b      	ldrb	r3, [r7, #20]
 800b89c:	461a      	mov	r2, r3
 800b89e:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <mix_sub_columns+0x284>)
 800b8a0:	5c9a      	ldrb	r2, [r3, r2]
 800b8a2:	7a7b      	ldrb	r3, [r7, #9]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4b04      	ldr	r3, [pc, #16]	; (800b8b8 <mix_sub_columns+0x288>)
 800b8a8:	5c5b      	ldrb	r3, [r3, r1]
 800b8aa:	4053      	eors	r3, r2
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	e005      	b.n	800b8c0 <mix_sub_columns+0x290>
 800b8b4:	08020544 	.word	0x08020544
 800b8b8:	08020644 	.word	0x08020644
 800b8bc:	08020444 	.word	0x08020444
 800b8c0:	4b2d      	ldr	r3, [pc, #180]	; (800b978 <mix_sub_columns+0x348>)
 800b8c2:	5c5b      	ldrb	r3, [r3, r1]
 800b8c4:	4053      	eors	r3, r2
 800b8c6:	b2d9      	uxtb	r1, r3
 800b8c8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4b2a      	ldr	r3, [pc, #168]	; (800b978 <mix_sub_columns+0x348>)
 800b8ce:	5c9a      	ldrb	r2, [r3, r2]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	404a      	eors	r2, r1
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b8da:	7d3b      	ldrb	r3, [r7, #20]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	4b26      	ldr	r3, [pc, #152]	; (800b978 <mix_sub_columns+0x348>)
 800b8e0:	5c9a      	ldrb	r2, [r3, r2]
 800b8e2:	7a7b      	ldrb	r3, [r7, #9]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4b25      	ldr	r3, [pc, #148]	; (800b97c <mix_sub_columns+0x34c>)
 800b8e8:	5c5b      	ldrb	r3, [r3, r1]
 800b8ea:	4053      	eors	r3, r2
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4b23      	ldr	r3, [pc, #140]	; (800b980 <mix_sub_columns+0x350>)
 800b8f4:	5c5b      	ldrb	r3, [r3, r1]
 800b8f6:	4053      	eors	r3, r2
 800b8f8:	b2d9      	uxtb	r1, r3
 800b8fa:	7cfb      	ldrb	r3, [r7, #19]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <mix_sub_columns+0x348>)
 800b900:	5c9a      	ldrb	r2, [r3, r2]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	330d      	adds	r3, #13
 800b906:	404a      	eors	r2, r1
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b90c:	7d3b      	ldrb	r3, [r7, #20]
 800b90e:	461a      	mov	r2, r3
 800b910:	4b19      	ldr	r3, [pc, #100]	; (800b978 <mix_sub_columns+0x348>)
 800b912:	5c9a      	ldrb	r2, [r3, r2]
 800b914:	7a7b      	ldrb	r3, [r7, #9]
 800b916:	4619      	mov	r1, r3
 800b918:	4b17      	ldr	r3, [pc, #92]	; (800b978 <mix_sub_columns+0x348>)
 800b91a:	5c5b      	ldrb	r3, [r3, r1]
 800b91c:	4053      	eors	r3, r2
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	4619      	mov	r1, r3
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <mix_sub_columns+0x34c>)
 800b926:	5c5b      	ldrb	r3, [r3, r1]
 800b928:	4053      	eors	r3, r2
 800b92a:	b2d9      	uxtb	r1, r3
 800b92c:	7cfb      	ldrb	r3, [r7, #19]
 800b92e:	461a      	mov	r2, r3
 800b930:	4b13      	ldr	r3, [pc, #76]	; (800b980 <mix_sub_columns+0x350>)
 800b932:	5c9a      	ldrb	r2, [r3, r2]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	330e      	adds	r3, #14
 800b938:	404a      	eors	r2, r1
 800b93a:	b2d2      	uxtb	r2, r2
 800b93c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b93e:	7d3b      	ldrb	r3, [r7, #20]
 800b940:	461a      	mov	r2, r3
 800b942:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <mix_sub_columns+0x350>)
 800b944:	5c9a      	ldrb	r2, [r3, r2]
 800b946:	7a7b      	ldrb	r3, [r7, #9]
 800b948:	4619      	mov	r1, r3
 800b94a:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <mix_sub_columns+0x348>)
 800b94c:	5c5b      	ldrb	r3, [r3, r1]
 800b94e:	4053      	eors	r3, r2
 800b950:	b2da      	uxtb	r2, r3
 800b952:	7bbb      	ldrb	r3, [r7, #14]
 800b954:	4619      	mov	r1, r3
 800b956:	4b08      	ldr	r3, [pc, #32]	; (800b978 <mix_sub_columns+0x348>)
 800b958:	5c5b      	ldrb	r3, [r3, r1]
 800b95a:	4053      	eors	r3, r2
 800b95c:	b2d9      	uxtb	r1, r3
 800b95e:	7cfb      	ldrb	r3, [r7, #19]
 800b960:	461a      	mov	r2, r3
 800b962:	4b06      	ldr	r3, [pc, #24]	; (800b97c <mix_sub_columns+0x34c>)
 800b964:	5c9a      	ldrb	r2, [r3, r2]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	330f      	adds	r3, #15
 800b96a:	404a      	eors	r2, r1
 800b96c:	b2d2      	uxtb	r2, r2
 800b96e:	701a      	strb	r2, [r3, #0]
  }
 800b970:	bf00      	nop
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	08020444 	.word	0x08020444
 800b97c:	08020544 	.word	0x08020544
 800b980:	08020644 	.word	0x08020644

0800b984 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	3b10      	subs	r3, #16
 800b996:	2b10      	cmp	r3, #16
 800b998:	bf8c      	ite	hi
 800b99a:	2201      	movhi	r2, #1
 800b99c:	2200      	movls	r2, #0
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d10d      	bne.n	800b9c0 <lorawan_aes_set_key+0x3c>
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9aa:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b9ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bf14      	ite	ne
 800b9b6:	2301      	movne	r3, #1
 800b9b8:	2300      	moveq	r3, #0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d105      	bne.n	800b9cc <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b9c8:	23ff      	movs	r3, #255	; 0xff
 800b9ca:	e0b2      	b.n	800bb32 <lorawan_aes_set_key+0x1ae>
        break;
 800b9cc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	7afa      	ldrb	r2, [r7, #11]
 800b9d2:	68f9      	ldr	r1, [r7, #12]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fbf9 	bl	800b1cc <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	331c      	adds	r3, #28
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b9e4:	7c7b      	ldrb	r3, [r7, #17]
 800b9e6:	091b      	lsrs	r3, r3, #4
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	75fb      	strb	r3, [r7, #23]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	75bb      	strb	r3, [r7, #22]
 800b9fc:	e093      	b.n	800bb26 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ba00:	3b04      	subs	r3, #4
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	5cd3      	ldrb	r3, [r2, r3]
 800ba06:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
 800ba0a:	3b03      	subs	r3, #3
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	5cd3      	ldrb	r3, [r2, r3]
 800ba10:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	3b02      	subs	r3, #2
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	5cd3      	ldrb	r3, [r2, r3]
 800ba1a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	5cd3      	ldrb	r3, [r2, r3]
 800ba24:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	7afa      	ldrb	r2, [r7, #11]
 800ba2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba2e:	fb01 f202 	mul.w	r2, r1, r2
 800ba32:	1a9b      	subs	r3, r3, r2
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d127      	bne.n	800ba8a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba3a:	7d7b      	ldrb	r3, [r7, #21]
 800ba3c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba3e:	7d3b      	ldrb	r3, [r7, #20]
 800ba40:	4a3e      	ldr	r2, [pc, #248]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba42:	5cd2      	ldrb	r2, [r2, r3]
 800ba44:	7dbb      	ldrb	r3, [r7, #22]
 800ba46:	4053      	eors	r3, r2
 800ba48:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba4a:	7cfb      	ldrb	r3, [r7, #19]
 800ba4c:	4a3b      	ldr	r2, [pc, #236]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba4e:	5cd3      	ldrb	r3, [r2, r3]
 800ba50:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba52:	7cbb      	ldrb	r3, [r7, #18]
 800ba54:	4a39      	ldr	r2, [pc, #228]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba56:	5cd3      	ldrb	r3, [r2, r3]
 800ba58:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba5a:	7c3b      	ldrb	r3, [r7, #16]
 800ba5c:	4a37      	ldr	r2, [pc, #220]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800ba5e:	5cd3      	ldrb	r3, [r2, r3]
 800ba60:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba62:	7dbb      	ldrb	r3, [r7, #22]
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	b25a      	sxtb	r2, r3
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
 800ba6a:	09db      	lsrs	r3, r3, #7
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	0049      	lsls	r1, r1, #1
 800ba72:	440b      	add	r3, r1
 800ba74:	4619      	mov	r1, r3
 800ba76:	00c8      	lsls	r0, r1, #3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	440b      	add	r3, r1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	b25b      	sxtb	r3, r3
 800ba82:	4053      	eors	r3, r2
 800ba84:	b25b      	sxtb	r3, r3
 800ba86:	75bb      	strb	r3, [r7, #22]
 800ba88:	e01c      	b.n	800bac4 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ba8a:	7afb      	ldrb	r3, [r7, #11]
 800ba8c:	2b18      	cmp	r3, #24
 800ba8e:	d919      	bls.n	800bac4 <lorawan_aes_set_key+0x140>
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	7afa      	ldrb	r2, [r7, #11]
 800ba94:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba98:	fb01 f202 	mul.w	r2, r1, r2
 800ba9c:	1a9b      	subs	r3, r3, r2
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	2b10      	cmp	r3, #16
 800baa2:	d10f      	bne.n	800bac4 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800baa4:	7d7b      	ldrb	r3, [r7, #21]
 800baa6:	4a25      	ldr	r2, [pc, #148]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800baa8:	5cd3      	ldrb	r3, [r2, r3]
 800baaa:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800baac:	7d3b      	ldrb	r3, [r7, #20]
 800baae:	4a23      	ldr	r2, [pc, #140]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800bab0:	5cd3      	ldrb	r3, [r2, r3]
 800bab2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bab4:	7cfb      	ldrb	r3, [r7, #19]
 800bab6:	4a21      	ldr	r2, [pc, #132]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800bab8:	5cd3      	ldrb	r3, [r2, r3]
 800baba:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800babc:	7cbb      	ldrb	r3, [r7, #18]
 800babe:	4a1f      	ldr	r2, [pc, #124]	; (800bb3c <lorawan_aes_set_key+0x1b8>)
 800bac0:	5cd3      	ldrb	r3, [r2, r3]
 800bac2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bac4:	7dfa      	ldrb	r2, [r7, #23]
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bacc:	7c3b      	ldrb	r3, [r7, #16]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	5cd1      	ldrb	r1, [r2, r3]
 800bad2:	7dfb      	ldrb	r3, [r7, #23]
 800bad4:	7d7a      	ldrb	r2, [r7, #21]
 800bad6:	404a      	eors	r2, r1
 800bad8:	b2d1      	uxtb	r1, r2
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bade:	7c3b      	ldrb	r3, [r7, #16]
 800bae0:	3301      	adds	r3, #1
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	5cd1      	ldrb	r1, [r2, r3]
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	3301      	adds	r3, #1
 800baea:	7d3a      	ldrb	r2, [r7, #20]
 800baec:	404a      	eors	r2, r1
 800baee:	b2d1      	uxtb	r1, r2
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800baf4:	7c3b      	ldrb	r3, [r7, #16]
 800baf6:	3302      	adds	r3, #2
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	5cd1      	ldrb	r1, [r2, r3]
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	3302      	adds	r3, #2
 800bb00:	7cfa      	ldrb	r2, [r7, #19]
 800bb02:	404a      	eors	r2, r1
 800bb04:	b2d1      	uxtb	r1, r2
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb0a:	7c3b      	ldrb	r3, [r7, #16]
 800bb0c:	3303      	adds	r3, #3
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	5cd1      	ldrb	r1, [r2, r3]
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	3303      	adds	r3, #3
 800bb16:	7cba      	ldrb	r2, [r7, #18]
 800bb18:	404a      	eors	r2, r1
 800bb1a:	b2d1      	uxtb	r1, r2
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	3304      	adds	r3, #4
 800bb24:	75fb      	strb	r3, [r7, #23]
 800bb26:	7dfa      	ldrb	r2, [r7, #23]
 800bb28:	7c7b      	ldrb	r3, [r7, #17]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	f4ff af67 	bcc.w	800b9fe <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	08020444 	.word	0x08020444

0800bb40 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08a      	sub	sp, #40	; 0x28
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d038      	beq.n	800bbc8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	f107 0314 	add.w	r3, r7, #20
 800bb5c:	68f9      	ldr	r1, [r7, #12]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff fc06 	bl	800b370 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb6a:	e014      	b.n	800bb96 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff fd5d 	bl	800b630 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb7c:	0112      	lsls	r2, r2, #4
 800bb7e:	441a      	add	r2, r3
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fcaa 	bl	800b4e0 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb90:	3301      	adds	r3, #1
 800bb92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3e3      	bcc.n	800bb6c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff fca7 	bl	800b4fc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbb4:	0112      	lsls	r2, r2, #4
 800bbb6:	441a      	add	r2, r3
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	68b8      	ldr	r0, [r7, #8]
 800bbc0:	f7ff fbd6 	bl	800b370 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e000      	b.n	800bbca <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bbc8:	23ff      	movs	r3, #255	; 0xff
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3728      	adds	r7, #40	; 0x28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	4603      	mov	r3, r0
 800bbda:	71fb      	strb	r3, [r7, #7]
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bbdc:	2306      	movs	r3, #6
 800bbde:	73fb      	strb	r3, [r7, #15]
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bbe0:	f107 0208 	add.w	r2, r7, #8
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 f909 	bl	800be00 <SecureElementGetKeyByID>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(keyItem->KeyValue));
    }
}
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	6039      	str	r1, [r7, #0]
 800bc06:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
 800bc0c:	e01a      	b.n	800bc44 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bc0e:	4b12      	ldr	r3, [pc, #72]	; (800bc58 <GetKeyByID+0x5c>)
 800bc10:	6819      	ldr	r1, [r3, #0]
 800bc12:	7bfa      	ldrb	r2, [r7, #15]
 800bc14:	4613      	mov	r3, r2
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	4413      	add	r3, r2
 800bc1a:	440b      	add	r3, r1
 800bc1c:	3310      	adds	r3, #16
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	79fa      	ldrb	r2, [r7, #7]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d10b      	bne.n	800bc3e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bc26:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <GetKeyByID+0x5c>)
 800bc28:	6819      	ldr	r1, [r3, #0]
 800bc2a:	7bfa      	ldrb	r2, [r7, #15]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	4413      	add	r3, r2
 800bc32:	3310      	adds	r3, #16
 800bc34:	18ca      	adds	r2, r1, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e006      	b.n	800bc4c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	3301      	adds	r3, #1
 800bc42:	73fb      	strb	r3, [r7, #15]
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	2b09      	cmp	r3, #9
 800bc48:	d9e1      	bls.n	800bc0e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc4a:	2303      	movs	r3, #3
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bc80      	pop	{r7}
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20001040 	.word	0x20001040

0800bc5c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b0d1      	sub	sp, #324	; 0x144
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800bc66:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800bc6a:	6020      	str	r0, [r4, #0]
 800bc6c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800bc70:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800bc74:	6001      	str	r1, [r0, #0]
 800bc76:	4619      	mov	r1, r3
 800bc78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc7c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bc80:	801a      	strh	r2, [r3, #0]
 800bc82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc86:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bc8a:	460a      	mov	r2, r1
 800bc8c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bc8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bc92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <ComputeCmac+0x48>
 800bc9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bca4:	2302      	movs	r3, #2
 800bca6:	e05c      	b.n	800bd62 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bca8:	f107 0314 	add.w	r3, r7, #20
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fe ffe8 	bl	800ac82 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bcb2:	f107 0210 	add.w	r2, r7, #16
 800bcb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcba:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff ff9a 	bl	800bbfc <GetKeyByID>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bcce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d143      	bne.n	800bd5e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bcd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	f107 0314 	add.w	r3, r7, #20
 800bce6:	4611      	mov	r1, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe ffe3 	bl	800acb4 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bcee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcf2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bcfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bd04:	f107 0014 	add.w	r0, r7, #20
 800bd08:	2210      	movs	r2, #16
 800bd0a:	6819      	ldr	r1, [r3, #0]
 800bd0c:	f7fe ffe1 	bl	800acd2 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bd10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd14:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800bd18:	881a      	ldrh	r2, [r3, #0]
 800bd1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800bd22:	f107 0014 	add.w	r0, r7, #20
 800bd26:	6819      	ldr	r1, [r3, #0]
 800bd28:	f7fe ffd3 	bl	800acd2 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bd2c:	f107 0214 	add.w	r2, r7, #20
 800bd30:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bd34:	4611      	mov	r1, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff f88d 	bl	800ae56 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bd40:	061a      	lsls	r2, r3, #24
 800bd42:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bd46:	041b      	lsls	r3, r3, #16
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bd52:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bd56:	431a      	orrs	r2, r3
 800bd58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bd5c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bd5e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd90      	pop	{r4, r7, pc}

0800bd6c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b0b2      	sub	sp, #200	; 0xc8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bd76:	f107 0308 	add.w	r3, r7, #8
 800bd7a:	22c0      	movs	r2, #192	; 0xc0
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f00e f93a 	bl	8019ff8 <memset>
 800bd84:	2301      	movs	r3, #1
 800bd86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bd90:	2303      	movs	r3, #3
 800bd92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bd96:	2304      	movs	r3, #4
 800bd98:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bd9c:	237f      	movs	r3, #127	; 0x7f
 800bd9e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bda2:	2380      	movs	r3, #128	; 0x80
 800bda4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bda8:	2381      	movs	r3, #129	; 0x81
 800bdaa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bdae:	2382      	movs	r3, #130	; 0x82
 800bdb0:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bdb4:	2383      	movs	r3, #131	; 0x83
 800bdb6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <SecureElementInit+0x58>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	e017      	b.n	800bdf4 <SecureElementInit+0x88>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bdc4:	4a0d      	ldr	r2, [pc, #52]	; (800bdfc <SecureElementInit+0x90>)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bdca:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <SecureElementInit+0x90>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f107 0108 	add.w	r1, r7, #8
 800bdd2:	22c0      	movs	r2, #192	; 0xc0
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f00a fada 	bl	801638e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
    PrintKey(APP_KEY);
 800bdda:	2000      	movs	r0, #0
 800bddc:	f7ff fef9 	bl	800bbd2 <PrintKey>
    PrintKey(NWK_KEY);
 800bde0:	2001      	movs	r0, #1
 800bde2:	f7ff fef6 	bl	800bbd2 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
    PrintKey(APP_S_KEY);
 800bde6:	2003      	movs	r0, #3
 800bde8:	f7ff fef3 	bl	800bbd2 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bdec:	2002      	movs	r0, #2
 800bdee:	f7ff fef0 	bl	800bbd2 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	37c8      	adds	r7, #200	; 0xc8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20001040 	.word	0x20001040

0800be00 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	6039      	str	r1, [r7, #0]
 800be0a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800be0c:	2300      	movs	r3, #0
 800be0e:	73fb      	strb	r3, [r7, #15]
 800be10:	e01a      	b.n	800be48 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800be12:	4b12      	ldr	r3, [pc, #72]	; (800be5c <SecureElementGetKeyByID+0x5c>)
 800be14:	6819      	ldr	r1, [r3, #0]
 800be16:	7bfa      	ldrb	r2, [r7, #15]
 800be18:	4613      	mov	r3, r2
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	4413      	add	r3, r2
 800be1e:	440b      	add	r3, r1
 800be20:	3310      	adds	r3, #16
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	79fa      	ldrb	r2, [r7, #7]
 800be26:	429a      	cmp	r2, r3
 800be28:	d10b      	bne.n	800be42 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800be2a:	4b0c      	ldr	r3, [pc, #48]	; (800be5c <SecureElementGetKeyByID+0x5c>)
 800be2c:	6819      	ldr	r1, [r3, #0]
 800be2e:	7bfa      	ldrb	r2, [r7, #15]
 800be30:	4613      	mov	r3, r2
 800be32:	011b      	lsls	r3, r3, #4
 800be34:	4413      	add	r3, r2
 800be36:	3310      	adds	r3, #16
 800be38:	18ca      	adds	r2, r1, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be3e:	2300      	movs	r3, #0
 800be40:	e006      	b.n	800be50 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	3301      	adds	r3, #1
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d9e1      	bls.n	800be12 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be4e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	bc80      	pop	{r7}
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	20001040 	.word	0x20001040

0800be60 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b088      	sub	sp, #32
 800be64:	af00      	add	r7, sp, #0
 800be66:	4603      	mov	r3, r0
 800be68:	6039      	str	r1, [r7, #0]
 800be6a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be72:	2302      	movs	r3, #2
 800be74:	e04c      	b.n	800bf10 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be76:	2300      	movs	r3, #0
 800be78:	77fb      	strb	r3, [r7, #31]
 800be7a:	e045      	b.n	800bf08 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800be7c:	4b26      	ldr	r3, [pc, #152]	; (800bf18 <SecureElementSetKey+0xb8>)
 800be7e:	6819      	ldr	r1, [r3, #0]
 800be80:	7ffa      	ldrb	r2, [r7, #31]
 800be82:	4613      	mov	r3, r2
 800be84:	011b      	lsls	r3, r3, #4
 800be86:	4413      	add	r3, r2
 800be88:	440b      	add	r3, r1
 800be8a:	3310      	adds	r3, #16
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	79fa      	ldrb	r2, [r7, #7]
 800be90:	429a      	cmp	r2, r3
 800be92:	d136      	bne.n	800bf02 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b80      	cmp	r3, #128	; 0x80
 800be98:	d123      	bne.n	800bee2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800be9a:	2306      	movs	r3, #6
 800be9c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	f107 0310 	add.w	r3, r7, #16
 800bea6:	2200      	movs	r2, #0
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	605a      	str	r2, [r3, #4]
 800beac:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800beae:	f107 030c 	add.w	r3, r7, #12
 800beb2:	227f      	movs	r2, #127	; 0x7f
 800beb4:	2110      	movs	r1, #16
 800beb6:	6838      	ldr	r0, [r7, #0]
 800beb8:	f000 f87d 	bl	800bfb6 <SecureElementAesEncrypt>
 800bebc:	4603      	mov	r3, r0
 800bebe:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bec0:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <SecureElementSetKey+0xb8>)
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	7ffa      	ldrb	r2, [r7, #31]
 800bec6:	4613      	mov	r3, r2
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	4413      	add	r3, r2
 800becc:	3310      	adds	r3, #16
 800bece:	440b      	add	r3, r1
 800bed0:	3301      	adds	r3, #1
 800bed2:	f107 010c 	add.w	r1, r7, #12
 800bed6:	2210      	movs	r2, #16
 800bed8:	4618      	mov	r0, r3
 800beda:	f00a fa58 	bl	801638e <memcpy1>
                return retval;
 800bede:	7fbb      	ldrb	r3, [r7, #30]
 800bee0:	e016      	b.n	800bf10 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bee2:	4b0d      	ldr	r3, [pc, #52]	; (800bf18 <SecureElementSetKey+0xb8>)
 800bee4:	6819      	ldr	r1, [r3, #0]
 800bee6:	7ffa      	ldrb	r2, [r7, #31]
 800bee8:	4613      	mov	r3, r2
 800beea:	011b      	lsls	r3, r3, #4
 800beec:	4413      	add	r3, r2
 800beee:	3310      	adds	r3, #16
 800bef0:	440b      	add	r3, r1
 800bef2:	3301      	adds	r3, #1
 800bef4:	2210      	movs	r2, #16
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	4618      	mov	r0, r3
 800befa:	f00a fa48 	bl	801638e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800befe:	2300      	movs	r3, #0
 800bf00:	e006      	b.n	800bf10 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bf02:	7ffb      	ldrb	r3, [r7, #31]
 800bf04:	3301      	adds	r3, #1
 800bf06:	77fb      	strb	r3, [r7, #31]
 800bf08:	7ffb      	ldrb	r3, [r7, #31]
 800bf0a:	2b09      	cmp	r3, #9
 800bf0c:	d9b6      	bls.n	800be7c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf0e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20001040 	.word	0x20001040

0800bf1c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4611      	mov	r1, r2
 800bf28:	461a      	mov	r2, r3
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	80fb      	strh	r3, [r7, #6]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bf32:	797b      	ldrb	r3, [r7, #5]
 800bf34:	2b7e      	cmp	r3, #126	; 0x7e
 800bf36:	d901      	bls.n	800bf3c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e009      	b.n	800bf50 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bf3c:	7979      	ldrb	r1, [r7, #5]
 800bf3e:	88fa      	ldrh	r2, [r7, #6]
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	460b      	mov	r3, r1
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f7ff fe87 	bl	800bc5c <ComputeCmac>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	461a      	mov	r2, r3
 800bf64:	460b      	mov	r3, r1
 800bf66:	817b      	strh	r3, [r7, #10]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf72:	2302      	movs	r3, #2
 800bf74:	e01b      	b.n	800bfae <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bf76:	2306      	movs	r3, #6
 800bf78:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bf7e:	7a79      	ldrb	r1, [r7, #9]
 800bf80:	897a      	ldrh	r2, [r7, #10]
 800bf82:	f107 0310 	add.w	r3, r7, #16
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f7ff fe65 	bl	800bc5c <ComputeCmac>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
 800bf9e:	e006      	b.n	800bfae <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d001      	beq.n	800bfac <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b0c2      	sub	sp, #264	; 0x108
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bfc6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	4603      	mov	r3, r0
 800bfce:	817b      	strh	r3, [r7, #10]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d006      	beq.n	800bfe8 <SecureElementAesEncrypt+0x32>
 800bfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e046      	b.n	800c07a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bfec:	897b      	ldrh	r3, [r7, #10]
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bff8:	2305      	movs	r3, #5
 800bffa:	e03e      	b.n	800c07a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	22f0      	movs	r2, #240	; 0xf0
 800c002:	2100      	movs	r1, #0
 800c004:	4618      	mov	r0, r3
 800c006:	f00a f9fd 	bl	8016404 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c00a:	f107 0210 	add.w	r2, r7, #16
 800c00e:	7a7b      	ldrb	r3, [r7, #9]
 800c010:	4611      	mov	r1, r2
 800c012:	4618      	mov	r0, r3
 800c014:	f7ff fdf2 	bl	800bbfc <GetKeyByID>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c01e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c022:	2b00      	cmp	r3, #0
 800c024:	d127      	bne.n	800c076 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3301      	adds	r3, #1
 800c02a:	f107 0214 	add.w	r2, r7, #20
 800c02e:	2110      	movs	r1, #16
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fca7 	bl	800b984 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c03c:	e018      	b.n	800c070 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c03e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	18d0      	adds	r0, r2, r3
 800c046:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c04a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c04e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c052:	6812      	ldr	r2, [r2, #0]
 800c054:	4413      	add	r3, r2
 800c056:	f107 0214 	add.w	r2, r7, #20
 800c05a:	4619      	mov	r1, r3
 800c05c:	f7ff fd70 	bl	800bb40 <lorawan_aes_encrypt>
            block = block + 16;
 800c060:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c064:	3310      	adds	r3, #16
 800c066:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c06a:	897b      	ldrh	r3, [r7, #10]
 800c06c:	3b10      	subs	r3, #16
 800c06e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c070:	897b      	ldrh	r3, [r7, #10]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e3      	bne.n	800c03e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c076:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
 800c090:	4613      	mov	r3, r2
 800c092:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c09a:	2302      	movs	r3, #2
 800c09c:	e02e      	b.n	800c0fc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c09e:	2306      	movs	r3, #6
 800c0a0:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c0a2:	78bb      	ldrb	r3, [r7, #2]
 800c0a4:	2b7f      	cmp	r3, #127	; 0x7f
 800c0a6:	d104      	bne.n	800c0b2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d001      	beq.n	800c0b2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e024      	b.n	800c0fc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]
 800c0b6:	f107 0310 	add.w	r3, r7, #16
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	605a      	str	r2, [r3, #4]
 800c0c0:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	78fa      	ldrb	r2, [r7, #3]
 800c0c8:	2110      	movs	r1, #16
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff ff73 	bl	800bfb6 <SecureElementAesEncrypt>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c0d4:	7ffb      	ldrb	r3, [r7, #31]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c0da:	7ffb      	ldrb	r3, [r7, #31]
 800c0dc:	e00e      	b.n	800c0fc <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c0de:	f107 020c 	add.w	r2, r7, #12
 800c0e2:	78bb      	ldrb	r3, [r7, #2]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff feba 	bl	800be60 <SecureElementSetKey>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c0f0:	7ffb      	ldrb	r3, [r7, #31]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c0f6:	7ffb      	ldrb	r3, [r7, #31]
 800c0f8:	e000      	b.n	800c0fc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c0fa:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60b9      	str	r1, [r7, #8]
 800c10c:	607b      	str	r3, [r7, #4]
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]
 800c112:	4613      	mov	r3, r2
 800c114:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d005      	beq.n	800c128 <SecureElementProcessJoinAccept+0x24>
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <SecureElementProcessJoinAccept+0x24>
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c128:	2302      	movs	r3, #2
 800c12a:	e064      	b.n	800c1f6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c12c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c130:	2b21      	cmp	r3, #33	; 0x21
 800c132:	d901      	bls.n	800c138 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c134:	2305      	movs	r3, #5
 800c136:	e05e      	b.n	800c1f6 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c138:	2301      	movs	r3, #1
 800c13a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c13c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c140:	b29b      	uxth	r3, r3
 800c142:	461a      	mov	r2, r3
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c148:	f00a f921 	bl	801638e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	1c58      	adds	r0, r3, #1
 800c150:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c154:	b29b      	uxth	r3, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	b299      	uxth	r1, r3
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	3301      	adds	r3, #1
 800c15e:	7dfa      	ldrb	r2, [r7, #23]
 800c160:	f7ff ff29 	bl	800bfb6 <SecureElementAesEncrypt>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c16a:	2307      	movs	r3, #7
 800c16c:	e043      	b.n	800c1f6 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	330b      	adds	r3, #11
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	09db      	lsrs	r3, r3, #7
 800c176:	b2da      	uxtb	r2, r3
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c180:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c184:	3b04      	subs	r3, #4
 800c186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c188:	4413      	add	r3, r2
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c192:	3b03      	subs	r3, #3
 800c194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c196:	4413      	add	r3, r2
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	021b      	lsls	r3, r3, #8
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c1a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1a6:	3b02      	subs	r3, #2
 800c1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1aa:	4413      	add	r3, r2
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	041b      	lsls	r3, r3, #16
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c1b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	061b      	lsls	r3, r3, #24
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10e      	bne.n	800c1f0 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c1d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	b299      	uxth	r1, r3
 800c1dc:	2301      	movs	r3, #1
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1e2:	f7ff feb9 	bl	800bf58 <SecureElementVerifyAesCmac>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e002      	b.n	800c1f6 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c1f0:	2304      	movs	r3, #4
 800c1f2:	e000      	b.n	800c1f6 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c20e:	2302      	movs	r3, #2
 800c210:	e006      	b.n	800c220 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <SecureElementRandomNumber+0x28>)
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	4798      	blx	r3
 800c218:	4602      	mov	r2, r0
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0802078c 	.word	0x0802078c

0800c22c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c23a:	2302      	movs	r3, #2
 800c23c:	e007      	b.n	800c24e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c23e:	4b06      	ldr	r3, [pc, #24]	; (800c258 <SecureElementSetDevEui+0x2c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2208      	movs	r2, #8
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	4618      	mov	r0, r3
 800c248:	f00a f8a1 	bl	801638e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20001040 	.word	0x20001040

0800c25c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c260:	4b02      	ldr	r3, [pc, #8]	; (800c26c <SecureElementGetDevEui+0x10>)
 800c262:	681b      	ldr	r3, [r3, #0]
}
 800c264:	4618      	mov	r0, r3
 800c266:	46bd      	mov	sp, r7
 800c268:	bc80      	pop	{r7}
 800c26a:	4770      	bx	lr
 800c26c:	20001040 	.word	0x20001040

0800c270 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d101      	bne.n	800c282 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c27e:	2302      	movs	r3, #2
 800c280:	e008      	b.n	800c294 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c282:	4b06      	ldr	r3, [pc, #24]	; (800c29c <SecureElementSetJoinEui+0x2c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3308      	adds	r3, #8
 800c288:	2208      	movs	r2, #8
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f00a f87e 	bl	801638e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20001040 	.word	0x20001040

0800c2a0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <SecureElementGetJoinEui+0x14>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bc80      	pop	{r7}
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20001040 	.word	0x20001040

0800c2b8 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c2c0:	4a1a      	ldr	r2, [pc, #104]	; (800c32c <LmHandlerInit+0x74>)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c2c6:	4b1a      	ldr	r3, [pc, #104]	; (800c330 <LmHandlerInit+0x78>)
 800c2c8:	4a1a      	ldr	r2, [pc, #104]	; (800c334 <LmHandlerInit+0x7c>)
 800c2ca:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c2cc:	4b18      	ldr	r3, [pc, #96]	; (800c330 <LmHandlerInit+0x78>)
 800c2ce:	4a1a      	ldr	r2, [pc, #104]	; (800c338 <LmHandlerInit+0x80>)
 800c2d0:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c2d2:	4b17      	ldr	r3, [pc, #92]	; (800c330 <LmHandlerInit+0x78>)
 800c2d4:	4a19      	ldr	r2, [pc, #100]	; (800c33c <LmHandlerInit+0x84>)
 800c2d6:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c2d8:	4b15      	ldr	r3, [pc, #84]	; (800c330 <LmHandlerInit+0x78>)
 800c2da:	4a19      	ldr	r2, [pc, #100]	; (800c340 <LmHandlerInit+0x88>)
 800c2dc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <LmHandlerInit+0x74>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a17      	ldr	r2, [pc, #92]	; (800c344 <LmHandlerInit+0x8c>)
 800c2e6:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c2e8:	4b10      	ldr	r3, [pc, #64]	; (800c32c <LmHandlerInit+0x74>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	4a15      	ldr	r2, [pc, #84]	; (800c344 <LmHandlerInit+0x8c>)
 800c2f0:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c2f2:	4b0e      	ldr	r3, [pc, #56]	; (800c32c <LmHandlerInit+0x74>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	4a12      	ldr	r2, [pc, #72]	; (800c344 <LmHandlerInit+0x8c>)
 800c2fa:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c2fc:	4b11      	ldr	r3, [pc, #68]	; (800c344 <LmHandlerInit+0x8c>)
 800c2fe:	4a12      	ldr	r2, [pc, #72]	; (800c348 <LmHandlerInit+0x90>)
 800c300:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c302:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <LmHandlerInit+0x74>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	691b      	ldr	r3, [r3, #16]
 800c308:	4a0e      	ldr	r2, [pc, #56]	; (800c344 <LmHandlerInit+0x8c>)
 800c30a:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c30c:	490f      	ldr	r1, [pc, #60]	; (800c34c <LmHandlerInit+0x94>)
 800c30e:	2000      	movs	r0, #0
 800c310:	f000 fc86 	bl	800cc20 <LmHandlerPackageRegister>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e000      	b.n	800c322 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20001068 	.word	0x20001068
 800c330:	2000106c 	.word	0x2000106c
 800c334:	0800c975 	.word	0x0800c975
 800c338:	0800c9dd 	.word	0x0800c9dd
 800c33c:	0800cabd 	.word	0x0800cabd
 800c340:	0800cb81 	.word	0x0800cb81
 800c344:	2000107c 	.word	0x2000107c
 800c348:	0800ce75 	.word	0x0800ce75
 800c34c:	20000074 	.word	0x20000074

0800c350 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b090      	sub	sp, #64	; 0x40
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c35c:	2210      	movs	r2, #16
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	484e      	ldr	r0, [pc, #312]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c362:	f00d f8fc 	bl	801955e <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c366:	f7fe fc49 	bl	800abfc <LoraInfo_GetPtr>
 800c36a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c36c:	4b4b      	ldr	r3, [pc, #300]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	461a      	mov	r2, r3
 800c372:	2301      	movs	r3, #1
 800c374:	4093      	lsls	r3, r2
 800c376:	461a      	mov	r2, r3
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	4013      	ands	r3, r2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00c      	beq.n	800c39c <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c382:	4b46      	ldr	r3, [pc, #280]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	4945      	ldr	r1, [pc, #276]	; (800c4a0 <LmHandlerConfigure+0x150>)
 800c38a:	4846      	ldr	r0, [pc, #280]	; (800c4a4 <LmHandlerConfigure+0x154>)
 800c38c:	f004 fa74 	bl	8010878 <LoRaMacInitialization>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <LmHandlerConfigure+0x4e>
        {
            return LORAMAC_HANDLER_ERROR;
 800c396:	f04f 33ff 	mov.w	r3, #4294967295
 800c39a:	e07b      	b.n	800c494 <LmHandlerConfigure+0x144>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
        while (1) {}  /* error: Region is not defined in the MW */
 800c39c:	e7fe      	b.n	800c39c <LmHandlerConfigure+0x4c>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c39e:	f000 fd7a 	bl	800ce96 <NvmDataMgmtRestore>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c3a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <LmHandlerConfigure+0x64>
    {
        CtxRestoreDone = true;
 800c3ac:	4b3e      	ldr	r3, [pc, #248]	; (800c4a8 <LmHandlerConfigure+0x158>)
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	e002      	b.n	800c3ba <LmHandlerConfigure+0x6a>
    }
    else
    {
        CtxRestoreDone = false;
 800c3b4:	4b3c      	ldr	r3, [pc, #240]	; (800c4a8 <LmHandlerConfigure+0x158>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f004 fda2 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	2208      	movs	r2, #8
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4837      	ldr	r0, [pc, #220]	; (800c4ac <LmHandlerConfigure+0x15c>)
 800c3d0:	f009 ffdd 	bl	801638e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c3d8:	f107 0314 	add.w	r3, r7, #20
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f004 fd95 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2208      	movs	r2, #8
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4831      	ldr	r0, [pc, #196]	; (800c4b0 <LmHandlerConfigure+0x160>)
 800c3ea:	f009 ffd0 	bl	801638e <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c3ee:	4b31      	ldr	r3, [pc, #196]	; (800c4b4 <LmHandlerConfigure+0x164>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	4798      	blx	r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4a2c      	ldr	r2, [pc, #176]	; (800c4ac <LmHandlerConfigure+0x15c>)
 800c3fa:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c3fc:	2306      	movs	r3, #6
 800c3fe:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c400:	4b2a      	ldr	r3, [pc, #168]	; (800c4ac <LmHandlerConfigure+0x15c>)
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c406:	f107 0314 	add.w	r3, r7, #20
 800c40a:	4618      	mov	r0, r3
 800c40c:	f004 fedc 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c410:	230f      	movs	r3, #15
 800c412:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c414:	2301      	movs	r3, #1
 800c416:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c418:	f107 0314 	add.w	r3, r7, #20
 800c41c:	4618      	mov	r0, r3
 800c41e:	f004 fed3 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c422:	2305      	movs	r3, #5
 800c424:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c426:	2313      	movs	r3, #19
 800c428:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c42a:	f107 0314 	add.w	r3, r7, #20
 800c42e:	4618      	mov	r0, r3
 800c430:	f004 feca 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c434:	2310      	movs	r3, #16
 800c436:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c438:	2300      	movs	r3, #0
 800c43a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	4618      	mov	r0, r3
 800c442:	f004 fec1 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c446:	2304      	movs	r3, #4
 800c448:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c44a:	4b14      	ldr	r3, [pc, #80]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c44c:	789b      	ldrb	r3, [r3, #2]
 800c44e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c450:	f107 0314 	add.w	r3, r7, #20
 800c454:	4618      	mov	r0, r3
 800c456:	f004 feb7 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c45a:	230f      	movs	r3, #15
 800c45c:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c45e:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	f107 020c 	add.w	r2, r7, #12
 800c466:	4611      	mov	r1, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	f007 fcb9 	bl	8013de0 <RegionGetPhyParam>
 800c46e:	4603      	mov	r3, r0
 800c470:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	bf14      	ite	ne
 800c478:	2301      	movne	r3, #1
 800c47a:	2300      	moveq	r3, #0
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4b07      	ldr	r3, [pc, #28]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c480:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c482:	2014      	movs	r0, #20
 800c484:	f000 fa5e 	bl	800c944 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c488:	4b04      	ldr	r3, [pc, #16]	; (800c49c <LmHandlerConfigure+0x14c>)
 800c48a:	795b      	ldrb	r3, [r3, #5]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f005 fc0f 	bl	8011cb0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3740      	adds	r7, #64	; 0x40
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	20001058 	.word	0x20001058
 800c4a0:	2000107c 	.word	0x2000107c
 800c4a4:	2000106c 	.word	0x2000106c
 800c4a8:	2000119a 	.word	0x2000119a
 800c4ac:	2000005c 	.word	0x2000005c
 800c4b0:	20000064 	.word	0x20000064
 800c4b4:	20001068 	.word	0x20001068

0800c4b8 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c4bc:	f002 f98a 	bl	800e7d4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c4c0:	f000 fc9a 	bl	800cdf8 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c4c4:	f000 fce0 	bl	800ce88 <NvmDataMgmtStore>
}
 800c4c8:	bf00      	nop
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b090      	sub	sp, #64	; 0x40
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d111      	bne.n	800c500 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c4dc:	4b23      	ldr	r3, [pc, #140]	; (800c56c <LmHandlerJoin+0xa0>)
 800c4de:	2202      	movs	r2, #2
 800c4e0:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c4e2:	f004 fc7d 	bl	8010de0 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c4ea:	4b21      	ldr	r3, [pc, #132]	; (800c570 <LmHandlerJoin+0xa4>)
 800c4ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c4f4:	f107 0308 	add.w	r3, r7, #8
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f005 f9a3 	bl	8011844 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c4fe:	e030      	b.n	800c562 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c500:	4b1a      	ldr	r3, [pc, #104]	; (800c56c <LmHandlerJoin+0xa0>)
 800c502:	2201      	movs	r2, #1
 800c504:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c506:	4b1a      	ldr	r3, [pc, #104]	; (800c570 <LmHandlerJoin+0xa4>)
 800c508:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c50c:	4b17      	ldr	r3, [pc, #92]	; (800c56c <LmHandlerJoin+0xa0>)
 800c50e:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c510:	4b16      	ldr	r3, [pc, #88]	; (800c56c <LmHandlerJoin+0xa0>)
 800c512:	2200      	movs	r2, #0
 800c514:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c516:	4b17      	ldr	r3, [pc, #92]	; (800c574 <LmHandlerJoin+0xa8>)
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	f083 0301 	eor.w	r3, r3, #1
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	d008      	beq.n	800c536 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c524:	2327      	movs	r3, #39	; 0x27
 800c526:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c528:	4b13      	ldr	r3, [pc, #76]	; (800c578 <LmHandlerJoin+0xac>)
 800c52a:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c52c:	f107 031c 	add.w	r3, r7, #28
 800c530:	4618      	mov	r0, r3
 800c532:	f004 fe49 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c536:	f004 fc53 	bl	8010de0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c53a:	2301      	movs	r3, #1
 800c53c:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c53e:	2301      	movs	r3, #1
 800c540:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c544:	f107 031c 	add.w	r3, r7, #28
 800c548:	4618      	mov	r0, r3
 800c54a:	f004 fe3d 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c54e:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <LmHandlerJoin+0xb0>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	69db      	ldr	r3, [r3, #28]
 800c554:	4805      	ldr	r0, [pc, #20]	; (800c56c <LmHandlerJoin+0xa0>)
 800c556:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <LmHandlerJoin+0xa4>)
 800c55a:	785b      	ldrb	r3, [r3, #1]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f917 	bl	800c790 <LmHandlerRequestClass>
}
 800c562:	bf00      	nop
 800c564:	3740      	adds	r7, #64	; 0x40
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000080 	.word	0x20000080
 800c570:	20001058 	.word	0x20001058
 800c574:	2000119a 	.word	0x2000119a
 800c578:	01000300 	.word	0x01000300
 800c57c:	20001068 	.word	0x20001068

0800c580 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c586:	2301      	movs	r3, #1
 800c588:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c58a:	463b      	mov	r3, r7
 800c58c:	4618      	mov	r0, r3
 800c58e:	f004 fcbd 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
 800c592:	4603      	mov	r3, r0
 800c594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c5a0:	793b      	ldrb	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e002      	b.n	800c5b0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c5ae:	2300      	movs	r3, #0
    }
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3728      	adds	r7, #40	; 0x28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08c      	sub	sp, #48	; 0x30
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	72fb      	strb	r3, [r7, #11]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c5cc:	23ff      	movs	r3, #255	; 0xff
 800c5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c5d2:	f001 fe69 	bl	800e2a8 <LoRaMacIsBusy>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c5dc:	f06f 0301 	mvn.w	r3, #1
 800c5e0:	e0b4      	b.n	800c74c <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c5e2:	f7ff ffcd 	bl	800c580 <LmHandlerJoinStatus>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d007      	beq.n	800c5fc <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c5ec:	4b59      	ldr	r3, [pc, #356]	; (800c754 <LmHandlerSend+0x19c>)
 800c5ee:	789b      	ldrb	r3, [r3, #2]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff ff6b 	bl	800c4cc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c5f6:	f06f 0302 	mvn.w	r3, #2
 800c5fa:	e0a7      	b.n	800c74c <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c5fc:	4b56      	ldr	r3, [pc, #344]	; (800c758 <LmHandlerSend+0x1a0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	4798      	blx	r3
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00d      	beq.n	800c626 <LmHandlerSend+0x6e>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	781a      	ldrb	r2, [r3, #0]
 800c60e:	4b52      	ldr	r3, [pc, #328]	; (800c758 <LmHandlerSend+0x1a0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	429a      	cmp	r2, r3
 800c616:	d006      	beq.n	800c626 <LmHandlerSend+0x6e>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c620:	f06f 0303 	mvn.w	r3, #3
 800c624:	e092      	b.n	800c74c <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c626:	4b4d      	ldr	r3, [pc, #308]	; (800c75c <LmHandlerSend+0x1a4>)
 800c628:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	785b      	ldrb	r3, [r3, #1]
 800c634:	f107 0214 	add.w	r2, r7, #20
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f004 fbde 	bl	8010dfc <LoRaMacQueryTxPossible>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d009      	beq.n	800c65a <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c646:	4b46      	ldr	r3, [pc, #280]	; (800c760 <LmHandlerSend+0x1a8>)
 800c648:	2200      	movs	r2, #0
 800c64a:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c64c:	2300      	movs	r3, #0
 800c64e:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c658:	e017      	b.n	800c68a <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c65a:	4a41      	ldr	r2, [pc, #260]	; (800c760 <LmHandlerSend+0x1a8>)
 800c65c:	7afb      	ldrb	r3, [r7, #11]
 800c65e:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c674:	7afb      	ldrb	r3, [r7, #11]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d102      	bne.n	800c680 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c67a:	2300      	movs	r3, #0
 800c67c:	763b      	strb	r3, [r7, #24]
 800c67e:	e004      	b.n	800c68a <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c680:	2301      	movs	r3, #1
 800c682:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c684:	2308      	movs	r3, #8
 800c686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c68a:	4b35      	ldr	r3, [pc, #212]	; (800c760 <LmHandlerSend+0x1a8>)
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	330c      	adds	r3, #12
 800c690:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c694:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c698:	4b30      	ldr	r3, [pc, #192]	; (800c75c <LmHandlerSend+0x1a4>)
 800c69a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c69e:	4b30      	ldr	r3, [pc, #192]	; (800c760 <LmHandlerSend+0x1a8>)
 800c6a0:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c6a2:	7aba      	ldrb	r2, [r7, #10]
 800c6a4:	f107 0318 	add.w	r3, r7, #24
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f005 fa0a 	bl	8011ac4 <LoRaMacMcpsRequest>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c6c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6c6:	2b11      	cmp	r3, #17
 800c6c8:	d83a      	bhi.n	800c740 <LmHandlerSend+0x188>
 800c6ca:	a201      	add	r2, pc, #4	; (adr r2, 800c6d0 <LmHandlerSend+0x118>)
 800c6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d0:	0800c719 	.word	0x0800c719
 800c6d4:	0800c721 	.word	0x0800c721
 800c6d8:	0800c741 	.word	0x0800c741
 800c6dc:	0800c741 	.word	0x0800c741
 800c6e0:	0800c741 	.word	0x0800c741
 800c6e4:	0800c741 	.word	0x0800c741
 800c6e8:	0800c741 	.word	0x0800c741
 800c6ec:	0800c729 	.word	0x0800c729
 800c6f0:	0800c741 	.word	0x0800c741
 800c6f4:	0800c741 	.word	0x0800c741
 800c6f8:	0800c741 	.word	0x0800c741
 800c6fc:	0800c739 	.word	0x0800c739
 800c700:	0800c741 	.word	0x0800c741
 800c704:	0800c741 	.word	0x0800c741
 800c708:	0800c721 	.word	0x0800c721
 800c70c:	0800c721 	.word	0x0800c721
 800c710:	0800c721 	.word	0x0800c721
 800c714:	0800c731 	.word	0x0800c731
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c718:	2300      	movs	r3, #0
 800c71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c71e:	e013      	b.n	800c748 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c720:	23fe      	movs	r3, #254	; 0xfe
 800c722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c726:	e00f      	b.n	800c748 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c728:	23fd      	movs	r3, #253	; 0xfd
 800c72a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c72e:	e00b      	b.n	800c748 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c730:	23fb      	movs	r3, #251	; 0xfb
 800c732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c736:	e007      	b.n	800c748 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c738:	23fa      	movs	r3, #250	; 0xfa
 800c73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c73e:	e003      	b.n	800c748 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c740:	23ff      	movs	r3, #255	; 0xff
 800c742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c746:	bf00      	nop
    }

    return lmhStatus;
 800c748:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3730      	adds	r7, #48	; 0x30
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	20000080 	.word	0x20000080
 800c758:	20001044 	.word	0x20001044
 800c75c:	20001058 	.word	0x20001058
 800c760:	20001090 	.word	0x20001090

0800c764 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c76a:	230a      	movs	r3, #10
 800c76c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c76e:	463b      	mov	r3, r7
 800c770:	4618      	mov	r0, r3
 800c772:	f005 f867 	bl	8011844 <LoRaMacMlmeRequest>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c780:	2300      	movs	r3, #0
 800c782:	e001      	b.n	800c788 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c784:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08c      	sub	sp, #48	; 0x30
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c7a0:	f001 fd82 	bl	800e2a8 <LoRaMacIsBusy>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c7aa:	f06f 0301 	mvn.w	r3, #1
 800c7ae:	e07b      	b.n	800c8a8 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c7b0:	f7ff fee6 	bl	800c580 <LmHandlerJoinStatus>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d002      	beq.n	800c7c0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c7ba:	f06f 0302 	mvn.w	r3, #2
 800c7be:	e073      	b.n	800c8a8 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c7c4:	f107 0308 	add.w	r3, r7, #8
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f004 fb9f 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	e066      	b.n	800c8a8 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c7da:	7b3b      	ldrb	r3, [r7, #12]
 800c7dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c7e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c7e4:	79fb      	ldrb	r3, [r7, #7]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d055      	beq.n	800c896 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	2b02      	cmp	r3, #2
 800c7ee:	d02c      	beq.n	800c84a <LmHandlerRequestClass+0xba>
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	dc52      	bgt.n	800c89a <LmHandlerRequestClass+0x10a>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <LmHandlerRequestClass+0x6e>
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d022      	beq.n	800c842 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c7fc:	e04d      	b.n	800c89a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c7fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c802:	2b00      	cmp	r3, #0
 800c804:	d04b      	beq.n	800c89e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c80a:	f107 0308 	add.w	r3, r7, #8
 800c80e:	4618      	mov	r0, r3
 800c810:	f004 fcda 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10f      	bne.n	800c83a <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 fb1f 	bl	800ce60 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c822:	4b23      	ldr	r3, [pc, #140]	; (800c8b0 <LmHandlerRequestClass+0x120>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d038      	beq.n	800c89e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c82c:	4b20      	ldr	r3, [pc, #128]	; (800c8b0 <LmHandlerRequestClass+0x120>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	79fa      	ldrb	r2, [r7, #7]
 800c834:	4610      	mov	r0, r2
 800c836:	4798      	blx	r3
            break;
 800c838:	e031      	b.n	800c89e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c83a:	23ff      	movs	r3, #255	; 0xff
 800c83c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c840:	e02d      	b.n	800c89e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c842:	23ff      	movs	r3, #255	; 0xff
 800c844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c848:	e02c      	b.n	800c8a4 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c84a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c852:	23ff      	movs	r3, #255	; 0xff
 800c854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c858:	e023      	b.n	800c8a2 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c85a:	79fb      	ldrb	r3, [r7, #7]
 800c85c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c85e:	f107 0308 	add.w	r3, r7, #8
 800c862:	4618      	mov	r0, r3
 800c864:	f004 fcb0 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10f      	bne.n	800c88e <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	4618      	mov	r0, r3
 800c872:	f000 faf5 	bl	800ce60 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c876:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <LmHandlerRequestClass+0x120>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d010      	beq.n	800c8a2 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c880:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <LmHandlerRequestClass+0x120>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	79fa      	ldrb	r2, [r7, #7]
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
            break;
 800c88c:	e009      	b.n	800c8a2 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c88e:	23ff      	movs	r3, #255	; 0xff
 800c890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c894:	e005      	b.n	800c8a2 <LmHandlerRequestClass+0x112>
        }
    }
 800c896:	bf00      	nop
 800c898:	e004      	b.n	800c8a4 <LmHandlerRequestClass+0x114>
            break;
 800c89a:	bf00      	nop
 800c89c:	e002      	b.n	800c8a4 <LmHandlerRequestClass+0x114>
            break;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <LmHandlerRequestClass+0x114>
            break;
 800c8a2:	bf00      	nop
    return errorStatus;
 800c8a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3730      	adds	r7, #48	; 0x30
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20001068 	.word	0x20001068

0800c8b4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08c      	sub	sp, #48	; 0x30
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	e010      	b.n	800c8ea <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c8cc:	f107 030c 	add.w	r3, r7, #12
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f004 fb1b 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e0:	e003      	b.n	800c8ea <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c8e2:	7c3a      	ldrb	r2, [r7, #16]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3730      	adds	r7, #48	; 0x30
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
	...

0800c8f4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b08c      	sub	sp, #48	; 0x30
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	e016      	b.n	800c936 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c908:	231f      	movs	r3, #31
 800c90a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c90c:	f107 030c 	add.w	r3, r7, #12
 800c910:	4618      	mov	r0, r3
 800c912:	f004 fafb 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	e009      	b.n	800c936 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c922:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f993 2000 	ldrsb.w	r2, [r3]
 800c930:	4b03      	ldr	r3, [pc, #12]	; (800c940 <LmHandlerGetTxDatarate+0x4c>)
 800c932:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3730      	adds	r7, #48	; 0x30
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20001058 	.word	0x20001058

0800c944 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08c      	sub	sp, #48	; 0x30
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c94c:	2322      	movs	r3, #34	; 0x22
 800c94e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c954:	f107 030c 	add.w	r3, r7, #12
 800c958:	4618      	mov	r0, r3
 800c95a:	f004 fc35 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c964:	f04f 33ff 	mov.w	r3, #4294967295
 800c968:	e000      	b.n	800c96c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3730      	adds	r7, #48	; 0x30
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c97c:	4b15      	ldr	r3, [pc, #84]	; (800c9d4 <McpsConfirm+0x60>)
 800c97e:	2201      	movs	r2, #1
 800c980:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	785a      	ldrb	r2, [r3, #1]
 800c986:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <McpsConfirm+0x60>)
 800c988:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	789b      	ldrb	r3, [r3, #2]
 800c98e:	b25a      	sxtb	r2, r3
 800c990:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <McpsConfirm+0x60>)
 800c992:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	4a0e      	ldr	r2, [pc, #56]	; (800c9d4 <McpsConfirm+0x60>)
 800c99a:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <McpsConfirm+0x60>)
 800c9a4:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <McpsConfirm+0x60>)
 800c9ae:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	791b      	ldrb	r3, [r3, #4]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4b07      	ldr	r3, [pc, #28]	; (800c9d4 <McpsConfirm+0x60>)
 800c9b8:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <McpsConfirm+0x64>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	4804      	ldr	r0, [pc, #16]	; (800c9d4 <McpsConfirm+0x60>)
 800c9c2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	f000 f99a 	bl	800cd00 <LmHandlerPackagesNotify>
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20001090 	.word	0x20001090
 800c9d8:	20001068 	.word	0x20001068

0800c9dc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b088      	sub	sp, #32
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c9ea:	4b32      	ldr	r3, [pc, #200]	; (800cab4 <McpsIndication+0xd8>)
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	785a      	ldrb	r2, [r3, #1]
 800c9f4:	4b2f      	ldr	r3, [pc, #188]	; (800cab4 <McpsIndication+0xd8>)
 800c9f6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c9f8:	4b2e      	ldr	r3, [pc, #184]	; (800cab4 <McpsIndication+0xd8>)
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d154      	bne.n	800caaa <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	791b      	ldrb	r3, [r3, #4]
 800ca04:	b25a      	sxtb	r2, r3
 800ca06:	4b2b      	ldr	r3, [pc, #172]	; (800cab4 <McpsIndication+0xd8>)
 800ca08:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca10:	b25a      	sxtb	r2, r3
 800ca12:	4b28      	ldr	r3, [pc, #160]	; (800cab4 <McpsIndication+0xd8>)
 800ca14:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ca1c:	4b25      	ldr	r3, [pc, #148]	; (800cab4 <McpsIndication+0xd8>)
 800ca1e:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	78db      	ldrb	r3, [r3, #3]
 800ca24:	b25a      	sxtb	r2, r3
 800ca26:	4b23      	ldr	r3, [pc, #140]	; (800cab4 <McpsIndication+0xd8>)
 800ca28:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	4a21      	ldr	r2, [pc, #132]	; (800cab4 <McpsIndication+0xd8>)
 800ca30:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	78db      	ldrb	r3, [r3, #3]
 800ca36:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	7b1b      	ldrb	r3, [r3, #12]
 800ca3c:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ca44:	4b1c      	ldr	r3, [pc, #112]	; (800cab8 <McpsIndication+0xdc>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	f107 0218 	add.w	r2, r7, #24
 800ca4e:	4919      	ldr	r1, [pc, #100]	; (800cab4 <McpsIndication+0xd8>)
 800ca50:	4610      	mov	r0, r2
 800ca52:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ca54:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <McpsIndication+0xdc>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d007      	beq.n	800ca6e <McpsIndication+0x92>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7e1b      	ldrb	r3, [r3, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ca66:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <McpsIndication+0xdc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6c:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	2001      	movs	r0, #1
 800ca72:	f000 f945 	bl	800cd00 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800ca76:	f107 0317 	add.w	r3, r7, #23
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff ff1a 	bl	800c8b4 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	795b      	ldrb	r3, [r3, #5]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d111      	bne.n	800caac <McpsIndication+0xd0>
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10e      	bne.n	800caac <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800ca8e:	2300      	movs	r3, #0
 800ca90:	733b      	strb	r3, [r7, #12]
 800ca92:	2300      	movs	r3, #0
 800ca94:	737b      	strb	r3, [r7, #13]
 800ca96:	2300      	movs	r3, #0
 800ca98:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800ca9a:	f107 000c 	add.w	r0, r7, #12
 800ca9e:	2301      	movs	r3, #1
 800caa0:	2200      	movs	r2, #0
 800caa2:	2100      	movs	r1, #0
 800caa4:	f7ff fd88 	bl	800c5b8 <LmHandlerSend>
 800caa8:	e000      	b.n	800caac <McpsIndication+0xd0>
        return;
 800caaa:	bf00      	nop
    }
}
 800caac:	3720      	adds	r7, #32
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20000084 	.word	0x20000084
 800cab8:	20001068 	.word	0x20001068

0800cabc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	; 0x30
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cac4:	4b28      	ldr	r3, [pc, #160]	; (800cb68 <MlmeConfirm+0xac>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	785a      	ldrb	r2, [r3, #1]
 800cace:	4b26      	ldr	r3, [pc, #152]	; (800cb68 <MlmeConfirm+0xac>)
 800cad0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cad2:	4b26      	ldr	r3, [pc, #152]	; (800cb6c <MlmeConfirm+0xb0>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	6a1b      	ldr	r3, [r3, #32]
 800cad8:	4823      	ldr	r0, [pc, #140]	; (800cb68 <MlmeConfirm+0xac>)
 800cada:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	2002      	movs	r0, #2
 800cae0:	f000 f90e 	bl	800cd00 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	2b0a      	cmp	r3, #10
 800caea:	d035      	beq.n	800cb58 <MlmeConfirm+0x9c>
 800caec:	2b0a      	cmp	r3, #10
 800caee:	dc35      	bgt.n	800cb5c <MlmeConfirm+0xa0>
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d002      	beq.n	800cafa <MlmeConfirm+0x3e>
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d023      	beq.n	800cb40 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800caf8:	e030      	b.n	800cb5c <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cafa:	2306      	movs	r3, #6
 800cafc:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cafe:	f107 030c 	add.w	r3, r7, #12
 800cb02:	4618      	mov	r0, r3
 800cb04:	f004 fa02 	bl	8010f0c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	4a19      	ldr	r2, [pc, #100]	; (800cb70 <MlmeConfirm+0xb4>)
 800cb0c:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cb0e:	4819      	ldr	r0, [pc, #100]	; (800cb74 <MlmeConfirm+0xb8>)
 800cb10:	f7ff fef0 	bl	800c8f4 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d108      	bne.n	800cb2e <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cb1c:	4b15      	ldr	r3, [pc, #84]	; (800cb74 <MlmeConfirm+0xb8>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <MlmeConfirm+0xbc>)
 800cb24:	785b      	ldrb	r3, [r3, #1]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fe32 	bl	800c790 <LmHandlerRequestClass>
 800cb2c:	e002      	b.n	800cb34 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <MlmeConfirm+0xb8>)
 800cb30:	22ff      	movs	r2, #255	; 0xff
 800cb32:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cb34:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <MlmeConfirm+0xb0>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	69db      	ldr	r3, [r3, #28]
 800cb3a:	480e      	ldr	r0, [pc, #56]	; (800cb74 <MlmeConfirm+0xb8>)
 800cb3c:	4798      	blx	r3
        break;
 800cb3e:	e00e      	b.n	800cb5e <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cb40:	4b0e      	ldr	r3, [pc, #56]	; (800cb7c <MlmeConfirm+0xc0>)
 800cb42:	2201      	movs	r2, #1
 800cb44:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	7a1a      	ldrb	r2, [r3, #8]
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <MlmeConfirm+0xc0>)
 800cb4c:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7a5a      	ldrb	r2, [r3, #9]
 800cb52:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <MlmeConfirm+0xc0>)
 800cb54:	73da      	strb	r2, [r3, #15]
        break;
 800cb56:	e002      	b.n	800cb5e <MlmeConfirm+0xa2>
        break;
 800cb58:	bf00      	nop
 800cb5a:	e000      	b.n	800cb5e <MlmeConfirm+0xa2>
        break;
 800cb5c:	bf00      	nop
    }
}
 800cb5e:	bf00      	nop
 800cb60:	3730      	adds	r7, #48	; 0x30
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20001090 	.word	0x20001090
 800cb6c:	20001068 	.word	0x20001068
 800cb70:	2000005c 	.word	0x2000005c
 800cb74:	20000080 	.word	0x20000080
 800cb78:	20001058 	.word	0x20001058
 800cb7c:	20000084 	.word	0x20000084

0800cb80 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cb8a:	4b22      	ldr	r3, [pc, #136]	; (800cc14 <MlmeIndication+0x94>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	785a      	ldrb	r2, [r3, #1]
 800cb94:	4b1f      	ldr	r3, [pc, #124]	; (800cc14 <MlmeIndication+0x94>)
 800cb96:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb9e:	b25a      	sxtb	r2, r3
 800cba0:	4b1c      	ldr	r3, [pc, #112]	; (800cc14 <MlmeIndication+0x94>)
 800cba2:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <MlmeIndication+0x94>)
 800cbac:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	78db      	ldrb	r3, [r3, #3]
 800cbb2:	b25a      	sxtb	r2, r3
 800cbb4:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <MlmeIndication+0x94>)
 800cbb6:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cbb8:	4b16      	ldr	r3, [pc, #88]	; (800cc14 <MlmeIndication+0x94>)
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b0e      	cmp	r3, #14
 800cbbe:	d005      	beq.n	800cbcc <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cbc0:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <MlmeIndication+0x98>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc6:	4913      	ldr	r1, [pc, #76]	; (800cc14 <MlmeIndication+0x94>)
 800cbc8:	2000      	movs	r0, #0
 800cbca:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b07      	cmp	r3, #7
 800cbd2:	d117      	bne.n	800cc04 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	723b      	strb	r3, [r7, #8]
 800cbd8:	2300      	movs	r3, #0
 800cbda:	727b      	strb	r3, [r7, #9]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cbe0:	4b0e      	ldr	r3, [pc, #56]	; (800cc1c <MlmeIndication+0x9c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	4798      	blx	r3
 800cbe8:	4603      	mov	r3, r0
 800cbea:	f083 0301 	eor.w	r3, r3, #1
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cbf4:	f107 0008 	add.w	r0, r7, #8
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f7ff fcdb 	bl	800c5b8 <LmHandlerSend>
            }
        }
        break;
 800cc02:	e001      	b.n	800cc08 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cc04:	bf00      	nop
 800cc06:	e000      	b.n	800cc0a <MlmeIndication+0x8a>
        break;
 800cc08:	bf00      	nop
    }
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20000084 	.word	0x20000084
 800cc18:	20001068 	.word	0x20001068
 800cc1c:	20001044 	.word	0x20001044

0800cc20 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d103      	bne.n	800cc3e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cc36:	f000 f935 	bl	800cea4 <LmhpCompliancePackageFactory>
 800cc3a:	60f8      	str	r0, [r7, #12]
            break;
 800cc3c:	e000      	b.n	800cc40 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cc3e:	bf00      	nop
        }
    }
    if( package != NULL )
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d02b      	beq.n	800cc9e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	4918      	ldr	r1, [pc, #96]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	4a16      	ldr	r2, [pc, #88]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc58:	4a15      	ldr	r2, [pc, #84]	; (800ccb0 <LmHandlerPackageRegister+0x90>)
 800cc5a:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	4a13      	ldr	r2, [pc, #76]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc64:	4a13      	ldr	r2, [pc, #76]	; (800ccb4 <LmHandlerPackageRegister+0x94>)
 800cc66:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cc68:	79fb      	ldrb	r3, [r7, #7]
 800cc6a:	4a10      	ldr	r2, [pc, #64]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc70:	4a11      	ldr	r2, [pc, #68]	; (800ccb8 <LmHandlerPackageRegister+0x98>)
 800cc72:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cc74:	4b11      	ldr	r3, [pc, #68]	; (800ccbc <LmHandlerPackageRegister+0x9c>)
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	490c      	ldr	r1, [pc, #48]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc80:	6912      	ldr	r2, [r2, #16]
 800cc82:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	4a09      	ldr	r2, [pc, #36]	; (800ccac <LmHandlerPackageRegister+0x8c>)
 800cc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	4a0c      	ldr	r2, [pc, #48]	; (800ccc0 <LmHandlerPackageRegister+0xa0>)
 800cc90:	6851      	ldr	r1, [r2, #4]
 800cc92:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <LmHandlerPackageRegister+0xa0>)
 800cc94:	7852      	ldrb	r2, [r2, #1]
 800cc96:	6838      	ldr	r0, [r7, #0]
 800cc98:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e001      	b.n	800cca2 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001044 	.word	0x20001044
 800ccb0:	0800c4cd 	.word	0x0800c4cd
 800ccb4:	0800c5b9 	.word	0x0800c5b9
 800ccb8:	0800c765 	.word	0x0800c765
 800ccbc:	20001068 	.word	0x20001068
 800ccc0:	20000094 	.word	0x20000094

0800ccc4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	4603      	mov	r3, r0
 800cccc:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	2b04      	cmp	r3, #4
 800ccd2:	d80e      	bhi.n	800ccf2 <LmHandlerPackageIsInitialized+0x2e>
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	4a09      	ldr	r2, [pc, #36]	; (800ccfc <LmHandlerPackageIsInitialized+0x38>)
 800ccd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d007      	beq.n	800ccf2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	4a05      	ldr	r2, [pc, #20]	; (800ccfc <LmHandlerPackageIsInitialized+0x38>)
 800cce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	4798      	blx	r3
 800ccee:	4603      	mov	r3, r0
 800ccf0:	e000      	b.n	800ccf4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ccf2:	2300      	movs	r3, #0
    }
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20001044 	.word	0x20001044

0800cd00 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	6039      	str	r1, [r7, #0]
 800cd0a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
 800cd10:	e067      	b.n	800cde2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cd12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd16:	4a37      	ldr	r2, [pc, #220]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d051      	beq.n	800cdc4 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cd20:	79fb      	ldrb	r3, [r7, #7]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d03d      	beq.n	800cda2 <LmHandlerPackagesNotify+0xa2>
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	dc4e      	bgt.n	800cdc8 <LmHandlerPackagesNotify+0xc8>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <LmHandlerPackagesNotify+0x34>
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d011      	beq.n	800cd56 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cd32:	e049      	b.n	800cdc8 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cd34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd38:	4a2e      	ldr	r2, [pc, #184]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d043      	beq.n	800cdcc <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd48:	4a2a      	ldr	r2, [pc, #168]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	6838      	ldr	r0, [r7, #0]
 800cd52:	4798      	blx	r3
                    break;
 800cd54:	e03a      	b.n	800cdcc <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5a:	4a26      	ldr	r2, [pc, #152]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d034      	beq.n	800cdd0 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd6a:	4a22      	ldr	r2, [pc, #136]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd70:	781a      	ldrb	r2, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d00a      	beq.n	800cd90 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d126      	bne.n	800cdd0 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	4798      	blx	r3
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01f      	beq.n	800cdd0 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd94:	4a17      	ldr	r2, [pc, #92]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9a:	69db      	ldr	r3, [r3, #28]
 800cd9c:	6838      	ldr	r0, [r7, #0]
 800cd9e:	4798      	blx	r3
                    break;
 800cda0:	e016      	b.n	800cdd0 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cda2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda6:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d010      	beq.n	800cdd4 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cdb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb6:	4a0f      	ldr	r2, [pc, #60]	; (800cdf4 <LmHandlerPackagesNotify+0xf4>)
 800cdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdbc:	6a1b      	ldr	r3, [r3, #32]
 800cdbe:	6838      	ldr	r0, [r7, #0]
 800cdc0:	4798      	blx	r3
                    break;
 800cdc2:	e007      	b.n	800cdd4 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800cdc4:	bf00      	nop
 800cdc6:	e006      	b.n	800cdd6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cdc8:	bf00      	nop
 800cdca:	e004      	b.n	800cdd6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cdcc:	bf00      	nop
 800cdce:	e002      	b.n	800cdd6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cdd0:	bf00      	nop
 800cdd2:	e000      	b.n	800cdd6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cdd4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	3301      	adds	r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	73fb      	strb	r3, [r7, #15]
 800cde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	dd93      	ble.n	800cd12 <LmHandlerPackagesNotify+0x12>
    }
}
 800cdea:	bf00      	nop
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	20001044 	.word	0x20001044

0800cdf8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdfe:	2300      	movs	r3, #0
 800ce00:	71fb      	strb	r3, [r7, #7]
 800ce02:	e022      	b.n	800ce4a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce08:	4a14      	ldr	r2, [pc, #80]	; (800ce5c <LmHandlerPackagesProcess+0x64>)
 800ce0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d015      	beq.n	800ce3e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce16:	4a11      	ldr	r2, [pc, #68]	; (800ce5c <LmHandlerPackagesProcess+0x64>)
 800ce18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce1c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00d      	beq.n	800ce3e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff ff4d 	bl	800ccc4 <LmHandlerPackageIsInitialized>
 800ce2a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d006      	beq.n	800ce3e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ce30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce34:	4a09      	ldr	r2, [pc, #36]	; (800ce5c <LmHandlerPackagesProcess+0x64>)
 800ce36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	3301      	adds	r3, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	71fb      	strb	r3, [r7, #7]
 800ce4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce4e:	2b04      	cmp	r3, #4
 800ce50:	ddd8      	ble.n	800ce04 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20001044 	.word	0x20001044

0800ce60 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	4603      	mov	r3, r0
 800ce68:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
}
 800ce6a:	bf00      	nop
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bc80      	pop	{r7}
 800ce72:	4770      	bx	lr

0800ce74 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ce7e:	bf00      	nop
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bc80      	pop	{r7}
 800ce86:	4770      	bx	lr

0800ce88 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800ce88:	b480      	push	{r7}
 800ce8a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800ce8c:	2300      	movs	r3, #0
#endif
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bc80      	pop	{r7}
 800ce94:	4770      	bx	lr

0800ce96 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800ce96:	b480      	push	{r7}
 800ce98:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bc80      	pop	{r7}
 800cea2:	4770      	bx	lr

0800cea4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cea4:	b480      	push	{r7}
 800cea6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <LmhpCompliancePackageFactory+0x10>)
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bc80      	pop	{r7}
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	2000009c 	.word	0x2000009c

0800ceb8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	4613      	mov	r3, r2
 800cec4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00f      	beq.n	800ceec <LmhpComplianceInit+0x34>
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00c      	beq.n	800ceec <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800ced2:	4a0c      	ldr	r2, [pc, #48]	; (800cf04 <LmhpComplianceInit+0x4c>)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800ced8:	4a0b      	ldr	r2, [pc, #44]	; (800cf08 <LmhpComplianceInit+0x50>)
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cede:	4a0a      	ldr	r2, [pc, #40]	; (800cf08 <LmhpComplianceInit+0x50>)
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cee4:	4b08      	ldr	r3, [pc, #32]	; (800cf08 <LmhpComplianceInit+0x50>)
 800cee6:	2201      	movs	r2, #1
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	e006      	b.n	800cefa <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800ceec:	4b05      	ldr	r3, [pc, #20]	; (800cf04 <LmhpComplianceInit+0x4c>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <LmhpComplianceInit+0x50>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	701a      	strb	r2, [r3, #0]
    }
}
 800cef8:	bf00      	nop
 800cefa:	bf00      	nop
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr
 800cf04:	200011c8 	.word	0x200011c8
 800cf08:	200011b4 	.word	0x200011b4

0800cf0c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf10:	4b02      	ldr	r3, [pc, #8]	; (800cf1c <LmhpComplianceIsInitialized+0x10>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bc80      	pop	{r7}
 800cf1a:	4770      	bx	lr
 800cf1c:	200011b4 	.word	0x200011b4

0800cf20 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cf20:	b480      	push	{r7}
 800cf22:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cf24:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <LmhpComplianceIsRunning+0x24>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f083 0301 	eor.w	r3, r3, #1
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e001      	b.n	800cf3a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cf36:	4b03      	ldr	r3, [pc, #12]	; (800cf44 <LmhpComplianceIsRunning+0x24>)
 800cf38:	785b      	ldrb	r3, [r3, #1]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bc80      	pop	{r7}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	200011b4 	.word	0x200011b4

0800cf48 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cf50:	4b0f      	ldr	r3, [pc, #60]	; (800cf90 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	f083 0301 	eor.w	r3, r3, #1
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d112      	bne.n	800cf84 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cf5e:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf60:	785b      	ldrb	r3, [r3, #1]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00f      	beq.n	800cf86 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d10b      	bne.n	800cf86 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d007      	beq.n	800cf86 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cf76:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf78:	899b      	ldrh	r3, [r3, #12]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf80:	819a      	strh	r2, [r3, #12]
 800cf82:	e000      	b.n	800cf86 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800cf84:	bf00      	nop
    }
}
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bc80      	pop	{r7}
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	200011b4 	.word	0x200011b4

0800cf94 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cf9c:	4b12      	ldr	r3, [pc, #72]	; (800cfe8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	f083 0301 	eor.w	r3, r3, #1
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d116      	bne.n	800cfd8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800cfaa:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfac:	785b      	ldrb	r3, [r3, #1]
 800cfae:	f083 0301 	eor.w	r3, r3, #1
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d111      	bne.n	800cfdc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d10e      	bne.n	800cfde <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800cfc0:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7a1a      	ldrb	r2, [r3, #8]
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfcc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7a5a      	ldrb	r2, [r3, #9]
 800cfd2:	4b05      	ldr	r3, [pc, #20]	; (800cfe8 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfd4:	741a      	strb	r2, [r3, #16]
 800cfd6:	e002      	b.n	800cfde <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cfd8:	bf00      	nop
 800cfda:	e000      	b.n	800cfde <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cfdc:	bf00      	nop
    }
}
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bc80      	pop	{r7}
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	200011b4 	.word	0x200011b4

0800cfec <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cff2:	4b33      	ldr	r3, [pc, #204]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	f083 0301 	eor.w	r3, r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d000:	f04f 33ff 	mov.w	r3, #4294967295
 800d004:	e058      	b.n	800d0b8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d006:	4b2e      	ldr	r3, [pc, #184]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d008:	785b      	ldrb	r3, [r3, #1]
 800d00a:	f083 0301 	eor.w	r3, r3, #1
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d014:	2300      	movs	r3, #0
 800d016:	e04f      	b.n	800d0b8 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d018:	4b29      	ldr	r3, [pc, #164]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d01a:	7b9b      	ldrb	r3, [r3, #14]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d019      	beq.n	800d054 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d020:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d022:	2200      	movs	r2, #0
 800d024:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d026:	4b26      	ldr	r3, [pc, #152]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d028:	2203      	movs	r2, #3
 800d02a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d02c:	4b24      	ldr	r3, [pc, #144]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	2205      	movs	r2, #5
 800d032:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d034:	4b22      	ldr	r3, [pc, #136]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	3301      	adds	r3, #1
 800d03a:	4a21      	ldr	r2, [pc, #132]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d03c:	7bd2      	ldrb	r2, [r2, #15]
 800d03e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d040:	4b1f      	ldr	r3, [pc, #124]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	3302      	adds	r3, #2
 800d046:	4a1e      	ldr	r2, [pc, #120]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d048:	7c12      	ldrb	r2, [r2, #16]
 800d04a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d04c:	4b1c      	ldr	r3, [pc, #112]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d04e:	2201      	movs	r2, #1
 800d050:	709a      	strb	r2, [r3, #2]
 800d052:	e01c      	b.n	800d08e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d054:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d056:	789b      	ldrb	r3, [r3, #2]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d005      	beq.n	800d068 <LmhpComplianceTxProcess+0x7c>
 800d05c:	2b04      	cmp	r3, #4
 800d05e:	d116      	bne.n	800d08e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d060:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d062:	2201      	movs	r2, #1
 800d064:	709a      	strb	r2, [r3, #2]
            break;
 800d066:	e012      	b.n	800d08e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d068:	4b15      	ldr	r3, [pc, #84]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d06a:	2202      	movs	r2, #2
 800d06c:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d06e:	4b14      	ldr	r3, [pc, #80]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d070:	899b      	ldrh	r3, [r3, #12]
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	b29a      	uxth	r2, r3
 800d076:	4b12      	ldr	r3, [pc, #72]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d07e:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d080:	899a      	ldrh	r2, [r3, #12]
 800d082:	4b0f      	ldr	r3, [pc, #60]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	3301      	adds	r3, #1
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	701a      	strb	r2, [r3, #0]
            break;
 800d08c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d08e:	23e0      	movs	r3, #224	; 0xe0
 800d090:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d092:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d094:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d096:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d098:	4b09      	ldr	r3, [pc, #36]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d09a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d09c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d09e:	4809      	ldr	r0, [pc, #36]	; (800d0c4 <LmhpComplianceTxProcess+0xd8>)
 800d0a0:	f00c fdb6 	bl	8019c10 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d0a4:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <LmhpComplianceTxProcess+0xdc>)
 800d0a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d0a8:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <LmhpComplianceTxProcess+0xd4>)
 800d0aa:	78db      	ldrb	r3, [r3, #3]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	47a0      	blx	r4
 800d0b6:	4603      	mov	r3, r0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd90      	pop	{r4, r7, pc}
 800d0c0:	200011b4 	.word	0x200011b4
 800d0c4:	2000119c 	.word	0x2000119c
 800d0c8:	2000009c 	.word	0x2000009c

0800d0cc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b0a2      	sub	sp, #136	; 0x88
 800d0d0:	af02      	add	r7, sp, #8
 800d0d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d0d4:	4ba2      	ldr	r3, [pc, #648]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f083 0301 	eor.w	r3, r3, #1
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f040 81c0 	bne.w	800d464 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7b5b      	ldrb	r3, [r3, #13]
 800d0e8:	f083 0301 	eor.w	r3, r3, #1
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 81ba 	bne.w	800d468 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d0f4:	4b9a      	ldr	r3, [pc, #616]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d0f6:	785b      	ldrb	r3, [r3, #1]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00c      	beq.n	800d116 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	7b9b      	ldrb	r3, [r3, #14]
 800d100:	f083 0301 	eor.w	r3, r3, #1
 800d104:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d106:	2b00      	cmp	r3, #0
 800d108:	d005      	beq.n	800d116 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d10a:	4b95      	ldr	r3, [pc, #596]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d10c:	899b      	ldrh	r3, [r3, #12]
 800d10e:	3301      	adds	r3, #1
 800d110:	b29a      	uxth	r2, r3
 800d112:	4b93      	ldr	r3, [pc, #588]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d114:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	78db      	ldrb	r3, [r3, #3]
 800d11a:	2be0      	cmp	r3, #224	; 0xe0
 800d11c:	f040 81a6 	bne.w	800d46c <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d120:	4b8f      	ldr	r3, [pc, #572]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d122:	785b      	ldrb	r3, [r3, #1]
 800d124:	f083 0301 	eor.w	r3, r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d060      	beq.n	800d1f0 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7b1b      	ldrb	r3, [r3, #12]
 800d132:	2b04      	cmp	r3, #4
 800d134:	f040 819f 	bne.w	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d13e:	2b01      	cmp	r3, #1
 800d140:	f040 8199 	bne.w	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	3301      	adds	r3, #1
 800d14a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	f040 8192 	bne.w	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	3302      	adds	r3, #2
 800d158:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	f040 818b 	bne.w	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	3303      	adds	r3, #3
 800d166:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d168:	2b01      	cmp	r3, #1
 800d16a:	f040 8184 	bne.w	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d16e:	4b7c      	ldr	r3, [pc, #496]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d170:	2200      	movs	r2, #0
 800d172:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d174:	4b7a      	ldr	r3, [pc, #488]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d176:	22e0      	movs	r2, #224	; 0xe0
 800d178:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d17a:	4b79      	ldr	r3, [pc, #484]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d17c:	2202      	movs	r2, #2
 800d17e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d180:	4b77      	ldr	r3, [pc, #476]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d182:	2200      	movs	r2, #0
 800d184:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d186:	4b76      	ldr	r3, [pc, #472]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d188:	2200      	movs	r2, #0
 800d18a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d18c:	4b74      	ldr	r3, [pc, #464]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d18e:	2200      	movs	r2, #0
 800d190:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d192:	4b73      	ldr	r3, [pc, #460]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d194:	2200      	movs	r2, #0
 800d196:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d198:	4b71      	ldr	r3, [pc, #452]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d19e:	4b70      	ldr	r3, [pc, #448]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d1a4:	2304      	movs	r3, #4
 800d1a6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f004 f809 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	f004 fd7a 	bl	8011cb0 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d1bc:	4b69      	ldr	r3, [pc, #420]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d1c6:	4b67      	ldr	r3, [pc, #412]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	4b65      	ldr	r3, [pc, #404]	; (800d368 <LmhpComplianceOnMcpsIndication+0x29c>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f04f 31ff 	mov.w	r1, #4294967295
 800d1da:	4864      	ldr	r0, [pc, #400]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1dc:	f00c fce2 	bl	8019ba4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d1e0:	f241 3188 	movw	r1, #5000	; 0x1388
 800d1e4:	4861      	ldr	r0, [pc, #388]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1e6:	f00c fdf1 	bl	8019dcc <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d1ea:	f7ff feff 	bl	800cfec <LmhpComplianceTxProcess>
 800d1ee:	e142      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	781a      	ldrb	r2, [r3, #0]
 800d1f6:	4b5a      	ldr	r3, [pc, #360]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d1f8:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d1fa:	4b59      	ldr	r3, [pc, #356]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d1fc:	789b      	ldrb	r3, [r3, #2]
 800d1fe:	2b0a      	cmp	r3, #10
 800d200:	f200 8136 	bhi.w	800d470 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <LmhpComplianceOnMcpsIndication+0x140>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d239 	.word	0x0800d239
 800d210:	0800d283 	.word	0x0800d283
 800d214:	0800d28b 	.word	0x0800d28b
 800d218:	0800d299 	.word	0x0800d299
 800d21c:	0800d2a7 	.word	0x0800d2a7
 800d220:	0800d2ff 	.word	0x0800d2ff
 800d224:	0800d311 	.word	0x0800d311
 800d228:	0800d375 	.word	0x0800d375
 800d22c:	0800d41d 	.word	0x0800d41d
 800d230:	0800d42f 	.word	0x0800d42f
 800d234:	0800d449 	.word	0x0800d449
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d238:	484c      	ldr	r0, [pc, #304]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d23a:	f00c fd57 	bl	8019cec <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d23e:	4b48      	ldr	r3, [pc, #288]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d240:	2200      	movs	r2, #0
 800d242:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d244:	4b46      	ldr	r3, [pc, #280]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d246:	2200      	movs	r2, #0
 800d248:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d24a:	2304      	movs	r3, #4
 800d24c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d24e:	4b45      	ldr	r3, [pc, #276]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d256:	f107 0308 	add.w	r3, r7, #8
 800d25a:	4618      	mov	r0, r3
 800d25c:	f003 ffb4 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d260:	4b40      	ldr	r3, [pc, #256]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	785b      	ldrb	r3, [r3, #1]
 800d266:	4618      	mov	r0, r3
 800d268:	f004 fd22 	bl	8011cb0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d26c:	4b3d      	ldr	r3, [pc, #244]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 80fe 	beq.w	800d474 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d278:	4b3a      	ldr	r3, [pc, #232]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	4798      	blx	r3
                }
            }
            break;
 800d280:	e0f8      	b.n	800d474 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d282:	4b37      	ldr	r3, [pc, #220]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d284:	2202      	movs	r2, #2
 800d286:	719a      	strb	r2, [r3, #6]
            break;
 800d288:	e0f5      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d28a:	4b35      	ldr	r3, [pc, #212]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d290:	4b33      	ldr	r3, [pc, #204]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d292:	2201      	movs	r2, #1
 800d294:	709a      	strb	r2, [r3, #2]
            break;
 800d296:	e0ee      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d298:	4b31      	ldr	r3, [pc, #196]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d29a:	2200      	movs	r2, #0
 800d29c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d29e:	4b30      	ldr	r3, [pc, #192]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	709a      	strb	r2, [r3, #2]
            break;
 800d2a4:	e0e7      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7b1a      	ldrb	r2, [r3, #12]
 800d2aa:	4b2d      	ldr	r3, [pc, #180]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2ac:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d2ae:	4b2c      	ldr	r3, [pc, #176]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	2204      	movs	r2, #4
 800d2b4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d2bc:	e012      	b.n	800d2e4 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	4b25      	ldr	r3, [pc, #148]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2cc:	6899      	ldr	r1, [r3, #8]
 800d2ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2d2:	440b      	add	r3, r1
 800d2d4:	3201      	adds	r2, #1
 800d2d6:	b2d2      	uxtb	r2, r2
 800d2d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d2da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2de:	3301      	adds	r3, #1
 800d2e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d2e4:	4b1e      	ldr	r3, [pc, #120]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2e6:	795a      	ldrb	r2, [r3, #5]
 800d2e8:	4b1d      	ldr	r3, [pc, #116]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d2ea:	799b      	ldrb	r3, [r3, #6]
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	bf28      	it	cs
 800d2f0:	4613      	movcs	r3, r2
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d3e0      	bcc.n	800d2be <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d2fc:	e0bb      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d2fe:	2304      	movs	r3, #4
 800d300:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d304:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d308:	4618      	mov	r0, r3
 800d30a:	f004 fa9b 	bl	8011844 <LoRaMacMlmeRequest>
            }
            break;
 800d30e:	e0b2      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d310:	4816      	ldr	r0, [pc, #88]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d312:	f00c fceb 	bl	8019cec <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d316:	4b12      	ldr	r3, [pc, #72]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d318:	2200      	movs	r2, #0
 800d31a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d31c:	4b10      	ldr	r3, [pc, #64]	; (800d360 <LmhpComplianceOnMcpsIndication+0x294>)
 800d31e:	2200      	movs	r2, #0
 800d320:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d322:	2304      	movs	r3, #4
 800d324:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d326:	4b0f      	ldr	r3, [pc, #60]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d32e:	f107 0308 	add.w	r3, r7, #8
 800d332:	4618      	mov	r0, r3
 800d334:	f003 ff48 	bl	80111c8 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d338:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	785b      	ldrb	r3, [r3, #1]
 800d33e:	4618      	mov	r0, r3
 800d340:	f004 fcb6 	bl	8011cb0 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d344:	4b07      	ldr	r3, [pc, #28]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d003      	beq.n	800d356 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d34e:	4b05      	ldr	r3, [pc, #20]	; (800d364 <LmhpComplianceOnMcpsIndication+0x298>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d356:	4b06      	ldr	r3, [pc, #24]	; (800d370 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35a:	2002      	movs	r0, #2
 800d35c:	4798      	blx	r3
            }
            break;
 800d35e:	e08a      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
 800d360:	200011b4 	.word	0x200011b4
 800d364:	200011c8 	.word	0x200011c8
 800d368:	0800d48d 	.word	0x0800d48d
 800d36c:	2000119c 	.word	0x2000119c
 800d370:	2000009c 	.word	0x2000009c
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7b1b      	ldrb	r3, [r3, #12]
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d113      	bne.n	800d3a4 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d37c:	2305      	movs	r3, #5
 800d37e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	3301      	adds	r3, #1
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	b21a      	sxth	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	3302      	adds	r3, #2
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b21b      	sxth	r3, r3
 800d398:	4313      	orrs	r3, r2
 800d39a:	b21b      	sxth	r3, r3
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d3a2:	e032      	b.n	800d40a <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7b1b      	ldrb	r3, [r3, #12]
 800d3a8:	2b07      	cmp	r3, #7
 800d3aa:	d12e      	bne.n	800d40a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d3ac:	2306      	movs	r3, #6
 800d3ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	021b      	lsls	r3, r3, #8
 800d3bc:	b21a      	sxth	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	3302      	adds	r3, #2
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b21b      	sxth	r3, r3
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	b21b      	sxth	r3, r3
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	3303      	adds	r3, #3
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	041a      	lsls	r2, r3, #16
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	6892      	ldr	r2, [r2, #8]
 800d3ec:	3205      	adds	r2, #5
 800d3ee:	7812      	ldrb	r2, [r2, #0]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	2364      	movs	r3, #100	; 0x64
 800d3f6:	fb02 f303 	mul.w	r3, r2, r3
 800d3fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	3306      	adds	r3, #6
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	b25b      	sxtb	r3, r3
 800d406:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d40a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d40e:	4618      	mov	r0, r3
 800d410:	f004 fa18 	bl	8011844 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d414:	4b19      	ldr	r3, [pc, #100]	; (800d47c <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d416:	2201      	movs	r2, #1
 800d418:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d41a:	e02c      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d41c:	230a      	movs	r3, #10
 800d41e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d426:	4618      	mov	r0, r3
 800d428:	f004 fa0c 	bl	8011844 <LoRaMacMlmeRequest>
            }
            break;
 800d42c:	e023      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d42e:	2300      	movs	r3, #0
 800d430:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	3301      	adds	r3, #1
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	4618      	mov	r0, r3
 800d442:	f003 fec1 	bl	80111c8 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d446:	e016      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d448:	230d      	movs	r3, #13
 800d44a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	785b      	ldrb	r3, [r3, #1]
 800d454:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d45c:	4618      	mov	r0, r3
 800d45e:	f004 f9f1 	bl	8011844 <LoRaMacMlmeRequest>
            }
            break;
 800d462:	e008      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d464:	bf00      	nop
 800d466:	e006      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d468:	bf00      	nop
 800d46a:	e004      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d46c:	bf00      	nop
 800d46e:	e002      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d470:	bf00      	nop
 800d472:	e000      	b.n	800d476 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d474:	bf00      	nop
        }
    }
}
 800d476:	3780      	adds	r7, #128	; 0x80
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	200011b4 	.word	0x200011b4

0800d480 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d484:	bf00      	nop
 800d486:	46bd      	mov	sp, r7
 800d488:	bc80      	pop	{r7}
 800d48a:	4770      	bx	lr

0800d48c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d494:	f7ff fdaa 	bl	800cfec <LmhpComplianceTxProcess>
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d4a0:	b590      	push	{r4, r7, lr}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d4a6:	f00c fcbb 	bl	8019e20 <UTIL_TIMER_GetCurrentTime>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4a13      	ldr	r2, [pc, #76]	; (800d4fc <OnRadioTxDone+0x5c>)
 800d4ae:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d4b0:	4c13      	ldr	r4, [pc, #76]	; (800d500 <OnRadioTxDone+0x60>)
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f00c f92b 	bl	8019710 <SysTimeGet>
 800d4ba:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d4be:	463a      	mov	r2, r7
 800d4c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4c4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d4c8:	4a0e      	ldr	r2, [pc, #56]	; (800d504 <OnRadioTxDone+0x64>)
 800d4ca:	7813      	ldrb	r3, [r2, #0]
 800d4cc:	f043 0310 	orr.w	r3, r3, #16
 800d4d0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <OnRadioTxDone+0x60>)
 800d4d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00a      	beq.n	800d4f2 <OnRadioTxDone+0x52>
 800d4dc:	4b08      	ldr	r3, [pc, #32]	; (800d500 <OnRadioTxDone+0x60>)
 800d4de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d004      	beq.n	800d4f2 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <OnRadioTxDone+0x60>)
 800d4ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800d4f2:	bf00      	nop
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd90      	pop	{r4, r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20001a24 	.word	0x20001a24
 800d500:	200011cc 	.word	0x200011cc
 800d504:	20001a20 	.word	0x20001a20

0800d508 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	4608      	mov	r0, r1
 800d512:	4611      	mov	r1, r2
 800d514:	461a      	mov	r2, r3
 800d516:	4603      	mov	r3, r0
 800d518:	817b      	strh	r3, [r7, #10]
 800d51a:	460b      	mov	r3, r1
 800d51c:	813b      	strh	r3, [r7, #8]
 800d51e:	4613      	mov	r3, r2
 800d520:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d522:	f00c fc7d 	bl	8019e20 <UTIL_TIMER_GetCurrentTime>
 800d526:	4603      	mov	r3, r0
 800d528:	4a13      	ldr	r2, [pc, #76]	; (800d578 <OnRadioRxDone+0x70>)
 800d52a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d52c:	4a12      	ldr	r2, [pc, #72]	; (800d578 <OnRadioRxDone+0x70>)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d532:	4a11      	ldr	r2, [pc, #68]	; (800d578 <OnRadioRxDone+0x70>)
 800d534:	897b      	ldrh	r3, [r7, #10]
 800d536:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d538:	4a0f      	ldr	r2, [pc, #60]	; (800d578 <OnRadioRxDone+0x70>)
 800d53a:	893b      	ldrh	r3, [r7, #8]
 800d53c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d53e:	4a0e      	ldr	r2, [pc, #56]	; (800d578 <OnRadioRxDone+0x70>)
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d544:	4a0d      	ldr	r2, [pc, #52]	; (800d57c <OnRadioRxDone+0x74>)
 800d546:	7813      	ldrb	r3, [r2, #0]
 800d548:	f043 0308 	orr.w	r3, r3, #8
 800d54c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d54e:	4b0c      	ldr	r3, [pc, #48]	; (800d580 <OnRadioRxDone+0x78>)
 800d550:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00a      	beq.n	800d56e <OnRadioRxDone+0x66>
 800d558:	4b09      	ldr	r3, [pc, #36]	; (800d580 <OnRadioRxDone+0x78>)
 800d55a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d004      	beq.n	800d56e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d564:	4b06      	ldr	r3, [pc, #24]	; (800d580 <OnRadioRxDone+0x78>)
 800d566:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800d56e:	bf00      	nop
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20001a28 	.word	0x20001a28
 800d57c:	20001a20 	.word	0x20001a20
 800d580:	200011cc 	.word	0x200011cc

0800d584 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d588:	4a0b      	ldr	r2, [pc, #44]	; (800d5b8 <OnRadioTxTimeout+0x34>)
 800d58a:	7813      	ldrb	r3, [r2, #0]
 800d58c:	f043 0304 	orr.w	r3, r3, #4
 800d590:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d592:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <OnRadioTxTimeout+0x38>)
 800d594:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <OnRadioTxTimeout+0x2e>
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <OnRadioTxTimeout+0x38>)
 800d59e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5a8:	4b04      	ldr	r3, [pc, #16]	; (800d5bc <OnRadioTxTimeout+0x38>)
 800d5aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5ae:	691b      	ldr	r3, [r3, #16]
 800d5b0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800d5b2:	bf00      	nop
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20001a20 	.word	0x20001a20
 800d5bc:	200011cc 	.word	0x200011cc

0800d5c0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d5c4:	4a0b      	ldr	r2, [pc, #44]	; (800d5f4 <OnRadioRxError+0x34>)
 800d5c6:	7813      	ldrb	r3, [r2, #0]
 800d5c8:	f043 0302 	orr.w	r3, r3, #2
 800d5cc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5ce:	4b0a      	ldr	r3, [pc, #40]	; (800d5f8 <OnRadioRxError+0x38>)
 800d5d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00a      	beq.n	800d5ee <OnRadioRxError+0x2e>
 800d5d8:	4b07      	ldr	r3, [pc, #28]	; (800d5f8 <OnRadioRxError+0x38>)
 800d5da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d004      	beq.n	800d5ee <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5e4:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <OnRadioRxError+0x38>)
 800d5e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	4798      	blx	r3
    }
}
 800d5ee:	bf00      	nop
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20001a20 	.word	0x20001a20
 800d5f8:	200011cc 	.word	0x200011cc

0800d5fc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d600:	4a0b      	ldr	r2, [pc, #44]	; (800d630 <OnRadioRxTimeout+0x34>)
 800d602:	7813      	ldrb	r3, [r2, #0]
 800d604:	f043 0301 	orr.w	r3, r3, #1
 800d608:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d60a:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <OnRadioRxTimeout+0x38>)
 800d60c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00a      	beq.n	800d62a <OnRadioRxTimeout+0x2e>
 800d614:	4b07      	ldr	r3, [pc, #28]	; (800d634 <OnRadioRxTimeout+0x38>)
 800d616:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d620:	4b04      	ldr	r3, [pc, #16]	; (800d634 <OnRadioRxTimeout+0x38>)
 800d622:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800d62a:	bf00      	nop
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	20001a20 	.word	0x20001a20
 800d634:	200011cc 	.word	0x200011cc

0800d638 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d63c:	4b08      	ldr	r3, [pc, #32]	; (800d660 <UpdateRxSlotIdleState+0x28>)
 800d63e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d642:	2b02      	cmp	r3, #2
 800d644:	d004      	beq.n	800d650 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d646:	4b07      	ldr	r3, [pc, #28]	; (800d664 <UpdateRxSlotIdleState+0x2c>)
 800d648:	2206      	movs	r2, #6
 800d64a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d64e:	e003      	b.n	800d658 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d650:	4b04      	ldr	r3, [pc, #16]	; (800d664 <UpdateRxSlotIdleState+0x2c>)
 800d652:	2202      	movs	r2, #2
 800d654:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d658:	bf00      	nop
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bc80      	pop	{r7}
 800d65e:	4770      	bx	lr
 800d660:	200016d4 	.word	0x200016d4
 800d664:	200011cc 	.word	0x200011cc

0800d668 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08e      	sub	sp, #56	; 0x38
 800d66c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d66e:	4b44      	ldr	r3, [pc, #272]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d670:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d674:	2b02      	cmp	r3, #2
 800d676:	d002      	beq.n	800d67e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d678:	4b42      	ldr	r3, [pc, #264]	; (800d784 <ProcessRadioTxDone+0x11c>)
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d67e:	4b42      	ldr	r3, [pc, #264]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d680:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d684:	4619      	mov	r1, r3
 800d686:	4841      	ldr	r0, [pc, #260]	; (800d78c <ProcessRadioTxDone+0x124>)
 800d688:	f00c fba0 	bl	8019dcc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d68c:	483f      	ldr	r0, [pc, #252]	; (800d78c <ProcessRadioTxDone+0x124>)
 800d68e:	f00c fabf 	bl	8019c10 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d692:	4b3d      	ldr	r3, [pc, #244]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d694:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d698:	4619      	mov	r1, r3
 800d69a:	483d      	ldr	r0, [pc, #244]	; (800d790 <ProcessRadioTxDone+0x128>)
 800d69c:	f00c fb96 	bl	8019dcc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d6a0:	483b      	ldr	r0, [pc, #236]	; (800d790 <ProcessRadioTxDone+0x128>)
 800d6a2:	f00c fab5 	bl	8019c10 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d6a6:	4b36      	ldr	r3, [pc, #216]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d6a8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d004      	beq.n	800d6ba <ProcessRadioTxDone+0x52>
 800d6b0:	4b35      	ldr	r3, [pc, #212]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d6b2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d019      	beq.n	800d6ee <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d6ba:	2316      	movs	r3, #22
 800d6bc:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d6c0:	4b2f      	ldr	r3, [pc, #188]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d6c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6c6:	f107 0220 	add.w	r2, r7, #32
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f006 fb87 	bl	8013de0 <RegionGetPhyParam>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d6d6:	4b2c      	ldr	r3, [pc, #176]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d6d8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	482c      	ldr	r0, [pc, #176]	; (800d794 <ProcessRadioTxDone+0x12c>)
 800d6e4:	f00c fb72 	bl	8019dcc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d6e8:	482a      	ldr	r0, [pc, #168]	; (800d794 <ProcessRadioTxDone+0x12c>)
 800d6ea:	f00c fa91 	bl	8019c10 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d6ee:	4b2a      	ldr	r3, [pc, #168]	; (800d798 <ProcessRadioTxDone+0x130>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a23      	ldr	r2, [pc, #140]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d6f6:	4b24      	ldr	r3, [pc, #144]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d6f8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d6fc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d6fe:	4b26      	ldr	r3, [pc, #152]	; (800d798 <ProcessRadioTxDone+0x130>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d708:	4618      	mov	r0, r3
 800d70a:	f00c f839 	bl	8019780 <SysTimeGetMcuTime>
 800d70e:	4638      	mov	r0, r7
 800d710:	4b1b      	ldr	r3, [pc, #108]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d712:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d716:	9200      	str	r2, [sp, #0]
 800d718:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d71c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d720:	ca06      	ldmia	r2, {r1, r2}
 800d722:	f00b ff8f 	bl	8019644 <SysTimeSub>
 800d726:	f107 0314 	add.w	r3, r7, #20
 800d72a:	463a      	mov	r2, r7
 800d72c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d730:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d734:	4b14      	ldr	r3, [pc, #80]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d736:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d73a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d73c:	2301      	movs	r3, #1
 800d73e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d740:	4b0f      	ldr	r3, [pc, #60]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d742:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d746:	2b00      	cmp	r3, #0
 800d748:	d101      	bne.n	800d74e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d74a:	2300      	movs	r3, #0
 800d74c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d74e:	4b0c      	ldr	r3, [pc, #48]	; (800d780 <ProcessRadioTxDone+0x118>)
 800d750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d754:	f107 0208 	add.w	r2, r7, #8
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f006 fb58 	bl	8013e10 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d760:	4b09      	ldr	r3, [pc, #36]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d762:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d766:	f083 0301 	eor.w	r3, r3, #1
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d770:	4b05      	ldr	r3, [pc, #20]	; (800d788 <ProcessRadioTxDone+0x120>)
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d778:	bf00      	nop
 800d77a:	3730      	adds	r7, #48	; 0x30
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	200016d4 	.word	0x200016d4
 800d784:	0802078c 	.word	0x0802078c
 800d788:	200011cc 	.word	0x200011cc
 800d78c:	2000154c 	.word	0x2000154c
 800d790:	20001564 	.word	0x20001564
 800d794:	200015c4 	.word	0x200015c4
 800d798:	20001a24 	.word	0x20001a24

0800d79c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d7a0:	4b10      	ldr	r3, [pc, #64]	; (800d7e4 <PrepareRxDoneAbort+0x48>)
 800d7a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7aa:	4a0e      	ldr	r2, [pc, #56]	; (800d7e4 <PrepareRxDoneAbort+0x48>)
 800d7ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d7b0:	4b0c      	ldr	r3, [pc, #48]	; (800d7e4 <PrepareRxDoneAbort+0x48>)
 800d7b2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	f001 f8f8 	bl	800e9b0 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d7c0:	4a08      	ldr	r2, [pc, #32]	; (800d7e4 <PrepareRxDoneAbort+0x48>)
 800d7c2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d7c6:	f043 0302 	orr.w	r3, r3, #2
 800d7ca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d7ce:	4a05      	ldr	r2, [pc, #20]	; (800d7e4 <PrepareRxDoneAbort+0x48>)
 800d7d0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d7d4:	f043 0320 	orr.w	r3, r3, #32
 800d7d8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d7dc:	f7ff ff2c 	bl	800d638 <UpdateRxSlotIdleState>
}
 800d7e0:	bf00      	nop
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	200011cc 	.word	0x200011cc

0800d7e8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d7e8:	b5b0      	push	{r4, r5, r7, lr}
 800d7ea:	b0a6      	sub	sp, #152	; 0x98
 800d7ec:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d7ee:	2313      	movs	r3, #19
 800d7f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d7f4:	4bb9      	ldr	r3, [pc, #740]	; (800dadc <ProcessRadioRxDone+0x2f4>)
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d7fa:	4bb8      	ldr	r3, [pc, #736]	; (800dadc <ProcessRadioRxDone+0x2f4>)
 800d7fc:	891b      	ldrh	r3, [r3, #8]
 800d7fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d802:	4bb6      	ldr	r3, [pc, #728]	; (800dadc <ProcessRadioRxDone+0x2f4>)
 800d804:	895b      	ldrh	r3, [r3, #10]
 800d806:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d80a:	4bb4      	ldr	r3, [pc, #720]	; (800dadc <ProcessRadioRxDone+0x2f4>)
 800d80c:	7b1b      	ldrb	r3, [r3, #12]
 800d80e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d81c:	4bb0      	ldr	r3, [pc, #704]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d81e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d832:	4bac      	ldr	r3, [pc, #688]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d834:	2200      	movs	r2, #0
 800d836:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d83a:	4aaa      	ldr	r2, [pc, #680]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d83c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d840:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d844:	4aa7      	ldr	r2, [pc, #668]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d846:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d84a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d84e:	4ba5      	ldr	r3, [pc, #660]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d850:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d854:	4ba3      	ldr	r3, [pc, #652]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d856:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d85a:	4ba2      	ldr	r3, [pc, #648]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d862:	4ba0      	ldr	r3, [pc, #640]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d864:	2200      	movs	r2, #0
 800d866:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d86a:	4b9e      	ldr	r3, [pc, #632]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d872:	4b9c      	ldr	r3, [pc, #624]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d87a:	4b9a      	ldr	r3, [pc, #616]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d882:	4b98      	ldr	r3, [pc, #608]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d88a:	4b96      	ldr	r3, [pc, #600]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d892:	4b94      	ldr	r3, [pc, #592]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d894:	2200      	movs	r2, #0
 800d896:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d89a:	4b92      	ldr	r3, [pc, #584]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d8a2:	4b90      	ldr	r3, [pc, #576]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d8aa:	4b8e      	ldr	r3, [pc, #568]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d8b2:	4b8d      	ldr	r3, [pc, #564]	; (800dae8 <ProcessRadioRxDone+0x300>)
 800d8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d8b8:	488c      	ldr	r0, [pc, #560]	; (800daec <ProcessRadioRxDone+0x304>)
 800d8ba:	f00c fa17 	bl	8019cec <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d8be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d8c6:	f004 fb28 	bl	8011f1a <LoRaMacClassBRxBeacon>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d8d0:	4a84      	ldr	r2, [pc, #528]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d8d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d8d6:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d8da:	4a82      	ldr	r2, [pc, #520]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d8dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d8e0:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d8e4:	e3bf      	b.n	800e066 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d8e6:	4b7e      	ldr	r3, [pc, #504]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d8e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d11e      	bne.n	800d92e <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d8f0:	f004 fb26 	bl	8011f40 <LoRaMacClassBIsPingExpected>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00a      	beq.n	800d910 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	f004 fad7 	bl	8011eae <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d900:	2000      	movs	r0, #0
 800d902:	f004 faf8 	bl	8011ef6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d906:	4b77      	ldr	r3, [pc, #476]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d908:	2204      	movs	r2, #4
 800d90a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d90e:	e00e      	b.n	800d92e <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d910:	f004 fb1d 	bl	8011f4e <LoRaMacClassBIsMulticastExpected>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d009      	beq.n	800d92e <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d91a:	2000      	movs	r0, #0
 800d91c:	f004 fad1 	bl	8011ec2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d920:	2000      	movs	r0, #0
 800d922:	f004 faf1 	bl	8011f08 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d926:	4b6f      	ldr	r3, [pc, #444]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d928:	2205      	movs	r2, #5
 800d92a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d92e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d938:	461a      	mov	r2, r3
 800d93a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d93c:	4413      	add	r3, r2
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d944:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d948:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	3b01      	subs	r3, #1
 800d950:	2b06      	cmp	r3, #6
 800d952:	f200 8362 	bhi.w	800e01a <ProcessRadioRxDone+0x832>
 800d956:	a201      	add	r2, pc, #4	; (adr r2, 800d95c <ProcessRadioRxDone+0x174>)
 800d958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d95c:	0800d979 	.word	0x0800d979
 800d960:	0800e01b 	.word	0x0800e01b
 800d964:	0800daf9 	.word	0x0800daf9
 800d968:	0800e01b 	.word	0x0800e01b
 800d96c:	0800daf1 	.word	0x0800daf1
 800d970:	0800e01b 	.word	0x0800e01b
 800d974:	0800dfc1 	.word	0x0800dfc1
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d978:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d97c:	2b10      	cmp	r3, #16
 800d97e:	d806      	bhi.n	800d98e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d980:	4b58      	ldr	r3, [pc, #352]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d982:	2201      	movs	r2, #1
 800d984:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d988:	f7ff ff08 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800d98c:	e36b      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d98e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d990:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800d992:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d996:	b2db      	uxtb	r3, r3
 800d998:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d99a:	4b51      	ldr	r3, [pc, #324]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d99c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d006      	beq.n	800d9b2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9a4:	4b4f      	ldr	r3, [pc, #316]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d9ac:	f7ff fef6 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800d9b0:	e359      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800d9b2:	f7fe fc75 	bl	800c2a0 <SecureElementGetJoinEui>
 800d9b6:	4601      	mov	r1, r0
 800d9b8:	f107 0308 	add.w	r3, r7, #8
 800d9bc:	461a      	mov	r2, r3
 800d9be:	20ff      	movs	r0, #255	; 0xff
 800d9c0:	f005 fc92 	bl	80132e8 <LoRaMacCryptoHandleJoinAccept>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800d9ca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d172      	bne.n	800dab8 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d9d2:	7c7b      	ldrb	r3, [r7, #17]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	4b42      	ldr	r3, [pc, #264]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d9d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d9dc:	4b40      	ldr	r3, [pc, #256]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d9de:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d9e2:	7cbb      	ldrb	r3, [r7, #18]
 800d9e4:	021b      	lsls	r3, r3, #8
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	4a3d      	ldr	r2, [pc, #244]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d9ea:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d9ee:	4b3c      	ldr	r3, [pc, #240]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d9f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d9f4:	7cfb      	ldrb	r3, [r7, #19]
 800d9f6:	041b      	lsls	r3, r3, #16
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	4a39      	ldr	r2, [pc, #228]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800d9fc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	4a37      	ldr	r2, [pc, #220]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da04:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800da08:	7e3b      	ldrb	r3, [r7, #24]
 800da0a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	461a      	mov	r2, r3
 800da12:	4b33      	ldr	r3, [pc, #204]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da18:	7e3b      	ldrb	r3, [r7, #24]
 800da1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	461a      	mov	r2, r3
 800da22:	4b2f      	ldr	r3, [pc, #188]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da28:	7e3b      	ldrb	r3, [r7, #24]
 800da2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	461a      	mov	r2, r3
 800da32:	4b2b      	ldr	r3, [pc, #172]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800da38:	7e7b      	ldrb	r3, [r7, #25]
 800da3a:	461a      	mov	r2, r3
 800da3c:	4b28      	ldr	r3, [pc, #160]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da3e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800da40:	4b27      	ldr	r3, [pc, #156]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800da48:	4b25      	ldr	r3, [pc, #148]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800da4e:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da56:	fb02 f303 	mul.w	r3, r2, r3
 800da5a:	4a21      	ldr	r2, [pc, #132]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da5c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800da5e:	4b20      	ldr	r3, [pc, #128]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da62:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800da66:	4a1e      	ldr	r2, [pc, #120]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da68:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800da6a:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800da72:	f107 0308 	add.w	r3, r7, #8
 800da76:	3312      	adds	r3, #18
 800da78:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800da7a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	3b11      	subs	r3, #17
 800da82:	b2db      	uxtb	r3, r3
 800da84:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800da88:	4b15      	ldr	r3, [pc, #84]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da8e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f006 f9f5 	bl	8013e84 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800da9a:	4b11      	ldr	r3, [pc, #68]	; (800dae0 <ProcessRadioRxDone+0x2f8>)
 800da9c:	2202      	movs	r2, #2
 800da9e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800daa2:	2001      	movs	r0, #1
 800daa4:	f004 ff18 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00e      	beq.n	800dacc <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800daae:	2101      	movs	r1, #1
 800dab0:	2000      	movs	r0, #0
 800dab2:	f004 fe85 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
 800dab6:	e009      	b.n	800dacc <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dab8:	2001      	movs	r0, #1
 800daba:	f004 ff0d 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dac4:	2101      	movs	r1, #1
 800dac6:	2007      	movs	r0, #7
 800dac8:	f004 fe7a 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800dacc:	4a05      	ldr	r2, [pc, #20]	; (800dae4 <ProcessRadioRxDone+0x2fc>)
 800dace:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dad2:	f043 0308 	orr.w	r3, r3, #8
 800dad6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800dada:	e2a5      	b.n	800e028 <ProcessRadioRxDone+0x840>
 800dadc:	20001a28 	.word	0x20001a28
 800dae0:	200016d4 	.word	0x200016d4
 800dae4:	200011cc 	.word	0x200011cc
 800dae8:	0802078c 	.word	0x0802078c
 800daec:	20001564 	.word	0x20001564
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800daf0:	4bae      	ldr	r3, [pc, #696]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800daf8:	4bad      	ldr	r3, [pc, #692]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dafa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800dafe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800db02:	4baa      	ldr	r3, [pc, #680]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800db04:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800db08:	b25b      	sxtb	r3, r3
 800db0a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800db0e:	230d      	movs	r3, #13
 800db10:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800db14:	4ba6      	ldr	r3, [pc, #664]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800db16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800db1e:	230e      	movs	r3, #14
 800db20:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800db24:	4ba2      	ldr	r3, [pc, #648]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800db26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db2a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f006 f955 	bl	8013de0 <RegionGetPhyParam>
 800db36:	4603      	mov	r3, r0
 800db38:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800db3a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db3e:	3b0d      	subs	r3, #13
 800db40:	b29b      	uxth	r3, r3
 800db42:	b21b      	sxth	r3, r3
 800db44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db48:	b21a      	sxth	r2, r3
 800db4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db4c:	b21b      	sxth	r3, r3
 800db4e:	429a      	cmp	r2, r3
 800db50:	dc03      	bgt.n	800db5a <ProcessRadioRxDone+0x372>
 800db52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db56:	2b0b      	cmp	r3, #11
 800db58:	d806      	bhi.n	800db68 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db5a:	4b94      	ldr	r3, [pc, #592]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800db5c:	2201      	movs	r2, #1
 800db5e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800db62:	f7ff fe1b 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800db66:	e27e      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800db68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db6a:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800db6c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800db76:	4b8f      	ldr	r3, [pc, #572]	; (800ddb4 <ProcessRadioRxDone+0x5cc>)
 800db78:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800db7a:	23ff      	movs	r3, #255	; 0xff
 800db7c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800db80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db84:	4618      	mov	r0, r3
 800db86:	f005 feae 	bl	80138e6 <LoRaMacParserData>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d006      	beq.n	800db9e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db90:	4b86      	ldr	r3, [pc, #536]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800db92:	2201      	movs	r2, #1
 800db94:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800db98:	f7ff fe00 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800db9c:	e263      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800db9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba0:	4a82      	ldr	r2, [pc, #520]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dba2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dba6:	1cba      	adds	r2, r7, #2
 800dba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbac:	4611      	mov	r1, r2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f002 fcde 	bl	8010570 <DetermineFrameType>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d006      	beq.n	800dbc8 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbba:	4b7c      	ldr	r3, [pc, #496]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dbc2:	f7ff fdeb 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800dbc6:	e24e      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dbd8:	e049      	b.n	800dc6e <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dbda:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dbde:	4a74      	ldr	r2, [pc, #464]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dbe0:	212c      	movs	r1, #44	; 0x2c
 800dbe2:	fb01 f303 	mul.w	r3, r1, r3
 800dbe6:	4413      	add	r3, r2
 800dbe8:	33d4      	adds	r3, #212	; 0xd4
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d138      	bne.n	800dc64 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dbf2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dbf6:	4a6e      	ldr	r2, [pc, #440]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dbf8:	212c      	movs	r1, #44	; 0x2c
 800dbfa:	fb01 f303 	mul.w	r3, r1, r3
 800dbfe:	4413      	add	r3, r2
 800dc00:	33d2      	adds	r3, #210	; 0xd2
 800dc02:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d02d      	beq.n	800dc64 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dc0e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc12:	4a67      	ldr	r2, [pc, #412]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dc14:	212c      	movs	r1, #44	; 0x2c
 800dc16:	fb01 f303 	mul.w	r3, r1, r3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	33d3      	adds	r3, #211	; 0xd3
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dc24:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc28:	4a61      	ldr	r2, [pc, #388]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dc2a:	212c      	movs	r1, #44	; 0x2c
 800dc2c:	fb01 f303 	mul.w	r3, r1, r3
 800dc30:	4413      	add	r3, r2
 800dc32:	33f0      	adds	r3, #240	; 0xf0
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dc3a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc3e:	4a5c      	ldr	r2, [pc, #368]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dc40:	212c      	movs	r1, #44	; 0x2c
 800dc42:	fb01 f303 	mul.w	r3, r1, r3
 800dc46:	4413      	add	r3, r2
 800dc48:	33d4      	adds	r3, #212	; 0xd4
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dc50:	4b57      	ldr	r3, [pc, #348]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dc52:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d10e      	bne.n	800dc78 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dc5a:	4b54      	ldr	r3, [pc, #336]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dc5c:	2203      	movs	r2, #3
 800dc5e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dc62:	e009      	b.n	800dc78 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dc64:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc68:	3301      	adds	r3, #1
 800dc6a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dc6e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0b1      	beq.n	800dbda <ProcessRadioRxDone+0x3f2>
 800dc76:	e000      	b.n	800dc7a <ProcessRadioRxDone+0x492>
                    break;
 800dc78:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dc7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d117      	bne.n	800dcb2 <ProcessRadioRxDone+0x4ca>
 800dc82:	78bb      	ldrb	r3, [r7, #2]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d10d      	bne.n	800dca4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dc88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d106      	bne.n	800dca4 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dc96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dc9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d006      	beq.n	800dcb2 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dca4:	4b41      	ldr	r3, [pc, #260]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcac:	f7ff fd76 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800dcb0:	e1d9      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dcb2:	2315      	movs	r3, #21
 800dcb4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcb8:	4b3d      	ldr	r3, [pc, #244]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dcba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcbe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f006 f88b 	bl	8013de0 <RegionGetPhyParam>
 800dcca:	4603      	mov	r3, r0
 800dccc:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dcce:	78b9      	ldrb	r1, [r7, #2]
 800dcd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	4d36      	ldr	r5, [pc, #216]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dcd6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dcda:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dcde:	1d3a      	adds	r2, r7, #4
 800dce0:	9202      	str	r2, [sp, #8]
 800dce2:	1cfa      	adds	r2, r7, #3
 800dce4:	9201      	str	r2, [sp, #4]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800dcec:	4622      	mov	r2, r4
 800dcee:	f000 fe95 	bl	800ea1c <GetFCntDown>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dcf8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d031      	beq.n	800dd64 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dd00:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd04:	2b07      	cmp	r3, #7
 800dd06:	d119      	bne.n	800dd3c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dd08:	4b28      	ldr	r3, [pc, #160]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd0a:	2208      	movs	r2, #8
 800dd0c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dd10:	4b27      	ldr	r3, [pc, #156]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dd12:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d11d      	bne.n	800dd56 <ProcessRadioRxDone+0x56e>
 800dd1a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dd1e:	f023 031f 	bic.w	r3, r3, #31
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2ba0      	cmp	r3, #160	; 0xa0
 800dd26:	d116      	bne.n	800dd56 <ProcessRadioRxDone+0x56e>
 800dd28:	4b21      	ldr	r3, [pc, #132]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dd2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d111      	bne.n	800dd56 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dd32:	4b1f      	ldr	r3, [pc, #124]	; (800ddb0 <ProcessRadioRxDone+0x5c8>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800dd3a:	e00c      	b.n	800dd56 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dd3c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d104      	bne.n	800dd4e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dd44:	4b19      	ldr	r3, [pc, #100]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd46:	220a      	movs	r2, #10
 800dd48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dd4c:	e003      	b.n	800dd56 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd4e:	4b17      	ldr	r3, [pc, #92]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a14      	ldr	r2, [pc, #80]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd5a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800dd5e:	f7ff fd1d 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800dd62:	e180      	b.n	800e066 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dd64:	78fa      	ldrb	r2, [r7, #3]
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dd6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	460b      	mov	r3, r1
 800dd74:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dd78:	f005 fc02 	bl	8013580 <LoRaMacCryptoUnsecureMessage>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd82:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d016      	beq.n	800ddb8 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800dd8a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd8e:	2b02      	cmp	r3, #2
 800dd90:	d104      	bne.n	800dd9c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800dd92:	4b06      	ldr	r3, [pc, #24]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd94:	220b      	movs	r2, #11
 800dd96:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dd9a:	e003      	b.n	800dda4 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800dd9c:	4b03      	ldr	r3, [pc, #12]	; (800ddac <ProcessRadioRxDone+0x5c4>)
 800dd9e:	220c      	movs	r2, #12
 800dda0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800dda4:	f7ff fcfa 	bl	800d79c <PrepareRxDoneAbort>
                return;
 800dda8:	e15d      	b.n	800e066 <ProcessRadioRxDone+0x87e>
 800ddaa:	bf00      	nop
 800ddac:	200011cc 	.word	0x200011cc
 800ddb0:	200016d4 	.word	0x200016d4
 800ddb4:	20001404 	.word	0x20001404
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ddb8:	4bac      	ldr	r3, [pc, #688]	; (800e06c <ProcessRadioRxDone+0x884>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800ddc0:	4aaa      	ldr	r2, [pc, #680]	; (800e06c <ProcessRadioRxDone+0x884>)
 800ddc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ddc6:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ddca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4ba5      	ldr	r3, [pc, #660]	; (800e06c <ProcessRadioRxDone+0x884>)
 800ddd8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800dddc:	4ba3      	ldr	r3, [pc, #652]	; (800e06c <ProcessRadioRxDone+0x884>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800dde4:	4ba1      	ldr	r3, [pc, #644]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a9f      	ldr	r2, [pc, #636]	; (800e06c <ProcessRadioRxDone+0x884>)
 800ddf0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ddf4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ddf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	bf14      	ite	ne
 800de02:	2301      	movne	r3, #1
 800de04:	2300      	moveq	r3, #0
 800de06:	b2da      	uxtb	r2, r3
 800de08:	4b98      	ldr	r3, [pc, #608]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de0a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de0e:	4b97      	ldr	r3, [pc, #604]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	bf14      	ite	ne
 800de24:	2301      	movne	r3, #1
 800de26:	2300      	moveq	r3, #0
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	4b90      	ldr	r3, [pc, #576]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de2c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de30:	4b8e      	ldr	r3, [pc, #568]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de32:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800de36:	2b00      	cmp	r3, #0
 800de38:	d004      	beq.n	800de44 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800de3a:	4b8c      	ldr	r3, [pc, #560]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de3c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de40:	2b01      	cmp	r3, #1
 800de42:	d102      	bne.n	800de4a <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800de44:	4b8a      	ldr	r3, [pc, #552]	; (800e070 <ProcessRadioRxDone+0x888>)
 800de46:	2200      	movs	r2, #0
 800de48:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800de4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d104      	bne.n	800de5c <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800de52:	4b86      	ldr	r3, [pc, #536]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de54:	2202      	movs	r2, #2
 800de56:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800de5a:	e01f      	b.n	800de9c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800de5c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800de60:	f023 031f 	bic.w	r3, r3, #31
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2ba0      	cmp	r3, #160	; 0xa0
 800de68:	d110      	bne.n	800de8c <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800de6a:	4b81      	ldr	r3, [pc, #516]	; (800e070 <ProcessRadioRxDone+0x888>)
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800de72:	4b7f      	ldr	r3, [pc, #508]	; (800e070 <ProcessRadioRxDone+0x888>)
 800de74:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800de7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de7e:	4a7c      	ldr	r2, [pc, #496]	; (800e070 <ProcessRadioRxDone+0x888>)
 800de80:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de82:	4b7a      	ldr	r3, [pc, #488]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de84:	2201      	movs	r2, #1
 800de86:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800de8a:	e007      	b.n	800de9c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800de8c:	4b78      	ldr	r3, [pc, #480]	; (800e070 <ProcessRadioRxDone+0x888>)
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800de94:	4b75      	ldr	r3, [pc, #468]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de96:	2200      	movs	r2, #0
 800de98:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800de9c:	4b73      	ldr	r3, [pc, #460]	; (800e06c <ProcessRadioRxDone+0x884>)
 800de9e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dea2:	4a72      	ldr	r2, [pc, #456]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dea4:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800dea8:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800deac:	4618      	mov	r0, r3
 800deae:	f001 ff0d 	bl	800fccc <RemoveMacCommands>

            switch( fType )
 800deb2:	78bb      	ldrb	r3, [r7, #2]
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	d874      	bhi.n	800dfa2 <ProcessRadioRxDone+0x7ba>
 800deb8:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <ProcessRadioRxDone+0x6d8>)
 800deba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debe:	bf00      	nop
 800dec0:	0800ded1 	.word	0x0800ded1
 800dec4:	0800df21 	.word	0x0800df21
 800dec8:	0800df57 	.word	0x0800df57
 800decc:	0800df7d 	.word	0x0800df7d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ded0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ded4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	461c      	mov	r4, r3
 800dedc:	4b63      	ldr	r3, [pc, #396]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dede:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dee2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dee6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800deea:	f102 0010 	add.w	r0, r2, #16
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	460b      	mov	r3, r1
 800def2:	4622      	mov	r2, r4
 800def4:	2100      	movs	r1, #0
 800def6:	f000 ff03 	bl	800ed00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800defa:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800defe:	4b5b      	ldr	r3, [pc, #364]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df00:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df06:	4a59      	ldr	r2, [pc, #356]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df08:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800df0c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df10:	4b56      	ldr	r3, [pc, #344]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df12:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800df16:	4b55      	ldr	r3, [pc, #340]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800df1e:	e047      	b.n	800dfb0 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800df20:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	461c      	mov	r4, r3
 800df2c:	4b4f      	ldr	r3, [pc, #316]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df2e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df32:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df3a:	f102 0010 	add.w	r0, r2, #16
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	460b      	mov	r3, r1
 800df42:	4622      	mov	r2, r4
 800df44:	2100      	movs	r1, #0
 800df46:	f000 fedb 	bl	800ed00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df4a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df4e:	4b47      	ldr	r3, [pc, #284]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df50:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800df54:	e02c      	b.n	800dfb0 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800df56:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df58:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df5c:	4b43      	ldr	r3, [pc, #268]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df5e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	460b      	mov	r3, r1
 800df6a:	2100      	movs	r1, #0
 800df6c:	f000 fec8 	bl	800ed00 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df70:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df74:	4b3d      	ldr	r3, [pc, #244]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df76:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800df7a:	e019      	b.n	800dfb0 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df7c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df80:	4b3a      	ldr	r3, [pc, #232]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df82:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df88:	4a38      	ldr	r2, [pc, #224]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df8a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800df8e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df92:	4b36      	ldr	r3, [pc, #216]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df94:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800df98:	4b34      	ldr	r3, [pc, #208]	; (800e06c <ProcessRadioRxDone+0x884>)
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800dfa0:	e006      	b.n	800dfb0 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfa2:	4b32      	ldr	r3, [pc, #200]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800dfaa:	f7ff fbf7 	bl	800d79c <PrepareRxDoneAbort>
                    break;
 800dfae:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800dfb0:	4a2e      	ldr	r2, [pc, #184]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dfb2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dfb6:	f043 0302 	orr.w	r3, r3, #2
 800dfba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800dfbe:	e033      	b.n	800e028 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800dfc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dfc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dfc6:	18d1      	adds	r1, r2, r3
 800dfc8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	4826      	ldr	r0, [pc, #152]	; (800e074 <ProcessRadioRxDone+0x88c>)
 800dfda:	f008 f9d8 	bl	801638e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800dfde:	4b23      	ldr	r3, [pc, #140]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dfe0:	2203      	movs	r2, #3
 800dfe2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dfe6:	4b21      	ldr	r3, [pc, #132]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800dfee:	4b1f      	ldr	r3, [pc, #124]	; (800e06c <ProcessRadioRxDone+0x884>)
 800dff0:	4a20      	ldr	r2, [pc, #128]	; (800e074 <ProcessRadioRxDone+0x88c>)
 800dff2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800dff6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	b2da      	uxtb	r2, r3
 800e004:	4b19      	ldr	r3, [pc, #100]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e006:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e00a:	4a18      	ldr	r2, [pc, #96]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e00c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e010:	f043 0302 	orr.w	r3, r3, #2
 800e014:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e018:	e006      	b.n	800e028 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e022:	f7ff fbbb 	bl	800d79c <PrepareRxDoneAbort>
            break;
 800e026:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e028:	4b10      	ldr	r3, [pc, #64]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e02a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d008      	beq.n	800e044 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e034:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00b      	beq.n	800e054 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e03c:	2000      	movs	r0, #0
 800e03e:	f000 fcb7 	bl	800e9b0 <OnAckTimeoutTimerEvent>
 800e042:	e007      	b.n	800e054 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <ProcessRadioRxDone+0x888>)
 800e046:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e04a:	2b02      	cmp	r3, #2
 800e04c:	d102      	bne.n	800e054 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e04e:	2000      	movs	r0, #0
 800e050:	f000 fcae 	bl	800e9b0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e054:	4a05      	ldr	r2, [pc, #20]	; (800e06c <ProcessRadioRxDone+0x884>)
 800e056:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e05a:	f043 0320 	orr.w	r3, r3, #32
 800e05e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e062:	f7ff fae9 	bl	800d638 <UpdateRxSlotIdleState>
}
 800e066:	3788      	adds	r7, #136	; 0x88
 800e068:	46bd      	mov	sp, r7
 800e06a:	bdb0      	pop	{r4, r5, r7, pc}
 800e06c:	200011cc 	.word	0x200011cc
 800e070:	200016d4 	.word	0x200016d4
 800e074:	20001404 	.word	0x20001404

0800e078 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e07c:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <ProcessRadioTxTimeout+0x4c>)
 800e07e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e082:	2b02      	cmp	r3, #2
 800e084:	d002      	beq.n	800e08c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e086:	4b10      	ldr	r3, [pc, #64]	; (800e0c8 <ProcessRadioTxTimeout+0x50>)
 800e088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e08c:	f7ff fad4 	bl	800d638 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e090:	4b0e      	ldr	r3, [pc, #56]	; (800e0cc <ProcessRadioTxTimeout+0x54>)
 800e092:	2202      	movs	r2, #2
 800e094:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e098:	2002      	movs	r0, #2
 800e09a:	f004 fbe9 	bl	8012870 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e09e:	4b0b      	ldr	r3, [pc, #44]	; (800e0cc <ProcessRadioTxTimeout+0x54>)
 800e0a0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d003      	beq.n	800e0b0 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e0a8:	4b08      	ldr	r3, [pc, #32]	; (800e0cc <ProcessRadioTxTimeout+0x54>)
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e0b0:	4a06      	ldr	r2, [pc, #24]	; (800e0cc <ProcessRadioTxTimeout+0x54>)
 800e0b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0b6:	f043 0320 	orr.w	r3, r3, #32
 800e0ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e0be:	bf00      	nop
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	200016d4 	.word	0x200016d4
 800e0c8:	0802078c 	.word	0x0802078c
 800e0cc:	200011cc 	.word	0x200011cc

0800e0d0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	460a      	mov	r2, r1
 800e0da:	71fb      	strb	r3, [r7, #7]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0e4:	4b40      	ldr	r3, [pc, #256]	; (800e1e8 <HandleRadioRxErrorTimeout+0x118>)
 800e0e6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d002      	beq.n	800e0f4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e0ee:	4b3f      	ldr	r3, [pc, #252]	; (800e1ec <HandleRadioRxErrorTimeout+0x11c>)
 800e0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e0f4:	f003 ff1d 	bl	8011f32 <LoRaMacClassBIsBeaconExpected>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d007      	beq.n	800e10e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e0fe:	2002      	movs	r0, #2
 800e100:	f003 fecb 	bl	8011e9a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e104:	2000      	movs	r0, #0
 800e106:	f003 feed 	bl	8011ee4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e10a:	2301      	movs	r3, #1
 800e10c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e10e:	4b36      	ldr	r3, [pc, #216]	; (800e1e8 <HandleRadioRxErrorTimeout+0x118>)
 800e110:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e114:	2b01      	cmp	r3, #1
 800e116:	d119      	bne.n	800e14c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e118:	f003 ff12 	bl	8011f40 <LoRaMacClassBIsPingExpected>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d007      	beq.n	800e132 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e122:	2000      	movs	r0, #0
 800e124:	f003 fec3 	bl	8011eae <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e128:	2000      	movs	r0, #0
 800e12a:	f003 fee4 	bl	8011ef6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e12e:	2301      	movs	r3, #1
 800e130:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e132:	f003 ff0c 	bl	8011f4e <LoRaMacClassBIsMulticastExpected>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e13c:	2000      	movs	r0, #0
 800e13e:	f003 fec0 	bl	8011ec2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e142:	2000      	movs	r0, #0
 800e144:	f003 fee0 	bl	8011f08 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e148:	2301      	movs	r3, #1
 800e14a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	f083 0301 	eor.w	r3, r3, #1
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d040      	beq.n	800e1da <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e158:	4b25      	ldr	r3, [pc, #148]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e15a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d122      	bne.n	800e1a8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e162:	4b23      	ldr	r3, [pc, #140]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e164:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d003      	beq.n	800e174 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e16c:	4a20      	ldr	r2, [pc, #128]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	4618      	mov	r0, r3
 800e178:	f004 fb7a 	bl	8012870 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e17c:	4b1a      	ldr	r3, [pc, #104]	; (800e1e8 <HandleRadioRxErrorTimeout+0x118>)
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	4618      	mov	r0, r3
 800e182:	f00b fe5f 	bl	8019e44 <UTIL_TIMER_GetElapsedTime>
 800e186:	4602      	mov	r2, r0
 800e188:	4b19      	ldr	r3, [pc, #100]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e18a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e18e:	429a      	cmp	r2, r3
 800e190:	d323      	bcc.n	800e1da <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e192:	4818      	ldr	r0, [pc, #96]	; (800e1f4 <HandleRadioRxErrorTimeout+0x124>)
 800e194:	f00b fdaa 	bl	8019cec <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e198:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e19a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e19e:	f043 0320 	orr.w	r3, r3, #32
 800e1a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e1a6:	e018      	b.n	800e1da <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e1a8:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e1aa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d003      	beq.n	800e1ba <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e1b2:	4a0f      	ldr	r2, [pc, #60]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e1b4:	79bb      	ldrb	r3, [r7, #6]
 800e1b6:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e1ba:	79bb      	ldrb	r3, [r7, #6]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f004 fb57 	bl	8012870 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e1c2:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <HandleRadioRxErrorTimeout+0x118>)
 800e1c4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d006      	beq.n	800e1da <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e1cc:	4a08      	ldr	r2, [pc, #32]	; (800e1f0 <HandleRadioRxErrorTimeout+0x120>)
 800e1ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e1d2:	f043 0320 	orr.w	r3, r3, #32
 800e1d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e1da:	f7ff fa2d 	bl	800d638 <UpdateRxSlotIdleState>
}
 800e1de:	bf00      	nop
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200016d4 	.word	0x200016d4
 800e1ec:	0802078c 	.word	0x0802078c
 800e1f0:	200011cc 	.word	0x200011cc
 800e1f4:	20001564 	.word	0x20001564

0800e1f8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e1fc:	2106      	movs	r1, #6
 800e1fe:	2005      	movs	r0, #5
 800e200:	f7ff ff66 	bl	800e0d0 <HandleRadioRxErrorTimeout>
}
 800e204:	bf00      	nop
 800e206:	bd80      	pop	{r7, pc}

0800e208 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e20c:	2104      	movs	r1, #4
 800e20e:	2003      	movs	r0, #3
 800e210:	f7ff ff5e 	bl	800e0d0 <HandleRadioRxErrorTimeout>
}
 800e214:	bf00      	nop
 800e216:	bd80      	pop	{r7, pc}

0800e218 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e21e:	f3ef 8310 	mrs	r3, PRIMASK
 800e222:	607b      	str	r3, [r7, #4]
  return(result);
 800e224:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e226:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e228:	b672      	cpsid	i
}
 800e22a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e22c:	4b1d      	ldr	r3, [pc, #116]	; (800e2a4 <LoRaMacHandleIrqEvents+0x8c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e232:	4b1c      	ldr	r3, [pc, #112]	; (800e2a4 <LoRaMacHandleIrqEvents+0x8c>)
 800e234:	2200      	movs	r2, #0
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	f383 8810 	msr	PRIMASK, r3
}
 800e242:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d027      	beq.n	800e29a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e24a:	783b      	ldrb	r3, [r7, #0]
 800e24c:	f003 0310 	and.w	r3, r3, #16
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b00      	cmp	r3, #0
 800e254:	d001      	beq.n	800e25a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e256:	f7ff fa07 	bl	800d668 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e25a:	783b      	ldrb	r3, [r7, #0]
 800e25c:	f003 0308 	and.w	r3, r3, #8
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e266:	f7ff fabf 	bl	800d7e8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e26a:	783b      	ldrb	r3, [r7, #0]
 800e26c:	f003 0304 	and.w	r3, r3, #4
 800e270:	b2db      	uxtb	r3, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e276:	f7ff feff 	bl	800e078 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e27a:	783b      	ldrb	r3, [r7, #0]
 800e27c:	f003 0302 	and.w	r3, r3, #2
 800e280:	b2db      	uxtb	r3, r3
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e286:	f7ff ffb7 	bl	800e1f8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e28a:	783b      	ldrb	r3, [r7, #0]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	b2db      	uxtb	r3, r3
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e296:	f7ff ffb7 	bl	800e208 <ProcessRadioRxTimeout>
        }
    }
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001a20 	.word	0x20001a20

0800e2a8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2ac:	4b08      	ldr	r3, [pc, #32]	; (800e2d0 <LoRaMacIsBusy+0x28>)
 800e2ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e2b6:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <LoRaMacIsBusy+0x28>)
 800e2b8:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d101      	bne.n	800e2c4 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e000      	b.n	800e2c6 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e2c4:	2301      	movs	r3, #1
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bc80      	pop	{r7}
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	200011cc 	.word	0x200011cc

0800e2d4 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e2de:	4a04      	ldr	r2, [pc, #16]	; (800e2f0 <LoRaMacEnableRequests+0x1c>)
 800e2e0:	79fb      	ldrb	r3, [r7, #7]
 800e2e2:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e2e6:	bf00      	nop
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bc80      	pop	{r7}
 800e2ee:	4770      	bx	lr
 800e2f0:	200011cc 	.word	0x200011cc

0800e2f4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e2fa:	4b2c      	ldr	r3, [pc, #176]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e2fc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e300:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e302:	4b2a      	ldr	r3, [pc, #168]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e304:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d14a      	bne.n	800e3a2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e30c:	4b27      	ldr	r3, [pc, #156]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e30e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e312:	f003 0301 	and.w	r3, r3, #1
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d006      	beq.n	800e32a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e31c:	4a23      	ldr	r2, [pc, #140]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e31e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e322:	f36f 0300 	bfc	r3, #0, #1
 800e326:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e32a:	4b20      	ldr	r3, [pc, #128]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e32c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e330:	f003 0304 	and.w	r3, r3, #4
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d006      	beq.n	800e348 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e33a:	4a1c      	ldr	r2, [pc, #112]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e33c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e340:	f36f 0382 	bfc	r3, #2, #1
 800e344:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e348:	2001      	movs	r0, #1
 800e34a:	f7ff ffc3 	bl	800e2d4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e34e:	793b      	ldrb	r3, [r7, #4]
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	b2db      	uxtb	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d005      	beq.n	800e366 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e35c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4813      	ldr	r0, [pc, #76]	; (800e3b0 <LoRaMacHandleRequestEvents+0xbc>)
 800e364:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e366:	793b      	ldrb	r3, [r7, #4]
 800e368:	f003 0304 	and.w	r3, r3, #4
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00e      	beq.n	800e390 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e372:	4810      	ldr	r0, [pc, #64]	; (800e3b4 <LoRaMacHandleRequestEvents+0xc0>)
 800e374:	f004 faca 	bl	801290c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e378:	f004 fb14 	bl	80129a4 <LoRaMacConfirmQueueGetCnt>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e382:	4a0a      	ldr	r2, [pc, #40]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e384:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e388:	f043 0304 	orr.w	r3, r3, #4
 800e38c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e390:	f003 fdfb 	bl	8011f8a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e394:	4a05      	ldr	r2, [pc, #20]	; (800e3ac <LoRaMacHandleRequestEvents+0xb8>)
 800e396:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e39a:	f36f 1345 	bfc	r3, #5, #1
 800e39e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	200011cc 	.word	0x200011cc
 800e3b0:	20001604 	.word	0x20001604
 800e3b4:	20001618 	.word	0x20001618

0800e3b8 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e3be:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e3c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e3cc:	1dfb      	adds	r3, r7, #7
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f004 f882 	bl	80124d8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e3da:	f000 fc81 	bl	800ece0 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e3de:	bf00      	nop
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	200011cc 	.word	0x200011cc

0800e3ec <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b088      	sub	sp, #32
 800e3f0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e3f2:	4b25      	ldr	r3, [pc, #148]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e3f4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3f8:	f003 0308 	and.w	r3, r3, #8
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00d      	beq.n	800e41e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e402:	4a21      	ldr	r2, [pc, #132]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e404:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e408:	f36f 03c3 	bfc	r3, #3, #1
 800e40c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e410:	4b1d      	ldr	r3, [pc, #116]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e412:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	491c      	ldr	r1, [pc, #112]	; (800e48c <LoRaMacHandleIndicationEvents+0xa0>)
 800e41a:	481d      	ldr	r0, [pc, #116]	; (800e490 <LoRaMacHandleIndicationEvents+0xa4>)
 800e41c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e41e:	4b1a      	ldr	r3, [pc, #104]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e420:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d012      	beq.n	800e454 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e42e:	2307      	movs	r3, #7
 800e430:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e436:	4b14      	ldr	r3, [pc, #80]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e438:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	1d3a      	adds	r2, r7, #4
 800e440:	4912      	ldr	r1, [pc, #72]	; (800e48c <LoRaMacHandleIndicationEvents+0xa0>)
 800e442:	4610      	mov	r0, r2
 800e444:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e446:	4a10      	ldr	r2, [pc, #64]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e448:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e44c:	f36f 1304 	bfc	r3, #4, #1
 800e450:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e454:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e456:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e45a:	f003 0302 	and.w	r3, r3, #2
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00d      	beq.n	800e480 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e464:	4a08      	ldr	r2, [pc, #32]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e466:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e46a:	f36f 0341 	bfc	r3, #1, #1
 800e46e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <LoRaMacHandleIndicationEvents+0x9c>)
 800e474:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	4904      	ldr	r1, [pc, #16]	; (800e48c <LoRaMacHandleIndicationEvents+0xa0>)
 800e47c:	4805      	ldr	r0, [pc, #20]	; (800e494 <LoRaMacHandleIndicationEvents+0xa8>)
 800e47e:	4798      	blx	r3
    }
}
 800e480:	bf00      	nop
 800e482:	3720      	adds	r7, #32
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	200011cc 	.word	0x200011cc
 800e48c:	20001648 	.word	0x20001648
 800e490:	2000162c 	.word	0x2000162c
 800e494:	200015e8 	.word	0x200015e8

0800e498 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e49e:	4b32      	ldr	r3, [pc, #200]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4a0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d058      	beq.n	800e560 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e4b6:	4b2c      	ldr	r3, [pc, #176]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4b8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d004      	beq.n	800e4ca <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e4c0:	4b29      	ldr	r3, [pc, #164]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4c2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e4c6:	2b03      	cmp	r3, #3
 800e4c8:	d104      	bne.n	800e4d4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e4ca:	f002 f89f 	bl	801060c <CheckRetransUnconfirmedUplink>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	71fb      	strb	r3, [r7, #7]
 800e4d2:	e020      	b.n	800e516 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e4d4:	4b24      	ldr	r3, [pc, #144]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4d6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d11b      	bne.n	800e516 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e4de:	4b22      	ldr	r3, [pc, #136]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4e0:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d014      	beq.n	800e512 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e4e8:	f002 f8bc 	bl	8010664 <CheckRetransConfirmedUplink>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e4f0:	4b1e      	ldr	r3, [pc, #120]	; (800e56c <LoRaMacHandleMcpsRequest+0xd4>)
 800e4f2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10d      	bne.n	800e516 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	f083 0301 	eor.w	r3, r3, #1
 800e500:	b2db      	uxtb	r3, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e506:	f002 f929 	bl	801075c <AckTimeoutRetriesProcess>
 800e50a:	e004      	b.n	800e516 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e50c:	f002 f964 	bl	80107d8 <AckTimeoutRetriesFinalize>
 800e510:	e001      	b.n	800e516 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e512:	2301      	movs	r3, #1
 800e514:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e516:	79fb      	ldrb	r3, [r7, #7]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00d      	beq.n	800e538 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e51c:	4814      	ldr	r0, [pc, #80]	; (800e570 <LoRaMacHandleMcpsRequest+0xd8>)
 800e51e:	f00b fbe5 	bl	8019cec <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e522:	4b11      	ldr	r3, [pc, #68]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e524:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e528:	f023 0320 	bic.w	r3, r3, #32
 800e52c:	4a0e      	ldr	r2, [pc, #56]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e52e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e532:	f002 f8b9 	bl	80106a8 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e536:	e013      	b.n	800e560 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e538:	79bb      	ldrb	r3, [r7, #6]
 800e53a:	f083 0301 	eor.w	r3, r3, #1
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00d      	beq.n	800e560 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e544:	4a08      	ldr	r2, [pc, #32]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e546:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e54a:	f36f 1345 	bfc	r3, #5, #1
 800e54e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e552:	4b05      	ldr	r3, [pc, #20]	; (800e568 <LoRaMacHandleMcpsRequest+0xd0>)
 800e554:	2200      	movs	r2, #0
 800e556:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e55a:	2000      	movs	r0, #0
 800e55c:	f000 f97e 	bl	800e85c <OnTxDelayedTimerEvent>
}
 800e560:	bf00      	nop
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	200011cc 	.word	0x200011cc
 800e56c:	200016d4 	.word	0x200016d4
 800e570:	20001534 	.word	0x20001534

0800e574 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e578:	4b1b      	ldr	r3, [pc, #108]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e57a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e57e:	f003 0304 	and.w	r3, r3, #4
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d02c      	beq.n	800e5e2 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e588:	2001      	movs	r0, #1
 800e58a:	f004 f9a5 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d012      	beq.n	800e5ba <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e594:	2001      	movs	r0, #1
 800e596:	f004 f941 	bl	801281c <LoRaMacConfirmQueueGetStatus>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d103      	bne.n	800e5a8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e5a0:	4b11      	ldr	r3, [pc, #68]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5a8:	4b0f      	ldr	r3, [pc, #60]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e5aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5ae:	f023 0302 	bic.w	r3, r3, #2
 800e5b2:	4a0d      	ldr	r2, [pc, #52]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e5b4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e5b8:	e013      	b.n	800e5e2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e5ba:	2005      	movs	r0, #5
 800e5bc:	f004 f98c 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d105      	bne.n	800e5d2 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e5c6:	2006      	movs	r0, #6
 800e5c8:	f004 f986 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800e5cc:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d007      	beq.n	800e5e2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e5d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5d8:	f023 0302 	bic.w	r3, r3, #2
 800e5dc:	4a02      	ldr	r2, [pc, #8]	; (800e5e8 <LoRaMacHandleMlmeRequest+0x74>)
 800e5de:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e5e2:	bf00      	nop
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200011cc 	.word	0x200011cc

0800e5ec <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e5f0:	200c      	movs	r0, #12
 800e5f2:	f004 f971 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d019      	beq.n	800e630 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e5fc:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e5fe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d111      	bne.n	800e630 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e60c:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e60e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e612:	f003 0304 	and.w	r3, r3, #4
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d009      	beq.n	800e630 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e61e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e622:	f023 0302 	bic.w	r3, r3, #2
 800e626:	4a04      	ldr	r2, [pc, #16]	; (800e638 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e628:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e62c:	2301      	movs	r3, #1
 800e62e:	e000      	b.n	800e632 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e630:	2300      	movs	r3, #0
}
 800e632:	4618      	mov	r0, r3
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	200011cc 	.word	0x200011cc

0800e63c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e640:	4b0d      	ldr	r3, [pc, #52]	; (800e678 <LoRaMacCheckForRxAbort+0x3c>)
 800e642:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00f      	beq.n	800e66e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e64e:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <LoRaMacCheckForRxAbort+0x3c>)
 800e650:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e658:	4a07      	ldr	r2, [pc, #28]	; (800e678 <LoRaMacCheckForRxAbort+0x3c>)
 800e65a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e65e:	4b06      	ldr	r3, [pc, #24]	; (800e678 <LoRaMacCheckForRxAbort+0x3c>)
 800e660:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e664:	f023 0302 	bic.w	r3, r3, #2
 800e668:	4a03      	ldr	r2, [pc, #12]	; (800e678 <LoRaMacCheckForRxAbort+0x3c>)
 800e66a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e66e:	bf00      	nop
 800e670:	46bd      	mov	sp, r7
 800e672:	bc80      	pop	{r7}
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	200011cc 	.word	0x200011cc

0800e67c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e684:	2300      	movs	r3, #0
 800e686:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e688:	2300      	movs	r3, #0
 800e68a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e68c:	4b50      	ldr	r3, [pc, #320]	; (800e7d0 <LoRaMacHandleNvm+0x154>)
 800e68e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e692:	2b00      	cmp	r3, #0
 800e694:	f040 8097 	bne.w	800e7c6 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2124      	movs	r1, #36	; 0x24
 800e69c:	4618      	mov	r0, r3
 800e69e:	f007 fecb 	bl	8016438 <Crc32>
 800e6a2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d006      	beq.n	800e6bc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e6b4:	89fb      	ldrh	r3, [r7, #14]
 800e6b6:	f043 0301 	orr.w	r3, r3, #1
 800e6ba:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3328      	adds	r3, #40	; 0x28
 800e6c0:	2114      	movs	r1, #20
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f007 feb8 	bl	8016438 <Crc32>
 800e6c8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d006      	beq.n	800e6e2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e6da:	89fb      	ldrh	r3, [r7, #14]
 800e6dc:	f043 0302 	orr.w	r3, r3, #2
 800e6e0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	3340      	adds	r3, #64	; 0x40
 800e6e6:	21d4      	movs	r1, #212	; 0xd4
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f007 fea5 	bl	8016438 <Crc32>
 800e6ee:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d007      	beq.n	800e70c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e704:	89fb      	ldrh	r3, [r7, #14]
 800e706:	f043 0304 	orr.w	r3, r3, #4
 800e70a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e712:	21bc      	movs	r1, #188	; 0xbc
 800e714:	4618      	mov	r0, r3
 800e716:	f007 fe8f 	bl	8016438 <Crc32>
 800e71a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	429a      	cmp	r2, r3
 800e726:	d007      	beq.n	800e738 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e730:	89fb      	ldrh	r3, [r7, #14]
 800e732:	f043 0308 	orr.w	r3, r3, #8
 800e736:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e73e:	2190      	movs	r1, #144	; 0x90
 800e740:	4618      	mov	r0, r3
 800e742:	f007 fe79 	bl	8016438 <Crc32>
 800e746:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d007      	beq.n	800e764 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e75c:	89fb      	ldrh	r3, [r7, #14]
 800e75e:	f043 0310 	orr.w	r3, r3, #16
 800e762:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e76a:	21c4      	movs	r1, #196	; 0xc4
 800e76c:	4618      	mov	r0, r3
 800e76e:	f007 fe63 	bl	8016438 <Crc32>
 800e772:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d007      	beq.n	800e790 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e788:	89fb      	ldrh	r3, [r7, #14]
 800e78a:	f043 0320 	orr.w	r3, r3, #32
 800e78e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e796:	2114      	movs	r1, #20
 800e798:	4618      	mov	r0, r3
 800e79a:	f007 fe4d 	bl	8016438 <Crc32>
 800e79e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d007      	beq.n	800e7bc <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e7b4:	89fb      	ldrh	r3, [r7, #14]
 800e7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ba:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e7bc:	89fb      	ldrh	r3, [r7, #14]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f001 ffae 	bl	8010720 <CallNvmDataChangeCallback>
 800e7c4:	e000      	b.n	800e7c8 <LoRaMacHandleNvm+0x14c>
        return;
 800e7c6:	bf00      	nop
}
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	200011cc 	.word	0x200011cc

0800e7d4 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e7de:	f7ff fd1b 	bl	800e218 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e7e2:	f003 fc36 	bl	8012052 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e7e6:	4b1b      	ldr	r3, [pc, #108]	; (800e854 <LoRaMacProcess+0x80>)
 800e7e8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7ec:	f003 0320 	and.w	r3, r3, #32
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d021      	beq.n	800e83a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	f7ff fd6c 	bl	800e2d4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e7fc:	f7ff ff1e 	bl	800e63c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e800:	f002 f81e 	bl	8010840 <IsRequestPending>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d006      	beq.n	800e818 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e80a:	f7ff feef 	bl	800e5ec <LoRaMacCheckForBeaconAcquisition>
 800e80e:	4603      	mov	r3, r0
 800e810:	461a      	mov	r2, r3
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	4313      	orrs	r3, r2
 800e816:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d103      	bne.n	800e826 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e81e:	f7ff fea9 	bl	800e574 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e822:	f7ff fe39 	bl	800e498 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e826:	f7ff fd65 	bl	800e2f4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e82a:	f7ff fdc5 	bl	800e3b8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e82e:	480a      	ldr	r0, [pc, #40]	; (800e858 <LoRaMacProcess+0x84>)
 800e830:	f7ff ff24 	bl	800e67c <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e834:	2001      	movs	r0, #1
 800e836:	f7ff fd4d 	bl	800e2d4 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e83a:	f7ff fdd7 	bl	800e3ec <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e83e:	4b05      	ldr	r3, [pc, #20]	; (800e854 <LoRaMacProcess+0x80>)
 800e840:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e844:	2b02      	cmp	r3, #2
 800e846:	d101      	bne.n	800e84c <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e848:	f001 fb7c 	bl	800ff44 <OpenContinuousRxCWindow>
    }
}
 800e84c:	bf00      	nop
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	200011cc 	.word	0x200011cc
 800e858:	200016d4 	.word	0x200016d4

0800e85c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e864:	4817      	ldr	r0, [pc, #92]	; (800e8c4 <OnTxDelayedTimerEvent+0x68>)
 800e866:	f00b fa41 	bl	8019cec <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e86a:	4b17      	ldr	r3, [pc, #92]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e86c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e870:	f023 0320 	bic.w	r3, r3, #32
 800e874:	4a14      	ldr	r2, [pc, #80]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e876:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e87a:	2001      	movs	r0, #1
 800e87c:	f001 f8fc 	bl	800fa78 <ScheduleTx>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d018      	beq.n	800e8b8 <OnTxDelayedTimerEvent+0x5c>
 800e886:	2b0b      	cmp	r3, #11
 800e888:	d016      	beq.n	800e8b8 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e88a:	4b10      	ldr	r3, [pc, #64]	; (800e8cc <OnTxDelayedTimerEvent+0x70>)
 800e88c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e890:	b2da      	uxtb	r2, r3
 800e892:	4b0d      	ldr	r3, [pc, #52]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e894:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e898:	4b0b      	ldr	r3, [pc, #44]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e89a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e8a0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e8a4:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <OnTxDelayedTimerEvent+0x6c>)
 800e8a6:	2209      	movs	r2, #9
 800e8a8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e8ac:	2009      	movs	r0, #9
 800e8ae:	f003 ffdf 	bl	8012870 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e8b2:	f001 fef9 	bl	80106a8 <StopRetransmission>
            break;
 800e8b6:	e000      	b.n	800e8ba <OnTxDelayedTimerEvent+0x5e>
            break;
 800e8b8:	bf00      	nop
        }
    }
}
 800e8ba:	bf00      	nop
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	20001534 	.word	0x20001534
 800e8c8:	200011cc 	.word	0x200011cc
 800e8cc:	200016d4 	.word	0x200016d4

0800e8d0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e8d8:	4b14      	ldr	r3, [pc, #80]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e8da:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e8de:	4b13      	ldr	r3, [pc, #76]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e8e0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e8e4:	4b12      	ldr	r3, [pc, #72]	; (800e930 <OnRxWindow1TimerEvent+0x60>)
 800e8e6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e8ea:	b25a      	sxtb	r2, r3
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e8ee:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e8f2:	4b0f      	ldr	r3, [pc, #60]	; (800e930 <OnRxWindow1TimerEvent+0x60>)
 800e8f4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e8f8:	4b0c      	ldr	r3, [pc, #48]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e8fa:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e8fe:	4b0c      	ldr	r3, [pc, #48]	; (800e930 <OnRxWindow1TimerEvent+0x60>)
 800e900:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e904:	4b09      	ldr	r3, [pc, #36]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e906:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e90a:	4b08      	ldr	r3, [pc, #32]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e90c:	2200      	movs	r2, #0
 800e90e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e912:	4b06      	ldr	r3, [pc, #24]	; (800e92c <OnRxWindow1TimerEvent+0x5c>)
 800e914:	2200      	movs	r2, #0
 800e916:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e91a:	4906      	ldr	r1, [pc, #24]	; (800e934 <OnRxWindow1TimerEvent+0x64>)
 800e91c:	4806      	ldr	r0, [pc, #24]	; (800e938 <OnRxWindow1TimerEvent+0x68>)
 800e91e:	f001 fae3 	bl	800fee8 <RxWindowSetup>
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	200011cc 	.word	0x200011cc
 800e930:	200016d4 	.word	0x200016d4
 800e934:	20001584 	.word	0x20001584
 800e938:	2000154c 	.word	0x2000154c

0800e93c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e944:	4b16      	ldr	r3, [pc, #88]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e946:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d023      	beq.n	800e996 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e94e:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e950:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e954:	4b12      	ldr	r3, [pc, #72]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e956:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e95a:	4b12      	ldr	r3, [pc, #72]	; (800e9a4 <OnRxWindow2TimerEvent+0x68>)
 800e95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e95e:	4a10      	ldr	r2, [pc, #64]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e960:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e964:	4b0f      	ldr	r3, [pc, #60]	; (800e9a4 <OnRxWindow2TimerEvent+0x68>)
 800e966:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e96a:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e96c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <OnRxWindow2TimerEvent+0x68>)
 800e972:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e976:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e978:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e97c:	4b08      	ldr	r3, [pc, #32]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e984:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <OnRxWindow2TimerEvent+0x64>)
 800e986:	2201      	movs	r2, #1
 800e988:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e98c:	4906      	ldr	r1, [pc, #24]	; (800e9a8 <OnRxWindow2TimerEvent+0x6c>)
 800e98e:	4807      	ldr	r0, [pc, #28]	; (800e9ac <OnRxWindow2TimerEvent+0x70>)
 800e990:	f001 faaa 	bl	800fee8 <RxWindowSetup>
 800e994:	e000      	b.n	800e998 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e996:	bf00      	nop
}
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	200011cc 	.word	0x200011cc
 800e9a4:	200016d4 	.word	0x200016d4
 800e9a8:	20001598 	.word	0x20001598
 800e9ac:	20001564 	.word	0x20001564

0800e9b0 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e9b8:	4815      	ldr	r0, [pc, #84]	; (800ea10 <OnAckTimeoutTimerEvent+0x60>)
 800e9ba:	f00b f997 	bl	8019cec <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e9be:	4b15      	ldr	r3, [pc, #84]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800e9c0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d003      	beq.n	800e9d0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e9c8:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e9d0:	4b11      	ldr	r3, [pc, #68]	; (800ea18 <OnAckTimeoutTimerEvent+0x68>)
 800e9d2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d106      	bne.n	800e9e8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e9da:	4a0e      	ldr	r2, [pc, #56]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800e9dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e9e0:	f043 0320 	orr.w	r3, r3, #32
 800e9e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800e9ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00a      	beq.n	800ea08 <OnAckTimeoutTimerEvent+0x58>
 800e9f2:	4b08      	ldr	r3, [pc, #32]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800e9f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9f8:	691b      	ldr	r3, [r3, #16]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d004      	beq.n	800ea08 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e9fe:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <OnAckTimeoutTimerEvent+0x64>)
 800ea00:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	4798      	blx	r3
    }
}
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	200015c4 	.word	0x200015c4
 800ea14:	200011cc 	.word	0x200011cc
 800ea18:	200016d4 	.word	0x200016d4

0800ea1c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60ba      	str	r2, [r7, #8]
 800ea24:	607b      	str	r3, [r7, #4]
 800ea26:	4603      	mov	r3, r0
 800ea28:	73fb      	strb	r3, [r7, #15]
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d005      	beq.n	800ea40 <GetFCntDown+0x24>
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <GetFCntDown+0x24>
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ea40:	230a      	movs	r3, #10
 800ea42:	e029      	b.n	800ea98 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d016      	beq.n	800ea78 <GetFCntDown+0x5c>
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d118      	bne.n	800ea80 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ea4e:	79bb      	ldrb	r3, [r7, #6]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d10d      	bne.n	800ea70 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ea54:	7bbb      	ldrb	r3, [r7, #14]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <GetFCntDown+0x44>
 800ea5a:	7bbb      	ldrb	r3, [r7, #14]
 800ea5c:	2b03      	cmp	r3, #3
 800ea5e:	d103      	bne.n	800ea68 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	2202      	movs	r2, #2
 800ea64:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ea66:	e00d      	b.n	800ea84 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	701a      	strb	r2, [r3, #0]
            break;
 800ea6e:	e009      	b.n	800ea84 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	2203      	movs	r2, #3
 800ea74:	701a      	strb	r2, [r3, #0]
            break;
 800ea76:	e005      	b.n	800ea84 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2204      	movs	r2, #4
 800ea7c:	701a      	strb	r2, [r3, #0]
            break;
 800ea7e:	e001      	b.n	800ea84 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ea80:	2305      	movs	r3, #5
 800ea82:	e009      	b.n	800ea98 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	7818      	ldrb	r0, [r3, #0]
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	89db      	ldrh	r3, [r3, #14]
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	8b39      	ldrh	r1, [r7, #24]
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	f004 fb17 	bl	80130c4 <LoRaMacCryptoGetFCntDown>
 800ea96:	4603      	mov	r3, r0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eaa0:	b5b0      	push	{r4, r5, r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eaae:	4b61      	ldr	r3, [pc, #388]	; (800ec34 <SwitchClass+0x194>)
 800eab0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	f000 80a5 	beq.w	800ec04 <SwitchClass+0x164>
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	f300 80b4 	bgt.w	800ec28 <SwitchClass+0x188>
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d003      	beq.n	800eacc <SwitchClass+0x2c>
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	f000 808f 	beq.w	800ebe8 <SwitchClass+0x148>
 800eaca:	e0ad      	b.n	800ec28 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eacc:	79fb      	ldrb	r3, [r7, #7]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d107      	bne.n	800eae2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ead2:	4b58      	ldr	r3, [pc, #352]	; (800ec34 <SwitchClass+0x194>)
 800ead4:	4a57      	ldr	r2, [pc, #348]	; (800ec34 <SwitchClass+0x194>)
 800ead6:	336c      	adds	r3, #108	; 0x6c
 800ead8:	3264      	adds	r2, #100	; 0x64
 800eada:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eade:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800eae2:	79fb      	ldrb	r3, [r7, #7]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d10c      	bne.n	800eb02 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800eae8:	79fb      	ldrb	r3, [r7, #7]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f003 fa53 	bl	8011f96 <LoRaMacClassBSwitchClass>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800eafa:	4a4e      	ldr	r2, [pc, #312]	; (800ec34 <SwitchClass+0x194>)
 800eafc:	79fb      	ldrb	r3, [r7, #7]
 800eafe:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800eb02:	79fb      	ldrb	r3, [r7, #7]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	f040 808a 	bne.w	800ec1e <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb0a:	4a4a      	ldr	r2, [pc, #296]	; (800ec34 <SwitchClass+0x194>)
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
 800eb0e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800eb12:	4a49      	ldr	r2, [pc, #292]	; (800ec38 <SwitchClass+0x198>)
 800eb14:	4b48      	ldr	r3, [pc, #288]	; (800ec38 <SwitchClass+0x198>)
 800eb16:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800eb1a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800eb1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb22:	682b      	ldr	r3, [r5, #0]
 800eb24:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eb26:	4b44      	ldr	r3, [pc, #272]	; (800ec38 <SwitchClass+0x198>)
 800eb28:	2202      	movs	r2, #2
 800eb2a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73bb      	strb	r3, [r7, #14]
 800eb32:	e049      	b.n	800ebc8 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800eb34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb38:	4a3e      	ldr	r2, [pc, #248]	; (800ec34 <SwitchClass+0x194>)
 800eb3a:	212c      	movs	r1, #44	; 0x2c
 800eb3c:	fb01 f303 	mul.w	r3, r1, r3
 800eb40:	4413      	add	r3, r2
 800eb42:	33d2      	adds	r3, #210	; 0xd2
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d038      	beq.n	800ebbc <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800eb4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb4e:	4a39      	ldr	r2, [pc, #228]	; (800ec34 <SwitchClass+0x194>)
 800eb50:	212c      	movs	r1, #44	; 0x2c
 800eb52:	fb01 f303 	mul.w	r3, r1, r3
 800eb56:	4413      	add	r3, r2
 800eb58:	33e8      	adds	r3, #232	; 0xe8
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a35      	ldr	r2, [pc, #212]	; (800ec34 <SwitchClass+0x194>)
 800eb5e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eb60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb64:	4a33      	ldr	r2, [pc, #204]	; (800ec34 <SwitchClass+0x194>)
 800eb66:	212c      	movs	r1, #44	; 0x2c
 800eb68:	fb01 f303 	mul.w	r3, r1, r3
 800eb6c:	4413      	add	r3, r2
 800eb6e:	33ec      	adds	r3, #236	; 0xec
 800eb70:	f993 3000 	ldrsb.w	r3, [r3]
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	4b2f      	ldr	r3, [pc, #188]	; (800ec34 <SwitchClass+0x194>)
 800eb78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eb7c:	4b2e      	ldr	r3, [pc, #184]	; (800ec38 <SwitchClass+0x198>)
 800eb7e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eb82:	4b2d      	ldr	r3, [pc, #180]	; (800ec38 <SwitchClass+0x198>)
 800eb84:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eb88:	4b2a      	ldr	r3, [pc, #168]	; (800ec34 <SwitchClass+0x194>)
 800eb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8c:	4a2a      	ldr	r2, [pc, #168]	; (800ec38 <SwitchClass+0x198>)
 800eb8e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb92:	4b28      	ldr	r3, [pc, #160]	; (800ec34 <SwitchClass+0x194>)
 800eb94:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <SwitchClass+0x198>)
 800eb9a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eb9e:	4b25      	ldr	r3, [pc, #148]	; (800ec34 <SwitchClass+0x194>)
 800eba0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eba4:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <SwitchClass+0x198>)
 800eba6:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ebaa:	4b23      	ldr	r3, [pc, #140]	; (800ec38 <SwitchClass+0x198>)
 800ebac:	2203      	movs	r2, #3
 800ebae:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ebb2:	4b21      	ldr	r3, [pc, #132]	; (800ec38 <SwitchClass+0x198>)
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ebba:	e009      	b.n	800ebd0 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	73bb      	strb	r3, [r7, #14]
 800ebc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	ddb1      	ble.n	800eb34 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ebd0:	4b19      	ldr	r3, [pc, #100]	; (800ec38 <SwitchClass+0x198>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ebd8:	4b18      	ldr	r3, [pc, #96]	; (800ec3c <SwitchClass+0x19c>)
 800ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebdc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ebde:	f001 f9b1 	bl	800ff44 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ebe6:	e01a      	b.n	800ec1e <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	4618      	mov	r0, r3
 800ebec:	f003 f9d3 	bl	8011f96 <LoRaMacClassBSwitchClass>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d113      	bne.n	800ec22 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebfa:	4a0e      	ldr	r2, [pc, #56]	; (800ec34 <SwitchClass+0x194>)
 800ebfc:	79fb      	ldrb	r3, [r7, #7]
 800ebfe:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ec02:	e00e      	b.n	800ec22 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10d      	bne.n	800ec26 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec0a:	4a0a      	ldr	r2, [pc, #40]	; (800ec34 <SwitchClass+0x194>)
 800ec0c:	79fb      	ldrb	r3, [r7, #7]
 800ec0e:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <SwitchClass+0x19c>)
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ec1c:	e003      	b.n	800ec26 <SwitchClass+0x186>
            break;
 800ec1e:	bf00      	nop
 800ec20:	e002      	b.n	800ec28 <SwitchClass+0x188>
            break;
 800ec22:	bf00      	nop
 800ec24:	e000      	b.n	800ec28 <SwitchClass+0x188>
            break;
 800ec26:	bf00      	nop
        }
    }

    return status;
 800ec28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bdb0      	pop	{r4, r5, r7, pc}
 800ec32:	bf00      	nop
 800ec34:	200016d4 	.word	0x200016d4
 800ec38:	200011cc 	.word	0x200011cc
 800ec3c:	0802078c 	.word	0x0802078c

0800ec40 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b086      	sub	sp, #24
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec4a:	4b10      	ldr	r3, [pc, #64]	; (800ec8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ec50:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ec56:	230d      	movs	r3, #13
 800ec58:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d001      	beq.n	800ec68 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec64:	230e      	movs	r3, #14
 800ec66:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec68:	4b08      	ldr	r3, [pc, #32]	; (800ec8c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec6e:	f107 0210 	add.w	r2, r7, #16
 800ec72:	4611      	mov	r1, r2
 800ec74:	4618      	mov	r0, r3
 800ec76:	f005 f8b3 	bl	8013de0 <RegionGetPhyParam>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	b2db      	uxtb	r3, r3
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	200016d4 	.word	0x200016d4

0800ec90 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	71fb      	strb	r3, [r7, #7]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	71bb      	strb	r3, [r7, #6]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ecaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7ff ffc6 	bl	800ec40 <GetMaxAppPayloadWithoutFOptsLength>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	797b      	ldrb	r3, [r7, #5]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ecc4:	89ba      	ldrh	r2, [r7, #12]
 800ecc6:	89fb      	ldrh	r3, [r7, #14]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d804      	bhi.n	800ecd6 <ValidatePayloadLength+0x46>
 800eccc:	89bb      	ldrh	r3, [r7, #12]
 800ecce:	2bff      	cmp	r3, #255	; 0xff
 800ecd0:	d801      	bhi.n	800ecd6 <ValidatePayloadLength+0x46>
    {
        return true;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e000      	b.n	800ecd8 <ValidatePayloadLength+0x48>
    }
    return false;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ece0:	b480      	push	{r7}
 800ece2:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ece4:	4a05      	ldr	r2, [pc, #20]	; (800ecfc <SetMlmeScheduleUplinkIndication+0x1c>)
 800ece6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ecea:	f043 0310 	orr.w	r3, r3, #16
 800ecee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ecf2:	bf00      	nop
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bc80      	pop	{r7}
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	200011cc 	.word	0x200011cc

0800ed00 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ed00:	b590      	push	{r4, r7, lr}
 800ed02:	b0a5      	sub	sp, #148	; 0x94
 800ed04:	af02      	add	r7, sp, #8
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	4608      	mov	r0, r1
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4603      	mov	r3, r0
 800ed10:	70fb      	strb	r3, [r7, #3]
 800ed12:	460b      	mov	r3, r1
 800ed14:	70bb      	strb	r3, [r7, #2]
 800ed16:	4613      	mov	r3, r2
 800ed18:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ed20:	2300      	movs	r3, #0
 800ed22:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ed26:	2300      	movs	r3, #0
 800ed28:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800ed2c:	f000 bc73 	b.w	800f616 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	4413      	add	r3, r2
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f003 fbf5 	bl	8012528 <LoRaMacCommandsGetCmdSize>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	461a      	mov	r2, r3
 800ed42:	78fb      	ldrb	r3, [r7, #3]
 800ed44:	441a      	add	r2, r3
 800ed46:	78bb      	ldrb	r3, [r7, #2]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	f300 846a 	bgt.w	800f622 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ed4e:	78fb      	ldrb	r3, [r7, #3]
 800ed50:	1c5a      	adds	r2, r3, #1
 800ed52:	70fa      	strb	r2, [r7, #3]
 800ed54:	461a      	mov	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4413      	add	r3, r2
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	3b02      	subs	r3, #2
 800ed5e:	2b11      	cmp	r3, #17
 800ed60:	f200 8461 	bhi.w	800f626 <ProcessMacCommands+0x926>
 800ed64:	a201      	add	r2, pc, #4	; (adr r2, 800ed6c <ProcessMacCommands+0x6c>)
 800ed66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6a:	bf00      	nop
 800ed6c:	0800edb5 	.word	0x0800edb5
 800ed70:	0800edf7 	.word	0x0800edf7
 800ed74:	0800ef13 	.word	0x0800ef13
 800ed78:	0800ef51 	.word	0x0800ef51
 800ed7c:	0800f041 	.word	0x0800f041
 800ed80:	0800f09d 	.word	0x0800f09d
 800ed84:	0800f159 	.word	0x0800f159
 800ed88:	0800f1b3 	.word	0x0800f1b3
 800ed8c:	0800f297 	.word	0x0800f297
 800ed90:	0800f627 	.word	0x0800f627
 800ed94:	0800f627 	.word	0x0800f627
 800ed98:	0800f341 	.word	0x0800f341
 800ed9c:	0800f627 	.word	0x0800f627
 800eda0:	0800f627 	.word	0x0800f627
 800eda4:	0800f457 	.word	0x0800f457
 800eda8:	0800f48b 	.word	0x0800f48b
 800edac:	0800f51b 	.word	0x0800f51b
 800edb0:	0800f591 	.word	0x0800f591
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800edb4:	2004      	movs	r0, #4
 800edb6:	f003 fd8f 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 842a 	beq.w	800f616 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800edc2:	2104      	movs	r1, #4
 800edc4:	2000      	movs	r0, #0
 800edc6:	f003 fcfb 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800edca:	78fb      	ldrb	r3, [r7, #3]
 800edcc:	1c5a      	adds	r2, r3, #1
 800edce:	70fa      	strb	r2, [r7, #3]
 800edd0:	461a      	mov	r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4413      	add	r3, r2
 800edd6:	781a      	ldrb	r2, [r3, #0]
 800edd8:	4bad      	ldr	r3, [pc, #692]	; (800f090 <ProcessMacCommands+0x390>)
 800edda:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800edde:	78fb      	ldrb	r3, [r7, #3]
 800ede0:	1c5a      	adds	r2, r3, #1
 800ede2:	70fa      	strb	r2, [r7, #3]
 800ede4:	461a      	mov	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4413      	add	r3, r2
 800edea:	781a      	ldrb	r2, [r3, #0]
 800edec:	4ba8      	ldr	r3, [pc, #672]	; (800f090 <ProcessMacCommands+0x390>)
 800edee:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800edf2:	f000 bc10 	b.w	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800ee0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee12:	f083 0301 	eor.w	r3, r3, #1
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d078      	beq.n	800ef0e <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ee22:	78fb      	ldrb	r3, [r7, #3]
 800ee24:	3b01      	subs	r3, #1
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	4413      	add	r3, r2
 800ee2a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ee2c:	78ba      	ldrb	r2, [r7, #2]
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	3301      	adds	r3, #1
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ee3c:	4b95      	ldr	r3, [pc, #596]	; (800f094 <ProcessMacCommands+0x394>)
 800ee3e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ee42:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ee46:	4b93      	ldr	r3, [pc, #588]	; (800f094 <ProcessMacCommands+0x394>)
 800ee48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ee4c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ee50:	4b90      	ldr	r3, [pc, #576]	; (800f094 <ProcessMacCommands+0x394>)
 800ee52:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ee56:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ee5a:	4b8e      	ldr	r3, [pc, #568]	; (800f094 <ProcessMacCommands+0x394>)
 800ee5c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ee60:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ee64:	4b8b      	ldr	r3, [pc, #556]	; (800f094 <ProcessMacCommands+0x394>)
 800ee66:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee6a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ee6e:	4b89      	ldr	r3, [pc, #548]	; (800f094 <ProcessMacCommands+0x394>)
 800ee70:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ee74:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ee76:	4b87      	ldr	r3, [pc, #540]	; (800f094 <ProcessMacCommands+0x394>)
 800ee78:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee7c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ee80:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ee84:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ee88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	4623      	mov	r3, r4
 800ee96:	f005 f860 	bl	8013f5a <RegionLinkAdrReq>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800eea0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eea4:	f003 0307 	and.w	r3, r3, #7
 800eea8:	2b07      	cmp	r3, #7
 800eeaa:	d10e      	bne.n	800eeca <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800eeac:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800eeb0:	4b78      	ldr	r3, [pc, #480]	; (800f094 <ProcessMacCommands+0x394>)
 800eeb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800eeb6:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800eeba:	4b76      	ldr	r3, [pc, #472]	; (800f094 <ProcessMacCommands+0x394>)
 800eebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800eec0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800eec4:	4b73      	ldr	r3, [pc, #460]	; (800f094 <ProcessMacCommands+0x394>)
 800eec6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800eeca:	2300      	movs	r3, #0
 800eecc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800eed0:	e00b      	b.n	800eeea <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800eed2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800eed6:	2201      	movs	r2, #1
 800eed8:	4619      	mov	r1, r3
 800eeda:	2003      	movs	r0, #3
 800eedc:	f003 f9d4 	bl	8012288 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800eee0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800eee4:	3301      	adds	r3, #1
 800eee6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800eeea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800eeee:	4a6a      	ldr	r2, [pc, #424]	; (800f098 <ProcessMacCommands+0x398>)
 800eef0:	fba2 2303 	umull	r2, r3, r2, r3
 800eef4:	089b      	lsrs	r3, r3, #2
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d3e8      	bcc.n	800eed2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ef00:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ef04:	78fb      	ldrb	r3, [r7, #3]
 800ef06:	4413      	add	r3, r2
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800ef0e:	bf00      	nop
 800ef10:	e381      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ef12:	78fb      	ldrb	r3, [r7, #3]
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	70fa      	strb	r2, [r7, #3]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 030f 	and.w	r3, r3, #15
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	4b5b      	ldr	r3, [pc, #364]	; (800f094 <ProcessMacCommands+0x394>)
 800ef28:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ef2c:	4b59      	ldr	r3, [pc, #356]	; (800f094 <ProcessMacCommands+0x394>)
 800ef2e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ef32:	461a      	mov	r2, r3
 800ef34:	2301      	movs	r3, #1
 800ef36:	4093      	lsls	r3, r2
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	4b56      	ldr	r3, [pc, #344]	; (800f094 <ProcessMacCommands+0x394>)
 800ef3c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ef40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef44:	2200      	movs	r2, #0
 800ef46:	4619      	mov	r1, r3
 800ef48:	2004      	movs	r0, #4
 800ef4a:	f003 f99d 	bl	8012288 <LoRaMacCommandsAddCmd>
                break;
 800ef4e:	e362      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800ef50:	2307      	movs	r3, #7
 800ef52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ef56:	78fb      	ldrb	r3, [r7, #3]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	091b      	lsrs	r3, r3, #4
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	b25b      	sxtb	r3, r3
 800ef64:	f003 0307 	and.w	r3, r3, #7
 800ef68:	b25b      	sxtb	r3, r3
 800ef6a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800ef6e:	78fb      	ldrb	r3, [r7, #3]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	4413      	add	r3, r2
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	b25b      	sxtb	r3, r3
 800ef78:	f003 030f 	and.w	r3, r3, #15
 800ef7c:	b25b      	sxtb	r3, r3
 800ef7e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800ef82:	78fb      	ldrb	r3, [r7, #3]
 800ef84:	3301      	adds	r3, #1
 800ef86:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800ef88:	78fb      	ldrb	r3, [r7, #3]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	70fa      	strb	r2, [r7, #3]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4413      	add	r3, r2
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ef98:	78fb      	ldrb	r3, [r7, #3]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	70fa      	strb	r2, [r7, #3]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	021a      	lsls	r2, r3, #8
 800efa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efaa:	4313      	orrs	r3, r2
 800efac:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800efae:	78fb      	ldrb	r3, [r7, #3]
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	70fa      	strb	r2, [r7, #3]
 800efb4:	461a      	mov	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	041a      	lsls	r2, r3, #16
 800efbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc0:	4313      	orrs	r3, r2
 800efc2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800efc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc6:	2264      	movs	r2, #100	; 0x64
 800efc8:	fb02 f303 	mul.w	r3, r2, r3
 800efcc:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800efce:	4b31      	ldr	r3, [pc, #196]	; (800f094 <ProcessMacCommands+0x394>)
 800efd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efd4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800efd8:	4611      	mov	r1, r2
 800efda:	4618      	mov	r0, r3
 800efdc:	f004 ffd7 	bl	8013f8e <RegionRxParamSetupReq>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800efe6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800efea:	f003 0307 	and.w	r3, r3, #7
 800efee:	2b07      	cmp	r3, #7
 800eff0:	d117      	bne.n	800f022 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800eff2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	4b26      	ldr	r3, [pc, #152]	; (800f094 <ProcessMacCommands+0x394>)
 800effa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800effe:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f002:	b2da      	uxtb	r2, r3
 800f004:	4b23      	ldr	r3, [pc, #140]	; (800f094 <ProcessMacCommands+0x394>)
 800f006:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f00c:	4a21      	ldr	r2, [pc, #132]	; (800f094 <ProcessMacCommands+0x394>)
 800f00e:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f012:	4a20      	ldr	r2, [pc, #128]	; (800f094 <ProcessMacCommands+0x394>)
 800f014:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f016:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	4b1d      	ldr	r3, [pc, #116]	; (800f094 <ProcessMacCommands+0x394>)
 800f01e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f022:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f026:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f02a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f02e:	2201      	movs	r2, #1
 800f030:	4619      	mov	r1, r3
 800f032:	2005      	movs	r0, #5
 800f034:	f003 f928 	bl	8012288 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f038:	f7ff fe52 	bl	800ece0 <SetMlmeScheduleUplinkIndication>
                break;
 800f03c:	bf00      	nop
 800f03e:	e2ea      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f040:	23ff      	movs	r3, #255	; 0xff
 800f042:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f046:	4b12      	ldr	r3, [pc, #72]	; (800f090 <ProcessMacCommands+0x390>)
 800f048:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00d      	beq.n	800f06c <ProcessMacCommands+0x36c>
 800f050:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <ProcessMacCommands+0x390>)
 800f052:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d007      	beq.n	800f06c <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f05c:	4b0c      	ldr	r3, [pc, #48]	; (800f090 <ProcessMacCommands+0x390>)
 800f05e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4798      	blx	r3
 800f066:	4603      	mov	r3, r0
 800f068:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f06c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f070:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f074:	787b      	ldrb	r3, [r7, #1]
 800f076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f080:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f084:	2202      	movs	r2, #2
 800f086:	4619      	mov	r1, r3
 800f088:	2006      	movs	r0, #6
 800f08a:	f003 f8fd 	bl	8012288 <LoRaMacCommandsAddCmd>
                break;
 800f08e:	e2c2      	b.n	800f616 <ProcessMacCommands+0x916>
 800f090:	200011cc 	.word	0x200011cc
 800f094:	200016d4 	.word	0x200016d4
 800f098:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f09c:	2303      	movs	r3, #3
 800f09e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f0a2:	78fb      	ldrb	r3, [r7, #3]
 800f0a4:	1c5a      	adds	r2, r3, #1
 800f0a6:	70fa      	strb	r2, [r7, #3]
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	b25b      	sxtb	r3, r3
 800f0b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f0b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0ba:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f0bc:	78fb      	ldrb	r3, [r7, #3]
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	70fa      	strb	r2, [r7, #3]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4413      	add	r3, r2
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f0cc:	78fb      	ldrb	r3, [r7, #3]
 800f0ce:	1c5a      	adds	r2, r3, #1
 800f0d0:	70fa      	strb	r2, [r7, #3]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	021a      	lsls	r2, r3, #8
 800f0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f0e2:	78fb      	ldrb	r3, [r7, #3]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	70fa      	strb	r2, [r7, #3]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	041a      	lsls	r2, r3, #16
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	2264      	movs	r2, #100	; 0x64
 800f0fc:	fb02 f303 	mul.w	r3, r2, r3
 800f100:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f106:	78fb      	ldrb	r3, [r7, #3]
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	70fa      	strb	r2, [r7, #3]
 800f10c:	461a      	mov	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4413      	add	r3, r2
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	b25b      	sxtb	r3, r3
 800f116:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f11a:	4b87      	ldr	r3, [pc, #540]	; (800f338 <ProcessMacCommands+0x638>)
 800f11c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f120:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f124:	4611      	mov	r1, r2
 800f126:	4618      	mov	r0, r3
 800f128:	f004 ff44 	bl	8013fb4 <RegionNewChannelReq>
 800f12c:	4603      	mov	r3, r0
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f134:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f138:	b25b      	sxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	db0a      	blt.n	800f154 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f13e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f142:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f146:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f14a:	2201      	movs	r2, #1
 800f14c:	4619      	mov	r1, r3
 800f14e:	2007      	movs	r0, #7
 800f150:	f003 f89a 	bl	8012288 <LoRaMacCommandsAddCmd>
                }
                break;
 800f154:	bf00      	nop
 800f156:	e25e      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f158:	78fb      	ldrb	r3, [r7, #3]
 800f15a:	1c5a      	adds	r2, r3, #1
 800f15c:	70fa      	strb	r2, [r7, #3]
 800f15e:	461a      	mov	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4413      	add	r3, r2
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 030f 	and.w	r3, r3, #15
 800f16a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f16e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f172:	2b00      	cmp	r3, #0
 800f174:	d104      	bne.n	800f180 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f176:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f17a:	3301      	adds	r3, #1
 800f17c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f180:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f188:	fb02 f303 	mul.w	r3, r2, r3
 800f18c:	461a      	mov	r2, r3
 800f18e:	4b6a      	ldr	r3, [pc, #424]	; (800f338 <ProcessMacCommands+0x638>)
 800f190:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f192:	4b69      	ldr	r3, [pc, #420]	; (800f338 <ProcessMacCommands+0x638>)
 800f194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f196:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f19a:	4a67      	ldr	r2, [pc, #412]	; (800f338 <ProcessMacCommands+0x638>)
 800f19c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f19e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	2008      	movs	r0, #8
 800f1a8:	f003 f86e 	bl	8012288 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f1ac:	f7ff fd98 	bl	800ece0 <SetMlmeScheduleUplinkIndication>
                break;
 800f1b0:	e231      	b.n	800f616 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f1b2:	78fb      	ldrb	r3, [r7, #3]
 800f1b4:	1c5a      	adds	r2, r3, #1
 800f1b6:	70fa      	strb	r2, [r7, #3]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4413      	add	r3, r2
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f1d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1d4:	f003 0320 	and.w	r3, r3, #32
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f1e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1e6:	f003 0310 	and.w	r3, r3, #16
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d002      	beq.n	800f1f4 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f1f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1f8:	f003 030f 	and.w	r3, r3, #15
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f202:	4b4d      	ldr	r3, [pc, #308]	; (800f338 <ProcessMacCommands+0x638>)
 800f204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f208:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f004 fee3 	bl	8013fda <RegionTxParamSetupReq>
 800f214:	4603      	mov	r3, r0
 800f216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21a:	d03a      	beq.n	800f292 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f21c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f220:	4b45      	ldr	r3, [pc, #276]	; (800f338 <ProcessMacCommands+0x638>)
 800f222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f226:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f22a:	4b43      	ldr	r3, [pc, #268]	; (800f338 <ProcessMacCommands+0x638>)
 800f22c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f230:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f234:	461a      	mov	r2, r3
 800f236:	4b41      	ldr	r3, [pc, #260]	; (800f33c <ProcessMacCommands+0x63c>)
 800f238:	5c9b      	ldrb	r3, [r3, r2]
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7f1 fd42 	bl	8000cc4 <__aeabi_ui2f>
 800f240:	4603      	mov	r3, r0
 800f242:	4a3d      	ldr	r2, [pc, #244]	; (800f338 <ProcessMacCommands+0x638>)
 800f244:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f246:	2302      	movs	r3, #2
 800f248:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f24c:	4b3a      	ldr	r3, [pc, #232]	; (800f338 <ProcessMacCommands+0x638>)
 800f24e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f252:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f256:	4b38      	ldr	r3, [pc, #224]	; (800f338 <ProcessMacCommands+0x638>)
 800f258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f25c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f260:	4611      	mov	r1, r2
 800f262:	4618      	mov	r0, r3
 800f264:	f004 fdbc 	bl	8013de0 <RegionGetPhyParam>
 800f268:	4603      	mov	r3, r0
 800f26a:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	b25a      	sxtb	r2, r3
 800f270:	4b31      	ldr	r3, [pc, #196]	; (800f338 <ProcessMacCommands+0x638>)
 800f272:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f276:	4293      	cmp	r3, r2
 800f278:	bfb8      	it	lt
 800f27a:	4613      	movlt	r3, r2
 800f27c:	b25a      	sxtb	r2, r3
 800f27e:	4b2e      	ldr	r3, [pc, #184]	; (800f338 <ProcessMacCommands+0x638>)
 800f280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f284:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f288:	2200      	movs	r2, #0
 800f28a:	4619      	mov	r1, r3
 800f28c:	2009      	movs	r0, #9
 800f28e:	f002 fffb 	bl	8012288 <LoRaMacCommandsAddCmd>
                }
                break;
 800f292:	bf00      	nop
 800f294:	e1bf      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f296:	2303      	movs	r3, #3
 800f298:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f29c:	78fb      	ldrb	r3, [r7, #3]
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	70fa      	strb	r2, [r7, #3]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f2ae:	78fb      	ldrb	r3, [r7, #3]
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	70fa      	strb	r2, [r7, #3]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2be:	78fb      	ldrb	r3, [r7, #3]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	70fa      	strb	r2, [r7, #3]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	021a      	lsls	r2, r3, #8
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	70fa      	strb	r2, [r7, #3]
 800f2da:	461a      	mov	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4413      	add	r3, r2
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	041a      	lsls	r2, r3, #16
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	2264      	movs	r2, #100	; 0x64
 800f2ee:	fb02 f303 	mul.w	r3, r2, r3
 800f2f2:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <ProcessMacCommands+0x638>)
 800f2f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2fa:	f107 0220 	add.w	r2, r7, #32
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f004 fe7d 	bl	8014000 <RegionDlChannelReq>
 800f306:	4603      	mov	r3, r0
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f30e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f312:	b25b      	sxtb	r3, r3
 800f314:	2b00      	cmp	r3, #0
 800f316:	db0c      	blt.n	800f332 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f318:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f31c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f320:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f324:	2201      	movs	r2, #1
 800f326:	4619      	mov	r1, r3
 800f328:	200a      	movs	r0, #10
 800f32a:	f002 ffad 	bl	8012288 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f32e:	f7ff fcd7 	bl	800ece0 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f332:	bf00      	nop
 800f334:	e16f      	b.n	800f616 <ProcessMacCommands+0x916>
 800f336:	bf00      	nop
 800f338:	200016d4 	.word	0x200016d4
 800f33c:	08020744 	.word	0x08020744
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f340:	200a      	movs	r0, #10
 800f342:	f003 fac9 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f000 8164 	beq.w	800f616 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f34e:	210a      	movs	r1, #10
 800f350:	2000      	movs	r0, #0
 800f352:	f003 fa35 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f356:	f107 0318 	add.w	r3, r7, #24
 800f35a:	2200      	movs	r2, #0
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f360:	f107 0310 	add.w	r3, r7, #16
 800f364:	2200      	movs	r2, #0
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f36a:	f107 0308 	add.w	r3, r7, #8
 800f36e:	2200      	movs	r2, #0
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f374:	78fb      	ldrb	r3, [r7, #3]
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	70fa      	strb	r2, [r7, #3]
 800f37a:	461a      	mov	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4413      	add	r3, r2
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f384:	78fb      	ldrb	r3, [r7, #3]
 800f386:	1c5a      	adds	r2, r3, #1
 800f388:	70fa      	strb	r2, [r7, #3]
 800f38a:	461a      	mov	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4413      	add	r3, r2
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	021a      	lsls	r2, r3, #8
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	4313      	orrs	r3, r2
 800f398:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f39a:	78fb      	ldrb	r3, [r7, #3]
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	70fa      	strb	r2, [r7, #3]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	041a      	lsls	r2, r3, #16
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	70fa      	strb	r2, [r7, #3]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	061a      	lsls	r2, r3, #24
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f3c6:	78fb      	ldrb	r3, [r7, #3]
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	70fa      	strb	r2, [r7, #3]
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	b21b      	sxth	r3, r3
 800f3d6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f3d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3e2:	fb02 f303 	mul.w	r3, r2, r3
 800f3e6:	121b      	asrs	r3, r3, #8
 800f3e8:	b21b      	sxth	r3, r3
 800f3ea:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f3ec:	f107 0310 	add.w	r3, r7, #16
 800f3f0:	f107 0218 	add.w	r2, r7, #24
 800f3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3f8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	4b8c      	ldr	r3, [pc, #560]	; (800f630 <ProcessMacCommands+0x930>)
 800f400:	4413      	add	r3, r2
 800f402:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f404:	f107 0308 	add.w	r3, r7, #8
 800f408:	4618      	mov	r0, r3
 800f40a:	f00a f981 	bl	8019710 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f40e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f412:	4b88      	ldr	r3, [pc, #544]	; (800f634 <ProcessMacCommands+0x934>)
 800f414:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f418:	9200      	str	r2, [sp, #0]
 800f41a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f41e:	f107 0210 	add.w	r2, r7, #16
 800f422:	ca06      	ldmia	r2, {r1, r2}
 800f424:	f00a f90e 	bl	8019644 <SysTimeSub>
 800f428:	f107 0010 	add.w	r0, r7, #16
 800f42c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f42e:	9300      	str	r3, [sp, #0]
 800f430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f432:	f107 0208 	add.w	r2, r7, #8
 800f436:	ca06      	ldmia	r2, {r1, r2}
 800f438:	f00a f8cb 	bl	80195d2 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f43c:	f107 0310 	add.w	r3, r7, #16
 800f440:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f444:	f00a f936 	bl	80196b4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f448:	f002 fde3 	bl	8012012 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f44c:	4b79      	ldr	r3, [pc, #484]	; (800f634 <ProcessMacCommands+0x934>)
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f454:	e0df      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f456:	200d      	movs	r0, #13
 800f458:	f003 fa3e 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 80d9 	beq.w	800f616 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f464:	210d      	movs	r1, #13
 800f466:	2000      	movs	r0, #0
 800f468:	f003 f9aa 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f46c:	4b71      	ldr	r3, [pc, #452]	; (800f634 <ProcessMacCommands+0x934>)
 800f46e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f472:	2b04      	cmp	r3, #4
 800f474:	f000 80cf 	beq.w	800f616 <ProcessMacCommands+0x916>
 800f478:	4b6e      	ldr	r3, [pc, #440]	; (800f634 <ProcessMacCommands+0x934>)
 800f47a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f47e:	2b05      	cmp	r3, #5
 800f480:	f000 80c9 	beq.w	800f616 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f484:	f002 fda6 	bl	8011fd4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f488:	e0c5      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f48a:	2303      	movs	r3, #3
 800f48c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f494:	78fb      	ldrb	r3, [r7, #3]
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	70fa      	strb	r2, [r7, #3]
 800f49a:	461a      	mov	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f4a4:	78fb      	ldrb	r3, [r7, #3]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	70fa      	strb	r2, [r7, #3]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	021b      	lsls	r3, r3, #8
 800f4b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f4ba:	78fb      	ldrb	r3, [r7, #3]
 800f4bc:	1c5a      	adds	r2, r3, #1
 800f4be:	70fa      	strb	r2, [r7, #3]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	041b      	lsls	r3, r3, #16
 800f4ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f4d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4d2:	2264      	movs	r2, #100	; 0x64
 800f4d4:	fb02 f303 	mul.w	r3, r2, r3
 800f4d8:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f4da:	78fb      	ldrb	r3, [r7, #3]
 800f4dc:	1c5a      	adds	r2, r3, #1
 800f4de:	70fa      	strb	r2, [r7, #3]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f003 030f 	and.w	r3, r3, #15
 800f4ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f4f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f4f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f002 fd72 	bl	8011fe0 <LoRaMacClassBPingSlotChannelReq>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f502:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f506:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f50a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f50e:	2201      	movs	r2, #1
 800f510:	4619      	mov	r1, r3
 800f512:	2011      	movs	r0, #17
 800f514:	f002 feb8 	bl	8012288 <LoRaMacCommandsAddCmd>
                break;
 800f518:	e07d      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f51a:	200e      	movs	r0, #14
 800f51c:	f003 f9dc 	bl	80128d8 <LoRaMacConfirmQueueIsCmdActive>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d077      	beq.n	800f616 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f526:	210e      	movs	r1, #14
 800f528:	2000      	movs	r0, #0
 800f52a:	f003 f949 	bl	80127c0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f53a:	78fb      	ldrb	r3, [r7, #3]
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	70fa      	strb	r2, [r7, #3]
 800f540:	461a      	mov	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	4413      	add	r3, r2
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f54c:	78fb      	ldrb	r3, [r7, #3]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	70fa      	strb	r2, [r7, #3]
 800f552:	461a      	mov	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4413      	add	r3, r2
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	021b      	lsls	r3, r3, #8
 800f55c:	b21a      	sxth	r2, r3
 800f55e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f562:	4313      	orrs	r3, r2
 800f564:	b21b      	sxth	r3, r3
 800f566:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f56a:	78fb      	ldrb	r3, [r7, #3]
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	70fa      	strb	r2, [r7, #3]
 800f570:	461a      	mov	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4413      	add	r3, r2
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f57c:	4b2e      	ldr	r3, [pc, #184]	; (800f638 <ProcessMacCommands+0x938>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f584:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f588:	4618      	mov	r0, r3
 800f58a:	f002 fd35 	bl	8011ff8 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f58e:	e042      	b.n	800f616 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f590:	2300      	movs	r3, #0
 800f592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f596:	78fb      	ldrb	r3, [r7, #3]
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	70fa      	strb	r2, [r7, #3]
 800f59c:	461a      	mov	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	70fa      	strb	r2, [r7, #3]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	021b      	lsls	r3, r3, #8
 800f5b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f5c2:	78fb      	ldrb	r3, [r7, #3]
 800f5c4:	1c5a      	adds	r2, r3, #1
 800f5c6:	70fa      	strb	r2, [r7, #3]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	041b      	lsls	r3, r3, #16
 800f5d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f5dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5e0:	2264      	movs	r2, #100	; 0x64
 800f5e2:	fb02 f303 	mul.w	r3, r2, r3
 800f5e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f5ea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f5ee:	f002 fd16 	bl	801201e <LoRaMacClassBBeaconFreqReq>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d003      	beq.n	800f600 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f5fe:	e002      	b.n	800f606 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f606:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f60a:	2201      	movs	r2, #1
 800f60c:	4619      	mov	r1, r3
 800f60e:	2013      	movs	r0, #19
 800f610:	f002 fe3a 	bl	8012288 <LoRaMacCommandsAddCmd>
                }
                break;
 800f614:	bf00      	nop
    while( macIndex < commandsSize )
 800f616:	78fa      	ldrb	r2, [r7, #3]
 800f618:	78bb      	ldrb	r3, [r7, #2]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	f4ff ab88 	bcc.w	800ed30 <ProcessMacCommands+0x30>
 800f620:	e002      	b.n	800f628 <ProcessMacCommands+0x928>
            return;
 800f622:	bf00      	nop
 800f624:	e000      	b.n	800f628 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f626:	bf00      	nop
        }
    }
}
 800f628:	378c      	adds	r7, #140	; 0x8c
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd90      	pop	{r4, r7, pc}
 800f62e:	bf00      	nop
 800f630:	12d53d80 	.word	0x12d53d80
 800f634:	200011cc 	.word	0x200011cc
 800f638:	20001a28 	.word	0x20001a28

0800f63c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08e      	sub	sp, #56	; 0x38
 800f640:	af02      	add	r7, sp, #8
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	607a      	str	r2, [r7, #4]
 800f646:	461a      	mov	r2, r3
 800f648:	460b      	mov	r3, r1
 800f64a:	72fb      	strb	r3, [r7, #11]
 800f64c:	4613      	mov	r3, r2
 800f64e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f650:	2303      	movs	r3, #3
 800f652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f656:	4b65      	ldr	r3, [pc, #404]	; (800f7ec <Send+0x1b0>)
 800f658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f65c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f660:	4b62      	ldr	r3, [pc, #392]	; (800f7ec <Send+0x1b0>)
 800f662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f666:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f66a:	4b60      	ldr	r3, [pc, #384]	; (800f7ec <Send+0x1b0>)
 800f66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f670:	4b5e      	ldr	r3, [pc, #376]	; (800f7ec <Send+0x1b0>)
 800f672:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f67a:	2307      	movs	r3, #7
 800f67c:	e0b1      	b.n	800f7e2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f67e:	4b5b      	ldr	r3, [pc, #364]	; (800f7ec <Send+0x1b0>)
 800f680:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f684:	2b00      	cmp	r3, #0
 800f686:	d102      	bne.n	800f68e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f688:	4b58      	ldr	r3, [pc, #352]	; (800f7ec <Send+0x1b0>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f694:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f698:	f36f 0303 	bfc	r3, #0, #4
 800f69c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f6a0:	4b52      	ldr	r3, [pc, #328]	; (800f7ec <Send+0x1b0>)
 800f6a2:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f6a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6aa:	f362 13c7 	bfi	r3, r2, #7, #1
 800f6ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f6b2:	4b4e      	ldr	r3, [pc, #312]	; (800f7ec <Send+0x1b0>)
 800f6b4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d106      	bne.n	800f6ca <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f6bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6c0:	f043 0310 	orr.w	r3, r3, #16
 800f6c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f6c8:	e005      	b.n	800f6d6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f6ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6ce:	f36f 1304 	bfc	r3, #4, #1
 800f6d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f6d6:	4b45      	ldr	r3, [pc, #276]	; (800f7ec <Send+0x1b0>)
 800f6d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d005      	beq.n	800f6ec <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f6e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6e4:	f043 0320 	orr.w	r3, r3, #32
 800f6e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f6ec:	4b3f      	ldr	r3, [pc, #252]	; (800f7ec <Send+0x1b0>)
 800f6ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f6f2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f6f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	bf14      	ite	ne
 800f706:	2301      	movne	r3, #1
 800f708:	2300      	moveq	r3, #0
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <Send+0x1b0>)
 800f710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f712:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f714:	4b36      	ldr	r3, [pc, #216]	; (800f7f0 <Send+0x1b4>)
 800f716:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f71a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f71c:	4b34      	ldr	r3, [pc, #208]	; (800f7f0 <Send+0x1b4>)
 800f71e:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f722:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f724:	4b31      	ldr	r3, [pc, #196]	; (800f7ec <Send+0x1b0>)
 800f726:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f72a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f72e:	4b2f      	ldr	r3, [pc, #188]	; (800f7ec <Send+0x1b0>)
 800f730:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f734:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f738:	4b2c      	ldr	r3, [pc, #176]	; (800f7ec <Send+0x1b0>)
 800f73a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f73e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f742:	4b2a      	ldr	r3, [pc, #168]	; (800f7ec <Send+0x1b0>)
 800f744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f74c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f750:	f107 0014 	add.w	r0, r7, #20
 800f754:	4a27      	ldr	r2, [pc, #156]	; (800f7f4 <Send+0x1b8>)
 800f756:	4928      	ldr	r1, [pc, #160]	; (800f7f8 <Send+0x1bc>)
 800f758:	f002 fb7c 	bl	8011e54 <LoRaMacAdrCalcNext>
 800f75c:	4603      	mov	r3, r0
 800f75e:	461a      	mov	r2, r3
 800f760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f764:	f362 1386 	bfi	r3, r2, #6, #1
 800f768:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f76c:	7afa      	ldrb	r2, [r7, #11]
 800f76e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f772:	893b      	ldrh	r3, [r7, #8]
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f000 fc21 	bl	800ffc0 <PrepareFrame>
 800f77e:	4603      	mov	r3, r0
 800f780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d003      	beq.n	800f794 <Send+0x158>
 800f78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f790:	2b0a      	cmp	r3, #10
 800f792:	d107      	bne.n	800f7a4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f794:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 f96d 	bl	800fa78 <ScheduleTx>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f7a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00a      	beq.n	800f7c2 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f7ac:	4a0f      	ldr	r2, [pc, #60]	; (800f7ec <Send+0x1b0>)
 800f7ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f7b2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f7b6:	4a0d      	ldr	r2, [pc, #52]	; (800f7ec <Send+0x1b0>)
 800f7b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7bc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f7c0:	e00d      	b.n	800f7de <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f7c2:	4b0a      	ldr	r3, [pc, #40]	; (800f7ec <Send+0x1b0>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	4a07      	ldr	r2, [pc, #28]	; (800f7ec <Send+0x1b0>)
 800f7ce:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f7d0:	f002 fdd2 	bl	8012378 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f7da:	2313      	movs	r3, #19
 800f7dc:	e001      	b.n	800f7e2 <Send+0x1a6>
        }
    }
    return status;
 800f7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3730      	adds	r7, #48	; 0x30
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	200016d4 	.word	0x200016d4
 800f7f0:	200011cc 	.word	0x200011cc
 800f7f4:	2000170c 	.word	0x2000170c
 800f7f8:	2000170d 	.word	0x2000170d

0800f7fc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	4603      	mov	r3, r0
 800f804:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f80a:	2300      	movs	r3, #0
 800f80c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f80e:	2301      	movs	r3, #1
 800f810:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f812:	79fb      	ldrb	r3, [r7, #7]
 800f814:	2bff      	cmp	r3, #255	; 0xff
 800f816:	d129      	bne.n	800f86c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f818:	2000      	movs	r0, #0
 800f81a:	f7ff f941 	bl	800eaa0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f81e:	4b1a      	ldr	r3, [pc, #104]	; (800f888 <SendReJoinReq+0x8c>)
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f826:	4b18      	ldr	r3, [pc, #96]	; (800f888 <SendReJoinReq+0x8c>)
 800f828:	4a18      	ldr	r2, [pc, #96]	; (800f88c <SendReJoinReq+0x90>)
 800f82a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f82e:	4b16      	ldr	r3, [pc, #88]	; (800f888 <SendReJoinReq+0x8c>)
 800f830:	22ff      	movs	r2, #255	; 0xff
 800f832:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f836:	7b3b      	ldrb	r3, [r7, #12]
 800f838:	f36f 1347 	bfc	r3, #5, #3
 800f83c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f83e:	7b3a      	ldrb	r2, [r7, #12]
 800f840:	4b11      	ldr	r3, [pc, #68]	; (800f888 <SendReJoinReq+0x8c>)
 800f842:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f846:	f7fc fd2b 	bl	800c2a0 <SecureElementGetJoinEui>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2208      	movs	r2, #8
 800f84e:	4619      	mov	r1, r3
 800f850:	480f      	ldr	r0, [pc, #60]	; (800f890 <SendReJoinReq+0x94>)
 800f852:	f006 fd9c 	bl	801638e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f856:	f7fc fd01 	bl	800c25c <SecureElementGetDevEui>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2208      	movs	r2, #8
 800f85e:	4619      	mov	r1, r3
 800f860:	480c      	ldr	r0, [pc, #48]	; (800f894 <SendReJoinReq+0x98>)
 800f862:	f006 fd94 	bl	801638e <memcpy1>

            allowDelayedTx = false;
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]

            break;
 800f86a:	e002      	b.n	800f872 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f86c:	2302      	movs	r3, #2
 800f86e:	73bb      	strb	r3, [r7, #14]
            break;
 800f870:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f872:	7bfb      	ldrb	r3, [r7, #15]
 800f874:	4618      	mov	r0, r3
 800f876:	f000 f8ff 	bl	800fa78 <ScheduleTx>
 800f87a:	4603      	mov	r3, r0
 800f87c:	73bb      	strb	r3, [r7, #14]
    return status;
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	200011cc 	.word	0x200011cc
 800f88c:	200011ce 	.word	0x200011ce
 800f890:	200012da 	.word	0x200012da
 800f894:	200012e2 	.word	0x200012e2

0800f898 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f89c:	f002 fb49 	bl	8011f32 <LoRaMacClassBIsBeaconExpected>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f8a6:	230e      	movs	r3, #14
 800f8a8:	e013      	b.n	800f8d2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <CheckForClassBCollision+0x40>)
 800f8ac:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d10d      	bne.n	800f8d0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f8b4:	f002 fb44 	bl	8011f40 <LoRaMacClassBIsPingExpected>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f8be:	230f      	movs	r3, #15
 800f8c0:	e007      	b.n	800f8d2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f8c2:	f002 fb44 	bl	8011f4e <LoRaMacClassBIsMulticastExpected>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f8cc:	230f      	movs	r3, #15
 800f8ce:	e000      	b.n	800f8d2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	200016d4 	.word	0x200016d4

0800f8dc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f8dc:	b590      	push	{r4, r7, lr}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8e2:	4b2d      	ldr	r3, [pc, #180]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f8e4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f8e8:	4b2b      	ldr	r3, [pc, #172]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f8ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f8ee:	4b2a      	ldr	r3, [pc, #168]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f8f0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f8f4:	4b28      	ldr	r3, [pc, #160]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f8f6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f8fa:	4b27      	ldr	r3, [pc, #156]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f8fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f900:	b25b      	sxtb	r3, r3
 800f902:	f004 fbd4 	bl	80140ae <RegionApplyDrOffset>
 800f906:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f908:	b259      	sxtb	r1, r3
 800f90a:	4b23      	ldr	r3, [pc, #140]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f90c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f910:	4b21      	ldr	r3, [pc, #132]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f914:	4821      	ldr	r0, [pc, #132]	; (800f99c <ComputeRxWindowParameters+0xc0>)
 800f916:	9000      	str	r0, [sp, #0]
 800f918:	4620      	mov	r0, r4
 800f91a:	f004 fad8 	bl	8013ece <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f91e:	4b1e      	ldr	r3, [pc, #120]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f920:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f924:	4b1c      	ldr	r3, [pc, #112]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f926:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f92a:	b259      	sxtb	r1, r3
 800f92c:	4b1a      	ldr	r3, [pc, #104]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f92e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f932:	4b19      	ldr	r3, [pc, #100]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f936:	4c1a      	ldr	r4, [pc, #104]	; (800f9a0 <ComputeRxWindowParameters+0xc4>)
 800f938:	9400      	str	r4, [sp, #0]
 800f93a:	f004 fac8 	bl	8013ece <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f93e:	4b16      	ldr	r3, [pc, #88]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f942:	4a18      	ldr	r2, [pc, #96]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f944:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f948:	4413      	add	r3, r2
 800f94a:	4a16      	ldr	r2, [pc, #88]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f94c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f950:	4b11      	ldr	r3, [pc, #68]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f954:	4a13      	ldr	r2, [pc, #76]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f956:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f95a:	4413      	add	r3, r2
 800f95c:	4a11      	ldr	r2, [pc, #68]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f95e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f962:	4b0d      	ldr	r3, [pc, #52]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f964:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d111      	bne.n	800f990 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f96c:	4b0a      	ldr	r3, [pc, #40]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f970:	4a0c      	ldr	r2, [pc, #48]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f972:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f976:	4413      	add	r3, r2
 800f978:	4a0a      	ldr	r2, [pc, #40]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f97a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f97e:	4b06      	ldr	r3, [pc, #24]	; (800f998 <ComputeRxWindowParameters+0xbc>)
 800f980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f982:	4a08      	ldr	r2, [pc, #32]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f984:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f988:	4413      	add	r3, r2
 800f98a:	4a06      	ldr	r2, [pc, #24]	; (800f9a4 <ComputeRxWindowParameters+0xc8>)
 800f98c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800f990:	bf00      	nop
 800f992:	3704      	adds	r7, #4
 800f994:	46bd      	mov	sp, r7
 800f996:	bd90      	pop	{r4, r7, pc}
 800f998:	200016d4 	.word	0x200016d4
 800f99c:	20001584 	.word	0x20001584
 800f9a0:	20001598 	.word	0x20001598
 800f9a4:	200011cc 	.word	0x200011cc

0800f9a8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f9b2:	4b13      	ldr	r3, [pc, #76]	; (800fa00 <VerifyTxFrame+0x58>)
 800f9b4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01b      	beq.n	800f9f4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f9bc:	1d3b      	adds	r3, r7, #4
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f002 fd20 	bl	8012404 <LoRaMacCommandsGetSizeSerializedCmds>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f9ca:	2313      	movs	r3, #19
 800f9cc:	e013      	b.n	800f9f6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f9ce:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <VerifyTxFrame+0x5c>)
 800f9d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f9d4:	4a0a      	ldr	r2, [pc, #40]	; (800fa00 <VerifyTxFrame+0x58>)
 800f9d6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	b2d2      	uxtb	r2, r2
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff f956 	bl	800ec90 <ValidatePayloadLength>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f083 0301 	eor.w	r3, r3, #1
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	e000      	b.n	800f9f6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	200016d4 	.word	0x200016d4
 800fa04:	200011cc 	.word	0x200011cc

0800fa08 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fa0e:	4b18      	ldr	r3, [pc, #96]	; (800fa70 <SerializeTxFrame+0x68>)
 800fa10:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <SerializeTxFrame+0x16>
 800fa18:	2b04      	cmp	r3, #4
 800fa1a:	d011      	beq.n	800fa40 <SerializeTxFrame+0x38>
 800fa1c:	e021      	b.n	800fa62 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fa1e:	4815      	ldr	r0, [pc, #84]	; (800fa74 <SerializeTxFrame+0x6c>)
 800fa20:	f004 f855 	bl	8013ace <LoRaMacSerializerJoinRequest>
 800fa24:	4603      	mov	r3, r0
 800fa26:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d001      	beq.n	800fa32 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa2e:	2311      	movs	r3, #17
 800fa30:	e01a      	b.n	800fa68 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fa32:	4b0f      	ldr	r3, [pc, #60]	; (800fa70 <SerializeTxFrame+0x68>)
 800fa34:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	4b0d      	ldr	r3, [pc, #52]	; (800fa70 <SerializeTxFrame+0x68>)
 800fa3c:	801a      	strh	r2, [r3, #0]
            break;
 800fa3e:	e012      	b.n	800fa66 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fa40:	480c      	ldr	r0, [pc, #48]	; (800fa74 <SerializeTxFrame+0x6c>)
 800fa42:	f004 f8c6 	bl	8013bd2 <LoRaMacSerializerData>
 800fa46:	4603      	mov	r3, r0
 800fa48:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fa4a:	79fb      	ldrb	r3, [r7, #7]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa50:	2311      	movs	r3, #17
 800fa52:	e009      	b.n	800fa68 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fa54:	4b06      	ldr	r3, [pc, #24]	; (800fa70 <SerializeTxFrame+0x68>)
 800fa56:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	4b04      	ldr	r3, [pc, #16]	; (800fa70 <SerializeTxFrame+0x68>)
 800fa5e:	801a      	strh	r2, [r3, #0]
            break;
 800fa60:	e001      	b.n	800fa66 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fa62:	2303      	movs	r3, #3
 800fa64:	e000      	b.n	800fa68 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fa66:	2300      	movs	r3, #0
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	200011cc 	.word	0x200011cc
 800fa74:	200012d4 	.word	0x200012d4

0800fa78 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b090      	sub	sp, #64	; 0x40
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	4603      	mov	r3, r0
 800fa80:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa82:	2303      	movs	r3, #3
 800fa84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fa88:	f7ff ff06 	bl	800f898 <CheckForClassBCollision>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fa92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d002      	beq.n	800faa0 <ScheduleTx+0x28>
    {
        return status;
 800fa9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa9e:	e08f      	b.n	800fbc0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800faa0:	f000 f8fa 	bl	800fc98 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800faa4:	f7ff ffb0 	bl	800fa08 <SerializeTxFrame>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800faae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <ScheduleTx+0x44>
    {
        return status;
 800fab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faba:	e081      	b.n	800fbc0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fabc:	4b42      	ldr	r3, [pc, #264]	; (800fbc8 <ScheduleTx+0x150>)
 800fabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fac0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fac2:	4b41      	ldr	r3, [pc, #260]	; (800fbc8 <ScheduleTx+0x150>)
 800fac4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fac8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800faca:	4b3f      	ldr	r3, [pc, #252]	; (800fbc8 <ScheduleTx+0x150>)
 800facc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fad0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fad6:	4618      	mov	r0, r3
 800fad8:	f009 fe52 	bl	8019780 <SysTimeGetMcuTime>
 800fadc:	4638      	mov	r0, r7
 800fade:	4b3a      	ldr	r3, [pc, #232]	; (800fbc8 <ScheduleTx+0x150>)
 800fae0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fae4:	9200      	str	r2, [sp, #0]
 800fae6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800faea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800faee:	ca06      	ldmia	r2, {r1, r2}
 800faf0:	f009 fda8 	bl	8019644 <SysTimeSub>
 800faf4:	f107 0320 	add.w	r3, r7, #32
 800faf8:	463a      	mov	r2, r7
 800fafa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fafe:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fb02:	4b31      	ldr	r3, [pc, #196]	; (800fbc8 <ScheduleTx+0x150>)
 800fb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb06:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fb12:	4b2e      	ldr	r3, [pc, #184]	; (800fbcc <ScheduleTx+0x154>)
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fb18:	4b2b      	ldr	r3, [pc, #172]	; (800fbc8 <ScheduleTx+0x150>)
 800fb1a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d104      	bne.n	800fb2c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fb22:	2301      	movs	r3, #1
 800fb24:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fb2c:	4b26      	ldr	r3, [pc, #152]	; (800fbc8 <ScheduleTx+0x150>)
 800fb2e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fb32:	f107 0114 	add.w	r1, r7, #20
 800fb36:	4b26      	ldr	r3, [pc, #152]	; (800fbd0 <ScheduleTx+0x158>)
 800fb38:	9300      	str	r3, [sp, #0]
 800fb3a:	4b26      	ldr	r3, [pc, #152]	; (800fbd4 <ScheduleTx+0x15c>)
 800fb3c:	4a26      	ldr	r2, [pc, #152]	; (800fbd8 <ScheduleTx+0x160>)
 800fb3e:	f004 fa8c 	bl	801405a <RegionNextChannel>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d022      	beq.n	800fb96 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fb50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb54:	2b0b      	cmp	r3, #11
 800fb56:	d11b      	bne.n	800fb90 <ScheduleTx+0x118>
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d018      	beq.n	800fb90 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fb5e:	4b1b      	ldr	r3, [pc, #108]	; (800fbcc <ScheduleTx+0x154>)
 800fb60:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d011      	beq.n	800fb8c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fb68:	4b18      	ldr	r3, [pc, #96]	; (800fbcc <ScheduleTx+0x154>)
 800fb6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb6e:	f043 0320 	orr.w	r3, r3, #32
 800fb72:	4a16      	ldr	r2, [pc, #88]	; (800fbcc <ScheduleTx+0x154>)
 800fb74:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fb78:	4b14      	ldr	r3, [pc, #80]	; (800fbcc <ScheduleTx+0x154>)
 800fb7a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fb7e:	4619      	mov	r1, r3
 800fb80:	4816      	ldr	r0, [pc, #88]	; (800fbdc <ScheduleTx+0x164>)
 800fb82:	f00a f923 	bl	8019dcc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fb86:	4815      	ldr	r0, [pc, #84]	; (800fbdc <ScheduleTx+0x164>)
 800fb88:	f00a f842 	bl	8019c10 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e017      	b.n	800fbc0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fb90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb94:	e014      	b.n	800fbc0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fb96:	f7ff fea1 	bl	800f8dc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fb9a:	f7ff ff05 	bl	800f9a8 <VerifyTxFrame>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <ScheduleTx+0x13a>
    {
        return status;
 800fbac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbb0:	e006      	b.n	800fbc0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fbb2:	4b06      	ldr	r3, [pc, #24]	; (800fbcc <ScheduleTx+0x154>)
 800fbb4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f000 fb1d 	bl	80101f8 <SendFrameOnChannel>
 800fbbe:	4603      	mov	r3, r0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3738      	adds	r7, #56	; 0x38
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	200016d4 	.word	0x200016d4
 800fbcc:	200011cc 	.word	0x200011cc
 800fbd0:	20001704 	.word	0x20001704
 800fbd4:	20001650 	.word	0x20001650
 800fbd8:	200015e1 	.word	0x200015e1
 800fbdc:	20001534 	.word	0x20001534

0800fbe0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	460a      	mov	r2, r1
 800fbea:	71fb      	strb	r3, [r7, #7]
 800fbec:	4613      	mov	r3, r2
 800fbee:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fbf0:	2313      	movs	r3, #19
 800fbf2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fbf8:	4b25      	ldr	r3, [pc, #148]	; (800fc90 <SecureFrame+0xb0>)
 800fbfa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <SecureFrame+0x28>
 800fc02:	2b04      	cmp	r3, #4
 800fc04:	d011      	beq.n	800fc2a <SecureFrame+0x4a>
 800fc06:	e03b      	b.n	800fc80 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fc08:	4822      	ldr	r0, [pc, #136]	; (800fc94 <SecureFrame+0xb4>)
 800fc0a:	f003 fb29 	bl	8013260 <LoRaMacCryptoPrepareJoinRequest>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fc12:	7bfb      	ldrb	r3, [r7, #15]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc18:	2311      	movs	r3, #17
 800fc1a:	e034      	b.n	800fc86 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fc1c:	4b1c      	ldr	r3, [pc, #112]	; (800fc90 <SecureFrame+0xb0>)
 800fc1e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	4b1a      	ldr	r3, [pc, #104]	; (800fc90 <SecureFrame+0xb0>)
 800fc26:	801a      	strh	r2, [r3, #0]
            break;
 800fc28:	e02c      	b.n	800fc84 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fc2a:	f107 0308 	add.w	r3, r7, #8
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f003 fa30 	bl	8013094 <LoRaMacCryptoGetFCntUp>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d001      	beq.n	800fc3e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fc3a:	2312      	movs	r3, #18
 800fc3c:	e023      	b.n	800fc86 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fc3e:	4b14      	ldr	r3, [pc, #80]	; (800fc90 <SecureFrame+0xb0>)
 800fc40:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d104      	bne.n	800fc52 <SecureFrame+0x72>
 800fc48:	4b11      	ldr	r3, [pc, #68]	; (800fc90 <SecureFrame+0xb0>)
 800fc4a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d902      	bls.n	800fc58 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	3b01      	subs	r3, #1
 800fc56:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fc58:	68b8      	ldr	r0, [r7, #8]
 800fc5a:	79ba      	ldrb	r2, [r7, #6]
 800fc5c:	79f9      	ldrb	r1, [r7, #7]
 800fc5e:	4b0d      	ldr	r3, [pc, #52]	; (800fc94 <SecureFrame+0xb4>)
 800fc60:	f003 fc16 	bl	8013490 <LoRaMacCryptoSecureMessage>
 800fc64:	4603      	mov	r3, r0
 800fc66:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fc68:	7bfb      	ldrb	r3, [r7, #15]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d001      	beq.n	800fc72 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc6e:	2311      	movs	r3, #17
 800fc70:	e009      	b.n	800fc86 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fc72:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <SecureFrame+0xb0>)
 800fc74:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <SecureFrame+0xb0>)
 800fc7c:	801a      	strh	r2, [r3, #0]
            break;
 800fc7e:	e001      	b.n	800fc84 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e000      	b.n	800fc86 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	200011cc 	.word	0x200011cc
 800fc94:	200012d4 	.word	0x200012d4

0800fc98 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fc98:	b480      	push	{r7}
 800fc9a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fc9c:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <CalculateBackOff+0x2c>)
 800fc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10a      	bne.n	800fcba <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fca4:	4b07      	ldr	r3, [pc, #28]	; (800fcc4 <CalculateBackOff+0x2c>)
 800fca6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	4a06      	ldr	r2, [pc, #24]	; (800fcc8 <CalculateBackOff+0x30>)
 800fcae:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fcb2:	fb02 f303 	mul.w	r3, r2, r3
 800fcb6:	4a03      	ldr	r2, [pc, #12]	; (800fcc4 <CalculateBackOff+0x2c>)
 800fcb8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fcba:	bf00      	nop
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bc80      	pop	{r7}
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	200016d4 	.word	0x200016d4
 800fcc8:	200011cc 	.word	0x200011cc

0800fccc <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	7139      	strb	r1, [r7, #4]
 800fcd6:	71fb      	strb	r3, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d002      	beq.n	800fce8 <RemoveMacCommands+0x1c>
 800fce2:	79fb      	ldrb	r3, [r7, #7]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d10d      	bne.n	800fd04 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fce8:	79bb      	ldrb	r3, [r7, #6]
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d108      	bne.n	800fd00 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fcee:	793b      	ldrb	r3, [r7, #4]
 800fcf0:	f003 0320 	and.w	r3, r3, #32
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d004      	beq.n	800fd04 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fcfa:	f002 fb61 	bl	80123c0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fcfe:	e001      	b.n	800fd04 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd00:	f002 fb5e 	bl	80123c0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fd04:	bf00      	nop
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fd0c:	b5b0      	push	{r4, r5, r7, lr}
 800fd0e:	b08e      	sub	sp, #56	; 0x38
 800fd10:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fd12:	4b68      	ldr	r3, [pc, #416]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fd1a:	4b66      	ldr	r3, [pc, #408]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fd20:	4b65      	ldr	r3, [pc, #404]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fd28:	4b63      	ldr	r3, [pc, #396]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fd30:	4b61      	ldr	r3, [pc, #388]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fd38:	4b5f      	ldr	r3, [pc, #380]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fd40:	4b5c      	ldr	r3, [pc, #368]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fd48:	4b5a      	ldr	r3, [pc, #360]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fd50:	4b58      	ldr	r3, [pc, #352]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd52:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fd56:	4b57      	ldr	r3, [pc, #348]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fd5c:	4b55      	ldr	r3, [pc, #340]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd5e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fd62:	4b54      	ldr	r3, [pc, #336]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fd68:	4b52      	ldr	r3, [pc, #328]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd6a:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fd6e:	4b51      	ldr	r3, [pc, #324]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fd74:	4b4f      	ldr	r3, [pc, #316]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd76:	4a4f      	ldr	r2, [pc, #316]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd78:	3364      	adds	r3, #100	; 0x64
 800fd7a:	32a4      	adds	r2, #164	; 0xa4
 800fd7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd80:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fd84:	4b4b      	ldr	r3, [pc, #300]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd86:	4a4b      	ldr	r2, [pc, #300]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd88:	336c      	adds	r3, #108	; 0x6c
 800fd8a:	32ac      	adds	r2, #172	; 0xac
 800fd8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd90:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fd94:	4b47      	ldr	r3, [pc, #284]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd96:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fd9a:	4b46      	ldr	r3, [pc, #280]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fd9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fda0:	4b44      	ldr	r3, [pc, #272]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fda2:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fda6:	4b43      	ldr	r3, [pc, #268]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fda8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fdac:	4b41      	ldr	r3, [pc, #260]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fdb2:	4a40      	ldr	r2, [pc, #256]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdb4:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fdb6:	4b3f      	ldr	r3, [pc, #252]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fdbc:	4a3d      	ldr	r2, [pc, #244]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdbe:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fdc0:	4b3d      	ldr	r3, [pc, #244]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fdc8:	4b3a      	ldr	r3, [pc, #232]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fdd4:	4b39      	ldr	r3, [pc, #228]	; (800febc <ResetMacParameters+0x1b0>)
 800fdd6:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fdd8:	4b39      	ldr	r3, [pc, #228]	; (800fec0 <ResetMacParameters+0x1b4>)
 800fdda:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fddc:	4b35      	ldr	r3, [pc, #212]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fdde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fde2:	1d3a      	adds	r2, r7, #4
 800fde4:	4611      	mov	r1, r2
 800fde6:	4618      	mov	r0, r3
 800fde8:	f004 f823 	bl	8013e32 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fdec:	4b32      	ldr	r3, [pc, #200]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fdf4:	4b30      	ldr	r3, [pc, #192]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fdf6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fdfa:	4b2f      	ldr	r3, [pc, #188]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fdfc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fe00:	4b2c      	ldr	r3, [pc, #176]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fe02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe04:	4a2c      	ldr	r2, [pc, #176]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe06:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe0a:	4b2a      	ldr	r3, [pc, #168]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fe0c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe10:	4b29      	ldr	r3, [pc, #164]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe12:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe16:	4b27      	ldr	r3, [pc, #156]	; (800feb4 <ResetMacParameters+0x1a8>)
 800fe18:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fe1c:	4b26      	ldr	r3, [pc, #152]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe1e:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe22:	4b25      	ldr	r3, [pc, #148]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe2a:	4b23      	ldr	r3, [pc, #140]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fe32:	4a21      	ldr	r2, [pc, #132]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe34:	4b20      	ldr	r3, [pc, #128]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe36:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fe3a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fe3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe42:	682b      	ldr	r3, [r5, #0]
 800fe44:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe46:	4b1c      	ldr	r3, [pc, #112]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe4e:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe50:	2202      	movs	r2, #2
 800fe52:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fe56:	2300      	movs	r3, #0
 800fe58:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800fe5e:	4b16      	ldr	r3, [pc, #88]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe60:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d009      	beq.n	800fe7c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fe68:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fe72:	4b11      	ldr	r3, [pc, #68]	; (800feb8 <ResetMacParameters+0x1ac>)
 800fe74:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fe7c:	4b11      	ldr	r3, [pc, #68]	; (800fec4 <ResetMacParameters+0x1b8>)
 800fe7e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fe80:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <ResetMacParameters+0x1bc>)
 800fe82:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fe84:	4b11      	ldr	r3, [pc, #68]	; (800fecc <ResetMacParameters+0x1c0>)
 800fe86:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fe88:	4b11      	ldr	r3, [pc, #68]	; (800fed0 <ResetMacParameters+0x1c4>)
 800fe8a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fe8c:	4b11      	ldr	r3, [pc, #68]	; (800fed4 <ResetMacParameters+0x1c8>)
 800fe8e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fe90:	4b11      	ldr	r3, [pc, #68]	; (800fed8 <ResetMacParameters+0x1cc>)
 800fe92:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800fe94:	4b11      	ldr	r3, [pc, #68]	; (800fedc <ResetMacParameters+0x1d0>)
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800fe98:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <ResetMacParameters+0x1d4>)
 800fe9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800fe9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fea0:	f107 0310 	add.w	r3, r7, #16
 800fea4:	4a0f      	ldr	r2, [pc, #60]	; (800fee4 <ResetMacParameters+0x1d8>)
 800fea6:	4618      	mov	r0, r3
 800fea8:	f001 ffec 	bl	8011e84 <LoRaMacClassBInit>
}
 800feac:	bf00      	nop
 800feae:	3738      	adds	r7, #56	; 0x38
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bdb0      	pop	{r4, r5, r7, pc}
 800feb4:	200016d4 	.word	0x200016d4
 800feb8:	200011cc 	.word	0x200011cc
 800febc:	200018ac 	.word	0x200018ac
 800fec0:	20001940 	.word	0x20001940
 800fec4:	2000162c 	.word	0x2000162c
 800fec8:	200015e8 	.word	0x200015e8
 800fecc:	20001618 	.word	0x20001618
 800fed0:	2000164d 	.word	0x2000164d
 800fed4:	200017a0 	.word	0x200017a0
 800fed8:	20001714 	.word	0x20001714
 800fedc:	20001718 	.word	0x20001718
 800fee0:	200017a4 	.word	0x200017a4
 800fee4:	20001a08 	.word	0x20001a08

0800fee8 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f009 fefa 	bl	8019cec <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800fef8:	4b0e      	ldr	r3, [pc, #56]	; (800ff34 <RxWindowSetup+0x4c>)
 800fefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fefc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fefe:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <RxWindowSetup+0x50>)
 800ff00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff04:	4a0d      	ldr	r2, [pc, #52]	; (800ff3c <RxWindowSetup+0x54>)
 800ff06:	6839      	ldr	r1, [r7, #0]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f003 fffa 	bl	8013f02 <RegionRxConfig>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00a      	beq.n	800ff2a <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ff14:	4b07      	ldr	r3, [pc, #28]	; (800ff34 <RxWindowSetup+0x4c>)
 800ff16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff18:	4a07      	ldr	r2, [pc, #28]	; (800ff38 <RxWindowSetup+0x50>)
 800ff1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	7cda      	ldrb	r2, [r3, #19]
 800ff24:	4b06      	ldr	r3, [pc, #24]	; (800ff40 <RxWindowSetup+0x58>)
 800ff26:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	0802078c 	.word	0x0802078c
 800ff38:	200016d4 	.word	0x200016d4
 800ff3c:	200015ec 	.word	0x200015ec
 800ff40:	200011cc 	.word	0x200011cc

0800ff44 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff4a:	4b18      	ldr	r3, [pc, #96]	; (800ffac <OpenContinuousRxCWindow+0x68>)
 800ff4c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ff50:	4b16      	ldr	r3, [pc, #88]	; (800ffac <OpenContinuousRxCWindow+0x68>)
 800ff52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff56:	b259      	sxtb	r1, r3
 800ff58:	4b14      	ldr	r3, [pc, #80]	; (800ffac <OpenContinuousRxCWindow+0x68>)
 800ff5a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff5e:	4b13      	ldr	r3, [pc, #76]	; (800ffac <OpenContinuousRxCWindow+0x68>)
 800ff60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff62:	4c13      	ldr	r4, [pc, #76]	; (800ffb0 <OpenContinuousRxCWindow+0x6c>)
 800ff64:	9400      	str	r4, [sp, #0]
 800ff66:	f003 ffb2 	bl	8013ece <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff6a:	4b12      	ldr	r3, [pc, #72]	; (800ffb4 <OpenContinuousRxCWindow+0x70>)
 800ff6c:	2202      	movs	r2, #2
 800ff6e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ff72:	4b10      	ldr	r3, [pc, #64]	; (800ffb4 <OpenContinuousRxCWindow+0x70>)
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ff7a:	4b0c      	ldr	r3, [pc, #48]	; (800ffac <OpenContinuousRxCWindow+0x68>)
 800ff7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff80:	4a0d      	ldr	r2, [pc, #52]	; (800ffb8 <OpenContinuousRxCWindow+0x74>)
 800ff82:	490b      	ldr	r1, [pc, #44]	; (800ffb0 <OpenContinuousRxCWindow+0x6c>)
 800ff84:	4618      	mov	r0, r3
 800ff86:	f003 ffbc 	bl	8013f02 <RegionRxConfig>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d009      	beq.n	800ffa4 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800ff90:	4b0a      	ldr	r3, [pc, #40]	; (800ffbc <OpenContinuousRxCWindow+0x78>)
 800ff92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff94:	2000      	movs	r0, #0
 800ff96:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ff98:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <OpenContinuousRxCWindow+0x70>)
 800ff9a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <OpenContinuousRxCWindow+0x70>)
 800ffa0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ffa4:	bf00      	nop
 800ffa6:	3704      	adds	r7, #4
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd90      	pop	{r4, r7, pc}
 800ffac:	200016d4 	.word	0x200016d4
 800ffb0:	200015ac 	.word	0x200015ac
 800ffb4:	200011cc 	.word	0x200011cc
 800ffb8:	200015ec 	.word	0x200015ec
 800ffbc:	0802078c 	.word	0x0802078c

0800ffc0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	603b      	str	r3, [r7, #0]
 800ffcc:	4613      	mov	r3, r2
 800ffce:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800ffd0:	4b82      	ldr	r3, [pc, #520]	; (80101dc <PrepareFrame+0x21c>)
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800ffd6:	4b81      	ldr	r3, [pc, #516]	; (80101dc <PrepareFrame+0x21c>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800fff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fff6:	461a      	mov	r2, r3
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	4879      	ldr	r0, [pc, #484]	; (80101e0 <PrepareFrame+0x220>)
 800fffc:	f006 f9c7 	bl	801638e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010002:	b2da      	uxtb	r2, r3
 8010004:	4b75      	ldr	r3, [pc, #468]	; (80101dc <PrepareFrame+0x21c>)
 8010006:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	781a      	ldrb	r2, [r3, #0]
 801000e:	4b73      	ldr	r3, [pc, #460]	; (80101dc <PrepareFrame+0x21c>)
 8010010:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b07      	cmp	r3, #7
 801001e:	f000 80b9 	beq.w	8010194 <PrepareFrame+0x1d4>
 8010022:	2b07      	cmp	r3, #7
 8010024:	f300 80d0 	bgt.w	80101c8 <PrepareFrame+0x208>
 8010028:	2b02      	cmp	r3, #2
 801002a:	d006      	beq.n	801003a <PrepareFrame+0x7a>
 801002c:	2b04      	cmp	r3, #4
 801002e:	f040 80cb 	bne.w	80101c8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010032:	4b6a      	ldr	r3, [pc, #424]	; (80101dc <PrepareFrame+0x21c>)
 8010034:	2201      	movs	r2, #1
 8010036:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801003a:	4b68      	ldr	r3, [pc, #416]	; (80101dc <PrepareFrame+0x21c>)
 801003c:	2204      	movs	r2, #4
 801003e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010042:	4b66      	ldr	r3, [pc, #408]	; (80101dc <PrepareFrame+0x21c>)
 8010044:	4a67      	ldr	r2, [pc, #412]	; (80101e4 <PrepareFrame+0x224>)
 8010046:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801004a:	4b64      	ldr	r3, [pc, #400]	; (80101dc <PrepareFrame+0x21c>)
 801004c:	22ff      	movs	r2, #255	; 0xff
 801004e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	781a      	ldrb	r2, [r3, #0]
 8010056:	4b61      	ldr	r3, [pc, #388]	; (80101dc <PrepareFrame+0x21c>)
 8010058:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801005c:	4a5f      	ldr	r2, [pc, #380]	; (80101dc <PrepareFrame+0x21c>)
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010064:	4b60      	ldr	r3, [pc, #384]	; (80101e8 <PrepareFrame+0x228>)
 8010066:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801006a:	4a5c      	ldr	r2, [pc, #368]	; (80101dc <PrepareFrame+0x21c>)
 801006c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	781a      	ldrb	r2, [r3, #0]
 8010074:	4b59      	ldr	r3, [pc, #356]	; (80101dc <PrepareFrame+0x21c>)
 8010076:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801007a:	4b58      	ldr	r3, [pc, #352]	; (80101dc <PrepareFrame+0x21c>)
 801007c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010080:	4b56      	ldr	r3, [pc, #344]	; (80101dc <PrepareFrame+0x21c>)
 8010082:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010086:	4b55      	ldr	r3, [pc, #340]	; (80101dc <PrepareFrame+0x21c>)
 8010088:	4a55      	ldr	r2, [pc, #340]	; (80101e0 <PrepareFrame+0x220>)
 801008a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801008e:	f107 0318 	add.w	r3, r7, #24
 8010092:	4618      	mov	r0, r3
 8010094:	f002 fffe 	bl	8013094 <LoRaMacCryptoGetFCntUp>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801009e:	2312      	movs	r3, #18
 80100a0:	e098      	b.n	80101d4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	4b4d      	ldr	r3, [pc, #308]	; (80101dc <PrepareFrame+0x21c>)
 80100a8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80100ac:	4b4b      	ldr	r3, [pc, #300]	; (80101dc <PrepareFrame+0x21c>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80100b4:	4b49      	ldr	r3, [pc, #292]	; (80101dc <PrepareFrame+0x21c>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	4a47      	ldr	r2, [pc, #284]	; (80101dc <PrepareFrame+0x21c>)
 80100c0:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80100c4:	f107 0314 	add.w	r3, r7, #20
 80100c8:	4618      	mov	r0, r3
 80100ca:	f002 f99b 	bl	8012404 <LoRaMacCommandsGetSizeSerializedCmds>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100d4:	2313      	movs	r3, #19
 80100d6:	e07d      	b.n	80101d4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d076      	beq.n	80101cc <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80100de:	4b42      	ldr	r3, [pc, #264]	; (80101e8 <PrepareFrame+0x228>)
 80100e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe fdab 	bl	800ec40 <GetMaxAppPayloadWithoutFOptsLength>
 80100ea:	4603      	mov	r3, r0
 80100ec:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80100ee:	4b3b      	ldr	r3, [pc, #236]	; (80101dc <PrepareFrame+0x21c>)
 80100f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d01d      	beq.n	8010134 <PrepareFrame+0x174>
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	2b0f      	cmp	r3, #15
 80100fc:	d81a      	bhi.n	8010134 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80100fe:	f107 0314 	add.w	r3, r7, #20
 8010102:	4a3a      	ldr	r2, [pc, #232]	; (80101ec <PrepareFrame+0x22c>)
 8010104:	4619      	mov	r1, r3
 8010106:	200f      	movs	r0, #15
 8010108:	f002 f992 	bl	8012430 <LoRaMacCommandsSerializeCmds>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010112:	2313      	movs	r3, #19
 8010114:	e05e      	b.n	80101d4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	f003 030f 	and.w	r3, r3, #15
 801011c:	b2d9      	uxtb	r1, r3
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	7813      	ldrb	r3, [r2, #0]
 8010122:	f361 0303 	bfi	r3, r1, #0, #4
 8010126:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	781a      	ldrb	r2, [r3, #0]
 801012c:	4b2b      	ldr	r3, [pc, #172]	; (80101dc <PrepareFrame+0x21c>)
 801012e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010132:	e04b      	b.n	80101cc <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010134:	4b29      	ldr	r3, [pc, #164]	; (80101dc <PrepareFrame+0x21c>)
 8010136:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801013a:	2b00      	cmp	r3, #0
 801013c:	d010      	beq.n	8010160 <PrepareFrame+0x1a0>
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	2b0f      	cmp	r3, #15
 8010142:	d90d      	bls.n	8010160 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010144:	7ffb      	ldrb	r3, [r7, #31]
 8010146:	f107 0114 	add.w	r1, r7, #20
 801014a:	4a29      	ldr	r2, [pc, #164]	; (80101f0 <PrepareFrame+0x230>)
 801014c:	4618      	mov	r0, r3
 801014e:	f002 f96f 	bl	8012430 <LoRaMacCommandsSerializeCmds>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010158:	2313      	movs	r3, #19
 801015a:	e03b      	b.n	80101d4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801015c:	230a      	movs	r3, #10
 801015e:	e039      	b.n	80101d4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010160:	7ffb      	ldrb	r3, [r7, #31]
 8010162:	f107 0114 	add.w	r1, r7, #20
 8010166:	4a22      	ldr	r2, [pc, #136]	; (80101f0 <PrepareFrame+0x230>)
 8010168:	4618      	mov	r0, r3
 801016a:	f002 f961 	bl	8012430 <LoRaMacCommandsSerializeCmds>
 801016e:	4603      	mov	r3, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d001      	beq.n	8010178 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010174:	2313      	movs	r3, #19
 8010176:	e02d      	b.n	80101d4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010178:	4b18      	ldr	r3, [pc, #96]	; (80101dc <PrepareFrame+0x21c>)
 801017a:	2200      	movs	r2, #0
 801017c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010180:	4b16      	ldr	r3, [pc, #88]	; (80101dc <PrepareFrame+0x21c>)
 8010182:	4a1b      	ldr	r2, [pc, #108]	; (80101f0 <PrepareFrame+0x230>)
 8010184:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	b2da      	uxtb	r2, r3
 801018c:	4b13      	ldr	r3, [pc, #76]	; (80101dc <PrepareFrame+0x21c>)
 801018e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010192:	e01b      	b.n	80101cc <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d01a      	beq.n	80101d0 <PrepareFrame+0x210>
 801019a:	4b10      	ldr	r3, [pc, #64]	; (80101dc <PrepareFrame+0x21c>)
 801019c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d015      	beq.n	80101d0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80101a4:	4813      	ldr	r0, [pc, #76]	; (80101f4 <PrepareFrame+0x234>)
 80101a6:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <PrepareFrame+0x21c>)
 80101a8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	461a      	mov	r2, r3
 80101b0:	6839      	ldr	r1, [r7, #0]
 80101b2:	f006 f8ec 	bl	801638e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80101b6:	4b09      	ldr	r3, [pc, #36]	; (80101dc <PrepareFrame+0x21c>)
 80101b8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101bc:	b29b      	uxth	r3, r3
 80101be:	3301      	adds	r3, #1
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	4b06      	ldr	r3, [pc, #24]	; (80101dc <PrepareFrame+0x21c>)
 80101c4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80101c6:	e003      	b.n	80101d0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80101c8:	2302      	movs	r3, #2
 80101ca:	e003      	b.n	80101d4 <PrepareFrame+0x214>
            break;
 80101cc:	bf00      	nop
 80101ce:	e000      	b.n	80101d2 <PrepareFrame+0x212>
            break;
 80101d0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	200011cc 	.word	0x200011cc
 80101e0:	20001304 	.word	0x20001304
 80101e4:	200011ce 	.word	0x200011ce
 80101e8:	200016d4 	.word	0x200016d4
 80101ec:	200012e4 	.word	0x200012e4
 80101f0:	20001654 	.word	0x20001654
 80101f4:	200011cf 	.word	0x200011cf

080101f8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	; 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010202:	2303      	movs	r3, #3
 8010204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010208:	2300      	movs	r3, #0
 801020a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801020c:	79fb      	ldrb	r3, [r7, #7]
 801020e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010210:	4b47      	ldr	r3, [pc, #284]	; (8010330 <SendFrameOnChannel+0x138>)
 8010212:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010216:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010218:	4b45      	ldr	r3, [pc, #276]	; (8010330 <SendFrameOnChannel+0x138>)
 801021a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801021e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010220:	4b43      	ldr	r3, [pc, #268]	; (8010330 <SendFrameOnChannel+0x138>)
 8010222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010224:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010226:	4b42      	ldr	r3, [pc, #264]	; (8010330 <SendFrameOnChannel+0x138>)
 8010228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801022a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801022c:	4b41      	ldr	r3, [pc, #260]	; (8010334 <SendFrameOnChannel+0x13c>)
 801022e:	881b      	ldrh	r3, [r3, #0]
 8010230:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010232:	4b3f      	ldr	r3, [pc, #252]	; (8010330 <SendFrameOnChannel+0x138>)
 8010234:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010238:	f107 020f 	add.w	r2, r7, #15
 801023c:	f107 0110 	add.w	r1, r7, #16
 8010240:	4b3d      	ldr	r3, [pc, #244]	; (8010338 <SendFrameOnChannel+0x140>)
 8010242:	f003 fe73 	bl	8013f2c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010246:	4b3b      	ldr	r3, [pc, #236]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010248:	2201      	movs	r2, #1
 801024a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801024e:	4b38      	ldr	r3, [pc, #224]	; (8010330 <SendFrameOnChannel+0x138>)
 8010250:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010254:	b2da      	uxtb	r2, r3
 8010256:	4b37      	ldr	r3, [pc, #220]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010258:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 801025c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010260:	4b34      	ldr	r3, [pc, #208]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010262:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	4a32      	ldr	r2, [pc, #200]	; (8010334 <SendFrameOnChannel+0x13c>)
 801026a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801026e:	4b31      	ldr	r3, [pc, #196]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010270:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010274:	4a2f      	ldr	r2, [pc, #188]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010276:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801027a:	4b2e      	ldr	r3, [pc, #184]	; (8010334 <SendFrameOnChannel+0x13c>)
 801027c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010280:	4a2c      	ldr	r2, [pc, #176]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010282:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010286:	f001 fe69 	bl	8011f5c <LoRaMacClassBIsBeaconModeActive>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00b      	beq.n	80102a8 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010290:	4b28      	ldr	r3, [pc, #160]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010292:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010296:	4618      	mov	r0, r3
 8010298:	f001 fecb 	bl	8012032 <LoRaMacClassBIsUplinkCollision>
 801029c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80102a4:	2310      	movs	r3, #16
 80102a6:	e03e      	b.n	8010326 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102a8:	4b21      	ldr	r3, [pc, #132]	; (8010330 <SendFrameOnChannel+0x138>)
 80102aa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d101      	bne.n	80102b6 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80102b2:	f001 fec8 	bl	8012046 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80102b6:	f001 fe62 	bl	8011f7e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80102ba:	4b1d      	ldr	r3, [pc, #116]	; (8010330 <SendFrameOnChannel+0x138>)
 80102bc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	4a1c      	ldr	r2, [pc, #112]	; (8010334 <SendFrameOnChannel+0x13c>)
 80102c4:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fc88 	bl	800fbe0 <SecureFrame>
 80102d0:	4603      	mov	r3, r0
 80102d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80102d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d002      	beq.n	80102e4 <SendFrameOnChannel+0xec>
    {
        return status;
 80102de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102e2:	e020      	b.n	8010326 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80102e4:	4b13      	ldr	r3, [pc, #76]	; (8010334 <SendFrameOnChannel+0x13c>)
 80102e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102ea:	f043 0302 	orr.w	r3, r3, #2
 80102ee:	4a11      	ldr	r2, [pc, #68]	; (8010334 <SendFrameOnChannel+0x13c>)
 80102f0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80102f4:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <SendFrameOnChannel+0x13c>)
 80102f6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80102fa:	f083 0301 	eor.w	r3, r3, #1
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b00      	cmp	r3, #0
 8010302:	d007      	beq.n	8010314 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010304:	4b0b      	ldr	r3, [pc, #44]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010306:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801030a:	3301      	adds	r3, #1
 801030c:	b2da      	uxtb	r2, r3
 801030e:	4b09      	ldr	r3, [pc, #36]	; (8010334 <SendFrameOnChannel+0x13c>)
 8010310:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010314:	4b09      	ldr	r3, [pc, #36]	; (801033c <SendFrameOnChannel+0x144>)
 8010316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010318:	4a06      	ldr	r2, [pc, #24]	; (8010334 <SendFrameOnChannel+0x13c>)
 801031a:	8812      	ldrh	r2, [r2, #0]
 801031c:	b2d2      	uxtb	r2, r2
 801031e:	4611      	mov	r1, r2
 8010320:	4807      	ldr	r0, [pc, #28]	; (8010340 <SendFrameOnChannel+0x148>)
 8010322:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3728      	adds	r7, #40	; 0x28
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	200016d4 	.word	0x200016d4
 8010334:	200011cc 	.word	0x200011cc
 8010338:	200015e4 	.word	0x200015e4
 801033c:	0802078c 	.word	0x0802078c
 8010340:	200011ce 	.word	0x200011ce

08010344 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801034e:	4b15      	ldr	r3, [pc, #84]	; (80103a4 <SetTxContinuousWave+0x60>)
 8010350:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010354:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010356:	4b14      	ldr	r3, [pc, #80]	; (80103a8 <SetTxContinuousWave+0x64>)
 8010358:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801035c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801035e:	4b12      	ldr	r3, [pc, #72]	; (80103a8 <SetTxContinuousWave+0x64>)
 8010360:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010364:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010366:	4b10      	ldr	r3, [pc, #64]	; (80103a8 <SetTxContinuousWave+0x64>)
 8010368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801036a:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801036c:	4b0e      	ldr	r3, [pc, #56]	; (80103a8 <SetTxContinuousWave+0x64>)
 801036e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010370:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010372:	88fb      	ldrh	r3, [r7, #6]
 8010374:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8010376:	4b0c      	ldr	r3, [pc, #48]	; (80103a8 <SetTxContinuousWave+0x64>)
 8010378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801037c:	f107 0208 	add.w	r2, r7, #8
 8010380:	4611      	mov	r1, r2
 8010382:	4618      	mov	r0, r3
 8010384:	f003 fe81 	bl	801408a <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010388:	4b06      	ldr	r3, [pc, #24]	; (80103a4 <SetTxContinuousWave+0x60>)
 801038a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801038e:	f043 0302 	orr.w	r3, r3, #2
 8010392:	4a04      	ldr	r2, [pc, #16]	; (80103a4 <SetTxContinuousWave+0x60>)
 8010394:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	200011cc 	.word	0x200011cc
 80103a8:	200016d4 	.word	0x200016d4

080103ac <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	6039      	str	r1, [r7, #0]
 80103b6:	80fb      	strh	r3, [r7, #6]
 80103b8:	4613      	mov	r3, r2
 80103ba:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80103bc:	4b09      	ldr	r3, [pc, #36]	; (80103e4 <SetTxContinuousWave1+0x38>)
 80103be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103c0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80103c4:	88fa      	ldrh	r2, [r7, #6]
 80103c6:	6838      	ldr	r0, [r7, #0]
 80103c8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103ca:	4b07      	ldr	r3, [pc, #28]	; (80103e8 <SetTxContinuousWave1+0x3c>)
 80103cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103d0:	f043 0302 	orr.w	r3, r3, #2
 80103d4:	4a04      	ldr	r2, [pc, #16]	; (80103e8 <SetTxContinuousWave1+0x3c>)
 80103d6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	0802078c 	.word	0x0802078c
 80103e8:	200011cc 	.word	0x200011cc

080103ec <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
    return &Nvm;
 80103f0:	4b02      	ldr	r3, [pc, #8]	; (80103fc <GetNvmData+0x10>)
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bc80      	pop	{r7}
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	200016d4 	.word	0x200016d4

08010400 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010408:	2300      	movs	r3, #0
 801040a:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010412:	2303      	movs	r3, #3
 8010414:	e09a      	b.n	801054c <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010416:	4b4f      	ldr	r3, [pc, #316]	; (8010554 <RestoreNvmData+0x154>)
 8010418:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801041c:	2b01      	cmp	r3, #1
 801041e:	d001      	beq.n	8010424 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010420:	2301      	movs	r3, #1
 8010422:	e093      	b.n	801054c <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2124      	movs	r1, #36	; 0x24
 8010428:	4618      	mov	r0, r3
 801042a:	f006 f805 	bl	8016438 <Crc32>
 801042e:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	429a      	cmp	r2, r3
 8010438:	d105      	bne.n	8010446 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2228      	movs	r2, #40	; 0x28
 801043e:	4619      	mov	r1, r3
 8010440:	4845      	ldr	r0, [pc, #276]	; (8010558 <RestoreNvmData+0x158>)
 8010442:	f005 ffa4 	bl	801638e <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	3328      	adds	r3, #40	; 0x28
 801044a:	2114      	movs	r1, #20
 801044c:	4618      	mov	r0, r3
 801044e:	f005 fff3 	bl	8016438 <Crc32>
 8010452:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	429a      	cmp	r2, r3
 801045c:	d106      	bne.n	801046c <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3328      	adds	r3, #40	; 0x28
 8010462:	2218      	movs	r2, #24
 8010464:	4619      	mov	r1, r3
 8010466:	483d      	ldr	r0, [pc, #244]	; (801055c <RestoreNvmData+0x15c>)
 8010468:	f005 ff91 	bl	801638e <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	3340      	adds	r3, #64	; 0x40
 8010470:	21d4      	movs	r1, #212	; 0xd4
 8010472:	4618      	mov	r0, r3
 8010474:	f005 ffe0 	bl	8016438 <Crc32>
 8010478:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	429a      	cmp	r2, r3
 8010484:	d11f      	bne.n	80104c6 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3340      	adds	r3, #64	; 0x40
 801048a:	22d8      	movs	r2, #216	; 0xd8
 801048c:	4619      	mov	r1, r3
 801048e:	4834      	ldr	r0, [pc, #208]	; (8010560 <RestoreNvmData+0x160>)
 8010490:	f005 ff7d 	bl	801638e <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010494:	4b2f      	ldr	r3, [pc, #188]	; (8010554 <RestoreNvmData+0x154>)
 8010496:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801049a:	4b2e      	ldr	r3, [pc, #184]	; (8010554 <RestoreNvmData+0x154>)
 801049c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80104a0:	4b2d      	ldr	r3, [pc, #180]	; (8010558 <RestoreNvmData+0x158>)
 80104a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a4:	4a2b      	ldr	r2, [pc, #172]	; (8010554 <RestoreNvmData+0x154>)
 80104a6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80104aa:	4b2b      	ldr	r3, [pc, #172]	; (8010558 <RestoreNvmData+0x158>)
 80104ac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80104b0:	4b28      	ldr	r3, [pc, #160]	; (8010554 <RestoreNvmData+0x154>)
 80104b2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80104b6:	4b27      	ldr	r3, [pc, #156]	; (8010554 <RestoreNvmData+0x154>)
 80104b8:	2201      	movs	r2, #1
 80104ba:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80104be:	4b25      	ldr	r3, [pc, #148]	; (8010554 <RestoreNvmData+0x154>)
 80104c0:	2202      	movs	r2, #2
 80104c2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80104cc:	21bc      	movs	r1, #188	; 0xbc
 80104ce:	4618      	mov	r0, r3
 80104d0:	f005 ffb2 	bl	8016438 <Crc32>
 80104d4:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d107      	bne.n	80104f2 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80104e8:	22c0      	movs	r2, #192	; 0xc0
 80104ea:	4619      	mov	r1, r3
 80104ec:	481d      	ldr	r0, [pc, #116]	; (8010564 <RestoreNvmData+0x164>)
 80104ee:	f005 ff4e 	bl	801638e <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80104f8:	2190      	movs	r1, #144	; 0x90
 80104fa:	4618      	mov	r0, r3
 80104fc:	f005 ff9c 	bl	8016438 <Crc32>
 8010500:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	429a      	cmp	r2, r3
 801050c:	d107      	bne.n	801051e <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010514:	2294      	movs	r2, #148	; 0x94
 8010516:	4619      	mov	r1, r3
 8010518:	4813      	ldr	r0, [pc, #76]	; (8010568 <RestoreNvmData+0x168>)
 801051a:	f005 ff38 	bl	801638e <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010524:	2114      	movs	r1, #20
 8010526:	4618      	mov	r0, r3
 8010528:	f005 ff86 	bl	8016438 <Crc32>
 801052c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	429a      	cmp	r2, r3
 8010538:	d107      	bne.n	801054a <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010540:	2218      	movs	r2, #24
 8010542:	4619      	mov	r1, r3
 8010544:	4809      	ldr	r0, [pc, #36]	; (801056c <RestoreNvmData+0x16c>)
 8010546:	f005 ff22 	bl	801638e <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3710      	adds	r7, #16
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	200011cc 	.word	0x200011cc
 8010558:	200016d4 	.word	0x200016d4
 801055c:	200016fc 	.word	0x200016fc
 8010560:	20001714 	.word	0x20001714
 8010564:	200017ec 	.word	0x200017ec
 8010568:	200018ac 	.word	0x200018ac
 801056c:	20001a08 	.word	0x20001a08

08010570 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <DetermineFrameType+0x16>
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010586:	2303      	movs	r3, #3
 8010588:	e03b      	b.n	8010602 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	7b1b      	ldrb	r3, [r3, #12]
 801058e:	f003 030f 	and.w	r3, r3, #15
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	d008      	beq.n	80105aa <DetermineFrameType+0x3a>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2200      	movs	r2, #0
 80105a6:	701a      	strb	r2, [r3, #0]
 80105a8:	e02a      	b.n	8010600 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d103      	bne.n	80105bc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	2201      	movs	r2, #1
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	e021      	b.n	8010600 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	7b1b      	ldrb	r3, [r3, #12]
 80105c0:	f003 030f 	and.w	r3, r3, #15
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d108      	bne.n	80105dc <DetermineFrameType+0x6c>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d103      	bne.n	80105dc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	2202      	movs	r2, #2
 80105d8:	701a      	strb	r2, [r3, #0]
 80105da:	e011      	b.n	8010600 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	7b1b      	ldrb	r3, [r3, #12]
 80105e0:	f003 030f 	and.w	r3, r3, #15
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d108      	bne.n	80105fc <DetermineFrameType+0x8c>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d003      	beq.n	80105fc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2203      	movs	r2, #3
 80105f8:	701a      	strb	r2, [r3, #0]
 80105fa:	e001      	b.n	8010600 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80105fc:	2317      	movs	r3, #23
 80105fe:	e000      	b.n	8010602 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	370c      	adds	r7, #12
 8010606:	46bd      	mov	sp, r7
 8010608:	bc80      	pop	{r7}
 801060a:	4770      	bx	lr

0801060c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801060c:	b480      	push	{r7}
 801060e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010610:	4b12      	ldr	r3, [pc, #72]	; (801065c <CheckRetransUnconfirmedUplink+0x50>)
 8010612:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010616:	4b12      	ldr	r3, [pc, #72]	; (8010660 <CheckRetransUnconfirmedUplink+0x54>)
 8010618:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 801061c:	429a      	cmp	r2, r3
 801061e:	d301      	bcc.n	8010624 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010620:	2301      	movs	r3, #1
 8010622:	e016      	b.n	8010652 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010624:	4b0d      	ldr	r3, [pc, #52]	; (801065c <CheckRetransUnconfirmedUplink+0x50>)
 8010626:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801062a:	f003 0302 	and.w	r3, r3, #2
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d00d      	beq.n	8010650 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010634:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <CheckRetransUnconfirmedUplink+0x54>)
 8010636:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801063a:	2b00      	cmp	r3, #0
 801063c:	d101      	bne.n	8010642 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801063e:	2301      	movs	r3, #1
 8010640:	e007      	b.n	8010652 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010642:	4b06      	ldr	r3, [pc, #24]	; (801065c <CheckRetransUnconfirmedUplink+0x50>)
 8010644:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801064c:	2301      	movs	r3, #1
 801064e:	e000      	b.n	8010652 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	46bd      	mov	sp, r7
 8010656:	bc80      	pop	{r7}
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	200011cc 	.word	0x200011cc
 8010660:	200016d4 	.word	0x200016d4

08010664 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010668:	4b0e      	ldr	r3, [pc, #56]	; (80106a4 <CheckRetransConfirmedUplink+0x40>)
 801066a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801066e:	4b0d      	ldr	r3, [pc, #52]	; (80106a4 <CheckRetransConfirmedUplink+0x40>)
 8010670:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010674:	429a      	cmp	r2, r3
 8010676:	d301      	bcc.n	801067c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010678:	2301      	movs	r3, #1
 801067a:	e00f      	b.n	801069c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801067c:	4b09      	ldr	r3, [pc, #36]	; (80106a4 <CheckRetransConfirmedUplink+0x40>)
 801067e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010682:	f003 0302 	and.w	r3, r3, #2
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d006      	beq.n	801069a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801068c:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <CheckRetransConfirmedUplink+0x40>)
 801068e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010696:	2301      	movs	r3, #1
 8010698:	e000      	b.n	801069c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	46bd      	mov	sp, r7
 80106a0:	bc80      	pop	{r7}
 80106a2:	4770      	bx	lr
 80106a4:	200011cc 	.word	0x200011cc

080106a8 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80106a8:	b480      	push	{r7}
 80106aa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80106ac:	4b1a      	ldr	r3, [pc, #104]	; (8010718 <StopRetransmission+0x70>)
 80106ae:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80106b2:	f003 0302 	and.w	r3, r3, #2
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d009      	beq.n	80106d0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80106bc:	4b16      	ldr	r3, [pc, #88]	; (8010718 <StopRetransmission+0x70>)
 80106be:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00e      	beq.n	80106e4 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80106c6:	4b14      	ldr	r3, [pc, #80]	; (8010718 <StopRetransmission+0x70>)
 80106c8:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d009      	beq.n	80106e4 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80106d0:	4b12      	ldr	r3, [pc, #72]	; (801071c <StopRetransmission+0x74>)
 80106d2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d004      	beq.n	80106e4 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80106da:	4b10      	ldr	r3, [pc, #64]	; (801071c <StopRetransmission+0x74>)
 80106dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106de:	3301      	adds	r3, #1
 80106e0:	4a0e      	ldr	r2, [pc, #56]	; (801071c <StopRetransmission+0x74>)
 80106e2:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80106e4:	4b0c      	ldr	r3, [pc, #48]	; (8010718 <StopRetransmission+0x70>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80106ec:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <StopRetransmission+0x70>)
 80106ee:	2200      	movs	r2, #0
 80106f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80106f4:	4b08      	ldr	r3, [pc, #32]	; (8010718 <StopRetransmission+0x70>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80106fc:	4b06      	ldr	r3, [pc, #24]	; (8010718 <StopRetransmission+0x70>)
 80106fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010702:	f023 0302 	bic.w	r3, r3, #2
 8010706:	4a04      	ldr	r2, [pc, #16]	; (8010718 <StopRetransmission+0x70>)
 8010708:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801070c:	2301      	movs	r3, #1
}
 801070e:	4618      	mov	r0, r3
 8010710:	46bd      	mov	sp, r7
 8010712:	bc80      	pop	{r7}
 8010714:	4770      	bx	lr
 8010716:	bf00      	nop
 8010718:	200011cc 	.word	0x200011cc
 801071c:	200016d4 	.word	0x200016d4

08010720 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	4603      	mov	r3, r0
 8010728:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801072a:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <CallNvmDataChangeCallback+0x38>)
 801072c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00c      	beq.n	801074e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010734:	4b08      	ldr	r3, [pc, #32]	; (8010758 <CallNvmDataChangeCallback+0x38>)
 8010736:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801073a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801073c:	2b00      	cmp	r3, #0
 801073e:	d006      	beq.n	801074e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010740:	4b05      	ldr	r3, [pc, #20]	; (8010758 <CallNvmDataChangeCallback+0x38>)
 8010742:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	88fa      	ldrh	r2, [r7, #6]
 801074a:	4610      	mov	r0, r2
 801074c:	4798      	blx	r3
    }
}
 801074e:	bf00      	nop
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	200011cc 	.word	0x200011cc

0801075c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010762:	4b1b      	ldr	r3, [pc, #108]	; (80107d0 <AckTimeoutRetriesProcess+0x74>)
 8010764:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010768:	4b19      	ldr	r3, [pc, #100]	; (80107d0 <AckTimeoutRetriesProcess+0x74>)
 801076a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801076e:	429a      	cmp	r2, r3
 8010770:	d229      	bcs.n	80107c6 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010772:	4b17      	ldr	r3, [pc, #92]	; (80107d0 <AckTimeoutRetriesProcess+0x74>)
 8010774:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010778:	3301      	adds	r3, #1
 801077a:	b2da      	uxtb	r2, r3
 801077c:	4b14      	ldr	r3, [pc, #80]	; (80107d0 <AckTimeoutRetriesProcess+0x74>)
 801077e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010782:	4b13      	ldr	r3, [pc, #76]	; (80107d0 <AckTimeoutRetriesProcess+0x74>)
 8010784:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	b2db      	uxtb	r3, r3
 801078e:	2b00      	cmp	r3, #0
 8010790:	d019      	beq.n	80107c6 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010792:	2322      	movs	r3, #34	; 0x22
 8010794:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010796:	4b0f      	ldr	r3, [pc, #60]	; (80107d4 <AckTimeoutRetriesProcess+0x78>)
 8010798:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801079c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801079e:	4b0d      	ldr	r3, [pc, #52]	; (80107d4 <AckTimeoutRetriesProcess+0x78>)
 80107a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107a4:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107a6:	4b0b      	ldr	r3, [pc, #44]	; (80107d4 <AckTimeoutRetriesProcess+0x78>)
 80107a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107ac:	f107 0208 	add.w	r2, r7, #8
 80107b0:	4611      	mov	r1, r2
 80107b2:	4618      	mov	r0, r3
 80107b4:	f003 fb14 	bl	8013de0 <RegionGetPhyParam>
 80107b8:	4603      	mov	r3, r0
 80107ba:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	b25a      	sxtb	r2, r3
 80107c0:	4b04      	ldr	r3, [pc, #16]	; (80107d4 <AckTimeoutRetriesProcess+0x78>)
 80107c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80107c6:	bf00      	nop
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	200011cc 	.word	0x200011cc
 80107d4:	200016d4 	.word	0x200016d4

080107d8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80107de:	4b14      	ldr	r3, [pc, #80]	; (8010830 <AckTimeoutRetriesFinalize+0x58>)
 80107e0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80107e4:	f083 0301 	eor.w	r3, r3, #1
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d015      	beq.n	801081a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80107ee:	2302      	movs	r3, #2
 80107f0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80107f2:	4b10      	ldr	r3, [pc, #64]	; (8010834 <AckTimeoutRetriesFinalize+0x5c>)
 80107f4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80107f6:	4b10      	ldr	r3, [pc, #64]	; (8010838 <AckTimeoutRetriesFinalize+0x60>)
 80107f8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80107fa:	4b10      	ldr	r3, [pc, #64]	; (801083c <AckTimeoutRetriesFinalize+0x64>)
 80107fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010800:	1d3a      	adds	r2, r7, #4
 8010802:	4611      	mov	r1, r2
 8010804:	4618      	mov	r0, r3
 8010806:	f003 fb14 	bl	8013e32 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 801080a:	4b09      	ldr	r3, [pc, #36]	; (8010830 <AckTimeoutRetriesFinalize+0x58>)
 801080c:	2200      	movs	r2, #0
 801080e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010812:	4b07      	ldr	r3, [pc, #28]	; (8010830 <AckTimeoutRetriesFinalize+0x58>)
 8010814:	2200      	movs	r2, #0
 8010816:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801081a:	4b05      	ldr	r3, [pc, #20]	; (8010830 <AckTimeoutRetriesFinalize+0x58>)
 801081c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010820:	4b03      	ldr	r3, [pc, #12]	; (8010830 <AckTimeoutRetriesFinalize+0x58>)
 8010822:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010826:	bf00      	nop
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	200011cc 	.word	0x200011cc
 8010834:	200018ac 	.word	0x200018ac
 8010838:	20001940 	.word	0x20001940
 801083c:	200016d4 	.word	0x200016d4

08010840 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010840:	b480      	push	{r7}
 8010842:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010844:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <IsRequestPending+0x34>)
 8010846:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801084a:	f003 0304 	and.w	r3, r3, #4
 801084e:	b2db      	uxtb	r3, r3
 8010850:	2b00      	cmp	r3, #0
 8010852:	d107      	bne.n	8010864 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010854:	4b07      	ldr	r3, [pc, #28]	; (8010874 <IsRequestPending+0x34>)
 8010856:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010860:	2b00      	cmp	r3, #0
 8010862:	d001      	beq.n	8010868 <IsRequestPending+0x28>
    {
        return 1;
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <IsRequestPending+0x2a>
    }
    return 0;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	46bd      	mov	sp, r7
 801086e:	bc80      	pop	{r7}
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	200011cc 	.word	0x200011cc

08010878 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010878:	b590      	push	{r4, r7, lr}
 801087a:	b08f      	sub	sp, #60	; 0x3c
 801087c:	af02      	add	r7, sp, #8
 801087e:	6178      	str	r0, [r7, #20]
 8010880:	6139      	str	r1, [r7, #16]
 8010882:	4613      	mov	r3, r2
 8010884:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <LoRaMacInitialization+0x1a>
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010892:	2303      	movs	r3, #3
 8010894:	e275      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00b      	beq.n	80108b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d007      	beq.n	80108b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d003      	beq.n	80108b6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d101      	bne.n	80108ba <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108b6:	2303      	movs	r3, #3
 80108b8:	e263      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80108ba:	7bfb      	ldrb	r3, [r7, #15]
 80108bc:	4618      	mov	r0, r3
 80108be:	f003 fa7f 	bl	8013dc0 <RegionIsActive>
 80108c2:	4603      	mov	r3, r0
 80108c4:	f083 0301 	eor.w	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80108ce:	2309      	movs	r3, #9
 80108d0:	e257      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80108d2:	6978      	ldr	r0, [r7, #20]
 80108d4:	f001 fef6 	bl	80126c4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80108d8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80108dc:	2100      	movs	r1, #0
 80108de:	48c7      	ldr	r0, [pc, #796]	; (8010bfc <LoRaMacInitialization+0x384>)
 80108e0:	f005 fd90 	bl	8016404 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80108e4:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80108e8:	2100      	movs	r1, #0
 80108ea:	48c5      	ldr	r0, [pc, #788]	; (8010c00 <LoRaMacInitialization+0x388>)
 80108ec:	f005 fd8a 	bl	8016404 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80108f0:	4bc3      	ldr	r3, [pc, #780]	; (8010c00 <LoRaMacInitialization+0x388>)
 80108f2:	2201      	movs	r2, #1
 80108f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80108f8:	4bc1      	ldr	r3, [pc, #772]	; (8010c00 <LoRaMacInitialization+0x388>)
 80108fa:	2201      	movs	r2, #1
 80108fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010900:	4abe      	ldr	r2, [pc, #760]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010908:	4bbc      	ldr	r3, [pc, #752]	; (8010bfc <LoRaMacInitialization+0x384>)
 801090a:	2200      	movs	r2, #0
 801090c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010910:	4bba      	ldr	r3, [pc, #744]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010912:	2200      	movs	r2, #0
 8010914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010918:	4bb8      	ldr	r3, [pc, #736]	; (8010bfc <LoRaMacInitialization+0x384>)
 801091a:	4aba      	ldr	r2, [pc, #744]	; (8010c04 <LoRaMacInitialization+0x38c>)
 801091c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010920:	230f      	movs	r3, #15
 8010922:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010926:	4bb5      	ldr	r3, [pc, #724]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801092c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010930:	4611      	mov	r1, r2
 8010932:	4618      	mov	r0, r3
 8010934:	f003 fa54 	bl	8013de0 <RegionGetPhyParam>
 8010938:	4603      	mov	r3, r0
 801093a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	bf14      	ite	ne
 8010942:	2301      	movne	r3, #1
 8010944:	2300      	moveq	r3, #0
 8010946:	b2da      	uxtb	r2, r3
 8010948:	4bac      	ldr	r3, [pc, #688]	; (8010bfc <LoRaMacInitialization+0x384>)
 801094a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801094e:	230a      	movs	r3, #10
 8010950:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010954:	4ba9      	ldr	r3, [pc, #676]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801095a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801095e:	4611      	mov	r1, r2
 8010960:	4618      	mov	r0, r3
 8010962:	f003 fa3d 	bl	8013de0 <RegionGetPhyParam>
 8010966:	4603      	mov	r3, r0
 8010968:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	b25a      	sxtb	r2, r3
 801096e:	4ba3      	ldr	r3, [pc, #652]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010970:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010974:	2306      	movs	r3, #6
 8010976:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801097a:	4ba0      	ldr	r3, [pc, #640]	; (8010bfc <LoRaMacInitialization+0x384>)
 801097c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010980:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010984:	4611      	mov	r1, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f003 fa2a 	bl	8013de0 <RegionGetPhyParam>
 801098c:	4603      	mov	r3, r0
 801098e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	b25a      	sxtb	r2, r3
 8010994:	4b99      	ldr	r3, [pc, #612]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010996:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801099a:	2310      	movs	r3, #16
 801099c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109a0:	4b96      	ldr	r3, [pc, #600]	; (8010bfc <LoRaMacInitialization+0x384>)
 80109a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109aa:	4611      	mov	r1, r2
 80109ac:	4618      	mov	r0, r3
 80109ae:	f003 fa17 	bl	8013de0 <RegionGetPhyParam>
 80109b2:	4603      	mov	r3, r0
 80109b4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	4a90      	ldr	r2, [pc, #576]	; (8010bfc <LoRaMacInitialization+0x384>)
 80109ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80109be:	2311      	movs	r3, #17
 80109c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109c4:	4b8d      	ldr	r3, [pc, #564]	; (8010bfc <LoRaMacInitialization+0x384>)
 80109c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109ce:	4611      	mov	r1, r2
 80109d0:	4618      	mov	r0, r3
 80109d2:	f003 fa05 	bl	8013de0 <RegionGetPhyParam>
 80109d6:	4603      	mov	r3, r0
 80109d8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	4a87      	ldr	r2, [pc, #540]	; (8010bfc <LoRaMacInitialization+0x384>)
 80109de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80109e2:	2312      	movs	r3, #18
 80109e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109e8:	4b84      	ldr	r3, [pc, #528]	; (8010bfc <LoRaMacInitialization+0x384>)
 80109ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109f2:	4611      	mov	r1, r2
 80109f4:	4618      	mov	r0, r3
 80109f6:	f003 f9f3 	bl	8013de0 <RegionGetPhyParam>
 80109fa:	4603      	mov	r3, r0
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80109fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a00:	4a7e      	ldr	r2, [pc, #504]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010a06:	2313      	movs	r3, #19
 8010a08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a0c:	4b7b      	ldr	r3, [pc, #492]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f003 f9e1 	bl	8013de0 <RegionGetPhyParam>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a24:	4a75      	ldr	r2, [pc, #468]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010a2a:	2314      	movs	r3, #20
 8010a2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a30:	4b72      	ldr	r3, [pc, #456]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a3a:	4611      	mov	r1, r2
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f003 f9cf 	bl	8013de0 <RegionGetPhyParam>
 8010a42:	4603      	mov	r3, r0
 8010a44:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	4a6c      	ldr	r2, [pc, #432]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010a4e:	2317      	movs	r3, #23
 8010a50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a54:	4b69      	ldr	r3, [pc, #420]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f003 f9bd 	bl	8013de0 <RegionGetPhyParam>
 8010a66:	4603      	mov	r3, r0
 8010a68:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	4b63      	ldr	r3, [pc, #396]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010a74:	2318      	movs	r3, #24
 8010a76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a7a:	4b60      	ldr	r3, [pc, #384]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a84:	4611      	mov	r1, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f003 f9aa 	bl	8013de0 <RegionGetPhyParam>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a92:	4a5a      	ldr	r2, [pc, #360]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	4a58      	ldr	r2, [pc, #352]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010a9c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010aa0:	2319      	movs	r3, #25
 8010aa2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010aa6:	4b55      	ldr	r3, [pc, #340]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010aac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f003 f994 	bl	8013de0 <RegionGetPhyParam>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	4b4e      	ldr	r3, [pc, #312]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010ac2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	4b4c      	ldr	r3, [pc, #304]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010acc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010ad0:	231e      	movs	r3, #30
 8010ad2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ad6:	4b49      	ldr	r3, [pc, #292]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010adc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f003 f97c 	bl	8013de0 <RegionGetPhyParam>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	4b42      	ldr	r3, [pc, #264]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010af2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010af6:	231f      	movs	r3, #31
 8010af8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010afc:	4b3f      	ldr	r3, [pc, #252]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b06:	4611      	mov	r1, r2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f003 f969 	bl	8013de0 <RegionGetPhyParam>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	4b39      	ldr	r3, [pc, #228]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b18:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010b1c:	2320      	movs	r3, #32
 8010b1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b22:	4b36      	ldr	r3, [pc, #216]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f003 f956 	bl	8013de0 <RegionGetPhyParam>
 8010b34:	4603      	mov	r3, r0
 8010b36:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3a:	4a30      	ldr	r2, [pc, #192]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b3c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010b40:	2321      	movs	r3, #33	; 0x21
 8010b42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b46:	4b2d      	ldr	r3, [pc, #180]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b50:	4611      	mov	r1, r2
 8010b52:	4618      	mov	r0, r3
 8010b54:	f003 f944 	bl	8013de0 <RegionGetPhyParam>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	4a27      	ldr	r2, [pc, #156]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b60:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010b64:	230b      	movs	r3, #11
 8010b66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b6a:	4b24      	ldr	r3, [pc, #144]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f003 f932 	bl	8013de0 <RegionGetPhyParam>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	4b1e      	ldr	r3, [pc, #120]	; (8010c00 <LoRaMacInitialization+0x388>)
 8010b86:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010b8a:	230c      	movs	r3, #12
 8010b8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b90:	4b1a      	ldr	r3, [pc, #104]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f003 f91f 	bl	8013de0 <RegionGetPhyParam>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	4b15      	ldr	r3, [pc, #84]	; (8010c00 <LoRaMacInitialization+0x388>)
 8010bac:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010bb0:	4b12      	ldr	r3, [pc, #72]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010bb8:	4b10      	ldr	r3, [pc, #64]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bba:	220a      	movs	r2, #10
 8010bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010bc0:	4b0e      	ldr	r3, [pc, #56]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bc2:	2206      	movs	r2, #6
 8010bc4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010bc8:	4b0c      	ldr	r3, [pc, #48]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bce:	4a0b      	ldr	r2, [pc, #44]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bd0:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010bd2:	4b0a      	ldr	r3, [pc, #40]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bd4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010bd8:	4b08      	ldr	r3, [pc, #32]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010bde:	4b07      	ldr	r3, [pc, #28]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010be4:	4a05      	ldr	r2, [pc, #20]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010be6:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010be8:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bee:	4a03      	ldr	r2, [pc, #12]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bf0:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010bf2:	4b02      	ldr	r3, [pc, #8]	; (8010bfc <LoRaMacInitialization+0x384>)
 8010bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010bf8:	e006      	b.n	8010c08 <LoRaMacInitialization+0x390>
 8010bfa:	bf00      	nop
 8010bfc:	200016d4 	.word	0x200016d4
 8010c00:	200011cc 	.word	0x200011cc
 8010c04:	01000300 	.word	0x01000300
 8010c08:	4a60      	ldr	r2, [pc, #384]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c0a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010c0c:	4b5f      	ldr	r3, [pc, #380]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c12:	4a5e      	ldr	r2, [pc, #376]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c14:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010c16:	4b5d      	ldr	r3, [pc, #372]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010c1c:	4a5b      	ldr	r2, [pc, #364]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c1e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010c20:	4b5a      	ldr	r3, [pc, #360]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c22:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010c26:	4b59      	ldr	r3, [pc, #356]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010c32:	4b57      	ldr	r3, [pc, #348]	; (8010d90 <LoRaMacInitialization+0x518>)
 8010c34:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010c36:	4b57      	ldr	r3, [pc, #348]	; (8010d94 <LoRaMacInitialization+0x51c>)
 8010c38:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010c3a:	4b54      	ldr	r3, [pc, #336]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c40:	f107 0218 	add.w	r2, r7, #24
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f003 f8f3 	bl	8013e32 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010c4c:	4a52      	ldr	r2, [pc, #328]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010c54:	f7ff f85a 	bl	800fd0c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010c58:	4b4c      	ldr	r3, [pc, #304]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010c60:	4a4d      	ldr	r2, [pc, #308]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010c68:	4b4b      	ldr	r3, [pc, #300]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010c70:	4b49      	ldr	r3, [pc, #292]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010c72:	2201      	movs	r2, #1
 8010c74:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010c78:	4b44      	ldr	r3, [pc, #272]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010c7e:	4b43      	ldr	r3, [pc, #268]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010c84:	2300      	movs	r3, #0
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	4b44      	ldr	r3, [pc, #272]	; (8010d9c <LoRaMacInitialization+0x524>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8010c90:	4843      	ldr	r0, [pc, #268]	; (8010da0 <LoRaMacInitialization+0x528>)
 8010c92:	f008 ff87 	bl	8019ba4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010c96:	2300      	movs	r3, #0
 8010c98:	9300      	str	r3, [sp, #0]
 8010c9a:	4b42      	ldr	r3, [pc, #264]	; (8010da4 <LoRaMacInitialization+0x52c>)
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8010ca2:	4841      	ldr	r0, [pc, #260]	; (8010da8 <LoRaMacInitialization+0x530>)
 8010ca4:	f008 ff7e 	bl	8019ba4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010ca8:	2300      	movs	r3, #0
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	4b3f      	ldr	r3, [pc, #252]	; (8010dac <LoRaMacInitialization+0x534>)
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8010cb4:	483e      	ldr	r0, [pc, #248]	; (8010db0 <LoRaMacInitialization+0x538>)
 8010cb6:	f008 ff75 	bl	8019ba4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010cba:	2300      	movs	r3, #0
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	4b3d      	ldr	r3, [pc, #244]	; (8010db4 <LoRaMacInitialization+0x53c>)
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8010cc6:	483c      	ldr	r0, [pc, #240]	; (8010db8 <LoRaMacInitialization+0x540>)
 8010cc8:	f008 ff6c 	bl	8019ba4 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010ccc:	4c2f      	ldr	r4, [pc, #188]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010cce:	463b      	mov	r3, r7
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f008 fd55 	bl	8019780 <SysTimeGetMcuTime>
 8010cd6:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010cda:	463a      	mov	r2, r7
 8010cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ce0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010ce4:	4b2c      	ldr	r3, [pc, #176]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010ce6:	4a35      	ldr	r2, [pc, #212]	; (8010dbc <LoRaMacInitialization+0x544>)
 8010ce8:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010cec:	4b2a      	ldr	r3, [pc, #168]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010cee:	4a34      	ldr	r2, [pc, #208]	; (8010dc0 <LoRaMacInitialization+0x548>)
 8010cf0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010cf4:	4b28      	ldr	r3, [pc, #160]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010cf6:	4a33      	ldr	r2, [pc, #204]	; (8010dc4 <LoRaMacInitialization+0x54c>)
 8010cf8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010cfc:	4b26      	ldr	r3, [pc, #152]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010cfe:	4a32      	ldr	r2, [pc, #200]	; (8010dc8 <LoRaMacInitialization+0x550>)
 8010d00:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010d04:	4b24      	ldr	r3, [pc, #144]	; (8010d98 <LoRaMacInitialization+0x520>)
 8010d06:	4a31      	ldr	r2, [pc, #196]	; (8010dcc <LoRaMacInitialization+0x554>)
 8010d08:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010d0c:	4b30      	ldr	r3, [pc, #192]	; (8010dd0 <LoRaMacInitialization+0x558>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4830      	ldr	r0, [pc, #192]	; (8010dd4 <LoRaMacInitialization+0x55c>)
 8010d12:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	482f      	ldr	r0, [pc, #188]	; (8010dd8 <LoRaMacInitialization+0x560>)
 8010d1c:	f7fb f826 	bl	800bd6c <SecureElementInit>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d26:	2311      	movs	r3, #17
 8010d28:	e02b      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010d2a:	4818      	ldr	r0, [pc, #96]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010d2c:	f002 f976 	bl	801301c <LoRaMacCryptoInit>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d36:	2311      	movs	r3, #17
 8010d38:	e023      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010d3a:	f001 fa95 	bl	8012268 <LoRaMacCommandsInit>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d44:	2313      	movs	r3, #19
 8010d46:	e01c      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010d48:	4824      	ldr	r0, [pc, #144]	; (8010ddc <LoRaMacInitialization+0x564>)
 8010d4a:	f002 fa31 	bl	80131b0 <LoRaMacCryptoSetMulticastReference>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d54:	2311      	movs	r3, #17
 8010d56:	e014      	b.n	8010d82 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010d58:	4b1d      	ldr	r3, [pc, #116]	; (8010dd0 <LoRaMacInitialization+0x558>)
 8010d5a:	695b      	ldr	r3, [r3, #20]
 8010d5c:	4798      	blx	r3
 8010d5e:	4603      	mov	r3, r0
 8010d60:	4618      	mov	r0, r3
 8010d62:	f005 faef 	bl	8016344 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010d66:	4b1a      	ldr	r3, [pc, #104]	; (8010dd0 <LoRaMacInitialization+0x558>)
 8010d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d6a:	4a08      	ldr	r2, [pc, #32]	; (8010d8c <LoRaMacInitialization+0x514>)
 8010d6c:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010d70:	4610      	mov	r0, r2
 8010d72:	4798      	blx	r3
    Radio.Sleep( );
 8010d74:	4b16      	ldr	r3, [pc, #88]	; (8010dd0 <LoRaMacInitialization+0x558>)
 8010d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d78:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010d7a:	2001      	movs	r0, #1
 8010d7c:	f7fd faaa 	bl	800e2d4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3734      	adds	r7, #52	; 0x34
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd90      	pop	{r4, r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	200016d4 	.word	0x200016d4
 8010d90:	200018ac 	.word	0x200018ac
 8010d94:	20001940 	.word	0x20001940
 8010d98:	200011cc 	.word	0x200011cc
 8010d9c:	0800e85d 	.word	0x0800e85d
 8010da0:	20001534 	.word	0x20001534
 8010da4:	0800e8d1 	.word	0x0800e8d1
 8010da8:	2000154c 	.word	0x2000154c
 8010dac:	0800e93d 	.word	0x0800e93d
 8010db0:	20001564 	.word	0x20001564
 8010db4:	0800e9b1 	.word	0x0800e9b1
 8010db8:	200015c4 	.word	0x200015c4
 8010dbc:	0800d4a1 	.word	0x0800d4a1
 8010dc0:	0800d509 	.word	0x0800d509
 8010dc4:	0800d5c1 	.word	0x0800d5c1
 8010dc8:	0800d585 	.word	0x0800d585
 8010dcc:	0800d5fd 	.word	0x0800d5fd
 8010dd0:	0802078c 	.word	0x0802078c
 8010dd4:	20001518 	.word	0x20001518
 8010dd8:	200017ec 	.word	0x200017ec
 8010ddc:	200017a4 	.word	0x200017a4

08010de0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010de0:	b480      	push	{r7}
 8010de2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010de4:	4b04      	ldr	r3, [pc, #16]	; (8010df8 <LoRaMacStart+0x18>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bc80      	pop	{r7}
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	200011cc 	.word	0x200011cc

08010dfc <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08a      	sub	sp, #40	; 0x28
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	4603      	mov	r3, r0
 8010e04:	6039      	str	r1, [r7, #0]
 8010e06:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010e08:	4b3e      	ldr	r3, [pc, #248]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e0c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010e0e:	4b3d      	ldr	r3, [pc, #244]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e10:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010e14:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010e16:	4b3b      	ldr	r3, [pc, #236]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e18:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010e1c:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d101      	bne.n	8010e2c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e28:	2303      	movs	r3, #3
 8010e2a:	e066      	b.n	8010efa <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010e2c:	4b35      	ldr	r3, [pc, #212]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010e32:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010e34:	2300      	movs	r3, #0
 8010e36:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010e38:	4b32      	ldr	r3, [pc, #200]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e3a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010e3e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010e40:	4b30      	ldr	r3, [pc, #192]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e44:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010e46:	4b30      	ldr	r3, [pc, #192]	; (8010f08 <LoRaMacQueryTxPossible+0x10c>)
 8010e48:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010e4c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010e4e:	4b2e      	ldr	r3, [pc, #184]	; (8010f08 <LoRaMacQueryTxPossible+0x10c>)
 8010e50:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010e54:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e56:	4b2b      	ldr	r3, [pc, #172]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010e5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e60:	4b28      	ldr	r3, [pc, #160]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e62:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010e66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e6a:	4b26      	ldr	r3, [pc, #152]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010e74:	4b23      	ldr	r3, [pc, #140]	; (8010f04 <LoRaMacQueryTxPossible+0x108>)
 8010e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010e7e:	f107 0310 	add.w	r3, r7, #16
 8010e82:	f107 020e 	add.w	r2, r7, #14
 8010e86:	f107 010f 	add.w	r1, r7, #15
 8010e8a:	f107 0014 	add.w	r0, r7, #20
 8010e8e:	f000 ffe1 	bl	8011e54 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fd fed2 	bl	800ec40 <GetMaxAppPayloadWithoutFOptsLength>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010ea4:	f107 0308 	add.w	r3, r7, #8
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f001 faab 	bl	8012404 <LoRaMacCommandsGetSizeSerializedCmds>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d001      	beq.n	8010eb8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010eb4:	2313      	movs	r3, #19
 8010eb6:	e020      	b.n	8010efa <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	2b0f      	cmp	r3, #15
 8010ebc:	d819      	bhi.n	8010ef2 <LoRaMacQueryTxPossible+0xf6>
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	785b      	ldrb	r3, [r3, #1]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d313      	bcc.n	8010ef2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	785a      	ldrb	r2, [r3, #1]
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	b2da      	uxtb	r2, r3
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	785b      	ldrb	r3, [r3, #1]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	79fa      	ldrb	r2, [r7, #7]
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	4299      	cmp	r1, r3
 8010ee8:	d301      	bcc.n	8010eee <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010eea:	2300      	movs	r3, #0
 8010eec:	e005      	b.n	8010efa <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010eee:	2308      	movs	r3, #8
 8010ef0:	e003      	b.n	8010efa <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010ef8:	2308      	movs	r3, #8
    }
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3728      	adds	r7, #40	; 0x28
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	200016d4 	.word	0x200016d4
 8010f08:	200011cc 	.word	0x200011cc

08010f0c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010f0c:	b590      	push	{r4, r7, lr}
 8010f0e:	b087      	sub	sp, #28
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d101      	bne.n	8010f22 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f1e:	2303      	movs	r3, #3
 8010f20:	e14b      	b.n	80111ba <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b28      	cmp	r3, #40	; 0x28
 8010f28:	f200 8140 	bhi.w	80111ac <LoRaMacMibGetRequestConfirm+0x2a0>
 8010f2c:	a201      	add	r2, pc, #4	; (adr r2, 8010f34 <LoRaMacMibGetRequestConfirm+0x28>)
 8010f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f32:	bf00      	nop
 8010f34:	08010fd9 	.word	0x08010fd9
 8010f38:	08010fe5 	.word	0x08010fe5
 8010f3c:	08010ff1 	.word	0x08010ff1
 8010f40:	08010ffd 	.word	0x08010ffd
 8010f44:	08011009 	.word	0x08011009
 8010f48:	08011015 	.word	0x08011015
 8010f4c:	08011021 	.word	0x08011021
 8010f50:	080111ad 	.word	0x080111ad
 8010f54:	080111ad 	.word	0x080111ad
 8010f58:	080111ad 	.word	0x080111ad
 8010f5c:	080111ad 	.word	0x080111ad
 8010f60:	080111ad 	.word	0x080111ad
 8010f64:	080111ad 	.word	0x080111ad
 8010f68:	080111ad 	.word	0x080111ad
 8010f6c:	080111ad 	.word	0x080111ad
 8010f70:	0801102d 	.word	0x0801102d
 8010f74:	08011039 	.word	0x08011039
 8010f78:	08011045 	.word	0x08011045
 8010f7c:	08011067 	.word	0x08011067
 8010f80:	08011079 	.word	0x08011079
 8010f84:	0801108b 	.word	0x0801108b
 8010f88:	0801109d 	.word	0x0801109d
 8010f8c:	080110d1 	.word	0x080110d1
 8010f90:	080110af 	.word	0x080110af
 8010f94:	080110f3 	.word	0x080110f3
 8010f98:	080110ff 	.word	0x080110ff
 8010f9c:	08011109 	.word	0x08011109
 8010fa0:	08011113 	.word	0x08011113
 8010fa4:	0801111d 	.word	0x0801111d
 8010fa8:	08011127 	.word	0x08011127
 8010fac:	08011131 	.word	0x08011131
 8010fb0:	0801113d 	.word	0x0801113d
 8010fb4:	08011155 	.word	0x08011155
 8010fb8:	08011149 	.word	0x08011149
 8010fbc:	08011161 	.word	0x08011161
 8010fc0:	0801116b 	.word	0x0801116b
 8010fc4:	08011177 	.word	0x08011177
 8010fc8:	0801118d 	.word	0x0801118d
 8010fcc:	08011181 	.word	0x08011181
 8010fd0:	080111ad 	.word	0x080111ad
 8010fd4:	08011199 	.word	0x08011199
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010fd8:	4b7a      	ldr	r3, [pc, #488]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fda:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	711a      	strb	r2, [r3, #4]
            break;
 8010fe2:	e0e9      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010fe4:	4b77      	ldr	r3, [pc, #476]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fe6:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	711a      	strb	r2, [r3, #4]
            break;
 8010fee:	e0e3      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8010ff0:	f7fb f934 	bl	800c25c <SecureElementGetDevEui>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	605a      	str	r2, [r3, #4]
            break;
 8010ffa:	e0dd      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010ffc:	f7fb f950 	bl	800c2a0 <SecureElementGetJoinEui>
 8011000:	4602      	mov	r2, r0
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	605a      	str	r2, [r3, #4]
            break;
 8011006:	e0d7      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011008:	4b6e      	ldr	r3, [pc, #440]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801100a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	711a      	strb	r2, [r3, #4]
            break;
 8011012:	e0d1      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011014:	4b6b      	ldr	r3, [pc, #428]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011016:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	605a      	str	r2, [r3, #4]
            break;
 801101e:	e0cb      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011020:	4b68      	ldr	r3, [pc, #416]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011022:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	605a      	str	r2, [r3, #4]
            break;
 801102a:	e0c5      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801102c:	4b65      	ldr	r3, [pc, #404]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801102e:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	711a      	strb	r2, [r3, #4]
            break;
 8011036:	e0bf      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011038:	4b62      	ldr	r3, [pc, #392]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801103a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	711a      	strb	r2, [r3, #4]
            break;
 8011042:	e0b9      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011044:	231d      	movs	r3, #29
 8011046:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011048:	4b5e      	ldr	r3, [pc, #376]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801104a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801104e:	f107 0210 	add.w	r2, r7, #16
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f002 fec3 	bl	8013de0 <RegionGetPhyParam>
 801105a:	4603      	mov	r3, r0
 801105c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	605a      	str	r2, [r3, #4]
            break;
 8011064:	e0a8      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	4a56      	ldr	r2, [pc, #344]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801106a:	3304      	adds	r3, #4
 801106c:	3264      	adds	r2, #100	; 0x64
 801106e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011072:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011076:	e09f      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	4a52      	ldr	r2, [pc, #328]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801107c:	3304      	adds	r3, #4
 801107e:	32a4      	adds	r2, #164	; 0xa4
 8011080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011084:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011088:	e096      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a4d      	ldr	r2, [pc, #308]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801108e:	3304      	adds	r3, #4
 8011090:	326c      	adds	r2, #108	; 0x6c
 8011092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011096:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801109a:	e08d      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	4a49      	ldr	r2, [pc, #292]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110a0:	3304      	adds	r3, #4
 80110a2:	32ac      	adds	r2, #172	; 0xac
 80110a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110a8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110ac:	e084      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80110ae:	231b      	movs	r3, #27
 80110b0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110b2:	4b44      	ldr	r3, [pc, #272]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110b8:	f107 0210 	add.w	r2, r7, #16
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f002 fe8e 	bl	8013de0 <RegionGetPhyParam>
 80110c4:	4603      	mov	r3, r0
 80110c6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	605a      	str	r2, [r3, #4]
            break;
 80110ce:	e073      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80110d0:	231a      	movs	r3, #26
 80110d2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110d4:	4b3b      	ldr	r3, [pc, #236]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110da:	f107 0210 	add.w	r2, r7, #16
 80110de:	4611      	mov	r1, r2
 80110e0:	4618      	mov	r0, r3
 80110e2:	f002 fe7d 	bl	8013de0 <RegionGetPhyParam>
 80110e6:	4603      	mov	r3, r0
 80110e8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	605a      	str	r2, [r3, #4]
            break;
 80110f0:	e062      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80110f2:	4b34      	ldr	r3, [pc, #208]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110f4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	711a      	strb	r2, [r3, #4]
            break;
 80110fc:	e05c      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80110fe:	4b31      	ldr	r3, [pc, #196]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011100:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	605a      	str	r2, [r3, #4]
            break;
 8011106:	e057      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011108:	4b2e      	ldr	r3, [pc, #184]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801110a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	605a      	str	r2, [r3, #4]
            break;
 8011110:	e052      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011112:	4b2c      	ldr	r3, [pc, #176]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	605a      	str	r2, [r3, #4]
            break;
 801111a:	e04d      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801111c:	4b29      	ldr	r3, [pc, #164]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801111e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	605a      	str	r2, [r3, #4]
            break;
 8011124:	e048      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011126:	4b27      	ldr	r3, [pc, #156]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	605a      	str	r2, [r3, #4]
            break;
 801112e:	e043      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011130:	4b24      	ldr	r3, [pc, #144]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011132:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	711a      	strb	r2, [r3, #4]
            break;
 801113a:	e03d      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801113c:	4b21      	ldr	r3, [pc, #132]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801113e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	711a      	strb	r2, [r3, #4]
            break;
 8011146:	e037      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011148:	4b1e      	ldr	r3, [pc, #120]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801114a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	711a      	strb	r2, [r3, #4]
            break;
 8011152:	e031      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011154:	4b1b      	ldr	r3, [pc, #108]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011156:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	711a      	strb	r2, [r3, #4]
            break;
 801115e:	e02b      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011160:	4b18      	ldr	r3, [pc, #96]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	605a      	str	r2, [r3, #4]
            break;
 8011168:	e026      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801116a:	4b16      	ldr	r3, [pc, #88]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801116c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	711a      	strb	r2, [r3, #4]
            break;
 8011174:	e020      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011176:	4b13      	ldr	r3, [pc, #76]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011178:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	605a      	str	r2, [r3, #4]
            break;
 801117e:	e01b      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8011180:	f7ff f934 	bl	80103ec <GetNvmData>
 8011184:	4602      	mov	r2, r0
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	605a      	str	r2, [r3, #4]
            break;
 801118a:	e015      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801118c:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801118e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	605a      	str	r2, [r3, #4]
            break;
 8011196:	e00f      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a0a      	ldr	r2, [pc, #40]	; (80111c4 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801119c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80111a0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80111a2:	687c      	ldr	r4, [r7, #4]
 80111a4:	f002 ffa4 	bl	80140f0 <RegionGetVersion>
 80111a8:	60a0      	str	r0, [r4, #8]
            break;
 80111aa:	e005      	b.n	80111b8 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 fefd 	bl	8011fac <LoRaMacClassBMibGetRequestConfirm>
 80111b2:	4603      	mov	r3, r0
 80111b4:	75fb      	strb	r3, [r7, #23]
            break;
 80111b6:	bf00      	nop
        }
    }
    return status;
 80111b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	371c      	adds	r7, #28
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd90      	pop	{r4, r7, pc}
 80111c2:	bf00      	nop
 80111c4:	200016d4 	.word	0x200016d4

080111c8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b086      	sub	sp, #24
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80111d0:	2300      	movs	r3, #0
 80111d2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80111da:	2303      	movs	r3, #3
 80111dc:	e32b      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80111de:	4bb4      	ldr	r3, [pc, #720]	; (80114b0 <LoRaMacMibSetRequestConfirm+0x2e8>)
 80111e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80111e4:	f003 0302 	and.w	r3, r3, #2
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80111ec:	2301      	movs	r3, #1
 80111ee:	e322      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b27      	cmp	r3, #39	; 0x27
 80111f6:	f200 82fc 	bhi.w	80117f2 <LoRaMacMibSetRequestConfirm+0x62a>
 80111fa:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <LoRaMacMibSetRequestConfirm+0x38>)
 80111fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011200:	080112a1 	.word	0x080112a1
 8011204:	080112b1 	.word	0x080112b1
 8011208:	080112cb 	.word	0x080112cb
 801120c:	080112e3 	.word	0x080112e3
 8011210:	080112fb 	.word	0x080112fb
 8011214:	08011307 	.word	0x08011307
 8011218:	08011313 	.word	0x08011313
 801121c:	0801131f 	.word	0x0801131f
 8011220:	08011345 	.word	0x08011345
 8011224:	0801136b 	.word	0x0801136b
 8011228:	08011391 	.word	0x08011391
 801122c:	080113b7 	.word	0x080113b7
 8011230:	080113dd 	.word	0x080113dd
 8011234:	08011403 	.word	0x08011403
 8011238:	08011429 	.word	0x08011429
 801123c:	0801144f 	.word	0x0801144f
 8011240:	0801146f 	.word	0x0801146f
 8011244:	080117f3 	.word	0x080117f3
 8011248:	0801147b 	.word	0x0801147b
 801124c:	080114f9 	.word	0x080114f9
 8011250:	08011539 	.word	0x08011539
 8011254:	0801159b 	.word	0x0801159b
 8011258:	0801160b 	.word	0x0801160b
 801125c:	080115db 	.word	0x080115db
 8011260:	0801163b 	.word	0x0801163b
 8011264:	0801165d 	.word	0x0801165d
 8011268:	08011667 	.word	0x08011667
 801126c:	08011671 	.word	0x08011671
 8011270:	0801167b 	.word	0x0801167b
 8011274:	08011685 	.word	0x08011685
 8011278:	0801168f 	.word	0x0801168f
 801127c:	080116c1 	.word	0x080116c1
 8011280:	0801172d 	.word	0x0801172d
 8011284:	080116fb 	.word	0x080116fb
 8011288:	0801175f 	.word	0x0801175f
 801128c:	08011775 	.word	0x08011775
 8011290:	08011795 	.word	0x08011795
 8011294:	0801179f 	.word	0x0801179f
 8011298:	080117ab 	.word	0x080117ab
 801129c:	080117c9 	.word	0x080117c9
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	791b      	ldrb	r3, [r3, #4]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fd fbfb 	bl	800eaa0 <SwitchClass>
 80112aa:	4603      	mov	r3, r0
 80112ac:	75fb      	strb	r3, [r7, #23]
            break;
 80112ae:	e2c1      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	791b      	ldrb	r3, [r3, #4]
 80112b4:	2b02      	cmp	r3, #2
 80112b6:	d005      	beq.n	80112c4 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	791a      	ldrb	r2, [r3, #4]
 80112bc:	4b7d      	ldr	r3, [pc, #500]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80112be:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80112c2:	e2b7      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112c4:	2303      	movs	r3, #3
 80112c6:	75fb      	strb	r3, [r7, #23]
            break;
 80112c8:	e2b4      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fa ffac 	bl	800c22c <SecureElementSetDevEui>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f000 8291 	beq.w	80117fe <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112dc:	2303      	movs	r3, #3
 80112de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112e0:	e28d      	b.n	80117fe <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fa ffc2 	bl	800c270 <SecureElementSetJoinEui>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 8287 	beq.w	8011802 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112f4:	2303      	movs	r3, #3
 80112f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112f8:	e283      	b.n	8011802 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	791a      	ldrb	r2, [r3, #4]
 80112fe:	4b6d      	ldr	r3, [pc, #436]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8011300:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011304:	e296      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	4a6a      	ldr	r2, [pc, #424]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801130c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011310:	e290      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	4a67      	ldr	r2, [pc, #412]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8011318:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801131c:	e28a      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00b      	beq.n	801133e <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	4619      	mov	r1, r3
 801132c:	2000      	movs	r0, #0
 801132e:	f001 ff67 	bl	8013200 <LoRaMacCryptoSetKey>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	f000 8266 	beq.w	8011806 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801133a:	2311      	movs	r3, #17
 801133c:	e27b      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801133e:	2303      	movs	r3, #3
 8011340:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011342:	e260      	b.n	8011806 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00b      	beq.n	8011364 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	4619      	mov	r1, r3
 8011352:	2001      	movs	r0, #1
 8011354:	f001 ff54 	bl	8013200 <LoRaMacCryptoSetKey>
 8011358:	4603      	mov	r3, r0
 801135a:	2b00      	cmp	r3, #0
 801135c:	f000 8255 	beq.w	801180a <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011360:	2311      	movs	r3, #17
 8011362:	e268      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011364:	2303      	movs	r3, #3
 8011366:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011368:	e24f      	b.n	801180a <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00b      	beq.n	801138a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	4619      	mov	r1, r3
 8011378:	2002      	movs	r0, #2
 801137a:	f001 ff41 	bl	8013200 <LoRaMacCryptoSetKey>
 801137e:	4603      	mov	r3, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	f000 8244 	beq.w	801180e <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011386:	2311      	movs	r3, #17
 8011388:	e255      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801138a:	2303      	movs	r3, #3
 801138c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801138e:	e23e      	b.n	801180e <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00b      	beq.n	80113b0 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	685b      	ldr	r3, [r3, #4]
 801139c:	4619      	mov	r1, r3
 801139e:	2003      	movs	r0, #3
 80113a0:	f001 ff2e 	bl	8013200 <LoRaMacCryptoSetKey>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 8233 	beq.w	8011812 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113ac:	2311      	movs	r3, #17
 80113ae:	e242      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113b0:	2303      	movs	r3, #3
 80113b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113b4:	e22d      	b.n	8011812 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00b      	beq.n	80113d6 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	4619      	mov	r1, r3
 80113c4:	207f      	movs	r0, #127	; 0x7f
 80113c6:	f001 ff1b 	bl	8013200 <LoRaMacCryptoSetKey>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	f000 8222 	beq.w	8011816 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113d2:	2311      	movs	r3, #17
 80113d4:	e22f      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113d6:	2303      	movs	r3, #3
 80113d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113da:	e21c      	b.n	8011816 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00b      	beq.n	80113fc <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	4619      	mov	r1, r3
 80113ea:	2080      	movs	r0, #128	; 0x80
 80113ec:	f001 ff08 	bl	8013200 <LoRaMacCryptoSetKey>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f000 8211 	beq.w	801181a <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113f8:	2311      	movs	r3, #17
 80113fa:	e21c      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113fc:	2303      	movs	r3, #3
 80113fe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011400:	e20b      	b.n	801181a <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00b      	beq.n	8011422 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4619      	mov	r1, r3
 8011410:	2081      	movs	r0, #129	; 0x81
 8011412:	f001 fef5 	bl	8013200 <LoRaMacCryptoSetKey>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	f000 8200 	beq.w	801181e <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801141e:	2311      	movs	r3, #17
 8011420:	e209      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011422:	2303      	movs	r3, #3
 8011424:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011426:	e1fa      	b.n	801181e <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00b      	beq.n	8011448 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	4619      	mov	r1, r3
 8011436:	2082      	movs	r0, #130	; 0x82
 8011438:	f001 fee2 	bl	8013200 <LoRaMacCryptoSetKey>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 81ef 	beq.w	8011822 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011444:	2311      	movs	r3, #17
 8011446:	e1f6      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011448:	2303      	movs	r3, #3
 801144a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801144c:	e1e9      	b.n	8011822 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	791a      	ldrb	r2, [r3, #4]
 8011452:	4b18      	ldr	r3, [pc, #96]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8011454:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011458:	4b17      	ldr	r3, [pc, #92]	; (80114b8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 801145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801145c:	4a15      	ldr	r2, [pc, #84]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801145e:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8011462:	4610      	mov	r0, r2
 8011464:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011466:	4b14      	ldr	r3, [pc, #80]	; (80114b8 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8011468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 801146c:	e1e2      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	791a      	ldrb	r2, [r3, #4]
 8011472:	4b10      	ldr	r3, [pc, #64]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8011474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011478:	e1dc      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7a1b      	ldrb	r3, [r3, #8]
 801147e:	b25b      	sxtb	r3, r3
 8011480:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011482:	4b0c      	ldr	r3, [pc, #48]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8011484:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011488:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801148a:	4b0a      	ldr	r3, [pc, #40]	; (80114b4 <LoRaMacMibSetRequestConfirm+0x2ec>)
 801148c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011490:	f107 0108 	add.w	r1, r7, #8
 8011494:	2207      	movs	r2, #7
 8011496:	4618      	mov	r0, r3
 8011498:	f002 fcdd 	bl	8013e56 <RegionVerify>
 801149c:	4603      	mov	r3, r0
 801149e:	f083 0301 	eor.w	r3, r3, #1
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d009      	beq.n	80114bc <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114a8:	2303      	movs	r3, #3
 80114aa:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80114ac:	e1c2      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
 80114ae:	bf00      	nop
 80114b0:	200011cc 	.word	0x200011cc
 80114b4:	200016d4 	.word	0x200016d4
 80114b8:	0802078c 	.word	0x0802078c
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80114c2:	4bb2      	ldr	r3, [pc, #712]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80114c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114c8:	f107 0108 	add.w	r1, r7, #8
 80114cc:	2200      	movs	r2, #0
 80114ce:	4618      	mov	r0, r3
 80114d0:	f002 fcc1 	bl	8013e56 <RegionVerify>
 80114d4:	4603      	mov	r3, r0
 80114d6:	f083 0301 	eor.w	r3, r3, #1
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d002      	beq.n	80114e6 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114e0:	2303      	movs	r3, #3
 80114e2:	75fb      	strb	r3, [r7, #23]
            break;
 80114e4:	e1a6      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80114e6:	4ba9      	ldr	r3, [pc, #676]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	3364      	adds	r3, #100	; 0x64
 80114ec:	3204      	adds	r2, #4
 80114ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80114f6:	e19d      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	7a1b      	ldrb	r3, [r3, #8]
 80114fc:	b25b      	sxtb	r3, r3
 80114fe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011500:	4ba2      	ldr	r3, [pc, #648]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011502:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011506:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011508:	4ba0      	ldr	r3, [pc, #640]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801150a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801150e:	f107 0108 	add.w	r1, r7, #8
 8011512:	2207      	movs	r2, #7
 8011514:	4618      	mov	r0, r3
 8011516:	f002 fc9e 	bl	8013e56 <RegionVerify>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d008      	beq.n	8011532 <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011520:	4b9a      	ldr	r3, [pc, #616]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	33a4      	adds	r3, #164	; 0xa4
 8011526:	3204      	adds	r2, #4
 8011528:	e892 0003 	ldmia.w	r2, {r0, r1}
 801152c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011530:	e180      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011532:	2303      	movs	r3, #3
 8011534:	75fb      	strb	r3, [r7, #23]
            break;
 8011536:	e17d      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	7a1b      	ldrb	r3, [r3, #8]
 801153c:	b25b      	sxtb	r3, r3
 801153e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011540:	4b92      	ldr	r3, [pc, #584]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011542:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011546:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011548:	4b90      	ldr	r3, [pc, #576]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801154a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801154e:	f107 0108 	add.w	r1, r7, #8
 8011552:	2207      	movs	r2, #7
 8011554:	4618      	mov	r0, r3
 8011556:	f002 fc7e 	bl	8013e56 <RegionVerify>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d019      	beq.n	8011594 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011560:	4b8a      	ldr	r3, [pc, #552]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	336c      	adds	r3, #108	; 0x6c
 8011566:	3204      	adds	r2, #4
 8011568:	e892 0003 	ldmia.w	r2, {r0, r1}
 801156c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011570:	4b86      	ldr	r3, [pc, #536]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011572:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011576:	2b02      	cmp	r3, #2
 8011578:	f040 8155 	bne.w	8011826 <LoRaMacMibSetRequestConfirm+0x65e>
 801157c:	4b83      	ldr	r3, [pc, #524]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801157e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011582:	2b00      	cmp	r3, #0
 8011584:	f000 814f 	beq.w	8011826 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011588:	4b81      	ldr	r3, [pc, #516]	; (8011790 <LoRaMacMibSetRequestConfirm+0x5c8>)
 801158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801158c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801158e:	f7fe fcd9 	bl	800ff44 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011592:	e148      	b.n	8011826 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011594:	2303      	movs	r3, #3
 8011596:	75fb      	strb	r3, [r7, #23]
            break;
 8011598:	e145      	b.n	8011826 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7a1b      	ldrb	r3, [r3, #8]
 801159e:	b25b      	sxtb	r3, r3
 80115a0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115a2:	4b7a      	ldr	r3, [pc, #488]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80115a4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115a8:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115aa:	4b78      	ldr	r3, [pc, #480]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80115ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115b0:	f107 0108 	add.w	r1, r7, #8
 80115b4:	2207      	movs	r2, #7
 80115b6:	4618      	mov	r0, r3
 80115b8:	f002 fc4d 	bl	8013e56 <RegionVerify>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d008      	beq.n	80115d4 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80115c2:	4b72      	ldr	r3, [pc, #456]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	33ac      	adds	r3, #172	; 0xac
 80115c8:	3204      	adds	r2, #4
 80115ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ce:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115d2:	e12f      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115d4:	2303      	movs	r3, #3
 80115d6:	75fb      	strb	r3, [r7, #23]
            break;
 80115d8:	e12c      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80115e0:	2301      	movs	r3, #1
 80115e2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80115e4:	4b69      	ldr	r3, [pc, #420]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80115e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115ea:	f107 020c 	add.w	r2, r7, #12
 80115ee:	4611      	mov	r1, r2
 80115f0:	4618      	mov	r0, r3
 80115f2:	f002 fc59 	bl	8013ea8 <RegionChanMaskSet>
 80115f6:	4603      	mov	r3, r0
 80115f8:	f083 0301 	eor.w	r3, r3, #1
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 8113 	beq.w	801182a <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011604:	2303      	movs	r3, #3
 8011606:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011608:	e10f      	b.n	801182a <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685b      	ldr	r3, [r3, #4]
 801160e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011610:	2300      	movs	r3, #0
 8011612:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011614:	4b5d      	ldr	r3, [pc, #372]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801161a:	f107 020c 	add.w	r2, r7, #12
 801161e:	4611      	mov	r1, r2
 8011620:	4618      	mov	r0, r3
 8011622:	f002 fc41 	bl	8013ea8 <RegionChanMaskSet>
 8011626:	4603      	mov	r3, r0
 8011628:	f083 0301 	eor.w	r3, r3, #1
 801162c:	b2db      	uxtb	r3, r3
 801162e:	2b00      	cmp	r3, #0
 8011630:	f000 80fd 	beq.w	801182e <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011634:	2303      	movs	r3, #3
 8011636:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011638:	e0f9      	b.n	801182e <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	791b      	ldrb	r3, [r3, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d009      	beq.n	8011656 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011646:	2b0f      	cmp	r3, #15
 8011648:	d805      	bhi.n	8011656 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	791a      	ldrb	r2, [r3, #4]
 801164e:	4b4f      	ldr	r3, [pc, #316]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011650:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011654:	e0ee      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011656:	2303      	movs	r3, #3
 8011658:	75fb      	strb	r3, [r7, #23]
            break;
 801165a:	e0eb      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	4a4a      	ldr	r2, [pc, #296]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011662:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011664:	e0e6      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	4a48      	ldr	r2, [pc, #288]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801166c:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801166e:	e0e1      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	4a45      	ldr	r2, [pc, #276]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011676:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011678:	e0dc      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	4a43      	ldr	r2, [pc, #268]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011680:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011682:	e0d7      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	4a40      	ldr	r2, [pc, #256]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801168a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801168c:	e0d2      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011694:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011696:	4b3d      	ldr	r3, [pc, #244]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801169c:	f107 0108 	add.w	r1, r7, #8
 80116a0:	2206      	movs	r2, #6
 80116a2:	4618      	mov	r0, r3
 80116a4:	f002 fbd7 	bl	8013e56 <RegionVerify>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d005      	beq.n	80116ba <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80116ae:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80116b2:	4b36      	ldr	r3, [pc, #216]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80116b4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116b8:	e0bc      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116ba:	2303      	movs	r3, #3
 80116bc:	75fb      	strb	r3, [r7, #23]
            break;
 80116be:	e0b9      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80116c6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80116c8:	4b30      	ldr	r3, [pc, #192]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80116ca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80116ce:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80116d0:	4b2e      	ldr	r3, [pc, #184]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80116d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116d6:	f107 0108 	add.w	r1, r7, #8
 80116da:	2205      	movs	r2, #5
 80116dc:	4618      	mov	r0, r3
 80116de:	f002 fbba 	bl	8013e56 <RegionVerify>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80116e8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80116ec:	4b27      	ldr	r3, [pc, #156]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 80116ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116f2:	e09f      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116f4:	2303      	movs	r3, #3
 80116f6:	75fb      	strb	r3, [r7, #23]
            break;
 80116f8:	e09c      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011700:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011702:	4b22      	ldr	r3, [pc, #136]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011708:	f107 0108 	add.w	r1, r7, #8
 801170c:	220a      	movs	r2, #10
 801170e:	4618      	mov	r0, r3
 8011710:	f002 fba1 	bl	8013e56 <RegionVerify>
 8011714:	4603      	mov	r3, r0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d005      	beq.n	8011726 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801171a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801171e:	4b1b      	ldr	r3, [pc, #108]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011720:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011724:	e086      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011726:	2303      	movs	r3, #3
 8011728:	75fb      	strb	r3, [r7, #23]
            break;
 801172a:	e083      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011732:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011734:	4b15      	ldr	r3, [pc, #84]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801173a:	f107 0108 	add.w	r1, r7, #8
 801173e:	2209      	movs	r2, #9
 8011740:	4618      	mov	r0, r3
 8011742:	f002 fb88 	bl	8013e56 <RegionVerify>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d005      	beq.n	8011758 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801174c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011750:	4b0e      	ldr	r3, [pc, #56]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011756:	e06d      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011758:	2303      	movs	r3, #3
 801175a:	75fb      	strb	r3, [r7, #23]
            break;
 801175c:	e06a      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	4a0a      	ldr	r2, [pc, #40]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011764:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011768:	4b08      	ldr	r3, [pc, #32]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801176a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801176e:	4a07      	ldr	r2, [pc, #28]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011770:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011772:	e05f      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	791a      	ldrb	r2, [r3, #4]
 8011778:	4b04      	ldr	r3, [pc, #16]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 801177a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801177e:	4b03      	ldr	r3, [pc, #12]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011780:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011784:	4b01      	ldr	r3, [pc, #4]	; (801178c <LoRaMacMibSetRequestConfirm+0x5c4>)
 8011786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 801178a:	e053      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
 801178c:	200016d4 	.word	0x200016d4
 8011790:	0802078c 	.word	0x0802078c
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4a29      	ldr	r2, [pc, #164]	; (8011840 <LoRaMacMibSetRequestConfirm+0x678>)
 801179a:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801179c:	e04a      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	4a27      	ldr	r2, [pc, #156]	; (8011840 <LoRaMacMibSetRequestConfirm+0x678>)
 80117a4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 80117a8:	e044      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d007      	beq.n	80117c2 <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fe fe22 	bl	8010400 <RestoreNvmData>
 80117bc:	4603      	mov	r3, r0
 80117be:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117c0:	e038      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117c2:	2303      	movs	r3, #3
 80117c4:	75fb      	strb	r3, [r7, #23]
            break;
 80117c6:	e035      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	799b      	ldrb	r3, [r3, #6]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d80d      	bhi.n	80117ec <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80117d0:	4a1b      	ldr	r2, [pc, #108]	; (8011840 <LoRaMacMibSetRequestConfirm+0x678>)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	685b      	ldr	r3, [r3, #4]
 80117d6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6858      	ldr	r0, [r3, #4]
 80117de:	f001 fc49 	bl	8013074 <LoRaMacCryptoSetLrWanVersion>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d024      	beq.n	8011832 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117e8:	2311      	movs	r3, #17
 80117ea:	e024      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117ec:	2303      	movs	r3, #3
 80117ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117f0:	e01f      	b.n	8011832 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fbe4 	bl	8011fc0 <LoRaMacMibClassBSetRequestConfirm>
 80117f8:	4603      	mov	r3, r0
 80117fa:	75fb      	strb	r3, [r7, #23]
            break;
 80117fc:	e01a      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80117fe:	bf00      	nop
 8011800:	e018      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011802:	bf00      	nop
 8011804:	e016      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011806:	bf00      	nop
 8011808:	e014      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801180a:	bf00      	nop
 801180c:	e012      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801180e:	bf00      	nop
 8011810:	e010      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011812:	bf00      	nop
 8011814:	e00e      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011816:	bf00      	nop
 8011818:	e00c      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801181a:	bf00      	nop
 801181c:	e00a      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801181e:	bf00      	nop
 8011820:	e008      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011822:	bf00      	nop
 8011824:	e006      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011826:	bf00      	nop
 8011828:	e004      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801182a:	bf00      	nop
 801182c:	e002      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801182e:	bf00      	nop
 8011830:	e000      	b.n	8011834 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011832:	bf00      	nop
        }
    }
    return status;
 8011834:	7dfb      	ldrb	r3, [r7, #23]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3718      	adds	r7, #24
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	200016d4 	.word	0x200016d4

08011844 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801184c:	2302      	movs	r3, #2
 801184e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011850:	2300      	movs	r3, #0
 8011852:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d101      	bne.n	801185e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801185a:	2303      	movs	r3, #3
 801185c:	e127      	b.n	8011aae <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801185e:	f7fc fd23 	bl	800e2a8 <LoRaMacIsBusy>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011868:	2301      	movs	r3, #1
 801186a:	e120      	b.n	8011aae <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801186c:	f001 f8a6 	bl	80129bc <LoRaMacConfirmQueueIsFull>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d001      	beq.n	801187a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011876:	2301      	movs	r3, #1
 8011878:	e119      	b.n	8011aae <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801187a:	f001 f893 	bl	80129a4 <LoRaMacConfirmQueueGetCnt>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d104      	bne.n	801188e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011884:	2214      	movs	r2, #20
 8011886:	2100      	movs	r1, #0
 8011888:	488b      	ldr	r0, [pc, #556]	; (8011ab8 <LoRaMacMlmeRequest+0x274>)
 801188a:	f004 fdbb 	bl	8016404 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801188e:	4b8b      	ldr	r3, [pc, #556]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 8011890:	2201      	movs	r2, #1
 8011892:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011896:	4a89      	ldr	r2, [pc, #548]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 8011898:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801189c:	f043 0304 	orr.w	r3, r3, #4
 80118a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80118ae:	2300      	movs	r3, #0
 80118b0:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	2b0d      	cmp	r3, #13
 80118ba:	f200 80ce 	bhi.w	8011a5a <LoRaMacMlmeRequest+0x216>
 80118be:	a201      	add	r2, pc, #4	; (adr r2, 80118c4 <LoRaMacMlmeRequest+0x80>)
 80118c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c4:	080118fd 	.word	0x080118fd
 80118c8:	08011a5b 	.word	0x08011a5b
 80118cc:	08011a5b 	.word	0x08011a5b
 80118d0:	08011967 	.word	0x08011967
 80118d4:	08011985 	.word	0x08011985
 80118d8:	08011995 	.word	0x08011995
 80118dc:	08011a5b 	.word	0x08011a5b
 80118e0:	08011a5b 	.word	0x08011a5b
 80118e4:	08011a5b 	.word	0x08011a5b
 80118e8:	080119b1 	.word	0x080119b1
 80118ec:	08011a5b 	.word	0x08011a5b
 80118f0:	08011a2f 	.word	0x08011a2f
 80118f4:	080119cf 	.word	0x080119cf
 80118f8:	08011a11 	.word	0x08011a11
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80118fc:	4b6f      	ldr	r3, [pc, #444]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 80118fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011902:	f003 0320 	and.w	r3, r3, #32
 8011906:	2b00      	cmp	r3, #0
 8011908:	d001      	beq.n	801190e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801190a:	2301      	movs	r3, #1
 801190c:	e0cf      	b.n	8011aae <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 801190e:	f7fe f9fd 	bl	800fd0c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011912:	4b6b      	ldr	r3, [pc, #428]	; (8011ac0 <LoRaMacMlmeRequest+0x27c>)
 8011914:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	791b      	ldrb	r3, [r3, #4]
 801191c:	b25b      	sxtb	r3, r3
 801191e:	2200      	movs	r2, #0
 8011920:	4619      	mov	r1, r3
 8011922:	f002 fb80 	bl	8014026 <RegionAlternateDr>
 8011926:	4603      	mov	r3, r0
 8011928:	461a      	mov	r2, r3
 801192a:	4b65      	ldr	r3, [pc, #404]	; (8011ac0 <LoRaMacMlmeRequest+0x27c>)
 801192c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011930:	2307      	movs	r3, #7
 8011932:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011934:	20ff      	movs	r0, #255	; 0xff
 8011936:	f7fd ff61 	bl	800f7fc <SendReJoinReq>
 801193a:	4603      	mov	r3, r0
 801193c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801193e:	7dfb      	ldrb	r3, [r7, #23]
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 808c 	beq.w	8011a5e <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011946:	4b5e      	ldr	r3, [pc, #376]	; (8011ac0 <LoRaMacMlmeRequest+0x27c>)
 8011948:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	791b      	ldrb	r3, [r3, #4]
 8011950:	b25b      	sxtb	r3, r3
 8011952:	2201      	movs	r2, #1
 8011954:	4619      	mov	r1, r3
 8011956:	f002 fb66 	bl	8014026 <RegionAlternateDr>
 801195a:	4603      	mov	r3, r0
 801195c:	461a      	mov	r2, r3
 801195e:	4b58      	ldr	r3, [pc, #352]	; (8011ac0 <LoRaMacMlmeRequest+0x27c>)
 8011960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011964:	e07b      	b.n	8011a5e <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801196a:	f107 030c 	add.w	r3, r7, #12
 801196e:	2200      	movs	r2, #0
 8011970:	4619      	mov	r1, r3
 8011972:	2002      	movs	r0, #2
 8011974:	f000 fc88 	bl	8012288 <LoRaMacCommandsAddCmd>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d071      	beq.n	8011a62 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801197e:	2313      	movs	r3, #19
 8011980:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011982:	e06e      	b.n	8011a62 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	889b      	ldrh	r3, [r3, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	f7fe fcdb 	bl	8010344 <SetTxContinuousWave>
 801198e:	4603      	mov	r3, r0
 8011990:	75fb      	strb	r3, [r7, #23]
            break;
 8011992:	e06d      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	8898      	ldrh	r0, [r3, #4]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6899      	ldr	r1, [r3, #8]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	461a      	mov	r2, r3
 80119a6:	f7fe fd01 	bl	80103ac <SetTxContinuousWave1>
 80119aa:	4603      	mov	r3, r0
 80119ac:	75fb      	strb	r3, [r7, #23]
            break;
 80119ae:	e05f      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80119b0:	2300      	movs	r3, #0
 80119b2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80119b4:	f107 030c 	add.w	r3, r7, #12
 80119b8:	2200      	movs	r2, #0
 80119ba:	4619      	mov	r1, r3
 80119bc:	200d      	movs	r0, #13
 80119be:	f000 fc63 	bl	8012288 <LoRaMacCommandsAddCmd>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d04e      	beq.n	8011a66 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80119c8:	2313      	movs	r3, #19
 80119ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119cc:	e04b      	b.n	8011a66 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80119ce:	4b3c      	ldr	r3, [pc, #240]	; (8011ac0 <LoRaMacMlmeRequest+0x27c>)
 80119d0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d148      	bne.n	8011a6a <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	791b      	ldrb	r3, [r3, #4]
 80119dc:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	791b      	ldrb	r3, [r3, #4]
 80119e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80119e6:	b2db      	uxtb	r3, r3
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 fabe 	bl	8011f6a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80119ee:	7dbb      	ldrb	r3, [r7, #22]
 80119f0:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 80119f2:	2300      	movs	r3, #0
 80119f4:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80119f6:	f107 030c 	add.w	r3, r7, #12
 80119fa:	2201      	movs	r2, #1
 80119fc:	4619      	mov	r1, r3
 80119fe:	2010      	movs	r0, #16
 8011a00:	f000 fc42 	bl	8012288 <LoRaMacCommandsAddCmd>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d02f      	beq.n	8011a6a <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a0a:	2313      	movs	r3, #19
 8011a0c:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011a0e:	e02c      	b.n	8011a6a <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a10:	2300      	movs	r3, #0
 8011a12:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a14:	f107 030c 	add.w	r3, r7, #12
 8011a18:	2200      	movs	r2, #0
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	2012      	movs	r0, #18
 8011a1e:	f000 fc33 	bl	8012288 <LoRaMacCommandsAddCmd>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d022      	beq.n	8011a6e <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a28:	2313      	movs	r3, #19
 8011a2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a2c:	e01f      	b.n	8011a6e <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011a32:	f000 fa50 	bl	8011ed6 <LoRaMacClassBIsAcquisitionInProgress>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f083 0301 	eor.w	r3, r3, #1
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d008      	beq.n	8011a54 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011a42:	2000      	movs	r0, #0
 8011a44:	f000 fa29 	bl	8011e9a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011a48:	2000      	movs	r0, #0
 8011a4a:	f000 fa4b 	bl	8011ee4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011a52:	e00d      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011a54:	2301      	movs	r3, #1
 8011a56:	75fb      	strb	r3, [r7, #23]
            break;
 8011a58:	e00a      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011a5a:	bf00      	nop
 8011a5c:	e008      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a5e:	bf00      	nop
 8011a60:	e006      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a62:	bf00      	nop
 8011a64:	e004      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a66:	bf00      	nop
 8011a68:	e002      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a6a:	bf00      	nop
 8011a6c:	e000      	b.n	8011a70 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a6e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011a70:	4b12      	ldr	r3, [pc, #72]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 8011a72:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011a7a:	7dfb      	ldrb	r3, [r7, #23]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d010      	beq.n	8011aa2 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011a80:	f000 ff90 	bl	80129a4 <LoRaMacConfirmQueueGetCnt>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d110      	bne.n	8011aac <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011a8a:	4b0c      	ldr	r3, [pc, #48]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011a92:	4a0a      	ldr	r2, [pc, #40]	; (8011abc <LoRaMacMlmeRequest+0x278>)
 8011a94:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a98:	f36f 0382 	bfc	r3, #2, #1
 8011a9c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011aa0:	e004      	b.n	8011aac <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011aa2:	f107 0310 	add.w	r3, r7, #16
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f000 fe2e 	bl	8012708 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3718      	adds	r7, #24
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20001618 	.word	0x20001618
 8011abc:	200011cc 	.word	0x200011cc
 8011ac0:	200016d4 	.word	0x200016d4

08011ac4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08c      	sub	sp, #48	; 0x30
 8011ac8:	af02      	add	r7, sp, #8
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	460b      	mov	r3, r1
 8011ace:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011adc:	2300      	movs	r3, #0
 8011ade:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d101      	bne.n	8011af2 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011aee:	2303      	movs	r3, #3
 8011af0:	e0d4      	b.n	8011c9c <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011af2:	f7fc fbd9 	bl	800e2a8 <LoRaMacIsBusy>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d001      	beq.n	8011b00 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011afc:	2301      	movs	r3, #1
 8011afe:	e0cd      	b.n	8011c9c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011b00:	2300      	movs	r3, #0
 8011b02:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011b04:	2214      	movs	r2, #20
 8011b06:	2100      	movs	r1, #0
 8011b08:	4866      	ldr	r0, [pc, #408]	; (8011ca4 <LoRaMacMcpsRequest+0x1e0>)
 8011b0a:	f004 fc7b 	bl	8016404 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b0e:	4b66      	ldr	r3, [pc, #408]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011b16:	4b64      	ldr	r3, [pc, #400]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011b18:	2201      	movs	r2, #1
 8011b1a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b03      	cmp	r3, #3
 8011b24:	d03d      	beq.n	8011ba2 <LoRaMacMcpsRequest+0xde>
 8011b26:	2b03      	cmp	r3, #3
 8011b28:	dc4f      	bgt.n	8011bca <LoRaMacMcpsRequest+0x106>
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d002      	beq.n	8011b34 <LoRaMacMcpsRequest+0x70>
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d019      	beq.n	8011b66 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011b32:	e04a      	b.n	8011bca <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011b34:	2301      	movs	r3, #1
 8011b36:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011b38:	4b5b      	ldr	r3, [pc, #364]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011b40:	7b3b      	ldrb	r3, [r7, #12]
 8011b42:	2202      	movs	r2, #2
 8011b44:	f362 1347 	bfi	r3, r2, #5, #3
 8011b48:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	791b      	ldrb	r3, [r3, #4]
 8011b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	7b9b      	ldrb	r3, [r3, #14]
 8011b62:	777b      	strb	r3, [r7, #29]
            break;
 8011b64:	e032      	b.n	8011bcc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011b66:	2301      	movs	r3, #1
 8011b68:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	7bdb      	ldrb	r3, [r3, #15]
 8011b6e:	2b08      	cmp	r3, #8
 8011b70:	bf28      	it	cs
 8011b72:	2308      	movcs	r3, #8
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	4b4c      	ldr	r3, [pc, #304]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011b78:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011b7c:	7b3b      	ldrb	r3, [r7, #12]
 8011b7e:	2204      	movs	r2, #4
 8011b80:	f362 1347 	bfi	r3, r2, #5, #3
 8011b84:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	791b      	ldrb	r3, [r3, #4]
 8011b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	899b      	ldrh	r3, [r3, #12]
 8011b98:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	7b9b      	ldrb	r3, [r3, #14]
 8011b9e:	777b      	strb	r3, [r7, #29]
            break;
 8011ba0:	e014      	b.n	8011bcc <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011ba6:	4b40      	ldr	r3, [pc, #256]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011ba8:	2201      	movs	r2, #1
 8011baa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011bae:	7b3b      	ldrb	r3, [r7, #12]
 8011bb0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011bb4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	891b      	ldrh	r3, [r3, #8]
 8011bc0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7a9b      	ldrb	r3, [r3, #10]
 8011bc6:	777b      	strb	r3, [r7, #29]
            break;
 8011bc8:	e000      	b.n	8011bcc <LoRaMacMcpsRequest+0x108>
            break;
 8011bca:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011bcc:	2302      	movs	r3, #2
 8011bce:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011bd0:	4b36      	ldr	r3, [pc, #216]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011bd2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011bd6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bd8:	4b34      	ldr	r3, [pc, #208]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bde:	f107 0214 	add.w	r2, r7, #20
 8011be2:	4611      	mov	r1, r2
 8011be4:	4618      	mov	r0, r3
 8011be6:	f002 f8fb 	bl	8013de0 <RegionGetPhyParam>
 8011bea:	4603      	mov	r3, r0
 8011bec:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	b25b      	sxtb	r3, r3
 8011bf2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	bfb8      	it	lt
 8011bfa:	4613      	movlt	r3, r2
 8011bfc:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011bfe:	7f3b      	ldrb	r3, [r7, #28]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d044      	beq.n	8011c8e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011c04:	4b29      	ldr	r3, [pc, #164]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011c06:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011c0a:	f083 0301 	eor.w	r3, r3, #1
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d019      	beq.n	8011c48 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011c14:	7f7b      	ldrb	r3, [r7, #29]
 8011c16:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c18:	4b24      	ldr	r3, [pc, #144]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011c1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c1e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011c20:	4b22      	ldr	r3, [pc, #136]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c26:	f107 0108 	add.w	r1, r7, #8
 8011c2a:	2205      	movs	r2, #5
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f002 f912 	bl	8013e56 <RegionVerify>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d005      	beq.n	8011c44 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011c38:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c3c:	4b1b      	ldr	r3, [pc, #108]	; (8011cac <LoRaMacMcpsRequest+0x1e8>)
 8011c3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011c42:	e001      	b.n	8011c48 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c44:	2303      	movs	r3, #3
 8011c46:	e029      	b.n	8011c9c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011c48:	8bfa      	ldrh	r2, [r7, #30]
 8011c4a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011c4e:	f107 000c 	add.w	r0, r7, #12
 8011c52:	78fb      	ldrb	r3, [r7, #3]
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	4613      	mov	r3, r2
 8011c58:	6a3a      	ldr	r2, [r7, #32]
 8011c5a:	f7fd fcef 	bl	800f63c <Send>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10c      	bne.n	8011c86 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	781a      	ldrb	r2, [r3, #0]
 8011c70:	4b0d      	ldr	r3, [pc, #52]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011c72:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011c76:	4a0c      	ldr	r2, [pc, #48]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011c78:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c7c:	f043 0301 	orr.w	r3, r3, #1
 8011c80:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011c84:	e003      	b.n	8011c8e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011c86:	4b08      	ldr	r3, [pc, #32]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011c8e:	4b06      	ldr	r3, [pc, #24]	; (8011ca8 <LoRaMacMcpsRequest+0x1e4>)
 8011c90:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	611a      	str	r2, [r3, #16]

    return status;
 8011c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3728      	adds	r7, #40	; 0x28
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	20001604 	.word	0x20001604
 8011ca8:	200011cc 	.word	0x200011cc
 8011cac:	200016d4 	.word	0x200016d4

08011cb0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011cbe:	4b0a      	ldr	r3, [pc, #40]	; (8011ce8 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cc4:	f107 010c 	add.w	r1, r7, #12
 8011cc8:	220f      	movs	r2, #15
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f002 f8c3 	bl	8013e56 <RegionVerify>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d003      	beq.n	8011cde <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011cd6:	4a04      	ldr	r2, [pc, #16]	; (8011ce8 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011cd8:	79fb      	ldrb	r3, [r7, #7]
 8011cda:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011cde:	bf00      	nop
 8011ce0:	3710      	adds	r7, #16
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	200016d4 	.word	0x200016d4

08011cec <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08c      	sub	sp, #48	; 0x30
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	7c1b      	ldrb	r3, [r3, #16]
 8011d04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	7c5b      	ldrb	r3, [r3, #17]
 8011d0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	689a      	ldr	r2, [r3, #8]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	795b      	ldrb	r3, [r3, #5]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 808b 	beq.w	8011e38 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011d22:	2302      	movs	r3, #2
 8011d24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	7c9b      	ldrb	r3, [r3, #18]
 8011d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	7cdb      	ldrb	r3, [r3, #19]
 8011d34:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011d38:	4611      	mov	r1, r2
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f002 f850 	bl	8013de0 <RegionGetPhyParam>
 8011d40:	4603      	mov	r3, r0
 8011d42:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011d4a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011d4e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011d52:	4293      	cmp	r3, r2
 8011d54:	bfb8      	it	lt
 8011d56:	4613      	movlt	r3, r2
 8011d58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011d5c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011d60:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d106      	bne.n	8011d76 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d74:	e060      	b.n	8011e38 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	689b      	ldr	r3, [r3, #8]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	8992      	ldrh	r2, [r2, #12]
 8011d7e:	4293      	cmp	r3, r2
 8011d80:	d303      	bcc.n	8011d8a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011d82:	2301      	movs	r3, #1
 8011d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d88:	e002      	b.n	8011d90 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	689b      	ldr	r3, [r3, #8]
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	8992      	ldrh	r2, [r2, #12]
 8011d98:	4611      	mov	r1, r2
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	89d2      	ldrh	r2, [r2, #14]
 8011d9e:	440a      	add	r2, r1
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d349      	bcc.n	8011e38 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011da4:	2308      	movs	r3, #8
 8011da6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	7cdb      	ldrb	r3, [r3, #19]
 8011dae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f002 f813 	bl	8013de0 <RegionGetPhyParam>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	89d2      	ldrh	r2, [r2, #14]
 8011dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dd0:	fb01 f202 	mul.w	r2, r1, r2
 8011dd4:	1a9b      	subs	r3, r3, r2
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d12e      	bne.n	8011e38 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011dda:	2322      	movs	r3, #34	; 0x22
 8011ddc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011de0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011de4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	7c9b      	ldrb	r3, [r3, #18]
 8011dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	7cdb      	ldrb	r3, [r3, #19]
 8011df4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011df8:	4611      	mov	r1, r2
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f001 fff0 	bl	8013de0 <RegionGetPhyParam>
 8011e00:	4603      	mov	r3, r0
 8011e02:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011e04:	6a3b      	ldr	r3, [r7, #32]
 8011e06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011e0a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e0e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d110      	bne.n	8011e38 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011e16:	2300      	movs	r3, #0
 8011e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	791b      	ldrb	r3, [r3, #4]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d009      	beq.n	8011e38 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011e24:	2302      	movs	r3, #2
 8011e26:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	7cdb      	ldrb	r3, [r3, #19]
 8011e2c:	f107 0214 	add.w	r2, r7, #20
 8011e30:	4611      	mov	r1, r2
 8011e32:	4618      	mov	r0, r3
 8011e34:	f001 fffd 	bl	8013e32 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011e3e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e46:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3730      	adds	r7, #48	; 0x30
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	789b      	ldrb	r3, [r3, #2]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d107      	bne.n	8011e7a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	68b9      	ldr	r1, [r7, #8]
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f7ff ff3b 	bl	8011cec <CalcNextV10X>
 8011e76:	4603      	mov	r3, r0
 8011e78:	e000      	b.n	8011e7c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	60f8      	str	r0, [r7, #12]
 8011e8c:	60b9      	str	r1, [r7, #8]
 8011e8e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e90:	bf00      	nop
 8011e92:	3714      	adds	r7, #20
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bc80      	pop	{r7}
 8011e98:	4770      	bx	lr

08011e9a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011e9a:	b480      	push	{r7}
 8011e9c:	b083      	sub	sp, #12
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ea4:	bf00      	nop
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bc80      	pop	{r7}
 8011eac:	4770      	bx	lr

08011eae <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011eae:	b480      	push	{r7}
 8011eb0:	b083      	sub	sp, #12
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bc80      	pop	{r7}
 8011ec0:	4770      	bx	lr

08011ec2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011ec2:	b480      	push	{r7}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	4603      	mov	r3, r0
 8011eca:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bc80      	pop	{r7}
 8011ed4:	4770      	bx	lr

08011ed6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011eda:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bc80      	pop	{r7}
 8011ee2:	4770      	bx	lr

08011ee4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eec:	bf00      	nop
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bc80      	pop	{r7}
 8011ef4:	4770      	bx	lr

08011ef6 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011ef6:	b480      	push	{r7}
 8011ef8:	b083      	sub	sp, #12
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011efe:	bf00      	nop
 8011f00:	370c      	adds	r7, #12
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bc80      	pop	{r7}
 8011f06:	4770      	bx	lr

08011f08 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bc80      	pop	{r7}
 8011f18:	4770      	bx	lr

08011f1a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011f1a:	b480      	push	{r7}
 8011f1c:	b083      	sub	sp, #12
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
 8011f22:	460b      	mov	r3, r1
 8011f24:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011f26:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bc80      	pop	{r7}
 8011f30:	4770      	bx	lr

08011f32 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011f32:	b480      	push	{r7}
 8011f34:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f36:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bc80      	pop	{r7}
 8011f3e:	4770      	bx	lr

08011f40 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011f40:	b480      	push	{r7}
 8011f42:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f44:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bc80      	pop	{r7}
 8011f4c:	4770      	bx	lr

08011f4e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011f4e:	b480      	push	{r7}
 8011f50:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f52:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bc80      	pop	{r7}
 8011f5a:	4770      	bx	lr

08011f5c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f60:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bc80      	pop	{r7}
 8011f68:	4770      	bx	lr

08011f6a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b083      	sub	sp, #12
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	4603      	mov	r3, r0
 8011f72:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bc80      	pop	{r7}
 8011f7c:	4770      	bx	lr

08011f7e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011f7e:	b480      	push	{r7}
 8011f80:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f82:	bf00      	nop
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bc80      	pop	{r7}
 8011f88:	4770      	bx	lr

08011f8a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011f8a:	b480      	push	{r7}
 8011f8c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f8e:	bf00      	nop
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bc80      	pop	{r7}
 8011f94:	4770      	bx	lr

08011f96 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011f96:	b480      	push	{r7}
 8011f98:	b083      	sub	sp, #12
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fa0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	370c      	adds	r7, #12
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bc80      	pop	{r7}
 8011faa:	4770      	bx	lr

08011fac <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fb4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	370c      	adds	r7, #12
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bc80      	pop	{r7}
 8011fbe:	4770      	bx	lr

08011fc0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fc8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bc80      	pop	{r7}
 8011fd2:	4770      	bx	lr

08011fd4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fd8:	bf00      	nop
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bc80      	pop	{r7}
 8011fde:	4770      	bx	lr

08011fe0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	6039      	str	r1, [r7, #0]
 8011fea:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011fec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	370c      	adds	r7, #12
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bc80      	pop	{r7}
 8011ff6:	4770      	bx	lr

08011ff8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	4603      	mov	r3, r0
 8012000:	603a      	str	r2, [r7, #0]
 8012002:	80fb      	strh	r3, [r7, #6]
 8012004:	460b      	mov	r3, r1
 8012006:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012008:	bf00      	nop
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	bc80      	pop	{r7}
 8012010:	4770      	bx	lr

08012012 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012012:	b480      	push	{r7}
 8012014:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012016:	bf00      	nop
 8012018:	46bd      	mov	sp, r7
 801201a:	bc80      	pop	{r7}
 801201c:	4770      	bx	lr

0801201e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801201e:	b480      	push	{r7}
 8012020:	b083      	sub	sp, #12
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012026:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012028:	4618      	mov	r0, r3
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	bc80      	pop	{r7}
 8012030:	4770      	bx	lr

08012032 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012032:	b480      	push	{r7}
 8012034:	b083      	sub	sp, #12
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801203a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801203c:	4618      	mov	r0, r3
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	bc80      	pop	{r7}
 8012044:	4770      	bx	lr

08012046 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012046:	b480      	push	{r7}
 8012048:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801204a:	bf00      	nop
 801204c:	46bd      	mov	sp, r7
 801204e:	bc80      	pop	{r7}
 8012050:	4770      	bx	lr

08012052 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8012052:	b480      	push	{r7}
 8012054:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012056:	bf00      	nop
 8012058:	46bd      	mov	sp, r7
 801205a:	bc80      	pop	{r7}
 801205c:	4770      	bx	lr

0801205e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801205e:	b480      	push	{r7}
 8012060:	b085      	sub	sp, #20
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801206a:	2300      	movs	r3, #0
 801206c:	81fb      	strh	r3, [r7, #14]
 801206e:	e00a      	b.n	8012086 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012070:	89fb      	ldrh	r3, [r7, #14]
 8012072:	68ba      	ldr	r2, [r7, #8]
 8012074:	4413      	add	r3, r2
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d001      	beq.n	8012080 <IsSlotFree+0x22>
        {
            return false;
 801207c:	2300      	movs	r3, #0
 801207e:	e006      	b.n	801208e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012080:	89fb      	ldrh	r3, [r7, #14]
 8012082:	3301      	adds	r3, #1
 8012084:	81fb      	strh	r3, [r7, #14]
 8012086:	89fb      	ldrh	r3, [r7, #14]
 8012088:	2b0f      	cmp	r3, #15
 801208a:	d9f1      	bls.n	8012070 <IsSlotFree+0x12>
        }
    }
    return true;
 801208c:	2301      	movs	r3, #1
}
 801208e:	4618      	mov	r0, r3
 8012090:	3714      	adds	r7, #20
 8012092:	46bd      	mov	sp, r7
 8012094:	bc80      	pop	{r7}
 8012096:	4770      	bx	lr

08012098 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801209e:	2300      	movs	r3, #0
 80120a0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80120a2:	e007      	b.n	80120b4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80120a4:	79fb      	ldrb	r3, [r7, #7]
 80120a6:	3301      	adds	r3, #1
 80120a8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	2b0f      	cmp	r3, #15
 80120ae:	d101      	bne.n	80120b4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80120b0:	2300      	movs	r3, #0
 80120b2:	e012      	b.n	80120da <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80120b4:	79fb      	ldrb	r3, [r7, #7]
 80120b6:	011b      	lsls	r3, r3, #4
 80120b8:	3308      	adds	r3, #8
 80120ba:	4a0a      	ldr	r2, [pc, #40]	; (80120e4 <MallocNewMacCommandSlot+0x4c>)
 80120bc:	4413      	add	r3, r2
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff ffcd 	bl	801205e <IsSlotFree>
 80120c4:	4603      	mov	r3, r0
 80120c6:	f083 0301 	eor.w	r3, r3, #1
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1e9      	bne.n	80120a4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80120d0:	79fb      	ldrb	r3, [r7, #7]
 80120d2:	011b      	lsls	r3, r3, #4
 80120d4:	3308      	adds	r3, #8
 80120d6:	4a03      	ldr	r2, [pc, #12]	; (80120e4 <MallocNewMacCommandSlot+0x4c>)
 80120d8:	4413      	add	r3, r2
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	20001a38 	.word	0x20001a38

080120e8 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d101      	bne.n	80120fa <FreeMacCommandSlot+0x12>
    {
        return false;
 80120f6:	2300      	movs	r3, #0
 80120f8:	e005      	b.n	8012106 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80120fa:	2210      	movs	r2, #16
 80120fc:	2100      	movs	r1, #0
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f004 f980 	bl	8016404 <memset1>

    return true;
 8012104:	2301      	movs	r3, #1
}
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801210e:	b480      	push	{r7}
 8012110:	b083      	sub	sp, #12
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <LinkedListInit+0x12>
    {
        return false;
 801211c:	2300      	movs	r3, #0
 801211e:	e006      	b.n	801212e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2200      	movs	r2, #0
 801212a:	605a      	str	r2, [r3, #4]

    return true;
 801212c:	2301      	movs	r3, #1
}
 801212e:	4618      	mov	r0, r3
 8012130:	370c      	adds	r7, #12
 8012132:	46bd      	mov	sp, r7
 8012134:	bc80      	pop	{r7}
 8012136:	4770      	bx	lr

08012138 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d002      	beq.n	801214e <LinkedListAdd+0x16>
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d101      	bne.n	8012152 <LinkedListAdd+0x1a>
    {
        return false;
 801214e:	2300      	movs	r3, #0
 8012150:	e015      	b.n	801217e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d102      	bne.n	8012160 <LinkedListAdd+0x28>
    {
        list->First = element;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	683a      	ldr	r2, [r7, #0]
 801215e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d003      	beq.n	8012170 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	683a      	ldr	r2, [r7, #0]
 801216e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	683a      	ldr	r2, [r7, #0]
 801217a:	605a      	str	r2, [r3, #4]

    return true;
 801217c:	2301      	movs	r3, #1
}
 801217e:	4618      	mov	r0, r3
 8012180:	370c      	adds	r7, #12
 8012182:	46bd      	mov	sp, r7
 8012184:	bc80      	pop	{r7}
 8012186:	4770      	bx	lr

08012188 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d002      	beq.n	801219e <LinkedListGetPrevious+0x16>
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d101      	bne.n	80121a2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801219e:	2300      	movs	r3, #0
 80121a0:	e016      	b.n	80121d0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80121a8:	683a      	ldr	r2, [r7, #0]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d00c      	beq.n	80121ca <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80121b0:	e002      	b.n	80121b8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d007      	beq.n	80121ce <LinkedListGetPrevious+0x46>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	683a      	ldr	r2, [r7, #0]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d1f4      	bne.n	80121b2 <LinkedListGetPrevious+0x2a>
 80121c8:	e001      	b.n	80121ce <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80121ca:	2300      	movs	r3, #0
 80121cc:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80121ce:	68fb      	ldr	r3, [r7, #12]
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3714      	adds	r7, #20
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bc80      	pop	{r7}
 80121d8:	4770      	bx	lr

080121da <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
 80121e2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d002      	beq.n	80121f0 <LinkedListRemove+0x16>
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d101      	bne.n	80121f4 <LinkedListRemove+0x1a>
    {
        return false;
 80121f0:	2300      	movs	r3, #0
 80121f2:	e020      	b.n	8012236 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80121f4:	6839      	ldr	r1, [r7, #0]
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f7ff ffc6 	bl	8012188 <LinkedListGetPrevious>
 80121fc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	683a      	ldr	r2, [r7, #0]
 8012204:	429a      	cmp	r2, r3
 8012206:	d103      	bne.n	8012210 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	683a      	ldr	r2, [r7, #0]
 8012216:	429a      	cmp	r2, r3
 8012218:	d102      	bne.n	8012220 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d003      	beq.n	801222e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	2200      	movs	r2, #0
 8012232:	601a      	str	r2, [r3, #0]

    return true;
 8012234:	2301      	movs	r3, #1
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801223e:	b480      	push	{r7}
 8012240:	b083      	sub	sp, #12
 8012242:	af00      	add	r7, sp, #0
 8012244:	4603      	mov	r3, r0
 8012246:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012248:	79fb      	ldrb	r3, [r7, #7]
 801224a:	2b05      	cmp	r3, #5
 801224c:	d004      	beq.n	8012258 <IsSticky+0x1a>
 801224e:	2b05      	cmp	r3, #5
 8012250:	db04      	blt.n	801225c <IsSticky+0x1e>
 8012252:	3b08      	subs	r3, #8
 8012254:	2b02      	cmp	r3, #2
 8012256:	d801      	bhi.n	801225c <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8012258:	2301      	movs	r3, #1
 801225a:	e000      	b.n	801225e <IsSticky+0x20>
        default:
            return false;
 801225c:	2300      	movs	r3, #0
    }
}
 801225e:	4618      	mov	r0, r3
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	bc80      	pop	{r7}
 8012266:	4770      	bx	lr

08012268 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801226c:	22fc      	movs	r2, #252	; 0xfc
 801226e:	2100      	movs	r1, #0
 8012270:	4804      	ldr	r0, [pc, #16]	; (8012284 <LoRaMacCommandsInit+0x1c>)
 8012272:	f004 f8c7 	bl	8016404 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012276:	4803      	ldr	r0, [pc, #12]	; (8012284 <LoRaMacCommandsInit+0x1c>)
 8012278:	f7ff ff49 	bl	801210e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801227c:	2300      	movs	r3, #0
}
 801227e:	4618      	mov	r0, r3
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20001a38 	.word	0x20001a38

08012288 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	4603      	mov	r3, r0
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d101      	bne.n	80122a0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801229c:	2301      	movs	r3, #1
 801229e:	e033      	b.n	8012308 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80122a0:	f7ff fefa 	bl	8012098 <MallocNewMacCommandSlot>
 80122a4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d101      	bne.n	80122b0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80122ac:	2302      	movs	r3, #2
 80122ae:	e02b      	b.n	8012308 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80122b0:	6979      	ldr	r1, [r7, #20]
 80122b2:	4817      	ldr	r0, [pc, #92]	; (8012310 <LoRaMacCommandsAddCmd+0x88>)
 80122b4:	f7ff ff40 	bl	8012138 <LinkedListAdd>
 80122b8:	4603      	mov	r3, r0
 80122ba:	f083 0301 	eor.w	r3, r3, #1
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80122c4:	2305      	movs	r3, #5
 80122c6:	e01f      	b.n	8012308 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	7bfa      	ldrb	r2, [r7, #15]
 80122cc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	3305      	adds	r3, #5
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	b292      	uxth	r2, r2
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	4618      	mov	r0, r3
 80122e0:	f004 f855 	bl	801638e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80122e4:	7bfb      	ldrb	r3, [r7, #15]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7ff ffa9 	bl	801223e <IsSticky>
 80122ec:	4603      	mov	r3, r0
 80122ee:	461a      	mov	r2, r3
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80122f4:	4b06      	ldr	r3, [pc, #24]	; (8012310 <LoRaMacCommandsAddCmd+0x88>)
 80122f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4413      	add	r3, r2
 80122fe:	3301      	adds	r3, #1
 8012300:	4a03      	ldr	r2, [pc, #12]	; (8012310 <LoRaMacCommandsAddCmd+0x88>)
 8012302:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012306:	2300      	movs	r3, #0
}
 8012308:	4618      	mov	r0, r3
 801230a:	3718      	adds	r7, #24
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20001a38 	.word	0x20001a38

08012314 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012322:	2301      	movs	r3, #1
 8012324:	e021      	b.n	801236a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	4812      	ldr	r0, [pc, #72]	; (8012374 <LoRaMacCommandsRemoveCmd+0x60>)
 801232a:	f7ff ff56 	bl	80121da <LinkedListRemove>
 801232e:	4603      	mov	r3, r0
 8012330:	f083 0301 	eor.w	r3, r3, #1
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801233a:	2303      	movs	r3, #3
 801233c:	e015      	b.n	801236a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801233e:	4b0d      	ldr	r3, [pc, #52]	; (8012374 <LoRaMacCommandsRemoveCmd+0x60>)
 8012340:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	3b01      	subs	r3, #1
 801234c:	4a09      	ldr	r2, [pc, #36]	; (8012374 <LoRaMacCommandsRemoveCmd+0x60>)
 801234e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7ff fec8 	bl	80120e8 <FreeMacCommandSlot>
 8012358:	4603      	mov	r3, r0
 801235a:	f083 0301 	eor.w	r3, r3, #1
 801235e:	b2db      	uxtb	r3, r3
 8012360:	2b00      	cmp	r3, #0
 8012362:	d001      	beq.n	8012368 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012364:	2305      	movs	r3, #5
 8012366:	e000      	b.n	801236a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	3708      	adds	r7, #8
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	20001a38 	.word	0x20001a38

08012378 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801237e:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012384:	e012      	b.n	80123ac <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	7b1b      	ldrb	r3, [r3, #12]
 801238a:	f083 0301 	eor.w	r3, r3, #1
 801238e:	b2db      	uxtb	r3, r3
 8012390:	2b00      	cmp	r3, #0
 8012392:	d008      	beq.n	80123a6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f7ff ffba 	bl	8012314 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	607b      	str	r3, [r7, #4]
 80123a4:	e002      	b.n	80123ac <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d1e9      	bne.n	8012386 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80123b2:	2300      	movs	r3, #0
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	20001a38 	.word	0x20001a38

080123c0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80123c6:	4b0e      	ldr	r3, [pc, #56]	; (8012400 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80123cc:	e00f      	b.n	80123ee <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	791b      	ldrb	r3, [r3, #4]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7ff ff30 	bl	801223e <IsSticky>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d002      	beq.n	80123ea <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f7ff ff95 	bl	8012314 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1ec      	bne.n	80123ce <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	20001a38 	.word	0x20001a38

08012404 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012412:	2301      	movs	r3, #1
 8012414:	e005      	b.n	8012422 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012416:	4b05      	ldr	r3, [pc, #20]	; (801242c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012418:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	370c      	adds	r7, #12
 8012426:	46bd      	mov	sp, r7
 8012428:	bc80      	pop	{r7}
 801242a:	4770      	bx	lr
 801242c:	20001a38 	.word	0x20001a38

08012430 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801243c:	4b25      	ldr	r3, [pc, #148]	; (80124d4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012442:	2300      	movs	r3, #0
 8012444:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d002      	beq.n	8012452 <LoRaMacCommandsSerializeCmds+0x22>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d126      	bne.n	80124a0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012452:	2301      	movs	r3, #1
 8012454:	e039      	b.n	80124ca <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012456:	7efb      	ldrb	r3, [r7, #27]
 8012458:	68fa      	ldr	r2, [r7, #12]
 801245a:	1ad2      	subs	r2, r2, r3
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	3301      	adds	r3, #1
 8012462:	429a      	cmp	r2, r3
 8012464:	d320      	bcc.n	80124a8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012466:	7efb      	ldrb	r3, [r7, #27]
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	76fa      	strb	r2, [r7, #27]
 801246c:	461a      	mov	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	69fa      	ldr	r2, [r7, #28]
 8012474:	7912      	ldrb	r2, [r2, #4]
 8012476:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012478:	7efb      	ldrb	r3, [r7, #27]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	18d0      	adds	r0, r2, r3
 801247e:	69fb      	ldr	r3, [r7, #28]
 8012480:	1d59      	adds	r1, r3, #5
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	689b      	ldr	r3, [r3, #8]
 8012486:	b29b      	uxth	r3, r3
 8012488:	461a      	mov	r2, r3
 801248a:	f003 ff80 	bl	801638e <memcpy1>
            itr += curElement->PayloadSize;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	b2da      	uxtb	r2, r3
 8012494:	7efb      	ldrb	r3, [r7, #27]
 8012496:	4413      	add	r3, r2
 8012498:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d1d7      	bne.n	8012456 <LoRaMacCommandsSerializeCmds+0x26>
 80124a6:	e009      	b.n	80124bc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80124a8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80124aa:	e007      	b.n	80124bc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80124b2:	69f8      	ldr	r0, [r7, #28]
 80124b4:	f7ff ff2e 	bl	8012314 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1f4      	bne.n	80124ac <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80124c2:	68b8      	ldr	r0, [r7, #8]
 80124c4:	f7ff ff9e 	bl	8012404 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80124c8:	2300      	movs	r3, #0
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3720      	adds	r7, #32
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20001a38 	.word	0x20001a38

080124d8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124e6:	2301      	movs	r3, #1
 80124e8:	e016      	b.n	8012518 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80124ea:	4b0e      	ldr	r3, [pc, #56]	; (8012524 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80124f6:	e00b      	b.n	8012510 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	7b1b      	ldrb	r3, [r3, #12]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d004      	beq.n	801250a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012506:	2300      	movs	r3, #0
 8012508:	e006      	b.n	8012518 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1f0      	bne.n	80124f8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3714      	adds	r7, #20
 801251c:	46bd      	mov	sp, r7
 801251e:	bc80      	pop	{r7}
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	20001a38 	.word	0x20001a38

08012528 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012528:	b480      	push	{r7}
 801252a:	b085      	sub	sp, #20
 801252c:	af00      	add	r7, sp, #0
 801252e:	4603      	mov	r3, r0
 8012530:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	3b02      	subs	r3, #2
 801253a:	2b11      	cmp	r3, #17
 801253c:	d850      	bhi.n	80125e0 <LoRaMacCommandsGetCmdSize+0xb8>
 801253e:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012544:	0801258d 	.word	0x0801258d
 8012548:	08012593 	.word	0x08012593
 801254c:	08012599 	.word	0x08012599
 8012550:	0801259f 	.word	0x0801259f
 8012554:	080125a5 	.word	0x080125a5
 8012558:	080125ab 	.word	0x080125ab
 801255c:	080125b1 	.word	0x080125b1
 8012560:	080125b7 	.word	0x080125b7
 8012564:	080125bd 	.word	0x080125bd
 8012568:	080125e1 	.word	0x080125e1
 801256c:	080125e1 	.word	0x080125e1
 8012570:	080125c3 	.word	0x080125c3
 8012574:	080125e1 	.word	0x080125e1
 8012578:	080125e1 	.word	0x080125e1
 801257c:	080125c9 	.word	0x080125c9
 8012580:	080125cf 	.word	0x080125cf
 8012584:	080125d5 	.word	0x080125d5
 8012588:	080125db 	.word	0x080125db
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801258c:	2303      	movs	r3, #3
 801258e:	73fb      	strb	r3, [r7, #15]
            break;
 8012590:	e027      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012592:	2305      	movs	r3, #5
 8012594:	73fb      	strb	r3, [r7, #15]
            break;
 8012596:	e024      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012598:	2302      	movs	r3, #2
 801259a:	73fb      	strb	r3, [r7, #15]
            break;
 801259c:	e021      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801259e:	2305      	movs	r3, #5
 80125a0:	73fb      	strb	r3, [r7, #15]
            break;
 80125a2:	e01e      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80125a4:	2301      	movs	r3, #1
 80125a6:	73fb      	strb	r3, [r7, #15]
            break;
 80125a8:	e01b      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80125aa:	2306      	movs	r3, #6
 80125ac:	73fb      	strb	r3, [r7, #15]
            break;
 80125ae:	e018      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80125b0:	2302      	movs	r3, #2
 80125b2:	73fb      	strb	r3, [r7, #15]
            break;
 80125b4:	e015      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80125b6:	2302      	movs	r3, #2
 80125b8:	73fb      	strb	r3, [r7, #15]
            break;
 80125ba:	e012      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80125bc:	2305      	movs	r3, #5
 80125be:	73fb      	strb	r3, [r7, #15]
            break;
 80125c0:	e00f      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80125c2:	2306      	movs	r3, #6
 80125c4:	73fb      	strb	r3, [r7, #15]
            break;
 80125c6:	e00c      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80125c8:	2301      	movs	r3, #1
 80125ca:	73fb      	strb	r3, [r7, #15]
            break;
 80125cc:	e009      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80125ce:	2305      	movs	r3, #5
 80125d0:	73fb      	strb	r3, [r7, #15]
            break;
 80125d2:	e006      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80125d4:	2304      	movs	r3, #4
 80125d6:	73fb      	strb	r3, [r7, #15]
            break;
 80125d8:	e003      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80125da:	2304      	movs	r3, #4
 80125dc:	73fb      	strb	r3, [r7, #15]
            break;
 80125de:	e000      	b.n	80125e2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80125e0:	bf00      	nop
        }
    }
    return cidSize;
 80125e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3714      	adds	r7, #20
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bc80      	pop	{r7}
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop

080125f0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80125f0:	b480      	push	{r7}
 80125f2:	b083      	sub	sp, #12
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a07      	ldr	r2, [pc, #28]	; (8012618 <IncreaseBufferPointer+0x28>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d102      	bne.n	8012606 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012600:	4b06      	ldr	r3, [pc, #24]	; (801261c <IncreaseBufferPointer+0x2c>)
 8012602:	607b      	str	r3, [r7, #4]
 8012604:	e002      	b.n	801260c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	3304      	adds	r3, #4
 801260a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801260c:	687b      	ldr	r3, [r7, #4]
}
 801260e:	4618      	mov	r0, r3
 8012610:	370c      	adds	r7, #12
 8012612:	46bd      	mov	sp, r7
 8012614:	bc80      	pop	{r7}
 8012616:	4770      	bx	lr
 8012618:	20001b50 	.word	0x20001b50
 801261c:	20001b40 	.word	0x20001b40

08012620 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	4603      	mov	r3, r0
 8012628:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d101      	bne.n	8012634 <IsListEmpty+0x14>
    {
        return true;
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <IsListEmpty+0x16>
    }
    return false;
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	370c      	adds	r7, #12
 801263a:	46bd      	mov	sp, r7
 801263c:	bc80      	pop	{r7}
 801263e:	4770      	bx	lr

08012640 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	4603      	mov	r3, r0
 8012648:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801264a:	79fb      	ldrb	r3, [r7, #7]
 801264c:	2b04      	cmp	r3, #4
 801264e:	d901      	bls.n	8012654 <IsListFull+0x14>
    {
        return true;
 8012650:	2301      	movs	r3, #1
 8012652:	e000      	b.n	8012656 <IsListFull+0x16>
    }
    return false;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	bc80      	pop	{r7}
 801265e:	4770      	bx	lr

08012660 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b086      	sub	sp, #24
 8012664:	af00      	add	r7, sp, #0
 8012666:	4603      	mov	r3, r0
 8012668:	60b9      	str	r1, [r7, #8]
 801266a:	607a      	str	r2, [r7, #4]
 801266c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012672:	4b13      	ldr	r3, [pc, #76]	; (80126c0 <GetElement+0x60>)
 8012674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012678:	4618      	mov	r0, r3
 801267a:	f7ff ffd1 	bl	8012620 <IsListEmpty>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d001      	beq.n	8012688 <GetElement+0x28>
    {
        return NULL;
 8012684:	2300      	movs	r3, #0
 8012686:	e017      	b.n	80126b8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012688:	2300      	movs	r3, #0
 801268a:	74fb      	strb	r3, [r7, #19]
 801268c:	e00d      	b.n	80126aa <GetElement+0x4a>
    {
        if( element->Request == request )
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	7bfa      	ldrb	r2, [r7, #15]
 8012694:	429a      	cmp	r2, r3
 8012696:	d101      	bne.n	801269c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	e00d      	b.n	80126b8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801269c:	6978      	ldr	r0, [r7, #20]
 801269e:	f7ff ffa7 	bl	80125f0 <IncreaseBufferPointer>
 80126a2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80126a4:	7cfb      	ldrb	r3, [r7, #19]
 80126a6:	3301      	adds	r3, #1
 80126a8:	74fb      	strb	r3, [r7, #19]
 80126aa:	4b05      	ldr	r3, [pc, #20]	; (80126c0 <GetElement+0x60>)
 80126ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126b0:	7cfa      	ldrb	r2, [r7, #19]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d3eb      	bcc.n	801268e <GetElement+0x2e>
    }

    return NULL;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	20001b34 	.word	0x20001b34

080126c4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80126cc:	4a0c      	ldr	r2, [pc, #48]	; (8012700 <LoRaMacConfirmQueueInit+0x3c>)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80126d2:	4b0b      	ldr	r3, [pc, #44]	; (8012700 <LoRaMacConfirmQueueInit+0x3c>)
 80126d4:	2200      	movs	r2, #0
 80126d6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126da:	4b09      	ldr	r3, [pc, #36]	; (8012700 <LoRaMacConfirmQueueInit+0x3c>)
 80126dc:	4a09      	ldr	r2, [pc, #36]	; (8012704 <LoRaMacConfirmQueueInit+0x40>)
 80126de:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126e0:	4b07      	ldr	r3, [pc, #28]	; (8012700 <LoRaMacConfirmQueueInit+0x3c>)
 80126e2:	4a08      	ldr	r2, [pc, #32]	; (8012704 <LoRaMacConfirmQueueInit+0x40>)
 80126e4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80126e6:	2214      	movs	r2, #20
 80126e8:	21ff      	movs	r1, #255	; 0xff
 80126ea:	4806      	ldr	r0, [pc, #24]	; (8012704 <LoRaMacConfirmQueueInit+0x40>)
 80126ec:	f003 fe8a 	bl	8016404 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80126f0:	4b03      	ldr	r3, [pc, #12]	; (8012700 <LoRaMacConfirmQueueInit+0x3c>)
 80126f2:	2201      	movs	r2, #1
 80126f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80126f8:	bf00      	nop
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	20001b34 	.word	0x20001b34
 8012704:	20001b40 	.word	0x20001b40

08012708 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012710:	4b19      	ldr	r3, [pc, #100]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 8012712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012716:	4618      	mov	r0, r3
 8012718:	f7ff ff92 	bl	8012640 <IsListFull>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012722:	2300      	movs	r3, #0
 8012724:	e023      	b.n	801276e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012726:	4b14      	ldr	r3, [pc, #80]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 8012728:	689b      	ldr	r3, [r3, #8]
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	7812      	ldrb	r2, [r2, #0]
 801272e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012730:	4b11      	ldr	r3, [pc, #68]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 8012732:	689b      	ldr	r3, [r3, #8]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	7852      	ldrb	r2, [r2, #1]
 8012738:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801273a:	4b0f      	ldr	r3, [pc, #60]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 801273c:	689b      	ldr	r3, [r3, #8]
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	78d2      	ldrb	r2, [r2, #3]
 8012742:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012744:	4b0c      	ldr	r3, [pc, #48]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 8012746:	689b      	ldr	r3, [r3, #8]
 8012748:	2200      	movs	r2, #0
 801274a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801274c:	4b0a      	ldr	r3, [pc, #40]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 801274e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012752:	3301      	adds	r3, #1
 8012754:	b2da      	uxtb	r2, r3
 8012756:	4b08      	ldr	r3, [pc, #32]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 8012758:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801275c:	4b06      	ldr	r3, [pc, #24]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	4618      	mov	r0, r3
 8012762:	f7ff ff45 	bl	80125f0 <IncreaseBufferPointer>
 8012766:	4603      	mov	r3, r0
 8012768:	4a03      	ldr	r2, [pc, #12]	; (8012778 <LoRaMacConfirmQueueAdd+0x70>)
 801276a:	6093      	str	r3, [r2, #8]

    return true;
 801276c:	2301      	movs	r3, #1
}
 801276e:	4618      	mov	r0, r3
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	20001b34 	.word	0x20001b34

0801277c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012780:	4b0e      	ldr	r3, [pc, #56]	; (80127bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012786:	4618      	mov	r0, r3
 8012788:	f7ff ff4a 	bl	8012620 <IsListEmpty>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012792:	2300      	movs	r3, #0
 8012794:	e010      	b.n	80127b8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012796:	4b09      	ldr	r3, [pc, #36]	; (80127bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012798:	f893 3020 	ldrb.w	r3, [r3, #32]
 801279c:	3b01      	subs	r3, #1
 801279e:	b2da      	uxtb	r2, r3
 80127a0:	4b06      	ldr	r3, [pc, #24]	; (80127bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127a2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80127a6:	4b05      	ldr	r3, [pc, #20]	; (80127bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7ff ff20 	bl	80125f0 <IncreaseBufferPointer>
 80127b0:	4603      	mov	r3, r0
 80127b2:	4a02      	ldr	r2, [pc, #8]	; (80127bc <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127b4:	6053      	str	r3, [r2, #4]

    return true;
 80127b6:	2301      	movs	r3, #1
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	bd80      	pop	{r7, pc}
 80127bc:	20001b34 	.word	0x20001b34

080127c0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	4603      	mov	r3, r0
 80127c8:	460a      	mov	r2, r1
 80127ca:	71fb      	strb	r3, [r7, #7]
 80127cc:	4613      	mov	r3, r2
 80127ce:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80127d0:	2300      	movs	r3, #0
 80127d2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80127d4:	4b10      	ldr	r3, [pc, #64]	; (8012818 <LoRaMacConfirmQueueSetStatus+0x58>)
 80127d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff ff20 	bl	8012620 <IsListEmpty>
 80127e0:	4603      	mov	r3, r0
 80127e2:	f083 0301 	eor.w	r3, r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d011      	beq.n	8012810 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80127ec:	4b0a      	ldr	r3, [pc, #40]	; (8012818 <LoRaMacConfirmQueueSetStatus+0x58>)
 80127ee:	6859      	ldr	r1, [r3, #4]
 80127f0:	4b09      	ldr	r3, [pc, #36]	; (8012818 <LoRaMacConfirmQueueSetStatus+0x58>)
 80127f2:	689a      	ldr	r2, [r3, #8]
 80127f4:	79bb      	ldrb	r3, [r7, #6]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7ff ff32 	bl	8012660 <GetElement>
 80127fc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d005      	beq.n	8012810 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	79fa      	ldrb	r2, [r7, #7]
 8012808:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2201      	movs	r2, #1
 801280e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012810:	bf00      	nop
 8012812:	3710      	adds	r7, #16
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	20001b34 	.word	0x20001b34

0801281c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	4603      	mov	r3, r0
 8012824:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012826:	2300      	movs	r3, #0
 8012828:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801282a:	4b10      	ldr	r3, [pc, #64]	; (801286c <LoRaMacConfirmQueueGetStatus+0x50>)
 801282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff fef5 	bl	8012620 <IsListEmpty>
 8012836:	4603      	mov	r3, r0
 8012838:	f083 0301 	eor.w	r3, r3, #1
 801283c:	b2db      	uxtb	r3, r3
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00e      	beq.n	8012860 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012842:	4b0a      	ldr	r3, [pc, #40]	; (801286c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012844:	6859      	ldr	r1, [r3, #4]
 8012846:	4b09      	ldr	r3, [pc, #36]	; (801286c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012848:	689a      	ldr	r2, [r3, #8]
 801284a:	79fb      	ldrb	r3, [r7, #7]
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff ff07 	bl	8012660 <GetElement>
 8012852:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d002      	beq.n	8012860 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	785b      	ldrb	r3, [r3, #1]
 801285e:	e000      	b.n	8012862 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012860:	2301      	movs	r3, #1
}
 8012862:	4618      	mov	r0, r3
 8012864:	3710      	adds	r7, #16
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	20001b34 	.word	0x20001b34

08012870 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	4603      	mov	r3, r0
 8012878:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801287a:	4b16      	ldr	r3, [pc, #88]	; (80128d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012880:	4a14      	ldr	r2, [pc, #80]	; (80128d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012882:	79fb      	ldrb	r3, [r7, #7]
 8012884:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012888:	4b12      	ldr	r3, [pc, #72]	; (80128d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801288e:	4618      	mov	r0, r3
 8012890:	f7ff fec6 	bl	8012620 <IsListEmpty>
 8012894:	4603      	mov	r3, r0
 8012896:	f083 0301 	eor.w	r3, r3, #1
 801289a:	b2db      	uxtb	r3, r3
 801289c:	2b00      	cmp	r3, #0
 801289e:	d015      	beq.n	80128cc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	79fa      	ldrb	r2, [r7, #7]
 80128a4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	78db      	ldrb	r3, [r3, #3]
 80128aa:	f083 0301 	eor.w	r3, r3, #1
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d002      	beq.n	80128ba <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2201      	movs	r2, #1
 80128b8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f7ff fe98 	bl	80125f0 <IncreaseBufferPointer>
 80128c0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80128c2:	4b04      	ldr	r3, [pc, #16]	; (80128d4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128c4:	689b      	ldr	r3, [r3, #8]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d1e9      	bne.n	80128a0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80128cc:	bf00      	nop
 80128ce:	3710      	adds	r7, #16
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	20001b34 	.word	0x20001b34

080128d8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	4603      	mov	r3, r0
 80128e0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80128e2:	4b09      	ldr	r3, [pc, #36]	; (8012908 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80128e4:	6859      	ldr	r1, [r3, #4]
 80128e6:	4b08      	ldr	r3, [pc, #32]	; (8012908 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80128e8:	689a      	ldr	r2, [r3, #8]
 80128ea:	79fb      	ldrb	r3, [r7, #7]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff feb7 	bl	8012660 <GetElement>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d001      	beq.n	80128fc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80128f8:	2301      	movs	r3, #1
 80128fa:	e000      	b.n	80128fe <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80128fc:	2300      	movs	r3, #0
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	20001b34 	.word	0x20001b34

0801290c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012914:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012916:	f893 3020 	ldrb.w	r3, [r3, #32]
 801291a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801291c:	2300      	movs	r3, #0
 801291e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]
 8012924:	e032      	b.n	801298c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012926:	4b1e      	ldr	r3, [pc, #120]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	781a      	ldrb	r2, [r3, #0]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012930:	4b1b      	ldr	r3, [pc, #108]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	785a      	ldrb	r2, [r3, #1]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801293a:	4b19      	ldr	r3, [pc, #100]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	789b      	ldrb	r3, [r3, #2]
 8012940:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012942:	7b7b      	ldrb	r3, [r7, #13]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d005      	beq.n	8012954 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012948:	4b15      	ldr	r3, [pc, #84]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	689b      	ldr	r3, [r3, #8]
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	4798      	blx	r3
 8012952:	e00b      	b.n	801296c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012954:	4b12      	ldr	r3, [pc, #72]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801295c:	4b10      	ldr	r3, [pc, #64]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 801295e:	685b      	ldr	r3, [r3, #4]
 8012960:	785b      	ldrb	r3, [r3, #1]
 8012962:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012964:	4b0e      	ldr	r3, [pc, #56]	; (80129a0 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	78db      	ldrb	r3, [r3, #3]
 801296a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801296c:	f7ff ff06 	bl	801277c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012970:	7b7b      	ldrb	r3, [r7, #13]
 8012972:	f083 0301 	eor.w	r3, r3, #1
 8012976:	b2db      	uxtb	r3, r3
 8012978:	2b00      	cmp	r3, #0
 801297a:	d004      	beq.n	8012986 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801297c:	f107 0308 	add.w	r3, r7, #8
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fec1 	bl	8012708 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012986:	7bfb      	ldrb	r3, [r7, #15]
 8012988:	3301      	adds	r3, #1
 801298a:	73fb      	strb	r3, [r7, #15]
 801298c:	7bfa      	ldrb	r2, [r7, #15]
 801298e:	7bbb      	ldrb	r3, [r7, #14]
 8012990:	429a      	cmp	r2, r3
 8012992:	d3c8      	bcc.n	8012926 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012994:	bf00      	nop
 8012996:	bf00      	nop
 8012998:	3710      	adds	r7, #16
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	20001b34 	.word	0x20001b34

080129a4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80129a4:	b480      	push	{r7}
 80129a6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80129a8:	4b03      	ldr	r3, [pc, #12]	; (80129b8 <LoRaMacConfirmQueueGetCnt+0x14>)
 80129aa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bc80      	pop	{r7}
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	20001b34 	.word	0x20001b34

080129bc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129c0:	4b06      	ldr	r3, [pc, #24]	; (80129dc <LoRaMacConfirmQueueIsFull+0x20>)
 80129c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff fe3a 	bl	8012640 <IsListFull>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80129d2:	2301      	movs	r3, #1
 80129d4:	e000      	b.n	80129d8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80129d6:	2300      	movs	r3, #0
    }
}
 80129d8:	4618      	mov	r0, r3
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20001b34 	.word	0x20001b34

080129e0 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b08e      	sub	sp, #56	; 0x38
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	607b      	str	r3, [r7, #4]
 80129ea:	460b      	mov	r3, r1
 80129ec:	817b      	strh	r3, [r7, #10]
 80129ee:	4613      	mov	r3, r2
 80129f0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d101      	bne.n	80129fc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80129f8:	230a      	movs	r3, #10
 80129fa:	e086      	b.n	8012b0a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012a02:	2301      	movs	r3, #1
 8012a04:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012a06:	2300      	movs	r3, #0
 8012a08:	623b      	str	r3, [r7, #32]
 8012a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a0e:	2200      	movs	r2, #0
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	605a      	str	r2, [r3, #4]
 8012a14:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012a16:	2300      	movs	r3, #0
 8012a18:	613b      	str	r3, [r7, #16]
 8012a1a:	f107 0314 	add.w	r3, r7, #20
 8012a1e:	2200      	movs	r2, #0
 8012a20:	601a      	str	r2, [r3, #0]
 8012a22:	605a      	str	r2, [r3, #4]
 8012a24:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012a26:	2301      	movs	r3, #1
 8012a28:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012a2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012a2e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	0a1b      	lsrs	r3, r3, #8
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	0c1b      	lsrs	r3, r3, #16
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	0e1b      	lsrs	r3, r3, #24
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a56:	0a1b      	lsrs	r3, r3, #8
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a5e:	0c1b      	lsrs	r3, r3, #16
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a66:	0e1b      	lsrs	r3, r3, #24
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012a6c:	e048      	b.n	8012b00 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012a6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012a74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a76:	3301      	adds	r3, #1
 8012a78:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012a7a:	f107 0320 	add.w	r3, r7, #32
 8012a7e:	7a7a      	ldrb	r2, [r7, #9]
 8012a80:	f107 0010 	add.w	r0, r7, #16
 8012a84:	2110      	movs	r1, #16
 8012a86:	f7f9 fa96 	bl	800bfb6 <SecureElementAesEncrypt>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012a90:	230f      	movs	r3, #15
 8012a92:	e03a      	b.n	8012b0a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012a94:	2300      	movs	r3, #0
 8012a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a9a:	e01e      	b.n	8012ada <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012a9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012aa4:	4413      	add	r3, r2
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	4413      	add	r3, r2
 8012aac:	7819      	ldrb	r1, [r3, #0]
 8012aae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ab2:	3338      	adds	r3, #56	; 0x38
 8012ab4:	443b      	add	r3, r7
 8012ab6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012aba:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ac2:	4403      	add	r3, r0
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	4403      	add	r3, r0
 8012aca:	404a      	eors	r2, r1
 8012acc:	b2d2      	uxtb	r2, r2
 8012ace:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ade:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012ae2:	2a10      	cmp	r2, #16
 8012ae4:	bfa8      	it	ge
 8012ae6:	2210      	movge	r2, #16
 8012ae8:	b212      	sxth	r2, r2
 8012aea:	4293      	cmp	r3, r2
 8012aec:	dbd6      	blt.n	8012a9c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012aee:	897b      	ldrh	r3, [r7, #10]
 8012af0:	3b10      	subs	r3, #16
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012afa:	3310      	adds	r3, #16
 8012afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012b00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	dcb2      	bgt.n	8012a6e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3738      	adds	r7, #56	; 0x38
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012b12:	b490      	push	{r4, r7}
 8012b14:	b082      	sub	sp, #8
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	4604      	mov	r4, r0
 8012b1a:	4608      	mov	r0, r1
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	461a      	mov	r2, r3
 8012b20:	4623      	mov	r3, r4
 8012b22:	80fb      	strh	r3, [r7, #6]
 8012b24:	4603      	mov	r3, r0
 8012b26:	717b      	strb	r3, [r7, #5]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	713b      	strb	r3, [r7, #4]
 8012b2c:	4613      	mov	r3, r2
 8012b2e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012b30:	69bb      	ldr	r3, [r7, #24]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d101      	bne.n	8012b3a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b36:	230a      	movs	r3, #10
 8012b38:	e04e      	b.n	8012bd8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	2249      	movs	r2, #73	; 0x49
 8012b3e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	3301      	adds	r3, #1
 8012b44:	2200      	movs	r2, #0
 8012b46:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	3302      	adds	r3, #2
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	3303      	adds	r3, #3
 8012b54:	2200      	movs	r2, #0
 8012b56:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	3304      	adds	r3, #4
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	3305      	adds	r3, #5
 8012b64:	78fa      	ldrb	r2, [r7, #3]
 8012b66:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	3306      	adds	r3, #6
 8012b6c:	693a      	ldr	r2, [r7, #16]
 8012b6e:	b2d2      	uxtb	r2, r2
 8012b70:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	0a1a      	lsrs	r2, r3, #8
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	3307      	adds	r3, #7
 8012b7a:	b2d2      	uxtb	r2, r2
 8012b7c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	0c1a      	lsrs	r2, r3, #16
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	3308      	adds	r3, #8
 8012b86:	b2d2      	uxtb	r2, r2
 8012b88:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	0e1a      	lsrs	r2, r3, #24
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	3309      	adds	r3, #9
 8012b92:	b2d2      	uxtb	r2, r2
 8012b94:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	330a      	adds	r3, #10
 8012b9a:	697a      	ldr	r2, [r7, #20]
 8012b9c:	b2d2      	uxtb	r2, r2
 8012b9e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	0a1a      	lsrs	r2, r3, #8
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	330b      	adds	r3, #11
 8012ba8:	b2d2      	uxtb	r2, r2
 8012baa:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	0c1a      	lsrs	r2, r3, #16
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	330c      	adds	r3, #12
 8012bb4:	b2d2      	uxtb	r2, r2
 8012bb6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	0e1a      	lsrs	r2, r3, #24
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	330d      	adds	r3, #13
 8012bc0:	b2d2      	uxtb	r2, r2
 8012bc2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	330e      	adds	r3, #14
 8012bc8:	2200      	movs	r2, #0
 8012bca:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	330f      	adds	r3, #15
 8012bd0:	88fa      	ldrh	r2, [r7, #6]
 8012bd2:	b2d2      	uxtb	r2, r2
 8012bd4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bc90      	pop	{r4, r7}
 8012be0:	4770      	bx	lr

08012be2 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012be2:	b590      	push	{r4, r7, lr}
 8012be4:	b08b      	sub	sp, #44	; 0x2c
 8012be6:	af04      	add	r7, sp, #16
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	4608      	mov	r0, r1
 8012bec:	4611      	mov	r1, r2
 8012bee:	461a      	mov	r2, r3
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	807b      	strh	r3, [r7, #2]
 8012bf4:	460b      	mov	r3, r1
 8012bf6:	707b      	strb	r3, [r7, #1]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d002      	beq.n	8012c08 <ComputeCmacB0+0x26>
 8012c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d101      	bne.n	8012c0c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c08:	230a      	movs	r3, #10
 8012c0a:	e024      	b.n	8012c56 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012c0c:	887b      	ldrh	r3, [r7, #2]
 8012c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c12:	d901      	bls.n	8012c18 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012c14:	230e      	movs	r3, #14
 8012c16:	e01e      	b.n	8012c56 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012c18:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012c1c:	783a      	ldrb	r2, [r7, #0]
 8012c1e:	7879      	ldrb	r1, [r7, #1]
 8012c20:	8878      	ldrh	r0, [r7, #2]
 8012c22:	f107 0308 	add.w	r3, r7, #8
 8012c26:	9302      	str	r3, [sp, #8]
 8012c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2e:	9300      	str	r3, [sp, #0]
 8012c30:	4623      	mov	r3, r4
 8012c32:	f7ff ff6e 	bl	8012b12 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012c36:	7879      	ldrb	r1, [r7, #1]
 8012c38:	887a      	ldrh	r2, [r7, #2]
 8012c3a:	f107 0008 	add.w	r0, r7, #8
 8012c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	460b      	mov	r3, r1
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	f7f9 f969 	bl	800bf1c <SecureElementComputeAesCmac>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d001      	beq.n	8012c54 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012c50:	230f      	movs	r3, #15
 8012c52:	e000      	b.n	8012c56 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	371c      	adds	r7, #28
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd90      	pop	{r4, r7, pc}

08012c5e <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012c5e:	b590      	push	{r4, r7, lr}
 8012c60:	b0cd      	sub	sp, #308	; 0x134
 8012c62:	af04      	add	r7, sp, #16
 8012c64:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8012c68:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8012c6c:	6020      	str	r0, [r4, #0]
 8012c6e:	460c      	mov	r4, r1
 8012c70:	4610      	mov	r0, r2
 8012c72:	4619      	mov	r1, r3
 8012c74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c78:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	801a      	strh	r2, [r3, #0]
 8012c80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c84:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012c88:	4602      	mov	r2, r0
 8012c8a:	701a      	strb	r2, [r3, #0]
 8012c8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012c94:	460a      	mov	r2, r1
 8012c96:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012c98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012c9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d101      	bne.n	8012caa <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ca6:	230a      	movs	r3, #10
 8012ca8:	e063      	b.n	8012d72 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012caa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012cae:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cb8:	d901      	bls.n	8012cbe <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012cba:	230e      	movs	r3, #14
 8012cbc:	e059      	b.n	8012d72 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012cbe:	f107 030c 	add.w	r3, r7, #12
 8012cc2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f003 fb9b 	bl	8016404 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012cce:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012cd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012cd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012cda:	781a      	ldrb	r2, [r3, #0]
 8012cdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012ce0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012ce4:	7819      	ldrb	r1, [r3, #0]
 8012ce6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012cea:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012cee:	8818      	ldrh	r0, [r3, #0]
 8012cf0:	f107 030c 	add.w	r3, r7, #12
 8012cf4:	9302      	str	r3, [sp, #8]
 8012cf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	4623      	mov	r3, r4
 8012d04:	f7ff ff05 	bl	8012b12 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012d08:	f107 030c 	add.w	r3, r7, #12
 8012d0c:	3310      	adds	r3, #16
 8012d0e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8012d12:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8012d16:	8812      	ldrh	r2, [r2, #0]
 8012d18:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8012d1c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8012d20:	6809      	ldr	r1, [r1, #0]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f003 fb33 	bl	801638e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012d28:	2306      	movs	r3, #6
 8012d2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012d2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012d32:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8012d36:	881b      	ldrh	r3, [r3, #0]
 8012d38:	3310      	adds	r3, #16
 8012d3a:	b299      	uxth	r1, r3
 8012d3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012d40:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	f107 000c 	add.w	r0, r7, #12
 8012d4a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012d4e:	f7f9 f903 	bl	800bf58 <SecureElementVerifyAesCmac>
 8012d52:	4603      	mov	r3, r0
 8012d54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012d60:	2300      	movs	r3, #0
 8012d62:	e006      	b.n	8012d72 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012d64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d101      	bne.n	8012d70 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e000      	b.n	8012d72 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d70:	230f      	movs	r3, #15
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd90      	pop	{r4, r7, pc}

08012d7c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b085      	sub	sp, #20
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	4603      	mov	r3, r0
 8012d84:	6039      	str	r1, [r7, #0]
 8012d86:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012d88:	2300      	movs	r3, #0
 8012d8a:	73fb      	strb	r3, [r7, #15]
 8012d8c:	e011      	b.n	8012db2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012d8e:	7bfb      	ldrb	r3, [r7, #15]
 8012d90:	4a0c      	ldr	r2, [pc, #48]	; (8012dc4 <GetKeyAddrItem+0x48>)
 8012d92:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012d96:	79fa      	ldrb	r2, [r7, #7]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d107      	bne.n	8012dac <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012d9c:	7bfb      	ldrb	r3, [r7, #15]
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4a08      	ldr	r2, [pc, #32]	; (8012dc4 <GetKeyAddrItem+0x48>)
 8012da2:	441a      	add	r2, r3
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e006      	b.n	8012dba <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012dac:	7bfb      	ldrb	r3, [r7, #15]
 8012dae:	3301      	adds	r3, #1
 8012db0:	73fb      	strb	r3, [r7, #15]
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d9ea      	bls.n	8012d8e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012db8:	230c      	movs	r3, #12
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3714      	adds	r7, #20
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bc80      	pop	{r7}
 8012dc2:	4770      	bx	lr
 8012dc4:	200000d0 	.word	0x200000d0

08012dc8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b088      	sub	sp, #32
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60b9      	str	r1, [r7, #8]
 8012dd0:	607a      	str	r2, [r7, #4]
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	73fb      	strb	r3, [r7, #15]
 8012dd8:	4613      	mov	r3, r2
 8012dda:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012ddc:	2300      	movs	r3, #0
 8012dde:	613b      	str	r3, [r7, #16]
 8012de0:	f107 0314 	add.w	r3, r7, #20
 8012de4:	2200      	movs	r2, #0
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	605a      	str	r2, [r3, #4]
 8012dea:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
 8012dee:	2b02      	cmp	r3, #2
 8012df0:	d002      	beq.n	8012df8 <DeriveSessionKey10x+0x30>
 8012df2:	2b03      	cmp	r3, #3
 8012df4:	d003      	beq.n	8012dfe <DeriveSessionKey10x+0x36>
 8012df6:	e005      	b.n	8012e04 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	743b      	strb	r3, [r7, #16]
            break;
 8012dfc:	e004      	b.n	8012e08 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012dfe:	2302      	movs	r3, #2
 8012e00:	743b      	strb	r3, [r7, #16]
            break;
 8012e02:	e001      	b.n	8012e08 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012e04:	230b      	movs	r3, #11
 8012e06:	e02a      	b.n	8012e5e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	0a1b      	lsrs	r3, r3, #8
 8012e12:	b2db      	uxtb	r3, r3
 8012e14:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	0c1b      	lsrs	r3, r3, #16
 8012e1a:	b2db      	uxtb	r3, r3
 8012e1c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	0a1b      	lsrs	r3, r3, #8
 8012e28:	b2db      	uxtb	r3, r3
 8012e2a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	0c1b      	lsrs	r3, r3, #16
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012e34:	89bb      	ldrh	r3, [r7, #12]
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012e3a:	89bb      	ldrh	r3, [r7, #12]
 8012e3c:	0a1b      	lsrs	r3, r3, #8
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012e44:	7bfa      	ldrb	r2, [r7, #15]
 8012e46:	f107 0310 	add.w	r3, r7, #16
 8012e4a:	2101      	movs	r1, #1
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7f9 f919 	bl	800c084 <SecureElementDeriveAndStoreKey>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e58:	230f      	movs	r3, #15
 8012e5a:	e000      	b.n	8012e5e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e5c:	2300      	movs	r3, #0
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3720      	adds	r7, #32
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
	...

08012e68 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	4603      	mov	r3, r0
 8012e70:	6039      	str	r1, [r7, #0]
 8012e72:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d101      	bne.n	8012e7e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e7a:	230a      	movs	r3, #10
 8012e7c:	e03b      	b.n	8012ef6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	3b01      	subs	r3, #1
 8012e82:	2b03      	cmp	r3, #3
 8012e84:	d834      	bhi.n	8012ef0 <GetLastFcntDown+0x88>
 8012e86:	a201      	add	r2, pc, #4	; (adr r2, 8012e8c <GetLastFcntDown+0x24>)
 8012e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e8c:	08012e9d 	.word	0x08012e9d
 8012e90:	08012eb5 	.word	0x08012eb5
 8012e94:	08012ecd 	.word	0x08012ecd
 8012e98:	08012ee5 	.word	0x08012ee5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012e9c:	4b18      	ldr	r3, [pc, #96]	; (8012f00 <GetLastFcntDown+0x98>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	691a      	ldr	r2, [r3, #16]
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012ea6:	4b16      	ldr	r3, [pc, #88]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	4b15      	ldr	r3, [pc, #84]	; (8012f00 <GetLastFcntDown+0x98>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	6912      	ldr	r2, [r2, #16]
 8012eb0:	621a      	str	r2, [r3, #32]
            break;
 8012eb2:	e01f      	b.n	8012ef4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012eb4:	4b12      	ldr	r3, [pc, #72]	; (8012f00 <GetLastFcntDown+0x98>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	695a      	ldr	r2, [r3, #20]
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012ebe:	4b10      	ldr	r3, [pc, #64]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	4b0f      	ldr	r3, [pc, #60]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	6952      	ldr	r2, [r2, #20]
 8012ec8:	621a      	str	r2, [r3, #32]
            break;
 8012eca:	e013      	b.n	8012ef4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012ecc:	4b0c      	ldr	r3, [pc, #48]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	699a      	ldr	r2, [r3, #24]
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012ed6:	4b0a      	ldr	r3, [pc, #40]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <GetLastFcntDown+0x98>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	6992      	ldr	r2, [r2, #24]
 8012ee0:	621a      	str	r2, [r3, #32]
            break;
 8012ee2:	e007      	b.n	8012ef4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012ee4:	4b06      	ldr	r3, [pc, #24]	; (8012f00 <GetLastFcntDown+0x98>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	69da      	ldr	r2, [r3, #28]
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	601a      	str	r2, [r3, #0]
            break;
 8012eee:	e001      	b.n	8012ef4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012ef0:	2305      	movs	r3, #5
 8012ef2:	e000      	b.n	8012ef6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012ef4:	2300      	movs	r3, #0
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	370c      	adds	r7, #12
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bc80      	pop	{r7}
 8012efe:	4770      	bx	lr
 8012f00:	20001b58 	.word	0x20001b58

08012f04 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	6039      	str	r1, [r7, #0]
 8012f0e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012f10:	2300      	movs	r3, #0
 8012f12:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012f14:	f107 020c 	add.w	r2, r7, #12
 8012f18:	79fb      	ldrb	r3, [r7, #7]
 8012f1a:	4611      	mov	r1, r2
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff ffa3 	bl	8012e68 <GetLastFcntDown>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d001      	beq.n	8012f2c <CheckFCntDown+0x28>
    {
        return false;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	e00a      	b.n	8012f42 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	683a      	ldr	r2, [r7, #0]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d803      	bhi.n	8012f3c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012f34:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f3a:	d101      	bne.n	8012f40 <CheckFCntDown+0x3c>
    {
        return true;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e000      	b.n	8012f42 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012f40:	2300      	movs	r3, #0
    }
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
	...

08012f4c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	4603      	mov	r3, r0
 8012f54:	6039      	str	r1, [r7, #0]
 8012f56:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012f58:	79fb      	ldrb	r3, [r7, #7]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	2b03      	cmp	r3, #3
 8012f5e:	d81f      	bhi.n	8012fa0 <UpdateFCntDown+0x54>
 8012f60:	a201      	add	r2, pc, #4	; (adr r2, 8012f68 <UpdateFCntDown+0x1c>)
 8012f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f66:	bf00      	nop
 8012f68:	08012f79 	.word	0x08012f79
 8012f6c:	08012f83 	.word	0x08012f83
 8012f70:	08012f8d 	.word	0x08012f8d
 8012f74:	08012f97 	.word	0x08012f97
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012f78:	4b0c      	ldr	r3, [pc, #48]	; (8012fac <UpdateFCntDown+0x60>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	683a      	ldr	r2, [r7, #0]
 8012f7e:	611a      	str	r2, [r3, #16]
            break;
 8012f80:	e00f      	b.n	8012fa2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012f82:	4b0a      	ldr	r3, [pc, #40]	; (8012fac <UpdateFCntDown+0x60>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	683a      	ldr	r2, [r7, #0]
 8012f88:	615a      	str	r2, [r3, #20]
            break;
 8012f8a:	e00a      	b.n	8012fa2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012f8c:	4b07      	ldr	r3, [pc, #28]	; (8012fac <UpdateFCntDown+0x60>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	619a      	str	r2, [r3, #24]
            break;
 8012f94:	e005      	b.n	8012fa2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012f96:	4b05      	ldr	r3, [pc, #20]	; (8012fac <UpdateFCntDown+0x60>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	61da      	str	r2, [r3, #28]
            break;
 8012f9e:	e000      	b.n	8012fa2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012fa0:	bf00      	nop
    }
}
 8012fa2:	bf00      	nop
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bc80      	pop	{r7}
 8012faa:	4770      	bx	lr
 8012fac:	20001b58 	.word	0x20001b58

08012fb0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012fb6:	4b18      	ldr	r3, [pc, #96]	; (8013018 <ResetFCnts+0x68>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012fbe:	4b16      	ldr	r3, [pc, #88]	; (8013018 <ResetFCnts+0x68>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012fc8:	4b13      	ldr	r3, [pc, #76]	; (8013018 <ResetFCnts+0x68>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012fd2:	4b11      	ldr	r3, [pc, #68]	; (8013018 <ResetFCnts+0x68>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fda:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012fdc:	4b0e      	ldr	r3, [pc, #56]	; (8013018 <ResetFCnts+0x68>)
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	4b0d      	ldr	r3, [pc, #52]	; (8013018 <ResetFCnts+0x68>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	6992      	ldr	r2, [r2, #24]
 8012fe6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012fe8:	2300      	movs	r3, #0
 8012fea:	607b      	str	r3, [r7, #4]
 8012fec:	e00b      	b.n	8013006 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012fee:	4b0a      	ldr	r3, [pc, #40]	; (8013018 <ResetFCnts+0x68>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	3306      	adds	r3, #6
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	4413      	add	r3, r2
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	3301      	adds	r3, #1
 8013004:	607b      	str	r3, [r7, #4]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	ddf0      	ble.n	8012fee <ResetFCnts+0x3e>
    }
}
 801300c:	bf00      	nop
 801300e:	bf00      	nop
 8013010:	370c      	adds	r7, #12
 8013012:	46bd      	mov	sp, r7
 8013014:	bc80      	pop	{r7}
 8013016:	4770      	bx	lr
 8013018:	20001b58 	.word	0x20001b58

0801301c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d101      	bne.n	801302e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801302a:	2309      	movs	r3, #9
 801302c:	e01c      	b.n	8013068 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801302e:	4a10      	ldr	r2, [pc, #64]	; (8013070 <LoRaMacCryptoInit+0x54>)
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013034:	4b0e      	ldr	r3, [pc, #56]	; (8013070 <LoRaMacCryptoInit+0x54>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2228      	movs	r2, #40	; 0x28
 801303a:	2100      	movs	r1, #0
 801303c:	4618      	mov	r0, r3
 801303e:	f003 f9e1 	bl	8016404 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013042:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <LoRaMacCryptoInit+0x54>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	2201      	movs	r2, #1
 8013048:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801304a:	4b09      	ldr	r3, [pc, #36]	; (8013070 <LoRaMacCryptoInit+0x54>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2201      	movs	r2, #1
 8013050:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013052:	4b07      	ldr	r3, [pc, #28]	; (8013070 <LoRaMacCryptoInit+0x54>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2201      	movs	r2, #1
 8013058:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801305a:	4b05      	ldr	r3, [pc, #20]	; (8013070 <LoRaMacCryptoInit+0x54>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2200      	movs	r2, #0
 8013060:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013062:	f7ff ffa5 	bl	8012fb0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	20001b58 	.word	0x20001b58

08013074 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801307c:	4b04      	ldr	r3, [pc, #16]	; (8013090 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013084:	2300      	movs	r3, #0
}
 8013086:	4618      	mov	r0, r3
 8013088:	370c      	adds	r7, #12
 801308a:	46bd      	mov	sp, r7
 801308c:	bc80      	pop	{r7}
 801308e:	4770      	bx	lr
 8013090:	20001b58 	.word	0x20001b58

08013094 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d101      	bne.n	80130a6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130a2:	230a      	movs	r3, #10
 80130a4:	e006      	b.n	80130b4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80130a6:	4b06      	ldr	r3, [pc, #24]	; (80130c0 <LoRaMacCryptoGetFCntUp+0x2c>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	1c5a      	adds	r2, r3, #1
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bc80      	pop	{r7}
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	20001b58 	.word	0x20001b58

080130c4 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80130c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80130c8:	b08a      	sub	sp, #40	; 0x28
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	613a      	str	r2, [r7, #16]
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	4603      	mov	r3, r0
 80130d2:	75fb      	strb	r3, [r7, #23]
 80130d4:	460b      	mov	r3, r1
 80130d6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80130d8:	2300      	movs	r3, #0
 80130da:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80130dc:	2300      	movs	r3, #0
 80130de:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80130e0:	2313      	movs	r3, #19
 80130e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d101      	bne.n	80130f0 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130ec:	230a      	movs	r3, #10
 80130ee:	e057      	b.n	80131a0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80130f0:	f107 021c 	add.w	r2, r7, #28
 80130f4:	7dfb      	ldrb	r3, [r7, #23]
 80130f6:	4611      	mov	r1, r2
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7ff feb5 	bl	8012e68 <GetLastFcntDown>
 80130fe:	4603      	mov	r3, r0
 8013100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801310c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013110:	e046      	b.n	80131a0 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013118:	d103      	bne.n	8013122 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	601a      	str	r2, [r3, #0]
 8013120:	e01e      	b.n	8013160 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	b29b      	uxth	r3, r3
 8013126:	693a      	ldr	r2, [r7, #16]
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312e:	2b00      	cmp	r3, #0
 8013130:	dd05      	ble.n	801313e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013132:	69fa      	ldr	r2, [r7, #28]
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	441a      	add	r2, r3
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	601a      	str	r2, [r3, #0]
 801313c:	e010      	b.n	8013160 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013144:	69fa      	ldr	r2, [r7, #28]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801314a:	2307      	movs	r3, #7
 801314c:	e028      	b.n	80131a0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	0c1b      	lsrs	r3, r3, #16
 8013152:	041b      	lsls	r3, r3, #16
 8013154:	693a      	ldr	r2, [r7, #16]
 8013156:	4413      	add	r3, r2
 8013158:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013160:	4b12      	ldr	r3, [pc, #72]	; (80131ac <LoRaMacCryptoGetFCntDown+0xe8>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	789b      	ldrb	r3, [r3, #2]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d119      	bne.n	801319e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2200      	movs	r2, #0
 8013170:	603b      	str	r3, [r7, #0]
 8013172:	607a      	str	r2, [r7, #4]
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	2200      	movs	r2, #0
 8013178:	469a      	mov	sl, r3
 801317a:	4693      	mov	fp, r2
 801317c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013180:	4611      	mov	r1, r2
 8013182:	ebb1 040a 	subs.w	r4, r1, sl
 8013186:	eb63 050b 	sbc.w	r5, r3, fp
 801318a:	8abb      	ldrh	r3, [r7, #20]
 801318c:	2200      	movs	r2, #0
 801318e:	4698      	mov	r8, r3
 8013190:	4691      	mov	r9, r2
 8013192:	4544      	cmp	r4, r8
 8013194:	eb75 0309 	sbcs.w	r3, r5, r9
 8013198:	db01      	blt.n	801319e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801319a:	2308      	movs	r3, #8
 801319c:	e000      	b.n	80131a0 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3728      	adds	r7, #40	; 0x28
 80131a4:	46bd      	mov	sp, r7
 80131a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131aa:	bf00      	nop
 80131ac:	20001b58 	.word	0x20001b58

080131b0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80131b0:	b480      	push	{r7}
 80131b2:	b085      	sub	sp, #20
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d101      	bne.n	80131c2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131be:	230a      	movs	r3, #10
 80131c0:	e017      	b.n	80131f2 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80131c2:	2300      	movs	r3, #0
 80131c4:	60fb      	str	r3, [r7, #12]
 80131c6:	e010      	b.n	80131ea <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80131c8:	4b0c      	ldr	r3, [pc, #48]	; (80131fc <LoRaMacCryptoSetMulticastReference+0x4c>)
 80131ca:	6819      	ldr	r1, [r3, #0]
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	222c      	movs	r2, #44	; 0x2c
 80131d0:	fb02 f303 	mul.w	r3, r2, r3
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	4413      	add	r3, r2
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	3206      	adds	r2, #6
 80131dc:	0092      	lsls	r2, r2, #2
 80131de:	440a      	add	r2, r1
 80131e0:	3204      	adds	r2, #4
 80131e2:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	3301      	adds	r3, #1
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	ddeb      	ble.n	80131c8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3714      	adds	r7, #20
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bc80      	pop	{r7}
 80131fa:	4770      	bx	lr
 80131fc:	20001b58 	.word	0x20001b58

08013200 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	4603      	mov	r3, r0
 8013208:	6039      	str	r1, [r7, #0]
 801320a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801320c:	79fb      	ldrb	r3, [r7, #7]
 801320e:	6839      	ldr	r1, [r7, #0]
 8013210:	4618      	mov	r0, r3
 8013212:	f7f8 fe25 	bl	800be60 <SecureElementSetKey>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d001      	beq.n	8013220 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801321c:	230f      	movs	r3, #15
 801321e:	e018      	b.n	8013252 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013220:	79fb      	ldrb	r3, [r7, #7]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d114      	bne.n	8013250 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013226:	4b0d      	ldr	r3, [pc, #52]	; (801325c <LoRaMacCryptoSetKey+0x5c>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	789b      	ldrb	r3, [r3, #2]
 801322c:	79fa      	ldrb	r2, [r7, #7]
 801322e:	4611      	mov	r1, r2
 8013230:	4618      	mov	r0, r3
 8013232:	f000 fa3f 	bl	80136b4 <LoRaMacCryptoDeriveMcRootKey>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d001      	beq.n	8013240 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801323c:	230f      	movs	r3, #15
 801323e:	e008      	b.n	8013252 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013240:	2004      	movs	r0, #4
 8013242:	f000 fa62 	bl	801370a <LoRaMacCryptoDeriveMcKEKey>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d001      	beq.n	8013250 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801324c:	230f      	movs	r3, #15
 801324e:	e000      	b.n	8013252 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013250:	2300      	movs	r3, #0
}
 8013252:	4618      	mov	r0, r3
 8013254:	3708      	adds	r7, #8
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	20001b58 	.word	0x20001b58

08013260 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af02      	add	r7, sp, #8
 8013266:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801326e:	230a      	movs	r3, #10
 8013270:	e033      	b.n	80132da <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013272:	2301      	movs	r3, #1
 8013274:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801327a:	f107 0308 	add.w	r3, r7, #8
 801327e:	4618      	mov	r0, r3
 8013280:	f7f8 ffbe 	bl	800c200 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013284:	68ba      	ldr	r2, [r7, #8]
 8013286:	4b17      	ldr	r3, [pc, #92]	; (80132e4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	b292      	uxth	r2, r2
 801328c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801328e:	4b15      	ldr	r3, [pc, #84]	; (80132e4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	889a      	ldrh	r2, [r3, #4]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f000 fc18 	bl	8013ace <LoRaMacSerializerJoinRequest>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d001      	beq.n	80132a8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80132a4:	2311      	movs	r3, #17
 80132a6:	e018      	b.n	80132da <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6819      	ldr	r1, [r3, #0]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	3318      	adds	r3, #24
 80132b0:	7bfa      	ldrb	r2, [r7, #15]
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	4613      	mov	r3, r2
 80132b6:	2213      	movs	r2, #19
 80132b8:	2000      	movs	r0, #0
 80132ba:	f7f8 fe2f 	bl	800bf1c <SecureElementComputeAesCmac>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132c4:	230f      	movs	r3, #15
 80132c6:	e008      	b.n	80132da <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 fc00 	bl	8013ace <LoRaMacSerializerJoinRequest>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80132d4:	2311      	movs	r3, #17
 80132d6:	e000      	b.n	80132da <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80132d8:	2300      	movs	r3, #0
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	20001b58 	.word	0x20001b58

080132e8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80132e8:	b590      	push	{r4, r7, lr}
 80132ea:	b097      	sub	sp, #92	; 0x5c
 80132ec:	af04      	add	r7, sp, #16
 80132ee:	4603      	mov	r3, r0
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d002      	beq.n	8013302 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013302:	230a      	movs	r3, #10
 8013304:	e0bd      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013306:	2313      	movs	r3, #19
 8013308:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801330c:	2300      	movs	r3, #0
 801330e:	61bb      	str	r3, [r7, #24]
 8013310:	f107 031c 	add.w	r3, r7, #28
 8013314:	221d      	movs	r2, #29
 8013316:	2100      	movs	r1, #0
 8013318:	4618      	mov	r0, r3
 801331a:	f006 fe6d 	bl	8019ff8 <memset>
    uint8_t versionMinor         = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013322:	4b5a      	ldr	r3, [pc, #360]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	889b      	ldrh	r3, [r3, #4]
 8013328:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681c      	ldr	r4, [r3, #0]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	791b      	ldrb	r3, [r3, #4]
 8013334:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013338:	7bf8      	ldrb	r0, [r7, #15]
 801333a:	f107 0217 	add.w	r2, r7, #23
 801333e:	9202      	str	r2, [sp, #8]
 8013340:	f107 0218 	add.w	r2, r7, #24
 8013344:	9201      	str	r2, [sp, #4]
 8013346:	9300      	str	r3, [sp, #0]
 8013348:	4623      	mov	r3, r4
 801334a:	460a      	mov	r2, r1
 801334c:	68b9      	ldr	r1, [r7, #8]
 801334e:	f7f8 fed9 	bl	800c104 <SecureElementProcessJoinAccept>
 8013352:	4603      	mov	r3, r0
 8013354:	2b00      	cmp	r3, #0
 8013356:	d001      	beq.n	801335c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013358:	230f      	movs	r3, #15
 801335a:	e092      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6818      	ldr	r0, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	791b      	ldrb	r3, [r3, #4]
 8013364:	b29a      	uxth	r2, r3
 8013366:	f107 0318 	add.w	r3, r7, #24
 801336a:	4619      	mov	r1, r3
 801336c:	f003 f80f 	bl	801638e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f000 f9ed 	bl	8013750 <LoRaMacParserJoinAccept>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d001      	beq.n	8013380 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801337c:	2310      	movs	r3, #16
 801337e:	e080      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	799b      	ldrb	r3, [r3, #6]
 8013384:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	79db      	ldrb	r3, [r3, #7]
 801338a:	021b      	lsls	r3, r3, #8
 801338c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801338e:	4313      	orrs	r3, r2
 8013390:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	7a1b      	ldrb	r3, [r3, #8]
 8013396:	041b      	lsls	r3, r3, #16
 8013398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801339a:	4313      	orrs	r3, r2
 801339c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801339e:	4b3b      	ldr	r3, [pc, #236]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133a6:	429a      	cmp	r2, r3
 80133a8:	d010      	beq.n	80133cc <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80133aa:	4b38      	ldr	r3, [pc, #224]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133b0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80133b2:	7dfb      	ldrb	r3, [r7, #23]
 80133b4:	2100      	movs	r1, #0
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 f97c 	bl	80136b4 <LoRaMacCryptoDeriveMcRootKey>
 80133bc:	4603      	mov	r3, r0
 80133be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d005      	beq.n	80133d6 <LoRaMacCryptoHandleJoinAccept+0xee>
 80133ca:	e001      	b.n	80133d0 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80133cc:	2303      	movs	r3, #3
 80133ce:	e058      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80133d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133d4:	e055      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80133d6:	2004      	movs	r0, #4
 80133d8:	f000 f997 	bl	801370a <LoRaMacCryptoDeriveMcKEKey>
 80133dc:	4603      	mov	r3, r0
 80133de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d002      	beq.n	80133f0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80133ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133ee:	e048      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	7a5b      	ldrb	r3, [r3, #9]
 80133f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	7a9b      	ldrb	r3, [r3, #10]
 80133fa:	021b      	lsls	r3, r3, #8
 80133fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133fe:	4313      	orrs	r3, r2
 8013400:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	7adb      	ldrb	r3, [r3, #11]
 8013406:	041b      	lsls	r3, r3, #16
 8013408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801340a:	4313      	orrs	r3, r2
 801340c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801340e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013416:	2003      	movs	r0, #3
 8013418:	f7ff fcd6 	bl	8012dc8 <DeriveSessionKey10x>
 801341c:	4603      	mov	r3, r0
 801341e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013422:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801342a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801342e:	e028      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013438:	2002      	movs	r0, #2
 801343a:	f7ff fcc5 	bl	8012dc8 <DeriveSessionKey10x>
 801343e:	4603      	mov	r3, r0
 8013440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013444:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801344c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013450:	e017      	b.n	8013482 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013452:	4b0e      	ldr	r3, [pc, #56]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	7dfa      	ldrb	r2, [r7, #23]
 8013458:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801345a:	4b0c      	ldr	r3, [pc, #48]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2200      	movs	r2, #0
 8013460:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013462:	4b0a      	ldr	r3, [pc, #40]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f04f 32ff 	mov.w	r2, #4294967295
 801346a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801346c:	4b07      	ldr	r3, [pc, #28]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f04f 32ff 	mov.w	r2, #4294967295
 8013474:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013476:	4b05      	ldr	r3, [pc, #20]	; (801348c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f04f 32ff 	mov.w	r2, #4294967295
 801347e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013480:	2300      	movs	r3, #0
}
 8013482:	4618      	mov	r0, r3
 8013484:	374c      	adds	r7, #76	; 0x4c
 8013486:	46bd      	mov	sp, r7
 8013488:	bd90      	pop	{r4, r7, pc}
 801348a:	bf00      	nop
 801348c:	20001b58 	.word	0x20001b58

08013490 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013490:	b590      	push	{r4, r7, lr}
 8013492:	b08b      	sub	sp, #44	; 0x2c
 8013494:	af04      	add	r7, sp, #16
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	607b      	str	r3, [r7, #4]
 801349a:	460b      	mov	r3, r1
 801349c:	72fb      	strb	r3, [r7, #11]
 801349e:	4613      	mov	r3, r2
 80134a0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80134a2:	2313      	movs	r3, #19
 80134a4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80134a6:	2303      	movs	r3, #3
 80134a8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d101      	bne.n	80134b4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134b0:	230a      	movs	r3, #10
 80134b2:	e05f      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80134b4:	4b31      	ldr	r3, [pc, #196]	; (801357c <LoRaMacCryptoSecureMessage+0xec>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d201      	bcs.n	80134c4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80134c0:	2306      	movs	r3, #6
 80134c2:	e057      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d101      	bne.n	80134d2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80134ce:	2302      	movs	r3, #2
 80134d0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80134d2:	4b2a      	ldr	r3, [pc, #168]	; (801357c <LoRaMacCryptoSecureMessage+0xec>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d916      	bls.n	801350c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e8:	b219      	sxth	r1, r3
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	689c      	ldr	r4, [r3, #8]
 80134ee:	7dfa      	ldrb	r2, [r7, #23]
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	9301      	str	r3, [sp, #4]
 80134f4:	2300      	movs	r3, #0
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	4623      	mov	r3, r4
 80134fa:	f7ff fa71 	bl	80129e0 <PayloadEncrypt>
 80134fe:	4603      	mov	r3, r0
 8013500:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013502:	7dbb      	ldrb	r3, [r7, #22]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d001      	beq.n	801350c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013508:	7dbb      	ldrb	r3, [r7, #22]
 801350a:	e033      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 fb60 	bl	8013bd2 <LoRaMacSerializerData>
 8013512:	4603      	mov	r3, r0
 8013514:	2b00      	cmp	r3, #0
 8013516:	d001      	beq.n	801351c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013518:	2311      	movs	r3, #17
 801351a:	e02b      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801351c:	2302      	movs	r3, #2
 801351e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6818      	ldr	r0, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	791b      	ldrb	r3, [r3, #4]
 8013528:	b29b      	uxth	r3, r3
 801352a:	3b04      	subs	r3, #4
 801352c:	b299      	uxth	r1, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	689b      	ldr	r3, [r3, #8]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	322c      	adds	r2, #44	; 0x2c
 8013536:	7dfc      	ldrb	r4, [r7, #23]
 8013538:	9203      	str	r2, [sp, #12]
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	9202      	str	r2, [sp, #8]
 801353e:	9301      	str	r3, [sp, #4]
 8013540:	2300      	movs	r3, #0
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	2300      	movs	r3, #0
 8013546:	4622      	mov	r2, r4
 8013548:	f7ff fb4b 	bl	8012be2 <ComputeCmacB0>
 801354c:	4603      	mov	r3, r0
 801354e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013550:	7dbb      	ldrb	r3, [r7, #22]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013556:	7dbb      	ldrb	r3, [r7, #22]
 8013558:	e00c      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 fb39 	bl	8013bd2 <LoRaMacSerializerData>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013566:	2311      	movs	r3, #17
 8013568:	e004      	b.n	8013574 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801356a:	4b04      	ldr	r3, [pc, #16]	; (801357c <LoRaMacCryptoSecureMessage+0xec>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013572:	2300      	movs	r3, #0
}
 8013574:	4618      	mov	r0, r3
 8013576:	371c      	adds	r7, #28
 8013578:	46bd      	mov	sp, r7
 801357a:	bd90      	pop	{r4, r7, pc}
 801357c:	20001b58 	.word	0x20001b58

08013580 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013580:	b590      	push	{r4, r7, lr}
 8013582:	b08b      	sub	sp, #44	; 0x2c
 8013584:	af04      	add	r7, sp, #16
 8013586:	60b9      	str	r1, [r7, #8]
 8013588:	607b      	str	r3, [r7, #4]
 801358a:	4603      	mov	r3, r0
 801358c:	73fb      	strb	r3, [r7, #15]
 801358e:	4613      	mov	r3, r2
 8013590:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013594:	2b00      	cmp	r3, #0
 8013596:	d101      	bne.n	801359c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013598:	230a      	movs	r3, #10
 801359a:	e084      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801359c:	7bbb      	ldrb	r3, [r7, #14]
 801359e:	6879      	ldr	r1, [r7, #4]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff fcaf 	bl	8012f04 <CheckFCntDown>
 80135a6:	4603      	mov	r3, r0
 80135a8:	f083 0301 	eor.w	r3, r3, #1
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d001      	beq.n	80135b6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80135b2:	2306      	movs	r3, #6
 80135b4:	e077      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135b6:	2313      	movs	r3, #19
 80135b8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80135ba:	2303      	movs	r3, #3
 80135bc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80135be:	2302      	movs	r3, #2
 80135c0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80135c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135c4:	f000 f98f 	bl	80138e6 <LoRaMacParserData>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80135ce:	2310      	movs	r3, #16
 80135d0:	e069      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80135d2:	f107 0210 	add.w	r2, r7, #16
 80135d6:	7bfb      	ldrb	r3, [r7, #15]
 80135d8:	4611      	mov	r1, r2
 80135da:	4618      	mov	r0, r3
 80135dc:	f7ff fbce 	bl	8012d7c <GetKeyAddrItem>
 80135e0:	4603      	mov	r3, r0
 80135e2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80135e4:	7d7b      	ldrb	r3, [r7, #21]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d001      	beq.n	80135ee <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80135ea:	7d7b      	ldrb	r3, [r7, #21]
 80135ec:	e05b      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	785b      	ldrb	r3, [r3, #1]
 80135f2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	789b      	ldrb	r3, [r3, #2]
 80135f8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80135fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	429a      	cmp	r2, r3
 8013602:	d001      	beq.n	8013608 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013604:	2302      	movs	r3, #2
 8013606:	e04e      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	7b1b      	ldrb	r3, [r3, #12]
 801360c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013610:	b2db      	uxtb	r3, r3
 8013612:	2b00      	cmp	r3, #0
 8013614:	bf14      	ite	ne
 8013616:	2301      	movne	r3, #1
 8013618:	2300      	moveq	r3, #0
 801361a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801361c:	4b24      	ldr	r3, [pc, #144]	; (80136b0 <LoRaMacCryptoUnsecureMessage+0x130>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	789b      	ldrb	r3, [r3, #2]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d101      	bne.n	801362a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013626:	2300      	movs	r3, #0
 8013628:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801362a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362c:	6818      	ldr	r0, [r3, #0]
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	791b      	ldrb	r3, [r3, #4]
 8013632:	b29b      	uxth	r3, r3
 8013634:	3b04      	subs	r3, #4
 8013636:	b299      	uxth	r1, r3
 8013638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801363c:	7dbc      	ldrb	r4, [r7, #22]
 801363e:	7d3a      	ldrb	r2, [r7, #20]
 8013640:	9303      	str	r3, [sp, #12]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	9302      	str	r3, [sp, #8]
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	9301      	str	r3, [sp, #4]
 801364a:	2301      	movs	r3, #1
 801364c:	9300      	str	r3, [sp, #0]
 801364e:	4623      	mov	r3, r4
 8013650:	f7ff fb05 	bl	8012c5e <VerifyCmacB0>
 8013654:	4603      	mov	r3, r0
 8013656:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013658:	7d7b      	ldrb	r3, [r7, #21]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d001      	beq.n	8013662 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801365e:	7d7b      	ldrb	r3, [r7, #21]
 8013660:	e021      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d101      	bne.n	8013670 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801366c:	2302      	movs	r3, #2
 801366e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013672:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801367a:	b219      	sxth	r1, r3
 801367c:	7dfa      	ldrb	r2, [r7, #23]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	2301      	movs	r3, #1
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	f7ff f9aa 	bl	80129e0 <PayloadEncrypt>
 801368c:	4603      	mov	r3, r0
 801368e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013690:	7d7b      	ldrb	r3, [r7, #21]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013696:	7d7b      	ldrb	r3, [r7, #21]
 8013698:	e005      	b.n	80136a6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801369a:	7bbb      	ldrb	r3, [r7, #14]
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff fc54 	bl	8012f4c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	371c      	adds	r7, #28
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd90      	pop	{r4, r7, pc}
 80136ae:	bf00      	nop
 80136b0:	20001b58 	.word	0x20001b58

080136b4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	4603      	mov	r3, r0
 80136bc:	460a      	mov	r2, r1
 80136be:	71fb      	strb	r3, [r7, #7]
 80136c0:	4613      	mov	r3, r2
 80136c2:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80136c4:	79bb      	ldrb	r3, [r7, #6]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d001      	beq.n	80136ce <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80136ca:	230b      	movs	r3, #11
 80136cc:	e019      	b.n	8013702 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80136ce:	2300      	movs	r3, #0
 80136d0:	60bb      	str	r3, [r7, #8]
 80136d2:	f107 030c 	add.w	r3, r7, #12
 80136d6:	2200      	movs	r2, #0
 80136d8:	601a      	str	r2, [r3, #0]
 80136da:	605a      	str	r2, [r3, #4]
 80136dc:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80136de:	79fb      	ldrb	r3, [r7, #7]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d101      	bne.n	80136e8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80136e4:	2320      	movs	r3, #32
 80136e6:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80136e8:	79b9      	ldrb	r1, [r7, #6]
 80136ea:	f107 0308 	add.w	r3, r7, #8
 80136ee:	2204      	movs	r2, #4
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f8 fcc7 	bl	800c084 <SecureElementDeriveAndStoreKey>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d001      	beq.n	8013700 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136fc:	230f      	movs	r3, #15
 80136fe:	e000      	b.n	8013702 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013700:	2300      	movs	r3, #0
}
 8013702:	4618      	mov	r0, r3
 8013704:	3718      	adds	r7, #24
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}

0801370a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801370a:	b580      	push	{r7, lr}
 801370c:	b086      	sub	sp, #24
 801370e:	af00      	add	r7, sp, #0
 8013710:	4603      	mov	r3, r0
 8013712:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013714:	79fb      	ldrb	r3, [r7, #7]
 8013716:	2b04      	cmp	r3, #4
 8013718:	d001      	beq.n	801371e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801371a:	230b      	movs	r3, #11
 801371c:	e014      	b.n	8013748 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801371e:	2300      	movs	r3, #0
 8013720:	60bb      	str	r3, [r7, #8]
 8013722:	f107 030c 	add.w	r3, r7, #12
 8013726:	2200      	movs	r2, #0
 8013728:	601a      	str	r2, [r3, #0]
 801372a:	605a      	str	r2, [r3, #4]
 801372c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801372e:	79f9      	ldrb	r1, [r7, #7]
 8013730:	f107 0308 	add.w	r3, r7, #8
 8013734:	227f      	movs	r2, #127	; 0x7f
 8013736:	4618      	mov	r0, r3
 8013738:	f7f8 fca4 	bl	800c084 <SecureElementDeriveAndStoreKey>
 801373c:	4603      	mov	r3, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013742:	230f      	movs	r3, #15
 8013744:	e000      	b.n	8013748 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013746:	2300      	movs	r3, #0
}
 8013748:	4618      	mov	r0, r3
 801374a:	3718      	adds	r7, #24
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d003      	beq.n	8013766 <LoRaMacParserJoinAccept+0x16>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d101      	bne.n	801376a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013766:	2302      	movs	r3, #2
 8013768:	e0b9      	b.n	80138de <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801376a:	2300      	movs	r3, #0
 801376c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	89fb      	ldrh	r3, [r7, #14]
 8013774:	1c59      	adds	r1, r3, #1
 8013776:	81f9      	strh	r1, [r7, #14]
 8013778:	4413      	add	r3, r2
 801377a:	781a      	ldrb	r2, [r3, #0]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	1d98      	adds	r0, r3, #6
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	89fb      	ldrh	r3, [r7, #14]
 801378a:	4413      	add	r3, r2
 801378c:	2203      	movs	r2, #3
 801378e:	4619      	mov	r1, r3
 8013790:	f002 fdfd 	bl	801638e <memcpy1>
    bufItr = bufItr + 3;
 8013794:	89fb      	ldrh	r3, [r7, #14]
 8013796:	3303      	adds	r3, #3
 8013798:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f103 0009 	add.w	r0, r3, #9
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	89fb      	ldrh	r3, [r7, #14]
 80137a6:	4413      	add	r3, r2
 80137a8:	2203      	movs	r2, #3
 80137aa:	4619      	mov	r1, r3
 80137ac:	f002 fdef 	bl	801638e <memcpy1>
    bufItr = bufItr + 3;
 80137b0:	89fb      	ldrh	r3, [r7, #14]
 80137b2:	3303      	adds	r3, #3
 80137b4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	89fb      	ldrh	r3, [r7, #14]
 80137bc:	1c59      	adds	r1, r3, #1
 80137be:	81f9      	strh	r1, [r7, #14]
 80137c0:	4413      	add	r3, r2
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	461a      	mov	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	89fb      	ldrh	r3, [r7, #14]
 80137d0:	1c59      	adds	r1, r3, #1
 80137d2:	81f9      	strh	r1, [r7, #14]
 80137d4:	4413      	add	r3, r2
 80137d6:	781b      	ldrb	r3, [r3, #0]
 80137d8:	021a      	lsls	r2, r3, #8
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	431a      	orrs	r2, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	89fb      	ldrh	r3, [r7, #14]
 80137ea:	1c59      	adds	r1, r3, #1
 80137ec:	81f9      	strh	r1, [r7, #14]
 80137ee:	4413      	add	r3, r2
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	041a      	lsls	r2, r3, #16
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	431a      	orrs	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	89fb      	ldrh	r3, [r7, #14]
 8013804:	1c59      	adds	r1, r3, #1
 8013806:	81f9      	strh	r1, [r7, #14]
 8013808:	4413      	add	r3, r2
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	061a      	lsls	r2, r3, #24
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	68db      	ldr	r3, [r3, #12]
 8013812:	431a      	orrs	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	89fb      	ldrh	r3, [r7, #14]
 801381e:	1c59      	adds	r1, r3, #1
 8013820:	81f9      	strh	r1, [r7, #14]
 8013822:	4413      	add	r3, r2
 8013824:	781a      	ldrb	r2, [r3, #0]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681a      	ldr	r2, [r3, #0]
 801382e:	89fb      	ldrh	r3, [r7, #14]
 8013830:	1c59      	adds	r1, r3, #1
 8013832:	81f9      	strh	r1, [r7, #14]
 8013834:	4413      	add	r3, r2
 8013836:	781a      	ldrb	r2, [r3, #0]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	791b      	ldrb	r3, [r3, #4]
 8013840:	1f1a      	subs	r2, r3, #4
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	1ad3      	subs	r3, r2, r3
 8013846:	2b10      	cmp	r3, #16
 8013848:	d10e      	bne.n	8013868 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f103 0012 	add.w	r0, r3, #18
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	4413      	add	r3, r2
 8013858:	2210      	movs	r2, #16
 801385a:	4619      	mov	r1, r3
 801385c:	f002 fd97 	bl	801638e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013860:	89fb      	ldrh	r3, [r7, #14]
 8013862:	3310      	adds	r3, #16
 8013864:	81fb      	strh	r3, [r7, #14]
 8013866:	e008      	b.n	801387a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	791b      	ldrb	r3, [r3, #4]
 801386c:	1f1a      	subs	r2, r3, #4
 801386e:	89fb      	ldrh	r3, [r7, #14]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	2b00      	cmp	r3, #0
 8013874:	dd01      	ble.n	801387a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013876:	2301      	movs	r3, #1
 8013878:	e031      	b.n	80138de <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	89fb      	ldrh	r3, [r7, #14]
 8013880:	1c59      	adds	r1, r3, #1
 8013882:	81f9      	strh	r1, [r7, #14]
 8013884:	4413      	add	r3, r2
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	461a      	mov	r2, r3
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681a      	ldr	r2, [r3, #0]
 8013892:	89fb      	ldrh	r3, [r7, #14]
 8013894:	1c59      	adds	r1, r3, #1
 8013896:	81f9      	strh	r1, [r7, #14]
 8013898:	4413      	add	r3, r2
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	021a      	lsls	r2, r3, #8
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a2:	431a      	orrs	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	89fb      	ldrh	r3, [r7, #14]
 80138ae:	1c59      	adds	r1, r3, #1
 80138b0:	81f9      	strh	r1, [r7, #14]
 80138b2:	4413      	add	r3, r2
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	041a      	lsls	r2, r3, #16
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138bc:	431a      	orrs	r2, r3
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681a      	ldr	r2, [r3, #0]
 80138c6:	89fb      	ldrh	r3, [r7, #14]
 80138c8:	1c59      	adds	r1, r3, #1
 80138ca:	81f9      	strh	r1, [r7, #14]
 80138cc:	4413      	add	r3, r2
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	061a      	lsls	r2, r3, #24
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d6:	431a      	orrs	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}

080138e6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b084      	sub	sp, #16
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d003      	beq.n	80138fc <LoRaMacParserData+0x16>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d101      	bne.n	8013900 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80138fc:	2302      	movs	r3, #2
 80138fe:	e0e2      	b.n	8013ac6 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013900:	2300      	movs	r3, #0
 8013902:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	89fb      	ldrh	r3, [r7, #14]
 801390a:	1c59      	adds	r1, r3, #1
 801390c:	81f9      	strh	r1, [r7, #14]
 801390e:	4413      	add	r3, r2
 8013910:	781a      	ldrb	r2, [r3, #0]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	89fb      	ldrh	r3, [r7, #14]
 801391c:	1c59      	adds	r1, r3, #1
 801391e:	81f9      	strh	r1, [r7, #14]
 8013920:	4413      	add	r3, r2
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	461a      	mov	r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	89fb      	ldrh	r3, [r7, #14]
 8013930:	1c59      	adds	r1, r3, #1
 8013932:	81f9      	strh	r1, [r7, #14]
 8013934:	4413      	add	r3, r2
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	021a      	lsls	r2, r3, #8
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	431a      	orrs	r2, r3
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681a      	ldr	r2, [r3, #0]
 8013948:	89fb      	ldrh	r3, [r7, #14]
 801394a:	1c59      	adds	r1, r3, #1
 801394c:	81f9      	strh	r1, [r7, #14]
 801394e:	4413      	add	r3, r2
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	041a      	lsls	r2, r3, #16
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	689b      	ldr	r3, [r3, #8]
 8013958:	431a      	orrs	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	89fb      	ldrh	r3, [r7, #14]
 8013964:	1c59      	adds	r1, r3, #1
 8013966:	81f9      	strh	r1, [r7, #14]
 8013968:	4413      	add	r3, r2
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	061a      	lsls	r2, r3, #24
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	431a      	orrs	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	89fb      	ldrh	r3, [r7, #14]
 801397e:	1c59      	adds	r1, r3, #1
 8013980:	81f9      	strh	r1, [r7, #14]
 8013982:	4413      	add	r3, r2
 8013984:	781a      	ldrb	r2, [r3, #0]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	89fb      	ldrh	r3, [r7, #14]
 8013990:	1c59      	adds	r1, r3, #1
 8013992:	81f9      	strh	r1, [r7, #14]
 8013994:	4413      	add	r3, r2
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	b29a      	uxth	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	89fb      	ldrh	r3, [r7, #14]
 80139a4:	1c59      	adds	r1, r3, #1
 80139a6:	81f9      	strh	r1, [r7, #14]
 80139a8:	4413      	add	r3, r2
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	0219      	lsls	r1, r3, #8
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	89db      	ldrh	r3, [r3, #14]
 80139b2:	b21a      	sxth	r2, r3
 80139b4:	b20b      	sxth	r3, r1
 80139b6:	4313      	orrs	r3, r2
 80139b8:	b21b      	sxth	r3, r3
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f103 0010 	add.w	r0, r3, #16
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	89fb      	ldrh	r3, [r7, #14]
 80139cc:	18d1      	adds	r1, r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	7b1b      	ldrb	r3, [r3, #12]
 80139d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	b29b      	uxth	r3, r3
 80139da:	461a      	mov	r2, r3
 80139dc:	f002 fcd7 	bl	801638e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	7b1b      	ldrb	r3, [r3, #12]
 80139e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80139e8:	b2db      	uxtb	r3, r3
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	89fb      	ldrh	r3, [r7, #14]
 80139ee:	4413      	add	r3, r2
 80139f0:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2200      	movs	r2, #0
 80139f6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2200      	movs	r2, #0
 80139fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	791b      	ldrb	r3, [r3, #4]
 8013a06:	461a      	mov	r2, r3
 8013a08:	89fb      	ldrh	r3, [r7, #14]
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	2b04      	cmp	r3, #4
 8013a0e:	dd28      	ble.n	8013a62 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	89fb      	ldrh	r3, [r7, #14]
 8013a16:	1c59      	adds	r1, r3, #1
 8013a18:	81f9      	strh	r1, [r7, #14]
 8013a1a:	4413      	add	r3, r2
 8013a1c:	781a      	ldrb	r2, [r3, #0]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	791a      	ldrb	r2, [r3, #4]
 8013a28:	89fb      	ldrh	r3, [r7, #14]
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	3b04      	subs	r3, #4
 8013a32:	b2da      	uxtb	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	89fb      	ldrh	r3, [r7, #14]
 8013a44:	18d1      	adds	r1, r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	461a      	mov	r2, r3
 8013a50:	f002 fc9d 	bl	801638e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	89fb      	ldrh	r3, [r7, #14]
 8013a5e:	4413      	add	r3, r2
 8013a60:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	791b      	ldrb	r3, [r3, #4]
 8013a6a:	3b04      	subs	r3, #4
 8013a6c:	4413      	add	r3, r2
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	461a      	mov	r2, r3
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6819      	ldr	r1, [r3, #0]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	791b      	ldrb	r3, [r3, #4]
 8013a82:	3b03      	subs	r3, #3
 8013a84:	440b      	add	r3, r1
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	021b      	lsls	r3, r3, #8
 8013a8a:	431a      	orrs	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6819      	ldr	r1, [r3, #0]
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	791b      	ldrb	r3, [r3, #4]
 8013a9c:	3b02      	subs	r3, #2
 8013a9e:	440b      	add	r3, r1
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	041b      	lsls	r3, r3, #16
 8013aa4:	431a      	orrs	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6819      	ldr	r1, [r3, #0]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	791b      	ldrb	r3, [r3, #4]
 8013ab6:	3b01      	subs	r3, #1
 8013ab8:	440b      	add	r3, r1
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	061b      	lsls	r3, r3, #24
 8013abe:	431a      	orrs	r2, r3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013ac4:	2300      	movs	r3, #0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b084      	sub	sp, #16
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d003      	beq.n	8013ae4 <LoRaMacSerializerJoinRequest+0x16>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e070      	b.n	8013bca <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	791b      	ldrb	r3, [r3, #4]
 8013af0:	2b16      	cmp	r3, #22
 8013af2:	d801      	bhi.n	8013af8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013af4:	2302      	movs	r3, #2
 8013af6:	e068      	b.n	8013bca <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	89fb      	ldrh	r3, [r7, #14]
 8013afe:	1c59      	adds	r1, r3, #1
 8013b00:	81f9      	strh	r1, [r7, #14]
 8013b02:	4413      	add	r3, r2
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	7952      	ldrb	r2, [r2, #5]
 8013b08:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	89fb      	ldrh	r3, [r7, #14]
 8013b10:	18d0      	adds	r0, r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	3306      	adds	r3, #6
 8013b16:	2208      	movs	r2, #8
 8013b18:	4619      	mov	r1, r3
 8013b1a:	f002 fc53 	bl	80163c4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013b1e:	89fb      	ldrh	r3, [r7, #14]
 8013b20:	3308      	adds	r3, #8
 8013b22:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	89fb      	ldrh	r3, [r7, #14]
 8013b2a:	18d0      	adds	r0, r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	330e      	adds	r3, #14
 8013b30:	2208      	movs	r2, #8
 8013b32:	4619      	mov	r1, r3
 8013b34:	f002 fc46 	bl	80163c4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013b38:	89fb      	ldrh	r3, [r7, #14]
 8013b3a:	3308      	adds	r3, #8
 8013b3c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	8ad9      	ldrh	r1, [r3, #22]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	89fb      	ldrh	r3, [r7, #14]
 8013b48:	1c58      	adds	r0, r3, #1
 8013b4a:	81f8      	strh	r0, [r7, #14]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	b2ca      	uxtb	r2, r1
 8013b50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8adb      	ldrh	r3, [r3, #22]
 8013b56:	0a1b      	lsrs	r3, r3, #8
 8013b58:	b299      	uxth	r1, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	89fb      	ldrh	r3, [r7, #14]
 8013b60:	1c58      	adds	r0, r3, #1
 8013b62:	81f8      	strh	r0, [r7, #14]
 8013b64:	4413      	add	r3, r2
 8013b66:	b2ca      	uxtb	r2, r1
 8013b68:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6999      	ldr	r1, [r3, #24]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	89fb      	ldrh	r3, [r7, #14]
 8013b74:	1c58      	adds	r0, r3, #1
 8013b76:	81f8      	strh	r0, [r7, #14]
 8013b78:	4413      	add	r3, r2
 8013b7a:	b2ca      	uxtb	r2, r1
 8013b7c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	699b      	ldr	r3, [r3, #24]
 8013b82:	0a19      	lsrs	r1, r3, #8
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	89fb      	ldrh	r3, [r7, #14]
 8013b8a:	1c58      	adds	r0, r3, #1
 8013b8c:	81f8      	strh	r0, [r7, #14]
 8013b8e:	4413      	add	r3, r2
 8013b90:	b2ca      	uxtb	r2, r1
 8013b92:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	699b      	ldr	r3, [r3, #24]
 8013b98:	0c19      	lsrs	r1, r3, #16
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	89fb      	ldrh	r3, [r7, #14]
 8013ba0:	1c58      	adds	r0, r3, #1
 8013ba2:	81f8      	strh	r0, [r7, #14]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	b2ca      	uxtb	r2, r1
 8013ba8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	699b      	ldr	r3, [r3, #24]
 8013bae:	0e19      	lsrs	r1, r3, #24
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	89fb      	ldrh	r3, [r7, #14]
 8013bb6:	1c58      	adds	r0, r3, #1
 8013bb8:	81f8      	strh	r0, [r7, #14]
 8013bba:	4413      	add	r3, r2
 8013bbc:	b2ca      	uxtb	r2, r1
 8013bbe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013bc0:	89fb      	ldrh	r3, [r7, #14]
 8013bc2:	b2da      	uxtb	r2, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3710      	adds	r7, #16
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b084      	sub	sp, #16
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d003      	beq.n	8013be8 <LoRaMacSerializerData+0x16>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e0e5      	b.n	8013db8 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013bec:	2300      	movs	r3, #0
 8013bee:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013bf0:	2308      	movs	r3, #8
 8013bf2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	7b1b      	ldrb	r3, [r3, #12]
 8013bf8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	89bb      	ldrh	r3, [r7, #12]
 8013c02:	4413      	add	r3, r2
 8013c04:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d002      	beq.n	8013c16 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013c10:	89bb      	ldrh	r3, [r7, #12]
 8013c12:	3301      	adds	r3, #1
 8013c14:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c1c:	b29a      	uxth	r2, r3
 8013c1e:	89bb      	ldrh	r3, [r7, #12]
 8013c20:	4413      	add	r3, r2
 8013c22:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013c24:	89bb      	ldrh	r3, [r7, #12]
 8013c26:	3304      	adds	r3, #4
 8013c28:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	791b      	ldrb	r3, [r3, #4]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	89ba      	ldrh	r2, [r7, #12]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d901      	bls.n	8013c3a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013c36:	2302      	movs	r3, #2
 8013c38:	e0be      	b.n	8013db8 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	89fb      	ldrh	r3, [r7, #14]
 8013c40:	1c59      	adds	r1, r3, #1
 8013c42:	81f9      	strh	r1, [r7, #14]
 8013c44:	4413      	add	r3, r2
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	7952      	ldrb	r2, [r2, #5]
 8013c4a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6899      	ldr	r1, [r3, #8]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	89fb      	ldrh	r3, [r7, #14]
 8013c56:	1c58      	adds	r0, r3, #1
 8013c58:	81f8      	strh	r0, [r7, #14]
 8013c5a:	4413      	add	r3, r2
 8013c5c:	b2ca      	uxtb	r2, r1
 8013c5e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	0a19      	lsrs	r1, r3, #8
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	89fb      	ldrh	r3, [r7, #14]
 8013c6c:	1c58      	adds	r0, r3, #1
 8013c6e:	81f8      	strh	r0, [r7, #14]
 8013c70:	4413      	add	r3, r2
 8013c72:	b2ca      	uxtb	r2, r1
 8013c74:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	0c19      	lsrs	r1, r3, #16
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	89fb      	ldrh	r3, [r7, #14]
 8013c82:	1c58      	adds	r0, r3, #1
 8013c84:	81f8      	strh	r0, [r7, #14]
 8013c86:	4413      	add	r3, r2
 8013c88:	b2ca      	uxtb	r2, r1
 8013c8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	0e19      	lsrs	r1, r3, #24
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	89fb      	ldrh	r3, [r7, #14]
 8013c98:	1c58      	adds	r0, r3, #1
 8013c9a:	81f8      	strh	r0, [r7, #14]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	b2ca      	uxtb	r2, r1
 8013ca0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	89fb      	ldrh	r3, [r7, #14]
 8013ca8:	1c59      	adds	r1, r3, #1
 8013caa:	81f9      	strh	r1, [r7, #14]
 8013cac:	4413      	add	r3, r2
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	7b12      	ldrb	r2, [r2, #12]
 8013cb2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	89d9      	ldrh	r1, [r3, #14]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	89fb      	ldrh	r3, [r7, #14]
 8013cbe:	1c58      	adds	r0, r3, #1
 8013cc0:	81f8      	strh	r0, [r7, #14]
 8013cc2:	4413      	add	r3, r2
 8013cc4:	b2ca      	uxtb	r2, r1
 8013cc6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	89db      	ldrh	r3, [r3, #14]
 8013ccc:	0a1b      	lsrs	r3, r3, #8
 8013cce:	b299      	uxth	r1, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	89fb      	ldrh	r3, [r7, #14]
 8013cd6:	1c58      	adds	r0, r3, #1
 8013cd8:	81f8      	strh	r0, [r7, #14]
 8013cda:	4413      	add	r3, r2
 8013cdc:	b2ca      	uxtb	r2, r1
 8013cde:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	89fb      	ldrh	r3, [r7, #14]
 8013ce6:	18d0      	adds	r0, r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f103 0110 	add.w	r1, r3, #16
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	7b1b      	ldrb	r3, [r3, #12]
 8013cf2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	f002 fb47 	bl	801638e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	7b1b      	ldrb	r3, [r3, #12]
 8013d04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	b29a      	uxth	r2, r3
 8013d0c:	89fb      	ldrh	r3, [r7, #14]
 8013d0e:	4413      	add	r3, r2
 8013d10:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d009      	beq.n	8013d30 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	89fb      	ldrh	r3, [r7, #14]
 8013d22:	1c59      	adds	r1, r3, #1
 8013d24:	81f9      	strh	r1, [r7, #14]
 8013d26:	4413      	add	r3, r2
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013d2e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	89fb      	ldrh	r3, [r7, #14]
 8013d36:	18d0      	adds	r0, r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	461a      	mov	r2, r3
 8013d46:	f002 fb22 	bl	801638e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d50:	b29a      	uxth	r2, r3
 8013d52:	89fb      	ldrh	r3, [r7, #14]
 8013d54:	4413      	add	r3, r2
 8013d56:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	89fb      	ldrh	r3, [r7, #14]
 8013d62:	1c58      	adds	r0, r3, #1
 8013d64:	81f8      	strh	r0, [r7, #14]
 8013d66:	4413      	add	r3, r2
 8013d68:	b2ca      	uxtb	r2, r1
 8013d6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	0a19      	lsrs	r1, r3, #8
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	89fb      	ldrh	r3, [r7, #14]
 8013d78:	1c58      	adds	r0, r3, #1
 8013d7a:	81f8      	strh	r0, [r7, #14]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	b2ca      	uxtb	r2, r1
 8013d80:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d86:	0c19      	lsrs	r1, r3, #16
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	89fb      	ldrh	r3, [r7, #14]
 8013d8e:	1c58      	adds	r0, r3, #1
 8013d90:	81f8      	strh	r0, [r7, #14]
 8013d92:	4413      	add	r3, r2
 8013d94:	b2ca      	uxtb	r2, r1
 8013d96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9c:	0e19      	lsrs	r1, r3, #24
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	89fb      	ldrh	r3, [r7, #14]
 8013da4:	1c58      	adds	r0, r3, #1
 8013da6:	81f8      	strh	r0, [r7, #14]
 8013da8:	4413      	add	r3, r2
 8013daa:	b2ca      	uxtb	r2, r1
 8013dac:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013dae:	89fb      	ldrh	r3, [r7, #14]
 8013db0:	b2da      	uxtb	r2, r3
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013db6:	2300      	movs	r3, #0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3710      	adds	r7, #16
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	2b05      	cmp	r3, #5
 8013dce:	d101      	bne.n	8013dd4 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	e000      	b.n	8013dd6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013dd4:	2300      	movs	r3, #0
        }
    }
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	370c      	adds	r7, #12
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bc80      	pop	{r7}
 8013dde:	4770      	bx	lr

08013de0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	4603      	mov	r3, r0
 8013de8:	6039      	str	r1, [r7, #0]
 8013dea:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013dec:	2300      	movs	r3, #0
 8013dee:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013df0:	79fb      	ldrb	r3, [r7, #7]
 8013df2:	2b05      	cmp	r3, #5
 8013df4:	d105      	bne.n	8013e02 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013df6:	6838      	ldr	r0, [r7, #0]
 8013df8:	f001 f960 	bl	80150bc <RegionEU868GetPhyParam>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	60fb      	str	r3, [r7, #12]
 8013e00:	e001      	b.n	8013e06 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	4603      	mov	r3, r0
 8013e18:	6039      	str	r1, [r7, #0]
 8013e1a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e1c:	79fb      	ldrb	r3, [r7, #7]
 8013e1e:	2b05      	cmp	r3, #5
 8013e20:	d103      	bne.n	8013e2a <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013e22:	6838      	ldr	r0, [r7, #0]
 8013e24:	f001 fa94 	bl	8015350 <RegionEU868SetBandTxDone>
 8013e28:	e000      	b.n	8013e2c <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013e2a:	bf00      	nop
        }
    }
}
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b082      	sub	sp, #8
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	4603      	mov	r3, r0
 8013e3a:	6039      	str	r1, [r7, #0]
 8013e3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e3e:	79fb      	ldrb	r3, [r7, #7]
 8013e40:	2b05      	cmp	r3, #5
 8013e42:	d103      	bne.n	8013e4c <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013e44:	6838      	ldr	r0, [r7, #0]
 8013e46:	f001 faaf 	bl	80153a8 <RegionEU868InitDefaults>
 8013e4a:	e000      	b.n	8013e4e <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013e4c:	bf00      	nop
        }
    }
}
 8013e4e:	bf00      	nop
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b082      	sub	sp, #8
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	6039      	str	r1, [r7, #0]
 8013e60:	71fb      	strb	r3, [r7, #7]
 8013e62:	4613      	mov	r3, r2
 8013e64:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013e66:	79fb      	ldrb	r3, [r7, #7]
 8013e68:	2b05      	cmp	r3, #5
 8013e6a:	d106      	bne.n	8013e7a <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013e6c:	79bb      	ldrb	r3, [r7, #6]
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6838      	ldr	r0, [r7, #0]
 8013e72:	f001 fb35 	bl	80154e0 <RegionEU868Verify>
 8013e76:	4603      	mov	r3, r0
 8013e78:	e000      	b.n	8013e7c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013e7a:	2300      	movs	r3, #0
        }
    }
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	6039      	str	r1, [r7, #0]
 8013e8e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e90:	79fb      	ldrb	r3, [r7, #7]
 8013e92:	2b05      	cmp	r3, #5
 8013e94:	d103      	bne.n	8013e9e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013e96:	6838      	ldr	r0, [r7, #0]
 8013e98:	f001 fb9e 	bl	80155d8 <RegionEU868ApplyCFList>
 8013e9c:	e000      	b.n	8013ea0 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013e9e:	bf00      	nop
        }
    }
}
 8013ea0:	bf00      	nop
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	4603      	mov	r3, r0
 8013eb0:	6039      	str	r1, [r7, #0]
 8013eb2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013eb4:	79fb      	ldrb	r3, [r7, #7]
 8013eb6:	2b05      	cmp	r3, #5
 8013eb8:	d104      	bne.n	8013ec4 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013eba:	6838      	ldr	r0, [r7, #0]
 8013ebc:	f001 fc00 	bl	80156c0 <RegionEU868ChanMaskSet>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	e000      	b.n	8013ec6 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013ec4:	2300      	movs	r3, #0
        }
    }
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}

08013ece <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013ece:	b580      	push	{r7, lr}
 8013ed0:	b082      	sub	sp, #8
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	603b      	str	r3, [r7, #0]
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	71fb      	strb	r3, [r7, #7]
 8013eda:	460b      	mov	r3, r1
 8013edc:	71bb      	strb	r3, [r7, #6]
 8013ede:	4613      	mov	r3, r2
 8013ee0:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013ee2:	79fb      	ldrb	r3, [r7, #7]
 8013ee4:	2b05      	cmp	r3, #5
 8013ee6:	d107      	bne.n	8013ef8 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013ee8:	7979      	ldrb	r1, [r7, #5]
 8013eea:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	683a      	ldr	r2, [r7, #0]
 8013ef2:	f001 fc0f 	bl	8015714 <RegionEU868ComputeRxWindowParameters>
 8013ef6:	e000      	b.n	8013efa <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013ef8:	bf00      	nop
        }
    }
}
 8013efa:	bf00      	nop
 8013efc:	3708      	adds	r7, #8
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}

08013f02 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013f02:	b580      	push	{r7, lr}
 8013f04:	b084      	sub	sp, #16
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	4603      	mov	r3, r0
 8013f0a:	60b9      	str	r1, [r7, #8]
 8013f0c:	607a      	str	r2, [r7, #4]
 8013f0e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
 8013f12:	2b05      	cmp	r3, #5
 8013f14:	d105      	bne.n	8013f22 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013f16:	6879      	ldr	r1, [r7, #4]
 8013f18:	68b8      	ldr	r0, [r7, #8]
 8013f1a:	f001 fc55 	bl	80157c8 <RegionEU868RxConfig>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	e000      	b.n	8013f24 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013f22:	2300      	movs	r3, #0
        }
    }
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3710      	adds	r7, #16
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60b9      	str	r1, [r7, #8]
 8013f34:	607a      	str	r2, [r7, #4]
 8013f36:	603b      	str	r3, [r7, #0]
 8013f38:	4603      	mov	r3, r0
 8013f3a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f3c:	7bfb      	ldrb	r3, [r7, #15]
 8013f3e:	2b05      	cmp	r3, #5
 8013f40:	d106      	bne.n	8013f50 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013f42:	683a      	ldr	r2, [r7, #0]
 8013f44:	6879      	ldr	r1, [r7, #4]
 8013f46:	68b8      	ldr	r0, [r7, #8]
 8013f48:	f001 fd0e 	bl	8015968 <RegionEU868TxConfig>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	e000      	b.n	8013f52 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013f50:	2300      	movs	r3, #0
        }
    }
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}

08013f5a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013f5a:	b580      	push	{r7, lr}
 8013f5c:	b086      	sub	sp, #24
 8013f5e:	af02      	add	r7, sp, #8
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	607a      	str	r2, [r7, #4]
 8013f64:	603b      	str	r3, [r7, #0]
 8013f66:	4603      	mov	r3, r0
 8013f68:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f6a:	7bfb      	ldrb	r3, [r7, #15]
 8013f6c:	2b05      	cmp	r3, #5
 8013f6e:	d109      	bne.n	8013f84 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	683a      	ldr	r2, [r7, #0]
 8013f78:	6879      	ldr	r1, [r7, #4]
 8013f7a:	68b8      	ldr	r0, [r7, #8]
 8013f7c:	f001 fdc4 	bl	8015b08 <RegionEU868LinkAdrReq>
 8013f80:	4603      	mov	r3, r0
 8013f82:	e000      	b.n	8013f86 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013f84:	2300      	movs	r3, #0
        }
    }
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013f8e:	b580      	push	{r7, lr}
 8013f90:	b082      	sub	sp, #8
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	4603      	mov	r3, r0
 8013f96:	6039      	str	r1, [r7, #0]
 8013f98:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f9a:	79fb      	ldrb	r3, [r7, #7]
 8013f9c:	2b05      	cmp	r3, #5
 8013f9e:	d104      	bne.n	8013faa <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013fa0:	6838      	ldr	r0, [r7, #0]
 8013fa2:	f001 fed3 	bl	8015d4c <RegionEU868RxParamSetupReq>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	e000      	b.n	8013fac <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013faa:	2300      	movs	r3, #0
        }
    }
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	4603      	mov	r3, r0
 8013fbc:	6039      	str	r1, [r7, #0]
 8013fbe:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fc0:	79fb      	ldrb	r3, [r7, #7]
 8013fc2:	2b05      	cmp	r3, #5
 8013fc4:	d104      	bne.n	8013fd0 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013fc6:	6838      	ldr	r0, [r7, #0]
 8013fc8:	f001 fefe 	bl	8015dc8 <RegionEU868NewChannelReq>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	e000      	b.n	8013fd2 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013fd0:	2300      	movs	r3, #0
        }
    }
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3708      	adds	r7, #8
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	6039      	str	r1, [r7, #0]
 8013fe4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fe6:	79fb      	ldrb	r3, [r7, #7]
 8013fe8:	2b05      	cmp	r3, #5
 8013fea:	d104      	bne.n	8013ff6 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013fec:	6838      	ldr	r0, [r7, #0]
 8013fee:	f001 ff49 	bl	8015e84 <RegionEU868TxParamSetupReq>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	e000      	b.n	8013ff8 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013ff6:	2300      	movs	r3, #0
        }
    }
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3708      	adds	r7, #8
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	4603      	mov	r3, r0
 8014008:	6039      	str	r1, [r7, #0]
 801400a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801400c:	79fb      	ldrb	r3, [r7, #7]
 801400e:	2b05      	cmp	r3, #5
 8014010:	d104      	bne.n	801401c <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014012:	6838      	ldr	r0, [r7, #0]
 8014014:	f001 ff42 	bl	8015e9c <RegionEU868DlChannelReq>
 8014018:	4603      	mov	r3, r0
 801401a:	e000      	b.n	801401e <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801401c:	2300      	movs	r3, #0
        }
    }
}
 801401e:	4618      	mov	r0, r3
 8014020:	3708      	adds	r7, #8
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b082      	sub	sp, #8
 801402a:	af00      	add	r7, sp, #0
 801402c:	4603      	mov	r3, r0
 801402e:	71fb      	strb	r3, [r7, #7]
 8014030:	460b      	mov	r3, r1
 8014032:	71bb      	strb	r3, [r7, #6]
 8014034:	4613      	mov	r3, r2
 8014036:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014038:	79fb      	ldrb	r3, [r7, #7]
 801403a:	2b05      	cmp	r3, #5
 801403c:	d108      	bne.n	8014050 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801403e:	797a      	ldrb	r2, [r7, #5]
 8014040:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014044:	4611      	mov	r1, r2
 8014046:	4618      	mov	r0, r3
 8014048:	f001 ff6c 	bl	8015f24 <RegionEU868AlternateDr>
 801404c:	4603      	mov	r3, r0
 801404e:	e000      	b.n	8014052 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014050:	2300      	movs	r3, #0
        }
    }
}
 8014052:	4618      	mov	r0, r3
 8014054:	3708      	adds	r7, #8
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b084      	sub	sp, #16
 801405e:	af00      	add	r7, sp, #0
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	603b      	str	r3, [r7, #0]
 8014066:	4603      	mov	r3, r0
 8014068:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801406a:	7bfb      	ldrb	r3, [r7, #15]
 801406c:	2b05      	cmp	r3, #5
 801406e:	d107      	bne.n	8014080 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	683a      	ldr	r2, [r7, #0]
 8014074:	6879      	ldr	r1, [r7, #4]
 8014076:	68b8      	ldr	r0, [r7, #8]
 8014078:	f001 ff64 	bl	8015f44 <RegionEU868NextChannel>
 801407c:	4603      	mov	r3, r0
 801407e:	e000      	b.n	8014082 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014080:	2309      	movs	r3, #9
        }
    }
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b082      	sub	sp, #8
 801408e:	af00      	add	r7, sp, #0
 8014090:	4603      	mov	r3, r0
 8014092:	6039      	str	r1, [r7, #0]
 8014094:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	2b05      	cmp	r3, #5
 801409a:	d103      	bne.n	80140a4 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801409c:	6838      	ldr	r0, [r7, #0]
 801409e:	f002 f8c7 	bl	8016230 <RegionEU868SetContinuousWave>
 80140a2:	e000      	b.n	80140a6 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80140a4:	bf00      	nop
        }
    }
}
 80140a6:	bf00      	nop
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80140ae:	b590      	push	{r4, r7, lr}
 80140b0:	b083      	sub	sp, #12
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	4604      	mov	r4, r0
 80140b6:	4608      	mov	r0, r1
 80140b8:	4611      	mov	r1, r2
 80140ba:	461a      	mov	r2, r3
 80140bc:	4623      	mov	r3, r4
 80140be:	71fb      	strb	r3, [r7, #7]
 80140c0:	4603      	mov	r3, r0
 80140c2:	71bb      	strb	r3, [r7, #6]
 80140c4:	460b      	mov	r3, r1
 80140c6:	717b      	strb	r3, [r7, #5]
 80140c8:	4613      	mov	r3, r2
 80140ca:	713b      	strb	r3, [r7, #4]
    switch( region )
 80140cc:	79fb      	ldrb	r3, [r7, #7]
 80140ce:	2b05      	cmp	r3, #5
 80140d0:	d109      	bne.n	80140e6 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80140d2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80140d6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80140da:	79bb      	ldrb	r3, [r7, #6]
 80140dc:	4618      	mov	r0, r3
 80140de:	f002 f8f5 	bl	80162cc <RegionEU868ApplyDrOffset>
 80140e2:	4603      	mov	r3, r0
 80140e4:	e000      	b.n	80140e8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80140e6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	370c      	adds	r7, #12
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd90      	pop	{r4, r7, pc}

080140f0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80140f6:	4b04      	ldr	r3, [pc, #16]	; (8014108 <RegionGetVersion+0x18>)
 80140f8:	607b      	str	r3, [r7, #4]

    return version;
 80140fa:	687b      	ldr	r3, [r7, #4]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	370c      	adds	r7, #12
 8014100:	46bd      	mov	sp, r7
 8014102:	bc80      	pop	{r7}
 8014104:	4770      	bx	lr
 8014106:	bf00      	nop
 8014108:	01000300 	.word	0x01000300

0801410c <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801410c:	b480      	push	{r7}
 801410e:	b087      	sub	sp, #28
 8014110:	af00      	add	r7, sp, #0
 8014112:	60f8      	str	r0, [r7, #12]
 8014114:	4608      	mov	r0, r1
 8014116:	4639      	mov	r1, r7
 8014118:	e881 000c 	stmia.w	r1, {r2, r3}
 801411c:	4603      	mov	r3, r0
 801411e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014126:	7afb      	ldrb	r3, [r7, #11]
 8014128:	f083 0301 	eor.w	r3, r3, #1
 801412c:	b2db      	uxtb	r3, r3
 801412e:	2b00      	cmp	r3, #0
 8014130:	d01b      	beq.n	801416a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014132:	f242 7310 	movw	r3, #10000	; 0x2710
 8014136:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801413e:	d202      	bcs.n	8014146 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014140:	2364      	movs	r3, #100	; 0x64
 8014142:	82bb      	strh	r3, [r7, #20]
 8014144:	e00b      	b.n	801415e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801414c:	4293      	cmp	r3, r2
 801414e:	d803      	bhi.n	8014158 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014154:	82bb      	strh	r3, [r7, #20]
 8014156:	e002      	b.n	801415e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014158:	f242 7310 	movw	r3, #10000	; 0x2710
 801415c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801415e:	8aba      	ldrh	r2, [r7, #20]
 8014160:	8afb      	ldrh	r3, [r7, #22]
 8014162:	4293      	cmp	r3, r2
 8014164:	bf38      	it	cc
 8014166:	4613      	movcc	r3, r2
 8014168:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801416a:	8afb      	ldrh	r3, [r7, #22]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d101      	bne.n	8014174 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014170:	2301      	movs	r3, #1
 8014172:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014174:	8afb      	ldrh	r3, [r7, #22]
}
 8014176:	4618      	mov	r0, r3
 8014178:	371c      	adds	r7, #28
 801417a:	46bd      	mov	sp, r7
 801417c:	bc80      	pop	{r7}
 801417e:	4770      	bx	lr

08014180 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08e      	sub	sp, #56	; 0x38
 8014184:	af02      	add	r7, sp, #8
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	4608      	mov	r0, r1
 801418a:	4639      	mov	r1, r7
 801418c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014190:	4603      	mov	r3, r0
 8014192:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801419a:	4b4b      	ldr	r3, [pc, #300]	; (80142c8 <SetMaxTimeCredits+0x148>)
 801419c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801419e:	463b      	mov	r3, r7
 80141a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141a4:	f005 fb0c 	bl	80197c0 <SysTimeToMs>
 80141a8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80141aa:	f107 0314 	add.w	r3, r7, #20
 80141ae:	2200      	movs	r2, #0
 80141b0:	601a      	str	r2, [r3, #0]
 80141b2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80141b4:	7af9      	ldrb	r1, [r7, #11]
 80141b6:	463b      	mov	r3, r7
 80141b8:	cb0c      	ldmia	r3, {r2, r3}
 80141ba:	68f8      	ldr	r0, [r7, #12]
 80141bc:	f7ff ffa6 	bl	801410c <GetDutyCycle>
 80141c0:	4603      	mov	r3, r0
 80141c2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80141c4:	7afb      	ldrb	r3, [r7, #11]
 80141c6:	f083 0301 	eor.w	r3, r3, #1
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d062      	beq.n	8014296 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80141d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141d2:	2b64      	cmp	r3, #100	; 0x64
 80141d4:	d105      	bne.n	80141e2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80141d6:	4b3c      	ldr	r3, [pc, #240]	; (80142c8 <SetMaxTimeCredits+0x148>)
 80141d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141de:	609a      	str	r2, [r3, #8]
 80141e0:	e00b      	b.n	80141fa <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80141e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141e8:	d105      	bne.n	80141f6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80141ea:	4b38      	ldr	r3, [pc, #224]	; (80142cc <SetMaxTimeCredits+0x14c>)
 80141ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141f2:	609a      	str	r2, [r3, #8]
 80141f4:	e001      	b.n	80141fa <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80141f6:	4b36      	ldr	r3, [pc, #216]	; (80142d0 <SetMaxTimeCredits+0x150>)
 80141f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	689a      	ldr	r2, [r3, #8]
 80141fe:	f107 031c 	add.w	r3, r7, #28
 8014202:	4611      	mov	r1, r2
 8014204:	4618      	mov	r0, r3
 8014206:	f005 fb03 	bl	8019810 <SysTimeFromMs>
 801420a:	f107 0014 	add.w	r0, r7, #20
 801420e:	6a3b      	ldr	r3, [r7, #32]
 8014210:	9300      	str	r3, [sp, #0]
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	463a      	mov	r2, r7
 8014216:	ca06      	ldmia	r2, {r1, r2}
 8014218:	f005 fa14 	bl	8019644 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801421c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014220:	f083 0301 	eor.w	r3, r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	d006      	beq.n	8014238 <SetMaxTimeCredits+0xb8>
 801422a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801422e:	f083 0301 	eor.w	r3, r3, #1
 8014232:	b2db      	uxtb	r3, r3
 8014234:	2b00      	cmp	r3, #0
 8014236:	d108      	bne.n	801424a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801423e:	429a      	cmp	r2, r3
 8014240:	d103      	bne.n	801424a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014242:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014244:	4a23      	ldr	r2, [pc, #140]	; (80142d4 <SetMaxTimeCredits+0x154>)
 8014246:	4293      	cmp	r3, r2
 8014248:	d92f      	bls.n	80142aa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801424e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	4a21      	ldr	r2, [pc, #132]	; (80142d8 <SetMaxTimeCredits+0x158>)
 8014254:	4293      	cmp	r3, r2
 8014256:	d928      	bls.n	80142aa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801425e:	3b30      	subs	r3, #48	; 0x30
 8014260:	4a1e      	ldr	r2, [pc, #120]	; (80142dc <SetMaxTimeCredits+0x15c>)
 8014262:	fba2 2303 	umull	r2, r3, r2, r3
 8014266:	0c1b      	lsrs	r3, r3, #16
 8014268:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	4a1c      	ldr	r2, [pc, #112]	; (80142e0 <SetMaxTimeCredits+0x160>)
 801426e:	fb02 f303 	mul.w	r3, r2, r3
 8014272:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801427a:	3330      	adds	r3, #48	; 0x30
 801427c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801427e:	2300      	movs	r3, #0
 8014280:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014282:	f107 0314 	add.w	r3, r7, #20
 8014286:	e893 0003 	ldmia.w	r3, {r0, r1}
 801428a:	f005 fa99 	bl	80197c0 <SysTimeToMs>
 801428e:	4602      	mov	r2, r0
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	609a      	str	r2, [r3, #8]
 8014294:	e009      	b.n	80142aa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014296:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801429a:	f083 0301 	eor.w	r3, r3, #1
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d002      	beq.n	80142aa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142a8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d102      	bne.n	80142b8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142b6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142bc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80142be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3730      	adds	r7, #48	; 0x30
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	001b7740 	.word	0x001b7740
 80142cc:	0112a880 	.word	0x0112a880
 80142d0:	02932e00 	.word	0x02932e00
 80142d4:	0001517f 	.word	0x0001517f
 80142d8:	0001ec2f 	.word	0x0001ec2f
 80142dc:	c22e4507 	.word	0xc22e4507
 80142e0:	00015180 	.word	0x00015180

080142e4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af02      	add	r7, sp, #8
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	4608      	mov	r0, r1
 80142ee:	4611      	mov	r1, r2
 80142f0:	461a      	mov	r2, r3
 80142f2:	4603      	mov	r3, r0
 80142f4:	70fb      	strb	r3, [r7, #3]
 80142f6:	460b      	mov	r3, r1
 80142f8:	70bb      	strb	r3, [r7, #2]
 80142fa:	4613      	mov	r3, r2
 80142fc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80142fe:	78f9      	ldrb	r1, [r7, #3]
 8014300:	787b      	ldrb	r3, [r7, #1]
 8014302:	9301      	str	r3, [sp, #4]
 8014304:	78bb      	ldrb	r3, [r7, #2]
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	f107 0318 	add.w	r3, r7, #24
 801430c:	cb0c      	ldmia	r3, {r2, r3}
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f7ff ff36 	bl	8014180 <SetMaxTimeCredits>
 8014314:	4603      	mov	r3, r0
 8014316:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014318:	78fb      	ldrb	r3, [r7, #3]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00a      	beq.n	8014334 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	685b      	ldr	r3, [r3, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	f005 fd8e 	bl	8019e44 <UTIL_TIMER_GetElapsedTime>
 8014328:	4602      	mov	r2, r0
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	441a      	add	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	68da      	ldr	r2, [r3, #12]
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	691b      	ldr	r3, [r3, #16]
 801433c:	429a      	cmp	r2, r3
 801433e:	d903      	bls.n	8014348 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	691a      	ldr	r2, [r3, #16]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6a3a      	ldr	r2, [r7, #32]
 801434c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801434e:	89fb      	ldrh	r3, [r7, #14]
}
 8014350:	4618      	mov	r0, r3
 8014352:	3710      	adds	r7, #16
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014358:	b480      	push	{r7}
 801435a:	b085      	sub	sp, #20
 801435c:	af00      	add	r7, sp, #0
 801435e:	4603      	mov	r3, r0
 8014360:	460a      	mov	r2, r1
 8014362:	80fb      	strh	r3, [r7, #6]
 8014364:	4613      	mov	r3, r2
 8014366:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014368:	2300      	movs	r3, #0
 801436a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801436c:	2300      	movs	r3, #0
 801436e:	73bb      	strb	r3, [r7, #14]
 8014370:	e011      	b.n	8014396 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014372:	88fa      	ldrh	r2, [r7, #6]
 8014374:	7bbb      	ldrb	r3, [r7, #14]
 8014376:	2101      	movs	r1, #1
 8014378:	fa01 f303 	lsl.w	r3, r1, r3
 801437c:	401a      	ands	r2, r3
 801437e:	7bbb      	ldrb	r3, [r7, #14]
 8014380:	2101      	movs	r1, #1
 8014382:	fa01 f303 	lsl.w	r3, r1, r3
 8014386:	429a      	cmp	r2, r3
 8014388:	d102      	bne.n	8014390 <CountChannels+0x38>
        {
            nbActiveBits++;
 801438a:	7bfb      	ldrb	r3, [r7, #15]
 801438c:	3301      	adds	r3, #1
 801438e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014390:	7bbb      	ldrb	r3, [r7, #14]
 8014392:	3301      	adds	r3, #1
 8014394:	73bb      	strb	r3, [r7, #14]
 8014396:	7bba      	ldrb	r2, [r7, #14]
 8014398:	797b      	ldrb	r3, [r7, #5]
 801439a:	429a      	cmp	r2, r3
 801439c:	d3e9      	bcc.n	8014372 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3714      	adds	r7, #20
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bc80      	pop	{r7}
 80143a8:	4770      	bx	lr

080143aa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80143aa:	b580      	push	{r7, lr}
 80143ac:	b084      	sub	sp, #16
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6039      	str	r1, [r7, #0]
 80143b2:	4611      	mov	r1, r2
 80143b4:	461a      	mov	r2, r3
 80143b6:	4603      	mov	r3, r0
 80143b8:	71fb      	strb	r3, [r7, #7]
 80143ba:	460b      	mov	r3, r1
 80143bc:	71bb      	strb	r3, [r7, #6]
 80143be:	4613      	mov	r3, r2
 80143c0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80143c2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80143c6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f000 f85d 	bl	801448e <RegionCommonValueInRange>
 80143d4:	4603      	mov	r3, r0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d101      	bne.n	80143de <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80143da:	2300      	movs	r3, #0
 80143dc:	e053      	b.n	8014486 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80143de:	2300      	movs	r3, #0
 80143e0:	73fb      	strb	r3, [r7, #15]
 80143e2:	2300      	movs	r3, #0
 80143e4:	73bb      	strb	r3, [r7, #14]
 80143e6:	e049      	b.n	801447c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80143e8:	2300      	movs	r3, #0
 80143ea:	737b      	strb	r3, [r7, #13]
 80143ec:	e03d      	b.n	801446a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80143ee:	7bbb      	ldrb	r3, [r7, #14]
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	683a      	ldr	r2, [r7, #0]
 80143f4:	4413      	add	r3, r2
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	461a      	mov	r2, r3
 80143fa:	7b7b      	ldrb	r3, [r7, #13]
 80143fc:	fa42 f303 	asr.w	r3, r2, r3
 8014400:	f003 0301 	and.w	r3, r3, #1
 8014404:	2b00      	cmp	r3, #0
 8014406:	d02d      	beq.n	8014464 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014408:	7bfa      	ldrb	r2, [r7, #15]
 801440a:	7b7b      	ldrb	r3, [r7, #13]
 801440c:	4413      	add	r3, r2
 801440e:	461a      	mov	r2, r3
 8014410:	4613      	mov	r3, r2
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	461a      	mov	r2, r3
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	4413      	add	r3, r2
 801441e:	7a1b      	ldrb	r3, [r3, #8]
 8014420:	f343 0303 	sbfx	r3, r3, #0, #4
 8014424:	b25b      	sxtb	r3, r3
 8014426:	f003 030f 	and.w	r3, r3, #15
 801442a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801442c:	7bfa      	ldrb	r2, [r7, #15]
 801442e:	7b7b      	ldrb	r3, [r7, #13]
 8014430:	4413      	add	r3, r2
 8014432:	461a      	mov	r2, r3
 8014434:	4613      	mov	r3, r2
 8014436:	005b      	lsls	r3, r3, #1
 8014438:	4413      	add	r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	461a      	mov	r2, r3
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	4413      	add	r3, r2
 8014442:	7a1b      	ldrb	r3, [r3, #8]
 8014444:	f343 1303 	sbfx	r3, r3, #4, #4
 8014448:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801444a:	f003 030f 	and.w	r3, r3, #15
 801444e:	b25a      	sxtb	r2, r3
 8014450:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014454:	4618      	mov	r0, r3
 8014456:	f000 f81a 	bl	801448e <RegionCommonValueInRange>
 801445a:	4603      	mov	r3, r0
 801445c:	2b01      	cmp	r3, #1
 801445e:	d101      	bne.n	8014464 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014460:	2301      	movs	r3, #1
 8014462:	e010      	b.n	8014486 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014464:	7b7b      	ldrb	r3, [r7, #13]
 8014466:	3301      	adds	r3, #1
 8014468:	737b      	strb	r3, [r7, #13]
 801446a:	7b7b      	ldrb	r3, [r7, #13]
 801446c:	2b0f      	cmp	r3, #15
 801446e:	d9be      	bls.n	80143ee <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014470:	7bfb      	ldrb	r3, [r7, #15]
 8014472:	3310      	adds	r3, #16
 8014474:	73fb      	strb	r3, [r7, #15]
 8014476:	7bbb      	ldrb	r3, [r7, #14]
 8014478:	3301      	adds	r3, #1
 801447a:	73bb      	strb	r3, [r7, #14]
 801447c:	7bfa      	ldrb	r2, [r7, #15]
 801447e:	79fb      	ldrb	r3, [r7, #7]
 8014480:	429a      	cmp	r2, r3
 8014482:	d3b1      	bcc.n	80143e8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801448e:	b480      	push	{r7}
 8014490:	b083      	sub	sp, #12
 8014492:	af00      	add	r7, sp, #0
 8014494:	4603      	mov	r3, r0
 8014496:	71fb      	strb	r3, [r7, #7]
 8014498:	460b      	mov	r3, r1
 801449a:	71bb      	strb	r3, [r7, #6]
 801449c:	4613      	mov	r3, r2
 801449e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80144a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	db07      	blt.n	80144bc <RegionCommonValueInRange+0x2e>
 80144ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	dc01      	bgt.n	80144bc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80144b8:	2301      	movs	r3, #1
 80144ba:	e000      	b.n	80144be <RegionCommonValueInRange+0x30>
    }
    return 0;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	370c      	adds	r7, #12
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bc80      	pop	{r7}
 80144c6:	4770      	bx	lr

080144c8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80144c8:	b480      	push	{r7}
 80144ca:	b085      	sub	sp, #20
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	460b      	mov	r3, r1
 80144d2:	70fb      	strb	r3, [r7, #3]
 80144d4:	4613      	mov	r3, r2
 80144d6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80144d8:	78fb      	ldrb	r3, [r7, #3]
 80144da:	091b      	lsrs	r3, r3, #4
 80144dc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80144de:	78bb      	ldrb	r3, [r7, #2]
 80144e0:	091b      	lsrs	r3, r3, #4
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	7bfa      	ldrb	r2, [r7, #15]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d803      	bhi.n	80144f2 <RegionCommonChanDisable+0x2a>
 80144ea:	78fa      	ldrb	r2, [r7, #3]
 80144ec:	78bb      	ldrb	r3, [r7, #2]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d301      	bcc.n	80144f6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80144f2:	2300      	movs	r3, #0
 80144f4:	e017      	b.n	8014526 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80144f6:	7bfb      	ldrb	r3, [r7, #15]
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4413      	add	r3, r2
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	b21a      	sxth	r2, r3
 8014502:	78fb      	ldrb	r3, [r7, #3]
 8014504:	f003 030f 	and.w	r3, r3, #15
 8014508:	2101      	movs	r1, #1
 801450a:	fa01 f303 	lsl.w	r3, r1, r3
 801450e:	b21b      	sxth	r3, r3
 8014510:	43db      	mvns	r3, r3
 8014512:	b21b      	sxth	r3, r3
 8014514:	4013      	ands	r3, r2
 8014516:	b219      	sxth	r1, r3
 8014518:	7bfb      	ldrb	r3, [r7, #15]
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	4413      	add	r3, r2
 8014520:	b28a      	uxth	r2, r1
 8014522:	801a      	strh	r2, [r3, #0]

    return true;
 8014524:	2301      	movs	r3, #1
}
 8014526:	4618      	mov	r0, r3
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	bc80      	pop	{r7}
 801452e:	4770      	bx	lr

08014530 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	460b      	mov	r3, r1
 801453a:	70fb      	strb	r3, [r7, #3]
 801453c:	4613      	mov	r3, r2
 801453e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014540:	2300      	movs	r3, #0
 8014542:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d101      	bne.n	801454e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801454a:	2300      	movs	r3, #0
 801454c:	e018      	b.n	8014580 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801454e:	78fb      	ldrb	r3, [r7, #3]
 8014550:	73bb      	strb	r3, [r7, #14]
 8014552:	e010      	b.n	8014576 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014554:	7bbb      	ldrb	r3, [r7, #14]
 8014556:	005b      	lsls	r3, r3, #1
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	4413      	add	r3, r2
 801455c:	881b      	ldrh	r3, [r3, #0]
 801455e:	2110      	movs	r1, #16
 8014560:	4618      	mov	r0, r3
 8014562:	f7ff fef9 	bl	8014358 <CountChannels>
 8014566:	4603      	mov	r3, r0
 8014568:	461a      	mov	r2, r3
 801456a:	7bfb      	ldrb	r3, [r7, #15]
 801456c:	4413      	add	r3, r2
 801456e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014570:	7bbb      	ldrb	r3, [r7, #14]
 8014572:	3301      	adds	r3, #1
 8014574:	73bb      	strb	r3, [r7, #14]
 8014576:	7bba      	ldrb	r2, [r7, #14]
 8014578:	78bb      	ldrb	r3, [r7, #2]
 801457a:	429a      	cmp	r2, r3
 801457c:	d3ea      	bcc.n	8014554 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014580:	4618      	mov	r0, r3
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014588:	b480      	push	{r7}
 801458a:	b087      	sub	sp, #28
 801458c:	af00      	add	r7, sp, #0
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	60b9      	str	r1, [r7, #8]
 8014592:	4613      	mov	r3, r2
 8014594:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d016      	beq.n	80145ca <RegionCommonChanMaskCopy+0x42>
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d013      	beq.n	80145ca <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80145a2:	2300      	movs	r3, #0
 80145a4:	75fb      	strb	r3, [r7, #23]
 80145a6:	e00c      	b.n	80145c2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	441a      	add	r2, r3
 80145b0:	7dfb      	ldrb	r3, [r7, #23]
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	68f9      	ldr	r1, [r7, #12]
 80145b6:	440b      	add	r3, r1
 80145b8:	8812      	ldrh	r2, [r2, #0]
 80145ba:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80145bc:	7dfb      	ldrb	r3, [r7, #23]
 80145be:	3301      	adds	r3, #1
 80145c0:	75fb      	strb	r3, [r7, #23]
 80145c2:	7dfa      	ldrb	r2, [r7, #23]
 80145c4:	79fb      	ldrb	r3, [r7, #7]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d3ee      	bcc.n	80145a8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80145ca:	bf00      	nop
 80145cc:	371c      	adds	r7, #28
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bc80      	pop	{r7}
 80145d2:	4770      	bx	lr

080145d4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80145d4:	b082      	sub	sp, #8
 80145d6:	b580      	push	{r7, lr}
 80145d8:	b086      	sub	sp, #24
 80145da:	af00      	add	r7, sp, #0
 80145dc:	60f8      	str	r0, [r7, #12]
 80145de:	60b9      	str	r1, [r7, #8]
 80145e0:	627b      	str	r3, [r7, #36]	; 0x24
 80145e2:	4613      	mov	r3, r2
 80145e4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80145e6:	79f9      	ldrb	r1, [r7, #7]
 80145e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145ec:	cb0c      	ldmia	r3, {r2, r3}
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f7ff fd8c 	bl	801410c <GetDutyCycle>
 80145f4:	4603      	mov	r3, r0
 80145f6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	68da      	ldr	r2, [r3, #12]
 80145fc:	8afb      	ldrh	r3, [r7, #22]
 80145fe:	68b9      	ldr	r1, [r7, #8]
 8014600:	fb01 f303 	mul.w	r3, r1, r3
 8014604:	429a      	cmp	r2, r3
 8014606:	d909      	bls.n	801461c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	68da      	ldr	r2, [r3, #12]
 801460c:	8afb      	ldrh	r3, [r7, #22]
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	fb01 f303 	mul.w	r3, r1, r3
 8014614:	1ad2      	subs	r2, r2, r3
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801461a:	e002      	b.n	8014622 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	2200      	movs	r2, #0
 8014620:	60da      	str	r2, [r3, #12]
}
 8014622:	bf00      	nop
 8014624:	3718      	adds	r7, #24
 8014626:	46bd      	mov	sp, r7
 8014628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801462c:	b002      	add	sp, #8
 801462e:	4770      	bx	lr

08014630 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014632:	b08f      	sub	sp, #60	; 0x3c
 8014634:	af04      	add	r7, sp, #16
 8014636:	6039      	str	r1, [r7, #0]
 8014638:	4611      	mov	r1, r2
 801463a:	461a      	mov	r2, r3
 801463c:	4603      	mov	r3, r0
 801463e:	71fb      	strb	r3, [r7, #7]
 8014640:	460b      	mov	r3, r1
 8014642:	71bb      	strb	r3, [r7, #6]
 8014644:	4613      	mov	r3, r2
 8014646:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014648:	f04f 33ff 	mov.w	r3, #4294967295
 801464c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801464e:	f005 fbe7 	bl	8019e20 <UTIL_TIMER_GetCurrentTime>
 8014652:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014654:	2300      	movs	r3, #0
 8014656:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014658:	2301      	movs	r3, #1
 801465a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801465c:	2300      	movs	r3, #0
 801465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014662:	2300      	movs	r3, #0
 8014664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014668:	e0ba      	b.n	80147e0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801466a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801466e:	4613      	mov	r3, r2
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	4413      	add	r3, r2
 8014674:	00db      	lsls	r3, r3, #3
 8014676:	461a      	mov	r2, r3
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	189c      	adds	r4, r3, r2
 801467c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014680:	797a      	ldrb	r2, [r7, #5]
 8014682:	79fd      	ldrb	r5, [r7, #7]
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	9302      	str	r3, [sp, #8]
 8014688:	46ec      	mov	ip, sp
 801468a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801468e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014692:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014696:	4633      	mov	r3, r6
 8014698:	4629      	mov	r1, r5
 801469a:	4620      	mov	r0, r4
 801469c:	f7ff fe22 	bl	80142e4 <UpdateTimeCredits>
 80146a0:	4603      	mov	r3, r0
 80146a2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80146a4:	8afa      	ldrh	r2, [r7, #22]
 80146a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146a8:	fb02 f303 	mul.w	r3, r2, r3
 80146ac:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80146ae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146b2:	4613      	mov	r3, r2
 80146b4:	005b      	lsls	r3, r3, #1
 80146b6:	4413      	add	r3, r2
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	461a      	mov	r2, r3
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	4413      	add	r3, r2
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	69ba      	ldr	r2, [r7, #24]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d308      	bcc.n	80146da <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80146c8:	797b      	ldrb	r3, [r7, #5]
 80146ca:	f083 0301 	eor.w	r3, r3, #1
 80146ce:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d013      	beq.n	80146fc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80146d4:	79fb      	ldrb	r3, [r7, #7]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d010      	beq.n	80146fc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80146da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	461a      	mov	r2, r3
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	4413      	add	r3, r2
 80146ec:	2201      	movs	r2, #1
 80146ee:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80146f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146f4:	3301      	adds	r3, #1
 80146f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146fa:	e06c      	b.n	80147d6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80146fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014700:	4613      	mov	r3, r2
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	4413      	add	r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	461a      	mov	r2, r3
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	4413      	add	r3, r2
 801470e:	2200      	movs	r2, #0
 8014710:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014712:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	461a      	mov	r2, r3
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	4413      	add	r3, r2
 8014724:	691b      	ldr	r3, [r3, #16]
 8014726:	69ba      	ldr	r2, [r7, #24]
 8014728:	429a      	cmp	r2, r3
 801472a:	d215      	bcs.n	8014758 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801472c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014730:	4613      	mov	r3, r2
 8014732:	005b      	lsls	r3, r3, #1
 8014734:	4413      	add	r3, r2
 8014736:	00db      	lsls	r3, r3, #3
 8014738:	461a      	mov	r2, r3
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	4413      	add	r3, r2
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	69ba      	ldr	r2, [r7, #24]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014746:	4293      	cmp	r3, r2
 8014748:	bf28      	it	cs
 801474a:	4613      	movcs	r3, r2
 801474c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801474e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014752:	3301      	adds	r3, #1
 8014754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014758:	79fb      	ldrb	r3, [r7, #7]
 801475a:	f083 0301 	eor.w	r3, r3, #1
 801475e:	b2db      	uxtb	r3, r3
 8014760:	2b00      	cmp	r3, #0
 8014762:	d038      	beq.n	80147d6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014764:	2300      	movs	r3, #0
 8014766:	60fb      	str	r3, [r7, #12]
 8014768:	2300      	movs	r3, #0
 801476a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801476c:	8afb      	ldrh	r3, [r7, #22]
 801476e:	2b64      	cmp	r3, #100	; 0x64
 8014770:	d103      	bne.n	801477a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014772:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014776:	60fb      	str	r3, [r7, #12]
 8014778:	e009      	b.n	801478e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801477a:	8afb      	ldrh	r3, [r7, #22]
 801477c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014780:	d103      	bne.n	801478a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014782:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	e001      	b.n	801478e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801478a:	4b1e      	ldr	r3, [pc, #120]	; (8014804 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801478c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014790:	4a1c      	ldr	r2, [pc, #112]	; (8014804 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014792:	4293      	cmp	r3, r2
 8014794:	d90e      	bls.n	80147b4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014796:	68fa      	ldr	r2, [r7, #12]
 8014798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801479a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801479e:	3b30      	subs	r3, #48	; 0x30
 80147a0:	4919      	ldr	r1, [pc, #100]	; (8014808 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80147a2:	fba1 1303 	umull	r1, r3, r1, r3
 80147a6:	0c1b      	lsrs	r3, r3, #16
 80147a8:	3301      	adds	r3, #1
 80147aa:	4918      	ldr	r1, [pc, #96]	; (801480c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80147ac:	fb01 f303 	mul.w	r3, r1, r3
 80147b0:	4413      	add	r3, r2
 80147b2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80147b4:	f107 000c 	add.w	r0, r7, #12
 80147b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147be:	f107 020c 	add.w	r2, r7, #12
 80147c2:	ca06      	ldmia	r2, {r1, r2}
 80147c4:	f004 ff3e 	bl	8019644 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80147c8:	f107 030c 	add.w	r3, r7, #12
 80147cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80147d0:	f004 fff6 	bl	80197c0 <SysTimeToMs>
 80147d4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80147d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80147da:	3301      	adds	r3, #1
 80147dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80147e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80147e4:	79bb      	ldrb	r3, [r7, #6]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	f4ff af3f 	bcc.w	801466a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 80147ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d102      	bne.n	80147fa <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80147f4:	f04f 33ff 	mov.w	r3, #4294967295
 80147f8:	e000      	b.n	80147fc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	372c      	adds	r7, #44	; 0x2c
 8014800:	46bd      	mov	sp, r7
 8014802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014804:	0001ec30 	.word	0x0001ec30
 8014808:	c22e4507 	.word	0xc22e4507
 801480c:	00015180 	.word	0x00015180

08014810 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014810:	b480      	push	{r7}
 8014812:	b085      	sub	sp, #20
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801481a:	2300      	movs	r3, #0
 801481c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	2b03      	cmp	r3, #3
 8014824:	d13f      	bne.n	80148a6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	3301      	adds	r3, #1
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	b25a      	sxtb	r2, r3
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014838:	f003 030f 	and.w	r3, r3, #15
 801483c:	b25a      	sxtb	r2, r3
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014848:	b2db      	uxtb	r3, r3
 801484a:	091b      	lsrs	r3, r3, #4
 801484c:	b2db      	uxtb	r3, r3
 801484e:	b25a      	sxtb	r2, r3
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	3302      	adds	r3, #2
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	b29a      	uxth	r2, r3
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	889b      	ldrh	r3, [r3, #4]
 8014864:	b21a      	sxth	r2, r3
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	3303      	adds	r3, #3
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	021b      	lsls	r3, r3, #8
 801486e:	b21b      	sxth	r3, r3
 8014870:	4313      	orrs	r3, r2
 8014872:	b21b      	sxth	r3, r3
 8014874:	b29a      	uxth	r2, r3
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	791a      	ldrb	r2, [r3, #4]
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	091b      	lsrs	r3, r3, #4
 8014888:	b2db      	uxtb	r3, r3
 801488a:	f003 0307 	and.w	r3, r3, #7
 801488e:	b2da      	uxtb	r2, r3
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	f003 030f 	and.w	r3, r3, #15
 801489c:	b2da      	uxtb	r2, r3
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80148a2:	2305      	movs	r3, #5
 80148a4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80148a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3714      	adds	r7, #20
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bc80      	pop	{r7}
 80148b0:	4770      	bx	lr

080148b2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80148b2:	b5b0      	push	{r4, r5, r7, lr}
 80148b4:	b088      	sub	sp, #32
 80148b6:	af02      	add	r7, sp, #8
 80148b8:	60f8      	str	r0, [r7, #12]
 80148ba:	60b9      	str	r1, [r7, #8]
 80148bc:	607a      	str	r2, [r7, #4]
 80148be:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	791b      	ldrb	r3, [r3, #4]
 80148c4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	799b      	ldrb	r3, [r3, #6]
 80148ca:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	79db      	ldrb	r3, [r3, #7]
 80148d0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	7a1b      	ldrb	r3, [r3, #8]
 80148d6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	795b      	ldrb	r3, [r3, #5]
 80148dc:	f083 0301 	eor.w	r3, r3, #1
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d008      	beq.n	80148f8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	7adb      	ldrb	r3, [r3, #11]
 80148ea:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	7a5b      	ldrb	r3, [r3, #9]
 80148f0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	7a9b      	ldrb	r3, [r3, #10]
 80148f6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80148f8:	7dfb      	ldrb	r3, [r7, #23]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d03a      	beq.n	8014974 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	7b18      	ldrb	r0, [r3, #12]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	6919      	ldr	r1, [r3, #16]
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014912:	68fa      	ldr	r2, [r7, #12]
 8014914:	6992      	ldr	r2, [r2, #24]
 8014916:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801491a:	9201      	str	r2, [sp, #4]
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	462b      	mov	r3, r5
 8014920:	4622      	mov	r2, r4
 8014922:	f7ff fd42 	bl	80143aa <RegionCommonChanVerifyDr>
 8014926:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014928:	f083 0301 	eor.w	r3, r3, #1
 801492c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801492e:	2b00      	cmp	r3, #0
 8014930:	d003      	beq.n	801493a <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014932:	7dfb      	ldrb	r3, [r7, #23]
 8014934:	f023 0302 	bic.w	r3, r3, #2
 8014938:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014946:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801494a:	4618      	mov	r0, r3
 801494c:	f7ff fd9f 	bl	801448e <RegionCommonValueInRange>
 8014950:	4603      	mov	r3, r0
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10e      	bne.n	8014974 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801495c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014960:	429a      	cmp	r2, r3
 8014962:	da03      	bge.n	801496c <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	7f5b      	ldrb	r3, [r3, #29]
 8014968:	757b      	strb	r3, [r7, #21]
 801496a:	e003      	b.n	8014974 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801496c:	7dfb      	ldrb	r3, [r7, #23]
 801496e:	f023 0304 	bic.w	r3, r3, #4
 8014972:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014974:	7dfb      	ldrb	r3, [r7, #23]
 8014976:	2b07      	cmp	r3, #7
 8014978:	d105      	bne.n	8014986 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 801497a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d101      	bne.n	8014986 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014982:	2301      	movs	r3, #1
 8014984:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	7dba      	ldrb	r2, [r7, #22]
 801498a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	7d7a      	ldrb	r2, [r7, #21]
 8014990:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014992:	7d3a      	ldrb	r2, [r7, #20]
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	701a      	strb	r2, [r3, #0]

    return status;
 8014998:	7dfb      	ldrb	r3, [r7, #23]
}
 801499a:	4618      	mov	r0, r3
 801499c:	3718      	adds	r7, #24
 801499e:	46bd      	mov	sp, r7
 80149a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080149a4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	4603      	mov	r3, r0
 80149ac:	6039      	str	r1, [r7, #0]
 80149ae:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80149b0:	79fb      	ldrb	r3, [r7, #7]
 80149b2:	4a06      	ldr	r2, [pc, #24]	; (80149cc <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80149b4:	fa02 f303 	lsl.w	r3, r2, r3
 80149b8:	461a      	mov	r2, r3
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bc80      	pop	{r7}
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	000f4240 	.word	0x000f4240

080149d0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	4603      	mov	r3, r0
 80149d8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80149da:	79fb      	ldrb	r3, [r7, #7]
 80149dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80149e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	370c      	adds	r7, #12
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bc80      	pop	{r7}
 80149ec:	4770      	bx	lr
	...

080149f0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	607a      	str	r2, [r7, #4]
 80149fa:	603b      	str	r3, [r7, #0]
 80149fc:	460b      	mov	r3, r1
 80149fe:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014a00:	7afa      	ldrb	r2, [r7, #11]
 8014a02:	7afb      	ldrb	r3, [r7, #11]
 8014a04:	3b04      	subs	r3, #4
 8014a06:	4619      	mov	r1, r3
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	fb03 f101 	mul.w	r1, r3, r1
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a14:	fb00 f303 	mul.w	r3, r0, r3
 8014a18:	440b      	add	r3, r1
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d013      	beq.n	8014a48 <RegionCommonComputeRxWindowParameters+0x58>
 8014a20:	7afb      	ldrb	r3, [r7, #11]
 8014a22:	3b04      	subs	r3, #4
 8014a24:	4619      	mov	r1, r3
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	fb03 f101 	mul.w	r1, r3, r1
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a32:	fb00 f303 	mul.w	r3, r0, r3
 8014a36:	440b      	add	r3, r1
 8014a38:	0059      	lsls	r1, r3, #1
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	440b      	add	r3, r1
 8014a3e:	1e59      	subs	r1, r3, #1
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a46:	e00f      	b.n	8014a68 <RegionCommonComputeRxWindowParameters+0x78>
 8014a48:	7afb      	ldrb	r3, [r7, #11]
 8014a4a:	3b04      	subs	r3, #4
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	fb03 f101 	mul.w	r1, r3, r1
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a5a:	fb00 f303 	mul.w	r3, r0, r3
 8014a5e:	440b      	add	r3, r1
 8014a60:	0059      	lsls	r1, r3, #1
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	bf38      	it	cc
 8014a6c:	461a      	movcc	r2, r3
 8014a6e:	69bb      	ldr	r3, [r7, #24]
 8014a70:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	4619      	mov	r1, r3
 8014a78:	69bb      	ldr	r3, [r7, #24]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	68fa      	ldr	r2, [r7, #12]
 8014a7e:	fb02 f303 	mul.w	r3, r2, r3
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d007      	beq.n	8014a96 <RegionCommonComputeRxWindowParameters+0xa6>
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	68fa      	ldr	r2, [r7, #12]
 8014a8c:	fb02 f303 	mul.w	r3, r2, r3
 8014a90:	3301      	adds	r3, #1
 8014a92:	085b      	lsrs	r3, r3, #1
 8014a94:	e005      	b.n	8014aa2 <RegionCommonComputeRxWindowParameters+0xb2>
 8014a96:	69bb      	ldr	r3, [r7, #24]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	fb02 f303 	mul.w	r3, r2, r3
 8014aa0:	085b      	lsrs	r3, r3, #1
 8014aa2:	1acb      	subs	r3, r1, r3
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014aaa:	fb01 f202 	mul.w	r2, r1, r2
 8014aae:	1a9b      	subs	r3, r3, r2
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	dd27      	ble.n	8014b04 <RegionCommonComputeRxWindowParameters+0x114>
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4619      	mov	r1, r3
 8014aba:	69bb      	ldr	r3, [r7, #24]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	68fa      	ldr	r2, [r7, #12]
 8014ac0:	fb02 f303 	mul.w	r3, r2, r3
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d007      	beq.n	8014ad8 <RegionCommonComputeRxWindowParameters+0xe8>
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	fb02 f303 	mul.w	r3, r2, r3
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	085b      	lsrs	r3, r3, #1
 8014ad6:	e005      	b.n	8014ae4 <RegionCommonComputeRxWindowParameters+0xf4>
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	fb02 f303 	mul.w	r3, r2, r3
 8014ae2:	085b      	lsrs	r3, r3, #1
 8014ae4:	1acb      	subs	r3, r1, r3
 8014ae6:	683a      	ldr	r2, [r7, #0]
 8014ae8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014aec:	fb01 f202 	mul.w	r2, r1, r2
 8014af0:	1a9b      	subs	r3, r3, r2
 8014af2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014af6:	4a19      	ldr	r2, [pc, #100]	; (8014b5c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014af8:	fb82 1203 	smull	r1, r2, r2, r3
 8014afc:	1192      	asrs	r2, r2, #6
 8014afe:	17db      	asrs	r3, r3, #31
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	e024      	b.n	8014b4e <RegionCommonComputeRxWindowParameters+0x15e>
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4619      	mov	r1, r3
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	fb02 f303 	mul.w	r3, r2, r3
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d007      	beq.n	8014b28 <RegionCommonComputeRxWindowParameters+0x138>
 8014b18:	69bb      	ldr	r3, [r7, #24]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	fb02 f303 	mul.w	r3, r2, r3
 8014b22:	3301      	adds	r3, #1
 8014b24:	085b      	lsrs	r3, r3, #1
 8014b26:	e005      	b.n	8014b34 <RegionCommonComputeRxWindowParameters+0x144>
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	68fa      	ldr	r2, [r7, #12]
 8014b2e:	fb02 f303 	mul.w	r3, r2, r3
 8014b32:	085b      	lsrs	r3, r3, #1
 8014b34:	1acb      	subs	r3, r1, r3
 8014b36:	683a      	ldr	r2, [r7, #0]
 8014b38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b3c:	fb01 f202 	mul.w	r2, r1, r2
 8014b40:	1a9b      	subs	r3, r3, r2
 8014b42:	4a06      	ldr	r2, [pc, #24]	; (8014b5c <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b44:	fb82 1203 	smull	r1, r2, r2, r3
 8014b48:	1192      	asrs	r2, r2, #6
 8014b4a:	17db      	asrs	r3, r3, #31
 8014b4c:	1ad3      	subs	r3, r2, r3
 8014b4e:	69fa      	ldr	r2, [r7, #28]
 8014b50:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014b52:	bf00      	nop
 8014b54:	3714      	adds	r7, #20
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bc80      	pop	{r7}
 8014b5a:	4770      	bx	lr
 8014b5c:	10624dd3 	.word	0x10624dd3

08014b60 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b086      	sub	sp, #24
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	4603      	mov	r3, r0
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
 8014b6c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7ec f8a3 	bl	8000cc4 <__aeabi_ui2f>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	4619      	mov	r1, r3
 8014b82:	68b8      	ldr	r0, [r7, #8]
 8014b84:	f7eb ffec 	bl	8000b60 <__aeabi_fsub>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	6879      	ldr	r1, [r7, #4]
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7eb ffe7 	bl	8000b60 <__aeabi_fsub>
 8014b92:	4603      	mov	r3, r0
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7eb fcaf 	bl	80004f8 <__aeabi_f2d>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	4610      	mov	r0, r2
 8014ba0:	4619      	mov	r1, r3
 8014ba2:	f00b f9b9 	bl	801ff18 <floor>
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	460b      	mov	r3, r1
 8014baa:	4610      	mov	r0, r2
 8014bac:	4619      	mov	r1, r3
 8014bae:	f7eb ffab 	bl	8000b08 <__aeabi_d2iz>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bba:	4618      	mov	r0, r3
 8014bbc:	3718      	adds	r7, #24
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014bc2:	b590      	push	{r4, r7, lr}
 8014bc4:	b087      	sub	sp, #28
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	60f8      	str	r0, [r7, #12]
 8014bca:	60b9      	str	r1, [r7, #8]
 8014bcc:	607a      	str	r2, [r7, #4]
 8014bce:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014bd8:	2300      	movs	r3, #0
 8014bda:	757b      	strb	r3, [r7, #21]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	753b      	strb	r3, [r7, #20]
 8014be0:	e09c      	b.n	8014d1c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014be2:	2300      	movs	r3, #0
 8014be4:	74fb      	strb	r3, [r7, #19]
 8014be6:	e08f      	b.n	8014d08 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	685a      	ldr	r2, [r3, #4]
 8014bec:	7d3b      	ldrb	r3, [r7, #20]
 8014bee:	005b      	lsls	r3, r3, #1
 8014bf0:	4413      	add	r3, r2
 8014bf2:	881b      	ldrh	r3, [r3, #0]
 8014bf4:	461a      	mov	r2, r3
 8014bf6:	7cfb      	ldrb	r3, [r7, #19]
 8014bf8:	fa42 f303 	asr.w	r3, r2, r3
 8014bfc:	f003 0301 	and.w	r3, r3, #1
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d07e      	beq.n	8014d02 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	689a      	ldr	r2, [r3, #8]
 8014c08:	7d79      	ldrb	r1, [r7, #21]
 8014c0a:	7cfb      	ldrb	r3, [r7, #19]
 8014c0c:	440b      	add	r3, r1
 8014c0e:	4619      	mov	r1, r3
 8014c10:	460b      	mov	r3, r1
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	440b      	add	r3, r1
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d06b      	beq.n	8014cf8 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	f083 0301 	eor.w	r3, r3, #1
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d011      	beq.n	8014c52 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00d      	beq.n	8014c52 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	695a      	ldr	r2, [r3, #20]
 8014c3a:	7d3b      	ldrb	r3, [r7, #20]
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	4413      	add	r3, r2
 8014c40:	881b      	ldrh	r3, [r3, #0]
 8014c42:	461a      	mov	r2, r3
 8014c44:	7cfb      	ldrb	r3, [r7, #19]
 8014c46:	fa42 f303 	asr.w	r3, r2, r3
 8014c4a:	f003 0301 	and.w	r3, r3, #1
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d054      	beq.n	8014cfc <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	785b      	ldrb	r3, [r3, #1]
 8014c56:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	689a      	ldr	r2, [r3, #8]
 8014c5c:	7d79      	ldrb	r1, [r7, #21]
 8014c5e:	7cfb      	ldrb	r3, [r7, #19]
 8014c60:	440b      	add	r3, r1
 8014c62:	4619      	mov	r1, r3
 8014c64:	460b      	mov	r3, r1
 8014c66:	005b      	lsls	r3, r3, #1
 8014c68:	440b      	add	r3, r1
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	4413      	add	r3, r2
 8014c6e:	7a1b      	ldrb	r3, [r3, #8]
 8014c70:	f343 0303 	sbfx	r3, r3, #0, #4
 8014c74:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c76:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	689a      	ldr	r2, [r3, #8]
 8014c7c:	7d79      	ldrb	r1, [r7, #21]
 8014c7e:	7cfb      	ldrb	r3, [r7, #19]
 8014c80:	440b      	add	r3, r1
 8014c82:	4619      	mov	r1, r3
 8014c84:	460b      	mov	r3, r1
 8014c86:	005b      	lsls	r3, r3, #1
 8014c88:	440b      	add	r3, r1
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	7a1b      	ldrb	r3, [r3, #8]
 8014c90:	f343 1303 	sbfx	r3, r3, #4, #4
 8014c94:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c96:	461a      	mov	r2, r3
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f7ff fbf8 	bl	801448e <RegionCommonValueInRange>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d02d      	beq.n	8014d00 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	68da      	ldr	r2, [r3, #12]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	6899      	ldr	r1, [r3, #8]
 8014cac:	7d78      	ldrb	r0, [r7, #21]
 8014cae:	7cfb      	ldrb	r3, [r7, #19]
 8014cb0:	4403      	add	r3, r0
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	005b      	lsls	r3, r3, #1
 8014cb8:	4403      	add	r3, r0
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	440b      	add	r3, r1
 8014cbe:	7a5b      	ldrb	r3, [r3, #9]
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	440b      	add	r3, r1
 8014cc8:	00db      	lsls	r3, r3, #3
 8014cca:	4413      	add	r3, r2
 8014ccc:	7d1b      	ldrb	r3, [r3, #20]
 8014cce:	f083 0301 	eor.w	r3, r3, #1
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d003      	beq.n	8014ce0 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014cd8:	7dbb      	ldrb	r3, [r7, #22]
 8014cda:	3301      	adds	r3, #1
 8014cdc:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014cde:	e010      	b.n	8014d02 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014ce0:	7dfb      	ldrb	r3, [r7, #23]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	75fa      	strb	r2, [r7, #23]
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	4413      	add	r3, r2
 8014cec:	7d79      	ldrb	r1, [r7, #21]
 8014cee:	7cfa      	ldrb	r2, [r7, #19]
 8014cf0:	440a      	add	r2, r1
 8014cf2:	b2d2      	uxtb	r2, r2
 8014cf4:	701a      	strb	r2, [r3, #0]
 8014cf6:	e004      	b.n	8014d02 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014cf8:	bf00      	nop
 8014cfa:	e002      	b.n	8014d02 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014cfc:	bf00      	nop
 8014cfe:	e000      	b.n	8014d02 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d00:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014d02:	7cfb      	ldrb	r3, [r7, #19]
 8014d04:	3301      	adds	r3, #1
 8014d06:	74fb      	strb	r3, [r7, #19]
 8014d08:	7cfb      	ldrb	r3, [r7, #19]
 8014d0a:	2b0f      	cmp	r3, #15
 8014d0c:	f67f af6c 	bls.w	8014be8 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014d10:	7d7b      	ldrb	r3, [r7, #21]
 8014d12:	3310      	adds	r3, #16
 8014d14:	757b      	strb	r3, [r7, #21]
 8014d16:	7d3b      	ldrb	r3, [r7, #20]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	753b      	strb	r3, [r7, #20]
 8014d1c:	7d7b      	ldrb	r3, [r7, #21]
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	8a1b      	ldrh	r3, [r3, #16]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	f4ff af5c 	bcc.w	8014be2 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	7dfa      	ldrb	r2, [r7, #23]
 8014d2e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	7dba      	ldrb	r2, [r7, #22]
 8014d34:	701a      	strb	r2, [r3, #0]
}
 8014d36:	bf00      	nop
 8014d38:	371c      	adds	r7, #28
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd90      	pop	{r4, r7, pc}

08014d3e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d40:	b08b      	sub	sp, #44	; 0x2c
 8014d42:	af04      	add	r7, sp, #16
 8014d44:	60f8      	str	r0, [r7, #12]
 8014d46:	60b9      	str	r1, [r7, #8]
 8014d48:	607a      	str	r2, [r7, #4]
 8014d4a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f005 f877 	bl	8019e44 <UTIL_TIMER_GetElapsedTime>
 8014d56:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	1ad2      	subs	r2, r2, r3
 8014d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d62:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d66:	2201      	movs	r2, #1
 8014d68:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d004      	beq.n	8014d82 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d7c:	697a      	ldr	r2, [r7, #20]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d32b      	bcc.n	8014dda <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2200      	movs	r2, #0
 8014d86:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	69db      	ldr	r3, [r3, #28]
 8014d8c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d92:	68dd      	ldr	r5, [r3, #12]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	7a5e      	ldrb	r6, [r3, #9]
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	7d1b      	ldrb	r3, [r3, #20]
 8014da2:	68fa      	ldr	r2, [r7, #12]
 8014da4:	6992      	ldr	r2, [r2, #24]
 8014da6:	9203      	str	r2, [sp, #12]
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	f10d 0e04 	add.w	lr, sp, #4
 8014dae:	320c      	adds	r2, #12
 8014db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014db4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	4663      	mov	r3, ip
 8014dbc:	4632      	mov	r2, r6
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f7ff fc35 	bl	8014630 <RegionCommonUpdateBandTimeOff>
 8014dc6:	4602      	mov	r2, r0
 8014dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dca:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	69d8      	ldr	r0, [r3, #28]
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd2:	683a      	ldr	r2, [r7, #0]
 8014dd4:	6879      	ldr	r1, [r7, #4]
 8014dd6:	f7ff fef4 	bl	8014bc2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d004      	beq.n	8014dec <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de4:	2200      	movs	r2, #0
 8014de6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014de8:	2300      	movs	r3, #0
 8014dea:	e006      	b.n	8014dfa <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d001      	beq.n	8014df8 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014df4:	230b      	movs	r3, #11
 8014df6:	e000      	b.n	8014dfa <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014df8:	230c      	movs	r3, #12
    }
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	371c      	adds	r7, #28
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e02 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014e02:	b5b0      	push	{r4, r5, r7, lr}
 8014e04:	b086      	sub	sp, #24
 8014e06:	af02      	add	r7, sp, #8
 8014e08:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f993 2000 	ldrsb.w	r2, [r3]
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d103      	bne.n	8014e28 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e26:	e026      	b.n	8014e76 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014e28:	7bfb      	ldrb	r3, [r7, #15]
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014e36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d019      	beq.n	8014e72 <RegionCommonGetNextLowerTxDr+0x70>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	78d8      	ldrb	r0, [r3, #3]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6859      	ldr	r1, [r3, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	6892      	ldr	r2, [r2, #8]
 8014e56:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014e5a:	9201      	str	r2, [sp, #4]
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	462b      	mov	r3, r5
 8014e60:	4622      	mov	r2, r4
 8014e62:	f7ff faa2 	bl	80143aa <RegionCommonChanVerifyDr>
 8014e66:	4603      	mov	r3, r0
 8014e68:	f083 0301 	eor.w	r3, r3, #1
 8014e6c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d1da      	bne.n	8014e28 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bdb0      	pop	{r4, r5, r7, pc}

08014e7e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014e7e:	b480      	push	{r7}
 8014e80:	b083      	sub	sp, #12
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	4603      	mov	r3, r0
 8014e86:	460a      	mov	r2, r1
 8014e88:	71fb      	strb	r3, [r7, #7]
 8014e8a:	4613      	mov	r3, r2
 8014e8c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014e8e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e96:	4293      	cmp	r3, r2
 8014e98:	bfb8      	it	lt
 8014e9a:	4613      	movlt	r3, r2
 8014e9c:	b25b      	sxtb	r3, r3
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	370c      	adds	r7, #12
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bc80      	pop	{r7}
 8014ea6:	4770      	bx	lr

08014ea8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b083      	sub	sp, #12
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	009b      	lsls	r3, r3, #2
 8014eb6:	683a      	ldr	r2, [r7, #0]
 8014eb8:	4413      	add	r3, r2
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	4a07      	ldr	r2, [pc, #28]	; (8014edc <RegionCommonGetBandwidth+0x34>)
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d004      	beq.n	8014ecc <RegionCommonGetBandwidth+0x24>
 8014ec2:	4a07      	ldr	r2, [pc, #28]	; (8014ee0 <RegionCommonGetBandwidth+0x38>)
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d003      	beq.n	8014ed0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	e002      	b.n	8014ed2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e000      	b.n	8014ed2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014ed0:	2302      	movs	r3, #2
    }
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	370c      	adds	r7, #12
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bc80      	pop	{r7}
 8014eda:	4770      	bx	lr
 8014edc:	0003d090 	.word	0x0003d090
 8014ee0:	0007a120 	.word	0x0007a120

08014ee4 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014ee4:	b4b0      	push	{r4, r5, r7}
 8014ee6:	b089      	sub	sp, #36	; 0x24
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	4603      	mov	r3, r0
 8014eec:	6039      	str	r1, [r7, #0]
 8014eee:	71fb      	strb	r3, [r7, #7]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014ef4:	4b07      	ldr	r3, [pc, #28]	; (8014f14 <RegionCommonRxConfigPrint+0x30>)
 8014ef6:	f107 0408 	add.w	r4, r7, #8
 8014efa:	461d      	mov	r5, r3
 8014efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f04:	e884 0003 	stmia.w	r4, {r0, r1}
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014f08:	bf00      	nop
 8014f0a:	3724      	adds	r7, #36	; 0x24
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bcb0      	pop	{r4, r5, r7}
 8014f10:	4770      	bx	lr
 8014f12:	bf00      	nop
 8014f14:	080202dc 	.word	0x080202dc

08014f18 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	460b      	mov	r3, r1
 8014f22:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 8014f24:	bf00      	nop
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bc80      	pop	{r7}
 8014f2c:	4770      	bx	lr
	...

08014f30 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014f3a:	4b2d      	ldr	r3, [pc, #180]	; (8014ff0 <VerifyRfFreq+0xc0>)
 8014f3c:	6a1b      	ldr	r3, [r3, #32]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	4798      	blx	r3
 8014f42:	4603      	mov	r3, r0
 8014f44:	f083 0301 	eor.w	r3, r3, #1
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d001      	beq.n	8014f52 <VerifyRfFreq+0x22>
    {
        return false;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	e04a      	b.n	8014fe8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	4a27      	ldr	r2, [pc, #156]	; (8014ff4 <VerifyRfFreq+0xc4>)
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d307      	bcc.n	8014f6a <VerifyRfFreq+0x3a>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4a26      	ldr	r2, [pc, #152]	; (8014ff8 <VerifyRfFreq+0xc8>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d803      	bhi.n	8014f6a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	2202      	movs	r2, #2
 8014f66:	701a      	strb	r2, [r3, #0]
 8014f68:	e03d      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	4a22      	ldr	r2, [pc, #136]	; (8014ff8 <VerifyRfFreq+0xc8>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d907      	bls.n	8014f82 <VerifyRfFreq+0x52>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4a21      	ldr	r2, [pc, #132]	; (8014ffc <VerifyRfFreq+0xcc>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d803      	bhi.n	8014f82 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	701a      	strb	r2, [r3, #0]
 8014f80:	e031      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	4a1d      	ldr	r2, [pc, #116]	; (8014ffc <VerifyRfFreq+0xcc>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d907      	bls.n	8014f9a <VerifyRfFreq+0x6a>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4a1c      	ldr	r2, [pc, #112]	; (8015000 <VerifyRfFreq+0xd0>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d803      	bhi.n	8014f9a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	2201      	movs	r2, #1
 8014f96:	701a      	strb	r2, [r3, #0]
 8014f98:	e025      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4a19      	ldr	r2, [pc, #100]	; (8015004 <VerifyRfFreq+0xd4>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d907      	bls.n	8014fb2 <VerifyRfFreq+0x82>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	4a18      	ldr	r2, [pc, #96]	; (8015008 <VerifyRfFreq+0xd8>)
 8014fa6:	4293      	cmp	r3, r2
 8014fa8:	d803      	bhi.n	8014fb2 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	2205      	movs	r2, #5
 8014fae:	701a      	strb	r2, [r3, #0]
 8014fb0:	e019      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4a15      	ldr	r2, [pc, #84]	; (801500c <VerifyRfFreq+0xdc>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d907      	bls.n	8014fca <VerifyRfFreq+0x9a>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	4a14      	ldr	r2, [pc, #80]	; (8015010 <VerifyRfFreq+0xe0>)
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d803      	bhi.n	8014fca <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	2203      	movs	r2, #3
 8014fc6:	701a      	strb	r2, [r3, #0]
 8014fc8:	e00d      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a11      	ldr	r2, [pc, #68]	; (8015014 <VerifyRfFreq+0xe4>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d307      	bcc.n	8014fe2 <VerifyRfFreq+0xb2>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	4a10      	ldr	r2, [pc, #64]	; (8015018 <VerifyRfFreq+0xe8>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d803      	bhi.n	8014fe2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	2204      	movs	r2, #4
 8014fde:	701a      	strb	r2, [r3, #0]
 8014fe0:	e001      	b.n	8014fe6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	e000      	b.n	8014fe8 <VerifyRfFreq+0xb8>
    }
    return true;
 8014fe6:	2301      	movs	r3, #1
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	0802078c 	.word	0x0802078c
 8014ff4:	337055c0 	.word	0x337055c0
 8014ff8:	338eda3f 	.word	0x338eda3f
 8014ffc:	33bca100 	.word	0x33bca100
 8015000:	33c5c8c0 	.word	0x33c5c8c0
 8015004:	33c74f5f 	.word	0x33c74f5f
 8015008:	33cef080 	.word	0x33cef080
 801500c:	33d1fdbf 	.word	0x33d1fdbf
 8015010:	33d5ce50 	.word	0x33d5ce50
 8015014:	33d691a0 	.word	0x33d691a0
 8015018:	33db2580 	.word	0x33db2580

0801501c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801501c:	b590      	push	{r4, r7, lr}
 801501e:	b08b      	sub	sp, #44	; 0x2c
 8015020:	af04      	add	r7, sp, #16
 8015022:	4603      	mov	r3, r0
 8015024:	460a      	mov	r2, r1
 8015026:	71fb      	strb	r3, [r7, #7]
 8015028:	4613      	mov	r3, r2
 801502a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 801502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015030:	4a1f      	ldr	r2, [pc, #124]	; (80150b0 <GetTimeOnAir+0x94>)
 8015032:	5cd3      	ldrb	r3, [r2, r3]
 8015034:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801503a:	491e      	ldr	r1, [pc, #120]	; (80150b4 <GetTimeOnAir+0x98>)
 801503c:	4618      	mov	r0, r3
 801503e:	f7ff ff33 	bl	8014ea8 <RegionCommonGetBandwidth>
 8015042:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015044:	2300      	movs	r3, #0
 8015046:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801504c:	2b07      	cmp	r3, #7
 801504e:	d118      	bne.n	8015082 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015050:	4b19      	ldr	r3, [pc, #100]	; (80150b8 <GetTimeOnAir+0x9c>)
 8015052:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015054:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801505c:	fb02 f303 	mul.w	r3, r2, r3
 8015060:	4619      	mov	r1, r3
 8015062:	88bb      	ldrh	r3, [r7, #4]
 8015064:	b2db      	uxtb	r3, r3
 8015066:	2201      	movs	r2, #1
 8015068:	9203      	str	r2, [sp, #12]
 801506a:	9302      	str	r3, [sp, #8]
 801506c:	2300      	movs	r3, #0
 801506e:	9301      	str	r3, [sp, #4]
 8015070:	2305      	movs	r3, #5
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	2300      	movs	r3, #0
 8015076:	460a      	mov	r2, r1
 8015078:	68f9      	ldr	r1, [r7, #12]
 801507a:	2000      	movs	r0, #0
 801507c:	47a0      	blx	r4
 801507e:	6178      	str	r0, [r7, #20]
 8015080:	e011      	b.n	80150a6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015082:	4b0d      	ldr	r3, [pc, #52]	; (80150b8 <GetTimeOnAir+0x9c>)
 8015084:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015086:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801508a:	88bb      	ldrh	r3, [r7, #4]
 801508c:	b2db      	uxtb	r3, r3
 801508e:	2101      	movs	r1, #1
 8015090:	9103      	str	r1, [sp, #12]
 8015092:	9302      	str	r3, [sp, #8]
 8015094:	2300      	movs	r3, #0
 8015096:	9301      	str	r3, [sp, #4]
 8015098:	2308      	movs	r3, #8
 801509a:	9300      	str	r3, [sp, #0]
 801509c:	2301      	movs	r3, #1
 801509e:	68f9      	ldr	r1, [r7, #12]
 80150a0:	2001      	movs	r0, #1
 80150a2:	47a0      	blx	r4
 80150a4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80150a6:	697b      	ldr	r3, [r7, #20]
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	371c      	adds	r7, #28
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd90      	pop	{r4, r7, pc}
 80150b0:	08020754 	.word	0x08020754
 80150b4:	0802075c 	.word	0x0802075c
 80150b8:	0802078c 	.word	0x0802078c

080150bc <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b088      	sub	sp, #32
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80150c4:	2300      	movs	r3, #0
 80150c6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	3b01      	subs	r3, #1
 80150ce:	2b38      	cmp	r3, #56	; 0x38
 80150d0:	f200 8125 	bhi.w	801531e <RegionEU868GetPhyParam+0x262>
 80150d4:	a201      	add	r2, pc, #4	; (adr r2, 80150dc <RegionEU868GetPhyParam+0x20>)
 80150d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150da:	bf00      	nop
 80150dc:	080151c1 	.word	0x080151c1
 80150e0:	080151c7 	.word	0x080151c7
 80150e4:	0801531f 	.word	0x0801531f
 80150e8:	0801531f 	.word	0x0801531f
 80150ec:	0801531f 	.word	0x0801531f
 80150f0:	080151cd 	.word	0x080151cd
 80150f4:	0801531f 	.word	0x0801531f
 80150f8:	08015205 	.word	0x08015205
 80150fc:	0801531f 	.word	0x0801531f
 8015100:	0801520b 	.word	0x0801520b
 8015104:	08015211 	.word	0x08015211
 8015108:	08015217 	.word	0x08015217
 801510c:	0801521d 	.word	0x0801521d
 8015110:	0801522d 	.word	0x0801522d
 8015114:	0801523d 	.word	0x0801523d
 8015118:	08015243 	.word	0x08015243
 801511c:	0801524b 	.word	0x0801524b
 8015120:	08015253 	.word	0x08015253
 8015124:	0801525b 	.word	0x0801525b
 8015128:	08015263 	.word	0x08015263
 801512c:	0801526b 	.word	0x0801526b
 8015130:	08015273 	.word	0x08015273
 8015134:	08015287 	.word	0x08015287
 8015138:	0801528d 	.word	0x0801528d
 801513c:	08015293 	.word	0x08015293
 8015140:	08015299 	.word	0x08015299
 8015144:	080152a3 	.word	0x080152a3
 8015148:	080152ad 	.word	0x080152ad
 801514c:	080152b3 	.word	0x080152b3
 8015150:	080152bb 	.word	0x080152bb
 8015154:	080152c1 	.word	0x080152c1
 8015158:	080152c7 	.word	0x080152c7
 801515c:	080152cf 	.word	0x080152cf
 8015160:	080151d3 	.word	0x080151d3
 8015164:	0801531f 	.word	0x0801531f
 8015168:	0801531f 	.word	0x0801531f
 801516c:	0801531f 	.word	0x0801531f
 8015170:	0801531f 	.word	0x0801531f
 8015174:	0801531f 	.word	0x0801531f
 8015178:	0801531f 	.word	0x0801531f
 801517c:	0801531f 	.word	0x0801531f
 8015180:	0801531f 	.word	0x0801531f
 8015184:	0801531f 	.word	0x0801531f
 8015188:	0801531f 	.word	0x0801531f
 801518c:	0801531f 	.word	0x0801531f
 8015190:	0801531f 	.word	0x0801531f
 8015194:	0801531f 	.word	0x0801531f
 8015198:	080152d5 	.word	0x080152d5
 801519c:	080152db 	.word	0x080152db
 80151a0:	080152e9 	.word	0x080152e9
 80151a4:	0801531f 	.word	0x0801531f
 80151a8:	0801531f 	.word	0x0801531f
 80151ac:	080152ef 	.word	0x080152ef
 80151b0:	080152f5 	.word	0x080152f5
 80151b4:	0801531f 	.word	0x0801531f
 80151b8:	080152fb 	.word	0x080152fb
 80151bc:	0801530b 	.word	0x0801530b
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80151c0:	2300      	movs	r3, #0
 80151c2:	61bb      	str	r3, [r7, #24]
            break;
 80151c4:	e0ac      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80151c6:	2300      	movs	r3, #0
 80151c8:	61bb      	str	r3, [r7, #24]
            break;
 80151ca:	e0a9      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80151cc:	2300      	movs	r3, #0
 80151ce:	61bb      	str	r3, [r7, #24]
            break;
 80151d0:	e0a6      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151d8:	733b      	strb	r3, [r7, #12]
 80151da:	2307      	movs	r3, #7
 80151dc:	737b      	strb	r3, [r7, #13]
 80151de:	2300      	movs	r3, #0
 80151e0:	73bb      	strb	r3, [r7, #14]
 80151e2:	2310      	movs	r3, #16
 80151e4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80151e6:	4b52      	ldr	r3, [pc, #328]	; (8015330 <RegionEU868GetPhyParam+0x274>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151ec:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80151ee:	4b50      	ldr	r3, [pc, #320]	; (8015330 <RegionEU868GetPhyParam+0x274>)
 80151f0:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151f2:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80151f4:	f107 030c 	add.w	r3, r7, #12
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7ff fe02 	bl	8014e02 <RegionCommonGetNextLowerTxDr>
 80151fe:	4603      	mov	r3, r0
 8015200:	61bb      	str	r3, [r7, #24]
            break;
 8015202:	e08d      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015204:	2300      	movs	r3, #0
 8015206:	61bb      	str	r3, [r7, #24]
            break;
 8015208:	e08a      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801520a:	2300      	movs	r3, #0
 801520c:	61bb      	str	r3, [r7, #24]
            break;
 801520e:	e087      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015210:	2340      	movs	r3, #64	; 0x40
 8015212:	61bb      	str	r3, [r7, #24]
            break;
 8015214:	e084      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015216:	2320      	movs	r3, #32
 8015218:	61bb      	str	r3, [r7, #24]
            break;
 801521a:	e081      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015222:	461a      	mov	r2, r3
 8015224:	4b43      	ldr	r3, [pc, #268]	; (8015334 <RegionEU868GetPhyParam+0x278>)
 8015226:	5c9b      	ldrb	r3, [r3, r2]
 8015228:	61bb      	str	r3, [r7, #24]
            break;
 801522a:	e079      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015232:	461a      	mov	r2, r3
 8015234:	4b40      	ldr	r3, [pc, #256]	; (8015338 <RegionEU868GetPhyParam+0x27c>)
 8015236:	5c9b      	ldrb	r3, [r3, r2]
 8015238:	61bb      	str	r3, [r7, #24]
            break;
 801523a:	e071      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801523c:	2301      	movs	r3, #1
 801523e:	61bb      	str	r3, [r7, #24]
            break;
 8015240:	e06e      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015242:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015246:	61bb      	str	r3, [r7, #24]
            break;
 8015248:	e06a      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801524a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801524e:	61bb      	str	r3, [r7, #24]
            break;
 8015250:	e066      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015252:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015256:	61bb      	str	r3, [r7, #24]
            break;
 8015258:	e062      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801525a:	f241 3388 	movw	r3, #5000	; 0x1388
 801525e:	61bb      	str	r3, [r7, #24]
            break;
 8015260:	e05e      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015262:	f241 7370 	movw	r3, #6000	; 0x1770
 8015266:	61bb      	str	r3, [r7, #24]
            break;
 8015268:	e05a      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801526a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801526e:	61bb      	str	r3, [r7, #24]
            break;
 8015270:	e056      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015276:	4831      	ldr	r0, [pc, #196]	; (801533c <RegionEU868GetPhyParam+0x280>)
 8015278:	f001 f872 	bl	8016360 <randr>
 801527c:	4603      	mov	r3, r0
 801527e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015282:	61bb      	str	r3, [r7, #24]
            break;
 8015284:	e04c      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015286:	2300      	movs	r3, #0
 8015288:	61bb      	str	r3, [r7, #24]
            break;
 801528a:	e049      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801528c:	4b2c      	ldr	r3, [pc, #176]	; (8015340 <RegionEU868GetPhyParam+0x284>)
 801528e:	61bb      	str	r3, [r7, #24]
            break;
 8015290:	e046      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015292:	2300      	movs	r3, #0
 8015294:	61bb      	str	r3, [r7, #24]
            break;
 8015296:	e043      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015298:	4b25      	ldr	r3, [pc, #148]	; (8015330 <RegionEU868GetPhyParam+0x274>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	33c0      	adds	r3, #192	; 0xc0
 801529e:	61bb      	str	r3, [r7, #24]
            break;
 80152a0:	e03e      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80152a2:	4b23      	ldr	r3, [pc, #140]	; (8015330 <RegionEU868GetPhyParam+0x274>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	33c2      	adds	r3, #194	; 0xc2
 80152a8:	61bb      	str	r3, [r7, #24]
            break;
 80152aa:	e039      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80152ac:	2310      	movs	r3, #16
 80152ae:	61bb      	str	r3, [r7, #24]
            break;
 80152b0:	e036      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80152b2:	4b1f      	ldr	r3, [pc, #124]	; (8015330 <RegionEU868GetPhyParam+0x274>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	61bb      	str	r3, [r7, #24]
            break;
 80152b8:	e032      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80152ba:	2300      	movs	r3, #0
 80152bc:	61bb      	str	r3, [r7, #24]
            break;
 80152be:	e02f      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80152c0:	2300      	movs	r3, #0
 80152c2:	61bb      	str	r3, [r7, #24]
            break;
 80152c4:	e02c      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80152c6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80152ca:	61bb      	str	r3, [r7, #24]
            break;
 80152cc:	e028      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80152ce:	4b1d      	ldr	r3, [pc, #116]	; (8015344 <RegionEU868GetPhyParam+0x288>)
 80152d0:	61bb      	str	r3, [r7, #24]
            break;
 80152d2:	e025      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80152d4:	4b1a      	ldr	r3, [pc, #104]	; (8015340 <RegionEU868GetPhyParam+0x284>)
 80152d6:	61bb      	str	r3, [r7, #24]
            break;
 80152d8:	e022      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80152da:	2311      	movs	r3, #17
 80152dc:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80152de:	2302      	movs	r3, #2
 80152e0:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80152e2:	2300      	movs	r3, #0
 80152e4:	76bb      	strb	r3, [r7, #26]
            break;
 80152e6:	e01b      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80152e8:	2303      	movs	r3, #3
 80152ea:	61bb      	str	r3, [r7, #24]
            break;
 80152ec:	e018      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80152ee:	4b14      	ldr	r3, [pc, #80]	; (8015340 <RegionEU868GetPhyParam+0x284>)
 80152f0:	61bb      	str	r3, [r7, #24]
            break;
 80152f2:	e015      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80152f4:	2303      	movs	r3, #3
 80152f6:	61bb      	str	r3, [r7, #24]
            break;
 80152f8:	e012      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015300:	461a      	mov	r2, r3
 8015302:	4b11      	ldr	r3, [pc, #68]	; (8015348 <RegionEU868GetPhyParam+0x28c>)
 8015304:	5c9b      	ldrb	r3, [r3, r2]
 8015306:	61bb      	str	r3, [r7, #24]
            break;
 8015308:	e00a      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015310:	490e      	ldr	r1, [pc, #56]	; (801534c <RegionEU868GetPhyParam+0x290>)
 8015312:	4618      	mov	r0, r3
 8015314:	f7ff fdc8 	bl	8014ea8 <RegionCommonGetBandwidth>
 8015318:	4603      	mov	r3, r0
 801531a:	61bb      	str	r3, [r7, #24]
            break;
 801531c:	e000      	b.n	8015320 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801531e:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	61fb      	str	r3, [r7, #28]
 8015324:	69fb      	ldr	r3, [r7, #28]
}
 8015326:	4618      	mov	r0, r3
 8015328:	3720      	adds	r7, #32
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	20001b60 	.word	0x20001b60
 8015334:	0802077c 	.word	0x0802077c
 8015338:	08020784 	.word	0x08020784
 801533c:	fffffc18 	.word	0xfffffc18
 8015340:	33d3e608 	.word	0x33d3e608
 8015344:	4009999a 	.word	0x4009999a
 8015348:	08020754 	.word	0x08020754
 801534c:	0802075c 	.word	0x0802075c

08015350 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015350:	b590      	push	{r4, r7, lr}
 8015352:	b085      	sub	sp, #20
 8015354:	af02      	add	r7, sp, #8
 8015356:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015358:	4b11      	ldr	r3, [pc, #68]	; (80153a0 <RegionEU868SetBandTxDone+0x50>)
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	4b11      	ldr	r3, [pc, #68]	; (80153a4 <RegionEU868SetBandTxDone+0x54>)
 801535e:	6819      	ldr	r1, [r3, #0]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	4618      	mov	r0, r3
 8015366:	4603      	mov	r3, r0
 8015368:	005b      	lsls	r3, r3, #1
 801536a:	4403      	add	r3, r0
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	440b      	add	r3, r1
 8015370:	3309      	adds	r3, #9
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	4619      	mov	r1, r3
 8015376:	460b      	mov	r3, r1
 8015378:	005b      	lsls	r3, r3, #1
 801537a:	440b      	add	r3, r1
 801537c:	00db      	lsls	r3, r3, #3
 801537e:	18d0      	adds	r0, r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6899      	ldr	r1, [r3, #8]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	785c      	ldrb	r4, [r3, #1]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	691a      	ldr	r2, [r3, #16]
 801538c:	9200      	str	r2, [sp, #0]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	4622      	mov	r2, r4
 8015392:	f7ff f91f 	bl	80145d4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8015396:	bf00      	nop
 8015398:	370c      	adds	r7, #12
 801539a:	46bd      	mov	sp, r7
 801539c:	bd90      	pop	{r4, r7, pc}
 801539e:	bf00      	nop
 80153a0:	20001b5c 	.word	0x20001b5c
 80153a4:	20001b60 	.word	0x20001b60

080153a8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b0b0      	sub	sp, #192	; 0xc0
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80153b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153b4:	2290      	movs	r2, #144	; 0x90
 80153b6:	2100      	movs	r1, #0
 80153b8:	4618      	mov	r0, r3
 80153ba:	f004 fe1d 	bl	8019ff8 <memset>
 80153be:	2364      	movs	r3, #100	; 0x64
 80153c0:	863b      	strh	r3, [r7, #48]	; 0x30
 80153c2:	2364      	movs	r3, #100	; 0x64
 80153c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80153c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153cc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80153d0:	230a      	movs	r3, #10
 80153d2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80153d6:	2364      	movs	r3, #100	; 0x64
 80153d8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80153dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	7a1b      	ldrb	r3, [r3, #8]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d05c      	beq.n	80154a6 <RegionEU868InitDefaults+0xfe>
 80153ec:	2b02      	cmp	r3, #2
 80153ee:	dc69      	bgt.n	80154c4 <RegionEU868InitDefaults+0x11c>
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d002      	beq.n	80153fa <RegionEU868InitDefaults+0x52>
 80153f4:	2b01      	cmp	r3, #1
 80153f6:	d03e      	beq.n	8015476 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80153f8:	e064      	b.n	80154c4 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d061      	beq.n	80154c6 <RegionEU868InitDefaults+0x11e>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d05d      	beq.n	80154c6 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4a2f      	ldr	r2, [pc, #188]	; (80154cc <RegionEU868InitDefaults+0x124>)
 8015410:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	4a2e      	ldr	r2, [pc, #184]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015418:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801541a:	4b2c      	ldr	r3, [pc, #176]	; (80154cc <RegionEU868InitDefaults+0x124>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	4618      	mov	r0, r3
 8015420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015424:	2290      	movs	r2, #144	; 0x90
 8015426:	4619      	mov	r1, r3
 8015428:	f000 ffb1 	bl	801638e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801542c:	4b28      	ldr	r3, [pc, #160]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	4a28      	ldr	r2, [pc, #160]	; (80154d4 <RegionEU868InitDefaults+0x12c>)
 8015432:	ca07      	ldmia	r2, {r0, r1, r2}
 8015434:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015438:	4b25      	ldr	r3, [pc, #148]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4a26      	ldr	r2, [pc, #152]	; (80154d8 <RegionEU868InitDefaults+0x130>)
 801543e:	330c      	adds	r3, #12
 8015440:	ca07      	ldmia	r2, {r0, r1, r2}
 8015442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015446:	4b22      	ldr	r3, [pc, #136]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	4a24      	ldr	r2, [pc, #144]	; (80154dc <RegionEU868InitDefaults+0x134>)
 801544c:	3318      	adds	r3, #24
 801544e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015450:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015454:	4b1e      	ldr	r3, [pc, #120]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2207      	movs	r2, #7
 801545a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801545e:	4b1c      	ldr	r3, [pc, #112]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015466:	4b1a      	ldr	r3, [pc, #104]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	33c2      	adds	r3, #194	; 0xc2
 801546c:	2201      	movs	r2, #1
 801546e:	4619      	mov	r1, r3
 8015470:	f7ff f88a 	bl	8014588 <RegionCommonChanMaskCopy>
 8015474:	e027      	b.n	80154c6 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015476:	4b16      	ldr	r3, [pc, #88]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	2200      	movs	r2, #0
 801547c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801547e:	4b14      	ldr	r3, [pc, #80]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	2200      	movs	r2, #0
 8015484:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015486:	4b12      	ldr	r3, [pc, #72]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2200      	movs	r2, #0
 801548c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801548e:	4b10      	ldr	r3, [pc, #64]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015496:	4b0e      	ldr	r3, [pc, #56]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	33c2      	adds	r3, #194	; 0xc2
 801549c:	2201      	movs	r2, #1
 801549e:	4619      	mov	r1, r3
 80154a0:	f7ff f872 	bl	8014588 <RegionCommonChanMaskCopy>
            break;
 80154a4:	e00f      	b.n	80154c6 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80154a6:	4b0a      	ldr	r3, [pc, #40]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80154ae:	4b08      	ldr	r3, [pc, #32]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80154b6:	4b06      	ldr	r3, [pc, #24]	; (80154d0 <RegionEU868InitDefaults+0x128>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	430a      	orrs	r2, r1
 80154bc:	b292      	uxth	r2, r2
 80154be:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 80154c2:	e000      	b.n	80154c6 <RegionEU868InitDefaults+0x11e>
            break;
 80154c4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80154c6:	37c0      	adds	r7, #192	; 0xc0
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	20001b5c 	.word	0x20001b5c
 80154d0:	20001b60 	.word	0x20001b60
 80154d4:	080202f4 	.word	0x080202f4
 80154d8:	08020300 	.word	0x08020300
 80154dc:	0802030c 	.word	0x0802030c

080154e0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	460b      	mov	r3, r1
 80154ea:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80154ec:	78fb      	ldrb	r3, [r7, #3]
 80154ee:	2b0f      	cmp	r3, #15
 80154f0:	d86c      	bhi.n	80155cc <RegionEU868Verify+0xec>
 80154f2:	a201      	add	r2, pc, #4	; (adr r2, 80154f8 <RegionEU868Verify+0x18>)
 80154f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154f8:	08015539 	.word	0x08015539
 80154fc:	080155cd 	.word	0x080155cd
 8015500:	080155cd 	.word	0x080155cd
 8015504:	080155cd 	.word	0x080155cd
 8015508:	080155cd 	.word	0x080155cd
 801550c:	08015551 	.word	0x08015551
 8015510:	0801556f 	.word	0x0801556f
 8015514:	0801558d 	.word	0x0801558d
 8015518:	080155cd 	.word	0x080155cd
 801551c:	080155ab 	.word	0x080155ab
 8015520:	080155ab 	.word	0x080155ab
 8015524:	080155cd 	.word	0x080155cd
 8015528:	080155cd 	.word	0x080155cd
 801552c:	080155cd 	.word	0x080155cd
 8015530:	080155cd 	.word	0x080155cd
 8015534:	080155c9 	.word	0x080155c9
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015538:	2300      	movs	r3, #0
 801553a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f107 020f 	add.w	r2, r7, #15
 8015544:	4611      	mov	r1, r2
 8015546:	4618      	mov	r0, r3
 8015548:	f7ff fcf2 	bl	8014f30 <VerifyRfFreq>
 801554c:	4603      	mov	r3, r0
 801554e:	e03e      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f993 3000 	ldrsb.w	r3, [r3]
 8015556:	2207      	movs	r2, #7
 8015558:	2100      	movs	r1, #0
 801555a:	4618      	mov	r0, r3
 801555c:	f7fe ff97 	bl	801448e <RegionCommonValueInRange>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	bf14      	ite	ne
 8015566:	2301      	movne	r3, #1
 8015568:	2300      	moveq	r3, #0
 801556a:	b2db      	uxtb	r3, r3
 801556c:	e02f      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f993 3000 	ldrsb.w	r3, [r3]
 8015574:	2205      	movs	r2, #5
 8015576:	2100      	movs	r1, #0
 8015578:	4618      	mov	r0, r3
 801557a:	f7fe ff88 	bl	801448e <RegionCommonValueInRange>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	bf14      	ite	ne
 8015584:	2301      	movne	r3, #1
 8015586:	2300      	moveq	r3, #0
 8015588:	b2db      	uxtb	r3, r3
 801558a:	e020      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f993 3000 	ldrsb.w	r3, [r3]
 8015592:	2207      	movs	r2, #7
 8015594:	2100      	movs	r1, #0
 8015596:	4618      	mov	r0, r3
 8015598:	f7fe ff79 	bl	801448e <RegionCommonValueInRange>
 801559c:	4603      	mov	r3, r0
 801559e:	2b00      	cmp	r3, #0
 80155a0:	bf14      	ite	ne
 80155a2:	2301      	movne	r3, #1
 80155a4:	2300      	moveq	r3, #0
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	e011      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f993 3000 	ldrsb.w	r3, [r3]
 80155b0:	2207      	movs	r2, #7
 80155b2:	2100      	movs	r1, #0
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7fe ff6a 	bl	801448e <RegionCommonValueInRange>
 80155ba:	4603      	mov	r3, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	bf14      	ite	ne
 80155c0:	2301      	movne	r3, #1
 80155c2:	2300      	moveq	r3, #0
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	e002      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80155c8:	2301      	movs	r3, #1
 80155ca:	e000      	b.n	80155ce <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80155cc:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop

080155d8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b08a      	sub	sp, #40	; 0x28
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80155e0:	2350      	movs	r3, #80	; 0x50
 80155e2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	791b      	ldrb	r3, [r3, #4]
 80155ea:	2b10      	cmp	r3, #16
 80155ec:	d162      	bne.n	80156b4 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	330f      	adds	r3, #15
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d15e      	bne.n	80156b8 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80155fa:	2300      	movs	r3, #0
 80155fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015600:	2303      	movs	r3, #3
 8015602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015606:	e050      	b.n	80156aa <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801560c:	2b07      	cmp	r3, #7
 801560e:	d824      	bhi.n	801565a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681a      	ldr	r2, [r3, #0]
 8015614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015618:	4413      	add	r3, r2
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801561e:	69ba      	ldr	r2, [r7, #24]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6819      	ldr	r1, [r3, #0]
 8015624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015628:	3301      	adds	r3, #1
 801562a:	440b      	add	r3, r1
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	021b      	lsls	r3, r3, #8
 8015630:	4313      	orrs	r3, r2
 8015632:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015634:	69ba      	ldr	r2, [r7, #24]
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6819      	ldr	r1, [r3, #0]
 801563a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801563e:	3302      	adds	r3, #2
 8015640:	440b      	add	r3, r1
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	041b      	lsls	r3, r3, #16
 8015646:	4313      	orrs	r3, r2
 8015648:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	2264      	movs	r2, #100	; 0x64
 801564e:	fb02 f303 	mul.w	r3, r2, r3
 8015652:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015654:	2300      	movs	r3, #0
 8015656:	61fb      	str	r3, [r7, #28]
 8015658:	e006      	b.n	8015668 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801565a:	2300      	movs	r3, #0
 801565c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801565e:	2300      	movs	r3, #0
 8015660:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015664:	2300      	movs	r3, #0
 8015666:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d00b      	beq.n	8015686 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801566e:	f107 0318 	add.w	r3, r7, #24
 8015672:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015678:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801567a:	f107 0310 	add.w	r3, r7, #16
 801567e:	4618      	mov	r0, r3
 8015680:	f000 fd0c 	bl	801609c <RegionEU868ChannelAdd>
 8015684:	e007      	b.n	8015696 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015686:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801568a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801568c:	f107 030c 	add.w	r3, r7, #12
 8015690:	4618      	mov	r0, r3
 8015692:	f000 fda5 	bl	80161e0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801569a:	3303      	adds	r3, #3
 801569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156a4:	3301      	adds	r3, #1
 80156a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156ae:	2b0f      	cmp	r3, #15
 80156b0:	d9aa      	bls.n	8015608 <RegionEU868ApplyCFList+0x30>
 80156b2:	e002      	b.n	80156ba <RegionEU868ApplyCFList+0xe2>
        return;
 80156b4:	bf00      	nop
 80156b6:	e000      	b.n	80156ba <RegionEU868ApplyCFList+0xe2>
        return;
 80156b8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80156ba:	3728      	adds	r7, #40	; 0x28
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	791b      	ldrb	r3, [r3, #4]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <RegionEU868ChanMaskSet+0x16>
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d00b      	beq.n	80156ec <RegionEU868ChanMaskSet+0x2c>
 80156d4:	e015      	b.n	8015702 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80156d6:	4b0e      	ldr	r3, [pc, #56]	; (8015710 <RegionEU868ChanMaskSet+0x50>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2201      	movs	r2, #1
 80156e4:	4619      	mov	r1, r3
 80156e6:	f7fe ff4f 	bl	8014588 <RegionCommonChanMaskCopy>
            break;
 80156ea:	e00c      	b.n	8015706 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80156ec:	4b08      	ldr	r3, [pc, #32]	; (8015710 <RegionEU868ChanMaskSet+0x50>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2201      	movs	r2, #1
 80156fa:	4619      	mov	r1, r3
 80156fc:	f7fe ff44 	bl	8014588 <RegionCommonChanMaskCopy>
            break;
 8015700:	e001      	b.n	8015706 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015702:	2300      	movs	r3, #0
 8015704:	e000      	b.n	8015708 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015706:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	20001b60 	.word	0x20001b60

08015714 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b088      	sub	sp, #32
 8015718:	af02      	add	r7, sp, #8
 801571a:	60ba      	str	r2, [r7, #8]
 801571c:	607b      	str	r3, [r7, #4]
 801571e:	4603      	mov	r3, r0
 8015720:	73fb      	strb	r3, [r7, #15]
 8015722:	460b      	mov	r3, r1
 8015724:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015726:	2300      	movs	r3, #0
 8015728:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801572a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801572e:	2b07      	cmp	r3, #7
 8015730:	bfa8      	it	ge
 8015732:	2307      	movge	r3, #7
 8015734:	b25a      	sxtb	r2, r3
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015740:	491e      	ldr	r1, [pc, #120]	; (80157bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015742:	4618      	mov	r0, r3
 8015744:	f7ff fbb0 	bl	8014ea8 <RegionCommonGetBandwidth>
 8015748:	4603      	mov	r3, r0
 801574a:	b2da      	uxtb	r2, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015756:	2b07      	cmp	r3, #7
 8015758:	d10a      	bne.n	8015770 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015760:	461a      	mov	r2, r3
 8015762:	4b17      	ldr	r3, [pc, #92]	; (80157c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015764:	5c9b      	ldrb	r3, [r3, r2]
 8015766:	4618      	mov	r0, r3
 8015768:	f7ff f932 	bl	80149d0 <RegionCommonComputeSymbolTimeFsk>
 801576c:	6178      	str	r0, [r7, #20]
 801576e:	e011      	b.n	8015794 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015776:	461a      	mov	r2, r3
 8015778:	4b11      	ldr	r3, [pc, #68]	; (80157c0 <RegionEU868ComputeRxWindowParameters+0xac>)
 801577a:	5c9a      	ldrb	r2, [r3, r2]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015782:	4619      	mov	r1, r3
 8015784:	4b0d      	ldr	r3, [pc, #52]	; (80157bc <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015786:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801578a:	4619      	mov	r1, r3
 801578c:	4610      	mov	r0, r2
 801578e:	f7ff f909 	bl	80149a4 <RegionCommonComputeSymbolTimeLoRa>
 8015792:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015794:	4b0b      	ldr	r3, [pc, #44]	; (80157c4 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015798:	4798      	blx	r3
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	3308      	adds	r3, #8
 801579e:	687a      	ldr	r2, [r7, #4]
 80157a0:	320c      	adds	r2, #12
 80157a2:	7bb9      	ldrb	r1, [r7, #14]
 80157a4:	9201      	str	r2, [sp, #4]
 80157a6:	9300      	str	r3, [sp, #0]
 80157a8:	4603      	mov	r3, r0
 80157aa:	68ba      	ldr	r2, [r7, #8]
 80157ac:	6978      	ldr	r0, [r7, #20]
 80157ae:	f7ff f91f 	bl	80149f0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80157b2:	bf00      	nop
 80157b4:	3718      	adds	r7, #24
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	0802075c 	.word	0x0802075c
 80157c0:	08020754 	.word	0x08020754
 80157c4:	0802078c 	.word	0x0802078c

080157c8 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80157c8:	b5b0      	push	{r4, r5, r7, lr}
 80157ca:	b090      	sub	sp, #64	; 0x40
 80157cc:	af0a      	add	r7, sp, #40	; 0x28
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	785b      	ldrb	r3, [r3, #1]
 80157d6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80157d8:	2300      	movs	r3, #0
 80157da:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80157dc:	2300      	movs	r3, #0
 80157de:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80157e6:	4b5a      	ldr	r3, [pc, #360]	; (8015950 <RegionEU868RxConfig+0x188>)
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	4798      	blx	r3
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d001      	beq.n	80157f6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80157f2:	2300      	movs	r3, #0
 80157f4:	e0a8      	b.n	8015948 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	7cdb      	ldrb	r3, [r3, #19]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d126      	bne.n	801584c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80157fe:	4b55      	ldr	r3, [pc, #340]	; (8015954 <RegionEU868RxConfig+0x18c>)
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	4619      	mov	r1, r3
 8015808:	460b      	mov	r3, r1
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	440b      	add	r3, r1
 801580e:	009b      	lsls	r3, r3, #2
 8015810:	4413      	add	r3, r2
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015816:	4b4f      	ldr	r3, [pc, #316]	; (8015954 <RegionEU868RxConfig+0x18c>)
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	4619      	mov	r1, r3
 8015820:	460b      	mov	r3, r1
 8015822:	005b      	lsls	r3, r3, #1
 8015824:	440b      	add	r3, r1
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	4413      	add	r3, r2
 801582a:	3304      	adds	r3, #4
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00c      	beq.n	801584c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015832:	4b48      	ldr	r3, [pc, #288]	; (8015954 <RegionEU868RxConfig+0x18c>)
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	4619      	mov	r1, r3
 801583c:	460b      	mov	r3, r1
 801583e:	005b      	lsls	r3, r3, #1
 8015840:	440b      	add	r3, r1
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	4413      	add	r3, r2
 8015846:	3304      	adds	r3, #4
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801584c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015850:	4a41      	ldr	r2, [pc, #260]	; (8015958 <RegionEU868RxConfig+0x190>)
 8015852:	5cd3      	ldrb	r3, [r2, r3]
 8015854:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015856:	4b3e      	ldr	r3, [pc, #248]	; (8015950 <RegionEU868RxConfig+0x188>)
 8015858:	68db      	ldr	r3, [r3, #12]
 801585a:	6938      	ldr	r0, [r7, #16]
 801585c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801585e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015862:	2b07      	cmp	r3, #7
 8015864:	d128      	bne.n	80158b8 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015866:	2300      	movs	r3, #0
 8015868:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801586a:	4b39      	ldr	r3, [pc, #228]	; (8015950 <RegionEU868RxConfig+0x188>)
 801586c:	699c      	ldr	r4, [r3, #24]
 801586e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015876:	fb02 f303 	mul.w	r3, r2, r3
 801587a:	4619      	mov	r1, r3
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	b29b      	uxth	r3, r3
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	7c92      	ldrb	r2, [r2, #18]
 8015886:	7df8      	ldrb	r0, [r7, #23]
 8015888:	9209      	str	r2, [sp, #36]	; 0x24
 801588a:	2200      	movs	r2, #0
 801588c:	9208      	str	r2, [sp, #32]
 801588e:	2200      	movs	r2, #0
 8015890:	9207      	str	r2, [sp, #28]
 8015892:	2200      	movs	r2, #0
 8015894:	9206      	str	r2, [sp, #24]
 8015896:	2201      	movs	r2, #1
 8015898:	9205      	str	r2, [sp, #20]
 801589a:	2200      	movs	r2, #0
 801589c:	9204      	str	r2, [sp, #16]
 801589e:	2200      	movs	r2, #0
 80158a0:	9203      	str	r2, [sp, #12]
 80158a2:	9302      	str	r3, [sp, #8]
 80158a4:	2305      	movs	r3, #5
 80158a6:	9301      	str	r3, [sp, #4]
 80158a8:	4b2c      	ldr	r3, [pc, #176]	; (801595c <RegionEU868RxConfig+0x194>)
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	2300      	movs	r3, #0
 80158ae:	460a      	mov	r2, r1
 80158b0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80158b4:	47a0      	blx	r4
 80158b6:	e024      	b.n	8015902 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80158b8:	2301      	movs	r3, #1
 80158ba:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80158bc:	4b24      	ldr	r3, [pc, #144]	; (8015950 <RegionEU868RxConfig+0x188>)
 80158be:	699c      	ldr	r4, [r3, #24]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	789b      	ldrb	r3, [r3, #2]
 80158c4:	461d      	mov	r5, r3
 80158c6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	689b      	ldr	r3, [r3, #8]
 80158ce:	b29b      	uxth	r3, r3
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	7c92      	ldrb	r2, [r2, #18]
 80158d4:	7df8      	ldrb	r0, [r7, #23]
 80158d6:	9209      	str	r2, [sp, #36]	; 0x24
 80158d8:	2201      	movs	r2, #1
 80158da:	9208      	str	r2, [sp, #32]
 80158dc:	2200      	movs	r2, #0
 80158de:	9207      	str	r2, [sp, #28]
 80158e0:	2200      	movs	r2, #0
 80158e2:	9206      	str	r2, [sp, #24]
 80158e4:	2200      	movs	r2, #0
 80158e6:	9205      	str	r2, [sp, #20]
 80158e8:	2200      	movs	r2, #0
 80158ea:	9204      	str	r2, [sp, #16]
 80158ec:	2200      	movs	r2, #0
 80158ee:	9203      	str	r2, [sp, #12]
 80158f0:	9302      	str	r3, [sp, #8]
 80158f2:	2308      	movs	r3, #8
 80158f4:	9301      	str	r3, [sp, #4]
 80158f6:	2300      	movs	r3, #0
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	2301      	movs	r3, #1
 80158fc:	460a      	mov	r2, r1
 80158fe:	4629      	mov	r1, r5
 8015900:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	7c5b      	ldrb	r3, [r3, #17]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d005      	beq.n	8015916 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801590a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801590e:	4a14      	ldr	r2, [pc, #80]	; (8015960 <RegionEU868RxConfig+0x198>)
 8015910:	5cd3      	ldrb	r3, [r2, r3]
 8015912:	75bb      	strb	r3, [r7, #22]
 8015914:	e004      	b.n	8015920 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801591a:	4a12      	ldr	r2, [pc, #72]	; (8015964 <RegionEU868RxConfig+0x19c>)
 801591c:	5cd3      	ldrb	r3, [r2, r3]
 801591e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015920:	4b0b      	ldr	r3, [pc, #44]	; (8015950 <RegionEU868RxConfig+0x188>)
 8015922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015924:	7dba      	ldrb	r2, [r7, #22]
 8015926:	320d      	adds	r2, #13
 8015928:	b2d1      	uxtb	r1, r2
 801592a:	7dfa      	ldrb	r2, [r7, #23]
 801592c:	4610      	mov	r0, r2
 801592e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	7cdb      	ldrb	r3, [r3, #19]
 8015934:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015938:	6939      	ldr	r1, [r7, #16]
 801593a:	4618      	mov	r0, r3
 801593c:	f7ff fad2 	bl	8014ee4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	7bfa      	ldrb	r2, [r7, #15]
 8015944:	701a      	strb	r2, [r3, #0]
    return true;
 8015946:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015948:	4618      	mov	r0, r3
 801594a:	3718      	adds	r7, #24
 801594c:	46bd      	mov	sp, r7
 801594e:	bdb0      	pop	{r4, r5, r7, pc}
 8015950:	0802078c 	.word	0x0802078c
 8015954:	20001b60 	.word	0x20001b60
 8015958:	08020754 	.word	0x08020754
 801595c:	00014585 	.word	0x00014585
 8015960:	08020784 	.word	0x08020784
 8015964:	0802077c 	.word	0x0802077c

08015968 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015968:	b590      	push	{r4, r7, lr}
 801596a:	b093      	sub	sp, #76	; 0x4c
 801596c:	af0a      	add	r7, sp, #40	; 0x28
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801597a:	461a      	mov	r2, r3
 801597c:	4b5d      	ldr	r3, [pc, #372]	; (8015af4 <RegionEU868TxConfig+0x18c>)
 801597e:	5c9b      	ldrb	r3, [r3, r2]
 8015980:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015988:	4b5b      	ldr	r3, [pc, #364]	; (8015af8 <RegionEU868TxConfig+0x190>)
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	4b5b      	ldr	r3, [pc, #364]	; (8015afc <RegionEU868TxConfig+0x194>)
 801598e:	6819      	ldr	r1, [r3, #0]
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	461c      	mov	r4, r3
 8015996:	4623      	mov	r3, r4
 8015998:	005b      	lsls	r3, r3, #1
 801599a:	4423      	add	r3, r4
 801599c:	009b      	lsls	r3, r3, #2
 801599e:	440b      	add	r3, r1
 80159a0:	3309      	adds	r3, #9
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	4619      	mov	r1, r3
 80159a6:	460b      	mov	r3, r1
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	440b      	add	r3, r1
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	4413      	add	r3, r2
 80159b0:	3302      	adds	r3, #2
 80159b2:	f993 3000 	ldrsb.w	r3, [r3]
 80159b6:	4619      	mov	r1, r3
 80159b8:	f7ff fa61 	bl	8014e7e <RegionCommonLimitTxPower>
 80159bc:	4603      	mov	r3, r0
 80159be:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159c6:	494e      	ldr	r1, [pc, #312]	; (8015b00 <RegionEU868TxConfig+0x198>)
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7ff fa6d 	bl	8014ea8 <RegionCommonGetBandwidth>
 80159ce:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80159d0:	2300      	movs	r3, #0
 80159d2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	6859      	ldr	r1, [r3, #4]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	689a      	ldr	r2, [r3, #8]
 80159dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff f8bd 	bl	8014b60 <RegionCommonComputeTxPower>
 80159e6:	4603      	mov	r3, r0
 80159e8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80159ea:	4b46      	ldr	r3, [pc, #280]	; (8015b04 <RegionEU868TxConfig+0x19c>)
 80159ec:	68da      	ldr	r2, [r3, #12]
 80159ee:	4b43      	ldr	r3, [pc, #268]	; (8015afc <RegionEU868TxConfig+0x194>)
 80159f0:	6819      	ldr	r1, [r3, #0]
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	4618      	mov	r0, r3
 80159f8:	4603      	mov	r3, r0
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	4403      	add	r3, r0
 80159fe:	009b      	lsls	r3, r3, #2
 8015a00:	440b      	add	r3, r1
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	4618      	mov	r0, r3
 8015a06:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a0e:	2b07      	cmp	r3, #7
 8015a10:	d124      	bne.n	8015a5c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015a12:	2300      	movs	r3, #0
 8015a14:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015a16:	4b3b      	ldr	r3, [pc, #236]	; (8015b04 <RegionEU868TxConfig+0x19c>)
 8015a18:	69dc      	ldr	r4, [r3, #28]
 8015a1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a22:	fb02 f303 	mul.w	r3, r2, r3
 8015a26:	461a      	mov	r2, r3
 8015a28:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a2c:	7ff8      	ldrb	r0, [r7, #31]
 8015a2e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015a32:	9308      	str	r3, [sp, #32]
 8015a34:	2300      	movs	r3, #0
 8015a36:	9307      	str	r3, [sp, #28]
 8015a38:	2300      	movs	r3, #0
 8015a3a:	9306      	str	r3, [sp, #24]
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	9305      	str	r3, [sp, #20]
 8015a40:	2301      	movs	r3, #1
 8015a42:	9304      	str	r3, [sp, #16]
 8015a44:	2300      	movs	r3, #0
 8015a46:	9303      	str	r3, [sp, #12]
 8015a48:	2305      	movs	r3, #5
 8015a4a:	9302      	str	r3, [sp, #8]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	9301      	str	r3, [sp, #4]
 8015a50:	9200      	str	r2, [sp, #0]
 8015a52:	69bb      	ldr	r3, [r7, #24]
 8015a54:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015a58:	47a0      	blx	r4
 8015a5a:	e01d      	b.n	8015a98 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015a60:	4b28      	ldr	r3, [pc, #160]	; (8015b04 <RegionEU868TxConfig+0x19c>)
 8015a62:	69dc      	ldr	r4, [r3, #28]
 8015a64:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a68:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a6c:	7ff8      	ldrb	r0, [r7, #31]
 8015a6e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015a72:	9208      	str	r2, [sp, #32]
 8015a74:	2200      	movs	r2, #0
 8015a76:	9207      	str	r2, [sp, #28]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	9206      	str	r2, [sp, #24]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	9205      	str	r2, [sp, #20]
 8015a80:	2201      	movs	r2, #1
 8015a82:	9204      	str	r2, [sp, #16]
 8015a84:	2200      	movs	r2, #0
 8015a86:	9203      	str	r2, [sp, #12]
 8015a88:	2208      	movs	r2, #8
 8015a8a:	9202      	str	r2, [sp, #8]
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	9201      	str	r2, [sp, #4]
 8015a90:	9300      	str	r3, [sp, #0]
 8015a92:	69bb      	ldr	r3, [r7, #24]
 8015a94:	2200      	movs	r2, #0
 8015a96:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015a98:	4b18      	ldr	r3, [pc, #96]	; (8015afc <RegionEU868TxConfig+0x194>)
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	440b      	add	r3, r1
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4610      	mov	r0, r2
 8015ab8:	f7ff fa2e 	bl	8014f18 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	899b      	ldrh	r3, [r3, #12]
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	4610      	mov	r0, r2
 8015aca:	f7ff faa7 	bl	801501c <GetTimeOnAir>
 8015ace:	4602      	mov	r2, r0
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015ad4:	4b0b      	ldr	r3, [pc, #44]	; (8015b04 <RegionEU868TxConfig+0x19c>)
 8015ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ad8:	68fa      	ldr	r2, [r7, #12]
 8015ada:	8992      	ldrh	r2, [r2, #12]
 8015adc:	b2d1      	uxtb	r1, r2
 8015ade:	7ffa      	ldrb	r2, [r7, #31]
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	7f7a      	ldrb	r2, [r7, #29]
 8015ae8:	701a      	strb	r2, [r3, #0]
    return true;
 8015aea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3724      	adds	r7, #36	; 0x24
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd90      	pop	{r4, r7, pc}
 8015af4:	08020754 	.word	0x08020754
 8015af8:	20001b5c 	.word	0x20001b5c
 8015afc:	20001b60 	.word	0x20001b60
 8015b00:	0802075c 	.word	0x0802075c
 8015b04:	0802078c 	.word	0x0802078c

08015b08 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015b08:	b590      	push	{r4, r7, lr}
 8015b0a:	b093      	sub	sp, #76	; 0x4c
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	607a      	str	r2, [r7, #4]
 8015b14:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015b16:	2307      	movs	r3, #7
 8015b18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015b1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b20:	2200      	movs	r2, #0
 8015b22:	601a      	str	r2, [r3, #0]
 8015b24:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015b26:	2300      	movs	r3, #0
 8015b28:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015b32:	2300      	movs	r3, #0
 8015b34:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b36:	e085      	b.n	8015c44 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	685a      	ldr	r2, [r3, #4]
 8015b3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015b40:	4413      	add	r3, r2
 8015b42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015b46:	4611      	mov	r1, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fe fe61 	bl	8014810 <RegionCommonParseLinkAdrReq>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015b54:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d07b      	beq.n	8015c54 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015b5c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015b60:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b64:	4413      	add	r3, r2
 8015b66:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015b6a:	2307      	movs	r3, #7
 8015b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015b74:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015b76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d109      	bne.n	8015b92 <RegionEU868LinkAdrReq+0x8a>
 8015b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d106      	bne.n	8015b92 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b88:	f023 0301 	bic.w	r3, r3, #1
 8015b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015b90:	e058      	b.n	8015c44 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015b92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d003      	beq.n	8015ba2 <RegionEU868LinkAdrReq+0x9a>
 8015b9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b9e:	2b05      	cmp	r3, #5
 8015ba0:	d903      	bls.n	8015baa <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ba6:	2b06      	cmp	r3, #6
 8015ba8:	d906      	bls.n	8015bb8 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015baa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015bae:	f023 0301 	bic.w	r3, r3, #1
 8015bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015bb6:	e045      	b.n	8015c44 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015bb8:	2300      	movs	r3, #0
 8015bba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015bbe:	e03d      	b.n	8015c3c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015bc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bc4:	2b06      	cmp	r3, #6
 8015bc6:	d118      	bne.n	8015bfa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015bc8:	4b5f      	ldr	r3, [pc, #380]	; (8015d48 <RegionEU868LinkAdrReq+0x240>)
 8015bca:	6819      	ldr	r1, [r3, #0]
 8015bcc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	005b      	lsls	r3, r3, #1
 8015bd4:	4413      	add	r3, r2
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	440b      	add	r3, r1
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d028      	beq.n	8015c32 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015be0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015be4:	2201      	movs	r2, #1
 8015be6:	fa02 f303 	lsl.w	r3, r2, r3
 8015bea:	b21a      	sxth	r2, r3
 8015bec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bee:	b21b      	sxth	r3, r3
 8015bf0:	4313      	orrs	r3, r2
 8015bf2:	b21b      	sxth	r3, r3
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015bf8:	e01b      	b.n	8015c32 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015bfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bfc:	461a      	mov	r2, r3
 8015bfe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c02:	fa42 f303 	asr.w	r3, r2, r3
 8015c06:	f003 0301 	and.w	r3, r3, #1
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d011      	beq.n	8015c32 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015c0e:	4b4e      	ldr	r3, [pc, #312]	; (8015d48 <RegionEU868LinkAdrReq+0x240>)
 8015c10:	6819      	ldr	r1, [r3, #0]
 8015c12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c16:	4613      	mov	r3, r2
 8015c18:	005b      	lsls	r3, r3, #1
 8015c1a:	4413      	add	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	440b      	add	r3, r1
 8015c20:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d105      	bne.n	8015c32 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015c26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c2a:	f023 0301 	bic.w	r3, r3, #1
 8015c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c32:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c36:	3301      	adds	r3, #1
 8015c38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c40:	2b0f      	cmp	r3, #15
 8015c42:	d9bd      	bls.n	8015bc0 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	7a1b      	ldrb	r3, [r3, #8]
 8015c48:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	f4ff af73 	bcc.w	8015b38 <RegionEU868LinkAdrReq+0x30>
 8015c52:	e000      	b.n	8015c56 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015c54:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015c56:	2302      	movs	r3, #2
 8015c58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	7a5b      	ldrb	r3, [r3, #9]
 8015c60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7ff fa27 	bl	80150bc <RegionEU868GetPhyParam>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015c72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c76:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	7a9b      	ldrb	r3, [r3, #10]
 8015c7c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015c7e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015c82:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015c84:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015c88:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015c8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015c8e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015c96:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015c9e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	7b5b      	ldrb	r3, [r3, #13]
 8015ca4:	b25b      	sxtb	r3, r3
 8015ca6:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015ca8:	2310      	movs	r3, #16
 8015caa:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015cac:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015cb0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	b25b      	sxtb	r3, r3
 8015cb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015cba:	2307      	movs	r3, #7
 8015cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015cc0:	4b21      	ldr	r3, [pc, #132]	; (8015d48 <RegionEU868LinkAdrReq+0x240>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015cc6:	2307      	movs	r3, #7
 8015cc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015cd8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015ce0:	1c9a      	adds	r2, r3, #2
 8015ce2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015ce6:	1c59      	adds	r1, r3, #1
 8015ce8:	f107 0010 	add.w	r0, r7, #16
 8015cec:	4623      	mov	r3, r4
 8015cee:	f7fe fde0 	bl	80148b2 <RegionCommonLinkAdrReqVerifyParams>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015cf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cfc:	2b07      	cmp	r3, #7
 8015cfe:	d10c      	bne.n	8015d1a <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015d00:	4b11      	ldr	r3, [pc, #68]	; (8015d48 <RegionEU868LinkAdrReq+0x240>)
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	33c0      	adds	r3, #192	; 0xc0
 8015d06:	2202      	movs	r2, #2
 8015d08:	2100      	movs	r1, #0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f000 fb7a 	bl	8016404 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015d10:	4b0d      	ldr	r3, [pc, #52]	; (8015d48 <RegionEU868LinkAdrReq+0x240>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d16:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015d1a:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015d22:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015d2a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d34:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015d38:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015d3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	374c      	adds	r7, #76	; 0x4c
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd90      	pop	{r4, r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20001b60 	.word	0x20001b60

08015d4c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015d54:	2307      	movs	r3, #7
 8015d56:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	f107 020e 	add.w	r2, r7, #14
 8015d64:	4611      	mov	r1, r2
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7ff f8e2 	bl	8014f30 <VerifyRfFreq>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	f083 0301 	eor.w	r3, r3, #1
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d003      	beq.n	8015d80 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015d78:	7bfb      	ldrb	r3, [r7, #15]
 8015d7a:	f023 0301 	bic.w	r3, r3, #1
 8015d7e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f993 3000 	ldrsb.w	r3, [r3]
 8015d86:	2207      	movs	r2, #7
 8015d88:	2100      	movs	r1, #0
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fe fb7f 	bl	801448e <RegionCommonValueInRange>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d103      	bne.n	8015d9e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015d96:	7bfb      	ldrb	r3, [r7, #15]
 8015d98:	f023 0302 	bic.w	r3, r3, #2
 8015d9c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015da4:	2205      	movs	r2, #5
 8015da6:	2100      	movs	r1, #0
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7fe fb70 	bl	801448e <RegionCommonValueInRange>
 8015dae:	4603      	mov	r3, r0
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d103      	bne.n	8015dbc <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015db4:	7bfb      	ldrb	r3, [r7, #15]
 8015db6:	f023 0304 	bic.w	r3, r3, #4
 8015dba:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
	...

08015dc8 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b086      	sub	sp, #24
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015dd0:	2303      	movs	r3, #3
 8015dd2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d114      	bne.n	8015e08 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015de4:	b2db      	uxtb	r3, r3
 8015de6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015de8:	f107 0308 	add.w	r3, r7, #8
 8015dec:	4618      	mov	r0, r3
 8015dee:	f000 f9f7 	bl	80161e0 <RegionEU868ChannelsRemove>
 8015df2:	4603      	mov	r3, r0
 8015df4:	f083 0301 	eor.w	r3, r3, #1
 8015df8:	b2db      	uxtb	r3, r3
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d03b      	beq.n	8015e76 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015dfe:	7dfb      	ldrb	r3, [r7, #23]
 8015e00:	f023 0303 	bic.w	r3, r3, #3
 8015e04:	75fb      	strb	r3, [r7, #23]
 8015e06:	e036      	b.n	8015e76 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015e18:	f107 030c 	add.w	r3, r7, #12
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f000 f93d 	bl	801609c <RegionEU868ChannelAdd>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b06      	cmp	r3, #6
 8015e26:	d820      	bhi.n	8015e6a <RegionEU868NewChannelReq+0xa2>
 8015e28:	a201      	add	r2, pc, #4	; (adr r2, 8015e30 <RegionEU868NewChannelReq+0x68>)
 8015e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e2e:	bf00      	nop
 8015e30:	08015e75 	.word	0x08015e75
 8015e34:	08015e6b 	.word	0x08015e6b
 8015e38:	08015e6b 	.word	0x08015e6b
 8015e3c:	08015e6b 	.word	0x08015e6b
 8015e40:	08015e4d 	.word	0x08015e4d
 8015e44:	08015e57 	.word	0x08015e57
 8015e48:	08015e61 	.word	0x08015e61
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015e4c:	7dfb      	ldrb	r3, [r7, #23]
 8015e4e:	f023 0301 	bic.w	r3, r3, #1
 8015e52:	75fb      	strb	r3, [r7, #23]
                break;
 8015e54:	e00f      	b.n	8015e76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015e56:	7dfb      	ldrb	r3, [r7, #23]
 8015e58:	f023 0302 	bic.w	r3, r3, #2
 8015e5c:	75fb      	strb	r3, [r7, #23]
                break;
 8015e5e:	e00a      	b.n	8015e76 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015e60:	7dfb      	ldrb	r3, [r7, #23]
 8015e62:	f023 0303 	bic.w	r3, r3, #3
 8015e66:	75fb      	strb	r3, [r7, #23]
                break;
 8015e68:	e005      	b.n	8015e76 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015e6a:	7dfb      	ldrb	r3, [r7, #23]
 8015e6c:	f023 0303 	bic.w	r3, r3, #3
 8015e70:	75fb      	strb	r3, [r7, #23]
                break;
 8015e72:	e000      	b.n	8015e76 <RegionEU868NewChannelReq+0xae>
                break;
 8015e74:	bf00      	nop
            }
        }
    }

    return status;
 8015e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3718      	adds	r7, #24
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop

08015e84 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e84:	b480      	push	{r7}
 8015e86:	b083      	sub	sp, #12
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	370c      	adds	r7, #12
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bc80      	pop	{r7}
 8015e98:	4770      	bx	lr
	...

08015e9c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b084      	sub	sp, #16
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015ea4:	2303      	movs	r3, #3
 8015ea6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	f107 020e 	add.w	r2, r7, #14
 8015eb4:	4611      	mov	r1, r2
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7ff f83a 	bl	8014f30 <VerifyRfFreq>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	f083 0301 	eor.w	r3, r3, #1
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d003      	beq.n	8015ed0 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015ec8:	7bfb      	ldrb	r3, [r7, #15]
 8015eca:	f023 0301 	bic.w	r3, r3, #1
 8015ece:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015ed0:	4b13      	ldr	r3, [pc, #76]	; (8015f20 <RegionEU868DlChannelReq+0x84>)
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	4619      	mov	r1, r3
 8015eda:	460b      	mov	r3, r1
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	440b      	add	r3, r1
 8015ee0:	009b      	lsls	r3, r3, #2
 8015ee2:	4413      	add	r3, r2
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d103      	bne.n	8015ef2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015eea:	7bfb      	ldrb	r3, [r7, #15]
 8015eec:	f023 0302 	bic.w	r3, r3, #2
 8015ef0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015ef2:	7bfb      	ldrb	r3, [r7, #15]
 8015ef4:	2b03      	cmp	r3, #3
 8015ef6:	d10d      	bne.n	8015f14 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015ef8:	4b09      	ldr	r3, [pc, #36]	; (8015f20 <RegionEU868DlChannelReq+0x84>)
 8015efa:	6819      	ldr	r1, [r3, #0]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	781b      	ldrb	r3, [r3, #0]
 8015f00:	4618      	mov	r0, r3
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	685a      	ldr	r2, [r3, #4]
 8015f06:	4603      	mov	r3, r0
 8015f08:	005b      	lsls	r3, r3, #1
 8015f0a:	4403      	add	r3, r0
 8015f0c:	009b      	lsls	r3, r3, #2
 8015f0e:	440b      	add	r3, r1
 8015f10:	3304      	adds	r3, #4
 8015f12:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f18:	4618      	mov	r0, r3
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}
 8015f20:	20001b60 	.word	0x20001b60

08015f24 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015f24:	b480      	push	{r7}
 8015f26:	b083      	sub	sp, #12
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	460a      	mov	r2, r1
 8015f2e:	71fb      	strb	r3, [r7, #7]
 8015f30:	4613      	mov	r3, r2
 8015f32:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	370c      	adds	r7, #12
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bc80      	pop	{r7}
 8015f40:	4770      	bx	lr
	...

08015f44 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b09a      	sub	sp, #104	; 0x68
 8015f48:	af02      	add	r7, sp, #8
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	607a      	str	r2, [r7, #4]
 8015f50:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015f5e:	2300      	movs	r3, #0
 8015f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f66:	2200      	movs	r2, #0
 8015f68:	601a      	str	r2, [r3, #0]
 8015f6a:	605a      	str	r2, [r3, #4]
 8015f6c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015f6e:	230c      	movs	r3, #12
 8015f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015f74:	2307      	movs	r3, #7
 8015f76:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015f78:	4b46      	ldr	r3, [pc, #280]	; (8016094 <RegionEU868NextChannel+0x150>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	33c0      	adds	r3, #192	; 0xc0
 8015f7e:	2201      	movs	r2, #1
 8015f80:	2100      	movs	r1, #0
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fe fad4 	bl	8014530 <RegionCommonCountChannels>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d10a      	bne.n	8015fa4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015f8e:	4b41      	ldr	r3, [pc, #260]	; (8016094 <RegionEU868NextChannel+0x150>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015f96:	4b3f      	ldr	r3, [pc, #252]	; (8016094 <RegionEU868NextChannel+0x150>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f042 0207 	orr.w	r2, r2, #7
 8015f9e:	b292      	uxth	r2, r2
 8015fa0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	7a5b      	ldrb	r3, [r3, #9]
 8015fa8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015fb4:	4b37      	ldr	r3, [pc, #220]	; (8016094 <RegionEU868NextChannel+0x150>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	33c0      	adds	r3, #192	; 0xc0
 8015fba:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015fbc:	4b35      	ldr	r3, [pc, #212]	; (8016094 <RegionEU868NextChannel+0x150>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015fc2:	4b35      	ldr	r3, [pc, #212]	; (8016098 <RegionEU868NextChannel+0x154>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015fc8:	2310      	movs	r3, #16
 8015fca:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015fcc:	f107 0312 	add.w	r3, r7, #18
 8015fd0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	7a9b      	ldrb	r3, [r3, #10]
 8015fe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015fe6:	2306      	movs	r3, #6
 8015fe8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015fec:	68fa      	ldr	r2, [r7, #12]
 8015fee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ff2:	320c      	adds	r2, #12
 8015ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ff8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	7d1b      	ldrb	r3, [r3, #20]
 8016000:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	8adb      	ldrh	r3, [r3, #22]
 801600e:	4619      	mov	r1, r3
 8016010:	4610      	mov	r0, r2
 8016012:	f7ff f803 	bl	801501c <GetTimeOnAir>
 8016016:	4603      	mov	r3, r0
 8016018:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801601a:	f107 0314 	add.w	r3, r7, #20
 801601e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016020:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016024:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016028:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	9301      	str	r3, [sp, #4]
 8016030:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	460b      	mov	r3, r1
 8016038:	6839      	ldr	r1, [r7, #0]
 801603a:	f7fe fe80 	bl	8014d3e <RegionCommonIdentifyChannels>
 801603e:	4603      	mov	r3, r0
 8016040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016048:	2b00      	cmp	r3, #0
 801604a:	d10e      	bne.n	801606a <RegionEU868NextChannel+0x126>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801604c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016050:	3b01      	subs	r3, #1
 8016052:	4619      	mov	r1, r3
 8016054:	2000      	movs	r0, #0
 8016056:	f000 f983 	bl	8016360 <randr>
 801605a:	4603      	mov	r3, r0
 801605c:	3360      	adds	r3, #96	; 0x60
 801605e:	443b      	add	r3, r7
 8016060:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	701a      	strb	r2, [r3, #0]
 8016068:	e00e      	b.n	8016088 <RegionEU868NextChannel+0x144>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801606a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801606e:	2b0c      	cmp	r3, #12
 8016070:	d10a      	bne.n	8016088 <RegionEU868NextChannel+0x144>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016072:	4b08      	ldr	r3, [pc, #32]	; (8016094 <RegionEU868NextChannel+0x150>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 801607a:	4b06      	ldr	r3, [pc, #24]	; (8016094 <RegionEU868NextChannel+0x150>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f042 0207 	orr.w	r2, r2, #7
 8016082:	b292      	uxth	r2, r2
 8016084:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8016088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801608c:	4618      	mov	r0, r3
 801608e:	3760      	adds	r7, #96	; 0x60
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	20001b60 	.word	0x20001b60
 8016098:	20001b5c 	.word	0x20001b5c

0801609c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b084      	sub	sp, #16
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80160a4:	2300      	movs	r3, #0
 80160a6:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80160a8:	2300      	movs	r3, #0
 80160aa:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80160ac:	2300      	movs	r3, #0
 80160ae:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	791b      	ldrb	r3, [r3, #4]
 80160b4:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80160b6:	7b7b      	ldrb	r3, [r7, #13]
 80160b8:	2b02      	cmp	r3, #2
 80160ba:	d801      	bhi.n	80160c0 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80160bc:	2306      	movs	r3, #6
 80160be:	e089      	b.n	80161d4 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80160c0:	7b7b      	ldrb	r3, [r7, #13]
 80160c2:	2b0f      	cmp	r3, #15
 80160c4:	d901      	bls.n	80160ca <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80160c6:	2303      	movs	r3, #3
 80160c8:	e084      	b.n	80161d4 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	7a1b      	ldrb	r3, [r3, #8]
 80160d0:	f343 0303 	sbfx	r3, r3, #0, #4
 80160d4:	b25b      	sxtb	r3, r3
 80160d6:	2207      	movs	r2, #7
 80160d8:	2100      	movs	r1, #0
 80160da:	4618      	mov	r0, r3
 80160dc:	f7fe f9d7 	bl	801448e <RegionCommonValueInRange>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80160e6:	2301      	movs	r3, #1
 80160e8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	7a1b      	ldrb	r3, [r3, #8]
 80160f0:	f343 1303 	sbfx	r3, r3, #4, #4
 80160f4:	b25b      	sxtb	r3, r3
 80160f6:	2207      	movs	r2, #7
 80160f8:	2100      	movs	r1, #0
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7fe f9c7 	bl	801448e <RegionCommonValueInRange>
 8016100:	4603      	mov	r3, r0
 8016102:	2b00      	cmp	r3, #0
 8016104:	d101      	bne.n	801610a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016106:	2301      	movs	r3, #1
 8016108:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	7a1b      	ldrb	r3, [r3, #8]
 8016110:	f343 0303 	sbfx	r3, r3, #0, #4
 8016114:	b25a      	sxtb	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	7a1b      	ldrb	r3, [r3, #8]
 801611c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016120:	b25b      	sxtb	r3, r3
 8016122:	429a      	cmp	r2, r3
 8016124:	dd01      	ble.n	801612a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016126:	2301      	movs	r3, #1
 8016128:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801612a:	7bbb      	ldrb	r3, [r7, #14]
 801612c:	f083 0301 	eor.w	r3, r3, #1
 8016130:	b2db      	uxtb	r3, r3
 8016132:	2b00      	cmp	r3, #0
 8016134:	d010      	beq.n	8016158 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	f107 020c 	add.w	r2, r7, #12
 8016140:	4611      	mov	r1, r2
 8016142:	4618      	mov	r0, r3
 8016144:	f7fe fef4 	bl	8014f30 <VerifyRfFreq>
 8016148:	4603      	mov	r3, r0
 801614a:	f083 0301 	eor.w	r3, r3, #1
 801614e:	b2db      	uxtb	r3, r3
 8016150:	2b00      	cmp	r3, #0
 8016152:	d001      	beq.n	8016158 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016154:	2301      	movs	r3, #1
 8016156:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016158:	7bfb      	ldrb	r3, [r7, #15]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d004      	beq.n	8016168 <RegionEU868ChannelAdd+0xcc>
 801615e:	7bbb      	ldrb	r3, [r7, #14]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d001      	beq.n	8016168 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016164:	2306      	movs	r3, #6
 8016166:	e035      	b.n	80161d4 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016168:	7bfb      	ldrb	r3, [r7, #15]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d001      	beq.n	8016172 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801616e:	2305      	movs	r3, #5
 8016170:	e030      	b.n	80161d4 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016172:	7bbb      	ldrb	r3, [r7, #14]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d001      	beq.n	801617c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016178:	2304      	movs	r3, #4
 801617a:	e02b      	b.n	80161d4 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801617c:	4b17      	ldr	r3, [pc, #92]	; (80161dc <RegionEU868ChannelAdd+0x140>)
 801617e:	6819      	ldr	r1, [r3, #0]
 8016180:	7b7a      	ldrb	r2, [r7, #13]
 8016182:	4613      	mov	r3, r2
 8016184:	005b      	lsls	r3, r3, #1
 8016186:	4413      	add	r3, r2
 8016188:	009b      	lsls	r3, r3, #2
 801618a:	18c8      	adds	r0, r1, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	220c      	movs	r2, #12
 8016192:	4619      	mov	r1, r3
 8016194:	f000 f8fb 	bl	801638e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016198:	4b10      	ldr	r3, [pc, #64]	; (80161dc <RegionEU868ChannelAdd+0x140>)
 801619a:	6819      	ldr	r1, [r3, #0]
 801619c:	7b7a      	ldrb	r2, [r7, #13]
 801619e:	7b38      	ldrb	r0, [r7, #12]
 80161a0:	4613      	mov	r3, r2
 80161a2:	005b      	lsls	r3, r3, #1
 80161a4:	4413      	add	r3, r2
 80161a6:	009b      	lsls	r3, r3, #2
 80161a8:	440b      	add	r3, r1
 80161aa:	3309      	adds	r3, #9
 80161ac:	4602      	mov	r2, r0
 80161ae:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80161b0:	4b0a      	ldr	r3, [pc, #40]	; (80161dc <RegionEU868ChannelAdd+0x140>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80161b8:	b21a      	sxth	r2, r3
 80161ba:	7b7b      	ldrb	r3, [r7, #13]
 80161bc:	2101      	movs	r1, #1
 80161be:	fa01 f303 	lsl.w	r3, r1, r3
 80161c2:	b21b      	sxth	r3, r3
 80161c4:	4313      	orrs	r3, r2
 80161c6:	b21a      	sxth	r2, r3
 80161c8:	4b04      	ldr	r3, [pc, #16]	; (80161dc <RegionEU868ChannelAdd+0x140>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	b292      	uxth	r2, r2
 80161ce:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80161d2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3710      	adds	r7, #16
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	20001b60 	.word	0x20001b60

080161e0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b086      	sub	sp, #24
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	781b      	ldrb	r3, [r3, #0]
 80161ec:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80161ee:	7dfb      	ldrb	r3, [r7, #23]
 80161f0:	2b02      	cmp	r3, #2
 80161f2:	d801      	bhi.n	80161f8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80161f4:	2300      	movs	r3, #0
 80161f6:	e015      	b.n	8016224 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80161f8:	4b0c      	ldr	r3, [pc, #48]	; (801622c <RegionEU868ChannelsRemove+0x4c>)
 80161fa:	6819      	ldr	r1, [r3, #0]
 80161fc:	7dfa      	ldrb	r2, [r7, #23]
 80161fe:	4613      	mov	r3, r2
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	4413      	add	r3, r2
 8016204:	009b      	lsls	r3, r3, #2
 8016206:	440b      	add	r3, r1
 8016208:	461a      	mov	r2, r3
 801620a:	2300      	movs	r3, #0
 801620c:	6013      	str	r3, [r2, #0]
 801620e:	6053      	str	r3, [r2, #4]
 8016210:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016212:	4b06      	ldr	r3, [pc, #24]	; (801622c <RegionEU868ChannelsRemove+0x4c>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	33c0      	adds	r3, #192	; 0xc0
 8016218:	7df9      	ldrb	r1, [r7, #23]
 801621a:	2210      	movs	r2, #16
 801621c:	4618      	mov	r0, r3
 801621e:	f7fe f953 	bl	80144c8 <RegionCommonChanDisable>
 8016222:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016224:	4618      	mov	r0, r3
 8016226:	3718      	adds	r7, #24
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	20001b60 	.word	0x20001b60

08016230 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016230:	b590      	push	{r4, r7, lr}
 8016232:	b085      	sub	sp, #20
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801623e:	4b20      	ldr	r3, [pc, #128]	; (80162c0 <RegionEU868SetContinuousWave+0x90>)
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	4b20      	ldr	r3, [pc, #128]	; (80162c4 <RegionEU868SetContinuousWave+0x94>)
 8016244:	6819      	ldr	r1, [r3, #0]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	461c      	mov	r4, r3
 801624c:	4623      	mov	r3, r4
 801624e:	005b      	lsls	r3, r3, #1
 8016250:	4423      	add	r3, r4
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	440b      	add	r3, r1
 8016256:	3309      	adds	r3, #9
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	4619      	mov	r1, r3
 801625c:	460b      	mov	r3, r1
 801625e:	005b      	lsls	r3, r3, #1
 8016260:	440b      	add	r3, r1
 8016262:	00db      	lsls	r3, r3, #3
 8016264:	4413      	add	r3, r2
 8016266:	3302      	adds	r3, #2
 8016268:	f993 3000 	ldrsb.w	r3, [r3]
 801626c:	4619      	mov	r1, r3
 801626e:	f7fe fe06 	bl	8014e7e <RegionCommonLimitTxPower>
 8016272:	4603      	mov	r3, r0
 8016274:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801627a:	4b12      	ldr	r3, [pc, #72]	; (80162c4 <RegionEU868SetContinuousWave+0x94>)
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	4619      	mov	r1, r3
 8016284:	460b      	mov	r3, r1
 8016286:	005b      	lsls	r3, r3, #1
 8016288:	440b      	add	r3, r1
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	4413      	add	r3, r2
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	6859      	ldr	r1, [r3, #4]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	689a      	ldr	r2, [r3, #8]
 801629a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801629e:	4618      	mov	r0, r3
 80162a0:	f7fe fc5e 	bl	8014b60 <RegionCommonComputeTxPower>
 80162a4:	4603      	mov	r3, r0
 80162a6:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80162a8:	4b07      	ldr	r3, [pc, #28]	; (80162c8 <RegionEU868SetContinuousWave+0x98>)
 80162aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	8992      	ldrh	r2, [r2, #12]
 80162b0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80162b4:	68b8      	ldr	r0, [r7, #8]
 80162b6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80162b8:	bf00      	nop
 80162ba:	3714      	adds	r7, #20
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd90      	pop	{r4, r7, pc}
 80162c0:	20001b5c 	.word	0x20001b5c
 80162c4:	20001b60 	.word	0x20001b60
 80162c8:	0802078c 	.word	0x0802078c

080162cc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80162cc:	b480      	push	{r7}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	4603      	mov	r3, r0
 80162d4:	71fb      	strb	r3, [r7, #7]
 80162d6:	460b      	mov	r3, r1
 80162d8:	71bb      	strb	r3, [r7, #6]
 80162da:	4613      	mov	r3, r2
 80162dc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80162de:	79ba      	ldrb	r2, [r7, #6]
 80162e0:	797b      	ldrb	r3, [r7, #5]
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80162e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	da01      	bge.n	80162f4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80162f0:	2300      	movs	r3, #0
 80162f2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3714      	adds	r7, #20
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bc80      	pop	{r7}
 80162fe:	4770      	bx	lr

08016300 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016300:	b480      	push	{r7}
 8016302:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016304:	4b0d      	ldr	r3, [pc, #52]	; (801633c <rand1+0x3c>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4a0d      	ldr	r2, [pc, #52]	; (8016340 <rand1+0x40>)
 801630a:	fb02 f303 	mul.w	r3, r2, r3
 801630e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016312:	3339      	adds	r3, #57	; 0x39
 8016314:	4a09      	ldr	r2, [pc, #36]	; (801633c <rand1+0x3c>)
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	4b08      	ldr	r3, [pc, #32]	; (801633c <rand1+0x3c>)
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	2303      	movs	r3, #3
 801631e:	fba3 1302 	umull	r1, r3, r3, r2
 8016322:	1ad1      	subs	r1, r2, r3
 8016324:	0849      	lsrs	r1, r1, #1
 8016326:	440b      	add	r3, r1
 8016328:	0f99      	lsrs	r1, r3, #30
 801632a:	460b      	mov	r3, r1
 801632c:	07db      	lsls	r3, r3, #31
 801632e:	1a5b      	subs	r3, r3, r1
 8016330:	1ad1      	subs	r1, r2, r3
 8016332:	460b      	mov	r3, r1
}
 8016334:	4618      	mov	r0, r3
 8016336:	46bd      	mov	sp, r7
 8016338:	bc80      	pop	{r7}
 801633a:	4770      	bx	lr
 801633c:	200000d8 	.word	0x200000d8
 8016340:	41c64e6d 	.word	0x41c64e6d

08016344 <srand1>:

void srand1( uint32_t seed )
{
 8016344:	b480      	push	{r7}
 8016346:	b083      	sub	sp, #12
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
    next = seed;
 801634c:	4a03      	ldr	r2, [pc, #12]	; (801635c <srand1+0x18>)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6013      	str	r3, [r2, #0]
}
 8016352:	bf00      	nop
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	bc80      	pop	{r7}
 801635a:	4770      	bx	lr
 801635c:	200000d8 	.word	0x200000d8

08016360 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801636a:	f7ff ffc9 	bl	8016300 <rand1>
 801636e:	4602      	mov	r2, r0
 8016370:	6839      	ldr	r1, [r7, #0]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	1acb      	subs	r3, r1, r3
 8016376:	3301      	adds	r3, #1
 8016378:	fb92 f1f3 	sdiv	r1, r2, r3
 801637c:	fb01 f303 	mul.w	r3, r1, r3
 8016380:	1ad2      	subs	r2, r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	4413      	add	r3, r2
}
 8016386:	4618      	mov	r0, r3
 8016388:	3708      	adds	r7, #8
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}

0801638e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801638e:	b480      	push	{r7}
 8016390:	b085      	sub	sp, #20
 8016392:	af00      	add	r7, sp, #0
 8016394:	60f8      	str	r0, [r7, #12]
 8016396:	60b9      	str	r1, [r7, #8]
 8016398:	4613      	mov	r3, r2
 801639a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801639c:	e007      	b.n	80163ae <memcpy1+0x20>
    {
        *dst++ = *src++;
 801639e:	68ba      	ldr	r2, [r7, #8]
 80163a0:	1c53      	adds	r3, r2, #1
 80163a2:	60bb      	str	r3, [r7, #8]
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	1c59      	adds	r1, r3, #1
 80163a8:	60f9      	str	r1, [r7, #12]
 80163aa:	7812      	ldrb	r2, [r2, #0]
 80163ac:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80163ae:	88fb      	ldrh	r3, [r7, #6]
 80163b0:	1e5a      	subs	r2, r3, #1
 80163b2:	80fa      	strh	r2, [r7, #6]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d1f2      	bne.n	801639e <memcpy1+0x10>
    }
}
 80163b8:	bf00      	nop
 80163ba:	bf00      	nop
 80163bc:	3714      	adds	r7, #20
 80163be:	46bd      	mov	sp, r7
 80163c0:	bc80      	pop	{r7}
 80163c2:	4770      	bx	lr

080163c4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80163c4:	b480      	push	{r7}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	4613      	mov	r3, r2
 80163d0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80163d2:	88fb      	ldrh	r3, [r7, #6]
 80163d4:	3b01      	subs	r3, #1
 80163d6:	68fa      	ldr	r2, [r7, #12]
 80163d8:	4413      	add	r3, r2
 80163da:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80163dc:	e007      	b.n	80163ee <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80163de:	68ba      	ldr	r2, [r7, #8]
 80163e0:	1c53      	adds	r3, r2, #1
 80163e2:	60bb      	str	r3, [r7, #8]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	1e59      	subs	r1, r3, #1
 80163e8:	60f9      	str	r1, [r7, #12]
 80163ea:	7812      	ldrb	r2, [r2, #0]
 80163ec:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80163ee:	88fb      	ldrh	r3, [r7, #6]
 80163f0:	1e5a      	subs	r2, r3, #1
 80163f2:	80fa      	strh	r2, [r7, #6]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1f2      	bne.n	80163de <memcpyr+0x1a>
    }
}
 80163f8:	bf00      	nop
 80163fa:	bf00      	nop
 80163fc:	3714      	adds	r7, #20
 80163fe:	46bd      	mov	sp, r7
 8016400:	bc80      	pop	{r7}
 8016402:	4770      	bx	lr

08016404 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	460b      	mov	r3, r1
 801640e:	70fb      	strb	r3, [r7, #3]
 8016410:	4613      	mov	r3, r2
 8016412:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016414:	e004      	b.n	8016420 <memset1+0x1c>
    {
        *dst++ = value;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	1c5a      	adds	r2, r3, #1
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	78fa      	ldrb	r2, [r7, #3]
 801641e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016420:	883b      	ldrh	r3, [r7, #0]
 8016422:	1e5a      	subs	r2, r3, #1
 8016424:	803a      	strh	r2, [r7, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1f5      	bne.n	8016416 <memset1+0x12>
    }
}
 801642a:	bf00      	nop
 801642c:	bf00      	nop
 801642e:	370c      	adds	r7, #12
 8016430:	46bd      	mov	sp, r7
 8016432:	bc80      	pop	{r7}
 8016434:	4770      	bx	lr
	...

08016438 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016438:	b480      	push	{r7}
 801643a:	b087      	sub	sp, #28
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	460b      	mov	r3, r1
 8016442:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016444:	4b1a      	ldr	r3, [pc, #104]	; (80164b0 <Crc32+0x78>)
 8016446:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016448:	f04f 33ff 	mov.w	r3, #4294967295
 801644c:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d101      	bne.n	8016458 <Crc32+0x20>
    {
        return 0;
 8016454:	2300      	movs	r3, #0
 8016456:	e026      	b.n	80164a6 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016458:	2300      	movs	r3, #0
 801645a:	827b      	strh	r3, [r7, #18]
 801645c:	e01d      	b.n	801649a <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801645e:	8a7b      	ldrh	r3, [r7, #18]
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	4413      	add	r3, r2
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	461a      	mov	r2, r3
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	4053      	eors	r3, r2
 801646c:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801646e:	2300      	movs	r3, #0
 8016470:	823b      	strh	r3, [r7, #16]
 8016472:	e00c      	b.n	801648e <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	085a      	lsrs	r2, r3, #1
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	f003 0301 	and.w	r3, r3, #1
 801647e:	4259      	negs	r1, r3
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	400b      	ands	r3, r1
 8016484:	4053      	eors	r3, r2
 8016486:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016488:	8a3b      	ldrh	r3, [r7, #16]
 801648a:	3301      	adds	r3, #1
 801648c:	823b      	strh	r3, [r7, #16]
 801648e:	8a3b      	ldrh	r3, [r7, #16]
 8016490:	2b07      	cmp	r3, #7
 8016492:	d9ef      	bls.n	8016474 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8016494:	8a7b      	ldrh	r3, [r7, #18]
 8016496:	3301      	adds	r3, #1
 8016498:	827b      	strh	r3, [r7, #18]
 801649a:	8a7a      	ldrh	r2, [r7, #18]
 801649c:	887b      	ldrh	r3, [r7, #2]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d3dd      	bcc.n	801645e <Crc32+0x26>
        }
    }

    return ~crc;
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	43db      	mvns	r3, r3
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	371c      	adds	r7, #28
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bc80      	pop	{r7}
 80164ae:	4770      	bx	lr
 80164b0:	edb88320 	.word	0xedb88320

080164b4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af02      	add	r7, sp, #8
 80164ba:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80164bc:	4a21      	ldr	r2, [pc, #132]	; (8016544 <RadioInit+0x90>)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80164c2:	4b21      	ldr	r3, [pc, #132]	; (8016548 <RadioInit+0x94>)
 80164c4:	2200      	movs	r2, #0
 80164c6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80164c8:	4b1f      	ldr	r3, [pc, #124]	; (8016548 <RadioInit+0x94>)
 80164ca:	2200      	movs	r2, #0
 80164cc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80164ce:	4b1e      	ldr	r3, [pc, #120]	; (8016548 <RadioInit+0x94>)
 80164d0:	2200      	movs	r2, #0
 80164d2:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80164d4:	481d      	ldr	r0, [pc, #116]	; (801654c <RadioInit+0x98>)
 80164d6:	f001 fe7b 	bl	80181d0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80164da:	2000      	movs	r0, #0
 80164dc:	f001 f818 	bl	8017510 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80164e0:	f002 f90c 	bl	80186fc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80164e4:	2100      	movs	r1, #0
 80164e6:	2000      	movs	r0, #0
 80164e8:	f002 fc6c 	bl	8018dc4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80164ec:	2204      	movs	r2, #4
 80164ee:	2100      	movs	r1, #0
 80164f0:	2001      	movs	r0, #1
 80164f2:	f002 fa91 	bl	8018a18 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80164f6:	2300      	movs	r3, #0
 80164f8:	2200      	movs	r2, #0
 80164fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80164fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016502:	f002 f9c1 	bl	8018888 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016506:	f000 fe95 	bl	8017234 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801650a:	2300      	movs	r3, #0
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	4b10      	ldr	r3, [pc, #64]	; (8016550 <RadioInit+0x9c>)
 8016510:	2200      	movs	r2, #0
 8016512:	f04f 31ff 	mov.w	r1, #4294967295
 8016516:	480f      	ldr	r0, [pc, #60]	; (8016554 <RadioInit+0xa0>)
 8016518:	f003 fb44 	bl	8019ba4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801651c:	2300      	movs	r3, #0
 801651e:	9300      	str	r3, [sp, #0]
 8016520:	4b0d      	ldr	r3, [pc, #52]	; (8016558 <RadioInit+0xa4>)
 8016522:	2200      	movs	r2, #0
 8016524:	f04f 31ff 	mov.w	r1, #4294967295
 8016528:	480c      	ldr	r0, [pc, #48]	; (801655c <RadioInit+0xa8>)
 801652a:	f003 fb3b 	bl	8019ba4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801652e:	4809      	ldr	r0, [pc, #36]	; (8016554 <RadioInit+0xa0>)
 8016530:	f003 fbdc 	bl	8019cec <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016534:	4809      	ldr	r0, [pc, #36]	; (801655c <RadioInit+0xa8>)
 8016536:	f003 fbd9 	bl	8019cec <UTIL_TIMER_Stop>
}
 801653a:	bf00      	nop
 801653c:	3708      	adds	r7, #8
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	20001c64 	.word	0x20001c64
 8016548:	20001c68 	.word	0x20001c68
 801654c:	080175f5 	.word	0x080175f5
 8016550:	0801757d 	.word	0x0801757d
 8016554:	20001cc0 	.word	0x20001cc0
 8016558:	08017591 	.word	0x08017591
 801655c:	20001cd8 	.word	0x20001cd8

08016560 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016564:	f001 fe76 	bl	8018254 <SUBGRF_GetOperatingMode>
 8016568:	4603      	mov	r3, r0
 801656a:	2b07      	cmp	r3, #7
 801656c:	d00a      	beq.n	8016584 <RadioGetStatus+0x24>
 801656e:	2b07      	cmp	r3, #7
 8016570:	dc0a      	bgt.n	8016588 <RadioGetStatus+0x28>
 8016572:	2b04      	cmp	r3, #4
 8016574:	d002      	beq.n	801657c <RadioGetStatus+0x1c>
 8016576:	2b05      	cmp	r3, #5
 8016578:	d002      	beq.n	8016580 <RadioGetStatus+0x20>
 801657a:	e005      	b.n	8016588 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801657c:	2302      	movs	r3, #2
 801657e:	e004      	b.n	801658a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016580:	2301      	movs	r3, #1
 8016582:	e002      	b.n	801658a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016584:	2303      	movs	r3, #3
 8016586:	e000      	b.n	801658a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016588:	2300      	movs	r3, #0
    }
}
 801658a:	4618      	mov	r0, r3
 801658c:	bd80      	pop	{r7, pc}
	...

08016590 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	4603      	mov	r3, r0
 8016598:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801659a:	4a25      	ldr	r2, [pc, #148]	; (8016630 <RadioSetModem+0xa0>)
 801659c:	79fb      	ldrb	r3, [r7, #7]
 801659e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80165a0:	79fb      	ldrb	r3, [r7, #7]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f002 ffd1 	bl	801954a <RFW_SetRadioModem>
    switch( modem )
 80165a8:	79fb      	ldrb	r3, [r7, #7]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	2b03      	cmp	r3, #3
 80165ae:	d80b      	bhi.n	80165c8 <RadioSetModem+0x38>
 80165b0:	a201      	add	r2, pc, #4	; (adr r2, 80165b8 <RadioSetModem+0x28>)
 80165b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b6:	bf00      	nop
 80165b8:	080165d7 	.word	0x080165d7
 80165bc:	080165fd 	.word	0x080165fd
 80165c0:	0801660b 	.word	0x0801660b
 80165c4:	08016619 	.word	0x08016619
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80165c8:	2000      	movs	r0, #0
 80165ca:	f002 f9ff 	bl	80189cc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80165ce:	4b18      	ldr	r3, [pc, #96]	; (8016630 <RadioSetModem+0xa0>)
 80165d0:	2200      	movs	r2, #0
 80165d2:	735a      	strb	r2, [r3, #13]
        break;
 80165d4:	e028      	b.n	8016628 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80165d6:	2001      	movs	r0, #1
 80165d8:	f002 f9f8 	bl	80189cc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80165dc:	4b14      	ldr	r3, [pc, #80]	; (8016630 <RadioSetModem+0xa0>)
 80165de:	7b5a      	ldrb	r2, [r3, #13]
 80165e0:	4b13      	ldr	r3, [pc, #76]	; (8016630 <RadioSetModem+0xa0>)
 80165e2:	7b1b      	ldrb	r3, [r3, #12]
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d01e      	beq.n	8016626 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80165e8:	4b11      	ldr	r3, [pc, #68]	; (8016630 <RadioSetModem+0xa0>)
 80165ea:	7b1a      	ldrb	r2, [r3, #12]
 80165ec:	4b10      	ldr	r3, [pc, #64]	; (8016630 <RadioSetModem+0xa0>)
 80165ee:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80165f0:	4b0f      	ldr	r3, [pc, #60]	; (8016630 <RadioSetModem+0xa0>)
 80165f2:	7b5b      	ldrb	r3, [r3, #13]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f000 ff8b 	bl	8017510 <RadioSetPublicNetwork>
        }
        break;
 80165fa:	e014      	b.n	8016626 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80165fc:	2002      	movs	r0, #2
 80165fe:	f002 f9e5 	bl	80189cc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016602:	4b0b      	ldr	r3, [pc, #44]	; (8016630 <RadioSetModem+0xa0>)
 8016604:	2200      	movs	r2, #0
 8016606:	735a      	strb	r2, [r3, #13]
        break;
 8016608:	e00e      	b.n	8016628 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801660a:	2002      	movs	r0, #2
 801660c:	f002 f9de 	bl	80189cc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016610:	4b07      	ldr	r3, [pc, #28]	; (8016630 <RadioSetModem+0xa0>)
 8016612:	2200      	movs	r2, #0
 8016614:	735a      	strb	r2, [r3, #13]
        break;
 8016616:	e007      	b.n	8016628 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016618:	2000      	movs	r0, #0
 801661a:	f002 f9d7 	bl	80189cc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801661e:	4b04      	ldr	r3, [pc, #16]	; (8016630 <RadioSetModem+0xa0>)
 8016620:	2200      	movs	r2, #0
 8016622:	735a      	strb	r2, [r3, #13]
        break;
 8016624:	e000      	b.n	8016628 <RadioSetModem+0x98>
        break;
 8016626:	bf00      	nop
    }
}
 8016628:	bf00      	nop
 801662a:	3708      	adds	r7, #8
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}
 8016630:	20001c68 	.word	0x20001c68

08016634 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f002 f97f 	bl	8018940 <SUBGRF_SetRfFrequency>
}
 8016642:	bf00      	nop
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801664a:	b580      	push	{r7, lr}
 801664c:	b090      	sub	sp, #64	; 0x40
 801664e:	af0a      	add	r7, sp, #40	; 0x28
 8016650:	60f8      	str	r0, [r7, #12]
 8016652:	60b9      	str	r1, [r7, #8]
 8016654:	603b      	str	r3, [r7, #0]
 8016656:	4613      	mov	r3, r2
 8016658:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801665a:	2301      	movs	r3, #1
 801665c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801665e:	2300      	movs	r3, #0
 8016660:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016662:	2300      	movs	r3, #0
 8016664:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016666:	f000 fdf8 	bl	801725a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801666a:	2000      	movs	r0, #0
 801666c:	f7ff ff90 	bl	8016590 <RadioSetModem>

    RadioSetChannel( freq );
 8016670:	68f8      	ldr	r0, [r7, #12]
 8016672:	f7ff ffdf 	bl	8016634 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016676:	2301      	movs	r3, #1
 8016678:	9309      	str	r3, [sp, #36]	; 0x24
 801667a:	2300      	movs	r3, #0
 801667c:	9308      	str	r3, [sp, #32]
 801667e:	2300      	movs	r3, #0
 8016680:	9307      	str	r3, [sp, #28]
 8016682:	2300      	movs	r3, #0
 8016684:	9306      	str	r3, [sp, #24]
 8016686:	2300      	movs	r3, #0
 8016688:	9305      	str	r3, [sp, #20]
 801668a:	2300      	movs	r3, #0
 801668c:	9304      	str	r3, [sp, #16]
 801668e:	2300      	movs	r3, #0
 8016690:	9303      	str	r3, [sp, #12]
 8016692:	2300      	movs	r3, #0
 8016694:	9302      	str	r3, [sp, #8]
 8016696:	2303      	movs	r3, #3
 8016698:	9301      	str	r3, [sp, #4]
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	9300      	str	r3, [sp, #0]
 801669e:	2300      	movs	r3, #0
 80166a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80166a4:	68b9      	ldr	r1, [r7, #8]
 80166a6:	2000      	movs	r0, #0
 80166a8:	f000 f840 	bl	801672c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80166ac:	2000      	movs	r0, #0
 80166ae:	f000 fddb 	bl	8017268 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80166b2:	f000 ff5b 	bl	801756c <RadioGetWakeupTime>
 80166b6:	4603      	mov	r3, r0
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7ed f8e0 	bl	800387e <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80166be:	f003 fbaf 	bl	8019e20 <UTIL_TIMER_GetCurrentTime>
 80166c2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80166c4:	e00d      	b.n	80166e2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80166c6:	2000      	movs	r0, #0
 80166c8:	f000 fea0 	bl	801740c <RadioRssi>
 80166cc:	4603      	mov	r3, r0
 80166ce:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80166d0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80166d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80166d8:	429a      	cmp	r2, r3
 80166da:	dd02      	ble.n	80166e2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80166dc:	2300      	movs	r3, #0
 80166de:	75fb      	strb	r3, [r7, #23]
            break;
 80166e0:	e006      	b.n	80166f0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80166e2:	6938      	ldr	r0, [r7, #16]
 80166e4:	f003 fbae 	bl	8019e44 <UTIL_TIMER_GetElapsedTime>
 80166e8:	4602      	mov	r2, r0
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	4293      	cmp	r3, r2
 80166ee:	d8ea      	bhi.n	80166c6 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80166f0:	f000 fdb3 	bl	801725a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80166f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3718      	adds	r7, #24
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80166fe:	b580      	push	{r7, lr}
 8016700:	b082      	sub	sp, #8
 8016702:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016704:	2300      	movs	r3, #0
 8016706:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016708:	2001      	movs	r0, #1
 801670a:	f7ff ff41 	bl	8016590 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801670e:	2300      	movs	r3, #0
 8016710:	2200      	movs	r2, #0
 8016712:	2100      	movs	r1, #0
 8016714:	2000      	movs	r0, #0
 8016716:	f002 f8b7 	bl	8018888 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801671a:	f001 fe6c 	bl	80183f6 <SUBGRF_GetRandom>
 801671e:	6078      	str	r0, [r7, #4]

    return rnd;
 8016720:	687b      	ldr	r3, [r7, #4]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3708      	adds	r7, #8
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
	...

0801672c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b08a      	sub	sp, #40	; 0x28
 8016730:	af00      	add	r7, sp, #0
 8016732:	60b9      	str	r1, [r7, #8]
 8016734:	607a      	str	r2, [r7, #4]
 8016736:	461a      	mov	r2, r3
 8016738:	4603      	mov	r3, r0
 801673a:	73fb      	strb	r3, [r7, #15]
 801673c:	4613      	mov	r3, r2
 801673e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016740:	4abd      	ldr	r2, [pc, #756]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016742:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016746:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016748:	f002 febd 	bl	80194c6 <RFW_DeInit>
    if( rxContinuous == true )
 801674c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016750:	2b00      	cmp	r3, #0
 8016752:	d001      	beq.n	8016758 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016754:	2300      	movs	r3, #0
 8016756:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016758:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801675c:	2b00      	cmp	r3, #0
 801675e:	d004      	beq.n	801676a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016760:	4ab6      	ldr	r2, [pc, #728]	; (8016a3c <RadioSetRxConfig+0x310>)
 8016762:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016766:	7013      	strb	r3, [r2, #0]
 8016768:	e002      	b.n	8016770 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801676a:	4bb4      	ldr	r3, [pc, #720]	; (8016a3c <RadioSetRxConfig+0x310>)
 801676c:	22ff      	movs	r2, #255	; 0xff
 801676e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016770:	7bfb      	ldrb	r3, [r7, #15]
 8016772:	2b04      	cmp	r3, #4
 8016774:	d009      	beq.n	801678a <RadioSetRxConfig+0x5e>
 8016776:	2b04      	cmp	r3, #4
 8016778:	f300 81da 	bgt.w	8016b30 <RadioSetRxConfig+0x404>
 801677c:	2b00      	cmp	r3, #0
 801677e:	f000 80bf 	beq.w	8016900 <RadioSetRxConfig+0x1d4>
 8016782:	2b01      	cmp	r3, #1
 8016784:	f000 812c 	beq.w	80169e0 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016788:	e1d2      	b.n	8016b30 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801678a:	2001      	movs	r0, #1
 801678c:	f001 ff78 	bl	8018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016790:	4ba9      	ldr	r3, [pc, #676]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016792:	2200      	movs	r2, #0
 8016794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016798:	4aa7      	ldr	r2, [pc, #668]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801679e:	4ba6      	ldr	r3, [pc, #664]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167a0:	2209      	movs	r2, #9
 80167a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80167a6:	4ba4      	ldr	r3, [pc, #656]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80167ac:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80167ae:	68b8      	ldr	r0, [r7, #8]
 80167b0:	f002 fdbc 	bl	801932c <SUBGRF_GetFskBandwidthRegValue>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461a      	mov	r2, r3
 80167b8:	4b9f      	ldr	r3, [pc, #636]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80167be:	4b9e      	ldr	r3, [pc, #632]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167c0:	2200      	movs	r2, #0
 80167c2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80167c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	4b9b      	ldr	r3, [pc, #620]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167cc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80167ce:	4b9a      	ldr	r3, [pc, #616]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167d0:	2200      	movs	r2, #0
 80167d2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80167d4:	4b98      	ldr	r3, [pc, #608]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167d6:	2210      	movs	r2, #16
 80167d8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80167da:	4b97      	ldr	r3, [pc, #604]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167dc:	2200      	movs	r2, #0
 80167de:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80167e0:	4b95      	ldr	r3, [pc, #596]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80167e6:	4b95      	ldr	r3, [pc, #596]	; (8016a3c <RadioSetRxConfig+0x310>)
 80167e8:	781a      	ldrb	r2, [r3, #0]
 80167ea:	4b93      	ldr	r3, [pc, #588]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167ec:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80167ee:	4b92      	ldr	r3, [pc, #584]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167f0:	2201      	movs	r2, #1
 80167f2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80167f4:	4b90      	ldr	r3, [pc, #576]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80167f6:	2200      	movs	r2, #0
 80167f8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80167fa:	2004      	movs	r0, #4
 80167fc:	f7ff fec8 	bl	8016590 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016800:	488f      	ldr	r0, [pc, #572]	; (8016a40 <RadioSetRxConfig+0x314>)
 8016802:	f002 f96f 	bl	8018ae4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016806:	488f      	ldr	r0, [pc, #572]	; (8016a44 <RadioSetRxConfig+0x318>)
 8016808:	f002 fa3e 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801680c:	4a8e      	ldr	r2, [pc, #568]	; (8016a48 <RadioSetRxConfig+0x31c>)
 801680e:	f107 031c 	add.w	r3, r7, #28
 8016812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016816:	e883 0003 	stmia.w	r3, {r0, r1}
 801681a:	f107 031c 	add.w	r3, r7, #28
 801681e:	4618      	mov	r0, r3
 8016820:	f001 fd67 	bl	80182f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016824:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016828:	f001 fdb2 	bl	8018390 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 801682c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016830:	f000 fe0b 	bl	801744a <RadioRead>
 8016834:	4603      	mov	r3, r0
 8016836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801683a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801683e:	f023 0310 	bic.w	r3, r3, #16
 8016842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801684a:	4619      	mov	r1, r3
 801684c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016850:	f000 fde9 	bl	8017426 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016854:	2104      	movs	r1, #4
 8016856:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801685a:	f000 fde4 	bl	8017426 <RadioWrite>
            modReg= RadioRead(0x89b);
 801685e:	f640 009b 	movw	r0, #2203	; 0x89b
 8016862:	f000 fdf2 	bl	801744a <RadioRead>
 8016866:	4603      	mov	r3, r0
 8016868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801686c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016870:	f023 031c 	bic.w	r3, r3, #28
 8016874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801687c:	f043 0308 	orr.w	r3, r3, #8
 8016880:	b2db      	uxtb	r3, r3
 8016882:	4619      	mov	r1, r3
 8016884:	f640 009b 	movw	r0, #2203	; 0x89b
 8016888:	f000 fdcd 	bl	8017426 <RadioWrite>
            modReg= RadioRead(0x6d1);
 801688c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016890:	f000 fddb 	bl	801744a <RadioRead>
 8016894:	4603      	mov	r3, r0
 8016896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801689a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801689e:	f023 0318 	bic.w	r3, r3, #24
 80168a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80168a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168aa:	f043 0318 	orr.w	r3, r3, #24
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	4619      	mov	r1, r3
 80168b2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80168b6:	f000 fdb6 	bl	8017426 <RadioWrite>
            modReg= RadioRead(0x6ac);
 80168ba:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80168be:	f000 fdc4 	bl	801744a <RadioRead>
 80168c2:	4603      	mov	r3, r0
 80168c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80168c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80168d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80168d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168d8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80168dc:	b2db      	uxtb	r3, r3
 80168de:	4619      	mov	r1, r3
 80168e0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80168e4:	f000 fd9f 	bl	8017426 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80168e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80168ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80168ee:	fb02 f303 	mul.w	r3, r2, r3
 80168f2:	461a      	mov	r2, r3
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80168fa:	4a4f      	ldr	r2, [pc, #316]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80168fc:	6093      	str	r3, [r2, #8]
            break;
 80168fe:	e118      	b.n	8016b32 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016900:	2000      	movs	r0, #0
 8016902:	f001 febd 	bl	8018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016906:	4b4c      	ldr	r3, [pc, #304]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016908:	2200      	movs	r2, #0
 801690a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801690e:	4a4a      	ldr	r2, [pc, #296]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016914:	4b48      	ldr	r3, [pc, #288]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016916:	220b      	movs	r2, #11
 8016918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801691c:	68b8      	ldr	r0, [r7, #8]
 801691e:	f002 fd05 	bl	801932c <SUBGRF_GetFskBandwidthRegValue>
 8016922:	4603      	mov	r3, r0
 8016924:	461a      	mov	r2, r3
 8016926:	4b44      	ldr	r3, [pc, #272]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801692c:	4b42      	ldr	r3, [pc, #264]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801692e:	2200      	movs	r2, #0
 8016930:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016932:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	b29a      	uxth	r2, r3
 8016938:	4b3f      	ldr	r3, [pc, #252]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801693a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801693c:	4b3e      	ldr	r3, [pc, #248]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801693e:	2204      	movs	r2, #4
 8016940:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016942:	4b3d      	ldr	r3, [pc, #244]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016944:	2218      	movs	r2, #24
 8016946:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016948:	4b3b      	ldr	r3, [pc, #236]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801694a:	2200      	movs	r2, #0
 801694c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801694e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016952:	f083 0301 	eor.w	r3, r3, #1
 8016956:	b2db      	uxtb	r3, r3
 8016958:	461a      	mov	r2, r3
 801695a:	4b37      	ldr	r3, [pc, #220]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801695c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801695e:	4b37      	ldr	r3, [pc, #220]	; (8016a3c <RadioSetRxConfig+0x310>)
 8016960:	781a      	ldrb	r2, [r3, #0]
 8016962:	4b35      	ldr	r3, [pc, #212]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016964:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016966:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801696a:	2b00      	cmp	r3, #0
 801696c:	d003      	beq.n	8016976 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801696e:	4b32      	ldr	r3, [pc, #200]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016970:	22f2      	movs	r2, #242	; 0xf2
 8016972:	75da      	strb	r2, [r3, #23]
 8016974:	e002      	b.n	801697c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016976:	4b30      	ldr	r3, [pc, #192]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016978:	2201      	movs	r2, #1
 801697a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801697c:	4b2e      	ldr	r3, [pc, #184]	; (8016a38 <RadioSetRxConfig+0x30c>)
 801697e:	2201      	movs	r2, #1
 8016980:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016982:	f000 fc6a 	bl	801725a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016986:	4b2c      	ldr	r3, [pc, #176]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801698c:	2b00      	cmp	r3, #0
 801698e:	bf14      	ite	ne
 8016990:	2301      	movne	r3, #1
 8016992:	2300      	moveq	r3, #0
 8016994:	b2db      	uxtb	r3, r3
 8016996:	4618      	mov	r0, r3
 8016998:	f7ff fdfa 	bl	8016590 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801699c:	4828      	ldr	r0, [pc, #160]	; (8016a40 <RadioSetRxConfig+0x314>)
 801699e:	f002 f8a1 	bl	8018ae4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80169a2:	4828      	ldr	r0, [pc, #160]	; (8016a44 <RadioSetRxConfig+0x318>)
 80169a4:	f002 f970 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80169a8:	4a28      	ldr	r2, [pc, #160]	; (8016a4c <RadioSetRxConfig+0x320>)
 80169aa:	f107 0314 	add.w	r3, r7, #20
 80169ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80169b6:	f107 0314 	add.w	r3, r7, #20
 80169ba:	4618      	mov	r0, r3
 80169bc:	f001 fc99 	bl	80182f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80169c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80169c4:	f001 fce4 	bl	8018390 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80169c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80169ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80169ce:	fb02 f303 	mul.w	r3, r2, r3
 80169d2:	461a      	mov	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80169da:	4a17      	ldr	r2, [pc, #92]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80169dc:	6093      	str	r3, [r2, #8]
            break;
 80169de:	e0a8      	b.n	8016b32 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80169e0:	2000      	movs	r0, #0
 80169e2:	f001 fe4d 	bl	8018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80169e6:	4b14      	ldr	r3, [pc, #80]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80169e8:	2201      	movs	r2, #1
 80169ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	b2da      	uxtb	r2, r3
 80169f2:	4b11      	ldr	r3, [pc, #68]	; (8016a38 <RadioSetRxConfig+0x30c>)
 80169f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80169f8:	4a15      	ldr	r2, [pc, #84]	; (8016a50 <RadioSetRxConfig+0x324>)
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	4413      	add	r3, r2
 80169fe:	781a      	ldrb	r2, [r3, #0]
 8016a00:	4b0d      	ldr	r3, [pc, #52]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016a06:	4a0c      	ldr	r2, [pc, #48]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016a08:	7bbb      	ldrb	r3, [r7, #14]
 8016a0a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d105      	bne.n	8016a20 <RadioSetRxConfig+0x2f4>
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2b0b      	cmp	r3, #11
 8016a18:	d008      	beq.n	8016a2c <RadioSetRxConfig+0x300>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2b0c      	cmp	r3, #12
 8016a1e:	d005      	beq.n	8016a2c <RadioSetRxConfig+0x300>
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	2b01      	cmp	r3, #1
 8016a24:	d116      	bne.n	8016a54 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	2b0c      	cmp	r3, #12
 8016a2a:	d113      	bne.n	8016a54 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016a2c:	4b02      	ldr	r3, [pc, #8]	; (8016a38 <RadioSetRxConfig+0x30c>)
 8016a2e:	2201      	movs	r2, #1
 8016a30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016a34:	e012      	b.n	8016a5c <RadioSetRxConfig+0x330>
 8016a36:	bf00      	nop
 8016a38:	20001c68 	.word	0x20001c68
 8016a3c:	200000dc 	.word	0x200000dc
 8016a40:	20001ca0 	.word	0x20001ca0
 8016a44:	20001c76 	.word	0x20001c76
 8016a48:	08020318 	.word	0x08020318
 8016a4c:	08020320 	.word	0x08020320
 8016a50:	08020810 	.word	0x08020810
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016a54:	4b39      	ldr	r3, [pc, #228]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a56:	2200      	movs	r2, #0
 8016a58:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016a5c:	4b37      	ldr	r3, [pc, #220]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a5e:	2201      	movs	r2, #1
 8016a60:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a62:	4b36      	ldr	r3, [pc, #216]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a68:	2b05      	cmp	r3, #5
 8016a6a:	d004      	beq.n	8016a76 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016a6c:	4b33      	ldr	r3, [pc, #204]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016a72:	2b06      	cmp	r3, #6
 8016a74:	d10a      	bne.n	8016a8c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016a76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a78:	2b0b      	cmp	r3, #11
 8016a7a:	d803      	bhi.n	8016a84 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016a7c:	4b2f      	ldr	r3, [pc, #188]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a7e:	220c      	movs	r2, #12
 8016a80:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016a82:	e006      	b.n	8016a92 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a84:	4a2d      	ldr	r2, [pc, #180]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a88:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016a8a:	e002      	b.n	8016a92 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a8c:	4a2b      	ldr	r2, [pc, #172]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a90:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016a92:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016a96:	4b29      	ldr	r3, [pc, #164]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016a98:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016a9a:	4b29      	ldr	r3, [pc, #164]	; (8016b40 <RadioSetRxConfig+0x414>)
 8016a9c:	781a      	ldrb	r2, [r3, #0]
 8016a9e:	4b27      	ldr	r3, [pc, #156]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016aa0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016aa2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016aa6:	4b25      	ldr	r3, [pc, #148]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016aa8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016aac:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016ab0:	4b22      	ldr	r3, [pc, #136]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016ab6:	f000 fbd0 	bl	801725a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016aba:	4b20      	ldr	r3, [pc, #128]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	bf14      	ite	ne
 8016ac4:	2301      	movne	r3, #1
 8016ac6:	2300      	moveq	r3, #0
 8016ac8:	b2db      	uxtb	r3, r3
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7ff fd60 	bl	8016590 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ad0:	481c      	ldr	r0, [pc, #112]	; (8016b44 <RadioSetRxConfig+0x418>)
 8016ad2:	f002 f807 	bl	8018ae4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ad6:	481c      	ldr	r0, [pc, #112]	; (8016b48 <RadioSetRxConfig+0x41c>)
 8016ad8:	f002 f8d6 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016ade:	b2db      	uxtb	r3, r3
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f001 fddc 	bl	801869e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016ae6:	4b15      	ldr	r3, [pc, #84]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d10d      	bne.n	8016b0c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016af0:	f240 7036 	movw	r0, #1846	; 0x736
 8016af4:	f002 fa24 	bl	8018f40 <SUBGRF_ReadRegister>
 8016af8:	4603      	mov	r3, r0
 8016afa:	f023 0304 	bic.w	r3, r3, #4
 8016afe:	b2db      	uxtb	r3, r3
 8016b00:	4619      	mov	r1, r3
 8016b02:	f240 7036 	movw	r0, #1846	; 0x736
 8016b06:	f002 fa07 	bl	8018f18 <SUBGRF_WriteRegister>
 8016b0a:	e00c      	b.n	8016b26 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016b0c:	f240 7036 	movw	r0, #1846	; 0x736
 8016b10:	f002 fa16 	bl	8018f40 <SUBGRF_ReadRegister>
 8016b14:	4603      	mov	r3, r0
 8016b16:	f043 0304 	orr.w	r3, r3, #4
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	f240 7036 	movw	r0, #1846	; 0x736
 8016b22:	f002 f9f9 	bl	8018f18 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016b26:	4b05      	ldr	r3, [pc, #20]	; (8016b3c <RadioSetRxConfig+0x410>)
 8016b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b2c:	609a      	str	r2, [r3, #8]
            break;
 8016b2e:	e000      	b.n	8016b32 <RadioSetRxConfig+0x406>
            break;
 8016b30:	bf00      	nop
    }
}
 8016b32:	bf00      	nop
 8016b34:	3728      	adds	r7, #40	; 0x28
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	20001c68 	.word	0x20001c68
 8016b40:	200000dc 	.word	0x200000dc
 8016b44:	20001ca0 	.word	0x20001ca0
 8016b48:	20001c76 	.word	0x20001c76

08016b4c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b086      	sub	sp, #24
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	60ba      	str	r2, [r7, #8]
 8016b54:	607b      	str	r3, [r7, #4]
 8016b56:	4603      	mov	r3, r0
 8016b58:	73fb      	strb	r3, [r7, #15]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016b5e:	f002 fcb2 	bl	80194c6 <RFW_DeInit>
    switch( modem )
 8016b62:	7bfb      	ldrb	r3, [r7, #15]
 8016b64:	2b03      	cmp	r3, #3
 8016b66:	f000 80d7 	beq.w	8016d18 <RadioSetTxConfig+0x1cc>
 8016b6a:	2b03      	cmp	r3, #3
 8016b6c:	f300 80e6 	bgt.w	8016d3c <RadioSetTxConfig+0x1f0>
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d002      	beq.n	8016b7a <RadioSetTxConfig+0x2e>
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	d061      	beq.n	8016c3c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016b78:	e0e0      	b.n	8016d3c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b7a:	4b7c      	ldr	r3, [pc, #496]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b82:	4a7a      	ldr	r2, [pc, #488]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016b84:	6a3b      	ldr	r3, [r7, #32]
 8016b86:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016b88:	4b78      	ldr	r3, [pc, #480]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016b8a:	220b      	movs	r2, #11
 8016b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f002 fbcb 	bl	801932c <SUBGRF_GetFskBandwidthRegValue>
 8016b96:	4603      	mov	r3, r0
 8016b98:	461a      	mov	r2, r3
 8016b9a:	4b74      	ldr	r3, [pc, #464]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016ba0:	4a72      	ldr	r2, [pc, #456]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016ba2:	68bb      	ldr	r3, [r7, #8]
 8016ba4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ba6:	4b71      	ldr	r3, [pc, #452]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016ba8:	2200      	movs	r2, #0
 8016baa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016bac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	b29a      	uxth	r2, r3
 8016bb2:	4b6e      	ldr	r3, [pc, #440]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bb4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016bb6:	4b6d      	ldr	r3, [pc, #436]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bb8:	2204      	movs	r2, #4
 8016bba:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016bbc:	4b6b      	ldr	r3, [pc, #428]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bbe:	2218      	movs	r2, #24
 8016bc0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016bc2:	4b6a      	ldr	r3, [pc, #424]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016bcc:	f083 0301 	eor.w	r3, r3, #1
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	4b65      	ldr	r3, [pc, #404]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bd6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016bd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d003      	beq.n	8016be8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016be0:	4b62      	ldr	r3, [pc, #392]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016be2:	22f2      	movs	r2, #242	; 0xf2
 8016be4:	75da      	strb	r2, [r3, #23]
 8016be6:	e002      	b.n	8016bee <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016be8:	4b60      	ldr	r3, [pc, #384]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bea:	2201      	movs	r2, #1
 8016bec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016bee:	4b5f      	ldr	r3, [pc, #380]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bf0:	2201      	movs	r2, #1
 8016bf2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016bf4:	f000 fb31 	bl	801725a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016bf8:	4b5c      	ldr	r3, [pc, #368]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	bf14      	ite	ne
 8016c02:	2301      	movne	r3, #1
 8016c04:	2300      	moveq	r3, #0
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7ff fcc1 	bl	8016590 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c0e:	4858      	ldr	r0, [pc, #352]	; (8016d70 <RadioSetTxConfig+0x224>)
 8016c10:	f001 ff68 	bl	8018ae4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c14:	4857      	ldr	r0, [pc, #348]	; (8016d74 <RadioSetTxConfig+0x228>)
 8016c16:	f002 f837 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c1a:	4a57      	ldr	r2, [pc, #348]	; (8016d78 <RadioSetTxConfig+0x22c>)
 8016c1c:	f107 0310 	add.w	r3, r7, #16
 8016c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c24:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c28:	f107 0310 	add.w	r3, r7, #16
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f001 fb60 	bl	80182f2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016c36:	f001 fbab 	bl	8018390 <SUBGRF_SetWhiteningSeed>
            break;
 8016c3a:	e080      	b.n	8016d3e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016c3c:	4b4b      	ldr	r3, [pc, #300]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c3e:	2201      	movs	r2, #1
 8016c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016c44:	6a3b      	ldr	r3, [r7, #32]
 8016c46:	b2da      	uxtb	r2, r3
 8016c48:	4b48      	ldr	r3, [pc, #288]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016c4e:	4a4b      	ldr	r2, [pc, #300]	; (8016d7c <RadioSetTxConfig+0x230>)
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	4413      	add	r3, r2
 8016c54:	781a      	ldrb	r2, [r3, #0]
 8016c56:	4b45      	ldr	r3, [pc, #276]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016c5c:	4a43      	ldr	r2, [pc, #268]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016c62:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d105      	bne.n	8016c78 <RadioSetTxConfig+0x12c>
 8016c6c:	6a3b      	ldr	r3, [r7, #32]
 8016c6e:	2b0b      	cmp	r3, #11
 8016c70:	d008      	beq.n	8016c84 <RadioSetTxConfig+0x138>
 8016c72:	6a3b      	ldr	r3, [r7, #32]
 8016c74:	2b0c      	cmp	r3, #12
 8016c76:	d005      	beq.n	8016c84 <RadioSetTxConfig+0x138>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	d107      	bne.n	8016c8e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016c7e:	6a3b      	ldr	r3, [r7, #32]
 8016c80:	2b0c      	cmp	r3, #12
 8016c82:	d104      	bne.n	8016c8e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016c84:	4b39      	ldr	r3, [pc, #228]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c86:	2201      	movs	r2, #1
 8016c88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016c8c:	e003      	b.n	8016c96 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016c8e:	4b37      	ldr	r3, [pc, #220]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c90:	2200      	movs	r2, #0
 8016c92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016c96:	4b35      	ldr	r3, [pc, #212]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c98:	2201      	movs	r2, #1
 8016c9a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016c9c:	4b33      	ldr	r3, [pc, #204]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016ca2:	2b05      	cmp	r3, #5
 8016ca4:	d004      	beq.n	8016cb0 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016ca6:	4b31      	ldr	r3, [pc, #196]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016cac:	2b06      	cmp	r3, #6
 8016cae:	d10a      	bne.n	8016cc6 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016cb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cb2:	2b0b      	cmp	r3, #11
 8016cb4:	d803      	bhi.n	8016cbe <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016cb6:	4b2d      	ldr	r3, [pc, #180]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cb8:	220c      	movs	r2, #12
 8016cba:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016cbc:	e006      	b.n	8016ccc <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cbe:	4a2b      	ldr	r2, [pc, #172]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cc2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016cc4:	e002      	b.n	8016ccc <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016cc6:	4a29      	ldr	r2, [pc, #164]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cca:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016ccc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016cd0:	4b26      	ldr	r3, [pc, #152]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cd2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016cd4:	4b2a      	ldr	r3, [pc, #168]	; (8016d80 <RadioSetTxConfig+0x234>)
 8016cd6:	781a      	ldrb	r2, [r3, #0]
 8016cd8:	4b24      	ldr	r3, [pc, #144]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cda:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016cdc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016ce0:	4b22      	ldr	r3, [pc, #136]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016ce2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016ce6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016cea:	4b20      	ldr	r3, [pc, #128]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016cf0:	f000 fab3 	bl	801725a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016cf4:	4b1d      	ldr	r3, [pc, #116]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	bf14      	ite	ne
 8016cfe:	2301      	movne	r3, #1
 8016d00:	2300      	moveq	r3, #0
 8016d02:	b2db      	uxtb	r3, r3
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7ff fc43 	bl	8016590 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d0a:	4819      	ldr	r0, [pc, #100]	; (8016d70 <RadioSetTxConfig+0x224>)
 8016d0c:	f001 feea 	bl	8018ae4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d10:	4818      	ldr	r0, [pc, #96]	; (8016d74 <RadioSetTxConfig+0x228>)
 8016d12:	f001 ffb9 	bl	8018c88 <SUBGRF_SetPacketParams>
            break;
 8016d16:	e012      	b.n	8016d3e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016d18:	2003      	movs	r0, #3
 8016d1a:	f7ff fc39 	bl	8016590 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016d1e:	4b13      	ldr	r3, [pc, #76]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d20:	2202      	movs	r2, #2
 8016d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016d26:	4a11      	ldr	r2, [pc, #68]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d28:	6a3b      	ldr	r3, [r7, #32]
 8016d2a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016d2c:	4b0f      	ldr	r3, [pc, #60]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d2e:	2216      	movs	r2, #22
 8016d30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d34:	480e      	ldr	r0, [pc, #56]	; (8016d70 <RadioSetTxConfig+0x224>)
 8016d36:	f001 fed5 	bl	8018ae4 <SUBGRF_SetModulationParams>
            break;
 8016d3a:	e000      	b.n	8016d3e <RadioSetTxConfig+0x1f2>
            break;
 8016d3c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d42:	4618      	mov	r0, r3
 8016d44:	f002 fa04 	bl	8019150 <SUBGRF_SetRfTxPower>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	4b07      	ldr	r3, [pc, #28]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d4e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016d52:	4b06      	ldr	r3, [pc, #24]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f002 fbc8 	bl	80194ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016d5e:	4a03      	ldr	r2, [pc, #12]	; (8016d6c <RadioSetTxConfig+0x220>)
 8016d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d62:	6053      	str	r3, [r2, #4]
}
 8016d64:	bf00      	nop
 8016d66:	3718      	adds	r7, #24
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}
 8016d6c:	20001c68 	.word	0x20001c68
 8016d70:	20001ca0 	.word	0x20001ca0
 8016d74:	20001c76 	.word	0x20001c76
 8016d78:	08020320 	.word	0x08020320
 8016d7c:	08020810 	.word	0x08020810
 8016d80:	200000dc 	.word	0x200000dc

08016d84 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016d84:	b480      	push	{r7}
 8016d86:	b083      	sub	sp, #12
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
    return true;
 8016d8c:	2301      	movs	r3, #1
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	370c      	adds	r7, #12
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bc80      	pop	{r7}
 8016d96:	4770      	bx	lr

08016d98 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b085      	sub	sp, #20
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	4603      	mov	r3, r0
 8016da0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016da2:	2300      	movs	r3, #0
 8016da4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016da6:	79fb      	ldrb	r3, [r7, #7]
 8016da8:	2b0a      	cmp	r3, #10
 8016daa:	d83e      	bhi.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
 8016dac:	a201      	add	r2, pc, #4	; (adr r2, 8016db4 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016db2:	bf00      	nop
 8016db4:	08016de1 	.word	0x08016de1
 8016db8:	08016df1 	.word	0x08016df1
 8016dbc:	08016e01 	.word	0x08016e01
 8016dc0:	08016e11 	.word	0x08016e11
 8016dc4:	08016e19 	.word	0x08016e19
 8016dc8:	08016e1f 	.word	0x08016e1f
 8016dcc:	08016e25 	.word	0x08016e25
 8016dd0:	08016e2b 	.word	0x08016e2b
 8016dd4:	08016de9 	.word	0x08016de9
 8016dd8:	08016df9 	.word	0x08016df9
 8016ddc:	08016e09 	.word	0x08016e09
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016de0:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016de4:	60fb      	str	r3, [r7, #12]
        break;
 8016de6:	e020      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016de8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016dec:	60fb      	str	r3, [r7, #12]
        break;
 8016dee:	e01c      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016df0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016df4:	60fb      	str	r3, [r7, #12]
        break;
 8016df6:	e018      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016df8:	f245 1361 	movw	r3, #20833	; 0x5161
 8016dfc:	60fb      	str	r3, [r7, #12]
        break;
 8016dfe:	e014      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016e00:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016e04:	60fb      	str	r3, [r7, #12]
        break;
 8016e06:	e010      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016e08:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016e0c:	60fb      	str	r3, [r7, #12]
        break;
 8016e0e:	e00c      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016e10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016e14:	60fb      	str	r3, [r7, #12]
        break;
 8016e16:	e008      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016e18:	4b07      	ldr	r3, [pc, #28]	; (8016e38 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016e1a:	60fb      	str	r3, [r7, #12]
        break;
 8016e1c:	e005      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016e1e:	4b07      	ldr	r3, [pc, #28]	; (8016e3c <RadioGetLoRaBandwidthInHz+0xa4>)
 8016e20:	60fb      	str	r3, [r7, #12]
        break;
 8016e22:	e002      	b.n	8016e2a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016e24:	4b06      	ldr	r3, [pc, #24]	; (8016e40 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016e26:	60fb      	str	r3, [r7, #12]
        break;
 8016e28:	bf00      	nop
    }

    return bandwidthInHz;
 8016e2a:	68fb      	ldr	r3, [r7, #12]
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3714      	adds	r7, #20
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bc80      	pop	{r7}
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop
 8016e38:	0001e848 	.word	0x0001e848
 8016e3c:	0003d090 	.word	0x0003d090
 8016e40:	0007a120 	.word	0x0007a120

08016e44 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e44:	b480      	push	{r7}
 8016e46:	b083      	sub	sp, #12
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	4608      	mov	r0, r1
 8016e4e:	4611      	mov	r1, r2
 8016e50:	461a      	mov	r2, r3
 8016e52:	4603      	mov	r3, r0
 8016e54:	70fb      	strb	r3, [r7, #3]
 8016e56:	460b      	mov	r3, r1
 8016e58:	803b      	strh	r3, [r7, #0]
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016e5e:	883b      	ldrh	r3, [r7, #0]
 8016e60:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e62:	78ba      	ldrb	r2, [r7, #2]
 8016e64:	f082 0201 	eor.w	r2, r2, #1
 8016e68:	b2d2      	uxtb	r2, r2
 8016e6a:	2a00      	cmp	r2, #0
 8016e6c:	d001      	beq.n	8016e72 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016e6e:	2208      	movs	r2, #8
 8016e70:	e000      	b.n	8016e74 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016e72:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016e74:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e76:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016e7a:	7c3b      	ldrb	r3, [r7, #16]
 8016e7c:	7d39      	ldrb	r1, [r7, #20]
 8016e7e:	2900      	cmp	r1, #0
 8016e80:	d001      	beq.n	8016e86 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016e82:	2102      	movs	r1, #2
 8016e84:	e000      	b.n	8016e88 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016e86:	2100      	movs	r1, #0
 8016e88:	440b      	add	r3, r1
 8016e8a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e8c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016e8e:	4618      	mov	r0, r3
 8016e90:	370c      	adds	r7, #12
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bc80      	pop	{r7}
 8016e96:	4770      	bx	lr

08016e98 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e98:	b480      	push	{r7}
 8016e9a:	b08b      	sub	sp, #44	; 0x2c
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	4611      	mov	r1, r2
 8016ea4:	461a      	mov	r2, r3
 8016ea6:	460b      	mov	r3, r1
 8016ea8:	71fb      	strb	r3, [r7, #7]
 8016eaa:	4613      	mov	r3, r2
 8016eac:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016eae:	79fb      	ldrb	r3, [r7, #7]
 8016eb0:	3304      	adds	r3, #4
 8016eb2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016eba:	68bb      	ldr	r3, [r7, #8]
 8016ebc:	2b05      	cmp	r3, #5
 8016ebe:	d002      	beq.n	8016ec6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	2b06      	cmp	r3, #6
 8016ec4:	d104      	bne.n	8016ed0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016ec6:	88bb      	ldrh	r3, [r7, #4]
 8016ec8:	2b0b      	cmp	r3, #11
 8016eca:	d801      	bhi.n	8016ed0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016ecc:	230c      	movs	r3, #12
 8016ece:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d105      	bne.n	8016ee2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	2b0b      	cmp	r3, #11
 8016eda:	d008      	beq.n	8016eee <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	2b0c      	cmp	r3, #12
 8016ee0:	d005      	beq.n	8016eee <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	2b01      	cmp	r3, #1
 8016ee6:	d105      	bne.n	8016ef4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	2b0c      	cmp	r3, #12
 8016eec:	d102      	bne.n	8016ef4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ef4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016ef8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016efa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016efe:	2a00      	cmp	r2, #0
 8016f00:	d001      	beq.n	8016f06 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016f02:	2210      	movs	r2, #16
 8016f04:	e000      	b.n	8016f08 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016f06:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f08:	4413      	add	r3, r2
 8016f0a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016f10:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016f12:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016f16:	2a00      	cmp	r2, #0
 8016f18:	d001      	beq.n	8016f1e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	e000      	b.n	8016f20 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016f1e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016f20:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f22:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	2b06      	cmp	r3, #6
 8016f28:	d803      	bhi.n	8016f32 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	009b      	lsls	r3, r3, #2
 8016f2e:	623b      	str	r3, [r7, #32]
 8016f30:	e00e      	b.n	8016f50 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	3308      	adds	r3, #8
 8016f36:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d004      	beq.n	8016f4a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	3b02      	subs	r3, #2
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	623b      	str	r3, [r7, #32]
 8016f48:	e002      	b.n	8016f50 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	009b      	lsls	r3, r3, #2
 8016f4e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	da01      	bge.n	8016f5a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016f56:	2300      	movs	r3, #0
 8016f58:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016f5a:	69fa      	ldr	r2, [r7, #28]
 8016f5c:	6a3b      	ldr	r3, [r7, #32]
 8016f5e:	4413      	add	r3, r2
 8016f60:	1e5a      	subs	r2, r3, #1
 8016f62:	6a3b      	ldr	r3, [r7, #32]
 8016f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f68:	697a      	ldr	r2, [r7, #20]
 8016f6a:	fb03 f202 	mul.w	r2, r3, r2
 8016f6e:	88bb      	ldrh	r3, [r7, #4]
 8016f70:	4413      	add	r3, r2
    int32_t intermediate =
 8016f72:	330c      	adds	r3, #12
 8016f74:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	2b06      	cmp	r3, #6
 8016f7a:	d802      	bhi.n	8016f82 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016f7c:	69bb      	ldr	r3, [r7, #24]
 8016f7e:	3302      	adds	r3, #2
 8016f80:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	1c5a      	adds	r2, r3, #1
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	3b02      	subs	r3, #2
 8016f8c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	372c      	adds	r7, #44	; 0x2c
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bc80      	pop	{r7}
 8016f98:	4770      	bx	lr
	...

08016f9c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b08a      	sub	sp, #40	; 0x28
 8016fa0:	af04      	add	r7, sp, #16
 8016fa2:	60b9      	str	r1, [r7, #8]
 8016fa4:	607a      	str	r2, [r7, #4]
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	4603      	mov	r3, r0
 8016faa:	73fb      	strb	r3, [r7, #15]
 8016fac:	4613      	mov	r3, r2
 8016fae:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d002      	beq.n	8016fc4 <RadioTimeOnAir+0x28>
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d017      	beq.n	8016ff2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8016fc2:	e035      	b.n	8017030 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8016fc4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8016fc8:	8c3a      	ldrh	r2, [r7, #32]
 8016fca:	7bb9      	ldrb	r1, [r7, #14]
 8016fcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016fd0:	9301      	str	r3, [sp, #4]
 8016fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	4603      	mov	r3, r0
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f7ff ff32 	bl	8016e44 <RadioGetGfskTimeOnAirNumerator>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016fe6:	fb02 f303 	mul.w	r3, r2, r3
 8016fea:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	613b      	str	r3, [r7, #16]
        break;
 8016ff0:	e01e      	b.n	8017030 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8016ff2:	8c39      	ldrh	r1, [r7, #32]
 8016ff4:	7bba      	ldrb	r2, [r7, #14]
 8016ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016ffa:	9302      	str	r3, [sp, #8]
 8016ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017000:	9301      	str	r3, [sp, #4]
 8017002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	460b      	mov	r3, r1
 801700a:	6879      	ldr	r1, [r7, #4]
 801700c:	68b8      	ldr	r0, [r7, #8]
 801700e:	f7ff ff43 	bl	8016e98 <RadioGetLoRaTimeOnAirNumerator>
 8017012:	4603      	mov	r3, r0
 8017014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017018:	fb02 f303 	mul.w	r3, r2, r3
 801701c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801701e:	4a0a      	ldr	r2, [pc, #40]	; (8017048 <RadioTimeOnAir+0xac>)
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	4413      	add	r3, r2
 8017024:	781b      	ldrb	r3, [r3, #0]
 8017026:	4618      	mov	r0, r3
 8017028:	f7ff feb6 	bl	8016d98 <RadioGetLoRaBandwidthInHz>
 801702c:	6138      	str	r0, [r7, #16]
        break;
 801702e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017030:	697a      	ldr	r2, [r7, #20]
 8017032:	693b      	ldr	r3, [r7, #16]
 8017034:	4413      	add	r3, r2
 8017036:	1e5a      	subs	r2, r3, #1
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801703e:	4618      	mov	r0, r3
 8017040:	3718      	adds	r7, #24
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}
 8017046:	bf00      	nop
 8017048:	08020810 	.word	0x08020810

0801704c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b084      	sub	sp, #16
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	460b      	mov	r3, r1
 8017056:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017058:	2300      	movs	r3, #0
 801705a:	2200      	movs	r2, #0
 801705c:	f240 2101 	movw	r1, #513	; 0x201
 8017060:	f240 2001 	movw	r0, #513	; 0x201
 8017064:	f001 fc10 	bl	8018888 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8017068:	4b6e      	ldr	r3, [pc, #440]	; (8017224 <RadioSend+0x1d8>)
 801706a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801706e:	2101      	movs	r1, #1
 8017070:	4618      	mov	r0, r3
 8017072:	f002 f845 	bl	8019100 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017076:	4b6b      	ldr	r3, [pc, #428]	; (8017224 <RadioSend+0x1d8>)
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d112      	bne.n	80170a4 <RadioSend+0x58>
 801707e:	4b69      	ldr	r3, [pc, #420]	; (8017224 <RadioSend+0x1d8>)
 8017080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017084:	2b06      	cmp	r3, #6
 8017086:	d10d      	bne.n	80170a4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017088:	f640 0089 	movw	r0, #2185	; 0x889
 801708c:	f001 ff58 	bl	8018f40 <SUBGRF_ReadRegister>
 8017090:	4603      	mov	r3, r0
 8017092:	f023 0304 	bic.w	r3, r3, #4
 8017096:	b2db      	uxtb	r3, r3
 8017098:	4619      	mov	r1, r3
 801709a:	f640 0089 	movw	r0, #2185	; 0x889
 801709e:	f001 ff3b 	bl	8018f18 <SUBGRF_WriteRegister>
 80170a2:	e00c      	b.n	80170be <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80170a4:	f640 0089 	movw	r0, #2185	; 0x889
 80170a8:	f001 ff4a 	bl	8018f40 <SUBGRF_ReadRegister>
 80170ac:	4603      	mov	r3, r0
 80170ae:	f043 0304 	orr.w	r3, r3, #4
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	4619      	mov	r1, r3
 80170b6:	f640 0089 	movw	r0, #2185	; 0x889
 80170ba:	f001 ff2d 	bl	8018f18 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80170be:	4b59      	ldr	r3, [pc, #356]	; (8017224 <RadioSend+0x1d8>)
 80170c0:	781b      	ldrb	r3, [r3, #0]
 80170c2:	2b03      	cmp	r3, #3
 80170c4:	f200 809f 	bhi.w	8017206 <RadioSend+0x1ba>
 80170c8:	a201      	add	r2, pc, #4	; (adr r2, 80170d0 <RadioSend+0x84>)
 80170ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ce:	bf00      	nop
 80170d0:	080170fb 	.word	0x080170fb
 80170d4:	080170e1 	.word	0x080170e1
 80170d8:	0801714f 	.word	0x0801714f
 80170dc:	0801716f 	.word	0x0801716f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80170e0:	4a50      	ldr	r2, [pc, #320]	; (8017224 <RadioSend+0x1d8>)
 80170e2:	78fb      	ldrb	r3, [r7, #3]
 80170e4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170e6:	4850      	ldr	r0, [pc, #320]	; (8017228 <RadioSend+0x1dc>)
 80170e8:	f001 fdce 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80170ec:	78fb      	ldrb	r3, [r7, #3]
 80170ee:	2200      	movs	r2, #0
 80170f0:	4619      	mov	r1, r3
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f001 f8ea 	bl	80182cc <SUBGRF_SendPayload>
            break;
 80170f8:	e086      	b.n	8017208 <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80170fa:	f002 f9ea 	bl	80194d2 <RFW_Is_Init>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b01      	cmp	r3, #1
 8017102:	d117      	bne.n	8017134 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017104:	f107 020d 	add.w	r2, r7, #13
 8017108:	78fb      	ldrb	r3, [r7, #3]
 801710a:	4619      	mov	r1, r3
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f002 f9f8 	bl	8019502 <RFW_TransmitInit>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	f040 8081 	bne.w	801721c <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801711a:	7b7a      	ldrb	r2, [r7, #13]
 801711c:	4b41      	ldr	r3, [pc, #260]	; (8017224 <RadioSend+0x1d8>)
 801711e:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017120:	4841      	ldr	r0, [pc, #260]	; (8017228 <RadioSend+0x1dc>)
 8017122:	f001 fdb1 	bl	8018c88 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017126:	7b7b      	ldrb	r3, [r7, #13]
 8017128:	2200      	movs	r2, #0
 801712a:	4619      	mov	r1, r3
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f001 f8cd 	bl	80182cc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017132:	e069      	b.n	8017208 <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017134:	4a3b      	ldr	r2, [pc, #236]	; (8017224 <RadioSend+0x1d8>)
 8017136:	78fb      	ldrb	r3, [r7, #3]
 8017138:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801713a:	483b      	ldr	r0, [pc, #236]	; (8017228 <RadioSend+0x1dc>)
 801713c:	f001 fda4 	bl	8018c88 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017140:	78fb      	ldrb	r3, [r7, #3]
 8017142:	2200      	movs	r2, #0
 8017144:	4619      	mov	r1, r3
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f001 f8c0 	bl	80182cc <SUBGRF_SendPayload>
            break;
 801714c:	e05c      	b.n	8017208 <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801714e:	4b35      	ldr	r3, [pc, #212]	; (8017224 <RadioSend+0x1d8>)
 8017150:	2202      	movs	r2, #2
 8017152:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017154:	4a33      	ldr	r2, [pc, #204]	; (8017224 <RadioSend+0x1d8>)
 8017156:	78fb      	ldrb	r3, [r7, #3]
 8017158:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801715a:	4833      	ldr	r0, [pc, #204]	; (8017228 <RadioSend+0x1dc>)
 801715c:	f001 fd94 	bl	8018c88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017160:	78fb      	ldrb	r3, [r7, #3]
 8017162:	2200      	movs	r2, #0
 8017164:	4619      	mov	r1, r3
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f001 f8b0 	bl	80182cc <SUBGRF_SendPayload>
            break;
 801716c:	e04c      	b.n	8017208 <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801716e:	78fb      	ldrb	r3, [r7, #3]
 8017170:	461a      	mov	r2, r3
 8017172:	6879      	ldr	r1, [r7, #4]
 8017174:	482d      	ldr	r0, [pc, #180]	; (801722c <RadioSend+0x1e0>)
 8017176:	f000 fc30 	bl	80179da <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801717a:	4b2a      	ldr	r3, [pc, #168]	; (8017224 <RadioSend+0x1d8>)
 801717c:	2202      	movs	r2, #2
 801717e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017180:	78fb      	ldrb	r3, [r7, #3]
 8017182:	3301      	adds	r3, #1
 8017184:	b2da      	uxtb	r2, r3
 8017186:	4b27      	ldr	r3, [pc, #156]	; (8017224 <RadioSend+0x1d8>)
 8017188:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801718a:	4827      	ldr	r0, [pc, #156]	; (8017228 <RadioSend+0x1dc>)
 801718c:	f001 fd7c 	bl	8018c88 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8017190:	2100      	movs	r1, #0
 8017192:	20f1      	movs	r0, #241	; 0xf1
 8017194:	f000 f947 	bl	8017426 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017198:	2100      	movs	r1, #0
 801719a:	20f0      	movs	r0, #240	; 0xf0
 801719c:	f000 f943 	bl	8017426 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80171a0:	4b20      	ldr	r3, [pc, #128]	; (8017224 <RadioSend+0x1d8>)
 80171a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171a4:	2b64      	cmp	r3, #100	; 0x64
 80171a6:	d108      	bne.n	80171ba <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80171a8:	2170      	movs	r1, #112	; 0x70
 80171aa:	20f3      	movs	r0, #243	; 0xf3
 80171ac:	f000 f93b 	bl	8017426 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80171b0:	211d      	movs	r1, #29
 80171b2:	20f2      	movs	r0, #242	; 0xf2
 80171b4:	f000 f937 	bl	8017426 <RadioWrite>
 80171b8:	e007      	b.n	80171ca <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80171ba:	21e1      	movs	r1, #225	; 0xe1
 80171bc:	20f3      	movs	r0, #243	; 0xf3
 80171be:	f000 f932 	bl	8017426 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80171c2:	2104      	movs	r1, #4
 80171c4:	20f2      	movs	r0, #242	; 0xf2
 80171c6:	f000 f92e 	bl	8017426 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80171ca:	78fb      	ldrb	r3, [r7, #3]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	00db      	lsls	r3, r3, #3
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	3302      	adds	r3, #2
 80171d4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80171d6:	89fb      	ldrh	r3, [r7, #14]
 80171d8:	0a1b      	lsrs	r3, r3, #8
 80171da:	b29b      	uxth	r3, r3
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	4619      	mov	r1, r3
 80171e0:	20f4      	movs	r0, #244	; 0xf4
 80171e2:	f000 f920 	bl	8017426 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80171e6:	89fb      	ldrh	r3, [r7, #14]
 80171e8:	b2db      	uxtb	r3, r3
 80171ea:	4619      	mov	r1, r3
 80171ec:	20f5      	movs	r0, #245	; 0xf5
 80171ee:	f000 f91a 	bl	8017426 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	3301      	adds	r3, #1
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80171fc:	4619      	mov	r1, r3
 80171fe:	480b      	ldr	r0, [pc, #44]	; (801722c <RadioSend+0x1e0>)
 8017200:	f001 f864 	bl	80182cc <SUBGRF_SendPayload>
            break;
 8017204:	e000      	b.n	8017208 <RadioSend+0x1bc>
        }
        default:
            break;
 8017206:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017208:	4b06      	ldr	r3, [pc, #24]	; (8017224 <RadioSend+0x1d8>)
 801720a:	685b      	ldr	r3, [r3, #4]
 801720c:	4619      	mov	r1, r3
 801720e:	4808      	ldr	r0, [pc, #32]	; (8017230 <RadioSend+0x1e4>)
 8017210:	f002 fddc 	bl	8019dcc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017214:	4806      	ldr	r0, [pc, #24]	; (8017230 <RadioSend+0x1e4>)
 8017216:	f002 fcfb 	bl	8019c10 <UTIL_TIMER_Start>
 801721a:	e000      	b.n	801721e <RadioSend+0x1d2>
                return;
 801721c:	bf00      	nop
}
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	20001c68 	.word	0x20001c68
 8017228:	20001c76 	.word	0x20001c76
 801722c:	20001b64 	.word	0x20001b64
 8017230:	20001cc0 	.word	0x20001cc0

08017234 <RadioSleep>:

static void RadioSleep( void )
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801723a:	2300      	movs	r3, #0
 801723c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801723e:	793b      	ldrb	r3, [r7, #4]
 8017240:	f043 0304 	orr.w	r3, r3, #4
 8017244:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017246:	7938      	ldrb	r0, [r7, #4]
 8017248:	f001 f91c 	bl	8018484 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801724c:	2002      	movs	r0, #2
 801724e:	f7ec fb16 	bl	800387e <HAL_Delay>
}
 8017252:	bf00      	nop
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <RadioStandby>:

static void RadioStandby( void )
{
 801725a:	b580      	push	{r7, lr}
 801725c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801725e:	2000      	movs	r0, #0
 8017260:	f001 f942 	bl	80184e8 <SUBGRF_SetStandby>
}
 8017264:	bf00      	nop
 8017266:	bd80      	pop	{r7, pc}

08017268 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017270:	f002 f92f 	bl	80194d2 <RFW_Is_Init>
 8017274:	4603      	mov	r3, r0
 8017276:	2b01      	cmp	r3, #1
 8017278:	d102      	bne.n	8017280 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801727a:	f002 f952 	bl	8019522 <RFW_ReceiveInit>
 801727e:	e007      	b.n	8017290 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017280:	2300      	movs	r3, #0
 8017282:	2200      	movs	r2, #0
 8017284:	f240 2162 	movw	r1, #610	; 0x262
 8017288:	f240 2062 	movw	r0, #610	; 0x262
 801728c:	f001 fafc 	bl	8018888 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d006      	beq.n	80172a4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017296:	6879      	ldr	r1, [r7, #4]
 8017298:	480f      	ldr	r0, [pc, #60]	; (80172d8 <RadioRx+0x70>)
 801729a:	f002 fd97 	bl	8019dcc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801729e:	480e      	ldr	r0, [pc, #56]	; (80172d8 <RadioRx+0x70>)
 80172a0:	f002 fcb6 	bl	8019c10 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80172a4:	4b0d      	ldr	r3, [pc, #52]	; (80172dc <RadioRx+0x74>)
 80172a6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80172aa:	2100      	movs	r1, #0
 80172ac:	4618      	mov	r0, r3
 80172ae:	f001 ff27 	bl	8019100 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80172b2:	4b0a      	ldr	r3, [pc, #40]	; (80172dc <RadioRx+0x74>)
 80172b4:	785b      	ldrb	r3, [r3, #1]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d004      	beq.n	80172c4 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80172ba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80172be:	f001 f94f 	bl	8018560 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80172c2:	e005      	b.n	80172d0 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80172c4:	4b05      	ldr	r3, [pc, #20]	; (80172dc <RadioRx+0x74>)
 80172c6:	689b      	ldr	r3, [r3, #8]
 80172c8:	019b      	lsls	r3, r3, #6
 80172ca:	4618      	mov	r0, r3
 80172cc:	f001 f948 	bl	8018560 <SUBGRF_SetRx>
}
 80172d0:	bf00      	nop
 80172d2:	3708      	adds	r7, #8
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	20001cd8 	.word	0x20001cd8
 80172dc:	20001c68 	.word	0x20001c68

080172e0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80172e8:	f002 f8f3 	bl	80194d2 <RFW_Is_Init>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b01      	cmp	r3, #1
 80172f0:	d102      	bne.n	80172f8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80172f2:	f002 f916 	bl	8019522 <RFW_ReceiveInit>
 80172f6:	e007      	b.n	8017308 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80172f8:	2300      	movs	r3, #0
 80172fa:	2200      	movs	r2, #0
 80172fc:	f240 2162 	movw	r1, #610	; 0x262
 8017300:	f240 2062 	movw	r0, #610	; 0x262
 8017304:	f001 fac0 	bl	8018888 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d006      	beq.n	801731c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801730e:	6879      	ldr	r1, [r7, #4]
 8017310:	480f      	ldr	r0, [pc, #60]	; (8017350 <RadioRxBoosted+0x70>)
 8017312:	f002 fd5b 	bl	8019dcc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017316:	480e      	ldr	r0, [pc, #56]	; (8017350 <RadioRxBoosted+0x70>)
 8017318:	f002 fc7a 	bl	8019c10 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801731c:	4b0d      	ldr	r3, [pc, #52]	; (8017354 <RadioRxBoosted+0x74>)
 801731e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017322:	2100      	movs	r1, #0
 8017324:	4618      	mov	r0, r3
 8017326:	f001 feeb 	bl	8019100 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801732a:	4b0a      	ldr	r3, [pc, #40]	; (8017354 <RadioRxBoosted+0x74>)
 801732c:	785b      	ldrb	r3, [r3, #1]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d004      	beq.n	801733c <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017332:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017336:	f001 f933 	bl	80185a0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801733a:	e005      	b.n	8017348 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801733c:	4b05      	ldr	r3, [pc, #20]	; (8017354 <RadioRxBoosted+0x74>)
 801733e:	689b      	ldr	r3, [r3, #8]
 8017340:	019b      	lsls	r3, r3, #6
 8017342:	4618      	mov	r0, r3
 8017344:	f001 f92c 	bl	80185a0 <SUBGRF_SetRxBoosted>
}
 8017348:	bf00      	nop
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	20001cd8 	.word	0x20001cd8
 8017354:	20001c68 	.word	0x20001c68

08017358 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017362:	4b07      	ldr	r3, [pc, #28]	; (8017380 <RadioSetRxDutyCycle+0x28>)
 8017364:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017368:	2100      	movs	r1, #0
 801736a:	4618      	mov	r0, r3
 801736c:	f001 fec8 	bl	8019100 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017370:	6839      	ldr	r1, [r7, #0]
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f001 f938 	bl	80185e8 <SUBGRF_SetRxDutyCycle>
}
 8017378:	bf00      	nop
 801737a:	3708      	adds	r7, #8
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}
 8017380:	20001c68 	.word	0x20001c68

08017384 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017388:	4b09      	ldr	r3, [pc, #36]	; (80173b0 <RadioStartCad+0x2c>)
 801738a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801738e:	2100      	movs	r1, #0
 8017390:	4618      	mov	r0, r3
 8017392:	f001 feb5 	bl	8019100 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017396:	2300      	movs	r3, #0
 8017398:	2200      	movs	r2, #0
 801739a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801739e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80173a2:	f001 fa71 	bl	8018888 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80173a6:	f001 f94b 	bl	8018640 <SUBGRF_SetCad>
}
 80173aa:	bf00      	nop
 80173ac:	bd80      	pop	{r7, pc}
 80173ae:	bf00      	nop
 80173b0:	20001c68 	.word	0x20001c68

080173b4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	460b      	mov	r3, r1
 80173be:	70fb      	strb	r3, [r7, #3]
 80173c0:	4613      	mov	r3, r2
 80173c2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80173c4:	883b      	ldrh	r3, [r7, #0]
 80173c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80173ca:	fb02 f303 	mul.w	r3, r2, r3
 80173ce:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f001 fab5 	bl	8018940 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80173d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80173da:	4618      	mov	r0, r3
 80173dc:	f001 feb8 	bl	8019150 <SUBGRF_SetRfTxPower>
 80173e0:	4603      	mov	r3, r0
 80173e2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80173e4:	7afb      	ldrb	r3, [r7, #11]
 80173e6:	2101      	movs	r1, #1
 80173e8:	4618      	mov	r0, r3
 80173ea:	f001 fe89 	bl	8019100 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80173ee:	f001 f935 	bl	801865c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80173f2:	68f9      	ldr	r1, [r7, #12]
 80173f4:	4804      	ldr	r0, [pc, #16]	; (8017408 <RadioSetTxContinuousWave+0x54>)
 80173f6:	f002 fce9 	bl	8019dcc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80173fa:	4803      	ldr	r0, [pc, #12]	; (8017408 <RadioSetTxContinuousWave+0x54>)
 80173fc:	f002 fc08 	bl	8019c10 <UTIL_TIMER_Start>
}
 8017400:	bf00      	nop
 8017402:	3710      	adds	r7, #16
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}
 8017408:	20001cc0 	.word	0x20001cc0

0801740c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	4603      	mov	r3, r0
 8017414:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017416:	f001 fcec 	bl	8018df2 <SUBGRF_GetRssiInst>
 801741a:	4603      	mov	r3, r0
 801741c:	b21b      	sxth	r3, r3
}
 801741e:	4618      	mov	r0, r3
 8017420:	3708      	adds	r7, #8
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017426:	b580      	push	{r7, lr}
 8017428:	b082      	sub	sp, #8
 801742a:	af00      	add	r7, sp, #0
 801742c:	4603      	mov	r3, r0
 801742e:	460a      	mov	r2, r1
 8017430:	80fb      	strh	r3, [r7, #6]
 8017432:	4613      	mov	r3, r2
 8017434:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8017436:	797a      	ldrb	r2, [r7, #5]
 8017438:	88fb      	ldrh	r3, [r7, #6]
 801743a:	4611      	mov	r1, r2
 801743c:	4618      	mov	r0, r3
 801743e:	f001 fd6b 	bl	8018f18 <SUBGRF_WriteRegister>
}
 8017442:	bf00      	nop
 8017444:	3708      	adds	r7, #8
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}

0801744a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801744a:	b580      	push	{r7, lr}
 801744c:	b082      	sub	sp, #8
 801744e:	af00      	add	r7, sp, #0
 8017450:	4603      	mov	r3, r0
 8017452:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017454:	88fb      	ldrh	r3, [r7, #6]
 8017456:	4618      	mov	r0, r3
 8017458:	f001 fd72 	bl	8018f40 <SUBGRF_ReadRegister>
 801745c:	4603      	mov	r3, r0
}
 801745e:	4618      	mov	r0, r3
 8017460:	3708      	adds	r7, #8
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}

08017466 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b082      	sub	sp, #8
 801746a:	af00      	add	r7, sp, #0
 801746c:	4603      	mov	r3, r0
 801746e:	6039      	str	r1, [r7, #0]
 8017470:	80fb      	strh	r3, [r7, #6]
 8017472:	4613      	mov	r3, r2
 8017474:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017476:	797b      	ldrb	r3, [r7, #5]
 8017478:	b29a      	uxth	r2, r3
 801747a:	88fb      	ldrh	r3, [r7, #6]
 801747c:	6839      	ldr	r1, [r7, #0]
 801747e:	4618      	mov	r0, r3
 8017480:	f001 fd72 	bl	8018f68 <SUBGRF_WriteRegisters>
}
 8017484:	bf00      	nop
 8017486:	3708      	adds	r7, #8
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}

0801748c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	4603      	mov	r3, r0
 8017494:	6039      	str	r1, [r7, #0]
 8017496:	80fb      	strh	r3, [r7, #6]
 8017498:	4613      	mov	r3, r2
 801749a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801749c:	797b      	ldrb	r3, [r7, #5]
 801749e:	b29a      	uxth	r2, r3
 80174a0:	88fb      	ldrh	r3, [r7, #6]
 80174a2:	6839      	ldr	r1, [r7, #0]
 80174a4:	4618      	mov	r0, r3
 80174a6:	f001 fd81 	bl	8018fac <SUBGRF_ReadRegisters>
}
 80174aa:	bf00      	nop
 80174ac:	3708      	adds	r7, #8
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
	...

080174b4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	4603      	mov	r3, r0
 80174bc:	460a      	mov	r2, r1
 80174be:	71fb      	strb	r3, [r7, #7]
 80174c0:	4613      	mov	r3, r2
 80174c2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80174c4:	79fb      	ldrb	r3, [r7, #7]
 80174c6:	2b01      	cmp	r3, #1
 80174c8:	d10a      	bne.n	80174e0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80174ca:	4a0e      	ldr	r2, [pc, #56]	; (8017504 <RadioSetMaxPayloadLength+0x50>)
 80174cc:	79bb      	ldrb	r3, [r7, #6]
 80174ce:	7013      	strb	r3, [r2, #0]
 80174d0:	4b0c      	ldr	r3, [pc, #48]	; (8017504 <RadioSetMaxPayloadLength+0x50>)
 80174d2:	781a      	ldrb	r2, [r3, #0]
 80174d4:	4b0c      	ldr	r3, [pc, #48]	; (8017508 <RadioSetMaxPayloadLength+0x54>)
 80174d6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174d8:	480c      	ldr	r0, [pc, #48]	; (801750c <RadioSetMaxPayloadLength+0x58>)
 80174da:	f001 fbd5 	bl	8018c88 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80174de:	e00d      	b.n	80174fc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80174e0:	4b09      	ldr	r3, [pc, #36]	; (8017508 <RadioSetMaxPayloadLength+0x54>)
 80174e2:	7d5b      	ldrb	r3, [r3, #21]
 80174e4:	2b01      	cmp	r3, #1
 80174e6:	d109      	bne.n	80174fc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80174e8:	4a06      	ldr	r2, [pc, #24]	; (8017504 <RadioSetMaxPayloadLength+0x50>)
 80174ea:	79bb      	ldrb	r3, [r7, #6]
 80174ec:	7013      	strb	r3, [r2, #0]
 80174ee:	4b05      	ldr	r3, [pc, #20]	; (8017504 <RadioSetMaxPayloadLength+0x50>)
 80174f0:	781a      	ldrb	r2, [r3, #0]
 80174f2:	4b05      	ldr	r3, [pc, #20]	; (8017508 <RadioSetMaxPayloadLength+0x54>)
 80174f4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174f6:	4805      	ldr	r0, [pc, #20]	; (801750c <RadioSetMaxPayloadLength+0x58>)
 80174f8:	f001 fbc6 	bl	8018c88 <SUBGRF_SetPacketParams>
}
 80174fc:	bf00      	nop
 80174fe:	3708      	adds	r7, #8
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}
 8017504:	200000dc 	.word	0x200000dc
 8017508:	20001c68 	.word	0x20001c68
 801750c:	20001c76 	.word	0x20001c76

08017510 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	4603      	mov	r3, r0
 8017518:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801751a:	4a13      	ldr	r2, [pc, #76]	; (8017568 <RadioSetPublicNetwork+0x58>)
 801751c:	79fb      	ldrb	r3, [r7, #7]
 801751e:	7313      	strb	r3, [r2, #12]
 8017520:	4b11      	ldr	r3, [pc, #68]	; (8017568 <RadioSetPublicNetwork+0x58>)
 8017522:	7b1a      	ldrb	r2, [r3, #12]
 8017524:	4b10      	ldr	r3, [pc, #64]	; (8017568 <RadioSetPublicNetwork+0x58>)
 8017526:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017528:	2001      	movs	r0, #1
 801752a:	f7ff f831 	bl	8016590 <RadioSetModem>
    if( enable == true )
 801752e:	79fb      	ldrb	r3, [r7, #7]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d00a      	beq.n	801754a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017534:	2134      	movs	r1, #52	; 0x34
 8017536:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801753a:	f001 fced 	bl	8018f18 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801753e:	2144      	movs	r1, #68	; 0x44
 8017540:	f240 7041 	movw	r0, #1857	; 0x741
 8017544:	f001 fce8 	bl	8018f18 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017548:	e009      	b.n	801755e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801754a:	2114      	movs	r1, #20
 801754c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017550:	f001 fce2 	bl	8018f18 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017554:	2124      	movs	r1, #36	; 0x24
 8017556:	f240 7041 	movw	r0, #1857	; 0x741
 801755a:	f001 fcdd 	bl	8018f18 <SUBGRF_WriteRegister>
}
 801755e:	bf00      	nop
 8017560:	3708      	adds	r7, #8
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	20001c68 	.word	0x20001c68

0801756c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801756c:	b580      	push	{r7, lr}
 801756e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017570:	f001 fe22 	bl	80191b8 <SUBGRF_GetRadioWakeUpTime>
 8017574:	4603      	mov	r3, r0
 8017576:	3303      	adds	r3, #3
}
 8017578:	4618      	mov	r0, r3
 801757a:	bd80      	pop	{r7, pc}

0801757c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017584:	f000 f80e 	bl	80175a4 <RadioOnTxTimeoutProcess>
}
 8017588:	bf00      	nop
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017598:	f000 f818 	bl	80175cc <RadioOnRxTimeoutProcess>
}
 801759c:	bf00      	nop
 801759e:	3708      	adds	r7, #8
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80175a8:	4b07      	ldr	r3, [pc, #28]	; (80175c8 <RadioOnTxTimeoutProcess+0x24>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d008      	beq.n	80175c2 <RadioOnTxTimeoutProcess+0x1e>
 80175b0:	4b05      	ldr	r3, [pc, #20]	; (80175c8 <RadioOnTxTimeoutProcess+0x24>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	685b      	ldr	r3, [r3, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d003      	beq.n	80175c2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80175ba:	4b03      	ldr	r3, [pc, #12]	; (80175c8 <RadioOnTxTimeoutProcess+0x24>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	4798      	blx	r3
    }
}
 80175c2:	bf00      	nop
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	20001c64 	.word	0x20001c64

080175cc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80175d0:	4b07      	ldr	r3, [pc, #28]	; (80175f0 <RadioOnRxTimeoutProcess+0x24>)
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d008      	beq.n	80175ea <RadioOnRxTimeoutProcess+0x1e>
 80175d8:	4b05      	ldr	r3, [pc, #20]	; (80175f0 <RadioOnRxTimeoutProcess+0x24>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d003      	beq.n	80175ea <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80175e2:	4b03      	ldr	r3, [pc, #12]	; (80175f0 <RadioOnRxTimeoutProcess+0x24>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	68db      	ldr	r3, [r3, #12]
 80175e8:	4798      	blx	r3
    }
}
 80175ea:	bf00      	nop
 80175ec:	bd80      	pop	{r7, pc}
 80175ee:	bf00      	nop
 80175f0:	20001c64 	.word	0x20001c64

080175f4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b082      	sub	sp, #8
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	4603      	mov	r3, r0
 80175fc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80175fe:	4a05      	ldr	r2, [pc, #20]	; (8017614 <RadioOnDioIrq+0x20>)
 8017600:	88fb      	ldrh	r3, [r7, #6]
 8017602:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017606:	f000 f807 	bl	8017618 <RadioIrqProcess>
}
 801760a:	bf00      	nop
 801760c:	3708      	adds	r7, #8
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	20001c68 	.word	0x20001c68

08017618 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017618:	b590      	push	{r4, r7, lr}
 801761a:	b083      	sub	sp, #12
 801761c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801761e:	2300      	movs	r3, #0
 8017620:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017622:	2300      	movs	r3, #0
 8017624:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8017626:	4ba6      	ldr	r3, [pc, #664]	; (80178c0 <RadioIrqProcess+0x2a8>)
 8017628:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801762c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017630:	f000 810c 	beq.w	801784c <RadioIrqProcess+0x234>
 8017634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017638:	f300 8183 	bgt.w	8017942 <RadioIrqProcess+0x32a>
 801763c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017640:	f000 80f0 	beq.w	8017824 <RadioIrqProcess+0x20c>
 8017644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017648:	f300 817b 	bgt.w	8017942 <RadioIrqProcess+0x32a>
 801764c:	2b80      	cmp	r3, #128	; 0x80
 801764e:	f000 80d5 	beq.w	80177fc <RadioIrqProcess+0x1e4>
 8017652:	2b80      	cmp	r3, #128	; 0x80
 8017654:	f300 8175 	bgt.w	8017942 <RadioIrqProcess+0x32a>
 8017658:	2b20      	cmp	r3, #32
 801765a:	dc49      	bgt.n	80176f0 <RadioIrqProcess+0xd8>
 801765c:	2b00      	cmp	r3, #0
 801765e:	f340 8170 	ble.w	8017942 <RadioIrqProcess+0x32a>
 8017662:	3b01      	subs	r3, #1
 8017664:	2b1f      	cmp	r3, #31
 8017666:	f200 816c 	bhi.w	8017942 <RadioIrqProcess+0x32a>
 801766a:	a201      	add	r2, pc, #4	; (adr r2, 8017670 <RadioIrqProcess+0x58>)
 801766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017670:	080176f9 	.word	0x080176f9
 8017674:	08017733 	.word	0x08017733
 8017678:	08017943 	.word	0x08017943
 801767c:	08017943 	.word	0x08017943
 8017680:	08017943 	.word	0x08017943
 8017684:	08017943 	.word	0x08017943
 8017688:	08017943 	.word	0x08017943
 801768c:	080178b1 	.word	0x080178b1
 8017690:	08017943 	.word	0x08017943
 8017694:	08017943 	.word	0x08017943
 8017698:	08017943 	.word	0x08017943
 801769c:	08017943 	.word	0x08017943
 80176a0:	08017943 	.word	0x08017943
 80176a4:	08017943 	.word	0x08017943
 80176a8:	08017943 	.word	0x08017943
 80176ac:	08017943 	.word	0x08017943
 80176b0:	08017943 	.word	0x08017943
 80176b4:	08017943 	.word	0x08017943
 80176b8:	08017943 	.word	0x08017943
 80176bc:	08017943 	.word	0x08017943
 80176c0:	08017943 	.word	0x08017943
 80176c4:	08017943 	.word	0x08017943
 80176c8:	08017943 	.word	0x08017943
 80176cc:	08017943 	.word	0x08017943
 80176d0:	08017943 	.word	0x08017943
 80176d4:	08017943 	.word	0x08017943
 80176d8:	08017943 	.word	0x08017943
 80176dc:	08017943 	.word	0x08017943
 80176e0:	08017943 	.word	0x08017943
 80176e4:	08017943 	.word	0x08017943
 80176e8:	08017943 	.word	0x08017943
 80176ec:	080178dd 	.word	0x080178dd
 80176f0:	2b40      	cmp	r3, #64	; 0x40
 80176f2:	f000 810e 	beq.w	8017912 <RadioIrqProcess+0x2fa>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80176f6:	e124      	b.n	8017942 <RadioIrqProcess+0x32a>
        TimerStop( &TxTimeoutTimer );
 80176f8:	4872      	ldr	r0, [pc, #456]	; (80178c4 <RadioIrqProcess+0x2ac>)
 80176fa:	f002 faf7 	bl	8019cec <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80176fe:	2000      	movs	r0, #0
 8017700:	f000 fef2 	bl	80184e8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017704:	f001 feec 	bl	80194e0 <RFW_Is_LongPacketModeEnabled>
 8017708:	4603      	mov	r3, r0
 801770a:	2b01      	cmp	r3, #1
 801770c:	d101      	bne.n	8017712 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801770e:	f001 ff10 	bl	8019532 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017712:	4b6d      	ldr	r3, [pc, #436]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	2b00      	cmp	r3, #0
 8017718:	f000 8115 	beq.w	8017946 <RadioIrqProcess+0x32e>
 801771c:	4b6a      	ldr	r3, [pc, #424]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	f000 810f 	beq.w	8017946 <RadioIrqProcess+0x32e>
            RadioEvents->TxDone( );
 8017728:	4b67      	ldr	r3, [pc, #412]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	4798      	blx	r3
        break;
 8017730:	e109      	b.n	8017946 <RadioIrqProcess+0x32e>
        TimerStop( &RxTimeoutTimer );
 8017732:	4866      	ldr	r0, [pc, #408]	; (80178cc <RadioIrqProcess+0x2b4>)
 8017734:	f002 fada 	bl	8019cec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017738:	4b61      	ldr	r3, [pc, #388]	; (80178c0 <RadioIrqProcess+0x2a8>)
 801773a:	785b      	ldrb	r3, [r3, #1]
 801773c:	f083 0301 	eor.w	r3, r3, #1
 8017740:	b2db      	uxtb	r3, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	d014      	beq.n	8017770 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017746:	2000      	movs	r0, #0
 8017748:	f000 fece 	bl	80184e8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801774c:	2100      	movs	r1, #0
 801774e:	f640 1002 	movw	r0, #2306	; 0x902
 8017752:	f001 fbe1 	bl	8018f18 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017756:	f640 1044 	movw	r0, #2372	; 0x944
 801775a:	f001 fbf1 	bl	8018f40 <SUBGRF_ReadRegister>
 801775e:	4603      	mov	r3, r0
 8017760:	f043 0302 	orr.w	r3, r3, #2
 8017764:	b2db      	uxtb	r3, r3
 8017766:	4619      	mov	r1, r3
 8017768:	f640 1044 	movw	r0, #2372	; 0x944
 801776c:	f001 fbd4 	bl	8018f18 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017770:	1dfb      	adds	r3, r7, #7
 8017772:	22ff      	movs	r2, #255	; 0xff
 8017774:	4619      	mov	r1, r3
 8017776:	4856      	ldr	r0, [pc, #344]	; (80178d0 <RadioIrqProcess+0x2b8>)
 8017778:	f000 fd86 	bl	8018288 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801777c:	4855      	ldr	r0, [pc, #340]	; (80178d4 <RadioIrqProcess+0x2bc>)
 801777e:	f001 fb79 	bl	8018e74 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017782:	4b51      	ldr	r3, [pc, #324]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d036      	beq.n	80177f8 <RadioIrqProcess+0x1e0>
 801778a:	4b4f      	ldr	r3, [pc, #316]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	689b      	ldr	r3, [r3, #8]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d031      	beq.n	80177f8 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8017794:	4b4a      	ldr	r3, [pc, #296]	; (80178c0 <RadioIrqProcess+0x2a8>)
 8017796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801779a:	2b01      	cmp	r3, #1
 801779c:	d10e      	bne.n	80177bc <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801779e:	4b4a      	ldr	r3, [pc, #296]	; (80178c8 <RadioIrqProcess+0x2b0>)
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	689c      	ldr	r4, [r3, #8]
 80177a4:	79fb      	ldrb	r3, [r7, #7]
 80177a6:	b299      	uxth	r1, r3
 80177a8:	4b45      	ldr	r3, [pc, #276]	; (80178c0 <RadioIrqProcess+0x2a8>)
 80177aa:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80177ae:	b21a      	sxth	r2, r3
 80177b0:	4b43      	ldr	r3, [pc, #268]	; (80178c0 <RadioIrqProcess+0x2a8>)
 80177b2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80177b6:	4846      	ldr	r0, [pc, #280]	; (80178d0 <RadioIrqProcess+0x2b8>)
 80177b8:	47a0      	blx	r4
                break;
 80177ba:	e01e      	b.n	80177fa <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80177bc:	4b40      	ldr	r3, [pc, #256]	; (80178c0 <RadioIrqProcess+0x2a8>)
 80177be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177c0:	463a      	mov	r2, r7
 80177c2:	4611      	mov	r1, r2
 80177c4:	4618      	mov	r0, r3
 80177c6:	f001 fdd9 	bl	801937c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80177ca:	4b3f      	ldr	r3, [pc, #252]	; (80178c8 <RadioIrqProcess+0x2b0>)
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	689c      	ldr	r4, [r3, #8]
 80177d0:	79fb      	ldrb	r3, [r7, #7]
 80177d2:	b299      	uxth	r1, r3
 80177d4:	4b3a      	ldr	r3, [pc, #232]	; (80178c0 <RadioIrqProcess+0x2a8>)
 80177d6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80177da:	b218      	sxth	r0, r3
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80177e2:	4a3d      	ldr	r2, [pc, #244]	; (80178d8 <RadioIrqProcess+0x2c0>)
 80177e4:	fb82 c203 	smull	ip, r2, r2, r3
 80177e8:	1192      	asrs	r2, r2, #6
 80177ea:	17db      	asrs	r3, r3, #31
 80177ec:	1ad3      	subs	r3, r2, r3
 80177ee:	b25b      	sxtb	r3, r3
 80177f0:	4602      	mov	r2, r0
 80177f2:	4837      	ldr	r0, [pc, #220]	; (80178d0 <RadioIrqProcess+0x2b8>)
 80177f4:	47a0      	blx	r4
                break;
 80177f6:	e000      	b.n	80177fa <RadioIrqProcess+0x1e2>
        }
 80177f8:	bf00      	nop
        break;
 80177fa:	e0b1      	b.n	8017960 <RadioIrqProcess+0x348>
        SUBGRF_SetStandby( STDBY_RC );
 80177fc:	2000      	movs	r0, #0
 80177fe:	f000 fe73 	bl	80184e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017802:	4b31      	ldr	r3, [pc, #196]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	f000 809f 	beq.w	801794a <RadioIrqProcess+0x332>
 801780c:	4b2e      	ldr	r3, [pc, #184]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	699b      	ldr	r3, [r3, #24]
 8017812:	2b00      	cmp	r3, #0
 8017814:	f000 8099 	beq.w	801794a <RadioIrqProcess+0x332>
            RadioEvents->CadDone( false );
 8017818:	4b2b      	ldr	r3, [pc, #172]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	699b      	ldr	r3, [r3, #24]
 801781e:	2000      	movs	r0, #0
 8017820:	4798      	blx	r3
        break;
 8017822:	e092      	b.n	801794a <RadioIrqProcess+0x332>
        SUBGRF_SetStandby( STDBY_RC );
 8017824:	2000      	movs	r0, #0
 8017826:	f000 fe5f 	bl	80184e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801782a:	4b27      	ldr	r3, [pc, #156]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	2b00      	cmp	r3, #0
 8017830:	f000 808d 	beq.w	801794e <RadioIrqProcess+0x336>
 8017834:	4b24      	ldr	r3, [pc, #144]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	699b      	ldr	r3, [r3, #24]
 801783a:	2b00      	cmp	r3, #0
 801783c:	f000 8087 	beq.w	801794e <RadioIrqProcess+0x336>
            RadioEvents->CadDone( true );
 8017840:	4b21      	ldr	r3, [pc, #132]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	699b      	ldr	r3, [r3, #24]
 8017846:	2001      	movs	r0, #1
 8017848:	4798      	blx	r3
        break;
 801784a:	e080      	b.n	801794e <RadioIrqProcess+0x336>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801784c:	f000 fd02 	bl	8018254 <SUBGRF_GetOperatingMode>
 8017850:	4603      	mov	r3, r0
 8017852:	2b04      	cmp	r3, #4
 8017854:	d113      	bne.n	801787e <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 8017856:	481b      	ldr	r0, [pc, #108]	; (80178c4 <RadioIrqProcess+0x2ac>)
 8017858:	f002 fa48 	bl	8019cec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801785c:	2000      	movs	r0, #0
 801785e:	f000 fe43 	bl	80184e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017862:	4b19      	ldr	r3, [pc, #100]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d073      	beq.n	8017952 <RadioIrqProcess+0x33a>
 801786a:	4b17      	ldr	r3, [pc, #92]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	685b      	ldr	r3, [r3, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d06e      	beq.n	8017952 <RadioIrqProcess+0x33a>
                RadioEvents->TxTimeout( );
 8017874:	4b14      	ldr	r3, [pc, #80]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	4798      	blx	r3
        break;
 801787c:	e069      	b.n	8017952 <RadioIrqProcess+0x33a>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801787e:	f000 fce9 	bl	8018254 <SUBGRF_GetOperatingMode>
 8017882:	4603      	mov	r3, r0
 8017884:	2b05      	cmp	r3, #5
 8017886:	d164      	bne.n	8017952 <RadioIrqProcess+0x33a>
            TimerStop( &RxTimeoutTimer );
 8017888:	4810      	ldr	r0, [pc, #64]	; (80178cc <RadioIrqProcess+0x2b4>)
 801788a:	f002 fa2f 	bl	8019cec <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801788e:	2000      	movs	r0, #0
 8017890:	f000 fe2a 	bl	80184e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017894:	4b0c      	ldr	r3, [pc, #48]	; (80178c8 <RadioIrqProcess+0x2b0>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d05a      	beq.n	8017952 <RadioIrqProcess+0x33a>
 801789c:	4b0a      	ldr	r3, [pc, #40]	; (80178c8 <RadioIrqProcess+0x2b0>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d055      	beq.n	8017952 <RadioIrqProcess+0x33a>
                RadioEvents->RxTimeout( );
 80178a6:	4b08      	ldr	r3, [pc, #32]	; (80178c8 <RadioIrqProcess+0x2b0>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	68db      	ldr	r3, [r3, #12]
 80178ac:	4798      	blx	r3
        break;
 80178ae:	e050      	b.n	8017952 <RadioIrqProcess+0x33a>
        if ( 1UL == RFW_Is_Init( ) )
 80178b0:	f001 fe0f 	bl	80194d2 <RFW_Is_Init>
 80178b4:	4603      	mov	r3, r0
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	d14d      	bne.n	8017956 <RadioIrqProcess+0x33e>
            RFW_ReceivePayload( );
 80178ba:	f001 fe40 	bl	801953e <RFW_ReceivePayload>
        break;
 80178be:	e04a      	b.n	8017956 <RadioIrqProcess+0x33e>
 80178c0:	20001c68 	.word	0x20001c68
 80178c4:	20001cc0 	.word	0x20001cc0
 80178c8:	20001c64 	.word	0x20001c64
 80178cc:	20001cd8 	.word	0x20001cd8
 80178d0:	20001b64 	.word	0x20001b64
 80178d4:	20001c8c 	.word	0x20001c8c
 80178d8:	10624dd3 	.word	0x10624dd3
        TimerStop( &RxTimeoutTimer );
 80178dc:	4822      	ldr	r0, [pc, #136]	; (8017968 <RadioIrqProcess+0x350>)
 80178de:	f002 fa05 	bl	8019cec <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80178e2:	4b22      	ldr	r3, [pc, #136]	; (801796c <RadioIrqProcess+0x354>)
 80178e4:	785b      	ldrb	r3, [r3, #1]
 80178e6:	f083 0301 	eor.w	r3, r3, #1
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d002      	beq.n	80178f6 <RadioIrqProcess+0x2de>
            SUBGRF_SetStandby( STDBY_RC );
 80178f0:	2000      	movs	r0, #0
 80178f2:	f000 fdf9 	bl	80184e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80178f6:	4b1e      	ldr	r3, [pc, #120]	; (8017970 <RadioIrqProcess+0x358>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d02d      	beq.n	801795a <RadioIrqProcess+0x342>
 80178fe:	4b1c      	ldr	r3, [pc, #112]	; (8017970 <RadioIrqProcess+0x358>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	68db      	ldr	r3, [r3, #12]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d028      	beq.n	801795a <RadioIrqProcess+0x342>
            RadioEvents->RxTimeout( );
 8017908:	4b19      	ldr	r3, [pc, #100]	; (8017970 <RadioIrqProcess+0x358>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	68db      	ldr	r3, [r3, #12]
 801790e:	4798      	blx	r3
        break;
 8017910:	e023      	b.n	801795a <RadioIrqProcess+0x342>
        if( SubgRf.RxContinuous == false )
 8017912:	4b16      	ldr	r3, [pc, #88]	; (801796c <RadioIrqProcess+0x354>)
 8017914:	785b      	ldrb	r3, [r3, #1]
 8017916:	f083 0301 	eor.w	r3, r3, #1
 801791a:	b2db      	uxtb	r3, r3
 801791c:	2b00      	cmp	r3, #0
 801791e:	d002      	beq.n	8017926 <RadioIrqProcess+0x30e>
            SUBGRF_SetStandby( STDBY_RC );
 8017920:	2000      	movs	r0, #0
 8017922:	f000 fde1 	bl	80184e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017926:	4b12      	ldr	r3, [pc, #72]	; (8017970 <RadioIrqProcess+0x358>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d017      	beq.n	801795e <RadioIrqProcess+0x346>
 801792e:	4b10      	ldr	r3, [pc, #64]	; (8017970 <RadioIrqProcess+0x358>)
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	691b      	ldr	r3, [r3, #16]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d012      	beq.n	801795e <RadioIrqProcess+0x346>
            RadioEvents->RxError( );
 8017938:	4b0d      	ldr	r3, [pc, #52]	; (8017970 <RadioIrqProcess+0x358>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	691b      	ldr	r3, [r3, #16]
 801793e:	4798      	blx	r3
        break;
 8017940:	e00d      	b.n	801795e <RadioIrqProcess+0x346>
        break;
 8017942:	bf00      	nop
 8017944:	e00c      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 8017946:	bf00      	nop
 8017948:	e00a      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 801794a:	bf00      	nop
 801794c:	e008      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 801794e:	bf00      	nop
 8017950:	e006      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 8017952:	bf00      	nop
 8017954:	e004      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 8017956:	bf00      	nop
 8017958:	e002      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 801795a:	bf00      	nop
 801795c:	e000      	b.n	8017960 <RadioIrqProcess+0x348>
        break;
 801795e:	bf00      	nop
  }
}
 8017960:	bf00      	nop
 8017962:	370c      	adds	r7, #12
 8017964:	46bd      	mov	sp, r7
 8017966:	bd90      	pop	{r4, r7, pc}
 8017968:	20001cd8 	.word	0x20001cd8
 801796c:	20001c68 	.word	0x20001c68
 8017970:	20001c64 	.word	0x20001c64

08017974 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017974:	b580      	push	{r7, lr}
 8017976:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017978:	4b09      	ldr	r3, [pc, #36]	; (80179a0 <RadioTxPrbs+0x2c>)
 801797a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801797e:	2101      	movs	r1, #1
 8017980:	4618      	mov	r0, r3
 8017982:	f001 fbbd 	bl	8019100 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017986:	4b07      	ldr	r3, [pc, #28]	; (80179a4 <RadioTxPrbs+0x30>)
 8017988:	212d      	movs	r1, #45	; 0x2d
 801798a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801798e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017990:	f000 fe6d 	bl	801866e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017994:	4804      	ldr	r0, [pc, #16]	; (80179a8 <RadioTxPrbs+0x34>)
 8017996:	f000 fdc3 	bl	8018520 <SUBGRF_SetTx>
}
 801799a:	bf00      	nop
 801799c:	bd80      	pop	{r7, pc}
 801799e:	bf00      	nop
 80179a0:	20001c68 	.word	0x20001c68
 80179a4:	08017427 	.word	0x08017427
 80179a8:	000fffff 	.word	0x000fffff

080179ac <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	4603      	mov	r3, r0
 80179b4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80179b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179ba:	4618      	mov	r0, r3
 80179bc:	f001 fbc8 	bl	8019150 <SUBGRF_SetRfTxPower>
 80179c0:	4603      	mov	r3, r0
 80179c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80179c4:	7bfb      	ldrb	r3, [r7, #15]
 80179c6:	2101      	movs	r1, #1
 80179c8:	4618      	mov	r0, r3
 80179ca:	f001 fb99 	bl	8019100 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80179ce:	f000 fe45 	bl	801865c <SUBGRF_SetTxContinuousWave>
}
 80179d2:	bf00      	nop
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80179da:	b480      	push	{r7}
 80179dc:	b089      	sub	sp, #36	; 0x24
 80179de:	af00      	add	r7, sp, #0
 80179e0:	60f8      	str	r0, [r7, #12]
 80179e2:	60b9      	str	r1, [r7, #8]
 80179e4:	4613      	mov	r3, r2
 80179e6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80179e8:	2300      	movs	r3, #0
 80179ea:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 80179ec:	2300      	movs	r3, #0
 80179ee:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80179f0:	2300      	movs	r3, #0
 80179f2:	61bb      	str	r3, [r7, #24]
 80179f4:	e011      	b.n	8017a1a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80179f6:	69bb      	ldr	r3, [r7, #24]
 80179f8:	68ba      	ldr	r2, [r7, #8]
 80179fa:	4413      	add	r3, r2
 80179fc:	781a      	ldrb	r2, [r3, #0]
 80179fe:	69bb      	ldr	r3, [r7, #24]
 8017a00:	68b9      	ldr	r1, [r7, #8]
 8017a02:	440b      	add	r3, r1
 8017a04:	43d2      	mvns	r2, r2
 8017a06:	b2d2      	uxtb	r2, r2
 8017a08:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017a0a:	69bb      	ldr	r3, [r7, #24]
 8017a0c:	68fa      	ldr	r2, [r7, #12]
 8017a0e:	4413      	add	r3, r2
 8017a10:	2200      	movs	r2, #0
 8017a12:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017a14:	69bb      	ldr	r3, [r7, #24]
 8017a16:	3301      	adds	r3, #1
 8017a18:	61bb      	str	r3, [r7, #24]
 8017a1a:	79fb      	ldrb	r3, [r7, #7]
 8017a1c:	69ba      	ldr	r2, [r7, #24]
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	dbe9      	blt.n	80179f6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017a22:	2300      	movs	r3, #0
 8017a24:	61bb      	str	r3, [r7, #24]
 8017a26:	e049      	b.n	8017abc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017a28:	69bb      	ldr	r3, [r7, #24]
 8017a2a:	425a      	negs	r2, r3
 8017a2c:	f003 0307 	and.w	r3, r3, #7
 8017a30:	f002 0207 	and.w	r2, r2, #7
 8017a34:	bf58      	it	pl
 8017a36:	4253      	negpl	r3, r2
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	f1c3 0307 	rsb	r3, r3, #7
 8017a3e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017a40:	69bb      	ldr	r3, [r7, #24]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	da00      	bge.n	8017a48 <payload_integration+0x6e>
 8017a46:	3307      	adds	r3, #7
 8017a48:	10db      	asrs	r3, r3, #3
 8017a4a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017a4c:	69bb      	ldr	r3, [r7, #24]
 8017a4e:	3301      	adds	r3, #1
 8017a50:	425a      	negs	r2, r3
 8017a52:	f003 0307 	and.w	r3, r3, #7
 8017a56:	f002 0207 	and.w	r2, r2, #7
 8017a5a:	bf58      	it	pl
 8017a5c:	4253      	negpl	r3, r2
 8017a5e:	b2db      	uxtb	r3, r3
 8017a60:	f1c3 0307 	rsb	r3, r3, #7
 8017a64:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017a66:	69bb      	ldr	r3, [r7, #24]
 8017a68:	3301      	adds	r3, #1
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	da00      	bge.n	8017a70 <payload_integration+0x96>
 8017a6e:	3307      	adds	r3, #7
 8017a70:	10db      	asrs	r3, r3, #3
 8017a72:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017a74:	7dbb      	ldrb	r3, [r7, #22]
 8017a76:	68ba      	ldr	r2, [r7, #8]
 8017a78:	4413      	add	r3, r2
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	7dfb      	ldrb	r3, [r7, #23]
 8017a80:	fa42 f303 	asr.w	r3, r2, r3
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	f003 0301 	and.w	r3, r3, #1
 8017a8a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017a8c:	7ffa      	ldrb	r2, [r7, #31]
 8017a8e:	7cfb      	ldrb	r3, [r7, #19]
 8017a90:	4053      	eors	r3, r2
 8017a92:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017a94:	7d3b      	ldrb	r3, [r7, #20]
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	4413      	add	r3, r2
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	b25a      	sxtb	r2, r3
 8017a9e:	7ff9      	ldrb	r1, [r7, #31]
 8017aa0:	7d7b      	ldrb	r3, [r7, #21]
 8017aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8017aa6:	b25b      	sxtb	r3, r3
 8017aa8:	4313      	orrs	r3, r2
 8017aaa:	b259      	sxtb	r1, r3
 8017aac:	7d3b      	ldrb	r3, [r7, #20]
 8017aae:	68fa      	ldr	r2, [r7, #12]
 8017ab0:	4413      	add	r3, r2
 8017ab2:	b2ca      	uxtb	r2, r1
 8017ab4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	61bb      	str	r3, [r7, #24]
 8017abc:	79fb      	ldrb	r3, [r7, #7]
 8017abe:	00db      	lsls	r3, r3, #3
 8017ac0:	69ba      	ldr	r2, [r7, #24]
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	dbb0      	blt.n	8017a28 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017ac6:	7ffb      	ldrb	r3, [r7, #31]
 8017ac8:	01db      	lsls	r3, r3, #7
 8017aca:	b25a      	sxtb	r2, r3
 8017acc:	7ffb      	ldrb	r3, [r7, #31]
 8017ace:	019b      	lsls	r3, r3, #6
 8017ad0:	b25b      	sxtb	r3, r3
 8017ad2:	4313      	orrs	r3, r2
 8017ad4:	b25b      	sxtb	r3, r3
 8017ad6:	7ffa      	ldrb	r2, [r7, #31]
 8017ad8:	2a00      	cmp	r2, #0
 8017ada:	d101      	bne.n	8017ae0 <payload_integration+0x106>
 8017adc:	2220      	movs	r2, #32
 8017ade:	e000      	b.n	8017ae2 <payload_integration+0x108>
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	4313      	orrs	r3, r2
 8017ae4:	b259      	sxtb	r1, r3
 8017ae6:	79fb      	ldrb	r3, [r7, #7]
 8017ae8:	68fa      	ldr	r2, [r7, #12]
 8017aea:	4413      	add	r3, r2
 8017aec:	b2ca      	uxtb	r2, r1
 8017aee:	701a      	strb	r2, [r3, #0]
}
 8017af0:	bf00      	nop
 8017af2:	3724      	adds	r7, #36	; 0x24
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bc80      	pop	{r7}
 8017af8:	4770      	bx	lr
	...

08017afc <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b08c      	sub	sp, #48	; 0x30
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60b9      	str	r1, [r7, #8]
 8017b04:	607a      	str	r2, [r7, #4]
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	4603      	mov	r3, r0
 8017b0a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017b10:	2300      	movs	r3, #0
 8017b12:	61fb      	str	r3, [r7, #28]
 8017b14:	2300      	movs	r3, #0
 8017b16:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017b18:	f001 fcd5 	bl	80194c6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d001      	beq.n	8017b26 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017b22:	2300      	movs	r3, #0
 8017b24:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	bf14      	ite	ne
 8017b2c:	2301      	movne	r3, #1
 8017b2e:	2300      	moveq	r3, #0
 8017b30:	b2da      	uxtb	r2, r3
 8017b32:	4b9f      	ldr	r3, [pc, #636]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017b34:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017b36:	7bfb      	ldrb	r3, [r7, #15]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d003      	beq.n	8017b44 <RadioSetRxGenericConfig+0x48>
 8017b3c:	2b01      	cmp	r3, #1
 8017b3e:	f000 80e8 	beq.w	8017d12 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017b42:	e1a0      	b.n	8017e86 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	68db      	ldr	r3, [r3, #12]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d003      	beq.n	8017b54 <RadioSetRxGenericConfig+0x58>
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	691b      	ldr	r3, [r3, #16]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d102      	bne.n	8017b5a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017b54:	f04f 33ff 	mov.w	r3, #4294967295
 8017b58:	e196      	b.n	8017e88 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	7d5b      	ldrb	r3, [r3, #21]
 8017b5e:	2b08      	cmp	r3, #8
 8017b60:	d902      	bls.n	8017b68 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017b62:	f04f 33ff 	mov.w	r3, #4294967295
 8017b66:	e18f      	b.n	8017e88 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017b68:	2300      	movs	r3, #0
 8017b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b6c:	e00d      	b.n	8017b8a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	699a      	ldr	r2, [r3, #24]
 8017b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b74:	4413      	add	r3, r2
 8017b76:	7819      	ldrb	r1, [r3, #0]
 8017b78:	f107 021c 	add.w	r2, r7, #28
 8017b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b7e:	4413      	add	r3, r2
 8017b80:	460a      	mov	r2, r1
 8017b82:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b86:	3301      	adds	r3, #1
 8017b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	7d5b      	ldrb	r3, [r3, #21]
 8017b8e:	461a      	mov	r2, r3
 8017b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b92:	4293      	cmp	r3, r2
 8017b94:	dbeb      	blt.n	8017b6e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	bf14      	ite	ne
 8017b9e:	2301      	movne	r3, #1
 8017ba0:	2300      	moveq	r3, #0
 8017ba2:	b2db      	uxtb	r3, r3
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f000 fd6b 	bl	8018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017baa:	4b81      	ldr	r3, [pc, #516]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bac:	2200      	movs	r2, #0
 8017bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	68db      	ldr	r3, [r3, #12]
 8017bb6:	4a7e      	ldr	r2, [pc, #504]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bb8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017bba:	68bb      	ldr	r3, [r7, #8]
 8017bbc:	791a      	ldrb	r2, [r3, #4]
 8017bbe:	4b7c      	ldr	r3, [pc, #496]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	689b      	ldr	r3, [r3, #8]
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f001 fbaf 	bl	801932c <SUBGRF_GetFskBandwidthRegValue>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	4b77      	ldr	r3, [pc, #476]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017bd8:	4b75      	ldr	r3, [pc, #468]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bda:	2200      	movs	r2, #0
 8017bdc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017bde:	68bb      	ldr	r3, [r7, #8]
 8017be0:	691b      	ldr	r3, [r3, #16]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	00db      	lsls	r3, r3, #3
 8017be6:	b29a      	uxth	r2, r3
 8017be8:	4b71      	ldr	r3, [pc, #452]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bea:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	7d1a      	ldrb	r2, [r3, #20]
 8017bf0:	4b6f      	ldr	r3, [pc, #444]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bf2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	7d5b      	ldrb	r3, [r3, #21]
 8017bf8:	00db      	lsls	r3, r3, #3
 8017bfa:	b2da      	uxtb	r2, r3
 8017bfc:	4b6c      	ldr	r3, [pc, #432]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017bfe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017c06:	4b6a      	ldr	r3, [pc, #424]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c08:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d105      	bne.n	8017c20 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	69db      	ldr	r3, [r3, #28]
 8017c18:	b2da      	uxtb	r2, r3
 8017c1a:	4b65      	ldr	r3, [pc, #404]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c1c:	759a      	strb	r2, [r3, #22]
 8017c1e:	e00b      	b.n	8017c38 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c26:	2b02      	cmp	r3, #2
 8017c28:	d103      	bne.n	8017c32 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017c2a:	4b61      	ldr	r3, [pc, #388]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c2c:	22ff      	movs	r2, #255	; 0xff
 8017c2e:	759a      	strb	r2, [r3, #22]
 8017c30:	e002      	b.n	8017c38 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017c32:	4b5f      	ldr	r3, [pc, #380]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c34:	22ff      	movs	r2, #255	; 0xff
 8017c36:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017c38:	68bb      	ldr	r3, [r7, #8]
 8017c3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017c3e:	2b02      	cmp	r3, #2
 8017c40:	d004      	beq.n	8017c4c <RadioSetRxGenericConfig+0x150>
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c48:	2b02      	cmp	r3, #2
 8017c4a:	d12d      	bne.n	8017ca8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c52:	2bf1      	cmp	r3, #241	; 0xf1
 8017c54:	d00c      	beq.n	8017c70 <RadioSetRxGenericConfig+0x174>
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c5c:	2bf2      	cmp	r3, #242	; 0xf2
 8017c5e:	d007      	beq.n	8017c70 <RadioSetRxGenericConfig+0x174>
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c66:	2b01      	cmp	r3, #1
 8017c68:	d002      	beq.n	8017c70 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6e:	e10b      	b.n	8017e88 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017c70:	2300      	movs	r3, #0
 8017c72:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017c74:	68bb      	ldr	r3, [r7, #8]
 8017c76:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017c78:	4b4e      	ldr	r3, [pc, #312]	; (8017db4 <RadioSetRxGenericConfig+0x2b8>)
 8017c7a:	6819      	ldr	r1, [r3, #0]
 8017c7c:	f107 0310 	add.w	r3, r7, #16
 8017c80:	4a4d      	ldr	r2, [pc, #308]	; (8017db8 <RadioSetRxGenericConfig+0x2bc>)
 8017c82:	4618      	mov	r0, r3
 8017c84:	f001 fc12 	bl	80194ac <RFW_Init>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <RadioSetRxGenericConfig+0x198>
            return -1;
 8017c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c92:	e0f9      	b.n	8017e88 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017c94:	4b46      	ldr	r3, [pc, #280]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c96:	2200      	movs	r2, #0
 8017c98:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017c9a:	4b45      	ldr	r3, [pc, #276]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017c9c:	2201      	movs	r2, #1
 8017c9e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017ca0:	4b43      	ldr	r3, [pc, #268]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	755a      	strb	r2, [r3, #21]
        {
 8017ca6:	e00e      	b.n	8017cc6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017cae:	4b40      	ldr	r3, [pc, #256]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017cb0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017cb8:	4b3d      	ldr	r3, [pc, #244]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017cba:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017cc2:	4b3b      	ldr	r3, [pc, #236]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017cc4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017cc6:	f7ff fac8 	bl	801725a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017cca:	2000      	movs	r0, #0
 8017ccc:	f7fe fc60 	bl	8016590 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017cd0:	483a      	ldr	r0, [pc, #232]	; (8017dbc <RadioSetRxGenericConfig+0x2c0>)
 8017cd2:	f000 ff07 	bl	8018ae4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017cd6:	483a      	ldr	r0, [pc, #232]	; (8017dc0 <RadioSetRxGenericConfig+0x2c4>)
 8017cd8:	f000 ffd6 	bl	8018c88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017cdc:	f107 031c 	add.w	r3, r7, #28
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f000 fb06 	bl	80182f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	8c1b      	ldrh	r3, [r3, #32]
 8017cea:	4618      	mov	r0, r3
 8017cec:	f000 fb50 	bl	8018390 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f000 fb2b 	bl	8018350 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017d00:	fb03 f202 	mul.w	r2, r3, r2
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	68db      	ldr	r3, [r3, #12]
 8017d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d0c:	4a28      	ldr	r2, [pc, #160]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d0e:	6093      	str	r3, [r2, #8]
        break;
 8017d10:	e0b9      	b.n	8017e86 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d102      	bne.n	8017d20 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d1e:	e0b3      	b.n	8017e88 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017d26:	2b01      	cmp	r3, #1
 8017d28:	d104      	bne.n	8017d34 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	69db      	ldr	r3, [r3, #28]
 8017d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017d32:	e002      	b.n	8017d3a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017d34:	23ff      	movs	r3, #255	; 0xff
 8017d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	bf14      	ite	ne
 8017d42:	2301      	movne	r3, #1
 8017d44:	2300      	moveq	r3, #0
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f000 fc99 	bl	8018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017d4e:	683b      	ldr	r3, [r7, #0]
 8017d50:	b2db      	uxtb	r3, r3
 8017d52:	4618      	mov	r0, r3
 8017d54:	f000 fca3 	bl	801869e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017d58:	4b15      	ldr	r3, [pc, #84]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d5a:	2201      	movs	r2, #1
 8017d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017d66:	4b12      	ldr	r3, [pc, #72]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017d72:	4b0f      	ldr	r3, [pc, #60]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017d7e:	4b0c      	ldr	r3, [pc, #48]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017d84:	68bb      	ldr	r3, [r7, #8]
 8017d86:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017d8a:	2b02      	cmp	r3, #2
 8017d8c:	d01a      	beq.n	8017dc4 <RadioSetRxGenericConfig+0x2c8>
 8017d8e:	2b02      	cmp	r3, #2
 8017d90:	dc2c      	bgt.n	8017dec <RadioSetRxGenericConfig+0x2f0>
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d002      	beq.n	8017d9c <RadioSetRxGenericConfig+0x2a0>
 8017d96:	2b01      	cmp	r3, #1
 8017d98:	d005      	beq.n	8017da6 <RadioSetRxGenericConfig+0x2aa>
            break;
 8017d9a:	e027      	b.n	8017dec <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017d9c:	4b04      	ldr	r3, [pc, #16]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017d9e:	2200      	movs	r2, #0
 8017da0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017da4:	e023      	b.n	8017dee <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017da6:	4b02      	ldr	r3, [pc, #8]	; (8017db0 <RadioSetRxGenericConfig+0x2b4>)
 8017da8:	2201      	movs	r2, #1
 8017daa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017dae:	e01e      	b.n	8017dee <RadioSetRxGenericConfig+0x2f2>
 8017db0:	20001c68 	.word	0x20001c68
 8017db4:	20001c64 	.word	0x20001c64
 8017db8:	20001cd8 	.word	0x20001cd8
 8017dbc:	20001ca0 	.word	0x20001ca0
 8017dc0:	20001c76 	.word	0x20001c76
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dca:	2b0b      	cmp	r3, #11
 8017dcc:	d004      	beq.n	8017dd8 <RadioSetRxGenericConfig+0x2dc>
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017dd4:	2b0c      	cmp	r3, #12
 8017dd6:	d104      	bne.n	8017de2 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017dd8:	4b2d      	ldr	r3, [pc, #180]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017dda:	2201      	movs	r2, #1
 8017ddc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017de0:	e005      	b.n	8017dee <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017de2:	4b2b      	ldr	r3, [pc, #172]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017de4:	2200      	movs	r2, #0
 8017de6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017dea:	e000      	b.n	8017dee <RadioSetRxGenericConfig+0x2f2>
            break;
 8017dec:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017dee:	4b28      	ldr	r3, [pc, #160]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017df0:	2201      	movs	r2, #1
 8017df2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017df8:	4b25      	ldr	r3, [pc, #148]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017dfa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017e02:	4b23      	ldr	r3, [pc, #140]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e04:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017e06:	4a22      	ldr	r2, [pc, #136]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e0c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017e14:	4b1e      	ldr	r3, [pc, #120]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e16:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017e20:	4b1b      	ldr	r3, [pc, #108]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017e26:	f7ff fa18 	bl	801725a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017e2a:	2001      	movs	r0, #1
 8017e2c:	f7fe fbb0 	bl	8016590 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e30:	4818      	ldr	r0, [pc, #96]	; (8017e94 <RadioSetRxGenericConfig+0x398>)
 8017e32:	f000 fe57 	bl	8018ae4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e36:	4818      	ldr	r0, [pc, #96]	; (8017e98 <RadioSetRxGenericConfig+0x39c>)
 8017e38:	f000 ff26 	bl	8018c88 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017e3c:	4b14      	ldr	r3, [pc, #80]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017e42:	2b01      	cmp	r3, #1
 8017e44:	d10d      	bne.n	8017e62 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017e46:	f240 7036 	movw	r0, #1846	; 0x736
 8017e4a:	f001 f879 	bl	8018f40 <SUBGRF_ReadRegister>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	f023 0304 	bic.w	r3, r3, #4
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	4619      	mov	r1, r3
 8017e58:	f240 7036 	movw	r0, #1846	; 0x736
 8017e5c:	f001 f85c 	bl	8018f18 <SUBGRF_WriteRegister>
 8017e60:	e00c      	b.n	8017e7c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017e62:	f240 7036 	movw	r0, #1846	; 0x736
 8017e66:	f001 f86b 	bl	8018f40 <SUBGRF_ReadRegister>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	f043 0304 	orr.w	r3, r3, #4
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	4619      	mov	r1, r3
 8017e74:	f240 7036 	movw	r0, #1846	; 0x736
 8017e78:	f001 f84e 	bl	8018f18 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017e7c:	4b04      	ldr	r3, [pc, #16]	; (8017e90 <RadioSetRxGenericConfig+0x394>)
 8017e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e82:	609a      	str	r2, [r3, #8]
        break;
 8017e84:	bf00      	nop
    }
    return status;
 8017e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3730      	adds	r7, #48	; 0x30
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	20001c68 	.word	0x20001c68
 8017e94:	20001ca0 	.word	0x20001ca0
 8017e98:	20001c76 	.word	0x20001c76

08017e9c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b08a      	sub	sp, #40	; 0x28
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	60b9      	str	r1, [r7, #8]
 8017ea4:	607b      	str	r3, [r7, #4]
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	73fb      	strb	r3, [r7, #15]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8017eae:	2300      	movs	r3, #0
 8017eb0:	61fb      	str	r3, [r7, #28]
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017eb6:	f001 fb06 	bl	80194c6 <RFW_DeInit>
    switch( modem )
 8017eba:	7bfb      	ldrb	r3, [r7, #15]
 8017ebc:	2b02      	cmp	r3, #2
 8017ebe:	f000 8144 	beq.w	801814a <RadioSetTxGenericConfig+0x2ae>
 8017ec2:	2b02      	cmp	r3, #2
 8017ec4:	f300 8160 	bgt.w	8018188 <RadioSetTxGenericConfig+0x2ec>
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d003      	beq.n	8017ed4 <RadioSetTxGenericConfig+0x38>
 8017ecc:	2b01      	cmp	r3, #1
 8017ece:	f000 80b7 	beq.w	8018040 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8017ed2:	e159      	b.n	8018188 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	689b      	ldr	r3, [r3, #8]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d003      	beq.n	8017ee4 <RadioSetTxGenericConfig+0x48>
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	691b      	ldr	r3, [r3, #16]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d102      	bne.n	8017eea <RadioSetTxGenericConfig+0x4e>
            return -1;
 8017ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee8:	e163      	b.n	80181b2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	7d1b      	ldrb	r3, [r3, #20]
 8017eee:	2b08      	cmp	r3, #8
 8017ef0:	d902      	bls.n	8017ef8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8017ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ef6:	e15c      	b.n	80181b2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017ef8:	2300      	movs	r3, #0
 8017efa:	627b      	str	r3, [r7, #36]	; 0x24
 8017efc:	e00d      	b.n	8017f1a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	699a      	ldr	r2, [r3, #24]
 8017f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f04:	4413      	add	r3, r2
 8017f06:	7819      	ldrb	r1, [r3, #0]
 8017f08:	f107 021c 	add.w	r2, r7, #28
 8017f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0e:	4413      	add	r3, r2
 8017f10:	460a      	mov	r2, r1
 8017f12:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f16:	3301      	adds	r3, #1
 8017f18:	627b      	str	r3, [r7, #36]	; 0x24
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	7d1b      	ldrb	r3, [r3, #20]
 8017f1e:	461a      	mov	r2, r3
 8017f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f22:	4293      	cmp	r3, r2
 8017f24:	dbeb      	blt.n	8017efe <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f26:	4ba5      	ldr	r3, [pc, #660]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f28:	2200      	movs	r2, #0
 8017f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	689b      	ldr	r3, [r3, #8]
 8017f32:	4aa2      	ldr	r2, [pc, #648]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f34:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	781a      	ldrb	r2, [r3, #0]
 8017f3a:	4ba0      	ldr	r3, [pc, #640]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	4618      	mov	r0, r3
 8017f46:	f001 f9f1 	bl	801932c <SUBGRF_GetFskBandwidthRegValue>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	4b9b      	ldr	r3, [pc, #620]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	68db      	ldr	r3, [r3, #12]
 8017f58:	4a98      	ldr	r2, [pc, #608]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f5a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f5c:	4b97      	ldr	r3, [pc, #604]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	691b      	ldr	r3, [r3, #16]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	00db      	lsls	r3, r3, #3
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	4b93      	ldr	r3, [pc, #588]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f6e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8017f70:	4b92      	ldr	r3, [pc, #584]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f72:	2204      	movs	r2, #4
 8017f74:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	7d1b      	ldrb	r3, [r3, #20]
 8017f7a:	00db      	lsls	r3, r3, #3
 8017f7c:	b2da      	uxtb	r2, r3
 8017f7e:	4b8f      	ldr	r3, [pc, #572]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f80:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8017f82:	4b8e      	ldr	r3, [pc, #568]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017f84:	2200      	movs	r2, #0
 8017f86:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f8e:	2b02      	cmp	r3, #2
 8017f90:	d003      	beq.n	8017f9a <RadioSetTxGenericConfig+0xfe>
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	7f9b      	ldrb	r3, [r3, #30]
 8017f96:	2b02      	cmp	r3, #2
 8017f98:	d12a      	bne.n	8017ff0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	7fdb      	ldrb	r3, [r3, #31]
 8017f9e:	2bf1      	cmp	r3, #241	; 0xf1
 8017fa0:	d00a      	beq.n	8017fb8 <RadioSetTxGenericConfig+0x11c>
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	7fdb      	ldrb	r3, [r3, #31]
 8017fa6:	2bf2      	cmp	r3, #242	; 0xf2
 8017fa8:	d006      	beq.n	8017fb8 <RadioSetTxGenericConfig+0x11c>
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	7fdb      	ldrb	r3, [r3, #31]
 8017fae:	2b01      	cmp	r3, #1
 8017fb0:	d002      	beq.n	8017fb8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8017fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb6:	e0fc      	b.n	80181b2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8017fb8:	2301      	movs	r3, #1
 8017fba:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8017fc0:	4b7f      	ldr	r3, [pc, #508]	; (80181c0 <RadioSetTxGenericConfig+0x324>)
 8017fc2:	6819      	ldr	r1, [r3, #0]
 8017fc4:	f107 0310 	add.w	r3, r7, #16
 8017fc8:	4a7e      	ldr	r2, [pc, #504]	; (80181c4 <RadioSetTxGenericConfig+0x328>)
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f001 fa6e 	bl	80194ac <RFW_Init>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d002      	beq.n	8017fdc <RadioSetTxGenericConfig+0x140>
              return -1;
 8017fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017fda:	e0ea      	b.n	80181b2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017fdc:	4b77      	ldr	r3, [pc, #476]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017fde:	2200      	movs	r2, #0
 8017fe0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8017fe2:	4b76      	ldr	r3, [pc, #472]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017fe4:	2201      	movs	r2, #1
 8017fe6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017fe8:	4b74      	ldr	r3, [pc, #464]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017fea:	2200      	movs	r2, #0
 8017fec:	755a      	strb	r2, [r3, #21]
        {
 8017fee:	e00c      	b.n	801800a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	7fda      	ldrb	r2, [r3, #31]
 8017ff4:	4b71      	ldr	r3, [pc, #452]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8017ff6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017ffe:	4b6f      	ldr	r3, [pc, #444]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018000:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	7f9a      	ldrb	r2, [r3, #30]
 8018006:	4b6d      	ldr	r3, [pc, #436]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018008:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801800a:	f7ff f926 	bl	801725a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801800e:	2000      	movs	r0, #0
 8018010:	f7fe fabe 	bl	8016590 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018014:	486c      	ldr	r0, [pc, #432]	; (80181c8 <RadioSetTxGenericConfig+0x32c>)
 8018016:	f000 fd65 	bl	8018ae4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801801a:	486c      	ldr	r0, [pc, #432]	; (80181cc <RadioSetTxGenericConfig+0x330>)
 801801c:	f000 fe34 	bl	8018c88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018020:	f107 031c 	add.w	r3, r7, #28
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f964 	bl	80182f2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	8b9b      	ldrh	r3, [r3, #28]
 801802e:	4618      	mov	r0, r3
 8018030:	f000 f9ae 	bl	8018390 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	8c1b      	ldrh	r3, [r3, #32]
 8018038:	4618      	mov	r0, r3
 801803a:	f000 f989 	bl	8018350 <SUBGRF_SetCrcPolynomial>
        break;
 801803e:	e0a4      	b.n	801818a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018040:	4b5e      	ldr	r3, [pc, #376]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018042:	2201      	movs	r2, #1
 8018044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801804e:	4b5b      	ldr	r3, [pc, #364]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801805a:	4b58      	ldr	r3, [pc, #352]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 801805c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018060:	68bb      	ldr	r3, [r7, #8]
 8018062:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018066:	4b55      	ldr	r3, [pc, #340]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018068:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018072:	2b02      	cmp	r3, #2
 8018074:	d010      	beq.n	8018098 <RadioSetTxGenericConfig+0x1fc>
 8018076:	2b02      	cmp	r3, #2
 8018078:	dc22      	bgt.n	80180c0 <RadioSetTxGenericConfig+0x224>
 801807a:	2b00      	cmp	r3, #0
 801807c:	d002      	beq.n	8018084 <RadioSetTxGenericConfig+0x1e8>
 801807e:	2b01      	cmp	r3, #1
 8018080:	d005      	beq.n	801808e <RadioSetTxGenericConfig+0x1f2>
            break;
 8018082:	e01d      	b.n	80180c0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018084:	4b4d      	ldr	r3, [pc, #308]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018086:	2200      	movs	r2, #0
 8018088:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801808c:	e019      	b.n	80180c2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801808e:	4b4b      	ldr	r3, [pc, #300]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018090:	2201      	movs	r2, #1
 8018092:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018096:	e014      	b.n	80180c2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801809e:	2b0b      	cmp	r3, #11
 80180a0:	d004      	beq.n	80180ac <RadioSetTxGenericConfig+0x210>
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180a8:	2b0c      	cmp	r3, #12
 80180aa:	d104      	bne.n	80180b6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80180ac:	4b43      	ldr	r3, [pc, #268]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80180b4:	e005      	b.n	80180c2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80180b6:	4b41      	ldr	r3, [pc, #260]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180b8:	2200      	movs	r2, #0
 80180ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80180be:	e000      	b.n	80180c2 <RadioSetTxGenericConfig+0x226>
            break;
 80180c0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80180c2:	4b3e      	ldr	r3, [pc, #248]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180c4:	2201      	movs	r2, #1
 80180c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80180cc:	4b3b      	ldr	r3, [pc, #236]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180ce:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80180d6:	4b39      	ldr	r3, [pc, #228]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180d8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80180e0:	4b36      	ldr	r3, [pc, #216]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180e2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80180e6:	68bb      	ldr	r3, [r7, #8]
 80180e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80180ec:	4b33      	ldr	r3, [pc, #204]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80180ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80180f2:	f7ff f8b2 	bl	801725a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80180f6:	2001      	movs	r0, #1
 80180f8:	f7fe fa4a 	bl	8016590 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80180fc:	4832      	ldr	r0, [pc, #200]	; (80181c8 <RadioSetTxGenericConfig+0x32c>)
 80180fe:	f000 fcf1 	bl	8018ae4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018102:	4832      	ldr	r0, [pc, #200]	; (80181cc <RadioSetTxGenericConfig+0x330>)
 8018104:	f000 fdc0 	bl	8018c88 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018108:	4b2c      	ldr	r3, [pc, #176]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 801810a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801810e:	2b06      	cmp	r3, #6
 8018110:	d10d      	bne.n	801812e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018112:	f640 0089 	movw	r0, #2185	; 0x889
 8018116:	f000 ff13 	bl	8018f40 <SUBGRF_ReadRegister>
 801811a:	4603      	mov	r3, r0
 801811c:	f023 0304 	bic.w	r3, r3, #4
 8018120:	b2db      	uxtb	r3, r3
 8018122:	4619      	mov	r1, r3
 8018124:	f640 0089 	movw	r0, #2185	; 0x889
 8018128:	f000 fef6 	bl	8018f18 <SUBGRF_WriteRegister>
        break;
 801812c:	e02d      	b.n	801818a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801812e:	f640 0089 	movw	r0, #2185	; 0x889
 8018132:	f000 ff05 	bl	8018f40 <SUBGRF_ReadRegister>
 8018136:	4603      	mov	r3, r0
 8018138:	f043 0304 	orr.w	r3, r3, #4
 801813c:	b2db      	uxtb	r3, r3
 801813e:	4619      	mov	r1, r3
 8018140:	f640 0089 	movw	r0, #2185	; 0x889
 8018144:	f000 fee8 	bl	8018f18 <SUBGRF_WriteRegister>
        break;
 8018148:	e01f      	b.n	801818a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801814e:	2b00      	cmp	r3, #0
 8018150:	d004      	beq.n	801815c <RadioSetTxGenericConfig+0x2c0>
 8018152:	68bb      	ldr	r3, [r7, #8]
 8018154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801815a:	d902      	bls.n	8018162 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801815c:	f04f 33ff 	mov.w	r3, #4294967295
 8018160:	e027      	b.n	80181b2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8018162:	2002      	movs	r0, #2
 8018164:	f7fe fa14 	bl	8016590 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018168:	4b14      	ldr	r3, [pc, #80]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 801816a:	2202      	movs	r2, #2
 801816c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018174:	4a11      	ldr	r2, [pc, #68]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 8018176:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018178:	4b10      	ldr	r3, [pc, #64]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 801817a:	2216      	movs	r2, #22
 801817c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018180:	4811      	ldr	r0, [pc, #68]	; (80181c8 <RadioSetTxGenericConfig+0x32c>)
 8018182:	f000 fcaf 	bl	8018ae4 <SUBGRF_SetModulationParams>
        break;
 8018186:	e000      	b.n	801818a <RadioSetTxGenericConfig+0x2ee>
        break;
 8018188:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801818a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801818e:	4618      	mov	r0, r3
 8018190:	f000 ffde 	bl	8019150 <SUBGRF_SetRfTxPower>
 8018194:	4603      	mov	r3, r0
 8018196:	461a      	mov	r2, r3
 8018198:	4b08      	ldr	r3, [pc, #32]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 801819a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801819e:	4b07      	ldr	r3, [pc, #28]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80181a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80181a4:	4618      	mov	r0, r3
 80181a6:	f001 f9a2 	bl	80194ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80181aa:	4a04      	ldr	r2, [pc, #16]	; (80181bc <RadioSetTxGenericConfig+0x320>)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	6053      	str	r3, [r2, #4]
    return 0;
 80181b0:	2300      	movs	r3, #0
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	3728      	adds	r7, #40	; 0x28
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd80      	pop	{r7, pc}
 80181ba:	bf00      	nop
 80181bc:	20001c68 	.word	0x20001c68
 80181c0:	20001c64 	.word	0x20001c64
 80181c4:	20001cc0 	.word	0x20001cc0
 80181c8:	20001ca0 	.word	0x20001ca0
 80181cc:	20001c76 	.word	0x20001c76

080181d0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b084      	sub	sp, #16
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80181de:	4a1a      	ldr	r2, [pc, #104]	; (8018248 <SUBGRF_Init+0x78>)
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80181e4:	f7eb fa44 	bl	8003670 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80181e8:	2002      	movs	r0, #2
 80181ea:	f001 f87d 	bl	80192e8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80181ee:	4b17      	ldr	r3, [pc, #92]	; (801824c <SUBGRF_Init+0x7c>)
 80181f0:	2200      	movs	r2, #0
 80181f2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80181f4:	2000      	movs	r0, #0
 80181f6:	f000 f977 	bl	80184e8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80181fa:	f7f2 fd2c 	bl	800ac56 <RBI_IsTCXO>
 80181fe:	4603      	mov	r3, r0
 8018200:	2b01      	cmp	r3, #1
 8018202:	d10e      	bne.n	8018222 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018204:	2140      	movs	r1, #64	; 0x40
 8018206:	2001      	movs	r0, #1
 8018208:	f000 fb78 	bl	80188fc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801820c:	2100      	movs	r1, #0
 801820e:	f640 1011 	movw	r0, #2321	; 0x911
 8018212:	f000 fe81 	bl	8018f18 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018216:	237f      	movs	r3, #127	; 0x7f
 8018218:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801821a:	7b38      	ldrb	r0, [r7, #12]
 801821c:	f000 fa85 	bl	801872a <SUBGRF_Calibrate>
 8018220:	e009      	b.n	8018236 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018222:	2120      	movs	r1, #32
 8018224:	f640 1011 	movw	r0, #2321	; 0x911
 8018228:	f000 fe76 	bl	8018f18 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801822c:	2120      	movs	r1, #32
 801822e:	f640 1012 	movw	r0, #2322	; 0x912
 8018232:	f000 fe71 	bl	8018f18 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018236:	f7f2 fceb 	bl	800ac10 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801823a:	4b05      	ldr	r3, [pc, #20]	; (8018250 <SUBGRF_Init+0x80>)
 801823c:	2201      	movs	r2, #1
 801823e:	701a      	strb	r2, [r3, #0]
}
 8018240:	bf00      	nop
 8018242:	3710      	adds	r7, #16
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}
 8018248:	20001cfc 	.word	0x20001cfc
 801824c:	20001cf8 	.word	0x20001cf8
 8018250:	20001cf0 	.word	0x20001cf0

08018254 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018254:	b480      	push	{r7}
 8018256:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018258:	4b02      	ldr	r3, [pc, #8]	; (8018264 <SUBGRF_GetOperatingMode+0x10>)
 801825a:	781b      	ldrb	r3, [r3, #0]
}
 801825c:	4618      	mov	r0, r3
 801825e:	46bd      	mov	sp, r7
 8018260:	bc80      	pop	{r7}
 8018262:	4770      	bx	lr
 8018264:	20001cf0 	.word	0x20001cf0

08018268 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
 8018270:	460b      	mov	r3, r1
 8018272:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018274:	78fb      	ldrb	r3, [r7, #3]
 8018276:	461a      	mov	r2, r3
 8018278:	6879      	ldr	r1, [r7, #4]
 801827a:	2000      	movs	r0, #0
 801827c:	f000 feb8 	bl	8018ff0 <SUBGRF_WriteBuffer>
}
 8018280:	bf00      	nop
 8018282:	3708      	adds	r7, #8
 8018284:	46bd      	mov	sp, r7
 8018286:	bd80      	pop	{r7, pc}

08018288 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	4613      	mov	r3, r2
 8018294:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018296:	2300      	movs	r3, #0
 8018298:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801829a:	f107 0317 	add.w	r3, r7, #23
 801829e:	4619      	mov	r1, r3
 80182a0:	68b8      	ldr	r0, [r7, #8]
 80182a2:	f000 fdbb 	bl	8018e1c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80182a6:	68bb      	ldr	r3, [r7, #8]
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	79fa      	ldrb	r2, [r7, #7]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d201      	bcs.n	80182b4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80182b0:	2301      	movs	r3, #1
 80182b2:	e007      	b.n	80182c4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80182b4:	7df8      	ldrb	r0, [r7, #23]
 80182b6:	68bb      	ldr	r3, [r7, #8]
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	461a      	mov	r2, r3
 80182bc:	68f9      	ldr	r1, [r7, #12]
 80182be:	f000 feb9 	bl	8019034 <SUBGRF_ReadBuffer>

    return 0;
 80182c2:	2300      	movs	r3, #0
}
 80182c4:	4618      	mov	r0, r3
 80182c6:	3718      	adds	r7, #24
 80182c8:	46bd      	mov	sp, r7
 80182ca:	bd80      	pop	{r7, pc}

080182cc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b084      	sub	sp, #16
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	60f8      	str	r0, [r7, #12]
 80182d4:	460b      	mov	r3, r1
 80182d6:	607a      	str	r2, [r7, #4]
 80182d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80182da:	7afb      	ldrb	r3, [r7, #11]
 80182dc:	4619      	mov	r1, r3
 80182de:	68f8      	ldr	r0, [r7, #12]
 80182e0:	f7ff ffc2 	bl	8018268 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f000 f91b 	bl	8018520 <SUBGRF_SetTx>
}
 80182ea:	bf00      	nop
 80182ec:	3710      	adds	r7, #16
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}

080182f2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80182f2:	b580      	push	{r7, lr}
 80182f4:	b082      	sub	sp, #8
 80182f6:	af00      	add	r7, sp, #0
 80182f8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80182fa:	2208      	movs	r2, #8
 80182fc:	6879      	ldr	r1, [r7, #4]
 80182fe:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018302:	f000 fe31 	bl	8018f68 <SUBGRF_WriteRegisters>
    return 0;
 8018306:	2300      	movs	r3, #0
}
 8018308:	4618      	mov	r0, r3
 801830a:	3708      	adds	r7, #8
 801830c:	46bd      	mov	sp, r7
 801830e:	bd80      	pop	{r7, pc}

08018310 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b084      	sub	sp, #16
 8018314:	af00      	add	r7, sp, #0
 8018316:	4603      	mov	r3, r0
 8018318:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801831a:	88fb      	ldrh	r3, [r7, #6]
 801831c:	0a1b      	lsrs	r3, r3, #8
 801831e:	b29b      	uxth	r3, r3
 8018320:	b2db      	uxtb	r3, r3
 8018322:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018324:	88fb      	ldrh	r3, [r7, #6]
 8018326:	b2db      	uxtb	r3, r3
 8018328:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801832a:	f000 fb6b 	bl	8018a04 <SUBGRF_GetPacketType>
 801832e:	4603      	mov	r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	d108      	bne.n	8018346 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018334:	f107 030c 	add.w	r3, r7, #12
 8018338:	2202      	movs	r2, #2
 801833a:	4619      	mov	r1, r3
 801833c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018340:	f000 fe12 	bl	8018f68 <SUBGRF_WriteRegisters>
            break;
 8018344:	e000      	b.n	8018348 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018346:	bf00      	nop
    }
}
 8018348:	bf00      	nop
 801834a:	3710      	adds	r7, #16
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}

08018350 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b084      	sub	sp, #16
 8018354:	af00      	add	r7, sp, #0
 8018356:	4603      	mov	r3, r0
 8018358:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801835a:	88fb      	ldrh	r3, [r7, #6]
 801835c:	0a1b      	lsrs	r3, r3, #8
 801835e:	b29b      	uxth	r3, r3
 8018360:	b2db      	uxtb	r3, r3
 8018362:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018364:	88fb      	ldrh	r3, [r7, #6]
 8018366:	b2db      	uxtb	r3, r3
 8018368:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801836a:	f000 fb4b 	bl	8018a04 <SUBGRF_GetPacketType>
 801836e:	4603      	mov	r3, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	d108      	bne.n	8018386 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018374:	f107 030c 	add.w	r3, r7, #12
 8018378:	2202      	movs	r2, #2
 801837a:	4619      	mov	r1, r3
 801837c:	f240 60be 	movw	r0, #1726	; 0x6be
 8018380:	f000 fdf2 	bl	8018f68 <SUBGRF_WriteRegisters>
            break;
 8018384:	e000      	b.n	8018388 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018386:	bf00      	nop
    }
}
 8018388:	bf00      	nop
 801838a:	3710      	adds	r7, #16
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}

08018390 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	4603      	mov	r3, r0
 8018398:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801839a:	2300      	movs	r3, #0
 801839c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801839e:	f000 fb31 	bl	8018a04 <SUBGRF_GetPacketType>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d121      	bne.n	80183ec <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80183a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80183ac:	f000 fdc8 	bl	8018f40 <SUBGRF_ReadRegister>
 80183b0:	4603      	mov	r3, r0
 80183b2:	f023 0301 	bic.w	r3, r3, #1
 80183b6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80183b8:	88fb      	ldrh	r3, [r7, #6]
 80183ba:	0a1b      	lsrs	r3, r3, #8
 80183bc:	b29b      	uxth	r3, r3
 80183be:	b25b      	sxtb	r3, r3
 80183c0:	f003 0301 	and.w	r3, r3, #1
 80183c4:	b25a      	sxtb	r2, r3
 80183c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183ca:	4313      	orrs	r3, r2
 80183cc:	b25b      	sxtb	r3, r3
 80183ce:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80183d0:	7bfb      	ldrb	r3, [r7, #15]
 80183d2:	4619      	mov	r1, r3
 80183d4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80183d8:	f000 fd9e 	bl	8018f18 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80183dc:	88fb      	ldrh	r3, [r7, #6]
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	4619      	mov	r1, r3
 80183e2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80183e6:	f000 fd97 	bl	8018f18 <SUBGRF_WriteRegister>
            break;
 80183ea:	e000      	b.n	80183ee <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80183ec:	bf00      	nop
    }
}
 80183ee:	bf00      	nop
 80183f0:	3710      	adds	r7, #16
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}

080183f6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80183f6:	b580      	push	{r7, lr}
 80183f8:	b082      	sub	sp, #8
 80183fa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80183fc:	2300      	movs	r3, #0
 80183fe:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018400:	2300      	movs	r3, #0
 8018402:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018404:	2300      	movs	r3, #0
 8018406:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018408:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801840c:	f000 fd98 	bl	8018f40 <SUBGRF_ReadRegister>
 8018410:	4603      	mov	r3, r0
 8018412:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018414:	79fb      	ldrb	r3, [r7, #7]
 8018416:	f023 0301 	bic.w	r3, r3, #1
 801841a:	b2db      	uxtb	r3, r3
 801841c:	4619      	mov	r1, r3
 801841e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018422:	f000 fd79 	bl	8018f18 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018426:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801842a:	f000 fd89 	bl	8018f40 <SUBGRF_ReadRegister>
 801842e:	4603      	mov	r3, r0
 8018430:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018432:	79bb      	ldrb	r3, [r7, #6]
 8018434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018438:	b2db      	uxtb	r3, r3
 801843a:	4619      	mov	r1, r3
 801843c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018440:	f000 fd6a 	bl	8018f18 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018444:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018448:	f000 f88a 	bl	8018560 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801844c:	463b      	mov	r3, r7
 801844e:	2204      	movs	r2, #4
 8018450:	4619      	mov	r1, r3
 8018452:	f640 0019 	movw	r0, #2073	; 0x819
 8018456:	f000 fda9 	bl	8018fac <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801845a:	2000      	movs	r0, #0
 801845c:	f000 f844 	bl	80184e8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018460:	79fb      	ldrb	r3, [r7, #7]
 8018462:	4619      	mov	r1, r3
 8018464:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018468:	f000 fd56 	bl	8018f18 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801846c:	79bb      	ldrb	r3, [r7, #6]
 801846e:	4619      	mov	r1, r3
 8018470:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018474:	f000 fd50 	bl	8018f18 <SUBGRF_WriteRegister>

    return number;
 8018478:	683b      	ldr	r3, [r7, #0]
}
 801847a:	4618      	mov	r0, r3
 801847c:	3708      	adds	r7, #8
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
	...

08018484 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b084      	sub	sp, #16
 8018488:	af00      	add	r7, sp, #0
 801848a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801848c:	2000      	movs	r0, #0
 801848e:	f7f2 fbca 	bl	800ac26 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018492:	2002      	movs	r0, #2
 8018494:	f000 ff28 	bl	80192e8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018498:	793b      	ldrb	r3, [r7, #4]
 801849a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	009b      	lsls	r3, r3, #2
 80184a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80184a4:	793b      	ldrb	r3, [r7, #4]
 80184a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80184aa:	b2db      	uxtb	r3, r3
 80184ac:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80184ae:	b25b      	sxtb	r3, r3
 80184b0:	4313      	orrs	r3, r2
 80184b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80184b4:	793b      	ldrb	r3, [r7, #4]
 80184b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80184ba:	b2db      	uxtb	r3, r3
 80184bc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80184be:	4313      	orrs	r3, r2
 80184c0:	b25b      	sxtb	r3, r3
 80184c2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80184c4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80184c6:	f107 030f 	add.w	r3, r7, #15
 80184ca:	2201      	movs	r2, #1
 80184cc:	4619      	mov	r1, r3
 80184ce:	2084      	movs	r0, #132	; 0x84
 80184d0:	f000 fdd2 	bl	8019078 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80184d4:	4b03      	ldr	r3, [pc, #12]	; (80184e4 <SUBGRF_SetSleep+0x60>)
 80184d6:	2200      	movs	r2, #0
 80184d8:	701a      	strb	r2, [r3, #0]
}
 80184da:	bf00      	nop
 80184dc:	3710      	adds	r7, #16
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	20001cf0 	.word	0x20001cf0

080184e8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b082      	sub	sp, #8
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	4603      	mov	r3, r0
 80184f0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80184f2:	1dfb      	adds	r3, r7, #7
 80184f4:	2201      	movs	r2, #1
 80184f6:	4619      	mov	r1, r3
 80184f8:	2080      	movs	r0, #128	; 0x80
 80184fa:	f000 fdbd 	bl	8019078 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80184fe:	79fb      	ldrb	r3, [r7, #7]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d103      	bne.n	801850c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018504:	4b05      	ldr	r3, [pc, #20]	; (801851c <SUBGRF_SetStandby+0x34>)
 8018506:	2201      	movs	r2, #1
 8018508:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801850a:	e002      	b.n	8018512 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801850c:	4b03      	ldr	r3, [pc, #12]	; (801851c <SUBGRF_SetStandby+0x34>)
 801850e:	2202      	movs	r2, #2
 8018510:	701a      	strb	r2, [r3, #0]
}
 8018512:	bf00      	nop
 8018514:	3708      	adds	r7, #8
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	20001cf0 	.word	0x20001cf0

08018520 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b084      	sub	sp, #16
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018528:	4b0c      	ldr	r3, [pc, #48]	; (801855c <SUBGRF_SetTx+0x3c>)
 801852a:	2204      	movs	r2, #4
 801852c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	0c1b      	lsrs	r3, r3, #16
 8018532:	b2db      	uxtb	r3, r3
 8018534:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	0a1b      	lsrs	r3, r3, #8
 801853a:	b2db      	uxtb	r3, r3
 801853c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	b2db      	uxtb	r3, r3
 8018542:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018544:	f107 030c 	add.w	r3, r7, #12
 8018548:	2203      	movs	r2, #3
 801854a:	4619      	mov	r1, r3
 801854c:	2083      	movs	r0, #131	; 0x83
 801854e:	f000 fd93 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018552:	bf00      	nop
 8018554:	3710      	adds	r7, #16
 8018556:	46bd      	mov	sp, r7
 8018558:	bd80      	pop	{r7, pc}
 801855a:	bf00      	nop
 801855c:	20001cf0 	.word	0x20001cf0

08018560 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b084      	sub	sp, #16
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018568:	4b0c      	ldr	r3, [pc, #48]	; (801859c <SUBGRF_SetRx+0x3c>)
 801856a:	2205      	movs	r2, #5
 801856c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	0c1b      	lsrs	r3, r3, #16
 8018572:	b2db      	uxtb	r3, r3
 8018574:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	0a1b      	lsrs	r3, r3, #8
 801857a:	b2db      	uxtb	r3, r3
 801857c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	b2db      	uxtb	r3, r3
 8018582:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018584:	f107 030c 	add.w	r3, r7, #12
 8018588:	2203      	movs	r2, #3
 801858a:	4619      	mov	r1, r3
 801858c:	2082      	movs	r0, #130	; 0x82
 801858e:	f000 fd73 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018592:	bf00      	nop
 8018594:	3710      	adds	r7, #16
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	20001cf0 	.word	0x20001cf0

080185a0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b084      	sub	sp, #16
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80185a8:	4b0e      	ldr	r3, [pc, #56]	; (80185e4 <SUBGRF_SetRxBoosted+0x44>)
 80185aa:	2205      	movs	r2, #5
 80185ac:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80185ae:	2197      	movs	r1, #151	; 0x97
 80185b0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80185b4:	f000 fcb0 	bl	8018f18 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	0c1b      	lsrs	r3, r3, #16
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	0a1b      	lsrs	r3, r3, #8
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80185ce:	f107 030c 	add.w	r3, r7, #12
 80185d2:	2203      	movs	r2, #3
 80185d4:	4619      	mov	r1, r3
 80185d6:	2082      	movs	r0, #130	; 0x82
 80185d8:	f000 fd4e 	bl	8019078 <SUBGRF_WriteCommand>
}
 80185dc:	bf00      	nop
 80185de:	3710      	adds	r7, #16
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	20001cf0 	.word	0x20001cf0

080185e8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	0c1b      	lsrs	r3, r3, #16
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	0a1b      	lsrs	r3, r3, #8
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	b2db      	uxtb	r3, r3
 8018606:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	0c1b      	lsrs	r3, r3, #16
 801860c:	b2db      	uxtb	r3, r3
 801860e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018610:	683b      	ldr	r3, [r7, #0]
 8018612:	0a1b      	lsrs	r3, r3, #8
 8018614:	b2db      	uxtb	r3, r3
 8018616:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	b2db      	uxtb	r3, r3
 801861c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801861e:	f107 0308 	add.w	r3, r7, #8
 8018622:	2206      	movs	r2, #6
 8018624:	4619      	mov	r1, r3
 8018626:	2094      	movs	r0, #148	; 0x94
 8018628:	f000 fd26 	bl	8019078 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801862c:	4b03      	ldr	r3, [pc, #12]	; (801863c <SUBGRF_SetRxDutyCycle+0x54>)
 801862e:	2206      	movs	r2, #6
 8018630:	701a      	strb	r2, [r3, #0]
}
 8018632:	bf00      	nop
 8018634:	3710      	adds	r7, #16
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	20001cf0 	.word	0x20001cf0

08018640 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018644:	2200      	movs	r2, #0
 8018646:	2100      	movs	r1, #0
 8018648:	20c5      	movs	r0, #197	; 0xc5
 801864a:	f000 fd15 	bl	8019078 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801864e:	4b02      	ldr	r3, [pc, #8]	; (8018658 <SUBGRF_SetCad+0x18>)
 8018650:	2207      	movs	r2, #7
 8018652:	701a      	strb	r2, [r3, #0]
}
 8018654:	bf00      	nop
 8018656:	bd80      	pop	{r7, pc}
 8018658:	20001cf0 	.word	0x20001cf0

0801865c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801865c:	b580      	push	{r7, lr}
 801865e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018660:	2200      	movs	r2, #0
 8018662:	2100      	movs	r1, #0
 8018664:	20d1      	movs	r0, #209	; 0xd1
 8018666:	f000 fd07 	bl	8019078 <SUBGRF_WriteCommand>
}
 801866a:	bf00      	nop
 801866c:	bd80      	pop	{r7, pc}

0801866e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801866e:	b580      	push	{r7, lr}
 8018670:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018672:	2200      	movs	r2, #0
 8018674:	2100      	movs	r1, #0
 8018676:	20d2      	movs	r0, #210	; 0xd2
 8018678:	f000 fcfe 	bl	8019078 <SUBGRF_WriteCommand>
}
 801867c:	bf00      	nop
 801867e:	bd80      	pop	{r7, pc}

08018680 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b082      	sub	sp, #8
 8018684:	af00      	add	r7, sp, #0
 8018686:	4603      	mov	r3, r0
 8018688:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801868a:	1dfb      	adds	r3, r7, #7
 801868c:	2201      	movs	r2, #1
 801868e:	4619      	mov	r1, r3
 8018690:	209f      	movs	r0, #159	; 0x9f
 8018692:	f000 fcf1 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018696:	bf00      	nop
 8018698:	3708      	adds	r7, #8
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}

0801869e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801869e:	b580      	push	{r7, lr}
 80186a0:	b084      	sub	sp, #16
 80186a2:	af00      	add	r7, sp, #0
 80186a4:	4603      	mov	r3, r0
 80186a6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80186a8:	1dfb      	adds	r3, r7, #7
 80186aa:	2201      	movs	r2, #1
 80186ac:	4619      	mov	r1, r3
 80186ae:	20a0      	movs	r0, #160	; 0xa0
 80186b0:	f000 fce2 	bl	8019078 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80186b4:	79fb      	ldrb	r3, [r7, #7]
 80186b6:	2b3f      	cmp	r3, #63	; 0x3f
 80186b8:	d91c      	bls.n	80186f4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80186ba:	79fb      	ldrb	r3, [r7, #7]
 80186bc:	085b      	lsrs	r3, r3, #1
 80186be:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80186c0:	2300      	movs	r3, #0
 80186c2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80186c4:	2300      	movs	r3, #0
 80186c6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80186c8:	e005      	b.n	80186d6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80186ca:	7bfb      	ldrb	r3, [r7, #15]
 80186cc:	089b      	lsrs	r3, r3, #2
 80186ce:	73fb      	strb	r3, [r7, #15]
            exp++;
 80186d0:	7bbb      	ldrb	r3, [r7, #14]
 80186d2:	3301      	adds	r3, #1
 80186d4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80186d6:	7bfb      	ldrb	r3, [r7, #15]
 80186d8:	2b1f      	cmp	r3, #31
 80186da:	d8f6      	bhi.n	80186ca <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80186dc:	7bfb      	ldrb	r3, [r7, #15]
 80186de:	00db      	lsls	r3, r3, #3
 80186e0:	b2da      	uxtb	r2, r3
 80186e2:	7bbb      	ldrb	r3, [r7, #14]
 80186e4:	4413      	add	r3, r2
 80186e6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80186e8:	7b7b      	ldrb	r3, [r7, #13]
 80186ea:	4619      	mov	r1, r3
 80186ec:	f240 7006 	movw	r0, #1798	; 0x706
 80186f0:	f000 fc12 	bl	8018f18 <SUBGRF_WriteRegister>
    }
}
 80186f4:	bf00      	nop
 80186f6:	3710      	adds	r7, #16
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018702:	f7f2 fab3 	bl	800ac6c <RBI_IsDCDC>
 8018706:	4603      	mov	r3, r0
 8018708:	2b01      	cmp	r3, #1
 801870a:	d102      	bne.n	8018712 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801870c:	2301      	movs	r3, #1
 801870e:	71fb      	strb	r3, [r7, #7]
 8018710:	e001      	b.n	8018716 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018712:	2300      	movs	r3, #0
 8018714:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018716:	1dfb      	adds	r3, r7, #7
 8018718:	2201      	movs	r2, #1
 801871a:	4619      	mov	r1, r3
 801871c:	2096      	movs	r0, #150	; 0x96
 801871e:	f000 fcab 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018722:	bf00      	nop
 8018724:	3708      	adds	r7, #8
 8018726:	46bd      	mov	sp, r7
 8018728:	bd80      	pop	{r7, pc}

0801872a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801872a:	b580      	push	{r7, lr}
 801872c:	b084      	sub	sp, #16
 801872e:	af00      	add	r7, sp, #0
 8018730:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018732:	793b      	ldrb	r3, [r7, #4]
 8018734:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018738:	b2db      	uxtb	r3, r3
 801873a:	019b      	lsls	r3, r3, #6
 801873c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801873e:	793b      	ldrb	r3, [r7, #4]
 8018740:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018744:	b2db      	uxtb	r3, r3
 8018746:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018748:	b25b      	sxtb	r3, r3
 801874a:	4313      	orrs	r3, r2
 801874c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801874e:	793b      	ldrb	r3, [r7, #4]
 8018750:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018754:	b2db      	uxtb	r3, r3
 8018756:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018758:	b25b      	sxtb	r3, r3
 801875a:	4313      	orrs	r3, r2
 801875c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801875e:	793b      	ldrb	r3, [r7, #4]
 8018760:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018764:	b2db      	uxtb	r3, r3
 8018766:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018768:	b25b      	sxtb	r3, r3
 801876a:	4313      	orrs	r3, r2
 801876c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801876e:	793b      	ldrb	r3, [r7, #4]
 8018770:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018774:	b2db      	uxtb	r3, r3
 8018776:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018778:	b25b      	sxtb	r3, r3
 801877a:	4313      	orrs	r3, r2
 801877c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801877e:	793b      	ldrb	r3, [r7, #4]
 8018780:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018784:	b2db      	uxtb	r3, r3
 8018786:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018788:	b25b      	sxtb	r3, r3
 801878a:	4313      	orrs	r3, r2
 801878c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801878e:	793b      	ldrb	r3, [r7, #4]
 8018790:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018794:	b2db      	uxtb	r3, r3
 8018796:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018798:	4313      	orrs	r3, r2
 801879a:	b25b      	sxtb	r3, r3
 801879c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801879e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80187a0:	f107 030f 	add.w	r3, r7, #15
 80187a4:	2201      	movs	r2, #1
 80187a6:	4619      	mov	r1, r3
 80187a8:	2089      	movs	r0, #137	; 0x89
 80187aa:	f000 fc65 	bl	8019078 <SUBGRF_WriteCommand>
}
 80187ae:	bf00      	nop
 80187b0:	3710      	adds	r7, #16
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
	...

080187b8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	4a1b      	ldr	r2, [pc, #108]	; (8018830 <SUBGRF_CalibrateImage+0x78>)
 80187c4:	4293      	cmp	r3, r2
 80187c6:	d904      	bls.n	80187d2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80187c8:	23e1      	movs	r3, #225	; 0xe1
 80187ca:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80187cc:	23e9      	movs	r3, #233	; 0xe9
 80187ce:	737b      	strb	r3, [r7, #13]
 80187d0:	e022      	b.n	8018818 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	4a17      	ldr	r2, [pc, #92]	; (8018834 <SUBGRF_CalibrateImage+0x7c>)
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d904      	bls.n	80187e4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80187da:	23d7      	movs	r3, #215	; 0xd7
 80187dc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80187de:	23db      	movs	r3, #219	; 0xdb
 80187e0:	737b      	strb	r3, [r7, #13]
 80187e2:	e019      	b.n	8018818 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	4a14      	ldr	r2, [pc, #80]	; (8018838 <SUBGRF_CalibrateImage+0x80>)
 80187e8:	4293      	cmp	r3, r2
 80187ea:	d904      	bls.n	80187f6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80187ec:	23c1      	movs	r3, #193	; 0xc1
 80187ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80187f0:	23c5      	movs	r3, #197	; 0xc5
 80187f2:	737b      	strb	r3, [r7, #13]
 80187f4:	e010      	b.n	8018818 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	4a10      	ldr	r2, [pc, #64]	; (801883c <SUBGRF_CalibrateImage+0x84>)
 80187fa:	4293      	cmp	r3, r2
 80187fc:	d904      	bls.n	8018808 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80187fe:	2375      	movs	r3, #117	; 0x75
 8018800:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018802:	2381      	movs	r3, #129	; 0x81
 8018804:	737b      	strb	r3, [r7, #13]
 8018806:	e007      	b.n	8018818 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	4a0d      	ldr	r2, [pc, #52]	; (8018840 <SUBGRF_CalibrateImage+0x88>)
 801880c:	4293      	cmp	r3, r2
 801880e:	d903      	bls.n	8018818 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018810:	236b      	movs	r3, #107	; 0x6b
 8018812:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018814:	236f      	movs	r3, #111	; 0x6f
 8018816:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018818:	f107 030c 	add.w	r3, r7, #12
 801881c:	2202      	movs	r2, #2
 801881e:	4619      	mov	r1, r3
 8018820:	2098      	movs	r0, #152	; 0x98
 8018822:	f000 fc29 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018826:	bf00      	nop
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	35a4e900 	.word	0x35a4e900
 8018834:	32a9f880 	.word	0x32a9f880
 8018838:	2de54480 	.word	0x2de54480
 801883c:	1b6b0b00 	.word	0x1b6b0b00
 8018840:	1954fc40 	.word	0x1954fc40

08018844 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018844:	b590      	push	{r4, r7, lr}
 8018846:	b085      	sub	sp, #20
 8018848:	af00      	add	r7, sp, #0
 801884a:	4604      	mov	r4, r0
 801884c:	4608      	mov	r0, r1
 801884e:	4611      	mov	r1, r2
 8018850:	461a      	mov	r2, r3
 8018852:	4623      	mov	r3, r4
 8018854:	71fb      	strb	r3, [r7, #7]
 8018856:	4603      	mov	r3, r0
 8018858:	71bb      	strb	r3, [r7, #6]
 801885a:	460b      	mov	r3, r1
 801885c:	717b      	strb	r3, [r7, #5]
 801885e:	4613      	mov	r3, r2
 8018860:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018862:	79fb      	ldrb	r3, [r7, #7]
 8018864:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018866:	79bb      	ldrb	r3, [r7, #6]
 8018868:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801886a:	797b      	ldrb	r3, [r7, #5]
 801886c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801886e:	793b      	ldrb	r3, [r7, #4]
 8018870:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018872:	f107 030c 	add.w	r3, r7, #12
 8018876:	2204      	movs	r2, #4
 8018878:	4619      	mov	r1, r3
 801887a:	2095      	movs	r0, #149	; 0x95
 801887c:	f000 fbfc 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018880:	bf00      	nop
 8018882:	3714      	adds	r7, #20
 8018884:	46bd      	mov	sp, r7
 8018886:	bd90      	pop	{r4, r7, pc}

08018888 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018888:	b590      	push	{r4, r7, lr}
 801888a:	b085      	sub	sp, #20
 801888c:	af00      	add	r7, sp, #0
 801888e:	4604      	mov	r4, r0
 8018890:	4608      	mov	r0, r1
 8018892:	4611      	mov	r1, r2
 8018894:	461a      	mov	r2, r3
 8018896:	4623      	mov	r3, r4
 8018898:	80fb      	strh	r3, [r7, #6]
 801889a:	4603      	mov	r3, r0
 801889c:	80bb      	strh	r3, [r7, #4]
 801889e:	460b      	mov	r3, r1
 80188a0:	807b      	strh	r3, [r7, #2]
 80188a2:	4613      	mov	r3, r2
 80188a4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80188a6:	88fb      	ldrh	r3, [r7, #6]
 80188a8:	0a1b      	lsrs	r3, r3, #8
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80188b0:	88fb      	ldrh	r3, [r7, #6]
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80188b6:	88bb      	ldrh	r3, [r7, #4]
 80188b8:	0a1b      	lsrs	r3, r3, #8
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80188c0:	88bb      	ldrh	r3, [r7, #4]
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80188c6:	887b      	ldrh	r3, [r7, #2]
 80188c8:	0a1b      	lsrs	r3, r3, #8
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	b2db      	uxtb	r3, r3
 80188ce:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80188d0:	887b      	ldrh	r3, [r7, #2]
 80188d2:	b2db      	uxtb	r3, r3
 80188d4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80188d6:	883b      	ldrh	r3, [r7, #0]
 80188d8:	0a1b      	lsrs	r3, r3, #8
 80188da:	b29b      	uxth	r3, r3
 80188dc:	b2db      	uxtb	r3, r3
 80188de:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80188e0:	883b      	ldrh	r3, [r7, #0]
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80188e6:	f107 0308 	add.w	r3, r7, #8
 80188ea:	2208      	movs	r2, #8
 80188ec:	4619      	mov	r1, r3
 80188ee:	2008      	movs	r0, #8
 80188f0:	f000 fbc2 	bl	8019078 <SUBGRF_WriteCommand>
}
 80188f4:	bf00      	nop
 80188f6:	3714      	adds	r7, #20
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bd90      	pop	{r4, r7, pc}

080188fc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b084      	sub	sp, #16
 8018900:	af00      	add	r7, sp, #0
 8018902:	4603      	mov	r3, r0
 8018904:	6039      	str	r1, [r7, #0]
 8018906:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018908:	79fb      	ldrb	r3, [r7, #7]
 801890a:	f003 0307 	and.w	r3, r3, #7
 801890e:	b2db      	uxtb	r3, r3
 8018910:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	0c1b      	lsrs	r3, r3, #16
 8018916:	b2db      	uxtb	r3, r3
 8018918:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	0a1b      	lsrs	r3, r3, #8
 801891e:	b2db      	uxtb	r3, r3
 8018920:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	b2db      	uxtb	r3, r3
 8018926:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018928:	f107 030c 	add.w	r3, r7, #12
 801892c:	2204      	movs	r2, #4
 801892e:	4619      	mov	r1, r3
 8018930:	2097      	movs	r0, #151	; 0x97
 8018932:	f000 fba1 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018936:	bf00      	nop
 8018938:	3710      	adds	r7, #16
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}
	...

08018940 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018944:	b084      	sub	sp, #16
 8018946:	af00      	add	r7, sp, #0
 8018948:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801894a:	2300      	movs	r3, #0
 801894c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801894e:	4b1d      	ldr	r3, [pc, #116]	; (80189c4 <SUBGRF_SetRfFrequency+0x84>)
 8018950:	781b      	ldrb	r3, [r3, #0]
 8018952:	f083 0301 	eor.w	r3, r3, #1
 8018956:	b2db      	uxtb	r3, r3
 8018958:	2b00      	cmp	r3, #0
 801895a:	d005      	beq.n	8018968 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7ff ff2b 	bl	80187b8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018962:	4b18      	ldr	r3, [pc, #96]	; (80189c4 <SUBGRF_SetRfFrequency+0x84>)
 8018964:	2201      	movs	r2, #1
 8018966:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2200      	movs	r2, #0
 801896c:	461c      	mov	r4, r3
 801896e:	4615      	mov	r5, r2
 8018970:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018974:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018978:	4a13      	ldr	r2, [pc, #76]	; (80189c8 <SUBGRF_SetRfFrequency+0x88>)
 801897a:	f04f 0300 	mov.w	r3, #0
 801897e:	4640      	mov	r0, r8
 8018980:	4649      	mov	r1, r9
 8018982:	f7e8 fbdd 	bl	8001140 <__aeabi_uldivmod>
 8018986:	4602      	mov	r2, r0
 8018988:	460b      	mov	r3, r1
 801898a:	4613      	mov	r3, r2
 801898c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	0e1b      	lsrs	r3, r3, #24
 8018992:	b2db      	uxtb	r3, r3
 8018994:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	0c1b      	lsrs	r3, r3, #16
 801899a:	b2db      	uxtb	r3, r3
 801899c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	0a1b      	lsrs	r3, r3, #8
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80189ac:	f107 0308 	add.w	r3, r7, #8
 80189b0:	2204      	movs	r2, #4
 80189b2:	4619      	mov	r1, r3
 80189b4:	2086      	movs	r0, #134	; 0x86
 80189b6:	f000 fb5f 	bl	8019078 <SUBGRF_WriteCommand>
}
 80189ba:	bf00      	nop
 80189bc:	3710      	adds	r7, #16
 80189be:	46bd      	mov	sp, r7
 80189c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80189c4:	20001cf8 	.word	0x20001cf8
 80189c8:	01e84800 	.word	0x01e84800

080189cc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	4603      	mov	r3, r0
 80189d4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80189d6:	79fa      	ldrb	r2, [r7, #7]
 80189d8:	4b09      	ldr	r3, [pc, #36]	; (8018a00 <SUBGRF_SetPacketType+0x34>)
 80189da:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80189dc:	79fb      	ldrb	r3, [r7, #7]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d104      	bne.n	80189ec <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80189e2:	2100      	movs	r1, #0
 80189e4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80189e8:	f000 fa96 	bl	8018f18 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80189ec:	1dfb      	adds	r3, r7, #7
 80189ee:	2201      	movs	r2, #1
 80189f0:	4619      	mov	r1, r3
 80189f2:	208a      	movs	r0, #138	; 0x8a
 80189f4:	f000 fb40 	bl	8019078 <SUBGRF_WriteCommand>
}
 80189f8:	bf00      	nop
 80189fa:	3708      	adds	r7, #8
 80189fc:	46bd      	mov	sp, r7
 80189fe:	bd80      	pop	{r7, pc}
 8018a00:	20001cf1 	.word	0x20001cf1

08018a04 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018a04:	b480      	push	{r7}
 8018a06:	af00      	add	r7, sp, #0
    return PacketType;
 8018a08:	4b02      	ldr	r3, [pc, #8]	; (8018a14 <SUBGRF_GetPacketType+0x10>)
 8018a0a:	781b      	ldrb	r3, [r3, #0]
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bc80      	pop	{r7}
 8018a12:	4770      	bx	lr
 8018a14:	20001cf1 	.word	0x20001cf1

08018a18 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018a18:	b580      	push	{r7, lr}
 8018a1a:	b084      	sub	sp, #16
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	4603      	mov	r3, r0
 8018a20:	71fb      	strb	r3, [r7, #7]
 8018a22:	460b      	mov	r3, r1
 8018a24:	71bb      	strb	r3, [r7, #6]
 8018a26:	4613      	mov	r3, r2
 8018a28:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018a2a:	79fb      	ldrb	r3, [r7, #7]
 8018a2c:	2b01      	cmp	r3, #1
 8018a2e:	d124      	bne.n	8018a7a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018a30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a34:	2b0f      	cmp	r3, #15
 8018a36:	d106      	bne.n	8018a46 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018a38:	2301      	movs	r3, #1
 8018a3a:	2201      	movs	r2, #1
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	2006      	movs	r0, #6
 8018a40:	f7ff ff00 	bl	8018844 <SUBGRF_SetPaConfig>
 8018a44:	e005      	b.n	8018a52 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018a46:	2301      	movs	r3, #1
 8018a48:	2201      	movs	r2, #1
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	2004      	movs	r0, #4
 8018a4e:	f7ff fef9 	bl	8018844 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018a52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a56:	2b0d      	cmp	r3, #13
 8018a58:	dd02      	ble.n	8018a60 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018a5a:	230e      	movs	r3, #14
 8018a5c:	71bb      	strb	r3, [r7, #6]
 8018a5e:	e006      	b.n	8018a6e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018a60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a64:	f113 0f11 	cmn.w	r3, #17
 8018a68:	da01      	bge.n	8018a6e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018a6a:	23ef      	movs	r3, #239	; 0xef
 8018a6c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018a6e:	2118      	movs	r1, #24
 8018a70:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018a74:	f000 fa50 	bl	8018f18 <SUBGRF_WriteRegister>
 8018a78:	e025      	b.n	8018ac6 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018a7a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018a7e:	f000 fa5f 	bl	8018f40 <SUBGRF_ReadRegister>
 8018a82:	4603      	mov	r3, r0
 8018a84:	f043 031e 	orr.w	r3, r3, #30
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	4619      	mov	r1, r3
 8018a8c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018a90:	f000 fa42 	bl	8018f18 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018a94:	2301      	movs	r3, #1
 8018a96:	2200      	movs	r2, #0
 8018a98:	2107      	movs	r1, #7
 8018a9a:	2004      	movs	r0, #4
 8018a9c:	f7ff fed2 	bl	8018844 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018aa0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018aa4:	2b16      	cmp	r3, #22
 8018aa6:	dd02      	ble.n	8018aae <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018aa8:	2316      	movs	r3, #22
 8018aaa:	71bb      	strb	r3, [r7, #6]
 8018aac:	e006      	b.n	8018abc <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018aae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ab2:	f113 0f09 	cmn.w	r3, #9
 8018ab6:	da01      	bge.n	8018abc <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018ab8:	23f7      	movs	r3, #247	; 0xf7
 8018aba:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018abc:	2138      	movs	r1, #56	; 0x38
 8018abe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018ac2:	f000 fa29 	bl	8018f18 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018ac6:	79bb      	ldrb	r3, [r7, #6]
 8018ac8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018aca:	797b      	ldrb	r3, [r7, #5]
 8018acc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018ace:	f107 030c 	add.w	r3, r7, #12
 8018ad2:	2202      	movs	r2, #2
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	208e      	movs	r0, #142	; 0x8e
 8018ad8:	f000 face 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018adc:	bf00      	nop
 8018ade:	3710      	adds	r7, #16
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018ae4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018ae8:	b086      	sub	sp, #24
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018af2:	4a61      	ldr	r2, [pc, #388]	; (8018c78 <SUBGRF_SetModulationParams+0x194>)
 8018af4:	f107 0308 	add.w	r3, r7, #8
 8018af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018afc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	781a      	ldrb	r2, [r3, #0]
 8018b04:	4b5d      	ldr	r3, [pc, #372]	; (8018c7c <SUBGRF_SetModulationParams+0x198>)
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d004      	beq.n	8018b16 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	781b      	ldrb	r3, [r3, #0]
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7ff ff5b 	bl	80189cc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	781b      	ldrb	r3, [r3, #0]
 8018b1a:	2b03      	cmp	r3, #3
 8018b1c:	f200 80a5 	bhi.w	8018c6a <SUBGRF_SetModulationParams+0x186>
 8018b20:	a201      	add	r2, pc, #4	; (adr r2, 8018b28 <SUBGRF_SetModulationParams+0x44>)
 8018b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b26:	bf00      	nop
 8018b28:	08018b39 	.word	0x08018b39
 8018b2c:	08018bf9 	.word	0x08018bf9
 8018b30:	08018bbb 	.word	0x08018bbb
 8018b34:	08018c27 	.word	0x08018c27
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018b38:	2308      	movs	r3, #8
 8018b3a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	4a4f      	ldr	r2, [pc, #316]	; (8018c80 <SUBGRF_SetModulationParams+0x19c>)
 8018b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b46:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	0c1b      	lsrs	r3, r3, #16
 8018b4c:	b2db      	uxtb	r3, r3
 8018b4e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	0a1b      	lsrs	r3, r3, #8
 8018b54:	b2db      	uxtb	r3, r3
 8018b56:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	7b1b      	ldrb	r3, [r3, #12]
 8018b62:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	7b5b      	ldrb	r3, [r3, #13]
 8018b68:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	689b      	ldr	r3, [r3, #8]
 8018b6e:	2200      	movs	r2, #0
 8018b70:	461c      	mov	r4, r3
 8018b72:	4615      	mov	r5, r2
 8018b74:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018b78:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018b7c:	4a41      	ldr	r2, [pc, #260]	; (8018c84 <SUBGRF_SetModulationParams+0x1a0>)
 8018b7e:	f04f 0300 	mov.w	r3, #0
 8018b82:	4640      	mov	r0, r8
 8018b84:	4649      	mov	r1, r9
 8018b86:	f7e8 fadb 	bl	8001140 <__aeabi_uldivmod>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	460b      	mov	r3, r1
 8018b8e:	4613      	mov	r3, r2
 8018b90:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018b92:	697b      	ldr	r3, [r7, #20]
 8018b94:	0c1b      	lsrs	r3, r3, #16
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	0a1b      	lsrs	r3, r3, #8
 8018b9e:	b2db      	uxtb	r3, r3
 8018ba0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	b2db      	uxtb	r3, r3
 8018ba6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ba8:	7cfb      	ldrb	r3, [r7, #19]
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	f107 0308 	add.w	r3, r7, #8
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	208b      	movs	r0, #139	; 0x8b
 8018bb4:	f000 fa60 	bl	8019078 <SUBGRF_WriteCommand>
        break;
 8018bb8:	e058      	b.n	8018c6c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018bba:	2304      	movs	r3, #4
 8018bbc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	691b      	ldr	r3, [r3, #16]
 8018bc2:	4a2f      	ldr	r2, [pc, #188]	; (8018c80 <SUBGRF_SetModulationParams+0x19c>)
 8018bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8018bc8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	0c1b      	lsrs	r3, r3, #16
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018bd2:	697b      	ldr	r3, [r7, #20]
 8018bd4:	0a1b      	lsrs	r3, r3, #8
 8018bd6:	b2db      	uxtb	r3, r3
 8018bd8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	7d1b      	ldrb	r3, [r3, #20]
 8018be4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018be6:	7cfb      	ldrb	r3, [r7, #19]
 8018be8:	b29a      	uxth	r2, r3
 8018bea:	f107 0308 	add.w	r3, r7, #8
 8018bee:	4619      	mov	r1, r3
 8018bf0:	208b      	movs	r0, #139	; 0x8b
 8018bf2:	f000 fa41 	bl	8019078 <SUBGRF_WriteCommand>
        break;
 8018bf6:	e039      	b.n	8018c6c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8018bf8:	2304      	movs	r3, #4
 8018bfa:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	7e1b      	ldrb	r3, [r3, #24]
 8018c00:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	7e5b      	ldrb	r3, [r3, #25]
 8018c06:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	7e9b      	ldrb	r3, [r3, #26]
 8018c0c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	7edb      	ldrb	r3, [r3, #27]
 8018c12:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018c14:	7cfb      	ldrb	r3, [r7, #19]
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	f107 0308 	add.w	r3, r7, #8
 8018c1c:	4619      	mov	r1, r3
 8018c1e:	208b      	movs	r0, #139	; 0x8b
 8018c20:	f000 fa2a 	bl	8019078 <SUBGRF_WriteCommand>

        break;
 8018c24:	e022      	b.n	8018c6c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018c26:	2305      	movs	r3, #5
 8018c28:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	685b      	ldr	r3, [r3, #4]
 8018c2e:	4a14      	ldr	r2, [pc, #80]	; (8018c80 <SUBGRF_SetModulationParams+0x19c>)
 8018c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c34:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	0c1b      	lsrs	r3, r3, #16
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	0a1b      	lsrs	r3, r3, #8
 8018c42:	b2db      	uxtb	r3, r3
 8018c44:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018c46:	697b      	ldr	r3, [r7, #20]
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	7b1b      	ldrb	r3, [r3, #12]
 8018c50:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	7b5b      	ldrb	r3, [r3, #13]
 8018c56:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018c58:	7cfb      	ldrb	r3, [r7, #19]
 8018c5a:	b29a      	uxth	r2, r3
 8018c5c:	f107 0308 	add.w	r3, r7, #8
 8018c60:	4619      	mov	r1, r3
 8018c62:	208b      	movs	r0, #139	; 0x8b
 8018c64:	f000 fa08 	bl	8019078 <SUBGRF_WriteCommand>
        break;
 8018c68:	e000      	b.n	8018c6c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018c6a:	bf00      	nop
    }
}
 8018c6c:	bf00      	nop
 8018c6e:	3718      	adds	r7, #24
 8018c70:	46bd      	mov	sp, r7
 8018c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018c76:	bf00      	nop
 8018c78:	08020328 	.word	0x08020328
 8018c7c:	20001cf1 	.word	0x20001cf1
 8018c80:	3d090000 	.word	0x3d090000
 8018c84:	01e84800 	.word	0x01e84800

08018c88 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018c90:	2300      	movs	r3, #0
 8018c92:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018c94:	4a48      	ldr	r2, [pc, #288]	; (8018db8 <SUBGRF_SetPacketParams+0x130>)
 8018c96:	f107 030c 	add.w	r3, r7, #12
 8018c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c9c:	c303      	stmia	r3!, {r0, r1}
 8018c9e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	781a      	ldrb	r2, [r3, #0]
 8018ca4:	4b45      	ldr	r3, [pc, #276]	; (8018dbc <SUBGRF_SetPacketParams+0x134>)
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	429a      	cmp	r2, r3
 8018caa:	d004      	beq.n	8018cb6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	781b      	ldrb	r3, [r3, #0]
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f7ff fe8b 	bl	80189cc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	781b      	ldrb	r3, [r3, #0]
 8018cba:	2b03      	cmp	r3, #3
 8018cbc:	d878      	bhi.n	8018db0 <SUBGRF_SetPacketParams+0x128>
 8018cbe:	a201      	add	r2, pc, #4	; (adr r2, 8018cc4 <SUBGRF_SetPacketParams+0x3c>)
 8018cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cc4:	08018cd5 	.word	0x08018cd5
 8018cc8:	08018d65 	.word	0x08018d65
 8018ccc:	08018d59 	.word	0x08018d59
 8018cd0:	08018cd5 	.word	0x08018cd5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	7a5b      	ldrb	r3, [r3, #9]
 8018cd8:	2bf1      	cmp	r3, #241	; 0xf1
 8018cda:	d10a      	bne.n	8018cf2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018cdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ce0:	f7ff fb16 	bl	8018310 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018ce4:	f248 0005 	movw	r0, #32773	; 0x8005
 8018ce8:	f7ff fb32 	bl	8018350 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018cec:	2302      	movs	r3, #2
 8018cee:	75bb      	strb	r3, [r7, #22]
 8018cf0:	e011      	b.n	8018d16 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	7a5b      	ldrb	r3, [r3, #9]
 8018cf6:	2bf2      	cmp	r3, #242	; 0xf2
 8018cf8:	d10a      	bne.n	8018d10 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018cfa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018cfe:	f7ff fb07 	bl	8018310 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018d02:	f241 0021 	movw	r0, #4129	; 0x1021
 8018d06:	f7ff fb23 	bl	8018350 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018d0a:	2306      	movs	r3, #6
 8018d0c:	75bb      	strb	r3, [r7, #22]
 8018d0e:	e002      	b.n	8018d16 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	7a5b      	ldrb	r3, [r3, #9]
 8018d14:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018d16:	2309      	movs	r3, #9
 8018d18:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	885b      	ldrh	r3, [r3, #2]
 8018d1e:	0a1b      	lsrs	r3, r3, #8
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	b2db      	uxtb	r3, r3
 8018d24:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	885b      	ldrh	r3, [r3, #2]
 8018d2a:	b2db      	uxtb	r3, r3
 8018d2c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	791b      	ldrb	r3, [r3, #4]
 8018d32:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	795b      	ldrb	r3, [r3, #5]
 8018d38:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	799b      	ldrb	r3, [r3, #6]
 8018d3e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	79db      	ldrb	r3, [r3, #7]
 8018d44:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	7a1b      	ldrb	r3, [r3, #8]
 8018d4a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018d4c:	7dbb      	ldrb	r3, [r7, #22]
 8018d4e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	7a9b      	ldrb	r3, [r3, #10]
 8018d54:	753b      	strb	r3, [r7, #20]
        break;
 8018d56:	e022      	b.n	8018d9e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018d58:	2301      	movs	r3, #1
 8018d5a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	7b1b      	ldrb	r3, [r3, #12]
 8018d60:	733b      	strb	r3, [r7, #12]
        break;
 8018d62:	e01c      	b.n	8018d9e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018d64:	2306      	movs	r3, #6
 8018d66:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	89db      	ldrh	r3, [r3, #14]
 8018d6c:	0a1b      	lsrs	r3, r3, #8
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	b2db      	uxtb	r3, r3
 8018d72:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	89db      	ldrh	r3, [r3, #14]
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	7c1a      	ldrb	r2, [r3, #16]
 8018d80:	4b0f      	ldr	r3, [pc, #60]	; (8018dc0 <SUBGRF_SetPacketParams+0x138>)
 8018d82:	4611      	mov	r1, r2
 8018d84:	7019      	strb	r1, [r3, #0]
 8018d86:	4613      	mov	r3, r2
 8018d88:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	7c5b      	ldrb	r3, [r3, #17]
 8018d8e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	7c9b      	ldrb	r3, [r3, #18]
 8018d94:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	7cdb      	ldrb	r3, [r3, #19]
 8018d9a:	747b      	strb	r3, [r7, #17]
        break;
 8018d9c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018d9e:	7dfb      	ldrb	r3, [r7, #23]
 8018da0:	b29a      	uxth	r2, r3
 8018da2:	f107 030c 	add.w	r3, r7, #12
 8018da6:	4619      	mov	r1, r3
 8018da8:	208c      	movs	r0, #140	; 0x8c
 8018daa:	f000 f965 	bl	8019078 <SUBGRF_WriteCommand>
 8018dae:	e000      	b.n	8018db2 <SUBGRF_SetPacketParams+0x12a>
        return;
 8018db0:	bf00      	nop
}
 8018db2:	3718      	adds	r7, #24
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	08020330 	.word	0x08020330
 8018dbc:	20001cf1 	.word	0x20001cf1
 8018dc0:	20001cf2 	.word	0x20001cf2

08018dc4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b084      	sub	sp, #16
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	4603      	mov	r3, r0
 8018dcc:	460a      	mov	r2, r1
 8018dce:	71fb      	strb	r3, [r7, #7]
 8018dd0:	4613      	mov	r3, r2
 8018dd2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018dd4:	79fb      	ldrb	r3, [r7, #7]
 8018dd6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018dd8:	79bb      	ldrb	r3, [r7, #6]
 8018dda:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018ddc:	f107 030c 	add.w	r3, r7, #12
 8018de0:	2202      	movs	r2, #2
 8018de2:	4619      	mov	r1, r3
 8018de4:	208f      	movs	r0, #143	; 0x8f
 8018de6:	f000 f947 	bl	8019078 <SUBGRF_WriteCommand>
}
 8018dea:	bf00      	nop
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018df2:	b580      	push	{r7, lr}
 8018df4:	b082      	sub	sp, #8
 8018df6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018dfc:	1d3b      	adds	r3, r7, #4
 8018dfe:	2201      	movs	r2, #1
 8018e00:	4619      	mov	r1, r3
 8018e02:	2015      	movs	r0, #21
 8018e04:	f000 f95a 	bl	80190bc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018e08:	793b      	ldrb	r3, [r7, #4]
 8018e0a:	425b      	negs	r3, r3
 8018e0c:	105b      	asrs	r3, r3, #1
 8018e0e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}

08018e1c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b084      	sub	sp, #16
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018e26:	f107 030c 	add.w	r3, r7, #12
 8018e2a:	2202      	movs	r2, #2
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	2013      	movs	r0, #19
 8018e30:	f000 f944 	bl	80190bc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018e34:	f7ff fde6 	bl	8018a04 <SUBGRF_GetPacketType>
 8018e38:	4603      	mov	r3, r0
 8018e3a:	2b01      	cmp	r3, #1
 8018e3c:	d10d      	bne.n	8018e5a <SUBGRF_GetRxBufferStatus+0x3e>
 8018e3e:	4b0c      	ldr	r3, [pc, #48]	; (8018e70 <SUBGRF_GetRxBufferStatus+0x54>)
 8018e40:	781b      	ldrb	r3, [r3, #0]
 8018e42:	b2db      	uxtb	r3, r3
 8018e44:	2b01      	cmp	r3, #1
 8018e46:	d108      	bne.n	8018e5a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018e48:	f240 7002 	movw	r0, #1794	; 0x702
 8018e4c:	f000 f878 	bl	8018f40 <SUBGRF_ReadRegister>
 8018e50:	4603      	mov	r3, r0
 8018e52:	461a      	mov	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	701a      	strb	r2, [r3, #0]
 8018e58:	e002      	b.n	8018e60 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018e5a:	7b3a      	ldrb	r2, [r7, #12]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018e60:	7b7a      	ldrb	r2, [r7, #13]
 8018e62:	683b      	ldr	r3, [r7, #0]
 8018e64:	701a      	strb	r2, [r3, #0]
}
 8018e66:	bf00      	nop
 8018e68:	3710      	adds	r7, #16
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	20001cf2 	.word	0x20001cf2

08018e74 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018e7c:	f107 030c 	add.w	r3, r7, #12
 8018e80:	2203      	movs	r2, #3
 8018e82:	4619      	mov	r1, r3
 8018e84:	2014      	movs	r0, #20
 8018e86:	f000 f919 	bl	80190bc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018e8a:	f7ff fdbb 	bl	8018a04 <SUBGRF_GetPacketType>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	461a      	mov	r2, r3
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d002      	beq.n	8018ea4 <SUBGRF_GetPacketStatus+0x30>
 8018e9e:	2b01      	cmp	r3, #1
 8018ea0:	d013      	beq.n	8018eca <SUBGRF_GetPacketStatus+0x56>
 8018ea2:	e02a      	b.n	8018efa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8018ea4:	7b3a      	ldrb	r2, [r7, #12]
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8018eaa:	7b7b      	ldrb	r3, [r7, #13]
 8018eac:	425b      	negs	r3, r3
 8018eae:	105b      	asrs	r3, r3, #1
 8018eb0:	b25a      	sxtb	r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8018eb6:	7bbb      	ldrb	r3, [r7, #14]
 8018eb8:	425b      	negs	r3, r3
 8018eba:	105b      	asrs	r3, r3, #1
 8018ebc:	b25a      	sxtb	r2, r3
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	609a      	str	r2, [r3, #8]
            break;
 8018ec8:	e020      	b.n	8018f0c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018eca:	7b3b      	ldrb	r3, [r7, #12]
 8018ecc:	425b      	negs	r3, r3
 8018ece:	105b      	asrs	r3, r3, #1
 8018ed0:	b25a      	sxtb	r2, r3
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018ed6:	7b7b      	ldrb	r3, [r7, #13]
 8018ed8:	b25b      	sxtb	r3, r3
 8018eda:	3302      	adds	r3, #2
 8018edc:	109b      	asrs	r3, r3, #2
 8018ede:	b25a      	sxtb	r2, r3
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018ee4:	7bbb      	ldrb	r3, [r7, #14]
 8018ee6:	425b      	negs	r3, r3
 8018ee8:	105b      	asrs	r3, r3, #1
 8018eea:	b25a      	sxtb	r2, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8018ef0:	4b08      	ldr	r3, [pc, #32]	; (8018f14 <SUBGRF_GetPacketStatus+0xa0>)
 8018ef2:	681a      	ldr	r2, [r3, #0]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	611a      	str	r2, [r3, #16]
            break;
 8018ef8:	e008      	b.n	8018f0c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018efa:	2214      	movs	r2, #20
 8018efc:	2100      	movs	r1, #0
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f000 fb4c 	bl	801959c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	220f      	movs	r2, #15
 8018f08:	701a      	strb	r2, [r3, #0]
            break;
 8018f0a:	bf00      	nop
    }
}
 8018f0c:	bf00      	nop
 8018f0e:	3710      	adds	r7, #16
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	20001cf4 	.word	0x20001cf4

08018f18 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b082      	sub	sp, #8
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	4603      	mov	r3, r0
 8018f20:	460a      	mov	r2, r1
 8018f22:	80fb      	strh	r3, [r7, #6]
 8018f24:	4613      	mov	r3, r2
 8018f26:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018f28:	1d7a      	adds	r2, r7, #5
 8018f2a:	88f9      	ldrh	r1, [r7, #6]
 8018f2c:	2301      	movs	r3, #1
 8018f2e:	4803      	ldr	r0, [pc, #12]	; (8018f3c <SUBGRF_WriteRegister+0x24>)
 8018f30:	f7ef fd2a 	bl	8008988 <HAL_SUBGHZ_WriteRegisters>
}
 8018f34:	bf00      	nop
 8018f36:	3708      	adds	r7, #8
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	20000d80 	.word	0x20000d80

08018f40 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	4603      	mov	r3, r0
 8018f48:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018f4a:	f107 020f 	add.w	r2, r7, #15
 8018f4e:	88f9      	ldrh	r1, [r7, #6]
 8018f50:	2301      	movs	r3, #1
 8018f52:	4804      	ldr	r0, [pc, #16]	; (8018f64 <SUBGRF_ReadRegister+0x24>)
 8018f54:	f7ef fd77 	bl	8008a46 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	3710      	adds	r7, #16
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}
 8018f62:	bf00      	nop
 8018f64:	20000d80 	.word	0x20000d80

08018f68 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b086      	sub	sp, #24
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	4603      	mov	r3, r0
 8018f70:	6039      	str	r1, [r7, #0]
 8018f72:	80fb      	strh	r3, [r7, #6]
 8018f74:	4613      	mov	r3, r2
 8018f76:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f78:	f3ef 8310 	mrs	r3, PRIMASK
 8018f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f7e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f82:	b672      	cpsid	i
}
 8018f84:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018f86:	88bb      	ldrh	r3, [r7, #4]
 8018f88:	88f9      	ldrh	r1, [r7, #6]
 8018f8a:	683a      	ldr	r2, [r7, #0]
 8018f8c:	4806      	ldr	r0, [pc, #24]	; (8018fa8 <SUBGRF_WriteRegisters+0x40>)
 8018f8e:	f7ef fcfb 	bl	8008988 <HAL_SUBGHZ_WriteRegisters>
 8018f92:	697b      	ldr	r3, [r7, #20]
 8018f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	f383 8810 	msr	PRIMASK, r3
}
 8018f9c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018f9e:	bf00      	nop
 8018fa0:	3718      	adds	r7, #24
 8018fa2:	46bd      	mov	sp, r7
 8018fa4:	bd80      	pop	{r7, pc}
 8018fa6:	bf00      	nop
 8018fa8:	20000d80 	.word	0x20000d80

08018fac <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b086      	sub	sp, #24
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	6039      	str	r1, [r7, #0]
 8018fb6:	80fb      	strh	r3, [r7, #6]
 8018fb8:	4613      	mov	r3, r2
 8018fba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8018fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8018fc2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fc6:	b672      	cpsid	i
}
 8018fc8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8018fca:	88bb      	ldrh	r3, [r7, #4]
 8018fcc:	88f9      	ldrh	r1, [r7, #6]
 8018fce:	683a      	ldr	r2, [r7, #0]
 8018fd0:	4806      	ldr	r0, [pc, #24]	; (8018fec <SUBGRF_ReadRegisters+0x40>)
 8018fd2:	f7ef fd38 	bl	8008a46 <HAL_SUBGHZ_ReadRegisters>
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fda:	693b      	ldr	r3, [r7, #16]
 8018fdc:	f383 8810 	msr	PRIMASK, r3
}
 8018fe0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018fe2:	bf00      	nop
 8018fe4:	3718      	adds	r7, #24
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	20000d80 	.word	0x20000d80

08018ff0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b086      	sub	sp, #24
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	6039      	str	r1, [r7, #0]
 8018ffa:	71fb      	strb	r3, [r7, #7]
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019000:	f3ef 8310 	mrs	r3, PRIMASK
 8019004:	60fb      	str	r3, [r7, #12]
  return(result);
 8019006:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019008:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801900a:	b672      	cpsid	i
}
 801900c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801900e:	79bb      	ldrb	r3, [r7, #6]
 8019010:	b29b      	uxth	r3, r3
 8019012:	79f9      	ldrb	r1, [r7, #7]
 8019014:	683a      	ldr	r2, [r7, #0]
 8019016:	4806      	ldr	r0, [pc, #24]	; (8019030 <SUBGRF_WriteBuffer+0x40>)
 8019018:	f7ef fe29 	bl	8008c6e <HAL_SUBGHZ_WriteBuffer>
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	f383 8810 	msr	PRIMASK, r3
}
 8019026:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019028:	bf00      	nop
 801902a:	3718      	adds	r7, #24
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	20000d80 	.word	0x20000d80

08019034 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b086      	sub	sp, #24
 8019038:	af00      	add	r7, sp, #0
 801903a:	4603      	mov	r3, r0
 801903c:	6039      	str	r1, [r7, #0]
 801903e:	71fb      	strb	r3, [r7, #7]
 8019040:	4613      	mov	r3, r2
 8019042:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019044:	f3ef 8310 	mrs	r3, PRIMASK
 8019048:	60fb      	str	r3, [r7, #12]
  return(result);
 801904a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801904c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801904e:	b672      	cpsid	i
}
 8019050:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019052:	79bb      	ldrb	r3, [r7, #6]
 8019054:	b29b      	uxth	r3, r3
 8019056:	79f9      	ldrb	r1, [r7, #7]
 8019058:	683a      	ldr	r2, [r7, #0]
 801905a:	4806      	ldr	r0, [pc, #24]	; (8019074 <SUBGRF_ReadBuffer+0x40>)
 801905c:	f7ef fe5a 	bl	8008d14 <HAL_SUBGHZ_ReadBuffer>
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	f383 8810 	msr	PRIMASK, r3
}
 801906a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801906c:	bf00      	nop
 801906e:	3718      	adds	r7, #24
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}
 8019074:	20000d80 	.word	0x20000d80

08019078 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b086      	sub	sp, #24
 801907c:	af00      	add	r7, sp, #0
 801907e:	4603      	mov	r3, r0
 8019080:	6039      	str	r1, [r7, #0]
 8019082:	71fb      	strb	r3, [r7, #7]
 8019084:	4613      	mov	r3, r2
 8019086:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019088:	f3ef 8310 	mrs	r3, PRIMASK
 801908c:	60fb      	str	r3, [r7, #12]
  return(result);
 801908e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019092:	b672      	cpsid	i
}
 8019094:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019096:	88bb      	ldrh	r3, [r7, #4]
 8019098:	79f9      	ldrb	r1, [r7, #7]
 801909a:	683a      	ldr	r2, [r7, #0]
 801909c:	4806      	ldr	r0, [pc, #24]	; (80190b8 <SUBGRF_WriteCommand+0x40>)
 801909e:	f7ef fd33 	bl	8008b08 <HAL_SUBGHZ_ExecSetCmd>
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	f383 8810 	msr	PRIMASK, r3
}
 80190ac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190ae:	bf00      	nop
 80190b0:	3718      	adds	r7, #24
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bd80      	pop	{r7, pc}
 80190b6:	bf00      	nop
 80190b8:	20000d80 	.word	0x20000d80

080190bc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b086      	sub	sp, #24
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	4603      	mov	r3, r0
 80190c4:	6039      	str	r1, [r7, #0]
 80190c6:	71fb      	strb	r3, [r7, #7]
 80190c8:	4613      	mov	r3, r2
 80190ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190cc:	f3ef 8310 	mrs	r3, PRIMASK
 80190d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80190d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80190d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190d6:	b672      	cpsid	i
}
 80190d8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80190da:	88bb      	ldrh	r3, [r7, #4]
 80190dc:	79f9      	ldrb	r1, [r7, #7]
 80190de:	683a      	ldr	r2, [r7, #0]
 80190e0:	4806      	ldr	r0, [pc, #24]	; (80190fc <SUBGRF_ReadCommand+0x40>)
 80190e2:	f7ef fd70 	bl	8008bc6 <HAL_SUBGHZ_ExecGetCmd>
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	f383 8810 	msr	PRIMASK, r3
}
 80190f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190f2:	bf00      	nop
 80190f4:	3718      	adds	r7, #24
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}
 80190fa:	bf00      	nop
 80190fc:	20000d80 	.word	0x20000d80

08019100 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	4603      	mov	r3, r0
 8019108:	460a      	mov	r2, r1
 801910a:	71fb      	strb	r3, [r7, #7]
 801910c:	4613      	mov	r3, r2
 801910e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019110:	2301      	movs	r3, #1
 8019112:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019114:	79bb      	ldrb	r3, [r7, #6]
 8019116:	2b01      	cmp	r3, #1
 8019118:	d10d      	bne.n	8019136 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801911a:	79fb      	ldrb	r3, [r7, #7]
 801911c:	2b01      	cmp	r3, #1
 801911e:	d104      	bne.n	801912a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019120:	2302      	movs	r3, #2
 8019122:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019124:	2004      	movs	r0, #4
 8019126:	f000 f8df 	bl	80192e8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801912a:	79fb      	ldrb	r3, [r7, #7]
 801912c:	2b02      	cmp	r3, #2
 801912e:	d107      	bne.n	8019140 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019130:	2303      	movs	r3, #3
 8019132:	73fb      	strb	r3, [r7, #15]
 8019134:	e004      	b.n	8019140 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019136:	79bb      	ldrb	r3, [r7, #6]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d101      	bne.n	8019140 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801913c:	2301      	movs	r3, #1
 801913e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019140:	7bfb      	ldrb	r3, [r7, #15]
 8019142:	4618      	mov	r0, r3
 8019144:	f7f1 fd6f 	bl	800ac26 <RBI_ConfigRFSwitch>
}
 8019148:	bf00      	nop
 801914a:	3710      	adds	r7, #16
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	4603      	mov	r3, r0
 8019158:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801915a:	2301      	movs	r3, #1
 801915c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801915e:	f7f1 fd6f 	bl	800ac40 <RBI_GetTxConfig>
 8019162:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	2b02      	cmp	r3, #2
 8019168:	d016      	beq.n	8019198 <SUBGRF_SetRfTxPower+0x48>
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	2b02      	cmp	r3, #2
 801916e:	dc16      	bgt.n	801919e <SUBGRF_SetRfTxPower+0x4e>
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d003      	beq.n	801917e <SUBGRF_SetRfTxPower+0x2e>
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	2b01      	cmp	r3, #1
 801917a:	d00a      	beq.n	8019192 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801917c:	e00f      	b.n	801919e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801917e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019182:	2b0f      	cmp	r3, #15
 8019184:	dd02      	ble.n	801918c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019186:	2302      	movs	r3, #2
 8019188:	73fb      	strb	r3, [r7, #15]
            break;
 801918a:	e009      	b.n	80191a0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801918c:	2301      	movs	r3, #1
 801918e:	73fb      	strb	r3, [r7, #15]
            break;
 8019190:	e006      	b.n	80191a0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019192:	2301      	movs	r3, #1
 8019194:	73fb      	strb	r3, [r7, #15]
            break;
 8019196:	e003      	b.n	80191a0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019198:	2302      	movs	r3, #2
 801919a:	73fb      	strb	r3, [r7, #15]
            break;
 801919c:	e000      	b.n	80191a0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801919e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80191a0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80191a4:	7bfb      	ldrb	r3, [r7, #15]
 80191a6:	2202      	movs	r2, #2
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7ff fc35 	bl	8018a18 <SUBGRF_SetTxParams>

    return paSelect;
 80191ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3710      	adds	r7, #16
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80191b8:	b480      	push	{r7}
 80191ba:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80191bc:	2301      	movs	r3, #1
}
 80191be:	4618      	mov	r0, r3
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bc80      	pop	{r7}
 80191c4:	4770      	bx	lr
	...

080191c8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b082      	sub	sp, #8
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80191d0:	4b03      	ldr	r3, [pc, #12]	; (80191e0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	2001      	movs	r0, #1
 80191d6:	4798      	blx	r3
}
 80191d8:	bf00      	nop
 80191da:	3708      	adds	r7, #8
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	20001cfc 	.word	0x20001cfc

080191e4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b082      	sub	sp, #8
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80191ec:	4b03      	ldr	r3, [pc, #12]	; (80191fc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	2002      	movs	r0, #2
 80191f2:	4798      	blx	r3
}
 80191f4:	bf00      	nop
 80191f6:	3708      	adds	r7, #8
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	20001cfc 	.word	0x20001cfc

08019200 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019208:	4b03      	ldr	r3, [pc, #12]	; (8019218 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	2040      	movs	r0, #64	; 0x40
 801920e:	4798      	blx	r3
}
 8019210:	bf00      	nop
 8019212:	3708      	adds	r7, #8
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}
 8019218:	20001cfc 	.word	0x20001cfc

0801921c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	460b      	mov	r3, r1
 8019226:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019228:	78fb      	ldrb	r3, [r7, #3]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d002      	beq.n	8019234 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801922e:	2b01      	cmp	r3, #1
 8019230:	d005      	beq.n	801923e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019232:	e00a      	b.n	801924a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019234:	4b07      	ldr	r3, [pc, #28]	; (8019254 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2080      	movs	r0, #128	; 0x80
 801923a:	4798      	blx	r3
            break;
 801923c:	e005      	b.n	801924a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801923e:	4b05      	ldr	r3, [pc, #20]	; (8019254 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019246:	4798      	blx	r3
            break;
 8019248:	bf00      	nop
    }
}
 801924a:	bf00      	nop
 801924c:	3708      	adds	r7, #8
 801924e:	46bd      	mov	sp, r7
 8019250:	bd80      	pop	{r7, pc}
 8019252:	bf00      	nop
 8019254:	20001cfc 	.word	0x20001cfc

08019258 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019260:	4b04      	ldr	r3, [pc, #16]	; (8019274 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019268:	4798      	blx	r3
}
 801926a:	bf00      	nop
 801926c:	3708      	adds	r7, #8
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	20001cfc 	.word	0x20001cfc

08019278 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b082      	sub	sp, #8
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019280:	4b03      	ldr	r3, [pc, #12]	; (8019290 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	2020      	movs	r0, #32
 8019286:	4798      	blx	r3
}
 8019288:	bf00      	nop
 801928a:	3708      	adds	r7, #8
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}
 8019290:	20001cfc 	.word	0x20001cfc

08019294 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801929c:	4b03      	ldr	r3, [pc, #12]	; (80192ac <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2004      	movs	r0, #4
 80192a2:	4798      	blx	r3
}
 80192a4:	bf00      	nop
 80192a6:	3708      	adds	r7, #8
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	20001cfc 	.word	0x20001cfc

080192b0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80192b8:	4b03      	ldr	r3, [pc, #12]	; (80192c8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	2008      	movs	r0, #8
 80192be:	4798      	blx	r3
}
 80192c0:	bf00      	nop
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	20001cfc 	.word	0x20001cfc

080192cc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b082      	sub	sp, #8
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80192d4:	4b03      	ldr	r3, [pc, #12]	; (80192e4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	2010      	movs	r0, #16
 80192da:	4798      	blx	r3
}
 80192dc:	bf00      	nop
 80192de:	3708      	adds	r7, #8
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	20001cfc 	.word	0x20001cfc

080192e8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	4603      	mov	r3, r0
 80192f0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80192f2:	f7f1 fcbb 	bl	800ac6c <RBI_IsDCDC>
 80192f6:	4603      	mov	r3, r0
 80192f8:	2b01      	cmp	r3, #1
 80192fa:	d112      	bne.n	8019322 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80192fc:	f640 1023 	movw	r0, #2339	; 0x923
 8019300:	f7ff fe1e 	bl	8018f40 <SUBGRF_ReadRegister>
 8019304:	4603      	mov	r3, r0
 8019306:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019308:	7bfb      	ldrb	r3, [r7, #15]
 801930a:	f023 0306 	bic.w	r3, r3, #6
 801930e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019310:	7bfa      	ldrb	r2, [r7, #15]
 8019312:	79fb      	ldrb	r3, [r7, #7]
 8019314:	4313      	orrs	r3, r2
 8019316:	b2db      	uxtb	r3, r3
 8019318:	4619      	mov	r1, r3
 801931a:	f640 1023 	movw	r0, #2339	; 0x923
 801931e:	f7ff fdfb 	bl	8018f18 <SUBGRF_WriteRegister>
  }
}
 8019322:	bf00      	nop
 8019324:	3710      	adds	r7, #16
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
	...

0801932c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801932c:	b480      	push	{r7}
 801932e:	b085      	sub	sp, #20
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d101      	bne.n	801933e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801933a:	231f      	movs	r3, #31
 801933c:	e016      	b.n	801936c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801933e:	2300      	movs	r3, #0
 8019340:	73fb      	strb	r3, [r7, #15]
 8019342:	e00f      	b.n	8019364 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019344:	7bfb      	ldrb	r3, [r7, #15]
 8019346:	4a0c      	ldr	r2, [pc, #48]	; (8019378 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801934c:	687a      	ldr	r2, [r7, #4]
 801934e:	429a      	cmp	r2, r3
 8019350:	d205      	bcs.n	801935e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019352:	7bfb      	ldrb	r3, [r7, #15]
 8019354:	4a08      	ldr	r2, [pc, #32]	; (8019378 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	4413      	add	r3, r2
 801935a:	791b      	ldrb	r3, [r3, #4]
 801935c:	e006      	b.n	801936c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801935e:	7bfb      	ldrb	r3, [r7, #15]
 8019360:	3301      	adds	r3, #1
 8019362:	73fb      	strb	r3, [r7, #15]
 8019364:	7bfb      	ldrb	r3, [r7, #15]
 8019366:	2b15      	cmp	r3, #21
 8019368:	d9ec      	bls.n	8019344 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801936a:	e7fe      	b.n	801936a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801936c:	4618      	mov	r0, r3
 801936e:	3714      	adds	r7, #20
 8019370:	46bd      	mov	sp, r7
 8019372:	bc80      	pop	{r7}
 8019374:	4770      	bx	lr
 8019376:	bf00      	nop
 8019378:	08020814 	.word	0x08020814

0801937c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b08a      	sub	sp, #40	; 0x28
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019386:	4b35      	ldr	r3, [pc, #212]	; (801945c <SUBGRF_GetCFO+0xe0>)
 8019388:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801938a:	f640 0007 	movw	r0, #2055	; 0x807
 801938e:	f7ff fdd7 	bl	8018f40 <SUBGRF_ReadRegister>
 8019392:	4603      	mov	r3, r0
 8019394:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019396:	7ffb      	ldrb	r3, [r7, #31]
 8019398:	08db      	lsrs	r3, r3, #3
 801939a:	b2db      	uxtb	r3, r3
 801939c:	f003 0303 	and.w	r3, r3, #3
 80193a0:	3328      	adds	r3, #40	; 0x28
 80193a2:	443b      	add	r3, r7
 80193a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80193a8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80193aa:	7ffb      	ldrb	r3, [r7, #31]
 80193ac:	f003 0307 	and.w	r3, r3, #7
 80193b0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80193b2:	7fba      	ldrb	r2, [r7, #30]
 80193b4:	7f7b      	ldrb	r3, [r7, #29]
 80193b6:	3b01      	subs	r3, #1
 80193b8:	fa02 f303 	lsl.w	r3, r2, r3
 80193bc:	461a      	mov	r2, r3
 80193be:	4b28      	ldr	r3, [pc, #160]	; (8019460 <SUBGRF_GetCFO+0xe4>)
 80193c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80193c4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80193c6:	69ba      	ldr	r2, [r7, #24]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80193ce:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80193d0:	2301      	movs	r3, #1
 80193d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80193d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193da:	697a      	ldr	r2, [r7, #20]
 80193dc:	fb02 f303 	mul.w	r3, r2, r3
 80193e0:	2b07      	cmp	r3, #7
 80193e2:	d802      	bhi.n	80193ea <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 80193e4:	2302      	movs	r3, #2
 80193e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80193ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193ee:	697a      	ldr	r2, [r7, #20]
 80193f0:	fb02 f303 	mul.w	r3, r2, r3
 80193f4:	2b03      	cmp	r3, #3
 80193f6:	d802      	bhi.n	80193fe <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 80193f8:	2304      	movs	r3, #4
 80193fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80193fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019402:	69bb      	ldr	r3, [r7, #24]
 8019404:	fb02 f303 	mul.w	r3, r2, r3
 8019408:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801940a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801940e:	f7ff fd97 	bl	8018f40 <SUBGRF_ReadRegister>
 8019412:	4603      	mov	r3, r0
 8019414:	021b      	lsls	r3, r3, #8
 8019416:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801941a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801941c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019420:	f7ff fd8e 	bl	8018f40 <SUBGRF_ReadRegister>
 8019424:	4603      	mov	r3, r0
 8019426:	461a      	mov	r2, r3
 8019428:	6a3b      	ldr	r3, [r7, #32]
 801942a:	4313      	orrs	r3, r2
 801942c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801942e:	6a3b      	ldr	r3, [r7, #32]
 8019430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019434:	2b00      	cmp	r3, #0
 8019436:	d005      	beq.n	8019444 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019438:	6a3b      	ldr	r3, [r7, #32]
 801943a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801943e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019442:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019444:	693b      	ldr	r3, [r7, #16]
 8019446:	095b      	lsrs	r3, r3, #5
 8019448:	6a3a      	ldr	r2, [r7, #32]
 801944a:	fb02 f303 	mul.w	r3, r2, r3
 801944e:	11da      	asrs	r2, r3, #7
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	601a      	str	r2, [r3, #0]
}
 8019454:	bf00      	nop
 8019456:	3728      	adds	r7, #40	; 0x28
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	0c0a0804 	.word	0x0c0a0804
 8019460:	01e84800 	.word	0x01e84800

08019464 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019464:	b480      	push	{r7}
 8019466:	b087      	sub	sp, #28
 8019468:	af00      	add	r7, sp, #0
 801946a:	4603      	mov	r3, r0
 801946c:	60b9      	str	r1, [r7, #8]
 801946e:	607a      	str	r2, [r7, #4]
 8019470:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019472:	2300      	movs	r3, #0
 8019474:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019476:	f04f 33ff 	mov.w	r3, #4294967295
 801947a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801947c:	697b      	ldr	r3, [r7, #20]
}
 801947e:	4618      	mov	r0, r3
 8019480:	371c      	adds	r7, #28
 8019482:	46bd      	mov	sp, r7
 8019484:	bc80      	pop	{r7}
 8019486:	4770      	bx	lr

08019488 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019488:	b480      	push	{r7}
 801948a:	b087      	sub	sp, #28
 801948c:	af00      	add	r7, sp, #0
 801948e:	4603      	mov	r3, r0
 8019490:	60b9      	str	r1, [r7, #8]
 8019492:	607a      	str	r2, [r7, #4]
 8019494:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019496:	2300      	movs	r3, #0
 8019498:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801949a:	f04f 33ff 	mov.w	r3, #4294967295
 801949e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80194a0:	697b      	ldr	r3, [r7, #20]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	371c      	adds	r7, #28
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bc80      	pop	{r7}
 80194aa:	4770      	bx	lr

080194ac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80194ac:	b480      	push	{r7}
 80194ae:	b085      	sub	sp, #20
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	60f8      	str	r0, [r7, #12]
 80194b4:	60b9      	str	r1, [r7, #8]
 80194b6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80194b8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80194bc:	4618      	mov	r0, r3
 80194be:	3714      	adds	r7, #20
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bc80      	pop	{r7}
 80194c4:	4770      	bx	lr

080194c6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 80194c6:	b480      	push	{r7}
 80194c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80194ca:	bf00      	nop
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bc80      	pop	{r7}
 80194d0:	4770      	bx	lr

080194d2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80194d2:	b480      	push	{r7}
 80194d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80194d6:	2300      	movs	r3, #0
#endif
}
 80194d8:	4618      	mov	r0, r3
 80194da:	46bd      	mov	sp, r7
 80194dc:	bc80      	pop	{r7}
 80194de:	4770      	bx	lr

080194e0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80194e0:	b480      	push	{r7}
 80194e2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80194e4:	2300      	movs	r3, #0
#endif
}
 80194e6:	4618      	mov	r0, r3
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bc80      	pop	{r7}
 80194ec:	4770      	bx	lr

080194ee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80194ee:	b480      	push	{r7}
 80194f0:	b083      	sub	sp, #12
 80194f2:	af00      	add	r7, sp, #0
 80194f4:	4603      	mov	r3, r0
 80194f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80194f8:	bf00      	nop
 80194fa:	370c      	adds	r7, #12
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bc80      	pop	{r7}
 8019500:	4770      	bx	lr

08019502 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019502:	b480      	push	{r7}
 8019504:	b087      	sub	sp, #28
 8019506:	af00      	add	r7, sp, #0
 8019508:	60f8      	str	r0, [r7, #12]
 801950a:	460b      	mov	r3, r1
 801950c:	607a      	str	r2, [r7, #4]
 801950e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019510:	f04f 33ff 	mov.w	r3, #4294967295
 8019514:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8019516:	697b      	ldr	r3, [r7, #20]
}
 8019518:	4618      	mov	r0, r3
 801951a:	371c      	adds	r7, #28
 801951c:	46bd      	mov	sp, r7
 801951e:	bc80      	pop	{r7}
 8019520:	4770      	bx	lr

08019522 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019522:	b480      	push	{r7}
 8019524:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019526:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801952a:	4618      	mov	r0, r3
 801952c:	46bd      	mov	sp, r7
 801952e:	bc80      	pop	{r7}
 8019530:	4770      	bx	lr

08019532 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019532:	b480      	push	{r7}
 8019534:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019536:	bf00      	nop
 8019538:	46bd      	mov	sp, r7
 801953a:	bc80      	pop	{r7}
 801953c:	4770      	bx	lr

0801953e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801953e:	b480      	push	{r7}
 8019540:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019542:	bf00      	nop
 8019544:	46bd      	mov	sp, r7
 8019546:	bc80      	pop	{r7}
 8019548:	4770      	bx	lr

0801954a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801954a:	b480      	push	{r7}
 801954c:	b083      	sub	sp, #12
 801954e:	af00      	add	r7, sp, #0
 8019550:	4603      	mov	r3, r0
 8019552:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019554:	bf00      	nop
 8019556:	370c      	adds	r7, #12
 8019558:	46bd      	mov	sp, r7
 801955a:	bc80      	pop	{r7}
 801955c:	4770      	bx	lr

0801955e <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801955e:	b480      	push	{r7}
 8019560:	b087      	sub	sp, #28
 8019562:	af00      	add	r7, sp, #0
 8019564:	60f8      	str	r0, [r7, #12]
 8019566:	60b9      	str	r1, [r7, #8]
 8019568:	4613      	mov	r3, r2
 801956a:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019574:	e007      	b.n	8019586 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019576:	693a      	ldr	r2, [r7, #16]
 8019578:	1c53      	adds	r3, r2, #1
 801957a:	613b      	str	r3, [r7, #16]
 801957c:	697b      	ldr	r3, [r7, #20]
 801957e:	1c59      	adds	r1, r3, #1
 8019580:	6179      	str	r1, [r7, #20]
 8019582:	7812      	ldrb	r2, [r2, #0]
 8019584:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019586:	88fb      	ldrh	r3, [r7, #6]
 8019588:	1e5a      	subs	r2, r3, #1
 801958a:	80fa      	strh	r2, [r7, #6]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d1f2      	bne.n	8019576 <UTIL_MEM_cpy_8+0x18>
    }
}
 8019590:	bf00      	nop
 8019592:	bf00      	nop
 8019594:	371c      	adds	r7, #28
 8019596:	46bd      	mov	sp, r7
 8019598:	bc80      	pop	{r7}
 801959a:	4770      	bx	lr

0801959c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801959c:	b480      	push	{r7}
 801959e:	b085      	sub	sp, #20
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	460b      	mov	r3, r1
 80195a6:	70fb      	strb	r3, [r7, #3]
 80195a8:	4613      	mov	r3, r2
 80195aa:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80195b0:	e004      	b.n	80195bc <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	1c5a      	adds	r2, r3, #1
 80195b6:	60fa      	str	r2, [r7, #12]
 80195b8:	78fa      	ldrb	r2, [r7, #3]
 80195ba:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80195bc:	883b      	ldrh	r3, [r7, #0]
 80195be:	1e5a      	subs	r2, r3, #1
 80195c0:	803a      	strh	r2, [r7, #0]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d1f5      	bne.n	80195b2 <UTIL_MEM_set_8+0x16>
  }
}
 80195c6:	bf00      	nop
 80195c8:	bf00      	nop
 80195ca:	3714      	adds	r7, #20
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bc80      	pop	{r7}
 80195d0:	4770      	bx	lr

080195d2 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80195d2:	b082      	sub	sp, #8
 80195d4:	b480      	push	{r7}
 80195d6:	b087      	sub	sp, #28
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	1d38      	adds	r0, r7, #4
 80195de:	e880 0006 	stmia.w	r0, {r1, r2}
 80195e2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80195e4:	2300      	movs	r3, #0
 80195e6:	613b      	str	r3, [r7, #16]
 80195e8:	2300      	movs	r3, #0
 80195ea:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 80195ec:	687a      	ldr	r2, [r7, #4]
 80195ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195f0:	4413      	add	r3, r2
 80195f2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80195f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4413      	add	r3, r2
 8019602:	b29b      	uxth	r3, r3
 8019604:	b21b      	sxth	r3, r3
 8019606:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019608:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801960c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019610:	db0a      	blt.n	8019628 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019612:	693b      	ldr	r3, [r7, #16]
 8019614:	3301      	adds	r3, #1
 8019616:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019618:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801961c:	b29b      	uxth	r3, r3
 801961e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019622:	b29b      	uxth	r3, r3
 8019624:	b21b      	sxth	r3, r3
 8019626:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	461a      	mov	r2, r3
 801962c:	f107 0310 	add.w	r3, r7, #16
 8019630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019634:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	371c      	adds	r7, #28
 801963c:	46bd      	mov	sp, r7
 801963e:	bc80      	pop	{r7}
 8019640:	b002      	add	sp, #8
 8019642:	4770      	bx	lr

08019644 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019644:	b082      	sub	sp, #8
 8019646:	b480      	push	{r7}
 8019648:	b087      	sub	sp, #28
 801964a:	af00      	add	r7, sp, #0
 801964c:	60f8      	str	r0, [r7, #12]
 801964e:	1d38      	adds	r0, r7, #4
 8019650:	e880 0006 	stmia.w	r0, {r1, r2}
 8019654:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019656:	2300      	movs	r3, #0
 8019658:	613b      	str	r3, [r7, #16]
 801965a:	2300      	movs	r3, #0
 801965c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801965e:	687a      	ldr	r2, [r7, #4]
 8019660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019662:	1ad3      	subs	r3, r2, r3
 8019664:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019666:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801966a:	b29a      	uxth	r2, r3
 801966c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019670:	b29b      	uxth	r3, r3
 8019672:	1ad3      	subs	r3, r2, r3
 8019674:	b29b      	uxth	r3, r3
 8019676:	b21b      	sxth	r3, r3
 8019678:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801967a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801967e:	2b00      	cmp	r3, #0
 8019680:	da0a      	bge.n	8019698 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019682:	693b      	ldr	r3, [r7, #16]
 8019684:	3b01      	subs	r3, #1
 8019686:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801968c:	b29b      	uxth	r3, r3
 801968e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019692:	b29b      	uxth	r3, r3
 8019694:	b21b      	sxth	r3, r3
 8019696:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	461a      	mov	r2, r3
 801969c:	f107 0310 	add.w	r3, r7, #16
 80196a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80196a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80196a8:	68f8      	ldr	r0, [r7, #12]
 80196aa:	371c      	adds	r7, #28
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bc80      	pop	{r7}
 80196b0:	b002      	add	sp, #8
 80196b2:	4770      	bx	lr

080196b4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b088      	sub	sp, #32
 80196b8:	af02      	add	r7, sp, #8
 80196ba:	463b      	mov	r3, r7
 80196bc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80196c0:	2300      	movs	r3, #0
 80196c2:	60bb      	str	r3, [r7, #8]
 80196c4:	2300      	movs	r3, #0
 80196c6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80196c8:	4b10      	ldr	r3, [pc, #64]	; (801970c <SysTimeSet+0x58>)
 80196ca:	691b      	ldr	r3, [r3, #16]
 80196cc:	f107 0208 	add.w	r2, r7, #8
 80196d0:	3204      	adds	r2, #4
 80196d2:	4610      	mov	r0, r2
 80196d4:	4798      	blx	r3
 80196d6:	4603      	mov	r3, r0
 80196d8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80196da:	f107 0010 	add.w	r0, r7, #16
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	9300      	str	r3, [sp, #0]
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	463a      	mov	r2, r7
 80196e6:	ca06      	ldmia	r2, {r1, r2}
 80196e8:	f7ff ffac 	bl	8019644 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80196ec:	4b07      	ldr	r3, [pc, #28]	; (801970c <SysTimeSet+0x58>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	693a      	ldr	r2, [r7, #16]
 80196f2:	4610      	mov	r0, r2
 80196f4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80196f6:	4b05      	ldr	r3, [pc, #20]	; (801970c <SysTimeSet+0x58>)
 80196f8:	689b      	ldr	r3, [r3, #8]
 80196fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80196fe:	4610      	mov	r0, r2
 8019700:	4798      	blx	r3
}
 8019702:	bf00      	nop
 8019704:	3718      	adds	r7, #24
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	bf00      	nop
 801970c:	08020408 	.word	0x08020408

08019710 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b08a      	sub	sp, #40	; 0x28
 8019714:	af02      	add	r7, sp, #8
 8019716:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019718:	2300      	movs	r3, #0
 801971a:	61bb      	str	r3, [r7, #24]
 801971c:	2300      	movs	r3, #0
 801971e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019720:	2300      	movs	r3, #0
 8019722:	613b      	str	r3, [r7, #16]
 8019724:	2300      	movs	r3, #0
 8019726:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019728:	4b14      	ldr	r3, [pc, #80]	; (801977c <SysTimeGet+0x6c>)
 801972a:	691b      	ldr	r3, [r3, #16]
 801972c:	f107 0218 	add.w	r2, r7, #24
 8019730:	3204      	adds	r2, #4
 8019732:	4610      	mov	r0, r2
 8019734:	4798      	blx	r3
 8019736:	4603      	mov	r3, r0
 8019738:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801973a:	4b10      	ldr	r3, [pc, #64]	; (801977c <SysTimeGet+0x6c>)
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	4798      	blx	r3
 8019740:	4603      	mov	r3, r0
 8019742:	b21b      	sxth	r3, r3
 8019744:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019746:	4b0d      	ldr	r3, [pc, #52]	; (801977c <SysTimeGet+0x6c>)
 8019748:	685b      	ldr	r3, [r3, #4]
 801974a:	4798      	blx	r3
 801974c:	4603      	mov	r3, r0
 801974e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019750:	f107 0010 	add.w	r0, r7, #16
 8019754:	69fb      	ldr	r3, [r7, #28]
 8019756:	9300      	str	r3, [sp, #0]
 8019758:	69bb      	ldr	r3, [r7, #24]
 801975a:	f107 0208 	add.w	r2, r7, #8
 801975e:	ca06      	ldmia	r2, {r1, r2}
 8019760:	f7ff ff37 	bl	80195d2 <SysTimeAdd>

  return sysTime;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	461a      	mov	r2, r3
 8019768:	f107 0310 	add.w	r3, r7, #16
 801976c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019770:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	3720      	adds	r7, #32
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}
 801977c:	08020408 	.word	0x08020408

08019780 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019788:	2300      	movs	r3, #0
 801978a:	60bb      	str	r3, [r7, #8]
 801978c:	2300      	movs	r3, #0
 801978e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019790:	4b0a      	ldr	r3, [pc, #40]	; (80197bc <SysTimeGetMcuTime+0x3c>)
 8019792:	691b      	ldr	r3, [r3, #16]
 8019794:	f107 0208 	add.w	r2, r7, #8
 8019798:	3204      	adds	r2, #4
 801979a:	4610      	mov	r0, r2
 801979c:	4798      	blx	r3
 801979e:	4603      	mov	r3, r0
 80197a0:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	461a      	mov	r2, r3
 80197a6:	f107 0308 	add.w	r3, r7, #8
 80197aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	3710      	adds	r7, #16
 80197b6:	46bd      	mov	sp, r7
 80197b8:	bd80      	pop	{r7, pc}
 80197ba:	bf00      	nop
 80197bc:	08020408 	.word	0x08020408

080197c0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b088      	sub	sp, #32
 80197c4:	af02      	add	r7, sp, #8
 80197c6:	463b      	mov	r3, r7
 80197c8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80197cc:	4b0f      	ldr	r3, [pc, #60]	; (801980c <SysTimeToMs+0x4c>)
 80197ce:	68db      	ldr	r3, [r3, #12]
 80197d0:	4798      	blx	r3
 80197d2:	4603      	mov	r3, r0
 80197d4:	b21b      	sxth	r3, r3
 80197d6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80197d8:	4b0c      	ldr	r3, [pc, #48]	; (801980c <SysTimeToMs+0x4c>)
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	4798      	blx	r3
 80197de:	4603      	mov	r3, r0
 80197e0:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80197e2:	f107 0008 	add.w	r0, r7, #8
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	9300      	str	r3, [sp, #0]
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	463a      	mov	r2, r7
 80197ee:	ca06      	ldmia	r2, {r1, r2}
 80197f0:	f7ff ff28 	bl	8019644 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80197fa:	fb02 f303 	mul.w	r3, r2, r3
 80197fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019802:	4413      	add	r3, r2
}
 8019804:	4618      	mov	r0, r3
 8019806:	3718      	adds	r7, #24
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}
 801980c:	08020408 	.word	0x08020408

08019810 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b08a      	sub	sp, #40	; 0x28
 8019814:	af02      	add	r7, sp, #8
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	4a19      	ldr	r2, [pc, #100]	; (8019884 <SysTimeFromMs+0x74>)
 801981e:	fba2 2303 	umull	r2, r3, r2, r3
 8019822:	099b      	lsrs	r3, r3, #6
 8019824:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019826:	69fb      	ldr	r3, [r7, #28]
 8019828:	617b      	str	r3, [r7, #20]
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	b29a      	uxth	r2, r3
 801982e:	69fb      	ldr	r3, [r7, #28]
 8019830:	b29b      	uxth	r3, r3
 8019832:	4619      	mov	r1, r3
 8019834:	0149      	lsls	r1, r1, #5
 8019836:	1ac9      	subs	r1, r1, r3
 8019838:	0089      	lsls	r1, r1, #2
 801983a:	440b      	add	r3, r1
 801983c:	00db      	lsls	r3, r3, #3
 801983e:	b29b      	uxth	r3, r3
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	b29b      	uxth	r3, r3
 8019844:	b21b      	sxth	r3, r3
 8019846:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019848:	f107 030c 	add.w	r3, r7, #12
 801984c:	2200      	movs	r2, #0
 801984e:	601a      	str	r2, [r3, #0]
 8019850:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019852:	4b0d      	ldr	r3, [pc, #52]	; (8019888 <SysTimeFromMs+0x78>)
 8019854:	68db      	ldr	r3, [r3, #12]
 8019856:	4798      	blx	r3
 8019858:	4603      	mov	r3, r0
 801985a:	b21b      	sxth	r3, r3
 801985c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801985e:	4b0a      	ldr	r3, [pc, #40]	; (8019888 <SysTimeFromMs+0x78>)
 8019860:	685b      	ldr	r3, [r3, #4]
 8019862:	4798      	blx	r3
 8019864:	4603      	mov	r3, r0
 8019866:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	693b      	ldr	r3, [r7, #16]
 801986c:	9300      	str	r3, [sp, #0]
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	f107 0214 	add.w	r2, r7, #20
 8019874:	ca06      	ldmia	r2, {r1, r2}
 8019876:	f7ff feac 	bl	80195d2 <SysTimeAdd>
}
 801987a:	6878      	ldr	r0, [r7, #4]
 801987c:	3720      	adds	r7, #32
 801987e:	46bd      	mov	sp, r7
 8019880:	bd80      	pop	{r7, pc}
 8019882:	bf00      	nop
 8019884:	10624dd3 	.word	0x10624dd3
 8019888:	08020408 	.word	0x08020408

0801988c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b08c      	sub	sp, #48	; 0x30
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019894:	4b67      	ldr	r3, [pc, #412]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801989a:	4b66      	ldr	r3, [pc, #408]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	4013      	ands	r3, r2
 80198a2:	4a64      	ldr	r2, [pc, #400]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 80198a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80198a6:	e083      	b.n	80199b0 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80198a8:	2300      	movs	r3, #0
 80198aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80198ac:	e002      	b.n	80198b4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80198ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b0:	3301      	adds	r3, #1
 80198b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80198b4:	4a60      	ldr	r2, [pc, #384]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 80198b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80198bc:	4b5f      	ldr	r3, [pc, #380]	; (8019a3c <UTIL_SEQ_Run+0x1b0>)
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	401a      	ands	r2, r3
 80198c2:	4b5c      	ldr	r3, [pc, #368]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4013      	ands	r3, r2
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d0f0      	beq.n	80198ae <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80198cc:	4a5a      	ldr	r2, [pc, #360]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 80198ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80198d4:	4b59      	ldr	r3, [pc, #356]	; (8019a3c <UTIL_SEQ_Run+0x1b0>)
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	401a      	ands	r2, r3
 80198da:	4b56      	ldr	r3, [pc, #344]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4013      	ands	r3, r2
 80198e0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80198e2:	4a55      	ldr	r2, [pc, #340]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 80198e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e6:	00db      	lsls	r3, r3, #3
 80198e8:	4413      	add	r3, r2
 80198ea:	685a      	ldr	r2, [r3, #4]
 80198ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ee:	4013      	ands	r3, r2
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d106      	bne.n	8019902 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80198f4:	4a50      	ldr	r2, [pc, #320]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 80198f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f8:	00db      	lsls	r3, r3, #3
 80198fa:	4413      	add	r3, r2
 80198fc:	f04f 32ff 	mov.w	r2, #4294967295
 8019900:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019902:	4a4d      	ldr	r2, [pc, #308]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 8019904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019906:	00db      	lsls	r3, r3, #3
 8019908:	4413      	add	r3, r2
 801990a:	685a      	ldr	r2, [r3, #4]
 801990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990e:	4013      	ands	r3, r2
 8019910:	4618      	mov	r0, r3
 8019912:	f000 f8ff 	bl	8019b14 <SEQ_BitPosition>
 8019916:	4603      	mov	r3, r0
 8019918:	461a      	mov	r2, r3
 801991a:	4b49      	ldr	r3, [pc, #292]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 801991c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801991e:	4a46      	ldr	r2, [pc, #280]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 8019920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019922:	00db      	lsls	r3, r3, #3
 8019924:	4413      	add	r3, r2
 8019926:	685a      	ldr	r2, [r3, #4]
 8019928:	4b45      	ldr	r3, [pc, #276]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	2101      	movs	r1, #1
 801992e:	fa01 f303 	lsl.w	r3, r1, r3
 8019932:	43db      	mvns	r3, r3
 8019934:	401a      	ands	r2, r3
 8019936:	4940      	ldr	r1, [pc, #256]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 8019938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993a:	00db      	lsls	r3, r3, #3
 801993c:	440b      	add	r3, r1
 801993e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019940:	f3ef 8310 	mrs	r3, PRIMASK
 8019944:	61bb      	str	r3, [r7, #24]
  return(result);
 8019946:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801994a:	b672      	cpsid	i
}
 801994c:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801994e:	4b3c      	ldr	r3, [pc, #240]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	2201      	movs	r2, #1
 8019954:	fa02 f303 	lsl.w	r3, r2, r3
 8019958:	43da      	mvns	r2, r3
 801995a:	4b3a      	ldr	r3, [pc, #232]	; (8019a44 <UTIL_SEQ_Run+0x1b8>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	4013      	ands	r3, r2
 8019960:	4a38      	ldr	r2, [pc, #224]	; (8019a44 <UTIL_SEQ_Run+0x1b8>)
 8019962:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019964:	2302      	movs	r3, #2
 8019966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019968:	e013      	b.n	8019992 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801996c:	3b01      	subs	r3, #1
 801996e:	4a32      	ldr	r2, [pc, #200]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 8019970:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019974:	4b32      	ldr	r3, [pc, #200]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	2201      	movs	r2, #1
 801997a:	fa02 f303 	lsl.w	r3, r2, r3
 801997e:	43da      	mvns	r2, r3
 8019980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019982:	3b01      	subs	r3, #1
 8019984:	400a      	ands	r2, r1
 8019986:	492c      	ldr	r1, [pc, #176]	; (8019a38 <UTIL_SEQ_Run+0x1ac>)
 8019988:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801998e:	3b01      	subs	r3, #1
 8019990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019994:	2b00      	cmp	r3, #0
 8019996:	d1e8      	bne.n	801996a <UTIL_SEQ_Run+0xde>
 8019998:	6a3b      	ldr	r3, [r7, #32]
 801999a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801999c:	697b      	ldr	r3, [r7, #20]
 801999e:	f383 8810 	msr	PRIMASK, r3
}
 80199a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80199a4:	4b26      	ldr	r3, [pc, #152]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4a27      	ldr	r2, [pc, #156]	; (8019a48 <UTIL_SEQ_Run+0x1bc>)
 80199aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199ae:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80199b0:	4b24      	ldr	r3, [pc, #144]	; (8019a44 <UTIL_SEQ_Run+0x1b8>)
 80199b2:	681a      	ldr	r2, [r3, #0]
 80199b4:	4b21      	ldr	r3, [pc, #132]	; (8019a3c <UTIL_SEQ_Run+0x1b0>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	401a      	ands	r2, r3
 80199ba:	4b1e      	ldr	r3, [pc, #120]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	4013      	ands	r3, r2
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d007      	beq.n	80199d4 <UTIL_SEQ_Run+0x148>
 80199c4:	4b21      	ldr	r3, [pc, #132]	; (8019a4c <UTIL_SEQ_Run+0x1c0>)
 80199c6:	681a      	ldr	r2, [r3, #0]
 80199c8:	4b21      	ldr	r3, [pc, #132]	; (8019a50 <UTIL_SEQ_Run+0x1c4>)
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	4013      	ands	r3, r2
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	f43f af6a 	beq.w	80198a8 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80199d4:	4b1a      	ldr	r3, [pc, #104]	; (8019a40 <UTIL_SEQ_Run+0x1b4>)
 80199d6:	f04f 32ff 	mov.w	r2, #4294967295
 80199da:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80199dc:	f000 f88e 	bl	8019afc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199e0:	f3ef 8310 	mrs	r3, PRIMASK
 80199e4:	613b      	str	r3, [r7, #16]
  return(result);
 80199e6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80199e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80199ea:	b672      	cpsid	i
}
 80199ec:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80199ee:	4b15      	ldr	r3, [pc, #84]	; (8019a44 <UTIL_SEQ_Run+0x1b8>)
 80199f0:	681a      	ldr	r2, [r3, #0]
 80199f2:	4b12      	ldr	r3, [pc, #72]	; (8019a3c <UTIL_SEQ_Run+0x1b0>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	401a      	ands	r2, r3
 80199f8:	4b0e      	ldr	r3, [pc, #56]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	4013      	ands	r3, r2
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d108      	bne.n	8019a14 <UTIL_SEQ_Run+0x188>
 8019a02:	4b12      	ldr	r3, [pc, #72]	; (8019a4c <UTIL_SEQ_Run+0x1c0>)
 8019a04:	681a      	ldr	r2, [r3, #0]
 8019a06:	4b12      	ldr	r3, [pc, #72]	; (8019a50 <UTIL_SEQ_Run+0x1c4>)
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	4013      	ands	r3, r2
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d101      	bne.n	8019a14 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8019a10:	f000 f86e 	bl	8019af0 <UTIL_SEQ_Idle>
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f383 8810 	msr	PRIMASK, r3
}
 8019a1e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8019a20:	f000 f872 	bl	8019b08 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019a24:	4a03      	ldr	r2, [pc, #12]	; (8019a34 <UTIL_SEQ_Run+0x1a8>)
 8019a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a28:	6013      	str	r3, [r2, #0]

  return;
 8019a2a:	bf00      	nop
}
 8019a2c:	3730      	adds	r7, #48	; 0x30
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	bd80      	pop	{r7, pc}
 8019a32:	bf00      	nop
 8019a34:	200000e4 	.word	0x200000e4
 8019a38:	20001d90 	.word	0x20001d90
 8019a3c:	200000e0 	.word	0x200000e0
 8019a40:	20001d0c 	.word	0x20001d0c
 8019a44:	20001d00 	.word	0x20001d00
 8019a48:	20001d10 	.word	0x20001d10
 8019a4c:	20001d04 	.word	0x20001d04
 8019a50:	20001d08 	.word	0x20001d08

08019a54 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b088      	sub	sp, #32
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	60f8      	str	r0, [r7, #12]
 8019a5c:	60b9      	str	r1, [r7, #8]
 8019a5e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a60:	f3ef 8310 	mrs	r3, PRIMASK
 8019a64:	617b      	str	r3, [r7, #20]
  return(result);
 8019a66:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a6a:	b672      	cpsid	i
}
 8019a6c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019a6e:	68f8      	ldr	r0, [r7, #12]
 8019a70:	f000 f850 	bl	8019b14 <SEQ_BitPosition>
 8019a74:	4603      	mov	r3, r0
 8019a76:	4619      	mov	r1, r3
 8019a78:	4a06      	ldr	r2, [pc, #24]	; (8019a94 <UTIL_SEQ_RegTask+0x40>)
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a84:	69bb      	ldr	r3, [r7, #24]
 8019a86:	f383 8810 	msr	PRIMASK, r3
}
 8019a8a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019a8c:	bf00      	nop
}
 8019a8e:	3720      	adds	r7, #32
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd80      	pop	{r7, pc}
 8019a94:	20001d10 	.word	0x20001d10

08019a98 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019a98:	b480      	push	{r7}
 8019a9a:	b087      	sub	sp, #28
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
 8019aa0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8019aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8019aa8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019aac:	b672      	cpsid	i
}
 8019aae:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019ab0:	4b0d      	ldr	r3, [pc, #52]	; (8019ae8 <UTIL_SEQ_SetTask+0x50>)
 8019ab2:	681a      	ldr	r2, [r3, #0]
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	4a0b      	ldr	r2, [pc, #44]	; (8019ae8 <UTIL_SEQ_SetTask+0x50>)
 8019aba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019abc:	4a0b      	ldr	r2, [pc, #44]	; (8019aec <UTIL_SEQ_SetTask+0x54>)
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	431a      	orrs	r2, r3
 8019ac8:	4908      	ldr	r1, [pc, #32]	; (8019aec <UTIL_SEQ_SetTask+0x54>)
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad4:	693b      	ldr	r3, [r7, #16]
 8019ad6:	f383 8810 	msr	PRIMASK, r3
}
 8019ada:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019adc:	bf00      	nop
}
 8019ade:	371c      	adds	r7, #28
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bc80      	pop	{r7}
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	20001d00 	.word	0x20001d00
 8019aec:	20001d90 	.word	0x20001d90

08019af0 <UTIL_SEQ_Idle>:
  UTIL_SEQ_Run(~TaskId_bm);
  return;
}

__WEAK void UTIL_SEQ_Idle( void )
{
 8019af0:	b480      	push	{r7}
 8019af2:	af00      	add	r7, sp, #0
  return;
 8019af4:	bf00      	nop
}
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bc80      	pop	{r7}
 8019afa:	4770      	bx	lr

08019afc <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019afc:	b480      	push	{r7}
 8019afe:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019b00:	bf00      	nop
}
 8019b02:	46bd      	mov	sp, r7
 8019b04:	bc80      	pop	{r7}
 8019b06:	4770      	bx	lr

08019b08 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019b08:	b480      	push	{r7}
 8019b0a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019b0c:	bf00      	nop
}
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bc80      	pop	{r7}
 8019b12:	4770      	bx	lr

08019b14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	0c1b      	lsrs	r3, r3, #16
 8019b24:	041b      	lsls	r3, r3, #16
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d104      	bne.n	8019b34 <SEQ_BitPosition+0x20>
 8019b2a:	2310      	movs	r3, #16
 8019b2c:	73fb      	strb	r3, [r7, #15]
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	041b      	lsls	r3, r3, #16
 8019b32:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d105      	bne.n	8019b4a <SEQ_BitPosition+0x36>
 8019b3e:	7bfb      	ldrb	r3, [r7, #15]
 8019b40:	3308      	adds	r3, #8
 8019b42:	73fb      	strb	r3, [r7, #15]
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	021b      	lsls	r3, r3, #8
 8019b48:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d105      	bne.n	8019b60 <SEQ_BitPosition+0x4c>
 8019b54:	7bfb      	ldrb	r3, [r7, #15]
 8019b56:	3304      	adds	r3, #4
 8019b58:	73fb      	strb	r3, [r7, #15]
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	011b      	lsls	r3, r3, #4
 8019b5e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	0f1b      	lsrs	r3, r3, #28
 8019b64:	4a06      	ldr	r2, [pc, #24]	; (8019b80 <SEQ_BitPosition+0x6c>)
 8019b66:	5cd2      	ldrb	r2, [r2, r3]
 8019b68:	7bfb      	ldrb	r3, [r7, #15]
 8019b6a:	4413      	add	r3, r2
 8019b6c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019b6e:	7bfb      	ldrb	r3, [r7, #15]
 8019b70:	f1c3 031f 	rsb	r3, r3, #31
 8019b74:	b2db      	uxtb	r3, r3
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	3714      	adds	r7, #20
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bc80      	pop	{r7}
 8019b7e:	4770      	bx	lr
 8019b80:	080208c4 	.word	0x080208c4

08019b84 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019b88:	4b04      	ldr	r3, [pc, #16]	; (8019b9c <UTIL_TIMER_Init+0x18>)
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019b8e:	4b04      	ldr	r3, [pc, #16]	; (8019ba0 <UTIL_TIMER_Init+0x1c>)
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	4798      	blx	r3
 8019b94:	4603      	mov	r3, r0
}
 8019b96:	4618      	mov	r0, r3
 8019b98:	bd80      	pop	{r7, pc}
 8019b9a:	bf00      	nop
 8019b9c:	20001da0 	.word	0x20001da0
 8019ba0:	080203dc 	.word	0x080203dc

08019ba4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b084      	sub	sp, #16
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	603b      	str	r3, [r7, #0]
 8019bb0:	4613      	mov	r3, r2
 8019bb2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d023      	beq.n	8019c02 <UTIL_TIMER_Create+0x5e>
 8019bba:	683b      	ldr	r3, [r7, #0]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d020      	beq.n	8019c02 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019bc6:	4b11      	ldr	r3, [pc, #68]	; (8019c0c <UTIL_TIMER_Create+0x68>)
 8019bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bca:	68b8      	ldr	r0, [r7, #8]
 8019bcc:	4798      	blx	r3
 8019bce:	4602      	mov	r2, r0
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2200      	movs	r2, #0
 8019bde:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	2200      	movs	r2, #0
 8019be4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019be6:	68fb      	ldr	r3, [r7, #12]
 8019be8:	683a      	ldr	r2, [r7, #0]
 8019bea:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	69ba      	ldr	r2, [r7, #24]
 8019bf0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	79fa      	ldrb	r2, [r7, #7]
 8019bf6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	e000      	b.n	8019c04 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8019c02:	2301      	movs	r3, #1
  }
}
 8019c04:	4618      	mov	r0, r3
 8019c06:	3710      	adds	r7, #16
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	080203dc 	.word	0x080203dc

08019c10 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b08a      	sub	sp, #40	; 0x28
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d056      	beq.n	8019cd2 <UTIL_TIMER_Start+0xc2>
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f000 f929 	bl	8019e7c <TimerExists>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	f083 0301 	eor.w	r3, r3, #1
 8019c30:	b2db      	uxtb	r3, r3
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d04d      	beq.n	8019cd2 <UTIL_TIMER_Start+0xc2>
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	7a5b      	ldrb	r3, [r3, #9]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d149      	bne.n	8019cd2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8019c42:	613b      	str	r3, [r7, #16]
  return(result);
 8019c44:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019c46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c48:	b672      	cpsid	i
}
 8019c4a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8019c52:	4b24      	ldr	r3, [pc, #144]	; (8019ce4 <UTIL_TIMER_Start+0xd4>)
 8019c54:	6a1b      	ldr	r3, [r3, #32]
 8019c56:	4798      	blx	r3
 8019c58:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019c5a:	6a3a      	ldr	r2, [r7, #32]
 8019c5c:	69bb      	ldr	r3, [r7, #24]
 8019c5e:	429a      	cmp	r2, r3
 8019c60:	d201      	bcs.n	8019c66 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	6a3a      	ldr	r2, [r7, #32]
 8019c6a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	2200      	movs	r2, #0
 8019c70:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	2201      	movs	r2, #1
 8019c76:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8019c7e:	4b1a      	ldr	r3, [pc, #104]	; (8019ce8 <UTIL_TIMER_Start+0xd8>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d106      	bne.n	8019c94 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8019c86:	4b17      	ldr	r3, [pc, #92]	; (8019ce4 <UTIL_TIMER_Start+0xd4>)
 8019c88:	691b      	ldr	r3, [r3, #16]
 8019c8a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8019c8c:	6878      	ldr	r0, [r7, #4]
 8019c8e:	f000 f96b 	bl	8019f68 <TimerInsertNewHeadTimer>
 8019c92:	e017      	b.n	8019cc4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8019c94:	4b13      	ldr	r3, [pc, #76]	; (8019ce4 <UTIL_TIMER_Start+0xd4>)
 8019c96:	699b      	ldr	r3, [r3, #24]
 8019c98:	4798      	blx	r3
 8019c9a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	441a      	add	r2, r3
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	681a      	ldr	r2, [r3, #0]
 8019cac:	4b0e      	ldr	r3, [pc, #56]	; (8019ce8 <UTIL_TIMER_Start+0xd8>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	429a      	cmp	r2, r3
 8019cb4:	d203      	bcs.n	8019cbe <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8019cb6:	6878      	ldr	r0, [r7, #4]
 8019cb8:	f000 f956 	bl	8019f68 <TimerInsertNewHeadTimer>
 8019cbc:	e002      	b.n	8019cc4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8019cbe:	6878      	ldr	r0, [r7, #4]
 8019cc0:	f000 f922 	bl	8019f08 <TimerInsertTimer>
 8019cc4:	69fb      	ldr	r3, [r7, #28]
 8019cc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	f383 8810 	msr	PRIMASK, r3
}
 8019cce:	bf00      	nop
  {
 8019cd0:	e002      	b.n	8019cd8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8019cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3728      	adds	r7, #40	; 0x28
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	080203dc 	.word	0x080203dc
 8019ce8:	20001da0 	.word	0x20001da0

08019cec <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019cec:	b580      	push	{r7, lr}
 8019cee:	b088      	sub	sp, #32
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d05b      	beq.n	8019db6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8019d02:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d04:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d08:	b672      	cpsid	i
}
 8019d0a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019d0c:	4b2d      	ldr	r3, [pc, #180]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8019d12:	4b2c      	ldr	r3, [pc, #176]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	2201      	movs	r2, #1
 8019d1c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8019d1e:	4b29      	ldr	r3, [pc, #164]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d041      	beq.n	8019daa <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	2200      	movs	r2, #0
 8019d2a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019d2c:	4b25      	ldr	r3, [pc, #148]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	429a      	cmp	r2, r3
 8019d34:	d134      	bne.n	8019da0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019d36:	4b23      	ldr	r3, [pc, #140]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8019d3e:	4b21      	ldr	r3, [pc, #132]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	695b      	ldr	r3, [r3, #20]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d00a      	beq.n	8019d5e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019d48:	4b1e      	ldr	r3, [pc, #120]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	695b      	ldr	r3, [r3, #20]
 8019d4e:	4a1d      	ldr	r2, [pc, #116]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d50:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8019d52:	4b1c      	ldr	r3, [pc, #112]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	4618      	mov	r0, r3
 8019d58:	f000 f8ac 	bl	8019eb4 <TimerSetTimeout>
 8019d5c:	e023      	b.n	8019da6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8019d5e:	4b1a      	ldr	r3, [pc, #104]	; (8019dc8 <UTIL_TIMER_Stop+0xdc>)
 8019d60:	68db      	ldr	r3, [r3, #12]
 8019d62:	4798      	blx	r3
            TimerListHead = NULL;
 8019d64:	4b17      	ldr	r3, [pc, #92]	; (8019dc4 <UTIL_TIMER_Stop+0xd8>)
 8019d66:	2200      	movs	r2, #0
 8019d68:	601a      	str	r2, [r3, #0]
 8019d6a:	e01c      	b.n	8019da6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019d6c:	697a      	ldr	r2, [r7, #20]
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	429a      	cmp	r2, r3
 8019d72:	d110      	bne.n	8019d96 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	695b      	ldr	r3, [r3, #20]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d006      	beq.n	8019d8a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	695b      	ldr	r3, [r3, #20]
 8019d80:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019d82:	69bb      	ldr	r3, [r7, #24]
 8019d84:	697a      	ldr	r2, [r7, #20]
 8019d86:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8019d88:	e00d      	b.n	8019da6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019d8e:	69bb      	ldr	r3, [r7, #24]
 8019d90:	697a      	ldr	r2, [r7, #20]
 8019d92:	615a      	str	r2, [r3, #20]
            break;
 8019d94:	e007      	b.n	8019da6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8019d96:	697b      	ldr	r3, [r7, #20]
 8019d98:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8019d9a:	697b      	ldr	r3, [r7, #20]
 8019d9c:	695b      	ldr	r3, [r3, #20]
 8019d9e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8019da0:	697b      	ldr	r3, [r7, #20]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d1e2      	bne.n	8019d6c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8019da6:	2300      	movs	r3, #0
 8019da8:	77fb      	strb	r3, [r7, #31]
 8019daa:	693b      	ldr	r3, [r7, #16]
 8019dac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019dae:	68bb      	ldr	r3, [r7, #8]
 8019db0:	f383 8810 	msr	PRIMASK, r3
}
 8019db4:	e001      	b.n	8019dba <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8019db6:	2301      	movs	r3, #1
 8019db8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8019dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3720      	adds	r7, #32
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}
 8019dc4:	20001da0 	.word	0x20001da0
 8019dc8:	080203dc 	.word	0x080203dc

08019dcc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b084      	sub	sp, #16
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
 8019dd4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d102      	bne.n	8019de6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8019de0:	2301      	movs	r3, #1
 8019de2:	73fb      	strb	r3, [r7, #15]
 8019de4:	e014      	b.n	8019e10 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019de6:	4b0d      	ldr	r3, [pc, #52]	; (8019e1c <UTIL_TIMER_SetPeriod+0x50>)
 8019de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dea:	6838      	ldr	r0, [r7, #0]
 8019dec:	4798      	blx	r3
 8019dee:	4602      	mov	r2, r0
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019df4:	6878      	ldr	r0, [r7, #4]
 8019df6:	f000 f841 	bl	8019e7c <TimerExists>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d007      	beq.n	8019e10 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8019e00:	6878      	ldr	r0, [r7, #4]
 8019e02:	f7ff ff73 	bl	8019cec <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019e06:	6878      	ldr	r0, [r7, #4]
 8019e08:	f7ff ff02 	bl	8019c10 <UTIL_TIMER_Start>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8019e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	3710      	adds	r7, #16
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	080203dc 	.word	0x080203dc

08019e20 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019e26:	4b06      	ldr	r3, [pc, #24]	; (8019e40 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019e28:	69db      	ldr	r3, [r3, #28]
 8019e2a:	4798      	blx	r3
 8019e2c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8019e2e:	4b04      	ldr	r3, [pc, #16]	; (8019e40 <UTIL_TIMER_GetCurrentTime+0x20>)
 8019e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	4798      	blx	r3
 8019e36:	4603      	mov	r3, r0
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	3708      	adds	r7, #8
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd80      	pop	{r7, pc}
 8019e40:	080203dc 	.word	0x080203dc

08019e44 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	b084      	sub	sp, #16
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8019e4c:	4b0a      	ldr	r3, [pc, #40]	; (8019e78 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019e4e:	69db      	ldr	r3, [r3, #28]
 8019e50:	4798      	blx	r3
 8019e52:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8019e54:	4b08      	ldr	r3, [pc, #32]	; (8019e78 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	4798      	blx	r3
 8019e5c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8019e5e:	4b06      	ldr	r3, [pc, #24]	; (8019e78 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e62:	68f9      	ldr	r1, [r7, #12]
 8019e64:	68ba      	ldr	r2, [r7, #8]
 8019e66:	1a8a      	subs	r2, r1, r2
 8019e68:	4610      	mov	r0, r2
 8019e6a:	4798      	blx	r3
 8019e6c:	4603      	mov	r3, r0
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3710      	adds	r7, #16
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	080203dc 	.word	0x080203dc

08019e7c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8019e7c:	b480      	push	{r7}
 8019e7e:	b085      	sub	sp, #20
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019e84:	4b0a      	ldr	r3, [pc, #40]	; (8019eb0 <TimerExists+0x34>)
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8019e8a:	e008      	b.n	8019e9e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8019e8c:	68fa      	ldr	r2, [r7, #12]
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	429a      	cmp	r2, r3
 8019e92:	d101      	bne.n	8019e98 <TimerExists+0x1c>
    {
      return true;
 8019e94:	2301      	movs	r3, #1
 8019e96:	e006      	b.n	8019ea6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	695b      	ldr	r3, [r3, #20]
 8019e9c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d1f3      	bne.n	8019e8c <TimerExists+0x10>
  }
  return false;
 8019ea4:	2300      	movs	r3, #0
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3714      	adds	r7, #20
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bc80      	pop	{r7}
 8019eae:	4770      	bx	lr
 8019eb0:	20001da0 	.word	0x20001da0

08019eb4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8019eb4:	b590      	push	{r4, r7, lr}
 8019eb6:	b085      	sub	sp, #20
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8019ebc:	4b11      	ldr	r3, [pc, #68]	; (8019f04 <TimerSetTimeout+0x50>)
 8019ebe:	6a1b      	ldr	r3, [r3, #32]
 8019ec0:	4798      	blx	r3
 8019ec2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	681c      	ldr	r4, [r3, #0]
 8019ece:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <TimerSetTimeout+0x50>)
 8019ed0:	699b      	ldr	r3, [r3, #24]
 8019ed2:	4798      	blx	r3
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	4413      	add	r3, r2
 8019eda:	429c      	cmp	r4, r3
 8019edc:	d207      	bcs.n	8019eee <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8019ede:	4b09      	ldr	r3, [pc, #36]	; (8019f04 <TimerSetTimeout+0x50>)
 8019ee0:	699b      	ldr	r3, [r3, #24]
 8019ee2:	4798      	blx	r3
 8019ee4:	4602      	mov	r2, r0
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	441a      	add	r2, r3
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8019eee:	4b05      	ldr	r3, [pc, #20]	; (8019f04 <TimerSetTimeout+0x50>)
 8019ef0:	689b      	ldr	r3, [r3, #8]
 8019ef2:	687a      	ldr	r2, [r7, #4]
 8019ef4:	6812      	ldr	r2, [r2, #0]
 8019ef6:	4610      	mov	r0, r2
 8019ef8:	4798      	blx	r3
}
 8019efa:	bf00      	nop
 8019efc:	3714      	adds	r7, #20
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd90      	pop	{r4, r7, pc}
 8019f02:	bf00      	nop
 8019f04:	080203dc 	.word	0x080203dc

08019f08 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8019f08:	b480      	push	{r7}
 8019f0a:	b085      	sub	sp, #20
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019f10:	4b14      	ldr	r3, [pc, #80]	; (8019f64 <TimerInsertTimer+0x5c>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8019f16:	4b13      	ldr	r3, [pc, #76]	; (8019f64 <TimerInsertTimer+0x5c>)
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	695b      	ldr	r3, [r3, #20]
 8019f1c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8019f1e:	e012      	b.n	8019f46 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d905      	bls.n	8019f38 <TimerInsertTimer+0x30>
    {
        cur = next;
 8019f2c:	68bb      	ldr	r3, [r7, #8]
 8019f2e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	695b      	ldr	r3, [r3, #20]
 8019f34:	60bb      	str	r3, [r7, #8]
 8019f36:	e006      	b.n	8019f46 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	687a      	ldr	r2, [r7, #4]
 8019f3c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	68ba      	ldr	r2, [r7, #8]
 8019f42:	615a      	str	r2, [r3, #20]
        return;
 8019f44:	e009      	b.n	8019f5a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	695b      	ldr	r3, [r3, #20]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d1e8      	bne.n	8019f20 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	687a      	ldr	r2, [r7, #4]
 8019f52:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2200      	movs	r2, #0
 8019f58:	615a      	str	r2, [r3, #20]
}
 8019f5a:	3714      	adds	r7, #20
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	bc80      	pop	{r7}
 8019f60:	4770      	bx	lr
 8019f62:	bf00      	nop
 8019f64:	20001da0 	.word	0x20001da0

08019f68 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b084      	sub	sp, #16
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8019f70:	4b0b      	ldr	r3, [pc, #44]	; (8019fa0 <TimerInsertNewHeadTimer+0x38>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d002      	beq.n	8019f82 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	68fa      	ldr	r2, [r7, #12]
 8019f86:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8019f88:	4a05      	ldr	r2, [pc, #20]	; (8019fa0 <TimerInsertNewHeadTimer+0x38>)
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8019f8e:	4b04      	ldr	r3, [pc, #16]	; (8019fa0 <TimerInsertNewHeadTimer+0x38>)
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7ff ff8e 	bl	8019eb4 <TimerSetTimeout>
}
 8019f98:	bf00      	nop
 8019f9a:	3710      	adds	r7, #16
 8019f9c:	46bd      	mov	sp, r7
 8019f9e:	bd80      	pop	{r7, pc}
 8019fa0:	20001da0 	.word	0x20001da0

08019fa4 <__errno>:
 8019fa4:	4b01      	ldr	r3, [pc, #4]	; (8019fac <__errno+0x8>)
 8019fa6:	6818      	ldr	r0, [r3, #0]
 8019fa8:	4770      	bx	lr
 8019faa:	bf00      	nop
 8019fac:	200000e8 	.word	0x200000e8

08019fb0 <__libc_init_array>:
 8019fb0:	b570      	push	{r4, r5, r6, lr}
 8019fb2:	4d0d      	ldr	r5, [pc, #52]	; (8019fe8 <__libc_init_array+0x38>)
 8019fb4:	4c0d      	ldr	r4, [pc, #52]	; (8019fec <__libc_init_array+0x3c>)
 8019fb6:	1b64      	subs	r4, r4, r5
 8019fb8:	10a4      	asrs	r4, r4, #2
 8019fba:	2600      	movs	r6, #0
 8019fbc:	42a6      	cmp	r6, r4
 8019fbe:	d109      	bne.n	8019fd4 <__libc_init_array+0x24>
 8019fc0:	4d0b      	ldr	r5, [pc, #44]	; (8019ff0 <__libc_init_array+0x40>)
 8019fc2:	4c0c      	ldr	r4, [pc, #48]	; (8019ff4 <__libc_init_array+0x44>)
 8019fc4:	f006 f828 	bl	8020018 <_init>
 8019fc8:	1b64      	subs	r4, r4, r5
 8019fca:	10a4      	asrs	r4, r4, #2
 8019fcc:	2600      	movs	r6, #0
 8019fce:	42a6      	cmp	r6, r4
 8019fd0:	d105      	bne.n	8019fde <__libc_init_array+0x2e>
 8019fd2:	bd70      	pop	{r4, r5, r6, pc}
 8019fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fd8:	4798      	blx	r3
 8019fda:	3601      	adds	r6, #1
 8019fdc:	e7ee      	b.n	8019fbc <__libc_init_array+0xc>
 8019fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8019fe2:	4798      	blx	r3
 8019fe4:	3601      	adds	r6, #1
 8019fe6:	e7f2      	b.n	8019fce <__libc_init_array+0x1e>
 8019fe8:	08020c94 	.word	0x08020c94
 8019fec:	08020c94 	.word	0x08020c94
 8019ff0:	08020c94 	.word	0x08020c94
 8019ff4:	08020c9c 	.word	0x08020c9c

08019ff8 <memset>:
 8019ff8:	4402      	add	r2, r0
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	4293      	cmp	r3, r2
 8019ffe:	d100      	bne.n	801a002 <memset+0xa>
 801a000:	4770      	bx	lr
 801a002:	f803 1b01 	strb.w	r1, [r3], #1
 801a006:	e7f9      	b.n	8019ffc <memset+0x4>

0801a008 <printf>:
 801a008:	b40f      	push	{r0, r1, r2, r3}
 801a00a:	b507      	push	{r0, r1, r2, lr}
 801a00c:	4906      	ldr	r1, [pc, #24]	; (801a028 <printf+0x20>)
 801a00e:	ab04      	add	r3, sp, #16
 801a010:	6808      	ldr	r0, [r1, #0]
 801a012:	f853 2b04 	ldr.w	r2, [r3], #4
 801a016:	6881      	ldr	r1, [r0, #8]
 801a018:	9301      	str	r3, [sp, #4]
 801a01a:	f001 fa4b 	bl	801b4b4 <_vfprintf_r>
 801a01e:	b003      	add	sp, #12
 801a020:	f85d eb04 	ldr.w	lr, [sp], #4
 801a024:	b004      	add	sp, #16
 801a026:	4770      	bx	lr
 801a028:	200000e8 	.word	0x200000e8

0801a02c <_puts_r>:
 801a02c:	b530      	push	{r4, r5, lr}
 801a02e:	4605      	mov	r5, r0
 801a030:	b089      	sub	sp, #36	; 0x24
 801a032:	4608      	mov	r0, r1
 801a034:	460c      	mov	r4, r1
 801a036:	f7e6 f8a3 	bl	8000180 <strlen>
 801a03a:	4b1e      	ldr	r3, [pc, #120]	; (801a0b4 <_puts_r+0x88>)
 801a03c:	9306      	str	r3, [sp, #24]
 801a03e:	2301      	movs	r3, #1
 801a040:	e9cd 4004 	strd	r4, r0, [sp, #16]
 801a044:	9307      	str	r3, [sp, #28]
 801a046:	4418      	add	r0, r3
 801a048:	ab04      	add	r3, sp, #16
 801a04a:	9301      	str	r3, [sp, #4]
 801a04c:	2302      	movs	r3, #2
 801a04e:	9302      	str	r3, [sp, #8]
 801a050:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a052:	68ac      	ldr	r4, [r5, #8]
 801a054:	9003      	str	r0, [sp, #12]
 801a056:	b913      	cbnz	r3, 801a05e <_puts_r+0x32>
 801a058:	4628      	mov	r0, r5
 801a05a:	f003 fc25 	bl	801d8a8 <__sinit>
 801a05e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a060:	07db      	lsls	r3, r3, #31
 801a062:	d405      	bmi.n	801a070 <_puts_r+0x44>
 801a064:	89a3      	ldrh	r3, [r4, #12]
 801a066:	0598      	lsls	r0, r3, #22
 801a068:	d402      	bmi.n	801a070 <_puts_r+0x44>
 801a06a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a06c:	f003 feda 	bl	801de24 <__retarget_lock_acquire_recursive>
 801a070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a074:	0499      	lsls	r1, r3, #18
 801a076:	d406      	bmi.n	801a086 <_puts_r+0x5a>
 801a078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a07c:	81a3      	strh	r3, [r4, #12]
 801a07e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a084:	6663      	str	r3, [r4, #100]	; 0x64
 801a086:	4628      	mov	r0, r5
 801a088:	aa01      	add	r2, sp, #4
 801a08a:	4621      	mov	r1, r4
 801a08c:	f003 fd5c 	bl	801db48 <__sfvwrite_r>
 801a090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a092:	2800      	cmp	r0, #0
 801a094:	bf14      	ite	ne
 801a096:	f04f 35ff 	movne.w	r5, #4294967295
 801a09a:	250a      	moveq	r5, #10
 801a09c:	07da      	lsls	r2, r3, #31
 801a09e:	d405      	bmi.n	801a0ac <_puts_r+0x80>
 801a0a0:	89a3      	ldrh	r3, [r4, #12]
 801a0a2:	059b      	lsls	r3, r3, #22
 801a0a4:	d402      	bmi.n	801a0ac <_puts_r+0x80>
 801a0a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0a8:	f003 febd 	bl	801de26 <__retarget_lock_release_recursive>
 801a0ac:	4628      	mov	r0, r5
 801a0ae:	b009      	add	sp, #36	; 0x24
 801a0b0:	bd30      	pop	{r4, r5, pc}
 801a0b2:	bf00      	nop
 801a0b4:	08020b7e 	.word	0x08020b7e

0801a0b8 <puts>:
 801a0b8:	4b02      	ldr	r3, [pc, #8]	; (801a0c4 <puts+0xc>)
 801a0ba:	4601      	mov	r1, r0
 801a0bc:	6818      	ldr	r0, [r3, #0]
 801a0be:	f7ff bfb5 	b.w	801a02c <_puts_r>
 801a0c2:	bf00      	nop
 801a0c4:	200000e8 	.word	0x200000e8

0801a0c8 <sprintf>:
 801a0c8:	b40e      	push	{r1, r2, r3}
 801a0ca:	b500      	push	{lr}
 801a0cc:	b09c      	sub	sp, #112	; 0x70
 801a0ce:	ab1d      	add	r3, sp, #116	; 0x74
 801a0d0:	9002      	str	r0, [sp, #8]
 801a0d2:	9006      	str	r0, [sp, #24]
 801a0d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a0d8:	4809      	ldr	r0, [pc, #36]	; (801a100 <sprintf+0x38>)
 801a0da:	9107      	str	r1, [sp, #28]
 801a0dc:	9104      	str	r1, [sp, #16]
 801a0de:	4909      	ldr	r1, [pc, #36]	; (801a104 <sprintf+0x3c>)
 801a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0e4:	9105      	str	r1, [sp, #20]
 801a0e6:	6800      	ldr	r0, [r0, #0]
 801a0e8:	9301      	str	r3, [sp, #4]
 801a0ea:	a902      	add	r1, sp, #8
 801a0ec:	f000 f80c 	bl	801a108 <_svfprintf_r>
 801a0f0:	9b02      	ldr	r3, [sp, #8]
 801a0f2:	2200      	movs	r2, #0
 801a0f4:	701a      	strb	r2, [r3, #0]
 801a0f6:	b01c      	add	sp, #112	; 0x70
 801a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0fc:	b003      	add	sp, #12
 801a0fe:	4770      	bx	lr
 801a100:	200000e8 	.word	0x200000e8
 801a104:	ffff0208 	.word	0xffff0208

0801a108 <_svfprintf_r>:
 801a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a10c:	b0d3      	sub	sp, #332	; 0x14c
 801a10e:	468b      	mov	fp, r1
 801a110:	4692      	mov	sl, r2
 801a112:	461e      	mov	r6, r3
 801a114:	4681      	mov	r9, r0
 801a116:	f003 fe7f 	bl	801de18 <_localeconv_r>
 801a11a:	6803      	ldr	r3, [r0, #0]
 801a11c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a11e:	4618      	mov	r0, r3
 801a120:	f7e6 f82e 	bl	8000180 <strlen>
 801a124:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a128:	9012      	str	r0, [sp, #72]	; 0x48
 801a12a:	0618      	lsls	r0, r3, #24
 801a12c:	d518      	bpl.n	801a160 <_svfprintf_r+0x58>
 801a12e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a132:	b9ab      	cbnz	r3, 801a160 <_svfprintf_r+0x58>
 801a134:	2140      	movs	r1, #64	; 0x40
 801a136:	4648      	mov	r0, r9
 801a138:	f003 fee2 	bl	801df00 <_malloc_r>
 801a13c:	f8cb 0000 	str.w	r0, [fp]
 801a140:	f8cb 0010 	str.w	r0, [fp, #16]
 801a144:	b948      	cbnz	r0, 801a15a <_svfprintf_r+0x52>
 801a146:	230c      	movs	r3, #12
 801a148:	f8c9 3000 	str.w	r3, [r9]
 801a14c:	f04f 33ff 	mov.w	r3, #4294967295
 801a150:	930f      	str	r3, [sp, #60]	; 0x3c
 801a152:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a154:	b053      	add	sp, #332	; 0x14c
 801a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a15a:	2340      	movs	r3, #64	; 0x40
 801a15c:	f8cb 3014 	str.w	r3, [fp, #20]
 801a160:	2500      	movs	r5, #0
 801a162:	2200      	movs	r2, #0
 801a164:	2300      	movs	r3, #0
 801a166:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 801a16a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a16e:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 801a172:	ac29      	add	r4, sp, #164	; 0xa4
 801a174:	9426      	str	r4, [sp, #152]	; 0x98
 801a176:	9509      	str	r5, [sp, #36]	; 0x24
 801a178:	950d      	str	r5, [sp, #52]	; 0x34
 801a17a:	9515      	str	r5, [sp, #84]	; 0x54
 801a17c:	9518      	str	r5, [sp, #96]	; 0x60
 801a17e:	950f      	str	r5, [sp, #60]	; 0x3c
 801a180:	4653      	mov	r3, sl
 801a182:	461d      	mov	r5, r3
 801a184:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a188:	b10a      	cbz	r2, 801a18e <_svfprintf_r+0x86>
 801a18a:	2a25      	cmp	r2, #37	; 0x25
 801a18c:	d1f9      	bne.n	801a182 <_svfprintf_r+0x7a>
 801a18e:	ebb5 070a 	subs.w	r7, r5, sl
 801a192:	d00d      	beq.n	801a1b0 <_svfprintf_r+0xa8>
 801a194:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a196:	443b      	add	r3, r7
 801a198:	9328      	str	r3, [sp, #160]	; 0xa0
 801a19a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a19c:	3301      	adds	r3, #1
 801a19e:	2b07      	cmp	r3, #7
 801a1a0:	e9c4 a700 	strd	sl, r7, [r4]
 801a1a4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a1a6:	dc79      	bgt.n	801a29c <_svfprintf_r+0x194>
 801a1a8:	3408      	adds	r4, #8
 801a1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1ac:	443b      	add	r3, r7
 801a1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1b0:	782b      	ldrb	r3, [r5, #0]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	f001 813c 	beq.w	801b430 <_svfprintf_r+0x1328>
 801a1b8:	2300      	movs	r3, #0
 801a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 801a1be:	9207      	str	r2, [sp, #28]
 801a1c0:	3501      	adds	r5, #1
 801a1c2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a1c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801a1c8:	4698      	mov	r8, r3
 801a1ca:	270a      	movs	r7, #10
 801a1cc:	222b      	movs	r2, #43	; 0x2b
 801a1ce:	462b      	mov	r3, r5
 801a1d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a1d4:	910a      	str	r1, [sp, #40]	; 0x28
 801a1d6:	930e      	str	r3, [sp, #56]	; 0x38
 801a1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1da:	3b20      	subs	r3, #32
 801a1dc:	2b5a      	cmp	r3, #90	; 0x5a
 801a1de:	f200 85ae 	bhi.w	801ad3e <_svfprintf_r+0xc36>
 801a1e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a1e6:	007e      	.short	0x007e
 801a1e8:	05ac05ac 	.word	0x05ac05ac
 801a1ec:	05ac0086 	.word	0x05ac0086
 801a1f0:	05ac05ac 	.word	0x05ac05ac
 801a1f4:	05ac0065 	.word	0x05ac0065
 801a1f8:	008905ac 	.word	0x008905ac
 801a1fc:	05ac0093 	.word	0x05ac0093
 801a200:	00960090 	.word	0x00960090
 801a204:	00b305ac 	.word	0x00b305ac
 801a208:	00b600b6 	.word	0x00b600b6
 801a20c:	00b600b6 	.word	0x00b600b6
 801a210:	00b600b6 	.word	0x00b600b6
 801a214:	00b600b6 	.word	0x00b600b6
 801a218:	05ac00b6 	.word	0x05ac00b6
 801a21c:	05ac05ac 	.word	0x05ac05ac
 801a220:	05ac05ac 	.word	0x05ac05ac
 801a224:	05ac05ac 	.word	0x05ac05ac
 801a228:	05ac0126 	.word	0x05ac0126
 801a22c:	00f600e3 	.word	0x00f600e3
 801a230:	01260126 	.word	0x01260126
 801a234:	05ac0126 	.word	0x05ac0126
 801a238:	05ac05ac 	.word	0x05ac05ac
 801a23c:	00c605ac 	.word	0x00c605ac
 801a240:	05ac05ac 	.word	0x05ac05ac
 801a244:	05ac0484 	.word	0x05ac0484
 801a248:	05ac05ac 	.word	0x05ac05ac
 801a24c:	05ac04cf 	.word	0x05ac04cf
 801a250:	05ac04f0 	.word	0x05ac04f0
 801a254:	051205ac 	.word	0x051205ac
 801a258:	05ac05ac 	.word	0x05ac05ac
 801a25c:	05ac05ac 	.word	0x05ac05ac
 801a260:	05ac05ac 	.word	0x05ac05ac
 801a264:	05ac05ac 	.word	0x05ac05ac
 801a268:	05ac0126 	.word	0x05ac0126
 801a26c:	00f800e3 	.word	0x00f800e3
 801a270:	01260126 	.word	0x01260126
 801a274:	00c90126 	.word	0x00c90126
 801a278:	00dd00f8 	.word	0x00dd00f8
 801a27c:	00d605ac 	.word	0x00d605ac
 801a280:	045f05ac 	.word	0x045f05ac
 801a284:	04bd0486 	.word	0x04bd0486
 801a288:	05ac00dd 	.word	0x05ac00dd
 801a28c:	007c04cf 	.word	0x007c04cf
 801a290:	05ac04f2 	.word	0x05ac04f2
 801a294:	053105ac 	.word	0x053105ac
 801a298:	007c05ac 	.word	0x007c05ac
 801a29c:	aa26      	add	r2, sp, #152	; 0x98
 801a29e:	4659      	mov	r1, fp
 801a2a0:	4648      	mov	r0, r9
 801a2a2:	f004 fe0b 	bl	801eebc <__ssprint_r>
 801a2a6:	2800      	cmp	r0, #0
 801a2a8:	f040 812f 	bne.w	801a50a <_svfprintf_r+0x402>
 801a2ac:	ac29      	add	r4, sp, #164	; 0xa4
 801a2ae:	e77c      	b.n	801a1aa <_svfprintf_r+0xa2>
 801a2b0:	4648      	mov	r0, r9
 801a2b2:	f003 fdb1 	bl	801de18 <_localeconv_r>
 801a2b6:	6843      	ldr	r3, [r0, #4]
 801a2b8:	9318      	str	r3, [sp, #96]	; 0x60
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f7e5 ff60 	bl	8000180 <strlen>
 801a2c0:	9015      	str	r0, [sp, #84]	; 0x54
 801a2c2:	4648      	mov	r0, r9
 801a2c4:	f003 fda8 	bl	801de18 <_localeconv_r>
 801a2c8:	6883      	ldr	r3, [r0, #8]
 801a2ca:	930d      	str	r3, [sp, #52]	; 0x34
 801a2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a2ce:	222b      	movs	r2, #43	; 0x2b
 801a2d0:	b12b      	cbz	r3, 801a2de <_svfprintf_r+0x1d6>
 801a2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2d4:	b11b      	cbz	r3, 801a2de <_svfprintf_r+0x1d6>
 801a2d6:	781b      	ldrb	r3, [r3, #0]
 801a2d8:	b10b      	cbz	r3, 801a2de <_svfprintf_r+0x1d6>
 801a2da:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801a2de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a2e0:	e775      	b.n	801a1ce <_svfprintf_r+0xc6>
 801a2e2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d1f9      	bne.n	801a2de <_svfprintf_r+0x1d6>
 801a2ea:	2320      	movs	r3, #32
 801a2ec:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a2f0:	e7f5      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a2f2:	f048 0801 	orr.w	r8, r8, #1
 801a2f6:	e7f2      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a2f8:	f856 3b04 	ldr.w	r3, [r6], #4
 801a2fc:	9313      	str	r3, [sp, #76]	; 0x4c
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	daed      	bge.n	801a2de <_svfprintf_r+0x1d6>
 801a302:	425b      	negs	r3, r3
 801a304:	9313      	str	r3, [sp, #76]	; 0x4c
 801a306:	f048 0804 	orr.w	r8, r8, #4
 801a30a:	e7e8      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a30c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801a310:	e7e5      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a312:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a314:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a318:	930a      	str	r3, [sp, #40]	; 0x28
 801a31a:	2b2a      	cmp	r3, #42	; 0x2a
 801a31c:	d113      	bne.n	801a346 <_svfprintf_r+0x23e>
 801a31e:	f856 0b04 	ldr.w	r0, [r6], #4
 801a322:	950e      	str	r5, [sp, #56]	; 0x38
 801a324:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801a328:	9307      	str	r3, [sp, #28]
 801a32a:	e7d8      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a32c:	9907      	ldr	r1, [sp, #28]
 801a32e:	fb07 3301 	mla	r3, r7, r1, r3
 801a332:	9307      	str	r3, [sp, #28]
 801a334:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a338:	930a      	str	r3, [sp, #40]	; 0x28
 801a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a33c:	3b30      	subs	r3, #48	; 0x30
 801a33e:	2b09      	cmp	r3, #9
 801a340:	d9f4      	bls.n	801a32c <_svfprintf_r+0x224>
 801a342:	950e      	str	r5, [sp, #56]	; 0x38
 801a344:	e748      	b.n	801a1d8 <_svfprintf_r+0xd0>
 801a346:	2300      	movs	r3, #0
 801a348:	9307      	str	r3, [sp, #28]
 801a34a:	e7f6      	b.n	801a33a <_svfprintf_r+0x232>
 801a34c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801a350:	e7c5      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a352:	2300      	movs	r3, #0
 801a354:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a356:	9313      	str	r3, [sp, #76]	; 0x4c
 801a358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a35a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a35c:	3b30      	subs	r3, #48	; 0x30
 801a35e:	fb07 3301 	mla	r3, r7, r1, r3
 801a362:	9313      	str	r3, [sp, #76]	; 0x4c
 801a364:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a368:	930a      	str	r3, [sp, #40]	; 0x28
 801a36a:	3b30      	subs	r3, #48	; 0x30
 801a36c:	2b09      	cmp	r3, #9
 801a36e:	d9f3      	bls.n	801a358 <_svfprintf_r+0x250>
 801a370:	e7e7      	b.n	801a342 <_svfprintf_r+0x23a>
 801a372:	f048 0808 	orr.w	r8, r8, #8
 801a376:	e7b2      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a37a:	781b      	ldrb	r3, [r3, #0]
 801a37c:	2b68      	cmp	r3, #104	; 0x68
 801a37e:	bf01      	itttt	eq
 801a380:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801a382:	3301      	addeq	r3, #1
 801a384:	930e      	streq	r3, [sp, #56]	; 0x38
 801a386:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801a38a:	bf18      	it	ne
 801a38c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801a390:	e7a5      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a394:	781b      	ldrb	r3, [r3, #0]
 801a396:	2b6c      	cmp	r3, #108	; 0x6c
 801a398:	d105      	bne.n	801a3a6 <_svfprintf_r+0x29e>
 801a39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a39c:	3301      	adds	r3, #1
 801a39e:	930e      	str	r3, [sp, #56]	; 0x38
 801a3a0:	f048 0820 	orr.w	r8, r8, #32
 801a3a4:	e79b      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a3a6:	f048 0810 	orr.w	r8, r8, #16
 801a3aa:	e798      	b.n	801a2de <_svfprintf_r+0x1d6>
 801a3ac:	4632      	mov	r2, r6
 801a3ae:	2000      	movs	r0, #0
 801a3b0:	f852 3b04 	ldr.w	r3, [r2], #4
 801a3b4:	920b      	str	r2, [sp, #44]	; 0x2c
 801a3b6:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801a3ba:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801a3be:	2301      	movs	r3, #1
 801a3c0:	9008      	str	r0, [sp, #32]
 801a3c2:	9307      	str	r3, [sp, #28]
 801a3c4:	4607      	mov	r7, r0
 801a3c6:	4606      	mov	r6, r0
 801a3c8:	900c      	str	r0, [sp, #48]	; 0x30
 801a3ca:	4605      	mov	r5, r0
 801a3cc:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801a3d0:	e1b0      	b.n	801a734 <_svfprintf_r+0x62c>
 801a3d2:	f048 0810 	orr.w	r8, r8, #16
 801a3d6:	f018 0f20 	tst.w	r8, #32
 801a3da:	d012      	beq.n	801a402 <_svfprintf_r+0x2fa>
 801a3dc:	1df3      	adds	r3, r6, #7
 801a3de:	f023 0307 	bic.w	r3, r3, #7
 801a3e2:	461a      	mov	r2, r3
 801a3e4:	685f      	ldr	r7, [r3, #4]
 801a3e6:	f852 6b08 	ldr.w	r6, [r2], #8
 801a3ea:	920b      	str	r2, [sp, #44]	; 0x2c
 801a3ec:	2f00      	cmp	r7, #0
 801a3ee:	da06      	bge.n	801a3fe <_svfprintf_r+0x2f6>
 801a3f0:	4276      	negs	r6, r6
 801a3f2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801a3f6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801a3fa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a3fe:	2301      	movs	r3, #1
 801a400:	e388      	b.n	801ab14 <_svfprintf_r+0xa0c>
 801a402:	4633      	mov	r3, r6
 801a404:	f018 0f10 	tst.w	r8, #16
 801a408:	f853 7b04 	ldr.w	r7, [r3], #4
 801a40c:	930b      	str	r3, [sp, #44]	; 0x2c
 801a40e:	d002      	beq.n	801a416 <_svfprintf_r+0x30e>
 801a410:	463e      	mov	r6, r7
 801a412:	17ff      	asrs	r7, r7, #31
 801a414:	e7ea      	b.n	801a3ec <_svfprintf_r+0x2e4>
 801a416:	f018 0f40 	tst.w	r8, #64	; 0x40
 801a41a:	d003      	beq.n	801a424 <_svfprintf_r+0x31c>
 801a41c:	b23e      	sxth	r6, r7
 801a41e:	f347 37c0 	sbfx	r7, r7, #15, #1
 801a422:	e7e3      	b.n	801a3ec <_svfprintf_r+0x2e4>
 801a424:	f418 7f00 	tst.w	r8, #512	; 0x200
 801a428:	d0f2      	beq.n	801a410 <_svfprintf_r+0x308>
 801a42a:	b27e      	sxtb	r6, r7
 801a42c:	f347 17c0 	sbfx	r7, r7, #7, #1
 801a430:	e7dc      	b.n	801a3ec <_svfprintf_r+0x2e4>
 801a432:	3607      	adds	r6, #7
 801a434:	f026 0307 	bic.w	r3, r6, #7
 801a438:	4619      	mov	r1, r3
 801a43a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801a43e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a442:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 801a446:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801a44a:	910b      	str	r1, [sp, #44]	; 0x2c
 801a44c:	4b3b      	ldr	r3, [pc, #236]	; (801a53c <_svfprintf_r+0x434>)
 801a44e:	f04f 32ff 	mov.w	r2, #4294967295
 801a452:	4630      	mov	r0, r6
 801a454:	4629      	mov	r1, r5
 801a456:	f7e6 fb41 	bl	8000adc <__aeabi_dcmpun>
 801a45a:	bb18      	cbnz	r0, 801a4a4 <_svfprintf_r+0x39c>
 801a45c:	4b37      	ldr	r3, [pc, #220]	; (801a53c <_svfprintf_r+0x434>)
 801a45e:	f04f 32ff 	mov.w	r2, #4294967295
 801a462:	4630      	mov	r0, r6
 801a464:	4629      	mov	r1, r5
 801a466:	f7e6 fb1b 	bl	8000aa0 <__aeabi_dcmple>
 801a46a:	b9d8      	cbnz	r0, 801a4a4 <_svfprintf_r+0x39c>
 801a46c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a470:	2200      	movs	r2, #0
 801a472:	2300      	movs	r3, #0
 801a474:	f7e6 fb0a 	bl	8000a8c <__aeabi_dcmplt>
 801a478:	b110      	cbz	r0, 801a480 <_svfprintf_r+0x378>
 801a47a:	232d      	movs	r3, #45	; 0x2d
 801a47c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a480:	4a2f      	ldr	r2, [pc, #188]	; (801a540 <_svfprintf_r+0x438>)
 801a482:	4830      	ldr	r0, [pc, #192]	; (801a544 <_svfprintf_r+0x43c>)
 801a484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a486:	2100      	movs	r1, #0
 801a488:	2b47      	cmp	r3, #71	; 0x47
 801a48a:	bfd4      	ite	le
 801a48c:	4692      	movle	sl, r2
 801a48e:	4682      	movgt	sl, r0
 801a490:	2303      	movs	r3, #3
 801a492:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801a496:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801a49a:	2700      	movs	r7, #0
 801a49c:	463e      	mov	r6, r7
 801a49e:	463b      	mov	r3, r7
 801a4a0:	f001 b800 	b.w	801b4a4 <_svfprintf_r+0x139c>
 801a4a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a4a8:	4610      	mov	r0, r2
 801a4aa:	4619      	mov	r1, r3
 801a4ac:	f7e6 fb16 	bl	8000adc <__aeabi_dcmpun>
 801a4b0:	b140      	cbz	r0, 801a4c4 <_svfprintf_r+0x3bc>
 801a4b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a4b4:	4a24      	ldr	r2, [pc, #144]	; (801a548 <_svfprintf_r+0x440>)
 801a4b6:	4825      	ldr	r0, [pc, #148]	; (801a54c <_svfprintf_r+0x444>)
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	bfbc      	itt	lt
 801a4bc:	232d      	movlt	r3, #45	; 0x2d
 801a4be:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801a4c2:	e7df      	b.n	801a484 <_svfprintf_r+0x37c>
 801a4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4c6:	f023 0320 	bic.w	r3, r3, #32
 801a4ca:	2b41      	cmp	r3, #65	; 0x41
 801a4cc:	930c      	str	r3, [sp, #48]	; 0x30
 801a4ce:	d125      	bne.n	801a51c <_svfprintf_r+0x414>
 801a4d0:	2330      	movs	r3, #48	; 0x30
 801a4d2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d8:	2b61      	cmp	r3, #97	; 0x61
 801a4da:	bf0c      	ite	eq
 801a4dc:	2378      	moveq	r3, #120	; 0x78
 801a4de:	2358      	movne	r3, #88	; 0x58
 801a4e0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801a4e4:	9b07      	ldr	r3, [sp, #28]
 801a4e6:	2b63      	cmp	r3, #99	; 0x63
 801a4e8:	f048 0802 	orr.w	r8, r8, #2
 801a4ec:	dd30      	ble.n	801a550 <_svfprintf_r+0x448>
 801a4ee:	1c59      	adds	r1, r3, #1
 801a4f0:	4648      	mov	r0, r9
 801a4f2:	f003 fd05 	bl	801df00 <_malloc_r>
 801a4f6:	4682      	mov	sl, r0
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	f040 81f9 	bne.w	801a8f0 <_svfprintf_r+0x7e8>
 801a4fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a506:	f8ab 300c 	strh.w	r3, [fp, #12]
 801a50a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801a50e:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a514:	bf18      	it	ne
 801a516:	f04f 33ff 	movne.w	r3, #4294967295
 801a51a:	e619      	b.n	801a150 <_svfprintf_r+0x48>
 801a51c:	9b07      	ldr	r3, [sp, #28]
 801a51e:	3301      	adds	r3, #1
 801a520:	f000 81e8 	beq.w	801a8f4 <_svfprintf_r+0x7ec>
 801a524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a526:	2b47      	cmp	r3, #71	; 0x47
 801a528:	f040 81e7 	bne.w	801a8fa <_svfprintf_r+0x7f2>
 801a52c:	9b07      	ldr	r3, [sp, #28]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	f040 81e3 	bne.w	801a8fa <_svfprintf_r+0x7f2>
 801a534:	9308      	str	r3, [sp, #32]
 801a536:	2301      	movs	r3, #1
 801a538:	9307      	str	r3, [sp, #28]
 801a53a:	e00c      	b.n	801a556 <_svfprintf_r+0x44e>
 801a53c:	7fefffff 	.word	0x7fefffff
 801a540:	080208d8 	.word	0x080208d8
 801a544:	080208dc 	.word	0x080208dc
 801a548:	080208e0 	.word	0x080208e0
 801a54c:	080208e4 	.word	0x080208e4
 801a550:	9008      	str	r0, [sp, #32]
 801a552:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801a556:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801a55a:	9314      	str	r3, [sp, #80]	; 0x50
 801a55c:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801a560:	1e1d      	subs	r5, r3, #0
 801a562:	bfb6      	itet	lt
 801a564:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 801a568:	2300      	movge	r3, #0
 801a56a:	232d      	movlt	r3, #45	; 0x2d
 801a56c:	931c      	str	r3, [sp, #112]	; 0x70
 801a56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a570:	2b41      	cmp	r3, #65	; 0x41
 801a572:	f040 81da 	bne.w	801a92a <_svfprintf_r+0x822>
 801a576:	aa20      	add	r2, sp, #128	; 0x80
 801a578:	4638      	mov	r0, r7
 801a57a:	4629      	mov	r1, r5
 801a57c:	f004 fc04 	bl	801ed88 <frexp>
 801a580:	2200      	movs	r2, #0
 801a582:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a586:	f7e6 f80f 	bl	80005a8 <__aeabi_dmul>
 801a58a:	2200      	movs	r2, #0
 801a58c:	2300      	movs	r3, #0
 801a58e:	4606      	mov	r6, r0
 801a590:	460f      	mov	r7, r1
 801a592:	f7e6 fa71 	bl	8000a78 <__aeabi_dcmpeq>
 801a596:	b108      	cbz	r0, 801a59c <_svfprintf_r+0x494>
 801a598:	2301      	movs	r3, #1
 801a59a:	9320      	str	r3, [sp, #128]	; 0x80
 801a59c:	4bad      	ldr	r3, [pc, #692]	; (801a854 <_svfprintf_r+0x74c>)
 801a59e:	4aae      	ldr	r2, [pc, #696]	; (801a858 <_svfprintf_r+0x750>)
 801a5a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a5a2:	2961      	cmp	r1, #97	; 0x61
 801a5a4:	bf18      	it	ne
 801a5a6:	461a      	movne	r2, r3
 801a5a8:	9b07      	ldr	r3, [sp, #28]
 801a5aa:	921b      	str	r2, [sp, #108]	; 0x6c
 801a5ac:	3b01      	subs	r3, #1
 801a5ae:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b0:	4655      	mov	r5, sl
 801a5b2:	4baa      	ldr	r3, [pc, #680]	; (801a85c <_svfprintf_r+0x754>)
 801a5b4:	2200      	movs	r2, #0
 801a5b6:	4630      	mov	r0, r6
 801a5b8:	4639      	mov	r1, r7
 801a5ba:	f7e5 fff5 	bl	80005a8 <__aeabi_dmul>
 801a5be:	460f      	mov	r7, r1
 801a5c0:	4606      	mov	r6, r0
 801a5c2:	f7e6 faa1 	bl	8000b08 <__aeabi_d2iz>
 801a5c6:	901d      	str	r0, [sp, #116]	; 0x74
 801a5c8:	f7e5 ff84 	bl	80004d4 <__aeabi_i2d>
 801a5cc:	4602      	mov	r2, r0
 801a5ce:	460b      	mov	r3, r1
 801a5d0:	4630      	mov	r0, r6
 801a5d2:	4639      	mov	r1, r7
 801a5d4:	f7e5 fe30 	bl	8000238 <__aeabi_dsub>
 801a5d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a5da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a5dc:	5c9b      	ldrb	r3, [r3, r2]
 801a5de:	f805 3b01 	strb.w	r3, [r5], #1
 801a5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5e4:	9316      	str	r3, [sp, #88]	; 0x58
 801a5e6:	1c5a      	adds	r2, r3, #1
 801a5e8:	4606      	mov	r6, r0
 801a5ea:	460f      	mov	r7, r1
 801a5ec:	d007      	beq.n	801a5fe <_svfprintf_r+0x4f6>
 801a5ee:	3b01      	subs	r3, #1
 801a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	f7e6 fa3f 	bl	8000a78 <__aeabi_dcmpeq>
 801a5fa:	2800      	cmp	r0, #0
 801a5fc:	d0d9      	beq.n	801a5b2 <_svfprintf_r+0x4aa>
 801a5fe:	4b98      	ldr	r3, [pc, #608]	; (801a860 <_svfprintf_r+0x758>)
 801a600:	2200      	movs	r2, #0
 801a602:	4630      	mov	r0, r6
 801a604:	4639      	mov	r1, r7
 801a606:	f7e6 fa5f 	bl	8000ac8 <__aeabi_dcmpgt>
 801a60a:	b960      	cbnz	r0, 801a626 <_svfprintf_r+0x51e>
 801a60c:	4b94      	ldr	r3, [pc, #592]	; (801a860 <_svfprintf_r+0x758>)
 801a60e:	2200      	movs	r2, #0
 801a610:	4630      	mov	r0, r6
 801a612:	4639      	mov	r1, r7
 801a614:	f7e6 fa30 	bl	8000a78 <__aeabi_dcmpeq>
 801a618:	2800      	cmp	r0, #0
 801a61a:	f000 8181 	beq.w	801a920 <_svfprintf_r+0x818>
 801a61e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a620:	07db      	lsls	r3, r3, #31
 801a622:	f140 817d 	bpl.w	801a920 <_svfprintf_r+0x818>
 801a626:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a628:	9524      	str	r5, [sp, #144]	; 0x90
 801a62a:	7bd9      	ldrb	r1, [r3, #15]
 801a62c:	2030      	movs	r0, #48	; 0x30
 801a62e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a630:	1e53      	subs	r3, r2, #1
 801a632:	9324      	str	r3, [sp, #144]	; 0x90
 801a634:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801a638:	428b      	cmp	r3, r1
 801a63a:	f000 8160 	beq.w	801a8fe <_svfprintf_r+0x7f6>
 801a63e:	2b39      	cmp	r3, #57	; 0x39
 801a640:	bf0b      	itete	eq
 801a642:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 801a644:	3301      	addne	r3, #1
 801a646:	7a9b      	ldrbeq	r3, [r3, #10]
 801a648:	b2db      	uxtbne	r3, r3
 801a64a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a64e:	eba5 030a 	sub.w	r3, r5, sl
 801a652:	9309      	str	r3, [sp, #36]	; 0x24
 801a654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a656:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a658:	2b47      	cmp	r3, #71	; 0x47
 801a65a:	f040 81b3 	bne.w	801a9c4 <_svfprintf_r+0x8bc>
 801a65e:	1cef      	adds	r7, r5, #3
 801a660:	db03      	blt.n	801a66a <_svfprintf_r+0x562>
 801a662:	9b07      	ldr	r3, [sp, #28]
 801a664:	42ab      	cmp	r3, r5
 801a666:	f280 81d8 	bge.w	801aa1a <_svfprintf_r+0x912>
 801a66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a66c:	3b02      	subs	r3, #2
 801a66e:	930a      	str	r3, [sp, #40]	; 0x28
 801a670:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a672:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 801a676:	f021 0120 	bic.w	r1, r1, #32
 801a67a:	2941      	cmp	r1, #65	; 0x41
 801a67c:	bf08      	it	eq
 801a67e:	320f      	addeq	r2, #15
 801a680:	f105 33ff 	add.w	r3, r5, #4294967295
 801a684:	bf06      	itte	eq
 801a686:	b2d2      	uxtbeq	r2, r2
 801a688:	2101      	moveq	r1, #1
 801a68a:	2100      	movne	r1, #0
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	9320      	str	r3, [sp, #128]	; 0x80
 801a690:	bfb8      	it	lt
 801a692:	f1c5 0301 	rsblt	r3, r5, #1
 801a696:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801a69a:	bfb4      	ite	lt
 801a69c:	222d      	movlt	r2, #45	; 0x2d
 801a69e:	222b      	movge	r2, #43	; 0x2b
 801a6a0:	2b09      	cmp	r3, #9
 801a6a2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801a6a6:	f340 81a6 	ble.w	801a9f6 <_svfprintf_r+0x8ee>
 801a6aa:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801a6ae:	260a      	movs	r6, #10
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	fb93 f5f6 	sdiv	r5, r3, r6
 801a6b6:	fb06 3015 	mls	r0, r6, r5, r3
 801a6ba:	3030      	adds	r0, #48	; 0x30
 801a6bc:	f801 0c01 	strb.w	r0, [r1, #-1]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	2863      	cmp	r0, #99	; 0x63
 801a6c4:	f102 32ff 	add.w	r2, r2, #4294967295
 801a6c8:	462b      	mov	r3, r5
 801a6ca:	dcf1      	bgt.n	801a6b0 <_svfprintf_r+0x5a8>
 801a6cc:	3330      	adds	r3, #48	; 0x30
 801a6ce:	1e88      	subs	r0, r1, #2
 801a6d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a6d4:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 801a6d8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801a6dc:	4603      	mov	r3, r0
 801a6de:	42ab      	cmp	r3, r5
 801a6e0:	f0c0 8184 	bcc.w	801a9ec <_svfprintf_r+0x8e4>
 801a6e4:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 801a6e8:	1a52      	subs	r2, r2, r1
 801a6ea:	42a8      	cmp	r0, r5
 801a6ec:	bf88      	it	hi
 801a6ee:	2200      	movhi	r2, #0
 801a6f0:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801a6f4:	441a      	add	r2, r3
 801a6f6:	ab22      	add	r3, sp, #136	; 0x88
 801a6f8:	1ad3      	subs	r3, r2, r3
 801a6fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6fc:	9319      	str	r3, [sp, #100]	; 0x64
 801a6fe:	2a01      	cmp	r2, #1
 801a700:	4413      	add	r3, r2
 801a702:	9307      	str	r3, [sp, #28]
 801a704:	dc02      	bgt.n	801a70c <_svfprintf_r+0x604>
 801a706:	f018 0f01 	tst.w	r8, #1
 801a70a:	d003      	beq.n	801a714 <_svfprintf_r+0x60c>
 801a70c:	9b07      	ldr	r3, [sp, #28]
 801a70e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a710:	4413      	add	r3, r2
 801a712:	9307      	str	r3, [sp, #28]
 801a714:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801a718:	2600      	movs	r6, #0
 801a71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a71e:	9314      	str	r3, [sp, #80]	; 0x50
 801a720:	960c      	str	r6, [sp, #48]	; 0x30
 801a722:	4635      	mov	r5, r6
 801a724:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a726:	b113      	cbz	r3, 801a72e <_svfprintf_r+0x626>
 801a728:	232d      	movs	r3, #45	; 0x2d
 801a72a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a72e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a732:	2700      	movs	r7, #0
 801a734:	9b07      	ldr	r3, [sp, #28]
 801a736:	42bb      	cmp	r3, r7
 801a738:	bfb8      	it	lt
 801a73a:	463b      	movlt	r3, r7
 801a73c:	9314      	str	r3, [sp, #80]	; 0x50
 801a73e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801a742:	b113      	cbz	r3, 801a74a <_svfprintf_r+0x642>
 801a744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a746:	3301      	adds	r3, #1
 801a748:	9314      	str	r3, [sp, #80]	; 0x50
 801a74a:	f018 0302 	ands.w	r3, r8, #2
 801a74e:	931b      	str	r3, [sp, #108]	; 0x6c
 801a750:	bf1e      	ittt	ne
 801a752:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 801a754:	3302      	addne	r3, #2
 801a756:	9314      	strne	r3, [sp, #80]	; 0x50
 801a758:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801a75c:	931c      	str	r3, [sp, #112]	; 0x70
 801a75e:	d122      	bne.n	801a7a6 <_svfprintf_r+0x69e>
 801a760:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801a764:	1a9b      	subs	r3, r3, r2
 801a766:	2b00      	cmp	r3, #0
 801a768:	9316      	str	r3, [sp, #88]	; 0x58
 801a76a:	dd1c      	ble.n	801a7a6 <_svfprintf_r+0x69e>
 801a76c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a76e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801a772:	2810      	cmp	r0, #16
 801a774:	483b      	ldr	r0, [pc, #236]	; (801a864 <_svfprintf_r+0x75c>)
 801a776:	6020      	str	r0, [r4, #0]
 801a778:	f102 0201 	add.w	r2, r2, #1
 801a77c:	f104 0108 	add.w	r1, r4, #8
 801a780:	f300 82ec 	bgt.w	801ad5c <_svfprintf_r+0xc54>
 801a784:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a786:	6060      	str	r0, [r4, #4]
 801a788:	4403      	add	r3, r0
 801a78a:	2a07      	cmp	r2, #7
 801a78c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a790:	f340 82f9 	ble.w	801ad86 <_svfprintf_r+0xc7e>
 801a794:	aa26      	add	r2, sp, #152	; 0x98
 801a796:	4659      	mov	r1, fp
 801a798:	4648      	mov	r0, r9
 801a79a:	f004 fb8f 	bl	801eebc <__ssprint_r>
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	f040 8624 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801a7a4:	ac29      	add	r4, sp, #164	; 0xa4
 801a7a6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801a7aa:	b173      	cbz	r3, 801a7ca <_svfprintf_r+0x6c2>
 801a7ac:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801a7b0:	6023      	str	r3, [r4, #0]
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	6063      	str	r3, [r4, #4]
 801a7b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	9328      	str	r3, [sp, #160]	; 0xa0
 801a7bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a7be:	3301      	adds	r3, #1
 801a7c0:	2b07      	cmp	r3, #7
 801a7c2:	9327      	str	r3, [sp, #156]	; 0x9c
 801a7c4:	f300 82e1 	bgt.w	801ad8a <_svfprintf_r+0xc82>
 801a7c8:	3408      	adds	r4, #8
 801a7ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a7cc:	b16b      	cbz	r3, 801a7ea <_svfprintf_r+0x6e2>
 801a7ce:	ab1f      	add	r3, sp, #124	; 0x7c
 801a7d0:	6023      	str	r3, [r4, #0]
 801a7d2:	2302      	movs	r3, #2
 801a7d4:	6063      	str	r3, [r4, #4]
 801a7d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a7d8:	3302      	adds	r3, #2
 801a7da:	9328      	str	r3, [sp, #160]	; 0xa0
 801a7dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a7de:	3301      	adds	r3, #1
 801a7e0:	2b07      	cmp	r3, #7
 801a7e2:	9327      	str	r3, [sp, #156]	; 0x9c
 801a7e4:	f300 82db 	bgt.w	801ad9e <_svfprintf_r+0xc96>
 801a7e8:	3408      	adds	r4, #8
 801a7ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a7ec:	2b80      	cmp	r3, #128	; 0x80
 801a7ee:	d122      	bne.n	801a836 <_svfprintf_r+0x72e>
 801a7f0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801a7f4:	1a9b      	subs	r3, r3, r2
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	9316      	str	r3, [sp, #88]	; 0x58
 801a7fa:	dd1c      	ble.n	801a836 <_svfprintf_r+0x72e>
 801a7fc:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a7fe:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801a802:	2810      	cmp	r0, #16
 801a804:	4818      	ldr	r0, [pc, #96]	; (801a868 <_svfprintf_r+0x760>)
 801a806:	6020      	str	r0, [r4, #0]
 801a808:	f102 0201 	add.w	r2, r2, #1
 801a80c:	f104 0108 	add.w	r1, r4, #8
 801a810:	f300 82cf 	bgt.w	801adb2 <_svfprintf_r+0xcaa>
 801a814:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a816:	6060      	str	r0, [r4, #4]
 801a818:	4403      	add	r3, r0
 801a81a:	2a07      	cmp	r2, #7
 801a81c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a820:	f340 82dc 	ble.w	801addc <_svfprintf_r+0xcd4>
 801a824:	aa26      	add	r2, sp, #152	; 0x98
 801a826:	4659      	mov	r1, fp
 801a828:	4648      	mov	r0, r9
 801a82a:	f004 fb47 	bl	801eebc <__ssprint_r>
 801a82e:	2800      	cmp	r0, #0
 801a830:	f040 85dc 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801a834:	ac29      	add	r4, sp, #164	; 0xa4
 801a836:	9b07      	ldr	r3, [sp, #28]
 801a838:	1aff      	subs	r7, r7, r3
 801a83a:	2f00      	cmp	r7, #0
 801a83c:	dd28      	ble.n	801a890 <_svfprintf_r+0x788>
 801a83e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a842:	4809      	ldr	r0, [pc, #36]	; (801a868 <_svfprintf_r+0x760>)
 801a844:	6020      	str	r0, [r4, #0]
 801a846:	2f10      	cmp	r7, #16
 801a848:	f103 0301 	add.w	r3, r3, #1
 801a84c:	f104 0108 	add.w	r1, r4, #8
 801a850:	e00c      	b.n	801a86c <_svfprintf_r+0x764>
 801a852:	bf00      	nop
 801a854:	080208f9 	.word	0x080208f9
 801a858:	080208e8 	.word	0x080208e8
 801a85c:	40300000 	.word	0x40300000
 801a860:	3fe00000 	.word	0x3fe00000
 801a864:	0802090c 	.word	0x0802090c
 801a868:	0802091c 	.word	0x0802091c
 801a86c:	f300 82b8 	bgt.w	801ade0 <_svfprintf_r+0xcd8>
 801a870:	6067      	str	r7, [r4, #4]
 801a872:	2b07      	cmp	r3, #7
 801a874:	4417      	add	r7, r2
 801a876:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a87a:	f340 82c4 	ble.w	801ae06 <_svfprintf_r+0xcfe>
 801a87e:	aa26      	add	r2, sp, #152	; 0x98
 801a880:	4659      	mov	r1, fp
 801a882:	4648      	mov	r0, r9
 801a884:	f004 fb1a 	bl	801eebc <__ssprint_r>
 801a888:	2800      	cmp	r0, #0
 801a88a:	f040 85af 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801a88e:	ac29      	add	r4, sp, #164	; 0xa4
 801a890:	f418 7f80 	tst.w	r8, #256	; 0x100
 801a894:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801a896:	f040 82bd 	bne.w	801ae14 <_svfprintf_r+0xd0c>
 801a89a:	9b07      	ldr	r3, [sp, #28]
 801a89c:	f8c4 a000 	str.w	sl, [r4]
 801a8a0:	441f      	add	r7, r3
 801a8a2:	6063      	str	r3, [r4, #4]
 801a8a4:	9728      	str	r7, [sp, #160]	; 0xa0
 801a8a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a8a8:	3301      	adds	r3, #1
 801a8aa:	2b07      	cmp	r3, #7
 801a8ac:	9327      	str	r3, [sp, #156]	; 0x9c
 801a8ae:	f300 82f6 	bgt.w	801ae9e <_svfprintf_r+0xd96>
 801a8b2:	3408      	adds	r4, #8
 801a8b4:	f018 0f04 	tst.w	r8, #4
 801a8b8:	f040 857a 	bne.w	801b3b0 <_svfprintf_r+0x12a8>
 801a8bc:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801a8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8c2:	428a      	cmp	r2, r1
 801a8c4:	bfac      	ite	ge
 801a8c6:	189b      	addge	r3, r3, r2
 801a8c8:	185b      	addlt	r3, r3, r1
 801a8ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801a8cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a8ce:	b13b      	cbz	r3, 801a8e0 <_svfprintf_r+0x7d8>
 801a8d0:	aa26      	add	r2, sp, #152	; 0x98
 801a8d2:	4659      	mov	r1, fp
 801a8d4:	4648      	mov	r0, r9
 801a8d6:	f004 faf1 	bl	801eebc <__ssprint_r>
 801a8da:	2800      	cmp	r0, #0
 801a8dc:	f040 8586 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	9327      	str	r3, [sp, #156]	; 0x9c
 801a8e4:	9b08      	ldr	r3, [sp, #32]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	f040 859c 	bne.w	801b424 <_svfprintf_r+0x131c>
 801a8ec:	ac29      	add	r4, sp, #164	; 0xa4
 801a8ee:	e0e4      	b.n	801aaba <_svfprintf_r+0x9b2>
 801a8f0:	9008      	str	r0, [sp, #32]
 801a8f2:	e630      	b.n	801a556 <_svfprintf_r+0x44e>
 801a8f4:	9008      	str	r0, [sp, #32]
 801a8f6:	2306      	movs	r3, #6
 801a8f8:	e61e      	b.n	801a538 <_svfprintf_r+0x430>
 801a8fa:	9008      	str	r0, [sp, #32]
 801a8fc:	e62b      	b.n	801a556 <_svfprintf_r+0x44e>
 801a8fe:	f802 0c01 	strb.w	r0, [r2, #-1]
 801a902:	e694      	b.n	801a62e <_svfprintf_r+0x526>
 801a904:	f803 0b01 	strb.w	r0, [r3], #1
 801a908:	1aca      	subs	r2, r1, r3
 801a90a:	2a00      	cmp	r2, #0
 801a90c:	dafa      	bge.n	801a904 <_svfprintf_r+0x7fc>
 801a90e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a910:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a912:	3201      	adds	r2, #1
 801a914:	f103 0301 	add.w	r3, r3, #1
 801a918:	bfb8      	it	lt
 801a91a:	2300      	movlt	r3, #0
 801a91c:	441d      	add	r5, r3
 801a91e:	e696      	b.n	801a64e <_svfprintf_r+0x546>
 801a920:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a922:	462b      	mov	r3, r5
 801a924:	18a9      	adds	r1, r5, r2
 801a926:	2030      	movs	r0, #48	; 0x30
 801a928:	e7ee      	b.n	801a908 <_svfprintf_r+0x800>
 801a92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a92c:	2b46      	cmp	r3, #70	; 0x46
 801a92e:	d005      	beq.n	801a93c <_svfprintf_r+0x834>
 801a930:	2b45      	cmp	r3, #69	; 0x45
 801a932:	d11b      	bne.n	801a96c <_svfprintf_r+0x864>
 801a934:	9b07      	ldr	r3, [sp, #28]
 801a936:	1c5e      	adds	r6, r3, #1
 801a938:	2302      	movs	r3, #2
 801a93a:	e001      	b.n	801a940 <_svfprintf_r+0x838>
 801a93c:	9e07      	ldr	r6, [sp, #28]
 801a93e:	2303      	movs	r3, #3
 801a940:	aa24      	add	r2, sp, #144	; 0x90
 801a942:	9204      	str	r2, [sp, #16]
 801a944:	aa21      	add	r2, sp, #132	; 0x84
 801a946:	9203      	str	r2, [sp, #12]
 801a948:	aa20      	add	r2, sp, #128	; 0x80
 801a94a:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801a94e:	9300      	str	r3, [sp, #0]
 801a950:	463a      	mov	r2, r7
 801a952:	462b      	mov	r3, r5
 801a954:	4648      	mov	r0, r9
 801a956:	f002 f8fb 	bl	801cb50 <_dtoa_r>
 801a95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a95c:	2b47      	cmp	r3, #71	; 0x47
 801a95e:	4682      	mov	sl, r0
 801a960:	d106      	bne.n	801a970 <_svfprintf_r+0x868>
 801a962:	f018 0f01 	tst.w	r8, #1
 801a966:	d103      	bne.n	801a970 <_svfprintf_r+0x868>
 801a968:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801a96a:	e670      	b.n	801a64e <_svfprintf_r+0x546>
 801a96c:	9e07      	ldr	r6, [sp, #28]
 801a96e:	e7e3      	b.n	801a938 <_svfprintf_r+0x830>
 801a970:	eb0a 0306 	add.w	r3, sl, r6
 801a974:	9309      	str	r3, [sp, #36]	; 0x24
 801a976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a978:	2b46      	cmp	r3, #70	; 0x46
 801a97a:	d111      	bne.n	801a9a0 <_svfprintf_r+0x898>
 801a97c:	f89a 3000 	ldrb.w	r3, [sl]
 801a980:	2b30      	cmp	r3, #48	; 0x30
 801a982:	d109      	bne.n	801a998 <_svfprintf_r+0x890>
 801a984:	2200      	movs	r2, #0
 801a986:	2300      	movs	r3, #0
 801a988:	4638      	mov	r0, r7
 801a98a:	4629      	mov	r1, r5
 801a98c:	f7e6 f874 	bl	8000a78 <__aeabi_dcmpeq>
 801a990:	b910      	cbnz	r0, 801a998 <_svfprintf_r+0x890>
 801a992:	f1c6 0601 	rsb	r6, r6, #1
 801a996:	9620      	str	r6, [sp, #128]	; 0x80
 801a998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a99a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a99c:	441a      	add	r2, r3
 801a99e:	9209      	str	r2, [sp, #36]	; 0x24
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	4638      	mov	r0, r7
 801a9a6:	4629      	mov	r1, r5
 801a9a8:	f7e6 f866 	bl	8000a78 <__aeabi_dcmpeq>
 801a9ac:	b108      	cbz	r0, 801a9b2 <_svfprintf_r+0x8aa>
 801a9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9b0:	9324      	str	r3, [sp, #144]	; 0x90
 801a9b2:	2230      	movs	r2, #48	; 0x30
 801a9b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a9b8:	4299      	cmp	r1, r3
 801a9ba:	d9d5      	bls.n	801a968 <_svfprintf_r+0x860>
 801a9bc:	1c59      	adds	r1, r3, #1
 801a9be:	9124      	str	r1, [sp, #144]	; 0x90
 801a9c0:	701a      	strb	r2, [r3, #0]
 801a9c2:	e7f7      	b.n	801a9b4 <_svfprintf_r+0x8ac>
 801a9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9c6:	2b46      	cmp	r3, #70	; 0x46
 801a9c8:	f47f ae52 	bne.w	801a670 <_svfprintf_r+0x568>
 801a9cc:	9a07      	ldr	r2, [sp, #28]
 801a9ce:	f008 0301 	and.w	r3, r8, #1
 801a9d2:	2d00      	cmp	r5, #0
 801a9d4:	ea43 0302 	orr.w	r3, r3, r2
 801a9d8:	dd1a      	ble.n	801aa10 <_svfprintf_r+0x908>
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d034      	beq.n	801aa48 <_svfprintf_r+0x940>
 801a9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a9e0:	18eb      	adds	r3, r5, r3
 801a9e2:	441a      	add	r2, r3
 801a9e4:	9207      	str	r2, [sp, #28]
 801a9e6:	2366      	movs	r3, #102	; 0x66
 801a9e8:	930a      	str	r3, [sp, #40]	; 0x28
 801a9ea:	e033      	b.n	801aa54 <_svfprintf_r+0x94c>
 801a9ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a9f0:	f802 6b01 	strb.w	r6, [r2], #1
 801a9f4:	e673      	b.n	801a6de <_svfprintf_r+0x5d6>
 801a9f6:	b941      	cbnz	r1, 801aa0a <_svfprintf_r+0x902>
 801a9f8:	2230      	movs	r2, #48	; 0x30
 801a9fa:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801a9fe:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801aa02:	3330      	adds	r3, #48	; 0x30
 801aa04:	f802 3b01 	strb.w	r3, [r2], #1
 801aa08:	e675      	b.n	801a6f6 <_svfprintf_r+0x5ee>
 801aa0a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801aa0e:	e7f8      	b.n	801aa02 <_svfprintf_r+0x8fa>
 801aa10:	b1e3      	cbz	r3, 801aa4c <_svfprintf_r+0x944>
 801aa12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aa14:	9a07      	ldr	r2, [sp, #28]
 801aa16:	3301      	adds	r3, #1
 801aa18:	e7e3      	b.n	801a9e2 <_svfprintf_r+0x8da>
 801aa1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa1c:	429d      	cmp	r5, r3
 801aa1e:	db07      	blt.n	801aa30 <_svfprintf_r+0x928>
 801aa20:	f018 0f01 	tst.w	r8, #1
 801aa24:	d02b      	beq.n	801aa7e <_svfprintf_r+0x976>
 801aa26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aa28:	18eb      	adds	r3, r5, r3
 801aa2a:	9307      	str	r3, [sp, #28]
 801aa2c:	2367      	movs	r3, #103	; 0x67
 801aa2e:	e7db      	b.n	801a9e8 <_svfprintf_r+0x8e0>
 801aa30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa34:	2d00      	cmp	r5, #0
 801aa36:	4413      	add	r3, r2
 801aa38:	9307      	str	r3, [sp, #28]
 801aa3a:	dcf7      	bgt.n	801aa2c <_svfprintf_r+0x924>
 801aa3c:	9a07      	ldr	r2, [sp, #28]
 801aa3e:	f1c5 0301 	rsb	r3, r5, #1
 801aa42:	441a      	add	r2, r3
 801aa44:	9207      	str	r2, [sp, #28]
 801aa46:	e7f1      	b.n	801aa2c <_svfprintf_r+0x924>
 801aa48:	9507      	str	r5, [sp, #28]
 801aa4a:	e7cc      	b.n	801a9e6 <_svfprintf_r+0x8de>
 801aa4c:	2366      	movs	r3, #102	; 0x66
 801aa4e:	930a      	str	r3, [sp, #40]	; 0x28
 801aa50:	2301      	movs	r3, #1
 801aa52:	9307      	str	r3, [sp, #28]
 801aa54:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801aa58:	930c      	str	r3, [sp, #48]	; 0x30
 801aa5a:	d021      	beq.n	801aaa0 <_svfprintf_r+0x998>
 801aa5c:	2600      	movs	r6, #0
 801aa5e:	2d00      	cmp	r5, #0
 801aa60:	960c      	str	r6, [sp, #48]	; 0x30
 801aa62:	f77f ae5f 	ble.w	801a724 <_svfprintf_r+0x61c>
 801aa66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa68:	781b      	ldrb	r3, [r3, #0]
 801aa6a:	2bff      	cmp	r3, #255	; 0xff
 801aa6c:	d109      	bne.n	801aa82 <_svfprintf_r+0x97a>
 801aa6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa70:	9a07      	ldr	r2, [sp, #28]
 801aa72:	9915      	ldr	r1, [sp, #84]	; 0x54
 801aa74:	4433      	add	r3, r6
 801aa76:	fb01 2303 	mla	r3, r1, r3, r2
 801aa7a:	9307      	str	r3, [sp, #28]
 801aa7c:	e652      	b.n	801a724 <_svfprintf_r+0x61c>
 801aa7e:	9507      	str	r5, [sp, #28]
 801aa80:	e7d4      	b.n	801aa2c <_svfprintf_r+0x924>
 801aa82:	42ab      	cmp	r3, r5
 801aa84:	daf3      	bge.n	801aa6e <_svfprintf_r+0x966>
 801aa86:	1aed      	subs	r5, r5, r3
 801aa88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa8a:	785b      	ldrb	r3, [r3, #1]
 801aa8c:	b133      	cbz	r3, 801aa9c <_svfprintf_r+0x994>
 801aa8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa90:	3301      	adds	r3, #1
 801aa92:	930c      	str	r3, [sp, #48]	; 0x30
 801aa94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa96:	3301      	adds	r3, #1
 801aa98:	930d      	str	r3, [sp, #52]	; 0x34
 801aa9a:	e7e4      	b.n	801aa66 <_svfprintf_r+0x95e>
 801aa9c:	3601      	adds	r6, #1
 801aa9e:	e7e2      	b.n	801aa66 <_svfprintf_r+0x95e>
 801aaa0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801aaa2:	e63f      	b.n	801a724 <_svfprintf_r+0x61c>
 801aaa4:	1d33      	adds	r3, r6, #4
 801aaa6:	f018 0f20 	tst.w	r8, #32
 801aaaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801aaac:	d00a      	beq.n	801aac4 <_svfprintf_r+0x9bc>
 801aaae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aab0:	6833      	ldr	r3, [r6, #0]
 801aab2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801aab4:	17d2      	asrs	r2, r2, #31
 801aab6:	e9c3 1200 	strd	r1, r2, [r3]
 801aaba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801aabc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801aac0:	f7ff bb5e 	b.w	801a180 <_svfprintf_r+0x78>
 801aac4:	f018 0f10 	tst.w	r8, #16
 801aac8:	d003      	beq.n	801aad2 <_svfprintf_r+0x9ca>
 801aaca:	6833      	ldr	r3, [r6, #0]
 801aacc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aace:	601a      	str	r2, [r3, #0]
 801aad0:	e7f3      	b.n	801aaba <_svfprintf_r+0x9b2>
 801aad2:	f018 0f40 	tst.w	r8, #64	; 0x40
 801aad6:	d003      	beq.n	801aae0 <_svfprintf_r+0x9d8>
 801aad8:	6833      	ldr	r3, [r6, #0]
 801aada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aadc:	801a      	strh	r2, [r3, #0]
 801aade:	e7ec      	b.n	801aaba <_svfprintf_r+0x9b2>
 801aae0:	f418 7f00 	tst.w	r8, #512	; 0x200
 801aae4:	d0f1      	beq.n	801aaca <_svfprintf_r+0x9c2>
 801aae6:	6833      	ldr	r3, [r6, #0]
 801aae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aaea:	701a      	strb	r2, [r3, #0]
 801aaec:	e7e5      	b.n	801aaba <_svfprintf_r+0x9b2>
 801aaee:	f048 0810 	orr.w	r8, r8, #16
 801aaf2:	f018 0320 	ands.w	r3, r8, #32
 801aaf6:	d020      	beq.n	801ab3a <_svfprintf_r+0xa32>
 801aaf8:	1df3      	adds	r3, r6, #7
 801aafa:	f023 0307 	bic.w	r3, r3, #7
 801aafe:	461a      	mov	r2, r3
 801ab00:	685f      	ldr	r7, [r3, #4]
 801ab02:	f852 6b08 	ldr.w	r6, [r2], #8
 801ab06:	920b      	str	r2, [sp, #44]	; 0x2c
 801ab08:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	2200      	movs	r2, #0
 801ab10:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801ab14:	9a07      	ldr	r2, [sp, #28]
 801ab16:	3201      	adds	r2, #1
 801ab18:	f000 8495 	beq.w	801b446 <_svfprintf_r+0x133e>
 801ab1c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801ab20:	9208      	str	r2, [sp, #32]
 801ab22:	ea56 0207 	orrs.w	r2, r6, r7
 801ab26:	f040 8494 	bne.w	801b452 <_svfprintf_r+0x134a>
 801ab2a:	9a07      	ldr	r2, [sp, #28]
 801ab2c:	2a00      	cmp	r2, #0
 801ab2e:	f000 80fb 	beq.w	801ad28 <_svfprintf_r+0xc20>
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	f040 8490 	bne.w	801b458 <_svfprintf_r+0x1350>
 801ab38:	e09f      	b.n	801ac7a <_svfprintf_r+0xb72>
 801ab3a:	4632      	mov	r2, r6
 801ab3c:	f018 0710 	ands.w	r7, r8, #16
 801ab40:	f852 6b04 	ldr.w	r6, [r2], #4
 801ab44:	920b      	str	r2, [sp, #44]	; 0x2c
 801ab46:	d001      	beq.n	801ab4c <_svfprintf_r+0xa44>
 801ab48:	461f      	mov	r7, r3
 801ab4a:	e7dd      	b.n	801ab08 <_svfprintf_r+0xa00>
 801ab4c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801ab50:	d001      	beq.n	801ab56 <_svfprintf_r+0xa4e>
 801ab52:	b2b6      	uxth	r6, r6
 801ab54:	e7d8      	b.n	801ab08 <_svfprintf_r+0xa00>
 801ab56:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 801ab5a:	d0d5      	beq.n	801ab08 <_svfprintf_r+0xa00>
 801ab5c:	b2f6      	uxtb	r6, r6
 801ab5e:	e7f3      	b.n	801ab48 <_svfprintf_r+0xa40>
 801ab60:	4633      	mov	r3, r6
 801ab62:	2278      	movs	r2, #120	; 0x78
 801ab64:	f853 6b04 	ldr.w	r6, [r3], #4
 801ab68:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab6a:	2330      	movs	r3, #48	; 0x30
 801ab6c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801ab70:	4ba6      	ldr	r3, [pc, #664]	; (801ae0c <_svfprintf_r+0xd04>)
 801ab72:	931a      	str	r3, [sp, #104]	; 0x68
 801ab74:	2700      	movs	r7, #0
 801ab76:	f048 0802 	orr.w	r8, r8, #2
 801ab7a:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 801ab7e:	2302      	movs	r3, #2
 801ab80:	920a      	str	r2, [sp, #40]	; 0x28
 801ab82:	e7c4      	b.n	801ab0e <_svfprintf_r+0xa06>
 801ab84:	4633      	mov	r3, r6
 801ab86:	2500      	movs	r5, #0
 801ab88:	f853 ab04 	ldr.w	sl, [r3], #4
 801ab8c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab8e:	9b07      	ldr	r3, [sp, #28]
 801ab90:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801ab94:	1c58      	adds	r0, r3, #1
 801ab96:	d010      	beq.n	801abba <_svfprintf_r+0xab2>
 801ab98:	461a      	mov	r2, r3
 801ab9a:	4629      	mov	r1, r5
 801ab9c:	4650      	mov	r0, sl
 801ab9e:	f7e5 faf7 	bl	8000190 <memchr>
 801aba2:	9008      	str	r0, [sp, #32]
 801aba4:	2800      	cmp	r0, #0
 801aba6:	f000 80d6 	beq.w	801ad56 <_svfprintf_r+0xc4e>
 801abaa:	eba0 030a 	sub.w	r3, r0, sl
 801abae:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801abb2:	462f      	mov	r7, r5
 801abb4:	462e      	mov	r6, r5
 801abb6:	950c      	str	r5, [sp, #48]	; 0x30
 801abb8:	e5bc      	b.n	801a734 <_svfprintf_r+0x62c>
 801abba:	4650      	mov	r0, sl
 801abbc:	f7e5 fae0 	bl	8000180 <strlen>
 801abc0:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801abc4:	e469      	b.n	801a49a <_svfprintf_r+0x392>
 801abc6:	f048 0810 	orr.w	r8, r8, #16
 801abca:	f018 0320 	ands.w	r3, r8, #32
 801abce:	d009      	beq.n	801abe4 <_svfprintf_r+0xadc>
 801abd0:	1df3      	adds	r3, r6, #7
 801abd2:	f023 0307 	bic.w	r3, r3, #7
 801abd6:	461a      	mov	r2, r3
 801abd8:	685f      	ldr	r7, [r3, #4]
 801abda:	f852 6b08 	ldr.w	r6, [r2], #8
 801abde:	920b      	str	r2, [sp, #44]	; 0x2c
 801abe0:	2301      	movs	r3, #1
 801abe2:	e794      	b.n	801ab0e <_svfprintf_r+0xa06>
 801abe4:	4632      	mov	r2, r6
 801abe6:	f018 0710 	ands.w	r7, r8, #16
 801abea:	f852 6b04 	ldr.w	r6, [r2], #4
 801abee:	920b      	str	r2, [sp, #44]	; 0x2c
 801abf0:	d001      	beq.n	801abf6 <_svfprintf_r+0xaee>
 801abf2:	461f      	mov	r7, r3
 801abf4:	e7f4      	b.n	801abe0 <_svfprintf_r+0xad8>
 801abf6:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801abfa:	d001      	beq.n	801ac00 <_svfprintf_r+0xaf8>
 801abfc:	b2b6      	uxth	r6, r6
 801abfe:	e7ef      	b.n	801abe0 <_svfprintf_r+0xad8>
 801ac00:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 801ac04:	d0ec      	beq.n	801abe0 <_svfprintf_r+0xad8>
 801ac06:	b2f6      	uxtb	r6, r6
 801ac08:	e7f3      	b.n	801abf2 <_svfprintf_r+0xaea>
 801ac0a:	4b81      	ldr	r3, [pc, #516]	; (801ae10 <_svfprintf_r+0xd08>)
 801ac0c:	931a      	str	r3, [sp, #104]	; 0x68
 801ac0e:	f018 0320 	ands.w	r3, r8, #32
 801ac12:	d01b      	beq.n	801ac4c <_svfprintf_r+0xb44>
 801ac14:	1df3      	adds	r3, r6, #7
 801ac16:	f023 0307 	bic.w	r3, r3, #7
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	685f      	ldr	r7, [r3, #4]
 801ac1e:	f852 6b08 	ldr.w	r6, [r2], #8
 801ac22:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac24:	f018 0f01 	tst.w	r8, #1
 801ac28:	d00a      	beq.n	801ac40 <_svfprintf_r+0xb38>
 801ac2a:	ea56 0307 	orrs.w	r3, r6, r7
 801ac2e:	d007      	beq.n	801ac40 <_svfprintf_r+0xb38>
 801ac30:	2330      	movs	r3, #48	; 0x30
 801ac32:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801ac36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac38:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801ac3c:	f048 0802 	orr.w	r8, r8, #2
 801ac40:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801ac44:	2302      	movs	r3, #2
 801ac46:	e762      	b.n	801ab0e <_svfprintf_r+0xa06>
 801ac48:	4b70      	ldr	r3, [pc, #448]	; (801ae0c <_svfprintf_r+0xd04>)
 801ac4a:	e7df      	b.n	801ac0c <_svfprintf_r+0xb04>
 801ac4c:	4632      	mov	r2, r6
 801ac4e:	f018 0710 	ands.w	r7, r8, #16
 801ac52:	f852 6b04 	ldr.w	r6, [r2], #4
 801ac56:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac58:	d001      	beq.n	801ac5e <_svfprintf_r+0xb56>
 801ac5a:	461f      	mov	r7, r3
 801ac5c:	e7e2      	b.n	801ac24 <_svfprintf_r+0xb1c>
 801ac5e:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801ac62:	d001      	beq.n	801ac68 <_svfprintf_r+0xb60>
 801ac64:	b2b6      	uxth	r6, r6
 801ac66:	e7dd      	b.n	801ac24 <_svfprintf_r+0xb1c>
 801ac68:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 801ac6c:	d0da      	beq.n	801ac24 <_svfprintf_r+0xb1c>
 801ac6e:	b2f6      	uxtb	r6, r6
 801ac70:	e7f3      	b.n	801ac5a <_svfprintf_r+0xb52>
 801ac72:	2e0a      	cmp	r6, #10
 801ac74:	f177 0300 	sbcs.w	r3, r7, #0
 801ac78:	d206      	bcs.n	801ac88 <_svfprintf_r+0xb80>
 801ac7a:	3630      	adds	r6, #48	; 0x30
 801ac7c:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 801ac80:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 801ac84:	f000 bc04 	b.w	801b490 <_svfprintf_r+0x1388>
 801ac88:	2300      	movs	r3, #0
 801ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac8c:	9b08      	ldr	r3, [sp, #32]
 801ac8e:	ad52      	add	r5, sp, #328	; 0x148
 801ac90:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801ac94:	220a      	movs	r2, #10
 801ac96:	2300      	movs	r3, #0
 801ac98:	4630      	mov	r0, r6
 801ac9a:	4639      	mov	r1, r7
 801ac9c:	f7e6 fa50 	bl	8001140 <__aeabi_uldivmod>
 801aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aca2:	3230      	adds	r2, #48	; 0x30
 801aca4:	3301      	adds	r3, #1
 801aca6:	f105 3aff 	add.w	sl, r5, #4294967295
 801acaa:	f805 2c01 	strb.w	r2, [r5, #-1]
 801acae:	9309      	str	r3, [sp, #36]	; 0x24
 801acb0:	f1b8 0f00 	cmp.w	r8, #0
 801acb4:	d019      	beq.n	801acea <_svfprintf_r+0xbe2>
 801acb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801acba:	781b      	ldrb	r3, [r3, #0]
 801acbc:	429a      	cmp	r2, r3
 801acbe:	d114      	bne.n	801acea <_svfprintf_r+0xbe2>
 801acc0:	2aff      	cmp	r2, #255	; 0xff
 801acc2:	d012      	beq.n	801acea <_svfprintf_r+0xbe2>
 801acc4:	2e0a      	cmp	r6, #10
 801acc6:	f177 0300 	sbcs.w	r3, r7, #0
 801acca:	d30e      	bcc.n	801acea <_svfprintf_r+0xbe2>
 801accc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801acce:	9918      	ldr	r1, [sp, #96]	; 0x60
 801acd0:	ebaa 0a03 	sub.w	sl, sl, r3
 801acd4:	461a      	mov	r2, r3
 801acd6:	4650      	mov	r0, sl
 801acd8:	f004 f8dd 	bl	801ee96 <strncpy>
 801acdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acde:	785d      	ldrb	r5, [r3, #1]
 801ace0:	b195      	cbz	r5, 801ad08 <_svfprintf_r+0xc00>
 801ace2:	3301      	adds	r3, #1
 801ace4:	930d      	str	r3, [sp, #52]	; 0x34
 801ace6:	2300      	movs	r3, #0
 801ace8:	9309      	str	r3, [sp, #36]	; 0x24
 801acea:	2300      	movs	r3, #0
 801acec:	220a      	movs	r2, #10
 801acee:	4630      	mov	r0, r6
 801acf0:	4639      	mov	r1, r7
 801acf2:	f7e6 fa25 	bl	8001140 <__aeabi_uldivmod>
 801acf6:	2e0a      	cmp	r6, #10
 801acf8:	f177 0300 	sbcs.w	r3, r7, #0
 801acfc:	f0c0 83c8 	bcc.w	801b490 <_svfprintf_r+0x1388>
 801ad00:	4606      	mov	r6, r0
 801ad02:	460f      	mov	r7, r1
 801ad04:	4655      	mov	r5, sl
 801ad06:	e7c5      	b.n	801ac94 <_svfprintf_r+0xb8c>
 801ad08:	9509      	str	r5, [sp, #36]	; 0x24
 801ad0a:	e7ee      	b.n	801acea <_svfprintf_r+0xbe2>
 801ad0c:	f006 030f 	and.w	r3, r6, #15
 801ad10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ad12:	0936      	lsrs	r6, r6, #4
 801ad14:	5cd3      	ldrb	r3, [r2, r3]
 801ad16:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801ad1a:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801ad1e:	093f      	lsrs	r7, r7, #4
 801ad20:	ea56 0307 	orrs.w	r3, r6, r7
 801ad24:	d1f2      	bne.n	801ad0c <_svfprintf_r+0xc04>
 801ad26:	e3b3      	b.n	801b490 <_svfprintf_r+0x1388>
 801ad28:	b933      	cbnz	r3, 801ad38 <_svfprintf_r+0xc30>
 801ad2a:	f018 0f01 	tst.w	r8, #1
 801ad2e:	d003      	beq.n	801ad38 <_svfprintf_r+0xc30>
 801ad30:	2330      	movs	r3, #48	; 0x30
 801ad32:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801ad36:	e7a3      	b.n	801ac80 <_svfprintf_r+0xb78>
 801ad38:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 801ad3c:	e3a8      	b.n	801b490 <_svfprintf_r+0x1388>
 801ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	f000 8375 	beq.w	801b430 <_svfprintf_r+0x1328>
 801ad46:	2000      	movs	r0, #0
 801ad48:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801ad4c:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801ad50:	960b      	str	r6, [sp, #44]	; 0x2c
 801ad52:	f7ff bb34 	b.w	801a3be <_svfprintf_r+0x2b6>
 801ad56:	9f08      	ldr	r7, [sp, #32]
 801ad58:	f7ff bba0 	b.w	801a49c <_svfprintf_r+0x394>
 801ad5c:	2010      	movs	r0, #16
 801ad5e:	4403      	add	r3, r0
 801ad60:	2a07      	cmp	r2, #7
 801ad62:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801ad66:	6060      	str	r0, [r4, #4]
 801ad68:	dd08      	ble.n	801ad7c <_svfprintf_r+0xc74>
 801ad6a:	aa26      	add	r2, sp, #152	; 0x98
 801ad6c:	4659      	mov	r1, fp
 801ad6e:	4648      	mov	r0, r9
 801ad70:	f004 f8a4 	bl	801eebc <__ssprint_r>
 801ad74:	2800      	cmp	r0, #0
 801ad76:	f040 8339 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801ad7a:	a929      	add	r1, sp, #164	; 0xa4
 801ad7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad7e:	3b10      	subs	r3, #16
 801ad80:	9316      	str	r3, [sp, #88]	; 0x58
 801ad82:	460c      	mov	r4, r1
 801ad84:	e4f2      	b.n	801a76c <_svfprintf_r+0x664>
 801ad86:	460c      	mov	r4, r1
 801ad88:	e50d      	b.n	801a7a6 <_svfprintf_r+0x69e>
 801ad8a:	aa26      	add	r2, sp, #152	; 0x98
 801ad8c:	4659      	mov	r1, fp
 801ad8e:	4648      	mov	r0, r9
 801ad90:	f004 f894 	bl	801eebc <__ssprint_r>
 801ad94:	2800      	cmp	r0, #0
 801ad96:	f040 8329 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801ad9a:	ac29      	add	r4, sp, #164	; 0xa4
 801ad9c:	e515      	b.n	801a7ca <_svfprintf_r+0x6c2>
 801ad9e:	aa26      	add	r2, sp, #152	; 0x98
 801ada0:	4659      	mov	r1, fp
 801ada2:	4648      	mov	r0, r9
 801ada4:	f004 f88a 	bl	801eebc <__ssprint_r>
 801ada8:	2800      	cmp	r0, #0
 801adaa:	f040 831f 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801adae:	ac29      	add	r4, sp, #164	; 0xa4
 801adb0:	e51b      	b.n	801a7ea <_svfprintf_r+0x6e2>
 801adb2:	2010      	movs	r0, #16
 801adb4:	4403      	add	r3, r0
 801adb6:	2a07      	cmp	r2, #7
 801adb8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801adbc:	6060      	str	r0, [r4, #4]
 801adbe:	dd08      	ble.n	801add2 <_svfprintf_r+0xcca>
 801adc0:	aa26      	add	r2, sp, #152	; 0x98
 801adc2:	4659      	mov	r1, fp
 801adc4:	4648      	mov	r0, r9
 801adc6:	f004 f879 	bl	801eebc <__ssprint_r>
 801adca:	2800      	cmp	r0, #0
 801adcc:	f040 830e 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801add0:	a929      	add	r1, sp, #164	; 0xa4
 801add2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801add4:	3b10      	subs	r3, #16
 801add6:	9316      	str	r3, [sp, #88]	; 0x58
 801add8:	460c      	mov	r4, r1
 801adda:	e50f      	b.n	801a7fc <_svfprintf_r+0x6f4>
 801addc:	460c      	mov	r4, r1
 801adde:	e52a      	b.n	801a836 <_svfprintf_r+0x72e>
 801ade0:	2010      	movs	r0, #16
 801ade2:	4402      	add	r2, r0
 801ade4:	2b07      	cmp	r3, #7
 801ade6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801adea:	6060      	str	r0, [r4, #4]
 801adec:	dd08      	ble.n	801ae00 <_svfprintf_r+0xcf8>
 801adee:	aa26      	add	r2, sp, #152	; 0x98
 801adf0:	4659      	mov	r1, fp
 801adf2:	4648      	mov	r0, r9
 801adf4:	f004 f862 	bl	801eebc <__ssprint_r>
 801adf8:	2800      	cmp	r0, #0
 801adfa:	f040 82f7 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801adfe:	a929      	add	r1, sp, #164	; 0xa4
 801ae00:	3f10      	subs	r7, #16
 801ae02:	460c      	mov	r4, r1
 801ae04:	e51b      	b.n	801a83e <_svfprintf_r+0x736>
 801ae06:	460c      	mov	r4, r1
 801ae08:	e542      	b.n	801a890 <_svfprintf_r+0x788>
 801ae0a:	bf00      	nop
 801ae0c:	080208e8 	.word	0x080208e8
 801ae10:	080208f9 	.word	0x080208f9
 801ae14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae16:	2b65      	cmp	r3, #101	; 0x65
 801ae18:	f340 8230 	ble.w	801b27c <_svfprintf_r+0x1174>
 801ae1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ae20:	2200      	movs	r2, #0
 801ae22:	2300      	movs	r3, #0
 801ae24:	f7e5 fe28 	bl	8000a78 <__aeabi_dcmpeq>
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	d068      	beq.n	801aefe <_svfprintf_r+0xdf6>
 801ae2c:	4b6d      	ldr	r3, [pc, #436]	; (801afe4 <_svfprintf_r+0xedc>)
 801ae2e:	6023      	str	r3, [r4, #0]
 801ae30:	2301      	movs	r3, #1
 801ae32:	441f      	add	r7, r3
 801ae34:	6063      	str	r3, [r4, #4]
 801ae36:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae38:	9728      	str	r7, [sp, #160]	; 0xa0
 801ae3a:	3301      	adds	r3, #1
 801ae3c:	2b07      	cmp	r3, #7
 801ae3e:	9327      	str	r3, [sp, #156]	; 0x9c
 801ae40:	dc37      	bgt.n	801aeb2 <_svfprintf_r+0xdaa>
 801ae42:	3408      	adds	r4, #8
 801ae44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ae46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae48:	4293      	cmp	r3, r2
 801ae4a:	db03      	blt.n	801ae54 <_svfprintf_r+0xd4c>
 801ae4c:	f018 0f01 	tst.w	r8, #1
 801ae50:	f43f ad30 	beq.w	801a8b4 <_svfprintf_r+0x7ac>
 801ae54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ae56:	6023      	str	r3, [r4, #0]
 801ae58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ae5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae5c:	6063      	str	r3, [r4, #4]
 801ae5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae60:	4413      	add	r3, r2
 801ae62:	9328      	str	r3, [sp, #160]	; 0xa0
 801ae64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae66:	3301      	adds	r3, #1
 801ae68:	2b07      	cmp	r3, #7
 801ae6a:	9327      	str	r3, [sp, #156]	; 0x9c
 801ae6c:	dc2b      	bgt.n	801aec6 <_svfprintf_r+0xdbe>
 801ae6e:	3408      	adds	r4, #8
 801ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae72:	1e5d      	subs	r5, r3, #1
 801ae74:	2d00      	cmp	r5, #0
 801ae76:	f77f ad1d 	ble.w	801a8b4 <_svfprintf_r+0x7ac>
 801ae7a:	4e5b      	ldr	r6, [pc, #364]	; (801afe8 <_svfprintf_r+0xee0>)
 801ae7c:	2710      	movs	r7, #16
 801ae7e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801ae82:	2d10      	cmp	r5, #16
 801ae84:	f103 0301 	add.w	r3, r3, #1
 801ae88:	f104 0108 	add.w	r1, r4, #8
 801ae8c:	6026      	str	r6, [r4, #0]
 801ae8e:	dc24      	bgt.n	801aeda <_svfprintf_r+0xdd2>
 801ae90:	6065      	str	r5, [r4, #4]
 801ae92:	2b07      	cmp	r3, #7
 801ae94:	4415      	add	r5, r2
 801ae96:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801ae9a:	f340 8286 	ble.w	801b3aa <_svfprintf_r+0x12a2>
 801ae9e:	aa26      	add	r2, sp, #152	; 0x98
 801aea0:	4659      	mov	r1, fp
 801aea2:	4648      	mov	r0, r9
 801aea4:	f004 f80a 	bl	801eebc <__ssprint_r>
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	f040 829f 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801aeae:	ac29      	add	r4, sp, #164	; 0xa4
 801aeb0:	e500      	b.n	801a8b4 <_svfprintf_r+0x7ac>
 801aeb2:	aa26      	add	r2, sp, #152	; 0x98
 801aeb4:	4659      	mov	r1, fp
 801aeb6:	4648      	mov	r0, r9
 801aeb8:	f004 f800 	bl	801eebc <__ssprint_r>
 801aebc:	2800      	cmp	r0, #0
 801aebe:	f040 8295 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801aec2:	ac29      	add	r4, sp, #164	; 0xa4
 801aec4:	e7be      	b.n	801ae44 <_svfprintf_r+0xd3c>
 801aec6:	aa26      	add	r2, sp, #152	; 0x98
 801aec8:	4659      	mov	r1, fp
 801aeca:	4648      	mov	r0, r9
 801aecc:	f003 fff6 	bl	801eebc <__ssprint_r>
 801aed0:	2800      	cmp	r0, #0
 801aed2:	f040 828b 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801aed6:	ac29      	add	r4, sp, #164	; 0xa4
 801aed8:	e7ca      	b.n	801ae70 <_svfprintf_r+0xd68>
 801aeda:	3210      	adds	r2, #16
 801aedc:	2b07      	cmp	r3, #7
 801aede:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801aee2:	6067      	str	r7, [r4, #4]
 801aee4:	dd08      	ble.n	801aef8 <_svfprintf_r+0xdf0>
 801aee6:	aa26      	add	r2, sp, #152	; 0x98
 801aee8:	4659      	mov	r1, fp
 801aeea:	4648      	mov	r0, r9
 801aeec:	f003 ffe6 	bl	801eebc <__ssprint_r>
 801aef0:	2800      	cmp	r0, #0
 801aef2:	f040 827b 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801aef6:	a929      	add	r1, sp, #164	; 0xa4
 801aef8:	3d10      	subs	r5, #16
 801aefa:	460c      	mov	r4, r1
 801aefc:	e7bf      	b.n	801ae7e <_svfprintf_r+0xd76>
 801aefe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801af00:	2b00      	cmp	r3, #0
 801af02:	dc73      	bgt.n	801afec <_svfprintf_r+0xee4>
 801af04:	4b37      	ldr	r3, [pc, #220]	; (801afe4 <_svfprintf_r+0xedc>)
 801af06:	6023      	str	r3, [r4, #0]
 801af08:	2301      	movs	r3, #1
 801af0a:	441f      	add	r7, r3
 801af0c:	6063      	str	r3, [r4, #4]
 801af0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801af10:	9728      	str	r7, [sp, #160]	; 0xa0
 801af12:	3301      	adds	r3, #1
 801af14:	2b07      	cmp	r3, #7
 801af16:	9327      	str	r3, [sp, #156]	; 0x9c
 801af18:	dc3d      	bgt.n	801af96 <_svfprintf_r+0xe8e>
 801af1a:	3408      	adds	r4, #8
 801af1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801af1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801af20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af22:	430a      	orrs	r2, r1
 801af24:	f008 0101 	and.w	r1, r8, #1
 801af28:	430a      	orrs	r2, r1
 801af2a:	f43f acc3 	beq.w	801a8b4 <_svfprintf_r+0x7ac>
 801af2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801af30:	6022      	str	r2, [r4, #0]
 801af32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af34:	6062      	str	r2, [r4, #4]
 801af36:	4413      	add	r3, r2
 801af38:	9328      	str	r3, [sp, #160]	; 0xa0
 801af3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801af3c:	3301      	adds	r3, #1
 801af3e:	2b07      	cmp	r3, #7
 801af40:	9327      	str	r3, [sp, #156]	; 0x9c
 801af42:	dc32      	bgt.n	801afaa <_svfprintf_r+0xea2>
 801af44:	3408      	adds	r4, #8
 801af46:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801af48:	2d00      	cmp	r5, #0
 801af4a:	da1b      	bge.n	801af84 <_svfprintf_r+0xe7c>
 801af4c:	4e26      	ldr	r6, [pc, #152]	; (801afe8 <_svfprintf_r+0xee0>)
 801af4e:	426d      	negs	r5, r5
 801af50:	4623      	mov	r3, r4
 801af52:	2710      	movs	r7, #16
 801af54:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801af58:	2d10      	cmp	r5, #16
 801af5a:	f102 0201 	add.w	r2, r2, #1
 801af5e:	f104 0408 	add.w	r4, r4, #8
 801af62:	601e      	str	r6, [r3, #0]
 801af64:	dc2b      	bgt.n	801afbe <_svfprintf_r+0xeb6>
 801af66:	605d      	str	r5, [r3, #4]
 801af68:	2a07      	cmp	r2, #7
 801af6a:	440d      	add	r5, r1
 801af6c:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801af70:	dd08      	ble.n	801af84 <_svfprintf_r+0xe7c>
 801af72:	aa26      	add	r2, sp, #152	; 0x98
 801af74:	4659      	mov	r1, fp
 801af76:	4648      	mov	r0, r9
 801af78:	f003 ffa0 	bl	801eebc <__ssprint_r>
 801af7c:	2800      	cmp	r0, #0
 801af7e:	f040 8235 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801af82:	ac29      	add	r4, sp, #164	; 0xa4
 801af84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af88:	6063      	str	r3, [r4, #4]
 801af8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af8c:	f8c4 a000 	str.w	sl, [r4]
 801af90:	4413      	add	r3, r2
 801af92:	9328      	str	r3, [sp, #160]	; 0xa0
 801af94:	e487      	b.n	801a8a6 <_svfprintf_r+0x79e>
 801af96:	aa26      	add	r2, sp, #152	; 0x98
 801af98:	4659      	mov	r1, fp
 801af9a:	4648      	mov	r0, r9
 801af9c:	f003 ff8e 	bl	801eebc <__ssprint_r>
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f040 8223 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801afa6:	ac29      	add	r4, sp, #164	; 0xa4
 801afa8:	e7b8      	b.n	801af1c <_svfprintf_r+0xe14>
 801afaa:	aa26      	add	r2, sp, #152	; 0x98
 801afac:	4659      	mov	r1, fp
 801afae:	4648      	mov	r0, r9
 801afb0:	f003 ff84 	bl	801eebc <__ssprint_r>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	f040 8219 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801afba:	ac29      	add	r4, sp, #164	; 0xa4
 801afbc:	e7c3      	b.n	801af46 <_svfprintf_r+0xe3e>
 801afbe:	3110      	adds	r1, #16
 801afc0:	2a07      	cmp	r2, #7
 801afc2:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801afc6:	605f      	str	r7, [r3, #4]
 801afc8:	dd08      	ble.n	801afdc <_svfprintf_r+0xed4>
 801afca:	aa26      	add	r2, sp, #152	; 0x98
 801afcc:	4659      	mov	r1, fp
 801afce:	4648      	mov	r0, r9
 801afd0:	f003 ff74 	bl	801eebc <__ssprint_r>
 801afd4:	2800      	cmp	r0, #0
 801afd6:	f040 8209 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801afda:	ac29      	add	r4, sp, #164	; 0xa4
 801afdc:	3d10      	subs	r5, #16
 801afde:	4623      	mov	r3, r4
 801afe0:	e7b8      	b.n	801af54 <_svfprintf_r+0xe4c>
 801afe2:	bf00      	nop
 801afe4:	0802090a 	.word	0x0802090a
 801afe8:	0802091c 	.word	0x0802091c
 801afec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afee:	42ab      	cmp	r3, r5
 801aff0:	bfa8      	it	ge
 801aff2:	462b      	movge	r3, r5
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	9307      	str	r3, [sp, #28]
 801aff8:	dd0a      	ble.n	801b010 <_svfprintf_r+0xf08>
 801affa:	441f      	add	r7, r3
 801affc:	e9c4 a300 	strd	sl, r3, [r4]
 801b000:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b002:	9728      	str	r7, [sp, #160]	; 0xa0
 801b004:	3301      	adds	r3, #1
 801b006:	2b07      	cmp	r3, #7
 801b008:	9327      	str	r3, [sp, #156]	; 0x9c
 801b00a:	f300 8085 	bgt.w	801b118 <_svfprintf_r+0x1010>
 801b00e:	3408      	adds	r4, #8
 801b010:	9b07      	ldr	r3, [sp, #28]
 801b012:	2b00      	cmp	r3, #0
 801b014:	bfac      	ite	ge
 801b016:	1aef      	subge	r7, r5, r3
 801b018:	462f      	movlt	r7, r5
 801b01a:	2f00      	cmp	r7, #0
 801b01c:	dd19      	ble.n	801b052 <_svfprintf_r+0xf4a>
 801b01e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b022:	4895      	ldr	r0, [pc, #596]	; (801b278 <_svfprintf_r+0x1170>)
 801b024:	6020      	str	r0, [r4, #0]
 801b026:	2f10      	cmp	r7, #16
 801b028:	f103 0301 	add.w	r3, r3, #1
 801b02c:	f104 0108 	add.w	r1, r4, #8
 801b030:	dc7c      	bgt.n	801b12c <_svfprintf_r+0x1024>
 801b032:	6067      	str	r7, [r4, #4]
 801b034:	2b07      	cmp	r3, #7
 801b036:	4417      	add	r7, r2
 801b038:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b03c:	f340 8089 	ble.w	801b152 <_svfprintf_r+0x104a>
 801b040:	aa26      	add	r2, sp, #152	; 0x98
 801b042:	4659      	mov	r1, fp
 801b044:	4648      	mov	r0, r9
 801b046:	f003 ff39 	bl	801eebc <__ssprint_r>
 801b04a:	2800      	cmp	r0, #0
 801b04c:	f040 81ce 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b050:	ac29      	add	r4, sp, #164	; 0xa4
 801b052:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801b056:	4455      	add	r5, sl
 801b058:	d009      	beq.n	801b06e <_svfprintf_r+0xf66>
 801b05a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d17a      	bne.n	801b156 <_svfprintf_r+0x104e>
 801b060:	2e00      	cmp	r6, #0
 801b062:	d17a      	bne.n	801b15a <_svfprintf_r+0x1052>
 801b064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b066:	4453      	add	r3, sl
 801b068:	429d      	cmp	r5, r3
 801b06a:	bf28      	it	cs
 801b06c:	461d      	movcs	r5, r3
 801b06e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b072:	4293      	cmp	r3, r2
 801b074:	db02      	blt.n	801b07c <_svfprintf_r+0xf74>
 801b076:	f018 0f01 	tst.w	r8, #1
 801b07a:	d00e      	beq.n	801b09a <_svfprintf_r+0xf92>
 801b07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b07e:	6023      	str	r3, [r4, #0]
 801b080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b082:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b084:	6063      	str	r3, [r4, #4]
 801b086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b088:	4413      	add	r3, r2
 801b08a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b08c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b08e:	3301      	adds	r3, #1
 801b090:	2b07      	cmp	r3, #7
 801b092:	9327      	str	r3, [sp, #156]	; 0x9c
 801b094:	f300 80db 	bgt.w	801b24e <_svfprintf_r+0x1146>
 801b098:	3408      	adds	r4, #8
 801b09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b09c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b09e:	eb0a 0203 	add.w	r2, sl, r3
 801b0a2:	1b9e      	subs	r6, r3, r6
 801b0a4:	1b52      	subs	r2, r2, r5
 801b0a6:	4296      	cmp	r6, r2
 801b0a8:	bfa8      	it	ge
 801b0aa:	4616      	movge	r6, r2
 801b0ac:	2e00      	cmp	r6, #0
 801b0ae:	dd0b      	ble.n	801b0c8 <_svfprintf_r+0xfc0>
 801b0b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0b2:	4433      	add	r3, r6
 801b0b4:	9328      	str	r3, [sp, #160]	; 0xa0
 801b0b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b0b8:	3301      	adds	r3, #1
 801b0ba:	2b07      	cmp	r3, #7
 801b0bc:	e9c4 5600 	strd	r5, r6, [r4]
 801b0c0:	9327      	str	r3, [sp, #156]	; 0x9c
 801b0c2:	f300 80ce 	bgt.w	801b262 <_svfprintf_r+0x115a>
 801b0c6:	3408      	adds	r4, #8
 801b0c8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0cc:	2e00      	cmp	r6, #0
 801b0ce:	eba3 0505 	sub.w	r5, r3, r5
 801b0d2:	bfa8      	it	ge
 801b0d4:	1bad      	subge	r5, r5, r6
 801b0d6:	2d00      	cmp	r5, #0
 801b0d8:	f77f abec 	ble.w	801a8b4 <_svfprintf_r+0x7ac>
 801b0dc:	4e66      	ldr	r6, [pc, #408]	; (801b278 <_svfprintf_r+0x1170>)
 801b0de:	2710      	movs	r7, #16
 801b0e0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b0e4:	2d10      	cmp	r5, #16
 801b0e6:	f103 0301 	add.w	r3, r3, #1
 801b0ea:	f104 0108 	add.w	r1, r4, #8
 801b0ee:	6026      	str	r6, [r4, #0]
 801b0f0:	f77f aece 	ble.w	801ae90 <_svfprintf_r+0xd88>
 801b0f4:	3210      	adds	r2, #16
 801b0f6:	2b07      	cmp	r3, #7
 801b0f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b0fc:	6067      	str	r7, [r4, #4]
 801b0fe:	dd08      	ble.n	801b112 <_svfprintf_r+0x100a>
 801b100:	aa26      	add	r2, sp, #152	; 0x98
 801b102:	4659      	mov	r1, fp
 801b104:	4648      	mov	r0, r9
 801b106:	f003 fed9 	bl	801eebc <__ssprint_r>
 801b10a:	2800      	cmp	r0, #0
 801b10c:	f040 816e 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b110:	a929      	add	r1, sp, #164	; 0xa4
 801b112:	3d10      	subs	r5, #16
 801b114:	460c      	mov	r4, r1
 801b116:	e7e3      	b.n	801b0e0 <_svfprintf_r+0xfd8>
 801b118:	aa26      	add	r2, sp, #152	; 0x98
 801b11a:	4659      	mov	r1, fp
 801b11c:	4648      	mov	r0, r9
 801b11e:	f003 fecd 	bl	801eebc <__ssprint_r>
 801b122:	2800      	cmp	r0, #0
 801b124:	f040 8162 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b128:	ac29      	add	r4, sp, #164	; 0xa4
 801b12a:	e771      	b.n	801b010 <_svfprintf_r+0xf08>
 801b12c:	2010      	movs	r0, #16
 801b12e:	4402      	add	r2, r0
 801b130:	2b07      	cmp	r3, #7
 801b132:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b136:	6060      	str	r0, [r4, #4]
 801b138:	dd08      	ble.n	801b14c <_svfprintf_r+0x1044>
 801b13a:	aa26      	add	r2, sp, #152	; 0x98
 801b13c:	4659      	mov	r1, fp
 801b13e:	4648      	mov	r0, r9
 801b140:	f003 febc 	bl	801eebc <__ssprint_r>
 801b144:	2800      	cmp	r0, #0
 801b146:	f040 8151 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b14a:	a929      	add	r1, sp, #164	; 0xa4
 801b14c:	3f10      	subs	r7, #16
 801b14e:	460c      	mov	r4, r1
 801b150:	e765      	b.n	801b01e <_svfprintf_r+0xf16>
 801b152:	460c      	mov	r4, r1
 801b154:	e77d      	b.n	801b052 <_svfprintf_r+0xf4a>
 801b156:	2e00      	cmp	r6, #0
 801b158:	d049      	beq.n	801b1ee <_svfprintf_r+0x10e6>
 801b15a:	3e01      	subs	r6, #1
 801b15c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b15e:	6023      	str	r3, [r4, #0]
 801b160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b162:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b164:	6063      	str	r3, [r4, #4]
 801b166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b168:	4413      	add	r3, r2
 801b16a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b16c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b16e:	3301      	adds	r3, #1
 801b170:	2b07      	cmp	r3, #7
 801b172:	9327      	str	r3, [sp, #156]	; 0x9c
 801b174:	dc42      	bgt.n	801b1fc <_svfprintf_r+0x10f4>
 801b176:	3408      	adds	r4, #8
 801b178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b17a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b17c:	4453      	add	r3, sl
 801b17e:	7812      	ldrb	r2, [r2, #0]
 801b180:	1b5b      	subs	r3, r3, r5
 801b182:	429a      	cmp	r2, r3
 801b184:	bfa8      	it	ge
 801b186:	461a      	movge	r2, r3
 801b188:	2a00      	cmp	r2, #0
 801b18a:	9207      	str	r2, [sp, #28]
 801b18c:	dd0a      	ble.n	801b1a4 <_svfprintf_r+0x109c>
 801b18e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b190:	4413      	add	r3, r2
 801b192:	9328      	str	r3, [sp, #160]	; 0xa0
 801b194:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b196:	3301      	adds	r3, #1
 801b198:	2b07      	cmp	r3, #7
 801b19a:	e9c4 5200 	strd	r5, r2, [r4]
 801b19e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b1a0:	dc36      	bgt.n	801b210 <_svfprintf_r+0x1108>
 801b1a2:	3408      	adds	r4, #8
 801b1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1a6:	781f      	ldrb	r7, [r3, #0]
 801b1a8:	9b07      	ldr	r3, [sp, #28]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	bfa8      	it	ge
 801b1ae:	1aff      	subge	r7, r7, r3
 801b1b0:	2f00      	cmp	r7, #0
 801b1b2:	dd18      	ble.n	801b1e6 <_svfprintf_r+0x10de>
 801b1b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b1b8:	482f      	ldr	r0, [pc, #188]	; (801b278 <_svfprintf_r+0x1170>)
 801b1ba:	6020      	str	r0, [r4, #0]
 801b1bc:	2f10      	cmp	r7, #16
 801b1be:	f103 0301 	add.w	r3, r3, #1
 801b1c2:	f104 0108 	add.w	r1, r4, #8
 801b1c6:	dc2d      	bgt.n	801b224 <_svfprintf_r+0x111c>
 801b1c8:	443a      	add	r2, r7
 801b1ca:	2b07      	cmp	r3, #7
 801b1cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b1d0:	6067      	str	r7, [r4, #4]
 801b1d2:	dd3a      	ble.n	801b24a <_svfprintf_r+0x1142>
 801b1d4:	aa26      	add	r2, sp, #152	; 0x98
 801b1d6:	4659      	mov	r1, fp
 801b1d8:	4648      	mov	r0, r9
 801b1da:	f003 fe6f 	bl	801eebc <__ssprint_r>
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	f040 8104 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b1e4:	ac29      	add	r4, sp, #164	; 0xa4
 801b1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1e8:	781b      	ldrb	r3, [r3, #0]
 801b1ea:	441d      	add	r5, r3
 801b1ec:	e735      	b.n	801b05a <_svfprintf_r+0xf52>
 801b1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1f0:	3b01      	subs	r3, #1
 801b1f2:	930d      	str	r3, [sp, #52]	; 0x34
 801b1f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1f6:	3b01      	subs	r3, #1
 801b1f8:	930c      	str	r3, [sp, #48]	; 0x30
 801b1fa:	e7af      	b.n	801b15c <_svfprintf_r+0x1054>
 801b1fc:	aa26      	add	r2, sp, #152	; 0x98
 801b1fe:	4659      	mov	r1, fp
 801b200:	4648      	mov	r0, r9
 801b202:	f003 fe5b 	bl	801eebc <__ssprint_r>
 801b206:	2800      	cmp	r0, #0
 801b208:	f040 80f0 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b20c:	ac29      	add	r4, sp, #164	; 0xa4
 801b20e:	e7b3      	b.n	801b178 <_svfprintf_r+0x1070>
 801b210:	aa26      	add	r2, sp, #152	; 0x98
 801b212:	4659      	mov	r1, fp
 801b214:	4648      	mov	r0, r9
 801b216:	f003 fe51 	bl	801eebc <__ssprint_r>
 801b21a:	2800      	cmp	r0, #0
 801b21c:	f040 80e6 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b220:	ac29      	add	r4, sp, #164	; 0xa4
 801b222:	e7bf      	b.n	801b1a4 <_svfprintf_r+0x109c>
 801b224:	2010      	movs	r0, #16
 801b226:	4402      	add	r2, r0
 801b228:	2b07      	cmp	r3, #7
 801b22a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b22e:	6060      	str	r0, [r4, #4]
 801b230:	dd08      	ble.n	801b244 <_svfprintf_r+0x113c>
 801b232:	aa26      	add	r2, sp, #152	; 0x98
 801b234:	4659      	mov	r1, fp
 801b236:	4648      	mov	r0, r9
 801b238:	f003 fe40 	bl	801eebc <__ssprint_r>
 801b23c:	2800      	cmp	r0, #0
 801b23e:	f040 80d5 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b242:	a929      	add	r1, sp, #164	; 0xa4
 801b244:	3f10      	subs	r7, #16
 801b246:	460c      	mov	r4, r1
 801b248:	e7b4      	b.n	801b1b4 <_svfprintf_r+0x10ac>
 801b24a:	460c      	mov	r4, r1
 801b24c:	e7cb      	b.n	801b1e6 <_svfprintf_r+0x10de>
 801b24e:	aa26      	add	r2, sp, #152	; 0x98
 801b250:	4659      	mov	r1, fp
 801b252:	4648      	mov	r0, r9
 801b254:	f003 fe32 	bl	801eebc <__ssprint_r>
 801b258:	2800      	cmp	r0, #0
 801b25a:	f040 80c7 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b25e:	ac29      	add	r4, sp, #164	; 0xa4
 801b260:	e71b      	b.n	801b09a <_svfprintf_r+0xf92>
 801b262:	aa26      	add	r2, sp, #152	; 0x98
 801b264:	4659      	mov	r1, fp
 801b266:	4648      	mov	r0, r9
 801b268:	f003 fe28 	bl	801eebc <__ssprint_r>
 801b26c:	2800      	cmp	r0, #0
 801b26e:	f040 80bd 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b272:	ac29      	add	r4, sp, #164	; 0xa4
 801b274:	e728      	b.n	801b0c8 <_svfprintf_r+0xfc0>
 801b276:	bf00      	nop
 801b278:	0802091c 	.word	0x0802091c
 801b27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b27e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b280:	2a01      	cmp	r2, #1
 801b282:	f107 0701 	add.w	r7, r7, #1
 801b286:	f103 0301 	add.w	r3, r3, #1
 801b28a:	f104 0508 	add.w	r5, r4, #8
 801b28e:	dc02      	bgt.n	801b296 <_svfprintf_r+0x118e>
 801b290:	f018 0f01 	tst.w	r8, #1
 801b294:	d07e      	beq.n	801b394 <_svfprintf_r+0x128c>
 801b296:	2201      	movs	r2, #1
 801b298:	2b07      	cmp	r3, #7
 801b29a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b29e:	f8c4 a000 	str.w	sl, [r4]
 801b2a2:	6062      	str	r2, [r4, #4]
 801b2a4:	dd08      	ble.n	801b2b8 <_svfprintf_r+0x11b0>
 801b2a6:	aa26      	add	r2, sp, #152	; 0x98
 801b2a8:	4659      	mov	r1, fp
 801b2aa:	4648      	mov	r0, r9
 801b2ac:	f003 fe06 	bl	801eebc <__ssprint_r>
 801b2b0:	2800      	cmp	r0, #0
 801b2b2:	f040 809b 	bne.w	801b3ec <_svfprintf_r+0x12e4>
 801b2b6:	ad29      	add	r5, sp, #164	; 0xa4
 801b2b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2ba:	602b      	str	r3, [r5, #0]
 801b2bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b2be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2c0:	606b      	str	r3, [r5, #4]
 801b2c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2c4:	4413      	add	r3, r2
 801b2c6:	9328      	str	r3, [sp, #160]	; 0xa0
 801b2c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b2ca:	3301      	adds	r3, #1
 801b2cc:	2b07      	cmp	r3, #7
 801b2ce:	9327      	str	r3, [sp, #156]	; 0x9c
 801b2d0:	dc32      	bgt.n	801b338 <_svfprintf_r+0x1230>
 801b2d2:	3508      	adds	r5, #8
 801b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b2da:	1e5c      	subs	r4, r3, #1
 801b2dc:	2200      	movs	r2, #0
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f7e5 fbca 	bl	8000a78 <__aeabi_dcmpeq>
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	d130      	bne.n	801b34a <_svfprintf_r+0x1242>
 801b2e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b2ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b2ee:	3101      	adds	r1, #1
 801b2f0:	3b01      	subs	r3, #1
 801b2f2:	f10a 0001 	add.w	r0, sl, #1
 801b2f6:	4413      	add	r3, r2
 801b2f8:	2907      	cmp	r1, #7
 801b2fa:	e9c5 0400 	strd	r0, r4, [r5]
 801b2fe:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 801b302:	dd50      	ble.n	801b3a6 <_svfprintf_r+0x129e>
 801b304:	aa26      	add	r2, sp, #152	; 0x98
 801b306:	4659      	mov	r1, fp
 801b308:	4648      	mov	r0, r9
 801b30a:	f003 fdd7 	bl	801eebc <__ssprint_r>
 801b30e:	2800      	cmp	r0, #0
 801b310:	d16c      	bne.n	801b3ec <_svfprintf_r+0x12e4>
 801b312:	ad29      	add	r5, sp, #164	; 0xa4
 801b314:	ab22      	add	r3, sp, #136	; 0x88
 801b316:	602b      	str	r3, [r5, #0]
 801b318:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b31a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b31c:	606b      	str	r3, [r5, #4]
 801b31e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b320:	4413      	add	r3, r2
 801b322:	9328      	str	r3, [sp, #160]	; 0xa0
 801b324:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b326:	3301      	adds	r3, #1
 801b328:	2b07      	cmp	r3, #7
 801b32a:	9327      	str	r3, [sp, #156]	; 0x9c
 801b32c:	f73f adb7 	bgt.w	801ae9e <_svfprintf_r+0xd96>
 801b330:	f105 0408 	add.w	r4, r5, #8
 801b334:	f7ff babe 	b.w	801a8b4 <_svfprintf_r+0x7ac>
 801b338:	aa26      	add	r2, sp, #152	; 0x98
 801b33a:	4659      	mov	r1, fp
 801b33c:	4648      	mov	r0, r9
 801b33e:	f003 fdbd 	bl	801eebc <__ssprint_r>
 801b342:	2800      	cmp	r0, #0
 801b344:	d152      	bne.n	801b3ec <_svfprintf_r+0x12e4>
 801b346:	ad29      	add	r5, sp, #164	; 0xa4
 801b348:	e7c4      	b.n	801b2d4 <_svfprintf_r+0x11cc>
 801b34a:	2c00      	cmp	r4, #0
 801b34c:	dde2      	ble.n	801b314 <_svfprintf_r+0x120c>
 801b34e:	4e57      	ldr	r6, [pc, #348]	; (801b4ac <_svfprintf_r+0x13a4>)
 801b350:	2710      	movs	r7, #16
 801b352:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b356:	2c10      	cmp	r4, #16
 801b358:	f103 0301 	add.w	r3, r3, #1
 801b35c:	f105 0108 	add.w	r1, r5, #8
 801b360:	602e      	str	r6, [r5, #0]
 801b362:	dc07      	bgt.n	801b374 <_svfprintf_r+0x126c>
 801b364:	606c      	str	r4, [r5, #4]
 801b366:	2b07      	cmp	r3, #7
 801b368:	4414      	add	r4, r2
 801b36a:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801b36e:	dcc9      	bgt.n	801b304 <_svfprintf_r+0x11fc>
 801b370:	460d      	mov	r5, r1
 801b372:	e7cf      	b.n	801b314 <_svfprintf_r+0x120c>
 801b374:	3210      	adds	r2, #16
 801b376:	2b07      	cmp	r3, #7
 801b378:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b37c:	606f      	str	r7, [r5, #4]
 801b37e:	dd06      	ble.n	801b38e <_svfprintf_r+0x1286>
 801b380:	aa26      	add	r2, sp, #152	; 0x98
 801b382:	4659      	mov	r1, fp
 801b384:	4648      	mov	r0, r9
 801b386:	f003 fd99 	bl	801eebc <__ssprint_r>
 801b38a:	bb78      	cbnz	r0, 801b3ec <_svfprintf_r+0x12e4>
 801b38c:	a929      	add	r1, sp, #164	; 0xa4
 801b38e:	3c10      	subs	r4, #16
 801b390:	460d      	mov	r5, r1
 801b392:	e7de      	b.n	801b352 <_svfprintf_r+0x124a>
 801b394:	2201      	movs	r2, #1
 801b396:	2b07      	cmp	r3, #7
 801b398:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b39c:	f8c4 a000 	str.w	sl, [r4]
 801b3a0:	6062      	str	r2, [r4, #4]
 801b3a2:	ddb7      	ble.n	801b314 <_svfprintf_r+0x120c>
 801b3a4:	e7ae      	b.n	801b304 <_svfprintf_r+0x11fc>
 801b3a6:	3508      	adds	r5, #8
 801b3a8:	e7b4      	b.n	801b314 <_svfprintf_r+0x120c>
 801b3aa:	460c      	mov	r4, r1
 801b3ac:	f7ff ba82 	b.w	801a8b4 <_svfprintf_r+0x7ac>
 801b3b0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801b3b4:	1a9d      	subs	r5, r3, r2
 801b3b6:	2d00      	cmp	r5, #0
 801b3b8:	f77f aa80 	ble.w	801a8bc <_svfprintf_r+0x7b4>
 801b3bc:	4e3c      	ldr	r6, [pc, #240]	; (801b4b0 <_svfprintf_r+0x13a8>)
 801b3be:	2710      	movs	r7, #16
 801b3c0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b3c4:	2d10      	cmp	r5, #16
 801b3c6:	f103 0301 	add.w	r3, r3, #1
 801b3ca:	6026      	str	r6, [r4, #0]
 801b3cc:	dc18      	bgt.n	801b400 <_svfprintf_r+0x12f8>
 801b3ce:	6065      	str	r5, [r4, #4]
 801b3d0:	2b07      	cmp	r3, #7
 801b3d2:	4415      	add	r5, r2
 801b3d4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801b3d8:	f77f aa70 	ble.w	801a8bc <_svfprintf_r+0x7b4>
 801b3dc:	aa26      	add	r2, sp, #152	; 0x98
 801b3de:	4659      	mov	r1, fp
 801b3e0:	4648      	mov	r0, r9
 801b3e2:	f003 fd6b 	bl	801eebc <__ssprint_r>
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	f43f aa68 	beq.w	801a8bc <_svfprintf_r+0x7b4>
 801b3ec:	9b08      	ldr	r3, [sp, #32]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	f43f a88b 	beq.w	801a50a <_svfprintf_r+0x402>
 801b3f4:	4619      	mov	r1, r3
 801b3f6:	4648      	mov	r0, r9
 801b3f8:	f002 fae6 	bl	801d9c8 <_free_r>
 801b3fc:	f7ff b885 	b.w	801a50a <_svfprintf_r+0x402>
 801b400:	3210      	adds	r2, #16
 801b402:	2b07      	cmp	r3, #7
 801b404:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b408:	6067      	str	r7, [r4, #4]
 801b40a:	dc02      	bgt.n	801b412 <_svfprintf_r+0x130a>
 801b40c:	3408      	adds	r4, #8
 801b40e:	3d10      	subs	r5, #16
 801b410:	e7d6      	b.n	801b3c0 <_svfprintf_r+0x12b8>
 801b412:	aa26      	add	r2, sp, #152	; 0x98
 801b414:	4659      	mov	r1, fp
 801b416:	4648      	mov	r0, r9
 801b418:	f003 fd50 	bl	801eebc <__ssprint_r>
 801b41c:	2800      	cmp	r0, #0
 801b41e:	d1e5      	bne.n	801b3ec <_svfprintf_r+0x12e4>
 801b420:	ac29      	add	r4, sp, #164	; 0xa4
 801b422:	e7f4      	b.n	801b40e <_svfprintf_r+0x1306>
 801b424:	9908      	ldr	r1, [sp, #32]
 801b426:	4648      	mov	r0, r9
 801b428:	f002 face 	bl	801d9c8 <_free_r>
 801b42c:	f7ff ba5e 	b.w	801a8ec <_svfprintf_r+0x7e4>
 801b430:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b432:	2b00      	cmp	r3, #0
 801b434:	f43f a869 	beq.w	801a50a <_svfprintf_r+0x402>
 801b438:	aa26      	add	r2, sp, #152	; 0x98
 801b43a:	4659      	mov	r1, fp
 801b43c:	4648      	mov	r0, r9
 801b43e:	f003 fd3d 	bl	801eebc <__ssprint_r>
 801b442:	f7ff b862 	b.w	801a50a <_svfprintf_r+0x402>
 801b446:	ea56 0207 	orrs.w	r2, r6, r7
 801b44a:	f8cd 8020 	str.w	r8, [sp, #32]
 801b44e:	f43f ab70 	beq.w	801ab32 <_svfprintf_r+0xa2a>
 801b452:	2b01      	cmp	r3, #1
 801b454:	f43f ac0d 	beq.w	801ac72 <_svfprintf_r+0xb6a>
 801b458:	2b02      	cmp	r3, #2
 801b45a:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 801b45e:	f43f ac55 	beq.w	801ad0c <_svfprintf_r+0xc04>
 801b462:	f006 0307 	and.w	r3, r6, #7
 801b466:	08f6      	lsrs	r6, r6, #3
 801b468:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801b46c:	08ff      	lsrs	r7, r7, #3
 801b46e:	3330      	adds	r3, #48	; 0x30
 801b470:	ea56 0107 	orrs.w	r1, r6, r7
 801b474:	4652      	mov	r2, sl
 801b476:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801b47a:	d1f2      	bne.n	801b462 <_svfprintf_r+0x135a>
 801b47c:	9908      	ldr	r1, [sp, #32]
 801b47e:	07c9      	lsls	r1, r1, #31
 801b480:	d506      	bpl.n	801b490 <_svfprintf_r+0x1388>
 801b482:	2b30      	cmp	r3, #48	; 0x30
 801b484:	d004      	beq.n	801b490 <_svfprintf_r+0x1388>
 801b486:	2330      	movs	r3, #48	; 0x30
 801b488:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801b48c:	f1a2 0a02 	sub.w	sl, r2, #2
 801b490:	ab52      	add	r3, sp, #328	; 0x148
 801b492:	eba3 030a 	sub.w	r3, r3, sl
 801b496:	9f07      	ldr	r7, [sp, #28]
 801b498:	9307      	str	r3, [sp, #28]
 801b49a:	2300      	movs	r3, #0
 801b49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b4a0:	9308      	str	r3, [sp, #32]
 801b4a2:	461e      	mov	r6, r3
 801b4a4:	930c      	str	r3, [sp, #48]	; 0x30
 801b4a6:	461d      	mov	r5, r3
 801b4a8:	f7ff b944 	b.w	801a734 <_svfprintf_r+0x62c>
 801b4ac:	0802091c 	.word	0x0802091c
 801b4b0:	0802090c 	.word	0x0802090c

0801b4b4 <_vfprintf_r>:
 801b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b8:	b0d3      	sub	sp, #332	; 0x14c
 801b4ba:	468a      	mov	sl, r1
 801b4bc:	4691      	mov	r9, r2
 801b4be:	461c      	mov	r4, r3
 801b4c0:	461e      	mov	r6, r3
 801b4c2:	4680      	mov	r8, r0
 801b4c4:	f002 fca8 	bl	801de18 <_localeconv_r>
 801b4c8:	6803      	ldr	r3, [r0, #0]
 801b4ca:	9317      	str	r3, [sp, #92]	; 0x5c
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7e4 fe57 	bl	8000180 <strlen>
 801b4d2:	9012      	str	r0, [sp, #72]	; 0x48
 801b4d4:	f1b8 0f00 	cmp.w	r8, #0
 801b4d8:	d005      	beq.n	801b4e6 <_vfprintf_r+0x32>
 801b4da:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801b4de:	b913      	cbnz	r3, 801b4e6 <_vfprintf_r+0x32>
 801b4e0:	4640      	mov	r0, r8
 801b4e2:	f002 f9e1 	bl	801d8a8 <__sinit>
 801b4e6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801b4ea:	07d8      	lsls	r0, r3, #31
 801b4ec:	d407      	bmi.n	801b4fe <_vfprintf_r+0x4a>
 801b4ee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b4f2:	0599      	lsls	r1, r3, #22
 801b4f4:	d403      	bmi.n	801b4fe <_vfprintf_r+0x4a>
 801b4f6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801b4fa:	f002 fc93 	bl	801de24 <__retarget_lock_acquire_recursive>
 801b4fe:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801b502:	049a      	lsls	r2, r3, #18
 801b504:	d409      	bmi.n	801b51a <_vfprintf_r+0x66>
 801b506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b50a:	f8aa 300c 	strh.w	r3, [sl, #12]
 801b50e:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801b512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b516:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801b51a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b51e:	071b      	lsls	r3, r3, #28
 801b520:	d502      	bpl.n	801b528 <_vfprintf_r+0x74>
 801b522:	f8da 3010 	ldr.w	r3, [sl, #16]
 801b526:	b9c3      	cbnz	r3, 801b55a <_vfprintf_r+0xa6>
 801b528:	4651      	mov	r1, sl
 801b52a:	4640      	mov	r0, r8
 801b52c:	f001 fa20 	bl	801c970 <__swsetup_r>
 801b530:	b198      	cbz	r0, 801b55a <_vfprintf_r+0xa6>
 801b532:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801b536:	07df      	lsls	r7, r3, #31
 801b538:	d506      	bpl.n	801b548 <_vfprintf_r+0x94>
 801b53a:	f04f 33ff 	mov.w	r3, #4294967295
 801b53e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b540:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b542:	b053      	add	sp, #332	; 0x14c
 801b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b548:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b54c:	059e      	lsls	r6, r3, #22
 801b54e:	d4f4      	bmi.n	801b53a <_vfprintf_r+0x86>
 801b550:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801b554:	f002 fc67 	bl	801de26 <__retarget_lock_release_recursive>
 801b558:	e7ef      	b.n	801b53a <_vfprintf_r+0x86>
 801b55a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b55e:	f003 021a 	and.w	r2, r3, #26
 801b562:	2a0a      	cmp	r2, #10
 801b564:	d116      	bne.n	801b594 <_vfprintf_r+0xe0>
 801b566:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 801b56a:	2a00      	cmp	r2, #0
 801b56c:	db12      	blt.n	801b594 <_vfprintf_r+0xe0>
 801b56e:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 801b572:	07d5      	lsls	r5, r2, #31
 801b574:	d405      	bmi.n	801b582 <_vfprintf_r+0xce>
 801b576:	0598      	lsls	r0, r3, #22
 801b578:	d403      	bmi.n	801b582 <_vfprintf_r+0xce>
 801b57a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801b57e:	f002 fc52 	bl	801de26 <__retarget_lock_release_recursive>
 801b582:	4623      	mov	r3, r4
 801b584:	464a      	mov	r2, r9
 801b586:	4651      	mov	r1, sl
 801b588:	4640      	mov	r0, r8
 801b58a:	b053      	add	sp, #332	; 0x14c
 801b58c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b590:	f001 b9ae 	b.w	801c8f0 <__sbprintf>
 801b594:	2500      	movs	r5, #0
 801b596:	2200      	movs	r2, #0
 801b598:	2300      	movs	r3, #0
 801b59a:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 801b59e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801b5a2:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 801b5a6:	ac29      	add	r4, sp, #164	; 0xa4
 801b5a8:	9426      	str	r4, [sp, #152]	; 0x98
 801b5aa:	9509      	str	r5, [sp, #36]	; 0x24
 801b5ac:	950e      	str	r5, [sp, #56]	; 0x38
 801b5ae:	9516      	str	r5, [sp, #88]	; 0x58
 801b5b0:	9518      	str	r5, [sp, #96]	; 0x60
 801b5b2:	9513      	str	r5, [sp, #76]	; 0x4c
 801b5b4:	464b      	mov	r3, r9
 801b5b6:	461d      	mov	r5, r3
 801b5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5bc:	b10a      	cbz	r2, 801b5c2 <_vfprintf_r+0x10e>
 801b5be:	2a25      	cmp	r2, #37	; 0x25
 801b5c0:	d1f9      	bne.n	801b5b6 <_vfprintf_r+0x102>
 801b5c2:	ebb5 0709 	subs.w	r7, r5, r9
 801b5c6:	d00d      	beq.n	801b5e4 <_vfprintf_r+0x130>
 801b5c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5ca:	443b      	add	r3, r7
 801b5cc:	9328      	str	r3, [sp, #160]	; 0xa0
 801b5ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b5d0:	3301      	adds	r3, #1
 801b5d2:	2b07      	cmp	r3, #7
 801b5d4:	e9c4 9700 	strd	r9, r7, [r4]
 801b5d8:	9327      	str	r3, [sp, #156]	; 0x9c
 801b5da:	dc79      	bgt.n	801b6d0 <_vfprintf_r+0x21c>
 801b5dc:	3408      	adds	r4, #8
 801b5de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b5e0:	443b      	add	r3, r7
 801b5e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b5e4:	782b      	ldrb	r3, [r5, #0]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	f001 813e 	beq.w	801c868 <_vfprintf_r+0x13b4>
 801b5ec:	2300      	movs	r3, #0
 801b5ee:	f04f 32ff 	mov.w	r2, #4294967295
 801b5f2:	3501      	adds	r5, #1
 801b5f4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b5f8:	9207      	str	r2, [sp, #28]
 801b5fa:	9314      	str	r3, [sp, #80]	; 0x50
 801b5fc:	469b      	mov	fp, r3
 801b5fe:	270a      	movs	r7, #10
 801b600:	212b      	movs	r1, #43	; 0x2b
 801b602:	462b      	mov	r3, r5
 801b604:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b608:	920a      	str	r2, [sp, #40]	; 0x28
 801b60a:	930f      	str	r3, [sp, #60]	; 0x3c
 801b60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b60e:	3b20      	subs	r3, #32
 801b610:	2b5a      	cmp	r3, #90	; 0x5a
 801b612:	f200 85b3 	bhi.w	801c17c <_vfprintf_r+0xcc8>
 801b616:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b61a:	007e      	.short	0x007e
 801b61c:	05b105b1 	.word	0x05b105b1
 801b620:	05b10086 	.word	0x05b10086
 801b624:	05b105b1 	.word	0x05b105b1
 801b628:	05b10065 	.word	0x05b10065
 801b62c:	008905b1 	.word	0x008905b1
 801b630:	05b10093 	.word	0x05b10093
 801b634:	00960090 	.word	0x00960090
 801b638:	00b205b1 	.word	0x00b205b1
 801b63c:	00b500b5 	.word	0x00b500b5
 801b640:	00b500b5 	.word	0x00b500b5
 801b644:	00b500b5 	.word	0x00b500b5
 801b648:	00b500b5 	.word	0x00b500b5
 801b64c:	05b100b5 	.word	0x05b100b5
 801b650:	05b105b1 	.word	0x05b105b1
 801b654:	05b105b1 	.word	0x05b105b1
 801b658:	05b105b1 	.word	0x05b105b1
 801b65c:	05b10125 	.word	0x05b10125
 801b660:	00f500e2 	.word	0x00f500e2
 801b664:	01250125 	.word	0x01250125
 801b668:	05b10125 	.word	0x05b10125
 801b66c:	05b105b1 	.word	0x05b105b1
 801b670:	00c505b1 	.word	0x00c505b1
 801b674:	05b105b1 	.word	0x05b105b1
 801b678:	05b1048b 	.word	0x05b1048b
 801b67c:	05b105b1 	.word	0x05b105b1
 801b680:	05b104d5 	.word	0x05b104d5
 801b684:	05b104f6 	.word	0x05b104f6
 801b688:	051805b1 	.word	0x051805b1
 801b68c:	05b105b1 	.word	0x05b105b1
 801b690:	05b105b1 	.word	0x05b105b1
 801b694:	05b105b1 	.word	0x05b105b1
 801b698:	05b105b1 	.word	0x05b105b1
 801b69c:	05b10125 	.word	0x05b10125
 801b6a0:	00f700e2 	.word	0x00f700e2
 801b6a4:	01250125 	.word	0x01250125
 801b6a8:	00c80125 	.word	0x00c80125
 801b6ac:	00dc00f7 	.word	0x00dc00f7
 801b6b0:	00d505b1 	.word	0x00d505b1
 801b6b4:	046605b1 	.word	0x046605b1
 801b6b8:	04c3048d 	.word	0x04c3048d
 801b6bc:	05b100dc 	.word	0x05b100dc
 801b6c0:	007c04d5 	.word	0x007c04d5
 801b6c4:	05b104f8 	.word	0x05b104f8
 801b6c8:	053705b1 	.word	0x053705b1
 801b6cc:	007c05b1 	.word	0x007c05b1
 801b6d0:	aa26      	add	r2, sp, #152	; 0x98
 801b6d2:	4651      	mov	r1, sl
 801b6d4:	4640      	mov	r0, r8
 801b6d6:	f003 fc79 	bl	801efcc <__sprint_r>
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	f040 812d 	bne.w	801b93a <_vfprintf_r+0x486>
 801b6e0:	ac29      	add	r4, sp, #164	; 0xa4
 801b6e2:	e77c      	b.n	801b5de <_vfprintf_r+0x12a>
 801b6e4:	4640      	mov	r0, r8
 801b6e6:	f002 fb97 	bl	801de18 <_localeconv_r>
 801b6ea:	6843      	ldr	r3, [r0, #4]
 801b6ec:	9318      	str	r3, [sp, #96]	; 0x60
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7e4 fd46 	bl	8000180 <strlen>
 801b6f4:	9016      	str	r0, [sp, #88]	; 0x58
 801b6f6:	4640      	mov	r0, r8
 801b6f8:	f002 fb8e 	bl	801de18 <_localeconv_r>
 801b6fc:	6883      	ldr	r3, [r0, #8]
 801b6fe:	930e      	str	r3, [sp, #56]	; 0x38
 801b700:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b702:	212b      	movs	r1, #43	; 0x2b
 801b704:	b12b      	cbz	r3, 801b712 <_vfprintf_r+0x25e>
 801b706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b708:	b11b      	cbz	r3, 801b712 <_vfprintf_r+0x25e>
 801b70a:	781b      	ldrb	r3, [r3, #0]
 801b70c:	b10b      	cbz	r3, 801b712 <_vfprintf_r+0x25e>
 801b70e:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801b712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b714:	e775      	b.n	801b602 <_vfprintf_r+0x14e>
 801b716:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d1f9      	bne.n	801b712 <_vfprintf_r+0x25e>
 801b71e:	2320      	movs	r3, #32
 801b720:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b724:	e7f5      	b.n	801b712 <_vfprintf_r+0x25e>
 801b726:	f04b 0b01 	orr.w	fp, fp, #1
 801b72a:	e7f2      	b.n	801b712 <_vfprintf_r+0x25e>
 801b72c:	f856 3b04 	ldr.w	r3, [r6], #4
 801b730:	9314      	str	r3, [sp, #80]	; 0x50
 801b732:	2b00      	cmp	r3, #0
 801b734:	daed      	bge.n	801b712 <_vfprintf_r+0x25e>
 801b736:	425b      	negs	r3, r3
 801b738:	9314      	str	r3, [sp, #80]	; 0x50
 801b73a:	f04b 0b04 	orr.w	fp, fp, #4
 801b73e:	e7e8      	b.n	801b712 <_vfprintf_r+0x25e>
 801b740:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801b744:	e7e5      	b.n	801b712 <_vfprintf_r+0x25e>
 801b746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b74c:	920a      	str	r2, [sp, #40]	; 0x28
 801b74e:	2a2a      	cmp	r2, #42	; 0x2a
 801b750:	d112      	bne.n	801b778 <_vfprintf_r+0x2c4>
 801b752:	f856 0b04 	ldr.w	r0, [r6], #4
 801b756:	930f      	str	r3, [sp, #60]	; 0x3c
 801b758:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 801b75c:	9207      	str	r2, [sp, #28]
 801b75e:	e7d8      	b.n	801b712 <_vfprintf_r+0x25e>
 801b760:	9807      	ldr	r0, [sp, #28]
 801b762:	fb07 2200 	mla	r2, r7, r0, r2
 801b766:	9207      	str	r2, [sp, #28]
 801b768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b76c:	920a      	str	r2, [sp, #40]	; 0x28
 801b76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b770:	3a30      	subs	r2, #48	; 0x30
 801b772:	2a09      	cmp	r2, #9
 801b774:	d9f4      	bls.n	801b760 <_vfprintf_r+0x2ac>
 801b776:	e748      	b.n	801b60a <_vfprintf_r+0x156>
 801b778:	2200      	movs	r2, #0
 801b77a:	9207      	str	r2, [sp, #28]
 801b77c:	e7f7      	b.n	801b76e <_vfprintf_r+0x2ba>
 801b77e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801b782:	e7c6      	b.n	801b712 <_vfprintf_r+0x25e>
 801b784:	2200      	movs	r2, #0
 801b786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b788:	9214      	str	r2, [sp, #80]	; 0x50
 801b78a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b78c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b78e:	3a30      	subs	r2, #48	; 0x30
 801b790:	fb07 2200 	mla	r2, r7, r0, r2
 801b794:	9214      	str	r2, [sp, #80]	; 0x50
 801b796:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b79a:	920a      	str	r2, [sp, #40]	; 0x28
 801b79c:	3a30      	subs	r2, #48	; 0x30
 801b79e:	2a09      	cmp	r2, #9
 801b7a0:	d9f3      	bls.n	801b78a <_vfprintf_r+0x2d6>
 801b7a2:	e732      	b.n	801b60a <_vfprintf_r+0x156>
 801b7a4:	f04b 0b08 	orr.w	fp, fp, #8
 801b7a8:	e7b3      	b.n	801b712 <_vfprintf_r+0x25e>
 801b7aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	2b68      	cmp	r3, #104	; 0x68
 801b7b0:	bf01      	itttt	eq
 801b7b2:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 801b7b4:	3301      	addeq	r3, #1
 801b7b6:	930f      	streq	r3, [sp, #60]	; 0x3c
 801b7b8:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801b7bc:	bf18      	it	ne
 801b7be:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801b7c2:	e7a6      	b.n	801b712 <_vfprintf_r+0x25e>
 801b7c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7c6:	781b      	ldrb	r3, [r3, #0]
 801b7c8:	2b6c      	cmp	r3, #108	; 0x6c
 801b7ca:	d105      	bne.n	801b7d8 <_vfprintf_r+0x324>
 801b7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b7ce:	3301      	adds	r3, #1
 801b7d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801b7d2:	f04b 0b20 	orr.w	fp, fp, #32
 801b7d6:	e79c      	b.n	801b712 <_vfprintf_r+0x25e>
 801b7d8:	f04b 0b10 	orr.w	fp, fp, #16
 801b7dc:	e799      	b.n	801b712 <_vfprintf_r+0x25e>
 801b7de:	4632      	mov	r2, r6
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	f852 3b04 	ldr.w	r3, [r2], #4
 801b7e6:	920b      	str	r2, [sp, #44]	; 0x2c
 801b7e8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801b7ec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 801b7f6:	9008      	str	r0, [sp, #32]
 801b7f8:	9307      	str	r3, [sp, #28]
 801b7fa:	4606      	mov	r6, r0
 801b7fc:	4605      	mov	r5, r0
 801b7fe:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801b802:	e1ba      	b.n	801bb7a <_vfprintf_r+0x6c6>
 801b804:	f04b 0b10 	orr.w	fp, fp, #16
 801b808:	f01b 0f20 	tst.w	fp, #32
 801b80c:	d012      	beq.n	801b834 <_vfprintf_r+0x380>
 801b80e:	3607      	adds	r6, #7
 801b810:	f026 0307 	bic.w	r3, r6, #7
 801b814:	461a      	mov	r2, r3
 801b816:	685d      	ldr	r5, [r3, #4]
 801b818:	f852 6b08 	ldr.w	r6, [r2], #8
 801b81c:	920b      	str	r2, [sp, #44]	; 0x2c
 801b81e:	2d00      	cmp	r5, #0
 801b820:	da06      	bge.n	801b830 <_vfprintf_r+0x37c>
 801b822:	4276      	negs	r6, r6
 801b824:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801b828:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801b82c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b830:	2301      	movs	r3, #1
 801b832:	e390      	b.n	801bf56 <_vfprintf_r+0xaa2>
 801b834:	4633      	mov	r3, r6
 801b836:	f01b 0f10 	tst.w	fp, #16
 801b83a:	f853 5b04 	ldr.w	r5, [r3], #4
 801b83e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b840:	d002      	beq.n	801b848 <_vfprintf_r+0x394>
 801b842:	462e      	mov	r6, r5
 801b844:	17ed      	asrs	r5, r5, #31
 801b846:	e7ea      	b.n	801b81e <_vfprintf_r+0x36a>
 801b848:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801b84c:	d003      	beq.n	801b856 <_vfprintf_r+0x3a2>
 801b84e:	b22e      	sxth	r6, r5
 801b850:	f345 35c0 	sbfx	r5, r5, #15, #1
 801b854:	e7e3      	b.n	801b81e <_vfprintf_r+0x36a>
 801b856:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801b85a:	d0f2      	beq.n	801b842 <_vfprintf_r+0x38e>
 801b85c:	b26e      	sxtb	r6, r5
 801b85e:	f345 15c0 	sbfx	r5, r5, #7, #1
 801b862:	e7dc      	b.n	801b81e <_vfprintf_r+0x36a>
 801b864:	3607      	adds	r6, #7
 801b866:	f026 0307 	bic.w	r3, r6, #7
 801b86a:	4619      	mov	r1, r3
 801b86c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801b870:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801b874:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 801b878:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801b87c:	910b      	str	r1, [sp, #44]	; 0x2c
 801b87e:	4b40      	ldr	r3, [pc, #256]	; (801b980 <_vfprintf_r+0x4cc>)
 801b880:	f04f 32ff 	mov.w	r2, #4294967295
 801b884:	4630      	mov	r0, r6
 801b886:	4629      	mov	r1, r5
 801b888:	f7e5 f928 	bl	8000adc <__aeabi_dcmpun>
 801b88c:	bb10      	cbnz	r0, 801b8d4 <_vfprintf_r+0x420>
 801b88e:	4b3c      	ldr	r3, [pc, #240]	; (801b980 <_vfprintf_r+0x4cc>)
 801b890:	f04f 32ff 	mov.w	r2, #4294967295
 801b894:	4630      	mov	r0, r6
 801b896:	4629      	mov	r1, r5
 801b898:	f7e5 f902 	bl	8000aa0 <__aeabi_dcmple>
 801b89c:	b9d0      	cbnz	r0, 801b8d4 <_vfprintf_r+0x420>
 801b89e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	f7e5 f8f1 	bl	8000a8c <__aeabi_dcmplt>
 801b8aa:	b110      	cbz	r0, 801b8b2 <_vfprintf_r+0x3fe>
 801b8ac:	232d      	movs	r3, #45	; 0x2d
 801b8ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b8b2:	4a34      	ldr	r2, [pc, #208]	; (801b984 <_vfprintf_r+0x4d0>)
 801b8b4:	4834      	ldr	r0, [pc, #208]	; (801b988 <_vfprintf_r+0x4d4>)
 801b8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8b8:	2100      	movs	r1, #0
 801b8ba:	2b47      	cmp	r3, #71	; 0x47
 801b8bc:	bfd4      	ite	le
 801b8be:	4691      	movle	r9, r2
 801b8c0:	4681      	movgt	r9, r0
 801b8c2:	2303      	movs	r3, #3
 801b8c4:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801b8c8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801b8cc:	2600      	movs	r6, #0
 801b8ce:	4633      	mov	r3, r6
 801b8d0:	f001 b804 	b.w	801c8dc <_vfprintf_r+0x1428>
 801b8d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b8d8:	4610      	mov	r0, r2
 801b8da:	4619      	mov	r1, r3
 801b8dc:	f7e5 f8fe 	bl	8000adc <__aeabi_dcmpun>
 801b8e0:	b140      	cbz	r0, 801b8f4 <_vfprintf_r+0x440>
 801b8e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b8e4:	4a29      	ldr	r2, [pc, #164]	; (801b98c <_vfprintf_r+0x4d8>)
 801b8e6:	482a      	ldr	r0, [pc, #168]	; (801b990 <_vfprintf_r+0x4dc>)
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	bfbc      	itt	lt
 801b8ec:	232d      	movlt	r3, #45	; 0x2d
 801b8ee:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801b8f2:	e7e0      	b.n	801b8b6 <_vfprintf_r+0x402>
 801b8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8f6:	f023 0320 	bic.w	r3, r3, #32
 801b8fa:	2b41      	cmp	r3, #65	; 0x41
 801b8fc:	930c      	str	r3, [sp, #48]	; 0x30
 801b8fe:	d12e      	bne.n	801b95e <_vfprintf_r+0x4aa>
 801b900:	2330      	movs	r3, #48	; 0x30
 801b902:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801b906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b908:	2b61      	cmp	r3, #97	; 0x61
 801b90a:	bf0c      	ite	eq
 801b90c:	2378      	moveq	r3, #120	; 0x78
 801b90e:	2358      	movne	r3, #88	; 0x58
 801b910:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801b914:	9b07      	ldr	r3, [sp, #28]
 801b916:	2b63      	cmp	r3, #99	; 0x63
 801b918:	f04b 0b02 	orr.w	fp, fp, #2
 801b91c:	dd3a      	ble.n	801b994 <_vfprintf_r+0x4e0>
 801b91e:	1c59      	adds	r1, r3, #1
 801b920:	4640      	mov	r0, r8
 801b922:	f002 faed 	bl	801df00 <_malloc_r>
 801b926:	4681      	mov	r9, r0
 801b928:	2800      	cmp	r0, #0
 801b92a:	f040 81fd 	bne.w	801bd28 <_vfprintf_r+0x874>
 801b92e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b936:	f8aa 300c 	strh.w	r3, [sl, #12]
 801b93a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801b93e:	07d9      	lsls	r1, r3, #31
 801b940:	d407      	bmi.n	801b952 <_vfprintf_r+0x49e>
 801b942:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b946:	059a      	lsls	r2, r3, #22
 801b948:	d403      	bmi.n	801b952 <_vfprintf_r+0x49e>
 801b94a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801b94e:	f002 fa6a 	bl	801de26 <__retarget_lock_release_recursive>
 801b952:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b956:	065b      	lsls	r3, r3, #25
 801b958:	f57f adf2 	bpl.w	801b540 <_vfprintf_r+0x8c>
 801b95c:	e5ed      	b.n	801b53a <_vfprintf_r+0x86>
 801b95e:	9b07      	ldr	r3, [sp, #28]
 801b960:	3301      	adds	r3, #1
 801b962:	f000 81e3 	beq.w	801bd2c <_vfprintf_r+0x878>
 801b966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b968:	2b47      	cmp	r3, #71	; 0x47
 801b96a:	f040 81e2 	bne.w	801bd32 <_vfprintf_r+0x87e>
 801b96e:	9b07      	ldr	r3, [sp, #28]
 801b970:	2b00      	cmp	r3, #0
 801b972:	f040 81de 	bne.w	801bd32 <_vfprintf_r+0x87e>
 801b976:	9308      	str	r3, [sp, #32]
 801b978:	2301      	movs	r3, #1
 801b97a:	9307      	str	r3, [sp, #28]
 801b97c:	e00d      	b.n	801b99a <_vfprintf_r+0x4e6>
 801b97e:	bf00      	nop
 801b980:	7fefffff 	.word	0x7fefffff
 801b984:	080208d8 	.word	0x080208d8
 801b988:	080208dc 	.word	0x080208dc
 801b98c:	080208e0 	.word	0x080208e0
 801b990:	080208e4 	.word	0x080208e4
 801b994:	9008      	str	r0, [sp, #32]
 801b996:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801b99a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801b99e:	9315      	str	r3, [sp, #84]	; 0x54
 801b9a0:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801b9a4:	1e1d      	subs	r5, r3, #0
 801b9a6:	bfb6      	itet	lt
 801b9a8:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 801b9ac:	2300      	movge	r3, #0
 801b9ae:	232d      	movlt	r3, #45	; 0x2d
 801b9b0:	931c      	str	r3, [sp, #112]	; 0x70
 801b9b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9b4:	2b41      	cmp	r3, #65	; 0x41
 801b9b6:	f040 81d4 	bne.w	801bd62 <_vfprintf_r+0x8ae>
 801b9ba:	aa20      	add	r2, sp, #128	; 0x80
 801b9bc:	4638      	mov	r0, r7
 801b9be:	4629      	mov	r1, r5
 801b9c0:	f003 f9e2 	bl	801ed88 <frexp>
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b9ca:	f7e4 fded 	bl	80005a8 <__aeabi_dmul>
 801b9ce:	2200      	movs	r2, #0
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	4606      	mov	r6, r0
 801b9d4:	460f      	mov	r7, r1
 801b9d6:	f7e5 f84f 	bl	8000a78 <__aeabi_dcmpeq>
 801b9da:	b108      	cbz	r0, 801b9e0 <_vfprintf_r+0x52c>
 801b9dc:	2301      	movs	r3, #1
 801b9de:	9320      	str	r3, [sp, #128]	; 0x80
 801b9e0:	4ba6      	ldr	r3, [pc, #664]	; (801bc7c <_vfprintf_r+0x7c8>)
 801b9e2:	4aa7      	ldr	r2, [pc, #668]	; (801bc80 <_vfprintf_r+0x7cc>)
 801b9e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b9e6:	2961      	cmp	r1, #97	; 0x61
 801b9e8:	bf18      	it	ne
 801b9ea:	461a      	movne	r2, r3
 801b9ec:	9b07      	ldr	r3, [sp, #28]
 801b9ee:	921b      	str	r2, [sp, #108]	; 0x6c
 801b9f0:	3b01      	subs	r3, #1
 801b9f2:	9309      	str	r3, [sp, #36]	; 0x24
 801b9f4:	464d      	mov	r5, r9
 801b9f6:	4ba3      	ldr	r3, [pc, #652]	; (801bc84 <_vfprintf_r+0x7d0>)
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	4630      	mov	r0, r6
 801b9fc:	4639      	mov	r1, r7
 801b9fe:	f7e4 fdd3 	bl	80005a8 <__aeabi_dmul>
 801ba02:	460f      	mov	r7, r1
 801ba04:	4606      	mov	r6, r0
 801ba06:	f7e5 f87f 	bl	8000b08 <__aeabi_d2iz>
 801ba0a:	901d      	str	r0, [sp, #116]	; 0x74
 801ba0c:	f7e4 fd62 	bl	80004d4 <__aeabi_i2d>
 801ba10:	4602      	mov	r2, r0
 801ba12:	460b      	mov	r3, r1
 801ba14:	4630      	mov	r0, r6
 801ba16:	4639      	mov	r1, r7
 801ba18:	f7e4 fc0e 	bl	8000238 <__aeabi_dsub>
 801ba1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ba1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ba20:	5c9b      	ldrb	r3, [r3, r2]
 801ba22:	f805 3b01 	strb.w	r3, [r5], #1
 801ba26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba28:	930d      	str	r3, [sp, #52]	; 0x34
 801ba2a:	1c5a      	adds	r2, r3, #1
 801ba2c:	4606      	mov	r6, r0
 801ba2e:	460f      	mov	r7, r1
 801ba30:	d007      	beq.n	801ba42 <_vfprintf_r+0x58e>
 801ba32:	3b01      	subs	r3, #1
 801ba34:	9309      	str	r3, [sp, #36]	; 0x24
 801ba36:	2200      	movs	r2, #0
 801ba38:	2300      	movs	r3, #0
 801ba3a:	f7e5 f81d 	bl	8000a78 <__aeabi_dcmpeq>
 801ba3e:	2800      	cmp	r0, #0
 801ba40:	d0d9      	beq.n	801b9f6 <_vfprintf_r+0x542>
 801ba42:	4b91      	ldr	r3, [pc, #580]	; (801bc88 <_vfprintf_r+0x7d4>)
 801ba44:	2200      	movs	r2, #0
 801ba46:	4630      	mov	r0, r6
 801ba48:	4639      	mov	r1, r7
 801ba4a:	f7e5 f83d 	bl	8000ac8 <__aeabi_dcmpgt>
 801ba4e:	b960      	cbnz	r0, 801ba6a <_vfprintf_r+0x5b6>
 801ba50:	4b8d      	ldr	r3, [pc, #564]	; (801bc88 <_vfprintf_r+0x7d4>)
 801ba52:	2200      	movs	r2, #0
 801ba54:	4630      	mov	r0, r6
 801ba56:	4639      	mov	r1, r7
 801ba58:	f7e5 f80e 	bl	8000a78 <__aeabi_dcmpeq>
 801ba5c:	2800      	cmp	r0, #0
 801ba5e:	f000 817b 	beq.w	801bd58 <_vfprintf_r+0x8a4>
 801ba62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba64:	07da      	lsls	r2, r3, #31
 801ba66:	f140 8177 	bpl.w	801bd58 <_vfprintf_r+0x8a4>
 801ba6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ba6c:	9524      	str	r5, [sp, #144]	; 0x90
 801ba6e:	7bd9      	ldrb	r1, [r3, #15]
 801ba70:	2030      	movs	r0, #48	; 0x30
 801ba72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ba74:	1e53      	subs	r3, r2, #1
 801ba76:	9324      	str	r3, [sp, #144]	; 0x90
 801ba78:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801ba7c:	428b      	cmp	r3, r1
 801ba7e:	f000 815a 	beq.w	801bd36 <_vfprintf_r+0x882>
 801ba82:	2b39      	cmp	r3, #57	; 0x39
 801ba84:	bf0b      	itete	eq
 801ba86:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 801ba88:	3301      	addne	r3, #1
 801ba8a:	7a9b      	ldrbeq	r3, [r3, #10]
 801ba8c:	b2db      	uxtbne	r3, r3
 801ba8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ba92:	eba5 0309 	sub.w	r3, r5, r9
 801ba96:	9309      	str	r3, [sp, #36]	; 0x24
 801ba98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba9a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ba9c:	2b47      	cmp	r3, #71	; 0x47
 801ba9e:	f040 81ad 	bne.w	801bdfc <_vfprintf_r+0x948>
 801baa2:	1ceb      	adds	r3, r5, #3
 801baa4:	db03      	blt.n	801baae <_vfprintf_r+0x5fa>
 801baa6:	9b07      	ldr	r3, [sp, #28]
 801baa8:	42ab      	cmp	r3, r5
 801baaa:	f280 81d2 	bge.w	801be52 <_vfprintf_r+0x99e>
 801baae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bab0:	3b02      	subs	r3, #2
 801bab2:	930a      	str	r3, [sp, #40]	; 0x28
 801bab4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bab6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 801baba:	f021 0120 	bic.w	r1, r1, #32
 801babe:	2941      	cmp	r1, #65	; 0x41
 801bac0:	bf08      	it	eq
 801bac2:	320f      	addeq	r2, #15
 801bac4:	f105 33ff 	add.w	r3, r5, #4294967295
 801bac8:	bf06      	itte	eq
 801baca:	b2d2      	uxtbeq	r2, r2
 801bacc:	2101      	moveq	r1, #1
 801bace:	2100      	movne	r1, #0
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	9320      	str	r3, [sp, #128]	; 0x80
 801bad4:	bfb8      	it	lt
 801bad6:	f1c5 0301 	rsblt	r3, r5, #1
 801bada:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801bade:	bfb4      	ite	lt
 801bae0:	222d      	movlt	r2, #45	; 0x2d
 801bae2:	222b      	movge	r2, #43	; 0x2b
 801bae4:	2b09      	cmp	r3, #9
 801bae6:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801baea:	f340 81a0 	ble.w	801be2e <_vfprintf_r+0x97a>
 801baee:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801baf2:	260a      	movs	r6, #10
 801baf4:	4611      	mov	r1, r2
 801baf6:	fb93 f5f6 	sdiv	r5, r3, r6
 801bafa:	fb06 3015 	mls	r0, r6, r5, r3
 801bafe:	3030      	adds	r0, #48	; 0x30
 801bb00:	f801 0c01 	strb.w	r0, [r1, #-1]
 801bb04:	4618      	mov	r0, r3
 801bb06:	2863      	cmp	r0, #99	; 0x63
 801bb08:	f102 32ff 	add.w	r2, r2, #4294967295
 801bb0c:	462b      	mov	r3, r5
 801bb0e:	dcf1      	bgt.n	801baf4 <_vfprintf_r+0x640>
 801bb10:	3330      	adds	r3, #48	; 0x30
 801bb12:	1e88      	subs	r0, r1, #2
 801bb14:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bb18:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 801bb1c:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801bb20:	4603      	mov	r3, r0
 801bb22:	42ab      	cmp	r3, r5
 801bb24:	f0c0 817e 	bcc.w	801be24 <_vfprintf_r+0x970>
 801bb28:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 801bb2c:	1a52      	subs	r2, r2, r1
 801bb2e:	42a8      	cmp	r0, r5
 801bb30:	bf88      	it	hi
 801bb32:	2200      	movhi	r2, #0
 801bb34:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801bb38:	441a      	add	r2, r3
 801bb3a:	ab22      	add	r3, sp, #136	; 0x88
 801bb3c:	1ad3      	subs	r3, r2, r3
 801bb3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb40:	9319      	str	r3, [sp, #100]	; 0x64
 801bb42:	2a01      	cmp	r2, #1
 801bb44:	4413      	add	r3, r2
 801bb46:	9307      	str	r3, [sp, #28]
 801bb48:	dc02      	bgt.n	801bb50 <_vfprintf_r+0x69c>
 801bb4a:	f01b 0f01 	tst.w	fp, #1
 801bb4e:	d003      	beq.n	801bb58 <_vfprintf_r+0x6a4>
 801bb50:	9b07      	ldr	r3, [sp, #28]
 801bb52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb54:	4413      	add	r3, r2
 801bb56:	9307      	str	r3, [sp, #28]
 801bb58:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801bb5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bb60:	9315      	str	r3, [sp, #84]	; 0x54
 801bb62:	2300      	movs	r3, #0
 801bb64:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801bb68:	461d      	mov	r5, r3
 801bb6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bb6c:	b113      	cbz	r3, 801bb74 <_vfprintf_r+0x6c0>
 801bb6e:	232d      	movs	r3, #45	; 0x2d
 801bb70:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801bb74:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 801bb78:	2600      	movs	r6, #0
 801bb7a:	9b07      	ldr	r3, [sp, #28]
 801bb7c:	42b3      	cmp	r3, r6
 801bb7e:	bfb8      	it	lt
 801bb80:	4633      	movlt	r3, r6
 801bb82:	9315      	str	r3, [sp, #84]	; 0x54
 801bb84:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801bb88:	b113      	cbz	r3, 801bb90 <_vfprintf_r+0x6dc>
 801bb8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bb8c:	3301      	adds	r3, #1
 801bb8e:	9315      	str	r3, [sp, #84]	; 0x54
 801bb90:	f01b 0302 	ands.w	r3, fp, #2
 801bb94:	931b      	str	r3, [sp, #108]	; 0x6c
 801bb96:	bf1e      	ittt	ne
 801bb98:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 801bb9a:	3302      	addne	r3, #2
 801bb9c:	9315      	strne	r3, [sp, #84]	; 0x54
 801bb9e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801bba2:	931c      	str	r3, [sp, #112]	; 0x70
 801bba4:	d11f      	bne.n	801bbe6 <_vfprintf_r+0x732>
 801bba6:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801bbaa:	1a9f      	subs	r7, r3, r2
 801bbac:	2f00      	cmp	r7, #0
 801bbae:	dd1a      	ble.n	801bbe6 <_vfprintf_r+0x732>
 801bbb0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bbb4:	4835      	ldr	r0, [pc, #212]	; (801bc8c <_vfprintf_r+0x7d8>)
 801bbb6:	6020      	str	r0, [r4, #0]
 801bbb8:	2f10      	cmp	r7, #16
 801bbba:	f103 0301 	add.w	r3, r3, #1
 801bbbe:	f104 0108 	add.w	r1, r4, #8
 801bbc2:	f300 82ea 	bgt.w	801c19a <_vfprintf_r+0xce6>
 801bbc6:	443a      	add	r2, r7
 801bbc8:	2b07      	cmp	r3, #7
 801bbca:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bbce:	6067      	str	r7, [r4, #4]
 801bbd0:	f340 82f6 	ble.w	801c1c0 <_vfprintf_r+0xd0c>
 801bbd4:	aa26      	add	r2, sp, #152	; 0x98
 801bbd6:	4651      	mov	r1, sl
 801bbd8:	4640      	mov	r0, r8
 801bbda:	f003 f9f7 	bl	801efcc <__sprint_r>
 801bbde:	2800      	cmp	r0, #0
 801bbe0:	f040 8620 	bne.w	801c824 <_vfprintf_r+0x1370>
 801bbe4:	ac29      	add	r4, sp, #164	; 0xa4
 801bbe6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801bbea:	b173      	cbz	r3, 801bc0a <_vfprintf_r+0x756>
 801bbec:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801bbf0:	6023      	str	r3, [r4, #0]
 801bbf2:	2301      	movs	r3, #1
 801bbf4:	6063      	str	r3, [r4, #4]
 801bbf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbf8:	3301      	adds	r3, #1
 801bbfa:	9328      	str	r3, [sp, #160]	; 0xa0
 801bbfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bbfe:	3301      	adds	r3, #1
 801bc00:	2b07      	cmp	r3, #7
 801bc02:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc04:	f300 82de 	bgt.w	801c1c4 <_vfprintf_r+0xd10>
 801bc08:	3408      	adds	r4, #8
 801bc0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801bc0c:	b16b      	cbz	r3, 801bc2a <_vfprintf_r+0x776>
 801bc0e:	ab1f      	add	r3, sp, #124	; 0x7c
 801bc10:	6023      	str	r3, [r4, #0]
 801bc12:	2302      	movs	r3, #2
 801bc14:	6063      	str	r3, [r4, #4]
 801bc16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc18:	3302      	adds	r3, #2
 801bc1a:	9328      	str	r3, [sp, #160]	; 0xa0
 801bc1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc1e:	3301      	adds	r3, #1
 801bc20:	2b07      	cmp	r3, #7
 801bc22:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc24:	f300 82d8 	bgt.w	801c1d8 <_vfprintf_r+0xd24>
 801bc28:	3408      	adds	r4, #8
 801bc2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bc2c:	2b80      	cmp	r3, #128	; 0x80
 801bc2e:	d11f      	bne.n	801bc70 <_vfprintf_r+0x7bc>
 801bc30:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801bc34:	1a9f      	subs	r7, r3, r2
 801bc36:	2f00      	cmp	r7, #0
 801bc38:	dd1a      	ble.n	801bc70 <_vfprintf_r+0x7bc>
 801bc3a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bc3e:	4814      	ldr	r0, [pc, #80]	; (801bc90 <_vfprintf_r+0x7dc>)
 801bc40:	6020      	str	r0, [r4, #0]
 801bc42:	2f10      	cmp	r7, #16
 801bc44:	f103 0301 	add.w	r3, r3, #1
 801bc48:	f104 0108 	add.w	r1, r4, #8
 801bc4c:	f300 82ce 	bgt.w	801c1ec <_vfprintf_r+0xd38>
 801bc50:	6067      	str	r7, [r4, #4]
 801bc52:	2b07      	cmp	r3, #7
 801bc54:	4417      	add	r7, r2
 801bc56:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801bc5a:	f340 82da 	ble.w	801c212 <_vfprintf_r+0xd5e>
 801bc5e:	aa26      	add	r2, sp, #152	; 0x98
 801bc60:	4651      	mov	r1, sl
 801bc62:	4640      	mov	r0, r8
 801bc64:	f003 f9b2 	bl	801efcc <__sprint_r>
 801bc68:	2800      	cmp	r0, #0
 801bc6a:	f040 85db 	bne.w	801c824 <_vfprintf_r+0x1370>
 801bc6e:	ac29      	add	r4, sp, #164	; 0xa4
 801bc70:	9b07      	ldr	r3, [sp, #28]
 801bc72:	1af6      	subs	r6, r6, r3
 801bc74:	2e00      	cmp	r6, #0
 801bc76:	dd27      	ble.n	801bcc8 <_vfprintf_r+0x814>
 801bc78:	4f05      	ldr	r7, [pc, #20]	; (801bc90 <_vfprintf_r+0x7dc>)
 801bc7a:	e00b      	b.n	801bc94 <_vfprintf_r+0x7e0>
 801bc7c:	080208f9 	.word	0x080208f9
 801bc80:	080208e8 	.word	0x080208e8
 801bc84:	40300000 	.word	0x40300000
 801bc88:	3fe00000 	.word	0x3fe00000
 801bc8c:	0802092c 	.word	0x0802092c
 801bc90:	0802093c 	.word	0x0802093c
 801bc94:	6027      	str	r7, [r4, #0]
 801bc96:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bc9a:	2e10      	cmp	r6, #16
 801bc9c:	f103 0301 	add.w	r3, r3, #1
 801bca0:	f104 0108 	add.w	r1, r4, #8
 801bca4:	f300 82b7 	bgt.w	801c216 <_vfprintf_r+0xd62>
 801bca8:	6066      	str	r6, [r4, #4]
 801bcaa:	2b07      	cmp	r3, #7
 801bcac:	4416      	add	r6, r2
 801bcae:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801bcb2:	f340 82c3 	ble.w	801c23c <_vfprintf_r+0xd88>
 801bcb6:	aa26      	add	r2, sp, #152	; 0x98
 801bcb8:	4651      	mov	r1, sl
 801bcba:	4640      	mov	r0, r8
 801bcbc:	f003 f986 	bl	801efcc <__sprint_r>
 801bcc0:	2800      	cmp	r0, #0
 801bcc2:	f040 85af 	bne.w	801c824 <_vfprintf_r+0x1370>
 801bcc6:	ac29      	add	r4, sp, #164	; 0xa4
 801bcc8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bccc:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801bcce:	f040 82bb 	bne.w	801c248 <_vfprintf_r+0xd94>
 801bcd2:	9b07      	ldr	r3, [sp, #28]
 801bcd4:	f8c4 9000 	str.w	r9, [r4]
 801bcd8:	441e      	add	r6, r3
 801bcda:	6063      	str	r3, [r4, #4]
 801bcdc:	9628      	str	r6, [sp, #160]	; 0xa0
 801bcde:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bce0:	3301      	adds	r3, #1
 801bce2:	2b07      	cmp	r3, #7
 801bce4:	9327      	str	r3, [sp, #156]	; 0x9c
 801bce6:	f300 82f4 	bgt.w	801c2d2 <_vfprintf_r+0xe1e>
 801bcea:	3408      	adds	r4, #8
 801bcec:	f01b 0f04 	tst.w	fp, #4
 801bcf0:	f040 857a 	bne.w	801c7e8 <_vfprintf_r+0x1334>
 801bcf4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801bcf8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bcfa:	428a      	cmp	r2, r1
 801bcfc:	bfac      	ite	ge
 801bcfe:	189b      	addge	r3, r3, r2
 801bd00:	185b      	addlt	r3, r3, r1
 801bd02:	9313      	str	r3, [sp, #76]	; 0x4c
 801bd04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bd06:	b13b      	cbz	r3, 801bd18 <_vfprintf_r+0x864>
 801bd08:	aa26      	add	r2, sp, #152	; 0x98
 801bd0a:	4651      	mov	r1, sl
 801bd0c:	4640      	mov	r0, r8
 801bd0e:	f003 f95d 	bl	801efcc <__sprint_r>
 801bd12:	2800      	cmp	r0, #0
 801bd14:	f040 8586 	bne.w	801c824 <_vfprintf_r+0x1370>
 801bd18:	2300      	movs	r3, #0
 801bd1a:	9327      	str	r3, [sp, #156]	; 0x9c
 801bd1c:	9b08      	ldr	r3, [sp, #32]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f040 859c 	bne.w	801c85c <_vfprintf_r+0x13a8>
 801bd24:	ac29      	add	r4, sp, #164	; 0xa4
 801bd26:	e0e9      	b.n	801befc <_vfprintf_r+0xa48>
 801bd28:	9008      	str	r0, [sp, #32]
 801bd2a:	e636      	b.n	801b99a <_vfprintf_r+0x4e6>
 801bd2c:	9008      	str	r0, [sp, #32]
 801bd2e:	2306      	movs	r3, #6
 801bd30:	e623      	b.n	801b97a <_vfprintf_r+0x4c6>
 801bd32:	9008      	str	r0, [sp, #32]
 801bd34:	e631      	b.n	801b99a <_vfprintf_r+0x4e6>
 801bd36:	f802 0c01 	strb.w	r0, [r2, #-1]
 801bd3a:	e69a      	b.n	801ba72 <_vfprintf_r+0x5be>
 801bd3c:	f803 0b01 	strb.w	r0, [r3], #1
 801bd40:	1aca      	subs	r2, r1, r3
 801bd42:	2a00      	cmp	r2, #0
 801bd44:	dafa      	bge.n	801bd3c <_vfprintf_r+0x888>
 801bd46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd4a:	3201      	adds	r2, #1
 801bd4c:	f103 0301 	add.w	r3, r3, #1
 801bd50:	bfb8      	it	lt
 801bd52:	2300      	movlt	r3, #0
 801bd54:	441d      	add	r5, r3
 801bd56:	e69c      	b.n	801ba92 <_vfprintf_r+0x5de>
 801bd58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd5a:	462b      	mov	r3, r5
 801bd5c:	18a9      	adds	r1, r5, r2
 801bd5e:	2030      	movs	r0, #48	; 0x30
 801bd60:	e7ee      	b.n	801bd40 <_vfprintf_r+0x88c>
 801bd62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd64:	2b46      	cmp	r3, #70	; 0x46
 801bd66:	d005      	beq.n	801bd74 <_vfprintf_r+0x8c0>
 801bd68:	2b45      	cmp	r3, #69	; 0x45
 801bd6a:	d11b      	bne.n	801bda4 <_vfprintf_r+0x8f0>
 801bd6c:	9b07      	ldr	r3, [sp, #28]
 801bd6e:	1c5e      	adds	r6, r3, #1
 801bd70:	2302      	movs	r3, #2
 801bd72:	e001      	b.n	801bd78 <_vfprintf_r+0x8c4>
 801bd74:	9e07      	ldr	r6, [sp, #28]
 801bd76:	2303      	movs	r3, #3
 801bd78:	aa24      	add	r2, sp, #144	; 0x90
 801bd7a:	9204      	str	r2, [sp, #16]
 801bd7c:	aa21      	add	r2, sp, #132	; 0x84
 801bd7e:	9203      	str	r2, [sp, #12]
 801bd80:	aa20      	add	r2, sp, #128	; 0x80
 801bd82:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801bd86:	9300      	str	r3, [sp, #0]
 801bd88:	463a      	mov	r2, r7
 801bd8a:	462b      	mov	r3, r5
 801bd8c:	4640      	mov	r0, r8
 801bd8e:	f000 fedf 	bl	801cb50 <_dtoa_r>
 801bd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd94:	2b47      	cmp	r3, #71	; 0x47
 801bd96:	4681      	mov	r9, r0
 801bd98:	d106      	bne.n	801bda8 <_vfprintf_r+0x8f4>
 801bd9a:	f01b 0f01 	tst.w	fp, #1
 801bd9e:	d103      	bne.n	801bda8 <_vfprintf_r+0x8f4>
 801bda0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801bda2:	e676      	b.n	801ba92 <_vfprintf_r+0x5de>
 801bda4:	9e07      	ldr	r6, [sp, #28]
 801bda6:	e7e3      	b.n	801bd70 <_vfprintf_r+0x8bc>
 801bda8:	eb09 0306 	add.w	r3, r9, r6
 801bdac:	9309      	str	r3, [sp, #36]	; 0x24
 801bdae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdb0:	2b46      	cmp	r3, #70	; 0x46
 801bdb2:	d111      	bne.n	801bdd8 <_vfprintf_r+0x924>
 801bdb4:	f899 3000 	ldrb.w	r3, [r9]
 801bdb8:	2b30      	cmp	r3, #48	; 0x30
 801bdba:	d109      	bne.n	801bdd0 <_vfprintf_r+0x91c>
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	4638      	mov	r0, r7
 801bdc2:	4629      	mov	r1, r5
 801bdc4:	f7e4 fe58 	bl	8000a78 <__aeabi_dcmpeq>
 801bdc8:	b910      	cbnz	r0, 801bdd0 <_vfprintf_r+0x91c>
 801bdca:	f1c6 0601 	rsb	r6, r6, #1
 801bdce:	9620      	str	r6, [sp, #128]	; 0x80
 801bdd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bdd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bdd4:	441a      	add	r2, r3
 801bdd6:	9209      	str	r2, [sp, #36]	; 0x24
 801bdd8:	2200      	movs	r2, #0
 801bdda:	2300      	movs	r3, #0
 801bddc:	4638      	mov	r0, r7
 801bdde:	4629      	mov	r1, r5
 801bde0:	f7e4 fe4a 	bl	8000a78 <__aeabi_dcmpeq>
 801bde4:	b108      	cbz	r0, 801bdea <_vfprintf_r+0x936>
 801bde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde8:	9324      	str	r3, [sp, #144]	; 0x90
 801bdea:	2230      	movs	r2, #48	; 0x30
 801bdec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bdee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdf0:	4299      	cmp	r1, r3
 801bdf2:	d9d5      	bls.n	801bda0 <_vfprintf_r+0x8ec>
 801bdf4:	1c59      	adds	r1, r3, #1
 801bdf6:	9124      	str	r1, [sp, #144]	; 0x90
 801bdf8:	701a      	strb	r2, [r3, #0]
 801bdfa:	e7f7      	b.n	801bdec <_vfprintf_r+0x938>
 801bdfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdfe:	2b46      	cmp	r3, #70	; 0x46
 801be00:	f47f ae58 	bne.w	801bab4 <_vfprintf_r+0x600>
 801be04:	9a07      	ldr	r2, [sp, #28]
 801be06:	f00b 0301 	and.w	r3, fp, #1
 801be0a:	2d00      	cmp	r5, #0
 801be0c:	ea43 0302 	orr.w	r3, r3, r2
 801be10:	dd1a      	ble.n	801be48 <_vfprintf_r+0x994>
 801be12:	2b00      	cmp	r3, #0
 801be14:	d034      	beq.n	801be80 <_vfprintf_r+0x9cc>
 801be16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801be18:	18eb      	adds	r3, r5, r3
 801be1a:	441a      	add	r2, r3
 801be1c:	9207      	str	r2, [sp, #28]
 801be1e:	2366      	movs	r3, #102	; 0x66
 801be20:	930a      	str	r3, [sp, #40]	; 0x28
 801be22:	e033      	b.n	801be8c <_vfprintf_r+0x9d8>
 801be24:	f813 6b01 	ldrb.w	r6, [r3], #1
 801be28:	f802 6b01 	strb.w	r6, [r2], #1
 801be2c:	e679      	b.n	801bb22 <_vfprintf_r+0x66e>
 801be2e:	b941      	cbnz	r1, 801be42 <_vfprintf_r+0x98e>
 801be30:	2230      	movs	r2, #48	; 0x30
 801be32:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801be36:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801be3a:	3330      	adds	r3, #48	; 0x30
 801be3c:	f802 3b01 	strb.w	r3, [r2], #1
 801be40:	e67b      	b.n	801bb3a <_vfprintf_r+0x686>
 801be42:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801be46:	e7f8      	b.n	801be3a <_vfprintf_r+0x986>
 801be48:	b1e3      	cbz	r3, 801be84 <_vfprintf_r+0x9d0>
 801be4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801be4c:	9a07      	ldr	r2, [sp, #28]
 801be4e:	3301      	adds	r3, #1
 801be50:	e7e3      	b.n	801be1a <_vfprintf_r+0x966>
 801be52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be54:	42ab      	cmp	r3, r5
 801be56:	dc07      	bgt.n	801be68 <_vfprintf_r+0x9b4>
 801be58:	f01b 0f01 	tst.w	fp, #1
 801be5c:	d02d      	beq.n	801beba <_vfprintf_r+0xa06>
 801be5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801be60:	18eb      	adds	r3, r5, r3
 801be62:	9307      	str	r3, [sp, #28]
 801be64:	2367      	movs	r3, #103	; 0x67
 801be66:	e7db      	b.n	801be20 <_vfprintf_r+0x96c>
 801be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be6c:	2d00      	cmp	r5, #0
 801be6e:	4413      	add	r3, r2
 801be70:	9307      	str	r3, [sp, #28]
 801be72:	dcf7      	bgt.n	801be64 <_vfprintf_r+0x9b0>
 801be74:	9a07      	ldr	r2, [sp, #28]
 801be76:	f1c5 0301 	rsb	r3, r5, #1
 801be7a:	441a      	add	r2, r3
 801be7c:	9207      	str	r2, [sp, #28]
 801be7e:	e7f1      	b.n	801be64 <_vfprintf_r+0x9b0>
 801be80:	9507      	str	r5, [sp, #28]
 801be82:	e7cc      	b.n	801be1e <_vfprintf_r+0x96a>
 801be84:	2366      	movs	r3, #102	; 0x66
 801be86:	930a      	str	r3, [sp, #40]	; 0x28
 801be88:	2301      	movs	r3, #1
 801be8a:	9307      	str	r3, [sp, #28]
 801be8c:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801be90:	930d      	str	r3, [sp, #52]	; 0x34
 801be92:	d025      	beq.n	801bee0 <_vfprintf_r+0xa2c>
 801be94:	2300      	movs	r3, #0
 801be96:	2d00      	cmp	r5, #0
 801be98:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801be9c:	f77f ae65 	ble.w	801bb6a <_vfprintf_r+0x6b6>
 801bea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bea2:	781b      	ldrb	r3, [r3, #0]
 801bea4:	2bff      	cmp	r3, #255	; 0xff
 801bea6:	d10a      	bne.n	801bebe <_vfprintf_r+0xa0a>
 801bea8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801beac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801beae:	4413      	add	r3, r2
 801beb0:	9a07      	ldr	r2, [sp, #28]
 801beb2:	fb01 2303 	mla	r3, r1, r3, r2
 801beb6:	9307      	str	r3, [sp, #28]
 801beb8:	e657      	b.n	801bb6a <_vfprintf_r+0x6b6>
 801beba:	9507      	str	r5, [sp, #28]
 801bebc:	e7d2      	b.n	801be64 <_vfprintf_r+0x9b0>
 801bebe:	42ab      	cmp	r3, r5
 801bec0:	daf2      	bge.n	801bea8 <_vfprintf_r+0x9f4>
 801bec2:	1aed      	subs	r5, r5, r3
 801bec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bec6:	785b      	ldrb	r3, [r3, #1]
 801bec8:	b133      	cbz	r3, 801bed8 <_vfprintf_r+0xa24>
 801beca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801becc:	3301      	adds	r3, #1
 801bece:	930d      	str	r3, [sp, #52]	; 0x34
 801bed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bed2:	3301      	adds	r3, #1
 801bed4:	930e      	str	r3, [sp, #56]	; 0x38
 801bed6:	e7e3      	b.n	801bea0 <_vfprintf_r+0x9ec>
 801bed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801beda:	3301      	adds	r3, #1
 801bedc:	930c      	str	r3, [sp, #48]	; 0x30
 801bede:	e7df      	b.n	801bea0 <_vfprintf_r+0x9ec>
 801bee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bee2:	930c      	str	r3, [sp, #48]	; 0x30
 801bee4:	e641      	b.n	801bb6a <_vfprintf_r+0x6b6>
 801bee6:	1d33      	adds	r3, r6, #4
 801bee8:	f01b 0f20 	tst.w	fp, #32
 801beec:	930b      	str	r3, [sp, #44]	; 0x2c
 801beee:	d00a      	beq.n	801bf06 <_vfprintf_r+0xa52>
 801bef0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bef2:	6833      	ldr	r3, [r6, #0]
 801bef4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801bef6:	17d2      	asrs	r2, r2, #31
 801bef8:	e9c3 1200 	strd	r1, r2, [r3]
 801befc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801befe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 801bf02:	f7ff bb57 	b.w	801b5b4 <_vfprintf_r+0x100>
 801bf06:	f01b 0f10 	tst.w	fp, #16
 801bf0a:	d003      	beq.n	801bf14 <_vfprintf_r+0xa60>
 801bf0c:	6833      	ldr	r3, [r6, #0]
 801bf0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf10:	601a      	str	r2, [r3, #0]
 801bf12:	e7f3      	b.n	801befc <_vfprintf_r+0xa48>
 801bf14:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801bf18:	d003      	beq.n	801bf22 <_vfprintf_r+0xa6e>
 801bf1a:	6833      	ldr	r3, [r6, #0]
 801bf1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf1e:	801a      	strh	r2, [r3, #0]
 801bf20:	e7ec      	b.n	801befc <_vfprintf_r+0xa48>
 801bf22:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801bf26:	d0f1      	beq.n	801bf0c <_vfprintf_r+0xa58>
 801bf28:	6833      	ldr	r3, [r6, #0]
 801bf2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf2c:	701a      	strb	r2, [r3, #0]
 801bf2e:	e7e5      	b.n	801befc <_vfprintf_r+0xa48>
 801bf30:	f04b 0b10 	orr.w	fp, fp, #16
 801bf34:	f01b 0320 	ands.w	r3, fp, #32
 801bf38:	d01f      	beq.n	801bf7a <_vfprintf_r+0xac6>
 801bf3a:	3607      	adds	r6, #7
 801bf3c:	f026 0307 	bic.w	r3, r6, #7
 801bf40:	461a      	mov	r2, r3
 801bf42:	685d      	ldr	r5, [r3, #4]
 801bf44:	f852 6b08 	ldr.w	r6, [r2], #8
 801bf48:	920b      	str	r2, [sp, #44]	; 0x2c
 801bf4a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801bf4e:	2300      	movs	r3, #0
 801bf50:	2200      	movs	r2, #0
 801bf52:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801bf56:	9a07      	ldr	r2, [sp, #28]
 801bf58:	3201      	adds	r2, #1
 801bf5a:	f000 8494 	beq.w	801c886 <_vfprintf_r+0x13d2>
 801bf5e:	ea56 0205 	orrs.w	r2, r6, r5
 801bf62:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 801bf66:	f040 8493 	bne.w	801c890 <_vfprintf_r+0x13dc>
 801bf6a:	9a07      	ldr	r2, [sp, #28]
 801bf6c:	2a00      	cmp	r2, #0
 801bf6e:	f000 80fa 	beq.w	801c166 <_vfprintf_r+0xcb2>
 801bf72:	2b01      	cmp	r3, #1
 801bf74:	f040 848f 	bne.w	801c896 <_vfprintf_r+0x13e2>
 801bf78:	e09f      	b.n	801c0ba <_vfprintf_r+0xc06>
 801bf7a:	4632      	mov	r2, r6
 801bf7c:	f01b 0510 	ands.w	r5, fp, #16
 801bf80:	f852 6b04 	ldr.w	r6, [r2], #4
 801bf84:	920b      	str	r2, [sp, #44]	; 0x2c
 801bf86:	d001      	beq.n	801bf8c <_vfprintf_r+0xad8>
 801bf88:	461d      	mov	r5, r3
 801bf8a:	e7de      	b.n	801bf4a <_vfprintf_r+0xa96>
 801bf8c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801bf90:	d001      	beq.n	801bf96 <_vfprintf_r+0xae2>
 801bf92:	b2b6      	uxth	r6, r6
 801bf94:	e7d9      	b.n	801bf4a <_vfprintf_r+0xa96>
 801bf96:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801bf9a:	d0d6      	beq.n	801bf4a <_vfprintf_r+0xa96>
 801bf9c:	b2f6      	uxtb	r6, r6
 801bf9e:	e7f3      	b.n	801bf88 <_vfprintf_r+0xad4>
 801bfa0:	4633      	mov	r3, r6
 801bfa2:	2278      	movs	r2, #120	; 0x78
 801bfa4:	f853 6b04 	ldr.w	r6, [r3], #4
 801bfa8:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfaa:	2330      	movs	r3, #48	; 0x30
 801bfac:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801bfb0:	4ba3      	ldr	r3, [pc, #652]	; (801c240 <_vfprintf_r+0xd8c>)
 801bfb2:	931a      	str	r3, [sp, #104]	; 0x68
 801bfb4:	2500      	movs	r5, #0
 801bfb6:	f04b 0b02 	orr.w	fp, fp, #2
 801bfba:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 801bfbe:	2302      	movs	r3, #2
 801bfc0:	920a      	str	r2, [sp, #40]	; 0x28
 801bfc2:	e7c5      	b.n	801bf50 <_vfprintf_r+0xa9c>
 801bfc4:	4633      	mov	r3, r6
 801bfc6:	2500      	movs	r5, #0
 801bfc8:	f853 9b04 	ldr.w	r9, [r3], #4
 801bfcc:	930b      	str	r3, [sp, #44]	; 0x2c
 801bfce:	9b07      	ldr	r3, [sp, #28]
 801bfd0:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801bfd4:	1c5e      	adds	r6, r3, #1
 801bfd6:	d010      	beq.n	801bffa <_vfprintf_r+0xb46>
 801bfd8:	461a      	mov	r2, r3
 801bfda:	4629      	mov	r1, r5
 801bfdc:	4648      	mov	r0, r9
 801bfde:	f7e4 f8d7 	bl	8000190 <memchr>
 801bfe2:	9008      	str	r0, [sp, #32]
 801bfe4:	2800      	cmp	r0, #0
 801bfe6:	f000 80d5 	beq.w	801c194 <_vfprintf_r+0xce0>
 801bfea:	eba0 0309 	sub.w	r3, r0, r9
 801bfee:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801bff2:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 801bff6:	462e      	mov	r6, r5
 801bff8:	e5bf      	b.n	801bb7a <_vfprintf_r+0x6c6>
 801bffa:	4648      	mov	r0, r9
 801bffc:	f7e4 f8c0 	bl	8000180 <strlen>
 801c000:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801c004:	e462      	b.n	801b8cc <_vfprintf_r+0x418>
 801c006:	f04b 0b10 	orr.w	fp, fp, #16
 801c00a:	f01b 0320 	ands.w	r3, fp, #32
 801c00e:	d009      	beq.n	801c024 <_vfprintf_r+0xb70>
 801c010:	3607      	adds	r6, #7
 801c012:	f026 0307 	bic.w	r3, r6, #7
 801c016:	461a      	mov	r2, r3
 801c018:	685d      	ldr	r5, [r3, #4]
 801c01a:	f852 6b08 	ldr.w	r6, [r2], #8
 801c01e:	920b      	str	r2, [sp, #44]	; 0x2c
 801c020:	2301      	movs	r3, #1
 801c022:	e795      	b.n	801bf50 <_vfprintf_r+0xa9c>
 801c024:	4632      	mov	r2, r6
 801c026:	f01b 0510 	ands.w	r5, fp, #16
 801c02a:	f852 6b04 	ldr.w	r6, [r2], #4
 801c02e:	920b      	str	r2, [sp, #44]	; 0x2c
 801c030:	d001      	beq.n	801c036 <_vfprintf_r+0xb82>
 801c032:	461d      	mov	r5, r3
 801c034:	e7f4      	b.n	801c020 <_vfprintf_r+0xb6c>
 801c036:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801c03a:	d001      	beq.n	801c040 <_vfprintf_r+0xb8c>
 801c03c:	b2b6      	uxth	r6, r6
 801c03e:	e7ef      	b.n	801c020 <_vfprintf_r+0xb6c>
 801c040:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801c044:	d0ec      	beq.n	801c020 <_vfprintf_r+0xb6c>
 801c046:	b2f6      	uxtb	r6, r6
 801c048:	e7f3      	b.n	801c032 <_vfprintf_r+0xb7e>
 801c04a:	4b7e      	ldr	r3, [pc, #504]	; (801c244 <_vfprintf_r+0xd90>)
 801c04c:	931a      	str	r3, [sp, #104]	; 0x68
 801c04e:	f01b 0320 	ands.w	r3, fp, #32
 801c052:	d01b      	beq.n	801c08c <_vfprintf_r+0xbd8>
 801c054:	3607      	adds	r6, #7
 801c056:	f026 0307 	bic.w	r3, r6, #7
 801c05a:	461a      	mov	r2, r3
 801c05c:	685d      	ldr	r5, [r3, #4]
 801c05e:	f852 6b08 	ldr.w	r6, [r2], #8
 801c062:	920b      	str	r2, [sp, #44]	; 0x2c
 801c064:	f01b 0f01 	tst.w	fp, #1
 801c068:	d00a      	beq.n	801c080 <_vfprintf_r+0xbcc>
 801c06a:	ea56 0305 	orrs.w	r3, r6, r5
 801c06e:	d007      	beq.n	801c080 <_vfprintf_r+0xbcc>
 801c070:	2330      	movs	r3, #48	; 0x30
 801c072:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801c076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c078:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801c07c:	f04b 0b02 	orr.w	fp, fp, #2
 801c080:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801c084:	2302      	movs	r3, #2
 801c086:	e763      	b.n	801bf50 <_vfprintf_r+0xa9c>
 801c088:	4b6d      	ldr	r3, [pc, #436]	; (801c240 <_vfprintf_r+0xd8c>)
 801c08a:	e7df      	b.n	801c04c <_vfprintf_r+0xb98>
 801c08c:	4632      	mov	r2, r6
 801c08e:	f01b 0510 	ands.w	r5, fp, #16
 801c092:	f852 6b04 	ldr.w	r6, [r2], #4
 801c096:	920b      	str	r2, [sp, #44]	; 0x2c
 801c098:	d001      	beq.n	801c09e <_vfprintf_r+0xbea>
 801c09a:	461d      	mov	r5, r3
 801c09c:	e7e2      	b.n	801c064 <_vfprintf_r+0xbb0>
 801c09e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801c0a2:	d001      	beq.n	801c0a8 <_vfprintf_r+0xbf4>
 801c0a4:	b2b6      	uxth	r6, r6
 801c0a6:	e7dd      	b.n	801c064 <_vfprintf_r+0xbb0>
 801c0a8:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801c0ac:	d0da      	beq.n	801c064 <_vfprintf_r+0xbb0>
 801c0ae:	b2f6      	uxtb	r6, r6
 801c0b0:	e7f3      	b.n	801c09a <_vfprintf_r+0xbe6>
 801c0b2:	2e0a      	cmp	r6, #10
 801c0b4:	f175 0300 	sbcs.w	r3, r5, #0
 801c0b8:	d206      	bcs.n	801c0c8 <_vfprintf_r+0xc14>
 801c0ba:	3630      	adds	r6, #48	; 0x30
 801c0bc:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 801c0c0:	f20d 1947 	addw	r9, sp, #327	; 0x147
 801c0c4:	f000 bc02 	b.w	801c8cc <_vfprintf_r+0x1418>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	9309      	str	r3, [sp, #36]	; 0x24
 801c0cc:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 801c0d0:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801c0d4:	9308      	str	r3, [sp, #32]
 801c0d6:	220a      	movs	r2, #10
 801c0d8:	2300      	movs	r3, #0
 801c0da:	4630      	mov	r0, r6
 801c0dc:	4629      	mov	r1, r5
 801c0de:	f7e5 f82f 	bl	8001140 <__aeabi_uldivmod>
 801c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0e8:	9b08      	ldr	r3, [sp, #32]
 801c0ea:	3230      	adds	r2, #48	; 0x30
 801c0ec:	f10b 39ff 	add.w	r9, fp, #4294967295
 801c0f0:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801c0f4:	b1d3      	cbz	r3, 801c12c <_vfprintf_r+0xc78>
 801c0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	429a      	cmp	r2, r3
 801c0fe:	d115      	bne.n	801c12c <_vfprintf_r+0xc78>
 801c100:	2aff      	cmp	r2, #255	; 0xff
 801c102:	d013      	beq.n	801c12c <_vfprintf_r+0xc78>
 801c104:	2e0a      	cmp	r6, #10
 801c106:	f175 0300 	sbcs.w	r3, r5, #0
 801c10a:	d30f      	bcc.n	801c12c <_vfprintf_r+0xc78>
 801c10c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c10e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c110:	eba9 0903 	sub.w	r9, r9, r3
 801c114:	461a      	mov	r2, r3
 801c116:	4648      	mov	r0, r9
 801c118:	f002 febd 	bl	801ee96 <strncpy>
 801c11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c11e:	785b      	ldrb	r3, [r3, #1]
 801c120:	b11b      	cbz	r3, 801c12a <_vfprintf_r+0xc76>
 801c122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c124:	3301      	adds	r3, #1
 801c126:	930e      	str	r3, [sp, #56]	; 0x38
 801c128:	2300      	movs	r3, #0
 801c12a:	9309      	str	r3, [sp, #36]	; 0x24
 801c12c:	2300      	movs	r3, #0
 801c12e:	220a      	movs	r2, #10
 801c130:	4630      	mov	r0, r6
 801c132:	4629      	mov	r1, r5
 801c134:	f7e5 f804 	bl	8001140 <__aeabi_uldivmod>
 801c138:	2e0a      	cmp	r6, #10
 801c13a:	f175 0300 	sbcs.w	r3, r5, #0
 801c13e:	f0c0 83c5 	bcc.w	801c8cc <_vfprintf_r+0x1418>
 801c142:	4606      	mov	r6, r0
 801c144:	460d      	mov	r5, r1
 801c146:	46cb      	mov	fp, r9
 801c148:	e7c5      	b.n	801c0d6 <_vfprintf_r+0xc22>
 801c14a:	f006 030f 	and.w	r3, r6, #15
 801c14e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c150:	0936      	lsrs	r6, r6, #4
 801c152:	5cd3      	ldrb	r3, [r2, r3]
 801c154:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801c158:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 801c15c:	092d      	lsrs	r5, r5, #4
 801c15e:	ea56 0305 	orrs.w	r3, r6, r5
 801c162:	d1f2      	bne.n	801c14a <_vfprintf_r+0xc96>
 801c164:	e3b2      	b.n	801c8cc <_vfprintf_r+0x1418>
 801c166:	b933      	cbnz	r3, 801c176 <_vfprintf_r+0xcc2>
 801c168:	f01b 0f01 	tst.w	fp, #1
 801c16c:	d003      	beq.n	801c176 <_vfprintf_r+0xcc2>
 801c16e:	2330      	movs	r3, #48	; 0x30
 801c170:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801c174:	e7a4      	b.n	801c0c0 <_vfprintf_r+0xc0c>
 801c176:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801c17a:	e3a7      	b.n	801c8cc <_vfprintf_r+0x1418>
 801c17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c17e:	2b00      	cmp	r3, #0
 801c180:	f000 8372 	beq.w	801c868 <_vfprintf_r+0x13b4>
 801c184:	2000      	movs	r0, #0
 801c186:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801c18a:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801c18e:	960b      	str	r6, [sp, #44]	; 0x2c
 801c190:	f7ff bb2e 	b.w	801b7f0 <_vfprintf_r+0x33c>
 801c194:	9e08      	ldr	r6, [sp, #32]
 801c196:	f7ff bb9a 	b.w	801b8ce <_vfprintf_r+0x41a>
 801c19a:	2010      	movs	r0, #16
 801c19c:	4402      	add	r2, r0
 801c19e:	2b07      	cmp	r3, #7
 801c1a0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c1a4:	6060      	str	r0, [r4, #4]
 801c1a6:	dd08      	ble.n	801c1ba <_vfprintf_r+0xd06>
 801c1a8:	aa26      	add	r2, sp, #152	; 0x98
 801c1aa:	4651      	mov	r1, sl
 801c1ac:	4640      	mov	r0, r8
 801c1ae:	f002 ff0d 	bl	801efcc <__sprint_r>
 801c1b2:	2800      	cmp	r0, #0
 801c1b4:	f040 8336 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c1b8:	a929      	add	r1, sp, #164	; 0xa4
 801c1ba:	3f10      	subs	r7, #16
 801c1bc:	460c      	mov	r4, r1
 801c1be:	e4f7      	b.n	801bbb0 <_vfprintf_r+0x6fc>
 801c1c0:	460c      	mov	r4, r1
 801c1c2:	e510      	b.n	801bbe6 <_vfprintf_r+0x732>
 801c1c4:	aa26      	add	r2, sp, #152	; 0x98
 801c1c6:	4651      	mov	r1, sl
 801c1c8:	4640      	mov	r0, r8
 801c1ca:	f002 feff 	bl	801efcc <__sprint_r>
 801c1ce:	2800      	cmp	r0, #0
 801c1d0:	f040 8328 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c1d4:	ac29      	add	r4, sp, #164	; 0xa4
 801c1d6:	e518      	b.n	801bc0a <_vfprintf_r+0x756>
 801c1d8:	aa26      	add	r2, sp, #152	; 0x98
 801c1da:	4651      	mov	r1, sl
 801c1dc:	4640      	mov	r0, r8
 801c1de:	f002 fef5 	bl	801efcc <__sprint_r>
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	f040 831e 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c1e8:	ac29      	add	r4, sp, #164	; 0xa4
 801c1ea:	e51e      	b.n	801bc2a <_vfprintf_r+0x776>
 801c1ec:	2010      	movs	r0, #16
 801c1ee:	4402      	add	r2, r0
 801c1f0:	2b07      	cmp	r3, #7
 801c1f2:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c1f6:	6060      	str	r0, [r4, #4]
 801c1f8:	dd08      	ble.n	801c20c <_vfprintf_r+0xd58>
 801c1fa:	aa26      	add	r2, sp, #152	; 0x98
 801c1fc:	4651      	mov	r1, sl
 801c1fe:	4640      	mov	r0, r8
 801c200:	f002 fee4 	bl	801efcc <__sprint_r>
 801c204:	2800      	cmp	r0, #0
 801c206:	f040 830d 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c20a:	a929      	add	r1, sp, #164	; 0xa4
 801c20c:	3f10      	subs	r7, #16
 801c20e:	460c      	mov	r4, r1
 801c210:	e513      	b.n	801bc3a <_vfprintf_r+0x786>
 801c212:	460c      	mov	r4, r1
 801c214:	e52c      	b.n	801bc70 <_vfprintf_r+0x7bc>
 801c216:	2010      	movs	r0, #16
 801c218:	4402      	add	r2, r0
 801c21a:	2b07      	cmp	r3, #7
 801c21c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c220:	6060      	str	r0, [r4, #4]
 801c222:	dd08      	ble.n	801c236 <_vfprintf_r+0xd82>
 801c224:	aa26      	add	r2, sp, #152	; 0x98
 801c226:	4651      	mov	r1, sl
 801c228:	4640      	mov	r0, r8
 801c22a:	f002 fecf 	bl	801efcc <__sprint_r>
 801c22e:	2800      	cmp	r0, #0
 801c230:	f040 82f8 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c234:	a929      	add	r1, sp, #164	; 0xa4
 801c236:	3e10      	subs	r6, #16
 801c238:	460c      	mov	r4, r1
 801c23a:	e52b      	b.n	801bc94 <_vfprintf_r+0x7e0>
 801c23c:	460c      	mov	r4, r1
 801c23e:	e543      	b.n	801bcc8 <_vfprintf_r+0x814>
 801c240:	080208e8 	.word	0x080208e8
 801c244:	080208f9 	.word	0x080208f9
 801c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c24a:	2b65      	cmp	r3, #101	; 0x65
 801c24c:	f340 8232 	ble.w	801c6b4 <_vfprintf_r+0x1200>
 801c250:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c254:	2200      	movs	r2, #0
 801c256:	2300      	movs	r3, #0
 801c258:	f7e4 fc0e 	bl	8000a78 <__aeabi_dcmpeq>
 801c25c:	2800      	cmp	r0, #0
 801c25e:	d068      	beq.n	801c332 <_vfprintf_r+0xe7e>
 801c260:	4b6d      	ldr	r3, [pc, #436]	; (801c418 <_vfprintf_r+0xf64>)
 801c262:	6023      	str	r3, [r4, #0]
 801c264:	2301      	movs	r3, #1
 801c266:	441e      	add	r6, r3
 801c268:	6063      	str	r3, [r4, #4]
 801c26a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c26c:	9628      	str	r6, [sp, #160]	; 0xa0
 801c26e:	3301      	adds	r3, #1
 801c270:	2b07      	cmp	r3, #7
 801c272:	9327      	str	r3, [sp, #156]	; 0x9c
 801c274:	dc37      	bgt.n	801c2e6 <_vfprintf_r+0xe32>
 801c276:	3408      	adds	r4, #8
 801c278:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c27c:	4293      	cmp	r3, r2
 801c27e:	db03      	blt.n	801c288 <_vfprintf_r+0xdd4>
 801c280:	f01b 0f01 	tst.w	fp, #1
 801c284:	f43f ad32 	beq.w	801bcec <_vfprintf_r+0x838>
 801c288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c28a:	6023      	str	r3, [r4, #0]
 801c28c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c28e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c290:	6063      	str	r3, [r4, #4]
 801c292:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c294:	4413      	add	r3, r2
 801c296:	9328      	str	r3, [sp, #160]	; 0xa0
 801c298:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c29a:	3301      	adds	r3, #1
 801c29c:	2b07      	cmp	r3, #7
 801c29e:	9327      	str	r3, [sp, #156]	; 0x9c
 801c2a0:	dc2b      	bgt.n	801c2fa <_vfprintf_r+0xe46>
 801c2a2:	3408      	adds	r4, #8
 801c2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2a6:	1e5d      	subs	r5, r3, #1
 801c2a8:	2d00      	cmp	r5, #0
 801c2aa:	f77f ad1f 	ble.w	801bcec <_vfprintf_r+0x838>
 801c2ae:	4e5b      	ldr	r6, [pc, #364]	; (801c41c <_vfprintf_r+0xf68>)
 801c2b0:	2710      	movs	r7, #16
 801c2b2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c2b6:	2d10      	cmp	r5, #16
 801c2b8:	f103 0301 	add.w	r3, r3, #1
 801c2bc:	f104 0108 	add.w	r1, r4, #8
 801c2c0:	6026      	str	r6, [r4, #0]
 801c2c2:	dc24      	bgt.n	801c30e <_vfprintf_r+0xe5a>
 801c2c4:	442a      	add	r2, r5
 801c2c6:	6065      	str	r5, [r4, #4]
 801c2c8:	9228      	str	r2, [sp, #160]	; 0xa0
 801c2ca:	2b07      	cmp	r3, #7
 801c2cc:	9327      	str	r3, [sp, #156]	; 0x9c
 801c2ce:	f340 8288 	ble.w	801c7e2 <_vfprintf_r+0x132e>
 801c2d2:	aa26      	add	r2, sp, #152	; 0x98
 801c2d4:	4651      	mov	r1, sl
 801c2d6:	4640      	mov	r0, r8
 801c2d8:	f002 fe78 	bl	801efcc <__sprint_r>
 801c2dc:	2800      	cmp	r0, #0
 801c2de:	f040 82a1 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c2e2:	ac29      	add	r4, sp, #164	; 0xa4
 801c2e4:	e502      	b.n	801bcec <_vfprintf_r+0x838>
 801c2e6:	aa26      	add	r2, sp, #152	; 0x98
 801c2e8:	4651      	mov	r1, sl
 801c2ea:	4640      	mov	r0, r8
 801c2ec:	f002 fe6e 	bl	801efcc <__sprint_r>
 801c2f0:	2800      	cmp	r0, #0
 801c2f2:	f040 8297 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c2f6:	ac29      	add	r4, sp, #164	; 0xa4
 801c2f8:	e7be      	b.n	801c278 <_vfprintf_r+0xdc4>
 801c2fa:	aa26      	add	r2, sp, #152	; 0x98
 801c2fc:	4651      	mov	r1, sl
 801c2fe:	4640      	mov	r0, r8
 801c300:	f002 fe64 	bl	801efcc <__sprint_r>
 801c304:	2800      	cmp	r0, #0
 801c306:	f040 828d 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c30a:	ac29      	add	r4, sp, #164	; 0xa4
 801c30c:	e7ca      	b.n	801c2a4 <_vfprintf_r+0xdf0>
 801c30e:	3210      	adds	r2, #16
 801c310:	2b07      	cmp	r3, #7
 801c312:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c316:	6067      	str	r7, [r4, #4]
 801c318:	dd08      	ble.n	801c32c <_vfprintf_r+0xe78>
 801c31a:	aa26      	add	r2, sp, #152	; 0x98
 801c31c:	4651      	mov	r1, sl
 801c31e:	4640      	mov	r0, r8
 801c320:	f002 fe54 	bl	801efcc <__sprint_r>
 801c324:	2800      	cmp	r0, #0
 801c326:	f040 827d 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c32a:	a929      	add	r1, sp, #164	; 0xa4
 801c32c:	3d10      	subs	r5, #16
 801c32e:	460c      	mov	r4, r1
 801c330:	e7bf      	b.n	801c2b2 <_vfprintf_r+0xdfe>
 801c332:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c334:	2b00      	cmp	r3, #0
 801c336:	dc73      	bgt.n	801c420 <_vfprintf_r+0xf6c>
 801c338:	4b37      	ldr	r3, [pc, #220]	; (801c418 <_vfprintf_r+0xf64>)
 801c33a:	6023      	str	r3, [r4, #0]
 801c33c:	2301      	movs	r3, #1
 801c33e:	441e      	add	r6, r3
 801c340:	6063      	str	r3, [r4, #4]
 801c342:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c344:	9628      	str	r6, [sp, #160]	; 0xa0
 801c346:	3301      	adds	r3, #1
 801c348:	2b07      	cmp	r3, #7
 801c34a:	9327      	str	r3, [sp, #156]	; 0x9c
 801c34c:	dc3d      	bgt.n	801c3ca <_vfprintf_r+0xf16>
 801c34e:	3408      	adds	r4, #8
 801c350:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c352:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c354:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c356:	430a      	orrs	r2, r1
 801c358:	f00b 0101 	and.w	r1, fp, #1
 801c35c:	430a      	orrs	r2, r1
 801c35e:	f43f acc5 	beq.w	801bcec <_vfprintf_r+0x838>
 801c362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c364:	6022      	str	r2, [r4, #0]
 801c366:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c368:	6062      	str	r2, [r4, #4]
 801c36a:	4413      	add	r3, r2
 801c36c:	9328      	str	r3, [sp, #160]	; 0xa0
 801c36e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c370:	3301      	adds	r3, #1
 801c372:	2b07      	cmp	r3, #7
 801c374:	9327      	str	r3, [sp, #156]	; 0x9c
 801c376:	dc32      	bgt.n	801c3de <_vfprintf_r+0xf2a>
 801c378:	3408      	adds	r4, #8
 801c37a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c37c:	2d00      	cmp	r5, #0
 801c37e:	da1b      	bge.n	801c3b8 <_vfprintf_r+0xf04>
 801c380:	4e26      	ldr	r6, [pc, #152]	; (801c41c <_vfprintf_r+0xf68>)
 801c382:	426d      	negs	r5, r5
 801c384:	4623      	mov	r3, r4
 801c386:	2710      	movs	r7, #16
 801c388:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801c38c:	2d10      	cmp	r5, #16
 801c38e:	f102 0201 	add.w	r2, r2, #1
 801c392:	f104 0408 	add.w	r4, r4, #8
 801c396:	601e      	str	r6, [r3, #0]
 801c398:	dc2b      	bgt.n	801c3f2 <_vfprintf_r+0xf3e>
 801c39a:	605d      	str	r5, [r3, #4]
 801c39c:	2a07      	cmp	r2, #7
 801c39e:	440d      	add	r5, r1
 801c3a0:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801c3a4:	dd08      	ble.n	801c3b8 <_vfprintf_r+0xf04>
 801c3a6:	aa26      	add	r2, sp, #152	; 0x98
 801c3a8:	4651      	mov	r1, sl
 801c3aa:	4640      	mov	r0, r8
 801c3ac:	f002 fe0e 	bl	801efcc <__sprint_r>
 801c3b0:	2800      	cmp	r0, #0
 801c3b2:	f040 8237 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c3b6:	ac29      	add	r4, sp, #164	; 0xa4
 801c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3bc:	6063      	str	r3, [r4, #4]
 801c3be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c3c0:	f8c4 9000 	str.w	r9, [r4]
 801c3c4:	4413      	add	r3, r2
 801c3c6:	9328      	str	r3, [sp, #160]	; 0xa0
 801c3c8:	e489      	b.n	801bcde <_vfprintf_r+0x82a>
 801c3ca:	aa26      	add	r2, sp, #152	; 0x98
 801c3cc:	4651      	mov	r1, sl
 801c3ce:	4640      	mov	r0, r8
 801c3d0:	f002 fdfc 	bl	801efcc <__sprint_r>
 801c3d4:	2800      	cmp	r0, #0
 801c3d6:	f040 8225 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c3da:	ac29      	add	r4, sp, #164	; 0xa4
 801c3dc:	e7b8      	b.n	801c350 <_vfprintf_r+0xe9c>
 801c3de:	aa26      	add	r2, sp, #152	; 0x98
 801c3e0:	4651      	mov	r1, sl
 801c3e2:	4640      	mov	r0, r8
 801c3e4:	f002 fdf2 	bl	801efcc <__sprint_r>
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	f040 821b 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c3ee:	ac29      	add	r4, sp, #164	; 0xa4
 801c3f0:	e7c3      	b.n	801c37a <_vfprintf_r+0xec6>
 801c3f2:	3110      	adds	r1, #16
 801c3f4:	2a07      	cmp	r2, #7
 801c3f6:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801c3fa:	605f      	str	r7, [r3, #4]
 801c3fc:	dd08      	ble.n	801c410 <_vfprintf_r+0xf5c>
 801c3fe:	aa26      	add	r2, sp, #152	; 0x98
 801c400:	4651      	mov	r1, sl
 801c402:	4640      	mov	r0, r8
 801c404:	f002 fde2 	bl	801efcc <__sprint_r>
 801c408:	2800      	cmp	r0, #0
 801c40a:	f040 820b 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c40e:	ac29      	add	r4, sp, #164	; 0xa4
 801c410:	3d10      	subs	r5, #16
 801c412:	4623      	mov	r3, r4
 801c414:	e7b8      	b.n	801c388 <_vfprintf_r+0xed4>
 801c416:	bf00      	nop
 801c418:	0802090a 	.word	0x0802090a
 801c41c:	0802093c 	.word	0x0802093c
 801c420:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c422:	42af      	cmp	r7, r5
 801c424:	bfa8      	it	ge
 801c426:	462f      	movge	r7, r5
 801c428:	2f00      	cmp	r7, #0
 801c42a:	dd09      	ble.n	801c440 <_vfprintf_r+0xf8c>
 801c42c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c42e:	3301      	adds	r3, #1
 801c430:	443e      	add	r6, r7
 801c432:	2b07      	cmp	r3, #7
 801c434:	e9c4 9700 	strd	r9, r7, [r4]
 801c438:	9628      	str	r6, [sp, #160]	; 0xa0
 801c43a:	9327      	str	r3, [sp, #156]	; 0x9c
 801c43c:	dc75      	bgt.n	801c52a <_vfprintf_r+0x1076>
 801c43e:	3408      	adds	r4, #8
 801c440:	2f00      	cmp	r7, #0
 801c442:	bfac      	ite	ge
 801c444:	1bee      	subge	r6, r5, r7
 801c446:	462e      	movlt	r6, r5
 801c448:	2e00      	cmp	r6, #0
 801c44a:	dd18      	ble.n	801c47e <_vfprintf_r+0xfca>
 801c44c:	4f98      	ldr	r7, [pc, #608]	; (801c6b0 <_vfprintf_r+0x11fc>)
 801c44e:	6027      	str	r7, [r4, #0]
 801c450:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c454:	2e10      	cmp	r6, #16
 801c456:	f103 0301 	add.w	r3, r3, #1
 801c45a:	f104 0108 	add.w	r1, r4, #8
 801c45e:	dc6e      	bgt.n	801c53e <_vfprintf_r+0x108a>
 801c460:	6066      	str	r6, [r4, #4]
 801c462:	2b07      	cmp	r3, #7
 801c464:	4416      	add	r6, r2
 801c466:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801c46a:	dd7b      	ble.n	801c564 <_vfprintf_r+0x10b0>
 801c46c:	aa26      	add	r2, sp, #152	; 0x98
 801c46e:	4651      	mov	r1, sl
 801c470:	4640      	mov	r0, r8
 801c472:	f002 fdab 	bl	801efcc <__sprint_r>
 801c476:	2800      	cmp	r0, #0
 801c478:	f040 81d4 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c47c:	ac29      	add	r4, sp, #164	; 0xa4
 801c47e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801c482:	444d      	add	r5, r9
 801c484:	d00a      	beq.n	801c49c <_vfprintf_r+0xfe8>
 801c486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d16d      	bne.n	801c568 <_vfprintf_r+0x10b4>
 801c48c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d16d      	bne.n	801c56e <_vfprintf_r+0x10ba>
 801c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c494:	444b      	add	r3, r9
 801c496:	429d      	cmp	r5, r3
 801c498:	bf28      	it	cs
 801c49a:	461d      	movcs	r5, r3
 801c49c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c49e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4a0:	4293      	cmp	r3, r2
 801c4a2:	db02      	blt.n	801c4aa <_vfprintf_r+0xff6>
 801c4a4:	f01b 0f01 	tst.w	fp, #1
 801c4a8:	d00e      	beq.n	801c4c8 <_vfprintf_r+0x1014>
 801c4aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c4ac:	6023      	str	r3, [r4, #0]
 801c4ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c4b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c4b2:	6063      	str	r3, [r4, #4]
 801c4b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4b6:	4413      	add	r3, r2
 801c4b8:	9328      	str	r3, [sp, #160]	; 0xa0
 801c4ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c4bc:	3301      	adds	r3, #1
 801c4be:	2b07      	cmp	r3, #7
 801c4c0:	9327      	str	r3, [sp, #156]	; 0x9c
 801c4c2:	f300 80cf 	bgt.w	801c664 <_vfprintf_r+0x11b0>
 801c4c6:	3408      	adds	r4, #8
 801c4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4ca:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801c4cc:	eb09 0203 	add.w	r2, r9, r3
 801c4d0:	1b9e      	subs	r6, r3, r6
 801c4d2:	1b52      	subs	r2, r2, r5
 801c4d4:	4296      	cmp	r6, r2
 801c4d6:	bfa8      	it	ge
 801c4d8:	4616      	movge	r6, r2
 801c4da:	2e00      	cmp	r6, #0
 801c4dc:	dd0b      	ble.n	801c4f6 <_vfprintf_r+0x1042>
 801c4de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4e0:	4433      	add	r3, r6
 801c4e2:	9328      	str	r3, [sp, #160]	; 0xa0
 801c4e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c4e6:	3301      	adds	r3, #1
 801c4e8:	2b07      	cmp	r3, #7
 801c4ea:	e9c4 5600 	strd	r5, r6, [r4]
 801c4ee:	9327      	str	r3, [sp, #156]	; 0x9c
 801c4f0:	f300 80c2 	bgt.w	801c678 <_vfprintf_r+0x11c4>
 801c4f4:	3408      	adds	r4, #8
 801c4f6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4fa:	2e00      	cmp	r6, #0
 801c4fc:	eba3 0505 	sub.w	r5, r3, r5
 801c500:	bfa8      	it	ge
 801c502:	1bad      	subge	r5, r5, r6
 801c504:	2d00      	cmp	r5, #0
 801c506:	f77f abf1 	ble.w	801bcec <_vfprintf_r+0x838>
 801c50a:	4e69      	ldr	r6, [pc, #420]	; (801c6b0 <_vfprintf_r+0x11fc>)
 801c50c:	2710      	movs	r7, #16
 801c50e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c512:	2d10      	cmp	r5, #16
 801c514:	f103 0301 	add.w	r3, r3, #1
 801c518:	f104 0108 	add.w	r1, r4, #8
 801c51c:	6026      	str	r6, [r4, #0]
 801c51e:	f300 80b5 	bgt.w	801c68c <_vfprintf_r+0x11d8>
 801c522:	6065      	str	r5, [r4, #4]
 801c524:	4415      	add	r5, r2
 801c526:	9528      	str	r5, [sp, #160]	; 0xa0
 801c528:	e6cf      	b.n	801c2ca <_vfprintf_r+0xe16>
 801c52a:	aa26      	add	r2, sp, #152	; 0x98
 801c52c:	4651      	mov	r1, sl
 801c52e:	4640      	mov	r0, r8
 801c530:	f002 fd4c 	bl	801efcc <__sprint_r>
 801c534:	2800      	cmp	r0, #0
 801c536:	f040 8175 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c53a:	ac29      	add	r4, sp, #164	; 0xa4
 801c53c:	e780      	b.n	801c440 <_vfprintf_r+0xf8c>
 801c53e:	2010      	movs	r0, #16
 801c540:	4402      	add	r2, r0
 801c542:	2b07      	cmp	r3, #7
 801c544:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c548:	6060      	str	r0, [r4, #4]
 801c54a:	dd08      	ble.n	801c55e <_vfprintf_r+0x10aa>
 801c54c:	aa26      	add	r2, sp, #152	; 0x98
 801c54e:	4651      	mov	r1, sl
 801c550:	4640      	mov	r0, r8
 801c552:	f002 fd3b 	bl	801efcc <__sprint_r>
 801c556:	2800      	cmp	r0, #0
 801c558:	f040 8164 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c55c:	a929      	add	r1, sp, #164	; 0xa4
 801c55e:	3e10      	subs	r6, #16
 801c560:	460c      	mov	r4, r1
 801c562:	e774      	b.n	801c44e <_vfprintf_r+0xf9a>
 801c564:	460c      	mov	r4, r1
 801c566:	e78a      	b.n	801c47e <_vfprintf_r+0xfca>
 801c568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d04a      	beq.n	801c604 <_vfprintf_r+0x1150>
 801c56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c570:	3b01      	subs	r3, #1
 801c572:	930c      	str	r3, [sp, #48]	; 0x30
 801c574:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c576:	6023      	str	r3, [r4, #0]
 801c578:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c57a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c57c:	6063      	str	r3, [r4, #4]
 801c57e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c580:	4413      	add	r3, r2
 801c582:	9328      	str	r3, [sp, #160]	; 0xa0
 801c584:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c586:	3301      	adds	r3, #1
 801c588:	2b07      	cmp	r3, #7
 801c58a:	9327      	str	r3, [sp, #156]	; 0x9c
 801c58c:	dc41      	bgt.n	801c612 <_vfprintf_r+0x115e>
 801c58e:	3408      	adds	r4, #8
 801c590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c594:	eb09 0703 	add.w	r7, r9, r3
 801c598:	1b7b      	subs	r3, r7, r5
 801c59a:	7817      	ldrb	r7, [r2, #0]
 801c59c:	429f      	cmp	r7, r3
 801c59e:	bfa8      	it	ge
 801c5a0:	461f      	movge	r7, r3
 801c5a2:	2f00      	cmp	r7, #0
 801c5a4:	dd0a      	ble.n	801c5bc <_vfprintf_r+0x1108>
 801c5a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c5a8:	443b      	add	r3, r7
 801c5aa:	9328      	str	r3, [sp, #160]	; 0xa0
 801c5ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c5ae:	3301      	adds	r3, #1
 801c5b0:	2b07      	cmp	r3, #7
 801c5b2:	e9c4 5700 	strd	r5, r7, [r4]
 801c5b6:	9327      	str	r3, [sp, #156]	; 0x9c
 801c5b8:	dc35      	bgt.n	801c626 <_vfprintf_r+0x1172>
 801c5ba:	3408      	adds	r4, #8
 801c5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5be:	781e      	ldrb	r6, [r3, #0]
 801c5c0:	2f00      	cmp	r7, #0
 801c5c2:	bfa8      	it	ge
 801c5c4:	1bf6      	subge	r6, r6, r7
 801c5c6:	2e00      	cmp	r6, #0
 801c5c8:	dd18      	ble.n	801c5fc <_vfprintf_r+0x1148>
 801c5ca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c5ce:	4838      	ldr	r0, [pc, #224]	; (801c6b0 <_vfprintf_r+0x11fc>)
 801c5d0:	6020      	str	r0, [r4, #0]
 801c5d2:	2e10      	cmp	r6, #16
 801c5d4:	f103 0301 	add.w	r3, r3, #1
 801c5d8:	f104 0108 	add.w	r1, r4, #8
 801c5dc:	dc2d      	bgt.n	801c63a <_vfprintf_r+0x1186>
 801c5de:	6066      	str	r6, [r4, #4]
 801c5e0:	2b07      	cmp	r3, #7
 801c5e2:	4416      	add	r6, r2
 801c5e4:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801c5e8:	dd3a      	ble.n	801c660 <_vfprintf_r+0x11ac>
 801c5ea:	aa26      	add	r2, sp, #152	; 0x98
 801c5ec:	4651      	mov	r1, sl
 801c5ee:	4640      	mov	r0, r8
 801c5f0:	f002 fcec 	bl	801efcc <__sprint_r>
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	f040 8115 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c5fa:	ac29      	add	r4, sp, #164	; 0xa4
 801c5fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5fe:	781b      	ldrb	r3, [r3, #0]
 801c600:	441d      	add	r5, r3
 801c602:	e740      	b.n	801c486 <_vfprintf_r+0xfd2>
 801c604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c606:	3b01      	subs	r3, #1
 801c608:	930e      	str	r3, [sp, #56]	; 0x38
 801c60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c60c:	3b01      	subs	r3, #1
 801c60e:	930d      	str	r3, [sp, #52]	; 0x34
 801c610:	e7b0      	b.n	801c574 <_vfprintf_r+0x10c0>
 801c612:	aa26      	add	r2, sp, #152	; 0x98
 801c614:	4651      	mov	r1, sl
 801c616:	4640      	mov	r0, r8
 801c618:	f002 fcd8 	bl	801efcc <__sprint_r>
 801c61c:	2800      	cmp	r0, #0
 801c61e:	f040 8101 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c622:	ac29      	add	r4, sp, #164	; 0xa4
 801c624:	e7b4      	b.n	801c590 <_vfprintf_r+0x10dc>
 801c626:	aa26      	add	r2, sp, #152	; 0x98
 801c628:	4651      	mov	r1, sl
 801c62a:	4640      	mov	r0, r8
 801c62c:	f002 fcce 	bl	801efcc <__sprint_r>
 801c630:	2800      	cmp	r0, #0
 801c632:	f040 80f7 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c636:	ac29      	add	r4, sp, #164	; 0xa4
 801c638:	e7c0      	b.n	801c5bc <_vfprintf_r+0x1108>
 801c63a:	2010      	movs	r0, #16
 801c63c:	4402      	add	r2, r0
 801c63e:	2b07      	cmp	r3, #7
 801c640:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c644:	6060      	str	r0, [r4, #4]
 801c646:	dd08      	ble.n	801c65a <_vfprintf_r+0x11a6>
 801c648:	aa26      	add	r2, sp, #152	; 0x98
 801c64a:	4651      	mov	r1, sl
 801c64c:	4640      	mov	r0, r8
 801c64e:	f002 fcbd 	bl	801efcc <__sprint_r>
 801c652:	2800      	cmp	r0, #0
 801c654:	f040 80e6 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c658:	a929      	add	r1, sp, #164	; 0xa4
 801c65a:	3e10      	subs	r6, #16
 801c65c:	460c      	mov	r4, r1
 801c65e:	e7b4      	b.n	801c5ca <_vfprintf_r+0x1116>
 801c660:	460c      	mov	r4, r1
 801c662:	e7cb      	b.n	801c5fc <_vfprintf_r+0x1148>
 801c664:	aa26      	add	r2, sp, #152	; 0x98
 801c666:	4651      	mov	r1, sl
 801c668:	4640      	mov	r0, r8
 801c66a:	f002 fcaf 	bl	801efcc <__sprint_r>
 801c66e:	2800      	cmp	r0, #0
 801c670:	f040 80d8 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c674:	ac29      	add	r4, sp, #164	; 0xa4
 801c676:	e727      	b.n	801c4c8 <_vfprintf_r+0x1014>
 801c678:	aa26      	add	r2, sp, #152	; 0x98
 801c67a:	4651      	mov	r1, sl
 801c67c:	4640      	mov	r0, r8
 801c67e:	f002 fca5 	bl	801efcc <__sprint_r>
 801c682:	2800      	cmp	r0, #0
 801c684:	f040 80ce 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c688:	ac29      	add	r4, sp, #164	; 0xa4
 801c68a:	e734      	b.n	801c4f6 <_vfprintf_r+0x1042>
 801c68c:	3210      	adds	r2, #16
 801c68e:	2b07      	cmp	r3, #7
 801c690:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c694:	6067      	str	r7, [r4, #4]
 801c696:	dd08      	ble.n	801c6aa <_vfprintf_r+0x11f6>
 801c698:	aa26      	add	r2, sp, #152	; 0x98
 801c69a:	4651      	mov	r1, sl
 801c69c:	4640      	mov	r0, r8
 801c69e:	f002 fc95 	bl	801efcc <__sprint_r>
 801c6a2:	2800      	cmp	r0, #0
 801c6a4:	f040 80be 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c6a8:	a929      	add	r1, sp, #164	; 0xa4
 801c6aa:	3d10      	subs	r5, #16
 801c6ac:	460c      	mov	r4, r1
 801c6ae:	e72e      	b.n	801c50e <_vfprintf_r+0x105a>
 801c6b0:	0802093c 	.word	0x0802093c
 801c6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c6b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c6b8:	2a01      	cmp	r2, #1
 801c6ba:	f106 0601 	add.w	r6, r6, #1
 801c6be:	f103 0301 	add.w	r3, r3, #1
 801c6c2:	f104 0508 	add.w	r5, r4, #8
 801c6c6:	dc02      	bgt.n	801c6ce <_vfprintf_r+0x121a>
 801c6c8:	f01b 0f01 	tst.w	fp, #1
 801c6cc:	d07e      	beq.n	801c7cc <_vfprintf_r+0x1318>
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	2b07      	cmp	r3, #7
 801c6d2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801c6d6:	f8c4 9000 	str.w	r9, [r4]
 801c6da:	6062      	str	r2, [r4, #4]
 801c6dc:	dd08      	ble.n	801c6f0 <_vfprintf_r+0x123c>
 801c6de:	aa26      	add	r2, sp, #152	; 0x98
 801c6e0:	4651      	mov	r1, sl
 801c6e2:	4640      	mov	r0, r8
 801c6e4:	f002 fc72 	bl	801efcc <__sprint_r>
 801c6e8:	2800      	cmp	r0, #0
 801c6ea:	f040 809b 	bne.w	801c824 <_vfprintf_r+0x1370>
 801c6ee:	ad29      	add	r5, sp, #164	; 0xa4
 801c6f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c6f2:	602b      	str	r3, [r5, #0]
 801c6f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c6f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c6f8:	606b      	str	r3, [r5, #4]
 801c6fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6fc:	4413      	add	r3, r2
 801c6fe:	9328      	str	r3, [sp, #160]	; 0xa0
 801c700:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c702:	3301      	adds	r3, #1
 801c704:	2b07      	cmp	r3, #7
 801c706:	9327      	str	r3, [sp, #156]	; 0x9c
 801c708:	dc32      	bgt.n	801c770 <_vfprintf_r+0x12bc>
 801c70a:	3508      	adds	r5, #8
 801c70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c70e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801c712:	1e5c      	subs	r4, r3, #1
 801c714:	2200      	movs	r2, #0
 801c716:	2300      	movs	r3, #0
 801c718:	f7e4 f9ae 	bl	8000a78 <__aeabi_dcmpeq>
 801c71c:	2800      	cmp	r0, #0
 801c71e:	d130      	bne.n	801c782 <_vfprintf_r+0x12ce>
 801c720:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801c722:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c726:	3101      	adds	r1, #1
 801c728:	3b01      	subs	r3, #1
 801c72a:	f109 0001 	add.w	r0, r9, #1
 801c72e:	4413      	add	r3, r2
 801c730:	2907      	cmp	r1, #7
 801c732:	e9c5 0400 	strd	r0, r4, [r5]
 801c736:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 801c73a:	dd50      	ble.n	801c7de <_vfprintf_r+0x132a>
 801c73c:	aa26      	add	r2, sp, #152	; 0x98
 801c73e:	4651      	mov	r1, sl
 801c740:	4640      	mov	r0, r8
 801c742:	f002 fc43 	bl	801efcc <__sprint_r>
 801c746:	2800      	cmp	r0, #0
 801c748:	d16c      	bne.n	801c824 <_vfprintf_r+0x1370>
 801c74a:	ad29      	add	r5, sp, #164	; 0xa4
 801c74c:	ab22      	add	r3, sp, #136	; 0x88
 801c74e:	602b      	str	r3, [r5, #0]
 801c750:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c752:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c754:	606b      	str	r3, [r5, #4]
 801c756:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c758:	4413      	add	r3, r2
 801c75a:	9328      	str	r3, [sp, #160]	; 0xa0
 801c75c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c75e:	3301      	adds	r3, #1
 801c760:	2b07      	cmp	r3, #7
 801c762:	9327      	str	r3, [sp, #156]	; 0x9c
 801c764:	f73f adb5 	bgt.w	801c2d2 <_vfprintf_r+0xe1e>
 801c768:	f105 0408 	add.w	r4, r5, #8
 801c76c:	f7ff babe 	b.w	801bcec <_vfprintf_r+0x838>
 801c770:	aa26      	add	r2, sp, #152	; 0x98
 801c772:	4651      	mov	r1, sl
 801c774:	4640      	mov	r0, r8
 801c776:	f002 fc29 	bl	801efcc <__sprint_r>
 801c77a:	2800      	cmp	r0, #0
 801c77c:	d152      	bne.n	801c824 <_vfprintf_r+0x1370>
 801c77e:	ad29      	add	r5, sp, #164	; 0xa4
 801c780:	e7c4      	b.n	801c70c <_vfprintf_r+0x1258>
 801c782:	2c00      	cmp	r4, #0
 801c784:	dde2      	ble.n	801c74c <_vfprintf_r+0x1298>
 801c786:	4e58      	ldr	r6, [pc, #352]	; (801c8e8 <_vfprintf_r+0x1434>)
 801c788:	2710      	movs	r7, #16
 801c78a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c78e:	2c10      	cmp	r4, #16
 801c790:	f103 0301 	add.w	r3, r3, #1
 801c794:	f105 0108 	add.w	r1, r5, #8
 801c798:	602e      	str	r6, [r5, #0]
 801c79a:	dc07      	bgt.n	801c7ac <_vfprintf_r+0x12f8>
 801c79c:	606c      	str	r4, [r5, #4]
 801c79e:	2b07      	cmp	r3, #7
 801c7a0:	4414      	add	r4, r2
 801c7a2:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801c7a6:	dcc9      	bgt.n	801c73c <_vfprintf_r+0x1288>
 801c7a8:	460d      	mov	r5, r1
 801c7aa:	e7cf      	b.n	801c74c <_vfprintf_r+0x1298>
 801c7ac:	3210      	adds	r2, #16
 801c7ae:	2b07      	cmp	r3, #7
 801c7b0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c7b4:	606f      	str	r7, [r5, #4]
 801c7b6:	dd06      	ble.n	801c7c6 <_vfprintf_r+0x1312>
 801c7b8:	aa26      	add	r2, sp, #152	; 0x98
 801c7ba:	4651      	mov	r1, sl
 801c7bc:	4640      	mov	r0, r8
 801c7be:	f002 fc05 	bl	801efcc <__sprint_r>
 801c7c2:	bb78      	cbnz	r0, 801c824 <_vfprintf_r+0x1370>
 801c7c4:	a929      	add	r1, sp, #164	; 0xa4
 801c7c6:	3c10      	subs	r4, #16
 801c7c8:	460d      	mov	r5, r1
 801c7ca:	e7de      	b.n	801c78a <_vfprintf_r+0x12d6>
 801c7cc:	2201      	movs	r2, #1
 801c7ce:	2b07      	cmp	r3, #7
 801c7d0:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801c7d4:	f8c4 9000 	str.w	r9, [r4]
 801c7d8:	6062      	str	r2, [r4, #4]
 801c7da:	ddb7      	ble.n	801c74c <_vfprintf_r+0x1298>
 801c7dc:	e7ae      	b.n	801c73c <_vfprintf_r+0x1288>
 801c7de:	3508      	adds	r5, #8
 801c7e0:	e7b4      	b.n	801c74c <_vfprintf_r+0x1298>
 801c7e2:	460c      	mov	r4, r1
 801c7e4:	f7ff ba82 	b.w	801bcec <_vfprintf_r+0x838>
 801c7e8:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801c7ec:	1a9d      	subs	r5, r3, r2
 801c7ee:	2d00      	cmp	r5, #0
 801c7f0:	f77f aa80 	ble.w	801bcf4 <_vfprintf_r+0x840>
 801c7f4:	4e3d      	ldr	r6, [pc, #244]	; (801c8ec <_vfprintf_r+0x1438>)
 801c7f6:	2710      	movs	r7, #16
 801c7f8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801c7fc:	2d10      	cmp	r5, #16
 801c7fe:	f103 0301 	add.w	r3, r3, #1
 801c802:	6026      	str	r6, [r4, #0]
 801c804:	dc18      	bgt.n	801c838 <_vfprintf_r+0x1384>
 801c806:	6065      	str	r5, [r4, #4]
 801c808:	2b07      	cmp	r3, #7
 801c80a:	4415      	add	r5, r2
 801c80c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801c810:	f77f aa70 	ble.w	801bcf4 <_vfprintf_r+0x840>
 801c814:	aa26      	add	r2, sp, #152	; 0x98
 801c816:	4651      	mov	r1, sl
 801c818:	4640      	mov	r0, r8
 801c81a:	f002 fbd7 	bl	801efcc <__sprint_r>
 801c81e:	2800      	cmp	r0, #0
 801c820:	f43f aa68 	beq.w	801bcf4 <_vfprintf_r+0x840>
 801c824:	9b08      	ldr	r3, [sp, #32]
 801c826:	2b00      	cmp	r3, #0
 801c828:	f43f a887 	beq.w	801b93a <_vfprintf_r+0x486>
 801c82c:	4619      	mov	r1, r3
 801c82e:	4640      	mov	r0, r8
 801c830:	f001 f8ca 	bl	801d9c8 <_free_r>
 801c834:	f7ff b881 	b.w	801b93a <_vfprintf_r+0x486>
 801c838:	3210      	adds	r2, #16
 801c83a:	2b07      	cmp	r3, #7
 801c83c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801c840:	6067      	str	r7, [r4, #4]
 801c842:	dc02      	bgt.n	801c84a <_vfprintf_r+0x1396>
 801c844:	3408      	adds	r4, #8
 801c846:	3d10      	subs	r5, #16
 801c848:	e7d6      	b.n	801c7f8 <_vfprintf_r+0x1344>
 801c84a:	aa26      	add	r2, sp, #152	; 0x98
 801c84c:	4651      	mov	r1, sl
 801c84e:	4640      	mov	r0, r8
 801c850:	f002 fbbc 	bl	801efcc <__sprint_r>
 801c854:	2800      	cmp	r0, #0
 801c856:	d1e5      	bne.n	801c824 <_vfprintf_r+0x1370>
 801c858:	ac29      	add	r4, sp, #164	; 0xa4
 801c85a:	e7f4      	b.n	801c846 <_vfprintf_r+0x1392>
 801c85c:	9908      	ldr	r1, [sp, #32]
 801c85e:	4640      	mov	r0, r8
 801c860:	f001 f8b2 	bl	801d9c8 <_free_r>
 801c864:	f7ff ba5e 	b.w	801bd24 <_vfprintf_r+0x870>
 801c868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c86a:	b91b      	cbnz	r3, 801c874 <_vfprintf_r+0x13c0>
 801c86c:	2300      	movs	r3, #0
 801c86e:	9327      	str	r3, [sp, #156]	; 0x9c
 801c870:	f7ff b863 	b.w	801b93a <_vfprintf_r+0x486>
 801c874:	aa26      	add	r2, sp, #152	; 0x98
 801c876:	4651      	mov	r1, sl
 801c878:	4640      	mov	r0, r8
 801c87a:	f002 fba7 	bl	801efcc <__sprint_r>
 801c87e:	2800      	cmp	r0, #0
 801c880:	d0f4      	beq.n	801c86c <_vfprintf_r+0x13b8>
 801c882:	f7ff b85a 	b.w	801b93a <_vfprintf_r+0x486>
 801c886:	ea56 0205 	orrs.w	r2, r6, r5
 801c88a:	465f      	mov	r7, fp
 801c88c:	f43f ab71 	beq.w	801bf72 <_vfprintf_r+0xabe>
 801c890:	2b01      	cmp	r3, #1
 801c892:	f43f ac0e 	beq.w	801c0b2 <_vfprintf_r+0xbfe>
 801c896:	2b02      	cmp	r3, #2
 801c898:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801c89c:	f43f ac55 	beq.w	801c14a <_vfprintf_r+0xc96>
 801c8a0:	f006 0307 	and.w	r3, r6, #7
 801c8a4:	08f6      	lsrs	r6, r6, #3
 801c8a6:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 801c8aa:	08ed      	lsrs	r5, r5, #3
 801c8ac:	3330      	adds	r3, #48	; 0x30
 801c8ae:	ea56 0105 	orrs.w	r1, r6, r5
 801c8b2:	464a      	mov	r2, r9
 801c8b4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801c8b8:	d1f2      	bne.n	801c8a0 <_vfprintf_r+0x13ec>
 801c8ba:	07f8      	lsls	r0, r7, #31
 801c8bc:	d506      	bpl.n	801c8cc <_vfprintf_r+0x1418>
 801c8be:	2b30      	cmp	r3, #48	; 0x30
 801c8c0:	d004      	beq.n	801c8cc <_vfprintf_r+0x1418>
 801c8c2:	2330      	movs	r3, #48	; 0x30
 801c8c4:	f809 3c01 	strb.w	r3, [r9, #-1]
 801c8c8:	f1a2 0902 	sub.w	r9, r2, #2
 801c8cc:	ab52      	add	r3, sp, #328	; 0x148
 801c8ce:	eba3 0309 	sub.w	r3, r3, r9
 801c8d2:	9e07      	ldr	r6, [sp, #28]
 801c8d4:	9307      	str	r3, [sp, #28]
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	46bb      	mov	fp, r7
 801c8da:	9308      	str	r3, [sp, #32]
 801c8dc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801c8e0:	461d      	mov	r5, r3
 801c8e2:	f7ff b94a 	b.w	801bb7a <_vfprintf_r+0x6c6>
 801c8e6:	bf00      	nop
 801c8e8:	0802093c 	.word	0x0802093c
 801c8ec:	0802092c 	.word	0x0802092c

0801c8f0 <__sbprintf>:
 801c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8f2:	461f      	mov	r7, r3
 801c8f4:	898b      	ldrh	r3, [r1, #12]
 801c8f6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801c8fa:	f023 0302 	bic.w	r3, r3, #2
 801c8fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c902:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c904:	9319      	str	r3, [sp, #100]	; 0x64
 801c906:	89cb      	ldrh	r3, [r1, #14]
 801c908:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c90c:	69cb      	ldr	r3, [r1, #28]
 801c90e:	9307      	str	r3, [sp, #28]
 801c910:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c912:	9309      	str	r3, [sp, #36]	; 0x24
 801c914:	ab1a      	add	r3, sp, #104	; 0x68
 801c916:	9300      	str	r3, [sp, #0]
 801c918:	9304      	str	r3, [sp, #16]
 801c91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c91e:	4615      	mov	r5, r2
 801c920:	4606      	mov	r6, r0
 801c922:	9302      	str	r3, [sp, #8]
 801c924:	9305      	str	r3, [sp, #20]
 801c926:	a816      	add	r0, sp, #88	; 0x58
 801c928:	2300      	movs	r3, #0
 801c92a:	460c      	mov	r4, r1
 801c92c:	9306      	str	r3, [sp, #24]
 801c92e:	f001 fa77 	bl	801de20 <__retarget_lock_init_recursive>
 801c932:	462a      	mov	r2, r5
 801c934:	463b      	mov	r3, r7
 801c936:	4669      	mov	r1, sp
 801c938:	4630      	mov	r0, r6
 801c93a:	f7fe fdbb 	bl	801b4b4 <_vfprintf_r>
 801c93e:	1e05      	subs	r5, r0, #0
 801c940:	db07      	blt.n	801c952 <__sbprintf+0x62>
 801c942:	4669      	mov	r1, sp
 801c944:	4630      	mov	r0, r6
 801c946:	f000 ff43 	bl	801d7d0 <_fflush_r>
 801c94a:	2800      	cmp	r0, #0
 801c94c:	bf18      	it	ne
 801c94e:	f04f 35ff 	movne.w	r5, #4294967295
 801c952:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c956:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c958:	065b      	lsls	r3, r3, #25
 801c95a:	bf42      	ittt	mi
 801c95c:	89a3      	ldrhmi	r3, [r4, #12]
 801c95e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801c962:	81a3      	strhmi	r3, [r4, #12]
 801c964:	f001 fa5d 	bl	801de22 <__retarget_lock_close_recursive>
 801c968:	4628      	mov	r0, r5
 801c96a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c970 <__swsetup_r>:
 801c970:	b538      	push	{r3, r4, r5, lr}
 801c972:	4b2a      	ldr	r3, [pc, #168]	; (801ca1c <__swsetup_r+0xac>)
 801c974:	4605      	mov	r5, r0
 801c976:	6818      	ldr	r0, [r3, #0]
 801c978:	460c      	mov	r4, r1
 801c97a:	b118      	cbz	r0, 801c984 <__swsetup_r+0x14>
 801c97c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c97e:	b90b      	cbnz	r3, 801c984 <__swsetup_r+0x14>
 801c980:	f000 ff92 	bl	801d8a8 <__sinit>
 801c984:	89a3      	ldrh	r3, [r4, #12]
 801c986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c98a:	0718      	lsls	r0, r3, #28
 801c98c:	d422      	bmi.n	801c9d4 <__swsetup_r+0x64>
 801c98e:	06d9      	lsls	r1, r3, #27
 801c990:	d407      	bmi.n	801c9a2 <__swsetup_r+0x32>
 801c992:	2309      	movs	r3, #9
 801c994:	602b      	str	r3, [r5, #0]
 801c996:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c99a:	81a3      	strh	r3, [r4, #12]
 801c99c:	f04f 30ff 	mov.w	r0, #4294967295
 801c9a0:	e034      	b.n	801ca0c <__swsetup_r+0x9c>
 801c9a2:	0758      	lsls	r0, r3, #29
 801c9a4:	d512      	bpl.n	801c9cc <__swsetup_r+0x5c>
 801c9a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c9a8:	b141      	cbz	r1, 801c9bc <__swsetup_r+0x4c>
 801c9aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c9ae:	4299      	cmp	r1, r3
 801c9b0:	d002      	beq.n	801c9b8 <__swsetup_r+0x48>
 801c9b2:	4628      	mov	r0, r5
 801c9b4:	f001 f808 	bl	801d9c8 <_free_r>
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	6323      	str	r3, [r4, #48]	; 0x30
 801c9bc:	89a3      	ldrh	r3, [r4, #12]
 801c9be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c9c2:	81a3      	strh	r3, [r4, #12]
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	6063      	str	r3, [r4, #4]
 801c9c8:	6923      	ldr	r3, [r4, #16]
 801c9ca:	6023      	str	r3, [r4, #0]
 801c9cc:	89a3      	ldrh	r3, [r4, #12]
 801c9ce:	f043 0308 	orr.w	r3, r3, #8
 801c9d2:	81a3      	strh	r3, [r4, #12]
 801c9d4:	6923      	ldr	r3, [r4, #16]
 801c9d6:	b94b      	cbnz	r3, 801c9ec <__swsetup_r+0x7c>
 801c9d8:	89a3      	ldrh	r3, [r4, #12]
 801c9da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c9e2:	d003      	beq.n	801c9ec <__swsetup_r+0x7c>
 801c9e4:	4621      	mov	r1, r4
 801c9e6:	4628      	mov	r0, r5
 801c9e8:	f001 fa4a 	bl	801de80 <__smakebuf_r>
 801c9ec:	89a0      	ldrh	r0, [r4, #12]
 801c9ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9f2:	f010 0301 	ands.w	r3, r0, #1
 801c9f6:	d00a      	beq.n	801ca0e <__swsetup_r+0x9e>
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	60a3      	str	r3, [r4, #8]
 801c9fc:	6963      	ldr	r3, [r4, #20]
 801c9fe:	425b      	negs	r3, r3
 801ca00:	61a3      	str	r3, [r4, #24]
 801ca02:	6923      	ldr	r3, [r4, #16]
 801ca04:	b943      	cbnz	r3, 801ca18 <__swsetup_r+0xa8>
 801ca06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ca0a:	d1c4      	bne.n	801c996 <__swsetup_r+0x26>
 801ca0c:	bd38      	pop	{r3, r4, r5, pc}
 801ca0e:	0781      	lsls	r1, r0, #30
 801ca10:	bf58      	it	pl
 801ca12:	6963      	ldrpl	r3, [r4, #20]
 801ca14:	60a3      	str	r3, [r4, #8]
 801ca16:	e7f4      	b.n	801ca02 <__swsetup_r+0x92>
 801ca18:	2000      	movs	r0, #0
 801ca1a:	e7f7      	b.n	801ca0c <__swsetup_r+0x9c>
 801ca1c:	200000e8 	.word	0x200000e8

0801ca20 <register_fini>:
 801ca20:	4b02      	ldr	r3, [pc, #8]	; (801ca2c <register_fini+0xc>)
 801ca22:	b113      	cbz	r3, 801ca2a <register_fini+0xa>
 801ca24:	4802      	ldr	r0, [pc, #8]	; (801ca30 <register_fini+0x10>)
 801ca26:	f000 b805 	b.w	801ca34 <atexit>
 801ca2a:	4770      	bx	lr
 801ca2c:	00000000 	.word	0x00000000
 801ca30:	0801d8f9 	.word	0x0801d8f9

0801ca34 <atexit>:
 801ca34:	2300      	movs	r3, #0
 801ca36:	4601      	mov	r1, r0
 801ca38:	461a      	mov	r2, r3
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f002 bfd8 	b.w	801f9f0 <__register_exitproc>

0801ca40 <quorem>:
 801ca40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca44:	6903      	ldr	r3, [r0, #16]
 801ca46:	690c      	ldr	r4, [r1, #16]
 801ca48:	42a3      	cmp	r3, r4
 801ca4a:	4607      	mov	r7, r0
 801ca4c:	db7d      	blt.n	801cb4a <quorem+0x10a>
 801ca4e:	3c01      	subs	r4, #1
 801ca50:	f101 0814 	add.w	r8, r1, #20
 801ca54:	f100 0514 	add.w	r5, r0, #20
 801ca58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ca5c:	9301      	str	r3, [sp, #4]
 801ca5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ca62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ca66:	3301      	adds	r3, #1
 801ca68:	429a      	cmp	r2, r3
 801ca6a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ca6e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ca72:	fbb2 f6f3 	udiv	r6, r2, r3
 801ca76:	d32e      	bcc.n	801cad6 <quorem+0x96>
 801ca78:	f04f 0e00 	mov.w	lr, #0
 801ca7c:	4640      	mov	r0, r8
 801ca7e:	46ac      	mov	ip, r5
 801ca80:	46f2      	mov	sl, lr
 801ca82:	f850 2b04 	ldr.w	r2, [r0], #4
 801ca86:	b293      	uxth	r3, r2
 801ca88:	fb06 e303 	mla	r3, r6, r3, lr
 801ca8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ca90:	0c12      	lsrs	r2, r2, #16
 801ca92:	b29b      	uxth	r3, r3
 801ca94:	fb06 e202 	mla	r2, r6, r2, lr
 801ca98:	ebaa 0303 	sub.w	r3, sl, r3
 801ca9c:	f8dc a000 	ldr.w	sl, [ip]
 801caa0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801caa4:	b292      	uxth	r2, r2
 801caa6:	fa13 f38a 	uxtah	r3, r3, sl
 801caaa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801caae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cab8:	4581      	cmp	r9, r0
 801caba:	f84c 3b04 	str.w	r3, [ip], #4
 801cabe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cac2:	d2de      	bcs.n	801ca82 <quorem+0x42>
 801cac4:	f855 300b 	ldr.w	r3, [r5, fp]
 801cac8:	b92b      	cbnz	r3, 801cad6 <quorem+0x96>
 801caca:	9b01      	ldr	r3, [sp, #4]
 801cacc:	3b04      	subs	r3, #4
 801cace:	429d      	cmp	r5, r3
 801cad0:	461a      	mov	r2, r3
 801cad2:	d32e      	bcc.n	801cb32 <quorem+0xf2>
 801cad4:	613c      	str	r4, [r7, #16]
 801cad6:	4638      	mov	r0, r7
 801cad8:	f001 feb2 	bl	801e840 <__mcmp>
 801cadc:	2800      	cmp	r0, #0
 801cade:	db24      	blt.n	801cb2a <quorem+0xea>
 801cae0:	3601      	adds	r6, #1
 801cae2:	4628      	mov	r0, r5
 801cae4:	f04f 0c00 	mov.w	ip, #0
 801cae8:	f858 2b04 	ldr.w	r2, [r8], #4
 801caec:	f8d0 e000 	ldr.w	lr, [r0]
 801caf0:	b293      	uxth	r3, r2
 801caf2:	ebac 0303 	sub.w	r3, ip, r3
 801caf6:	0c12      	lsrs	r2, r2, #16
 801caf8:	fa13 f38e 	uxtah	r3, r3, lr
 801cafc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cb00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cb04:	b29b      	uxth	r3, r3
 801cb06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb0a:	45c1      	cmp	r9, r8
 801cb0c:	f840 3b04 	str.w	r3, [r0], #4
 801cb10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cb14:	d2e8      	bcs.n	801cae8 <quorem+0xa8>
 801cb16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cb1e:	b922      	cbnz	r2, 801cb2a <quorem+0xea>
 801cb20:	3b04      	subs	r3, #4
 801cb22:	429d      	cmp	r5, r3
 801cb24:	461a      	mov	r2, r3
 801cb26:	d30a      	bcc.n	801cb3e <quorem+0xfe>
 801cb28:	613c      	str	r4, [r7, #16]
 801cb2a:	4630      	mov	r0, r6
 801cb2c:	b003      	add	sp, #12
 801cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb32:	6812      	ldr	r2, [r2, #0]
 801cb34:	3b04      	subs	r3, #4
 801cb36:	2a00      	cmp	r2, #0
 801cb38:	d1cc      	bne.n	801cad4 <quorem+0x94>
 801cb3a:	3c01      	subs	r4, #1
 801cb3c:	e7c7      	b.n	801cace <quorem+0x8e>
 801cb3e:	6812      	ldr	r2, [r2, #0]
 801cb40:	3b04      	subs	r3, #4
 801cb42:	2a00      	cmp	r2, #0
 801cb44:	d1f0      	bne.n	801cb28 <quorem+0xe8>
 801cb46:	3c01      	subs	r4, #1
 801cb48:	e7eb      	b.n	801cb22 <quorem+0xe2>
 801cb4a:	2000      	movs	r0, #0
 801cb4c:	e7ee      	b.n	801cb2c <quorem+0xec>
	...

0801cb50 <_dtoa_r>:
 801cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb54:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801cb56:	b097      	sub	sp, #92	; 0x5c
 801cb58:	4681      	mov	r9, r0
 801cb5a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801cb5c:	4614      	mov	r4, r2
 801cb5e:	461d      	mov	r5, r3
 801cb60:	4692      	mov	sl, r2
 801cb62:	469b      	mov	fp, r3
 801cb64:	b149      	cbz	r1, 801cb7a <_dtoa_r+0x2a>
 801cb66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cb68:	604a      	str	r2, [r1, #4]
 801cb6a:	2301      	movs	r3, #1
 801cb6c:	4093      	lsls	r3, r2
 801cb6e:	608b      	str	r3, [r1, #8]
 801cb70:	f001 fc5b 	bl	801e42a <_Bfree>
 801cb74:	2300      	movs	r3, #0
 801cb76:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 801cb7a:	1e2b      	subs	r3, r5, #0
 801cb7c:	bfaa      	itet	ge
 801cb7e:	2300      	movge	r3, #0
 801cb80:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801cb84:	6033      	strge	r3, [r6, #0]
 801cb86:	4ba0      	ldr	r3, [pc, #640]	; (801ce08 <_dtoa_r+0x2b8>)
 801cb88:	bfbc      	itt	lt
 801cb8a:	2201      	movlt	r2, #1
 801cb8c:	6032      	strlt	r2, [r6, #0]
 801cb8e:	ea33 030b 	bics.w	r3, r3, fp
 801cb92:	d119      	bne.n	801cbc8 <_dtoa_r+0x78>
 801cb94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cb96:	f242 730f 	movw	r3, #9999	; 0x270f
 801cb9a:	6013      	str	r3, [r2, #0]
 801cb9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cba0:	4323      	orrs	r3, r4
 801cba2:	f000 8575 	beq.w	801d690 <_dtoa_r+0xb40>
 801cba6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cba8:	b90b      	cbnz	r3, 801cbae <_dtoa_r+0x5e>
 801cbaa:	4b98      	ldr	r3, [pc, #608]	; (801ce0c <_dtoa_r+0x2bc>)
 801cbac:	e020      	b.n	801cbf0 <_dtoa_r+0xa0>
 801cbae:	4b97      	ldr	r3, [pc, #604]	; (801ce0c <_dtoa_r+0x2bc>)
 801cbb0:	9304      	str	r3, [sp, #16]
 801cbb2:	3303      	adds	r3, #3
 801cbb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cbb6:	6013      	str	r3, [r2, #0]
 801cbb8:	9804      	ldr	r0, [sp, #16]
 801cbba:	b017      	add	sp, #92	; 0x5c
 801cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbc0:	4b93      	ldr	r3, [pc, #588]	; (801ce10 <_dtoa_r+0x2c0>)
 801cbc2:	9304      	str	r3, [sp, #16]
 801cbc4:	3308      	adds	r3, #8
 801cbc6:	e7f5      	b.n	801cbb4 <_dtoa_r+0x64>
 801cbc8:	2200      	movs	r2, #0
 801cbca:	2300      	movs	r3, #0
 801cbcc:	4650      	mov	r0, sl
 801cbce:	4659      	mov	r1, fp
 801cbd0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 801cbd4:	f7e3 ff50 	bl	8000a78 <__aeabi_dcmpeq>
 801cbd8:	4607      	mov	r7, r0
 801cbda:	b158      	cbz	r0, 801cbf4 <_dtoa_r+0xa4>
 801cbdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cbde:	2301      	movs	r3, #1
 801cbe0:	6013      	str	r3, [r2, #0]
 801cbe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	f000 8550 	beq.w	801d68a <_dtoa_r+0xb3a>
 801cbea:	488a      	ldr	r0, [pc, #552]	; (801ce14 <_dtoa_r+0x2c4>)
 801cbec:	6018      	str	r0, [r3, #0]
 801cbee:	1e43      	subs	r3, r0, #1
 801cbf0:	9304      	str	r3, [sp, #16]
 801cbf2:	e7e1      	b.n	801cbb8 <_dtoa_r+0x68>
 801cbf4:	ab14      	add	r3, sp, #80	; 0x50
 801cbf6:	9301      	str	r3, [sp, #4]
 801cbf8:	ab15      	add	r3, sp, #84	; 0x54
 801cbfa:	9300      	str	r3, [sp, #0]
 801cbfc:	4648      	mov	r0, r9
 801cbfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801cc02:	f001 fec1 	bl	801e988 <__d2b>
 801cc06:	f3cb 560a 	ubfx	r6, fp, #20, #11
 801cc0a:	9003      	str	r0, [sp, #12]
 801cc0c:	2e00      	cmp	r6, #0
 801cc0e:	d07b      	beq.n	801cd08 <_dtoa_r+0x1b8>
 801cc10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc12:	9713      	str	r7, [sp, #76]	; 0x4c
 801cc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cc18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cc1c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801cc20:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801cc24:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 801cc28:	4b7b      	ldr	r3, [pc, #492]	; (801ce18 <_dtoa_r+0x2c8>)
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	f7e3 fb04 	bl	8000238 <__aeabi_dsub>
 801cc30:	a36f      	add	r3, pc, #444	; (adr r3, 801cdf0 <_dtoa_r+0x2a0>)
 801cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc36:	f7e3 fcb7 	bl	80005a8 <__aeabi_dmul>
 801cc3a:	a36f      	add	r3, pc, #444	; (adr r3, 801cdf8 <_dtoa_r+0x2a8>)
 801cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc40:	f7e3 fafc 	bl	800023c <__adddf3>
 801cc44:	4604      	mov	r4, r0
 801cc46:	4630      	mov	r0, r6
 801cc48:	460d      	mov	r5, r1
 801cc4a:	f7e3 fc43 	bl	80004d4 <__aeabi_i2d>
 801cc4e:	a36c      	add	r3, pc, #432	; (adr r3, 801ce00 <_dtoa_r+0x2b0>)
 801cc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc54:	f7e3 fca8 	bl	80005a8 <__aeabi_dmul>
 801cc58:	4602      	mov	r2, r0
 801cc5a:	460b      	mov	r3, r1
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	4629      	mov	r1, r5
 801cc60:	f7e3 faec 	bl	800023c <__adddf3>
 801cc64:	4604      	mov	r4, r0
 801cc66:	460d      	mov	r5, r1
 801cc68:	f7e3 ff4e 	bl	8000b08 <__aeabi_d2iz>
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	4680      	mov	r8, r0
 801cc70:	2300      	movs	r3, #0
 801cc72:	4620      	mov	r0, r4
 801cc74:	4629      	mov	r1, r5
 801cc76:	f7e3 ff09 	bl	8000a8c <__aeabi_dcmplt>
 801cc7a:	b148      	cbz	r0, 801cc90 <_dtoa_r+0x140>
 801cc7c:	4640      	mov	r0, r8
 801cc7e:	f7e3 fc29 	bl	80004d4 <__aeabi_i2d>
 801cc82:	4622      	mov	r2, r4
 801cc84:	462b      	mov	r3, r5
 801cc86:	f7e3 fef7 	bl	8000a78 <__aeabi_dcmpeq>
 801cc8a:	b908      	cbnz	r0, 801cc90 <_dtoa_r+0x140>
 801cc8c:	f108 38ff 	add.w	r8, r8, #4294967295
 801cc90:	f1b8 0f16 	cmp.w	r8, #22
 801cc94:	d855      	bhi.n	801cd42 <_dtoa_r+0x1f2>
 801cc96:	4b61      	ldr	r3, [pc, #388]	; (801ce1c <_dtoa_r+0x2cc>)
 801cc98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cca0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cca4:	f7e3 fef2 	bl	8000a8c <__aeabi_dcmplt>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	d04c      	beq.n	801cd46 <_dtoa_r+0x1f6>
 801ccac:	f108 38ff 	add.w	r8, r8, #4294967295
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	930f      	str	r3, [sp, #60]	; 0x3c
 801ccb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ccb6:	1b9e      	subs	r6, r3, r6
 801ccb8:	1e73      	subs	r3, r6, #1
 801ccba:	9309      	str	r3, [sp, #36]	; 0x24
 801ccbc:	bf45      	ittet	mi
 801ccbe:	f1c6 0301 	rsbmi	r3, r6, #1
 801ccc2:	9306      	strmi	r3, [sp, #24]
 801ccc4:	2300      	movpl	r3, #0
 801ccc6:	2300      	movmi	r3, #0
 801ccc8:	bf4c      	ite	mi
 801ccca:	9309      	strmi	r3, [sp, #36]	; 0x24
 801cccc:	9306      	strpl	r3, [sp, #24]
 801ccce:	f1b8 0f00 	cmp.w	r8, #0
 801ccd2:	db3a      	blt.n	801cd4a <_dtoa_r+0x1fa>
 801ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccd6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ccda:	4443      	add	r3, r8
 801ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 801ccde:	2300      	movs	r3, #0
 801cce0:	930a      	str	r3, [sp, #40]	; 0x28
 801cce2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cce4:	2b09      	cmp	r3, #9
 801cce6:	d86a      	bhi.n	801cdbe <_dtoa_r+0x26e>
 801cce8:	2b05      	cmp	r3, #5
 801ccea:	bfc4      	itt	gt
 801ccec:	3b04      	subgt	r3, #4
 801ccee:	9320      	strgt	r3, [sp, #128]	; 0x80
 801ccf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ccf2:	f1a3 0302 	sub.w	r3, r3, #2
 801ccf6:	bfcc      	ite	gt
 801ccf8:	2400      	movgt	r4, #0
 801ccfa:	2401      	movle	r4, #1
 801ccfc:	2b03      	cmp	r3, #3
 801ccfe:	d869      	bhi.n	801cdd4 <_dtoa_r+0x284>
 801cd00:	e8df f003 	tbb	[pc, r3]
 801cd04:	5b383a2d 	.word	0x5b383a2d
 801cd08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 801cd0c:	441e      	add	r6, r3
 801cd0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
 801cd12:	2b20      	cmp	r3, #32
 801cd14:	bfc3      	ittte	gt
 801cd16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cd1a:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 801cd1e:	fa0b f303 	lslgt.w	r3, fp, r3
 801cd22:	f1c3 0320 	rsble	r3, r3, #32
 801cd26:	bfc6      	itte	gt
 801cd28:	fa24 f000 	lsrgt.w	r0, r4, r0
 801cd2c:	4318      	orrgt	r0, r3
 801cd2e:	fa04 f003 	lslle.w	r0, r4, r3
 801cd32:	f7e3 fbbf 	bl	80004b4 <__aeabi_ui2d>
 801cd36:	2301      	movs	r3, #1
 801cd38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801cd3c:	3e01      	subs	r6, #1
 801cd3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cd40:	e772      	b.n	801cc28 <_dtoa_r+0xd8>
 801cd42:	2301      	movs	r3, #1
 801cd44:	e7b5      	b.n	801ccb2 <_dtoa_r+0x162>
 801cd46:	900f      	str	r0, [sp, #60]	; 0x3c
 801cd48:	e7b4      	b.n	801ccb4 <_dtoa_r+0x164>
 801cd4a:	9b06      	ldr	r3, [sp, #24]
 801cd4c:	eba3 0308 	sub.w	r3, r3, r8
 801cd50:	9306      	str	r3, [sp, #24]
 801cd52:	f1c8 0300 	rsb	r3, r8, #0
 801cd56:	930a      	str	r3, [sp, #40]	; 0x28
 801cd58:	2300      	movs	r3, #0
 801cd5a:	930e      	str	r3, [sp, #56]	; 0x38
 801cd5c:	e7c1      	b.n	801cce2 <_dtoa_r+0x192>
 801cd5e:	2300      	movs	r3, #0
 801cd60:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	dc38      	bgt.n	801cdda <_dtoa_r+0x28a>
 801cd68:	2301      	movs	r3, #1
 801cd6a:	9308      	str	r3, [sp, #32]
 801cd6c:	9305      	str	r3, [sp, #20]
 801cd6e:	461a      	mov	r2, r3
 801cd70:	9221      	str	r2, [sp, #132]	; 0x84
 801cd72:	e00b      	b.n	801cd8c <_dtoa_r+0x23c>
 801cd74:	2301      	movs	r3, #1
 801cd76:	e7f3      	b.n	801cd60 <_dtoa_r+0x210>
 801cd78:	2300      	movs	r3, #0
 801cd7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cd7e:	4443      	add	r3, r8
 801cd80:	9308      	str	r3, [sp, #32]
 801cd82:	3301      	adds	r3, #1
 801cd84:	2b01      	cmp	r3, #1
 801cd86:	9305      	str	r3, [sp, #20]
 801cd88:	bfb8      	it	lt
 801cd8a:	2301      	movlt	r3, #1
 801cd8c:	2200      	movs	r2, #0
 801cd8e:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 801cd92:	2204      	movs	r2, #4
 801cd94:	f102 0014 	add.w	r0, r2, #20
 801cd98:	4298      	cmp	r0, r3
 801cd9a:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 801cd9e:	d920      	bls.n	801cde2 <_dtoa_r+0x292>
 801cda0:	4648      	mov	r0, r9
 801cda2:	f001 fb1d 	bl	801e3e0 <_Balloc>
 801cda6:	9004      	str	r0, [sp, #16]
 801cda8:	2800      	cmp	r0, #0
 801cdaa:	d13d      	bne.n	801ce28 <_dtoa_r+0x2d8>
 801cdac:	4b1c      	ldr	r3, [pc, #112]	; (801ce20 <_dtoa_r+0x2d0>)
 801cdae:	4602      	mov	r2, r0
 801cdb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cdb4:	481b      	ldr	r0, [pc, #108]	; (801ce24 <_dtoa_r+0x2d4>)
 801cdb6:	f002 fe5d 	bl	801fa74 <__assert_func>
 801cdba:	2301      	movs	r3, #1
 801cdbc:	e7dd      	b.n	801cd7a <_dtoa_r+0x22a>
 801cdbe:	2401      	movs	r4, #1
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	9320      	str	r3, [sp, #128]	; 0x80
 801cdc4:	940b      	str	r4, [sp, #44]	; 0x2c
 801cdc6:	f04f 33ff 	mov.w	r3, #4294967295
 801cdca:	9308      	str	r3, [sp, #32]
 801cdcc:	9305      	str	r3, [sp, #20]
 801cdce:	2200      	movs	r2, #0
 801cdd0:	2312      	movs	r3, #18
 801cdd2:	e7cd      	b.n	801cd70 <_dtoa_r+0x220>
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	930b      	str	r3, [sp, #44]	; 0x2c
 801cdd8:	e7f5      	b.n	801cdc6 <_dtoa_r+0x276>
 801cdda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cddc:	9308      	str	r3, [sp, #32]
 801cdde:	9305      	str	r3, [sp, #20]
 801cde0:	e7d4      	b.n	801cd8c <_dtoa_r+0x23c>
 801cde2:	3101      	adds	r1, #1
 801cde4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 801cde8:	0052      	lsls	r2, r2, #1
 801cdea:	e7d3      	b.n	801cd94 <_dtoa_r+0x244>
 801cdec:	f3af 8000 	nop.w
 801cdf0:	636f4361 	.word	0x636f4361
 801cdf4:	3fd287a7 	.word	0x3fd287a7
 801cdf8:	8b60c8b3 	.word	0x8b60c8b3
 801cdfc:	3fc68a28 	.word	0x3fc68a28
 801ce00:	509f79fb 	.word	0x509f79fb
 801ce04:	3fd34413 	.word	0x3fd34413
 801ce08:	7ff00000 	.word	0x7ff00000
 801ce0c:	0802094c 	.word	0x0802094c
 801ce10:	08020950 	.word	0x08020950
 801ce14:	0802090b 	.word	0x0802090b
 801ce18:	3ff80000 	.word	0x3ff80000
 801ce1c:	08020a50 	.word	0x08020a50
 801ce20:	08020959 	.word	0x08020959
 801ce24:	0802096a 	.word	0x0802096a
 801ce28:	9b04      	ldr	r3, [sp, #16]
 801ce2a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 801ce2e:	9b05      	ldr	r3, [sp, #20]
 801ce30:	2b0e      	cmp	r3, #14
 801ce32:	f200 80a1 	bhi.w	801cf78 <_dtoa_r+0x428>
 801ce36:	2c00      	cmp	r4, #0
 801ce38:	f000 809e 	beq.w	801cf78 <_dtoa_r+0x428>
 801ce3c:	f1b8 0f00 	cmp.w	r8, #0
 801ce40:	dd34      	ble.n	801ceac <_dtoa_r+0x35c>
 801ce42:	4a96      	ldr	r2, [pc, #600]	; (801d09c <_dtoa_r+0x54c>)
 801ce44:	f008 030f 	and.w	r3, r8, #15
 801ce48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ce4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 801ce50:	f418 7f80 	tst.w	r8, #256	; 0x100
 801ce54:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801ce58:	ea4f 1528 	mov.w	r5, r8, asr #4
 801ce5c:	d016      	beq.n	801ce8c <_dtoa_r+0x33c>
 801ce5e:	4b90      	ldr	r3, [pc, #576]	; (801d0a0 <_dtoa_r+0x550>)
 801ce60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ce64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ce68:	f7e3 fcc8 	bl	80007fc <__aeabi_ddiv>
 801ce6c:	f005 050f 	and.w	r5, r5, #15
 801ce70:	4682      	mov	sl, r0
 801ce72:	468b      	mov	fp, r1
 801ce74:	2603      	movs	r6, #3
 801ce76:	4c8a      	ldr	r4, [pc, #552]	; (801d0a0 <_dtoa_r+0x550>)
 801ce78:	b955      	cbnz	r5, 801ce90 <_dtoa_r+0x340>
 801ce7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ce7e:	4650      	mov	r0, sl
 801ce80:	4659      	mov	r1, fp
 801ce82:	f7e3 fcbb 	bl	80007fc <__aeabi_ddiv>
 801ce86:	4682      	mov	sl, r0
 801ce88:	468b      	mov	fp, r1
 801ce8a:	e028      	b.n	801cede <_dtoa_r+0x38e>
 801ce8c:	2602      	movs	r6, #2
 801ce8e:	e7f2      	b.n	801ce76 <_dtoa_r+0x326>
 801ce90:	07e9      	lsls	r1, r5, #31
 801ce92:	d508      	bpl.n	801cea6 <_dtoa_r+0x356>
 801ce94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ce98:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ce9c:	f7e3 fb84 	bl	80005a8 <__aeabi_dmul>
 801cea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cea4:	3601      	adds	r6, #1
 801cea6:	106d      	asrs	r5, r5, #1
 801cea8:	3408      	adds	r4, #8
 801ceaa:	e7e5      	b.n	801ce78 <_dtoa_r+0x328>
 801ceac:	f000 809e 	beq.w	801cfec <_dtoa_r+0x49c>
 801ceb0:	f1c8 0400 	rsb	r4, r8, #0
 801ceb4:	4b79      	ldr	r3, [pc, #484]	; (801d09c <_dtoa_r+0x54c>)
 801ceb6:	4d7a      	ldr	r5, [pc, #488]	; (801d0a0 <_dtoa_r+0x550>)
 801ceb8:	f004 020f 	and.w	r2, r4, #15
 801cebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cec8:	f7e3 fb6e 	bl	80005a8 <__aeabi_dmul>
 801cecc:	1124      	asrs	r4, r4, #4
 801cece:	4682      	mov	sl, r0
 801ced0:	468b      	mov	fp, r1
 801ced2:	2300      	movs	r3, #0
 801ced4:	2602      	movs	r6, #2
 801ced6:	2c00      	cmp	r4, #0
 801ced8:	d17d      	bne.n	801cfd6 <_dtoa_r+0x486>
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d1d3      	bne.n	801ce86 <_dtoa_r+0x336>
 801cede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	f000 8085 	beq.w	801cff0 <_dtoa_r+0x4a0>
 801cee6:	4b6f      	ldr	r3, [pc, #444]	; (801d0a4 <_dtoa_r+0x554>)
 801cee8:	2200      	movs	r2, #0
 801ceea:	4650      	mov	r0, sl
 801ceec:	4659      	mov	r1, fp
 801ceee:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 801cef2:	f7e3 fdcb 	bl	8000a8c <__aeabi_dcmplt>
 801cef6:	2800      	cmp	r0, #0
 801cef8:	d07a      	beq.n	801cff0 <_dtoa_r+0x4a0>
 801cefa:	9b05      	ldr	r3, [sp, #20]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d077      	beq.n	801cff0 <_dtoa_r+0x4a0>
 801cf00:	9b08      	ldr	r3, [sp, #32]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	dd36      	ble.n	801cf74 <_dtoa_r+0x424>
 801cf06:	4650      	mov	r0, sl
 801cf08:	4659      	mov	r1, fp
 801cf0a:	4b67      	ldr	r3, [pc, #412]	; (801d0a8 <_dtoa_r+0x558>)
 801cf0c:	2200      	movs	r2, #0
 801cf0e:	f7e3 fb4b 	bl	80005a8 <__aeabi_dmul>
 801cf12:	9c08      	ldr	r4, [sp, #32]
 801cf14:	f108 35ff 	add.w	r5, r8, #4294967295
 801cf18:	4682      	mov	sl, r0
 801cf1a:	468b      	mov	fp, r1
 801cf1c:	3601      	adds	r6, #1
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7e3 fad8 	bl	80004d4 <__aeabi_i2d>
 801cf24:	4652      	mov	r2, sl
 801cf26:	465b      	mov	r3, fp
 801cf28:	f7e3 fb3e 	bl	80005a8 <__aeabi_dmul>
 801cf2c:	4b5f      	ldr	r3, [pc, #380]	; (801d0ac <_dtoa_r+0x55c>)
 801cf2e:	2200      	movs	r2, #0
 801cf30:	f7e3 f984 	bl	800023c <__adddf3>
 801cf34:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801cf38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cf3c:	9611      	str	r6, [sp, #68]	; 0x44
 801cf3e:	2c00      	cmp	r4, #0
 801cf40:	d159      	bne.n	801cff6 <_dtoa_r+0x4a6>
 801cf42:	4b5b      	ldr	r3, [pc, #364]	; (801d0b0 <_dtoa_r+0x560>)
 801cf44:	2200      	movs	r2, #0
 801cf46:	4650      	mov	r0, sl
 801cf48:	4659      	mov	r1, fp
 801cf4a:	f7e3 f975 	bl	8000238 <__aeabi_dsub>
 801cf4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf50:	4633      	mov	r3, r6
 801cf52:	4682      	mov	sl, r0
 801cf54:	468b      	mov	fp, r1
 801cf56:	f7e3 fdb7 	bl	8000ac8 <__aeabi_dcmpgt>
 801cf5a:	2800      	cmp	r0, #0
 801cf5c:	f040 828b 	bne.w	801d476 <_dtoa_r+0x926>
 801cf60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801cf66:	4650      	mov	r0, sl
 801cf68:	4659      	mov	r1, fp
 801cf6a:	f7e3 fd8f 	bl	8000a8c <__aeabi_dcmplt>
 801cf6e:	2800      	cmp	r0, #0
 801cf70:	f040 827f 	bne.w	801d472 <_dtoa_r+0x922>
 801cf74:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 801cf78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	f2c0 814d 	blt.w	801d21a <_dtoa_r+0x6ca>
 801cf80:	f1b8 0f0e 	cmp.w	r8, #14
 801cf84:	f300 8149 	bgt.w	801d21a <_dtoa_r+0x6ca>
 801cf88:	4b44      	ldr	r3, [pc, #272]	; (801d09c <_dtoa_r+0x54c>)
 801cf8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801cf8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cf92:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cf96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	f280 80d6 	bge.w	801d14a <_dtoa_r+0x5fa>
 801cf9e:	9b05      	ldr	r3, [sp, #20]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	f300 80d2 	bgt.w	801d14a <_dtoa_r+0x5fa>
 801cfa6:	f040 8263 	bne.w	801d470 <_dtoa_r+0x920>
 801cfaa:	4b41      	ldr	r3, [pc, #260]	; (801d0b0 <_dtoa_r+0x560>)
 801cfac:	2200      	movs	r2, #0
 801cfae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cfb2:	f7e3 faf9 	bl	80005a8 <__aeabi_dmul>
 801cfb6:	4652      	mov	r2, sl
 801cfb8:	465b      	mov	r3, fp
 801cfba:	f7e3 fd7b 	bl	8000ab4 <__aeabi_dcmpge>
 801cfbe:	9c05      	ldr	r4, [sp, #20]
 801cfc0:	4625      	mov	r5, r4
 801cfc2:	2800      	cmp	r0, #0
 801cfc4:	f040 823c 	bne.w	801d440 <_dtoa_r+0x8f0>
 801cfc8:	9e04      	ldr	r6, [sp, #16]
 801cfca:	2331      	movs	r3, #49	; 0x31
 801cfcc:	f806 3b01 	strb.w	r3, [r6], #1
 801cfd0:	f108 0801 	add.w	r8, r8, #1
 801cfd4:	e238      	b.n	801d448 <_dtoa_r+0x8f8>
 801cfd6:	07e2      	lsls	r2, r4, #31
 801cfd8:	d505      	bpl.n	801cfe6 <_dtoa_r+0x496>
 801cfda:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cfde:	f7e3 fae3 	bl	80005a8 <__aeabi_dmul>
 801cfe2:	3601      	adds	r6, #1
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	1064      	asrs	r4, r4, #1
 801cfe8:	3508      	adds	r5, #8
 801cfea:	e774      	b.n	801ced6 <_dtoa_r+0x386>
 801cfec:	2602      	movs	r6, #2
 801cfee:	e776      	b.n	801cede <_dtoa_r+0x38e>
 801cff0:	9c05      	ldr	r4, [sp, #20]
 801cff2:	4645      	mov	r5, r8
 801cff4:	e793      	b.n	801cf1e <_dtoa_r+0x3ce>
 801cff6:	9904      	ldr	r1, [sp, #16]
 801cff8:	4b28      	ldr	r3, [pc, #160]	; (801d09c <_dtoa_r+0x54c>)
 801cffa:	4421      	add	r1, r4
 801cffc:	9112      	str	r1, [sp, #72]	; 0x48
 801cffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d004:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801d008:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d00c:	2900      	cmp	r1, #0
 801d00e:	d053      	beq.n	801d0b8 <_dtoa_r+0x568>
 801d010:	4928      	ldr	r1, [pc, #160]	; (801d0b4 <_dtoa_r+0x564>)
 801d012:	2000      	movs	r0, #0
 801d014:	f7e3 fbf2 	bl	80007fc <__aeabi_ddiv>
 801d018:	4632      	mov	r2, r6
 801d01a:	463b      	mov	r3, r7
 801d01c:	f7e3 f90c 	bl	8000238 <__aeabi_dsub>
 801d020:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d024:	9e04      	ldr	r6, [sp, #16]
 801d026:	4659      	mov	r1, fp
 801d028:	4650      	mov	r0, sl
 801d02a:	f7e3 fd6d 	bl	8000b08 <__aeabi_d2iz>
 801d02e:	4604      	mov	r4, r0
 801d030:	f7e3 fa50 	bl	80004d4 <__aeabi_i2d>
 801d034:	4602      	mov	r2, r0
 801d036:	460b      	mov	r3, r1
 801d038:	4650      	mov	r0, sl
 801d03a:	4659      	mov	r1, fp
 801d03c:	f7e3 f8fc 	bl	8000238 <__aeabi_dsub>
 801d040:	3430      	adds	r4, #48	; 0x30
 801d042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d046:	f806 4b01 	strb.w	r4, [r6], #1
 801d04a:	4682      	mov	sl, r0
 801d04c:	468b      	mov	fp, r1
 801d04e:	f7e3 fd1d 	bl	8000a8c <__aeabi_dcmplt>
 801d052:	2800      	cmp	r0, #0
 801d054:	d171      	bne.n	801d13a <_dtoa_r+0x5ea>
 801d056:	4652      	mov	r2, sl
 801d058:	465b      	mov	r3, fp
 801d05a:	4912      	ldr	r1, [pc, #72]	; (801d0a4 <_dtoa_r+0x554>)
 801d05c:	2000      	movs	r0, #0
 801d05e:	f7e3 f8eb 	bl	8000238 <__aeabi_dsub>
 801d062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d066:	f7e3 fd11 	bl	8000a8c <__aeabi_dcmplt>
 801d06a:	2800      	cmp	r0, #0
 801d06c:	f040 80b7 	bne.w	801d1de <_dtoa_r+0x68e>
 801d070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d072:	429e      	cmp	r6, r3
 801d074:	f43f af7e 	beq.w	801cf74 <_dtoa_r+0x424>
 801d078:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d07c:	4b0a      	ldr	r3, [pc, #40]	; (801d0a8 <_dtoa_r+0x558>)
 801d07e:	2200      	movs	r2, #0
 801d080:	f7e3 fa92 	bl	80005a8 <__aeabi_dmul>
 801d084:	4b08      	ldr	r3, [pc, #32]	; (801d0a8 <_dtoa_r+0x558>)
 801d086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d08a:	2200      	movs	r2, #0
 801d08c:	4650      	mov	r0, sl
 801d08e:	4659      	mov	r1, fp
 801d090:	f7e3 fa8a 	bl	80005a8 <__aeabi_dmul>
 801d094:	4682      	mov	sl, r0
 801d096:	468b      	mov	fp, r1
 801d098:	e7c5      	b.n	801d026 <_dtoa_r+0x4d6>
 801d09a:	bf00      	nop
 801d09c:	08020a50 	.word	0x08020a50
 801d0a0:	08020a28 	.word	0x08020a28
 801d0a4:	3ff00000 	.word	0x3ff00000
 801d0a8:	40240000 	.word	0x40240000
 801d0ac:	401c0000 	.word	0x401c0000
 801d0b0:	40140000 	.word	0x40140000
 801d0b4:	3fe00000 	.word	0x3fe00000
 801d0b8:	4630      	mov	r0, r6
 801d0ba:	4639      	mov	r1, r7
 801d0bc:	f7e3 fa74 	bl	80005a8 <__aeabi_dmul>
 801d0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801d0c4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d0c6:	9e04      	ldr	r6, [sp, #16]
 801d0c8:	4659      	mov	r1, fp
 801d0ca:	4650      	mov	r0, sl
 801d0cc:	f7e3 fd1c 	bl	8000b08 <__aeabi_d2iz>
 801d0d0:	4604      	mov	r4, r0
 801d0d2:	f7e3 f9ff 	bl	80004d4 <__aeabi_i2d>
 801d0d6:	3430      	adds	r4, #48	; 0x30
 801d0d8:	4602      	mov	r2, r0
 801d0da:	460b      	mov	r3, r1
 801d0dc:	4650      	mov	r0, sl
 801d0de:	4659      	mov	r1, fp
 801d0e0:	f7e3 f8aa 	bl	8000238 <__aeabi_dsub>
 801d0e4:	f806 4b01 	strb.w	r4, [r6], #1
 801d0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d0ea:	429e      	cmp	r6, r3
 801d0ec:	4682      	mov	sl, r0
 801d0ee:	468b      	mov	fp, r1
 801d0f0:	f04f 0200 	mov.w	r2, #0
 801d0f4:	d123      	bne.n	801d13e <_dtoa_r+0x5ee>
 801d0f6:	4bb0      	ldr	r3, [pc, #704]	; (801d3b8 <_dtoa_r+0x868>)
 801d0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801d0fc:	f7e3 f89e 	bl	800023c <__adddf3>
 801d100:	4602      	mov	r2, r0
 801d102:	460b      	mov	r3, r1
 801d104:	4650      	mov	r0, sl
 801d106:	4659      	mov	r1, fp
 801d108:	f7e3 fcde 	bl	8000ac8 <__aeabi_dcmpgt>
 801d10c:	2800      	cmp	r0, #0
 801d10e:	d166      	bne.n	801d1de <_dtoa_r+0x68e>
 801d110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d114:	49a8      	ldr	r1, [pc, #672]	; (801d3b8 <_dtoa_r+0x868>)
 801d116:	2000      	movs	r0, #0
 801d118:	f7e3 f88e 	bl	8000238 <__aeabi_dsub>
 801d11c:	4602      	mov	r2, r0
 801d11e:	460b      	mov	r3, r1
 801d120:	4650      	mov	r0, sl
 801d122:	4659      	mov	r1, fp
 801d124:	f7e3 fcb2 	bl	8000a8c <__aeabi_dcmplt>
 801d128:	2800      	cmp	r0, #0
 801d12a:	f43f af23 	beq.w	801cf74 <_dtoa_r+0x424>
 801d12e:	463e      	mov	r6, r7
 801d130:	3f01      	subs	r7, #1
 801d132:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d136:	2b30      	cmp	r3, #48	; 0x30
 801d138:	d0f9      	beq.n	801d12e <_dtoa_r+0x5de>
 801d13a:	46a8      	mov	r8, r5
 801d13c:	e03e      	b.n	801d1bc <_dtoa_r+0x66c>
 801d13e:	4b9f      	ldr	r3, [pc, #636]	; (801d3bc <_dtoa_r+0x86c>)
 801d140:	f7e3 fa32 	bl	80005a8 <__aeabi_dmul>
 801d144:	4682      	mov	sl, r0
 801d146:	468b      	mov	fp, r1
 801d148:	e7be      	b.n	801d0c8 <_dtoa_r+0x578>
 801d14a:	465d      	mov	r5, fp
 801d14c:	9e04      	ldr	r6, [sp, #16]
 801d14e:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801d3bc <_dtoa_r+0x86c>
 801d152:	4654      	mov	r4, sl
 801d154:	f04f 0a00 	mov.w	sl, #0
 801d158:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d15c:	4620      	mov	r0, r4
 801d15e:	4629      	mov	r1, r5
 801d160:	f7e3 fb4c 	bl	80007fc <__aeabi_ddiv>
 801d164:	f7e3 fcd0 	bl	8000b08 <__aeabi_d2iz>
 801d168:	4607      	mov	r7, r0
 801d16a:	f7e3 f9b3 	bl	80004d4 <__aeabi_i2d>
 801d16e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d172:	f7e3 fa19 	bl	80005a8 <__aeabi_dmul>
 801d176:	4602      	mov	r2, r0
 801d178:	460b      	mov	r3, r1
 801d17a:	4620      	mov	r0, r4
 801d17c:	4629      	mov	r1, r5
 801d17e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801d182:	f7e3 f859 	bl	8000238 <__aeabi_dsub>
 801d186:	f806 4b01 	strb.w	r4, [r6], #1
 801d18a:	9c04      	ldr	r4, [sp, #16]
 801d18c:	9d05      	ldr	r5, [sp, #20]
 801d18e:	1b34      	subs	r4, r6, r4
 801d190:	42a5      	cmp	r5, r4
 801d192:	4602      	mov	r2, r0
 801d194:	460b      	mov	r3, r1
 801d196:	d133      	bne.n	801d200 <_dtoa_r+0x6b0>
 801d198:	f7e3 f850 	bl	800023c <__adddf3>
 801d19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d1a0:	4604      	mov	r4, r0
 801d1a2:	460d      	mov	r5, r1
 801d1a4:	f7e3 fc90 	bl	8000ac8 <__aeabi_dcmpgt>
 801d1a8:	b9c0      	cbnz	r0, 801d1dc <_dtoa_r+0x68c>
 801d1aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d1ae:	4620      	mov	r0, r4
 801d1b0:	4629      	mov	r1, r5
 801d1b2:	f7e3 fc61 	bl	8000a78 <__aeabi_dcmpeq>
 801d1b6:	b108      	cbz	r0, 801d1bc <_dtoa_r+0x66c>
 801d1b8:	07fb      	lsls	r3, r7, #31
 801d1ba:	d40f      	bmi.n	801d1dc <_dtoa_r+0x68c>
 801d1bc:	4648      	mov	r0, r9
 801d1be:	9903      	ldr	r1, [sp, #12]
 801d1c0:	f001 f933 	bl	801e42a <_Bfree>
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	7033      	strb	r3, [r6, #0]
 801d1c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d1ca:	f108 0001 	add.w	r0, r8, #1
 801d1ce:	6018      	str	r0, [r3, #0]
 801d1d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	f43f acf0 	beq.w	801cbb8 <_dtoa_r+0x68>
 801d1d8:	601e      	str	r6, [r3, #0]
 801d1da:	e4ed      	b.n	801cbb8 <_dtoa_r+0x68>
 801d1dc:	4645      	mov	r5, r8
 801d1de:	4633      	mov	r3, r6
 801d1e0:	461e      	mov	r6, r3
 801d1e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d1e6:	2a39      	cmp	r2, #57	; 0x39
 801d1e8:	d106      	bne.n	801d1f8 <_dtoa_r+0x6a8>
 801d1ea:	9a04      	ldr	r2, [sp, #16]
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d1f7      	bne.n	801d1e0 <_dtoa_r+0x690>
 801d1f0:	9904      	ldr	r1, [sp, #16]
 801d1f2:	2230      	movs	r2, #48	; 0x30
 801d1f4:	3501      	adds	r5, #1
 801d1f6:	700a      	strb	r2, [r1, #0]
 801d1f8:	781a      	ldrb	r2, [r3, #0]
 801d1fa:	3201      	adds	r2, #1
 801d1fc:	701a      	strb	r2, [r3, #0]
 801d1fe:	e79c      	b.n	801d13a <_dtoa_r+0x5ea>
 801d200:	4652      	mov	r2, sl
 801d202:	465b      	mov	r3, fp
 801d204:	f7e3 f9d0 	bl	80005a8 <__aeabi_dmul>
 801d208:	2200      	movs	r2, #0
 801d20a:	2300      	movs	r3, #0
 801d20c:	4604      	mov	r4, r0
 801d20e:	460d      	mov	r5, r1
 801d210:	f7e3 fc32 	bl	8000a78 <__aeabi_dcmpeq>
 801d214:	2800      	cmp	r0, #0
 801d216:	d09f      	beq.n	801d158 <_dtoa_r+0x608>
 801d218:	e7d0      	b.n	801d1bc <_dtoa_r+0x66c>
 801d21a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d21c:	2a00      	cmp	r2, #0
 801d21e:	f000 80cf 	beq.w	801d3c0 <_dtoa_r+0x870>
 801d222:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d224:	2a01      	cmp	r2, #1
 801d226:	f300 80ad 	bgt.w	801d384 <_dtoa_r+0x834>
 801d22a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d22c:	2a00      	cmp	r2, #0
 801d22e:	f000 80a5 	beq.w	801d37c <_dtoa_r+0x82c>
 801d232:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d238:	9e06      	ldr	r6, [sp, #24]
 801d23a:	9a06      	ldr	r2, [sp, #24]
 801d23c:	441a      	add	r2, r3
 801d23e:	9206      	str	r2, [sp, #24]
 801d240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d242:	2101      	movs	r1, #1
 801d244:	441a      	add	r2, r3
 801d246:	4648      	mov	r0, r9
 801d248:	9209      	str	r2, [sp, #36]	; 0x24
 801d24a:	f001 f98b 	bl	801e564 <__i2b>
 801d24e:	4605      	mov	r5, r0
 801d250:	2e00      	cmp	r6, #0
 801d252:	dd0c      	ble.n	801d26e <_dtoa_r+0x71e>
 801d254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d256:	2b00      	cmp	r3, #0
 801d258:	dd09      	ble.n	801d26e <_dtoa_r+0x71e>
 801d25a:	42b3      	cmp	r3, r6
 801d25c:	9a06      	ldr	r2, [sp, #24]
 801d25e:	bfa8      	it	ge
 801d260:	4633      	movge	r3, r6
 801d262:	1ad2      	subs	r2, r2, r3
 801d264:	9206      	str	r2, [sp, #24]
 801d266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d268:	1af6      	subs	r6, r6, r3
 801d26a:	1ad3      	subs	r3, r2, r3
 801d26c:	9309      	str	r3, [sp, #36]	; 0x24
 801d26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d270:	b1f3      	cbz	r3, 801d2b0 <_dtoa_r+0x760>
 801d272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d274:	2b00      	cmp	r3, #0
 801d276:	f000 80a7 	beq.w	801d3c8 <_dtoa_r+0x878>
 801d27a:	2c00      	cmp	r4, #0
 801d27c:	dd10      	ble.n	801d2a0 <_dtoa_r+0x750>
 801d27e:	4629      	mov	r1, r5
 801d280:	4622      	mov	r2, r4
 801d282:	4648      	mov	r0, r9
 801d284:	f001 fa2c 	bl	801e6e0 <__pow5mult>
 801d288:	9a03      	ldr	r2, [sp, #12]
 801d28a:	4601      	mov	r1, r0
 801d28c:	4605      	mov	r5, r0
 801d28e:	4648      	mov	r0, r9
 801d290:	f001 f97e 	bl	801e590 <__multiply>
 801d294:	9903      	ldr	r1, [sp, #12]
 801d296:	4607      	mov	r7, r0
 801d298:	4648      	mov	r0, r9
 801d29a:	f001 f8c6 	bl	801e42a <_Bfree>
 801d29e:	9703      	str	r7, [sp, #12]
 801d2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2a2:	1b1a      	subs	r2, r3, r4
 801d2a4:	d004      	beq.n	801d2b0 <_dtoa_r+0x760>
 801d2a6:	9903      	ldr	r1, [sp, #12]
 801d2a8:	4648      	mov	r0, r9
 801d2aa:	f001 fa19 	bl	801e6e0 <__pow5mult>
 801d2ae:	9003      	str	r0, [sp, #12]
 801d2b0:	2101      	movs	r1, #1
 801d2b2:	4648      	mov	r0, r9
 801d2b4:	f001 f956 	bl	801e564 <__i2b>
 801d2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	4604      	mov	r4, r0
 801d2be:	f340 8085 	ble.w	801d3cc <_dtoa_r+0x87c>
 801d2c2:	461a      	mov	r2, r3
 801d2c4:	4601      	mov	r1, r0
 801d2c6:	4648      	mov	r0, r9
 801d2c8:	f001 fa0a 	bl	801e6e0 <__pow5mult>
 801d2cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d2ce:	2b01      	cmp	r3, #1
 801d2d0:	4604      	mov	r4, r0
 801d2d2:	dd7e      	ble.n	801d3d2 <_dtoa_r+0x882>
 801d2d4:	2700      	movs	r7, #0
 801d2d6:	6923      	ldr	r3, [r4, #16]
 801d2d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d2dc:	6918      	ldr	r0, [r3, #16]
 801d2de:	f001 f8f3 	bl	801e4c8 <__hi0bits>
 801d2e2:	f1c0 0020 	rsb	r0, r0, #32
 801d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e8:	4418      	add	r0, r3
 801d2ea:	f010 001f 	ands.w	r0, r0, #31
 801d2ee:	f000 808e 	beq.w	801d40e <_dtoa_r+0x8be>
 801d2f2:	f1c0 0320 	rsb	r3, r0, #32
 801d2f6:	2b04      	cmp	r3, #4
 801d2f8:	f340 8087 	ble.w	801d40a <_dtoa_r+0x8ba>
 801d2fc:	f1c0 001c 	rsb	r0, r0, #28
 801d300:	9b06      	ldr	r3, [sp, #24]
 801d302:	4403      	add	r3, r0
 801d304:	9306      	str	r3, [sp, #24]
 801d306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d308:	4403      	add	r3, r0
 801d30a:	4406      	add	r6, r0
 801d30c:	9309      	str	r3, [sp, #36]	; 0x24
 801d30e:	9b06      	ldr	r3, [sp, #24]
 801d310:	2b00      	cmp	r3, #0
 801d312:	dd05      	ble.n	801d320 <_dtoa_r+0x7d0>
 801d314:	9903      	ldr	r1, [sp, #12]
 801d316:	461a      	mov	r2, r3
 801d318:	4648      	mov	r0, r9
 801d31a:	f001 fa21 	bl	801e760 <__lshift>
 801d31e:	9003      	str	r0, [sp, #12]
 801d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d322:	2b00      	cmp	r3, #0
 801d324:	dd05      	ble.n	801d332 <_dtoa_r+0x7e2>
 801d326:	4621      	mov	r1, r4
 801d328:	461a      	mov	r2, r3
 801d32a:	4648      	mov	r0, r9
 801d32c:	f001 fa18 	bl	801e760 <__lshift>
 801d330:	4604      	mov	r4, r0
 801d332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d334:	2b00      	cmp	r3, #0
 801d336:	d06c      	beq.n	801d412 <_dtoa_r+0x8c2>
 801d338:	9803      	ldr	r0, [sp, #12]
 801d33a:	4621      	mov	r1, r4
 801d33c:	f001 fa80 	bl	801e840 <__mcmp>
 801d340:	2800      	cmp	r0, #0
 801d342:	da66      	bge.n	801d412 <_dtoa_r+0x8c2>
 801d344:	2300      	movs	r3, #0
 801d346:	9903      	ldr	r1, [sp, #12]
 801d348:	220a      	movs	r2, #10
 801d34a:	4648      	mov	r0, r9
 801d34c:	f001 f876 	bl	801e43c <__multadd>
 801d350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d352:	9003      	str	r0, [sp, #12]
 801d354:	f108 38ff 	add.w	r8, r8, #4294967295
 801d358:	2b00      	cmp	r3, #0
 801d35a:	f000 81a0 	beq.w	801d69e <_dtoa_r+0xb4e>
 801d35e:	2300      	movs	r3, #0
 801d360:	4629      	mov	r1, r5
 801d362:	220a      	movs	r2, #10
 801d364:	4648      	mov	r0, r9
 801d366:	f001 f869 	bl	801e43c <__multadd>
 801d36a:	9b08      	ldr	r3, [sp, #32]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	4605      	mov	r5, r0
 801d370:	f300 808a 	bgt.w	801d488 <_dtoa_r+0x938>
 801d374:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d376:	2b02      	cmp	r3, #2
 801d378:	dc53      	bgt.n	801d422 <_dtoa_r+0x8d2>
 801d37a:	e085      	b.n	801d488 <_dtoa_r+0x938>
 801d37c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d37e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d382:	e758      	b.n	801d236 <_dtoa_r+0x6e6>
 801d384:	9b05      	ldr	r3, [sp, #20]
 801d386:	1e5c      	subs	r4, r3, #1
 801d388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d38a:	42a3      	cmp	r3, r4
 801d38c:	bfbf      	itttt	lt
 801d38e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d390:	940a      	strlt	r4, [sp, #40]	; 0x28
 801d392:	1ae2      	sublt	r2, r4, r3
 801d394:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801d396:	bfb6      	itet	lt
 801d398:	189b      	addlt	r3, r3, r2
 801d39a:	1b1c      	subge	r4, r3, r4
 801d39c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d39e:	9b05      	ldr	r3, [sp, #20]
 801d3a0:	bfb8      	it	lt
 801d3a2:	2400      	movlt	r4, #0
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	bfb7      	itett	lt
 801d3a8:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 801d3ac:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 801d3b0:	1a9e      	sublt	r6, r3, r2
 801d3b2:	2300      	movlt	r3, #0
 801d3b4:	e741      	b.n	801d23a <_dtoa_r+0x6ea>
 801d3b6:	bf00      	nop
 801d3b8:	3fe00000 	.word	0x3fe00000
 801d3bc:	40240000 	.word	0x40240000
 801d3c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d3c2:	9e06      	ldr	r6, [sp, #24]
 801d3c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d3c6:	e743      	b.n	801d250 <_dtoa_r+0x700>
 801d3c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3ca:	e76c      	b.n	801d2a6 <_dtoa_r+0x756>
 801d3cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d3ce:	2b01      	cmp	r3, #1
 801d3d0:	dc17      	bgt.n	801d402 <_dtoa_r+0x8b2>
 801d3d2:	f1ba 0f00 	cmp.w	sl, #0
 801d3d6:	d114      	bne.n	801d402 <_dtoa_r+0x8b2>
 801d3d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d3dc:	b99b      	cbnz	r3, 801d406 <_dtoa_r+0x8b6>
 801d3de:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801d3e2:	0d3f      	lsrs	r7, r7, #20
 801d3e4:	053f      	lsls	r7, r7, #20
 801d3e6:	b137      	cbz	r7, 801d3f6 <_dtoa_r+0x8a6>
 801d3e8:	9b06      	ldr	r3, [sp, #24]
 801d3ea:	3301      	adds	r3, #1
 801d3ec:	9306      	str	r3, [sp, #24]
 801d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3f0:	3301      	adds	r3, #1
 801d3f2:	9309      	str	r3, [sp, #36]	; 0x24
 801d3f4:	2701      	movs	r7, #1
 801d3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	f47f af6c 	bne.w	801d2d6 <_dtoa_r+0x786>
 801d3fe:	2001      	movs	r0, #1
 801d400:	e771      	b.n	801d2e6 <_dtoa_r+0x796>
 801d402:	2700      	movs	r7, #0
 801d404:	e7f7      	b.n	801d3f6 <_dtoa_r+0x8a6>
 801d406:	4657      	mov	r7, sl
 801d408:	e7f5      	b.n	801d3f6 <_dtoa_r+0x8a6>
 801d40a:	d080      	beq.n	801d30e <_dtoa_r+0x7be>
 801d40c:	4618      	mov	r0, r3
 801d40e:	301c      	adds	r0, #28
 801d410:	e776      	b.n	801d300 <_dtoa_r+0x7b0>
 801d412:	9b05      	ldr	r3, [sp, #20]
 801d414:	2b00      	cmp	r3, #0
 801d416:	dc31      	bgt.n	801d47c <_dtoa_r+0x92c>
 801d418:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d41a:	2b02      	cmp	r3, #2
 801d41c:	dd2e      	ble.n	801d47c <_dtoa_r+0x92c>
 801d41e:	9b05      	ldr	r3, [sp, #20]
 801d420:	9308      	str	r3, [sp, #32]
 801d422:	9b08      	ldr	r3, [sp, #32]
 801d424:	b963      	cbnz	r3, 801d440 <_dtoa_r+0x8f0>
 801d426:	4621      	mov	r1, r4
 801d428:	2205      	movs	r2, #5
 801d42a:	4648      	mov	r0, r9
 801d42c:	f001 f806 	bl	801e43c <__multadd>
 801d430:	4601      	mov	r1, r0
 801d432:	4604      	mov	r4, r0
 801d434:	9803      	ldr	r0, [sp, #12]
 801d436:	f001 fa03 	bl	801e840 <__mcmp>
 801d43a:	2800      	cmp	r0, #0
 801d43c:	f73f adc4 	bgt.w	801cfc8 <_dtoa_r+0x478>
 801d440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d442:	9e04      	ldr	r6, [sp, #16]
 801d444:	ea6f 0803 	mvn.w	r8, r3
 801d448:	2700      	movs	r7, #0
 801d44a:	4621      	mov	r1, r4
 801d44c:	4648      	mov	r0, r9
 801d44e:	f000 ffec 	bl	801e42a <_Bfree>
 801d452:	2d00      	cmp	r5, #0
 801d454:	f43f aeb2 	beq.w	801d1bc <_dtoa_r+0x66c>
 801d458:	b12f      	cbz	r7, 801d466 <_dtoa_r+0x916>
 801d45a:	42af      	cmp	r7, r5
 801d45c:	d003      	beq.n	801d466 <_dtoa_r+0x916>
 801d45e:	4639      	mov	r1, r7
 801d460:	4648      	mov	r0, r9
 801d462:	f000 ffe2 	bl	801e42a <_Bfree>
 801d466:	4629      	mov	r1, r5
 801d468:	4648      	mov	r0, r9
 801d46a:	f000 ffde 	bl	801e42a <_Bfree>
 801d46e:	e6a5      	b.n	801d1bc <_dtoa_r+0x66c>
 801d470:	2400      	movs	r4, #0
 801d472:	4625      	mov	r5, r4
 801d474:	e7e4      	b.n	801d440 <_dtoa_r+0x8f0>
 801d476:	46a8      	mov	r8, r5
 801d478:	4625      	mov	r5, r4
 801d47a:	e5a5      	b.n	801cfc8 <_dtoa_r+0x478>
 801d47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d47e:	2b00      	cmp	r3, #0
 801d480:	f000 80c4 	beq.w	801d60c <_dtoa_r+0xabc>
 801d484:	9b05      	ldr	r3, [sp, #20]
 801d486:	9308      	str	r3, [sp, #32]
 801d488:	2e00      	cmp	r6, #0
 801d48a:	dd05      	ble.n	801d498 <_dtoa_r+0x948>
 801d48c:	4629      	mov	r1, r5
 801d48e:	4632      	mov	r2, r6
 801d490:	4648      	mov	r0, r9
 801d492:	f001 f965 	bl	801e760 <__lshift>
 801d496:	4605      	mov	r5, r0
 801d498:	2f00      	cmp	r7, #0
 801d49a:	d058      	beq.n	801d54e <_dtoa_r+0x9fe>
 801d49c:	6869      	ldr	r1, [r5, #4]
 801d49e:	4648      	mov	r0, r9
 801d4a0:	f000 ff9e 	bl	801e3e0 <_Balloc>
 801d4a4:	4606      	mov	r6, r0
 801d4a6:	b920      	cbnz	r0, 801d4b2 <_dtoa_r+0x962>
 801d4a8:	4b81      	ldr	r3, [pc, #516]	; (801d6b0 <_dtoa_r+0xb60>)
 801d4aa:	4602      	mov	r2, r0
 801d4ac:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d4b0:	e480      	b.n	801cdb4 <_dtoa_r+0x264>
 801d4b2:	692a      	ldr	r2, [r5, #16]
 801d4b4:	3202      	adds	r2, #2
 801d4b6:	0092      	lsls	r2, r2, #2
 801d4b8:	f105 010c 	add.w	r1, r5, #12
 801d4bc:	300c      	adds	r0, #12
 801d4be:	f000 ff5b 	bl	801e378 <memcpy>
 801d4c2:	2201      	movs	r2, #1
 801d4c4:	4631      	mov	r1, r6
 801d4c6:	4648      	mov	r0, r9
 801d4c8:	f001 f94a 	bl	801e760 <__lshift>
 801d4cc:	9b04      	ldr	r3, [sp, #16]
 801d4ce:	9a04      	ldr	r2, [sp, #16]
 801d4d0:	3301      	adds	r3, #1
 801d4d2:	9305      	str	r3, [sp, #20]
 801d4d4:	9b08      	ldr	r3, [sp, #32]
 801d4d6:	4413      	add	r3, r2
 801d4d8:	930a      	str	r3, [sp, #40]	; 0x28
 801d4da:	f00a 0301 	and.w	r3, sl, #1
 801d4de:	462f      	mov	r7, r5
 801d4e0:	9309      	str	r3, [sp, #36]	; 0x24
 801d4e2:	4605      	mov	r5, r0
 801d4e4:	9b05      	ldr	r3, [sp, #20]
 801d4e6:	9803      	ldr	r0, [sp, #12]
 801d4e8:	4621      	mov	r1, r4
 801d4ea:	f103 3bff 	add.w	fp, r3, #4294967295
 801d4ee:	f7ff faa7 	bl	801ca40 <quorem>
 801d4f2:	4639      	mov	r1, r7
 801d4f4:	9006      	str	r0, [sp, #24]
 801d4f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d4fa:	9803      	ldr	r0, [sp, #12]
 801d4fc:	f001 f9a0 	bl	801e840 <__mcmp>
 801d500:	462a      	mov	r2, r5
 801d502:	9008      	str	r0, [sp, #32]
 801d504:	4621      	mov	r1, r4
 801d506:	4648      	mov	r0, r9
 801d508:	f001 f9b6 	bl	801e878 <__mdiff>
 801d50c:	68c2      	ldr	r2, [r0, #12]
 801d50e:	4606      	mov	r6, r0
 801d510:	b9fa      	cbnz	r2, 801d552 <_dtoa_r+0xa02>
 801d512:	4601      	mov	r1, r0
 801d514:	9803      	ldr	r0, [sp, #12]
 801d516:	f001 f993 	bl	801e840 <__mcmp>
 801d51a:	4602      	mov	r2, r0
 801d51c:	4631      	mov	r1, r6
 801d51e:	4648      	mov	r0, r9
 801d520:	920b      	str	r2, [sp, #44]	; 0x2c
 801d522:	f000 ff82 	bl	801e42a <_Bfree>
 801d526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d52a:	9e05      	ldr	r6, [sp, #20]
 801d52c:	ea43 0102 	orr.w	r1, r3, r2
 801d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d532:	430b      	orrs	r3, r1
 801d534:	d10f      	bne.n	801d556 <_dtoa_r+0xa06>
 801d536:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d53a:	d028      	beq.n	801d58e <_dtoa_r+0xa3e>
 801d53c:	9b08      	ldr	r3, [sp, #32]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	dd02      	ble.n	801d548 <_dtoa_r+0x9f8>
 801d542:	9b06      	ldr	r3, [sp, #24]
 801d544:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801d548:	f88b a000 	strb.w	sl, [fp]
 801d54c:	e77d      	b.n	801d44a <_dtoa_r+0x8fa>
 801d54e:	4628      	mov	r0, r5
 801d550:	e7bc      	b.n	801d4cc <_dtoa_r+0x97c>
 801d552:	2201      	movs	r2, #1
 801d554:	e7e2      	b.n	801d51c <_dtoa_r+0x9cc>
 801d556:	9b08      	ldr	r3, [sp, #32]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	db04      	blt.n	801d566 <_dtoa_r+0xa16>
 801d55c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d55e:	430b      	orrs	r3, r1
 801d560:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d562:	430b      	orrs	r3, r1
 801d564:	d120      	bne.n	801d5a8 <_dtoa_r+0xa58>
 801d566:	2a00      	cmp	r2, #0
 801d568:	ddee      	ble.n	801d548 <_dtoa_r+0x9f8>
 801d56a:	9903      	ldr	r1, [sp, #12]
 801d56c:	2201      	movs	r2, #1
 801d56e:	4648      	mov	r0, r9
 801d570:	f001 f8f6 	bl	801e760 <__lshift>
 801d574:	4621      	mov	r1, r4
 801d576:	9003      	str	r0, [sp, #12]
 801d578:	f001 f962 	bl	801e840 <__mcmp>
 801d57c:	2800      	cmp	r0, #0
 801d57e:	dc03      	bgt.n	801d588 <_dtoa_r+0xa38>
 801d580:	d1e2      	bne.n	801d548 <_dtoa_r+0x9f8>
 801d582:	f01a 0f01 	tst.w	sl, #1
 801d586:	d0df      	beq.n	801d548 <_dtoa_r+0x9f8>
 801d588:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d58c:	d1d9      	bne.n	801d542 <_dtoa_r+0x9f2>
 801d58e:	2339      	movs	r3, #57	; 0x39
 801d590:	f88b 3000 	strb.w	r3, [fp]
 801d594:	4633      	mov	r3, r6
 801d596:	461e      	mov	r6, r3
 801d598:	3b01      	subs	r3, #1
 801d59a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d59e:	2a39      	cmp	r2, #57	; 0x39
 801d5a0:	d06b      	beq.n	801d67a <_dtoa_r+0xb2a>
 801d5a2:	3201      	adds	r2, #1
 801d5a4:	701a      	strb	r2, [r3, #0]
 801d5a6:	e750      	b.n	801d44a <_dtoa_r+0x8fa>
 801d5a8:	2a00      	cmp	r2, #0
 801d5aa:	dd07      	ble.n	801d5bc <_dtoa_r+0xa6c>
 801d5ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d5b0:	d0ed      	beq.n	801d58e <_dtoa_r+0xa3e>
 801d5b2:	f10a 0301 	add.w	r3, sl, #1
 801d5b6:	f88b 3000 	strb.w	r3, [fp]
 801d5ba:	e746      	b.n	801d44a <_dtoa_r+0x8fa>
 801d5bc:	9b05      	ldr	r3, [sp, #20]
 801d5be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 801d5c4:	4293      	cmp	r3, r2
 801d5c6:	d042      	beq.n	801d64e <_dtoa_r+0xafe>
 801d5c8:	9903      	ldr	r1, [sp, #12]
 801d5ca:	2300      	movs	r3, #0
 801d5cc:	220a      	movs	r2, #10
 801d5ce:	4648      	mov	r0, r9
 801d5d0:	f000 ff34 	bl	801e43c <__multadd>
 801d5d4:	42af      	cmp	r7, r5
 801d5d6:	9003      	str	r0, [sp, #12]
 801d5d8:	f04f 0300 	mov.w	r3, #0
 801d5dc:	f04f 020a 	mov.w	r2, #10
 801d5e0:	4639      	mov	r1, r7
 801d5e2:	4648      	mov	r0, r9
 801d5e4:	d107      	bne.n	801d5f6 <_dtoa_r+0xaa6>
 801d5e6:	f000 ff29 	bl	801e43c <__multadd>
 801d5ea:	4607      	mov	r7, r0
 801d5ec:	4605      	mov	r5, r0
 801d5ee:	9b05      	ldr	r3, [sp, #20]
 801d5f0:	3301      	adds	r3, #1
 801d5f2:	9305      	str	r3, [sp, #20]
 801d5f4:	e776      	b.n	801d4e4 <_dtoa_r+0x994>
 801d5f6:	f000 ff21 	bl	801e43c <__multadd>
 801d5fa:	4629      	mov	r1, r5
 801d5fc:	4607      	mov	r7, r0
 801d5fe:	2300      	movs	r3, #0
 801d600:	220a      	movs	r2, #10
 801d602:	4648      	mov	r0, r9
 801d604:	f000 ff1a 	bl	801e43c <__multadd>
 801d608:	4605      	mov	r5, r0
 801d60a:	e7f0      	b.n	801d5ee <_dtoa_r+0xa9e>
 801d60c:	9b05      	ldr	r3, [sp, #20]
 801d60e:	9308      	str	r3, [sp, #32]
 801d610:	9e04      	ldr	r6, [sp, #16]
 801d612:	9803      	ldr	r0, [sp, #12]
 801d614:	4621      	mov	r1, r4
 801d616:	f7ff fa13 	bl	801ca40 <quorem>
 801d61a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d61e:	9b04      	ldr	r3, [sp, #16]
 801d620:	f806 ab01 	strb.w	sl, [r6], #1
 801d624:	1af2      	subs	r2, r6, r3
 801d626:	9b08      	ldr	r3, [sp, #32]
 801d628:	4293      	cmp	r3, r2
 801d62a:	dd07      	ble.n	801d63c <_dtoa_r+0xaec>
 801d62c:	9903      	ldr	r1, [sp, #12]
 801d62e:	2300      	movs	r3, #0
 801d630:	220a      	movs	r2, #10
 801d632:	4648      	mov	r0, r9
 801d634:	f000 ff02 	bl	801e43c <__multadd>
 801d638:	9003      	str	r0, [sp, #12]
 801d63a:	e7ea      	b.n	801d612 <_dtoa_r+0xac2>
 801d63c:	9b08      	ldr	r3, [sp, #32]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	bfc8      	it	gt
 801d642:	461e      	movgt	r6, r3
 801d644:	9b04      	ldr	r3, [sp, #16]
 801d646:	bfd8      	it	le
 801d648:	2601      	movle	r6, #1
 801d64a:	441e      	add	r6, r3
 801d64c:	2700      	movs	r7, #0
 801d64e:	9903      	ldr	r1, [sp, #12]
 801d650:	2201      	movs	r2, #1
 801d652:	4648      	mov	r0, r9
 801d654:	f001 f884 	bl	801e760 <__lshift>
 801d658:	4621      	mov	r1, r4
 801d65a:	9003      	str	r0, [sp, #12]
 801d65c:	f001 f8f0 	bl	801e840 <__mcmp>
 801d660:	2800      	cmp	r0, #0
 801d662:	dc97      	bgt.n	801d594 <_dtoa_r+0xa44>
 801d664:	d102      	bne.n	801d66c <_dtoa_r+0xb1c>
 801d666:	f01a 0f01 	tst.w	sl, #1
 801d66a:	d193      	bne.n	801d594 <_dtoa_r+0xa44>
 801d66c:	4633      	mov	r3, r6
 801d66e:	461e      	mov	r6, r3
 801d670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d674:	2a30      	cmp	r2, #48	; 0x30
 801d676:	d0fa      	beq.n	801d66e <_dtoa_r+0xb1e>
 801d678:	e6e7      	b.n	801d44a <_dtoa_r+0x8fa>
 801d67a:	9a04      	ldr	r2, [sp, #16]
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d18a      	bne.n	801d596 <_dtoa_r+0xa46>
 801d680:	2331      	movs	r3, #49	; 0x31
 801d682:	f108 0801 	add.w	r8, r8, #1
 801d686:	7013      	strb	r3, [r2, #0]
 801d688:	e6df      	b.n	801d44a <_dtoa_r+0x8fa>
 801d68a:	4b0a      	ldr	r3, [pc, #40]	; (801d6b4 <_dtoa_r+0xb64>)
 801d68c:	f7ff bab0 	b.w	801cbf0 <_dtoa_r+0xa0>
 801d690:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d692:	2b00      	cmp	r3, #0
 801d694:	f47f aa94 	bne.w	801cbc0 <_dtoa_r+0x70>
 801d698:	4b07      	ldr	r3, [pc, #28]	; (801d6b8 <_dtoa_r+0xb68>)
 801d69a:	f7ff baa9 	b.w	801cbf0 <_dtoa_r+0xa0>
 801d69e:	9b08      	ldr	r3, [sp, #32]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	dcb5      	bgt.n	801d610 <_dtoa_r+0xac0>
 801d6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d6a6:	2b02      	cmp	r3, #2
 801d6a8:	f73f aebb 	bgt.w	801d422 <_dtoa_r+0x8d2>
 801d6ac:	e7b0      	b.n	801d610 <_dtoa_r+0xac0>
 801d6ae:	bf00      	nop
 801d6b0:	08020959 	.word	0x08020959
 801d6b4:	0802090a 	.word	0x0802090a
 801d6b8:	08020950 	.word	0x08020950

0801d6bc <__sflush_r>:
 801d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6be:	898b      	ldrh	r3, [r1, #12]
 801d6c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d6c4:	4605      	mov	r5, r0
 801d6c6:	0718      	lsls	r0, r3, #28
 801d6c8:	460c      	mov	r4, r1
 801d6ca:	d45e      	bmi.n	801d78a <__sflush_r+0xce>
 801d6cc:	684b      	ldr	r3, [r1, #4]
 801d6ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	818a      	strh	r2, [r1, #12]
 801d6d6:	dc04      	bgt.n	801d6e2 <__sflush_r+0x26>
 801d6d8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	dc01      	bgt.n	801d6e2 <__sflush_r+0x26>
 801d6de:	2000      	movs	r0, #0
 801d6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d6e4:	2e00      	cmp	r6, #0
 801d6e6:	d0fa      	beq.n	801d6de <__sflush_r+0x22>
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d6ee:	682f      	ldr	r7, [r5, #0]
 801d6f0:	602b      	str	r3, [r5, #0]
 801d6f2:	d036      	beq.n	801d762 <__sflush_r+0xa6>
 801d6f4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d6f6:	89a3      	ldrh	r3, [r4, #12]
 801d6f8:	075a      	lsls	r2, r3, #29
 801d6fa:	d505      	bpl.n	801d708 <__sflush_r+0x4c>
 801d6fc:	6863      	ldr	r3, [r4, #4]
 801d6fe:	1ac0      	subs	r0, r0, r3
 801d700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d702:	b10b      	cbz	r3, 801d708 <__sflush_r+0x4c>
 801d704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d706:	1ac0      	subs	r0, r0, r3
 801d708:	2300      	movs	r3, #0
 801d70a:	4602      	mov	r2, r0
 801d70c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d70e:	69e1      	ldr	r1, [r4, #28]
 801d710:	4628      	mov	r0, r5
 801d712:	47b0      	blx	r6
 801d714:	1c43      	adds	r3, r0, #1
 801d716:	89a3      	ldrh	r3, [r4, #12]
 801d718:	d106      	bne.n	801d728 <__sflush_r+0x6c>
 801d71a:	6829      	ldr	r1, [r5, #0]
 801d71c:	291d      	cmp	r1, #29
 801d71e:	d830      	bhi.n	801d782 <__sflush_r+0xc6>
 801d720:	4a2a      	ldr	r2, [pc, #168]	; (801d7cc <__sflush_r+0x110>)
 801d722:	40ca      	lsrs	r2, r1
 801d724:	07d6      	lsls	r6, r2, #31
 801d726:	d52c      	bpl.n	801d782 <__sflush_r+0xc6>
 801d728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d72c:	b21b      	sxth	r3, r3
 801d72e:	2200      	movs	r2, #0
 801d730:	6062      	str	r2, [r4, #4]
 801d732:	04d9      	lsls	r1, r3, #19
 801d734:	6922      	ldr	r2, [r4, #16]
 801d736:	81a3      	strh	r3, [r4, #12]
 801d738:	6022      	str	r2, [r4, #0]
 801d73a:	d504      	bpl.n	801d746 <__sflush_r+0x8a>
 801d73c:	1c42      	adds	r2, r0, #1
 801d73e:	d101      	bne.n	801d744 <__sflush_r+0x88>
 801d740:	682b      	ldr	r3, [r5, #0]
 801d742:	b903      	cbnz	r3, 801d746 <__sflush_r+0x8a>
 801d744:	6520      	str	r0, [r4, #80]	; 0x50
 801d746:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d748:	602f      	str	r7, [r5, #0]
 801d74a:	2900      	cmp	r1, #0
 801d74c:	d0c7      	beq.n	801d6de <__sflush_r+0x22>
 801d74e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801d752:	4299      	cmp	r1, r3
 801d754:	d002      	beq.n	801d75c <__sflush_r+0xa0>
 801d756:	4628      	mov	r0, r5
 801d758:	f000 f936 	bl	801d9c8 <_free_r>
 801d75c:	2000      	movs	r0, #0
 801d75e:	6320      	str	r0, [r4, #48]	; 0x30
 801d760:	e7be      	b.n	801d6e0 <__sflush_r+0x24>
 801d762:	69e1      	ldr	r1, [r4, #28]
 801d764:	2301      	movs	r3, #1
 801d766:	4628      	mov	r0, r5
 801d768:	47b0      	blx	r6
 801d76a:	1c41      	adds	r1, r0, #1
 801d76c:	d1c3      	bne.n	801d6f6 <__sflush_r+0x3a>
 801d76e:	682b      	ldr	r3, [r5, #0]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d0c0      	beq.n	801d6f6 <__sflush_r+0x3a>
 801d774:	2b1d      	cmp	r3, #29
 801d776:	d001      	beq.n	801d77c <__sflush_r+0xc0>
 801d778:	2b16      	cmp	r3, #22
 801d77a:	d101      	bne.n	801d780 <__sflush_r+0xc4>
 801d77c:	602f      	str	r7, [r5, #0]
 801d77e:	e7ae      	b.n	801d6de <__sflush_r+0x22>
 801d780:	89a3      	ldrh	r3, [r4, #12]
 801d782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d786:	81a3      	strh	r3, [r4, #12]
 801d788:	e7aa      	b.n	801d6e0 <__sflush_r+0x24>
 801d78a:	690f      	ldr	r7, [r1, #16]
 801d78c:	2f00      	cmp	r7, #0
 801d78e:	d0a6      	beq.n	801d6de <__sflush_r+0x22>
 801d790:	079b      	lsls	r3, r3, #30
 801d792:	680e      	ldr	r6, [r1, #0]
 801d794:	bf08      	it	eq
 801d796:	694b      	ldreq	r3, [r1, #20]
 801d798:	600f      	str	r7, [r1, #0]
 801d79a:	bf18      	it	ne
 801d79c:	2300      	movne	r3, #0
 801d79e:	1bf6      	subs	r6, r6, r7
 801d7a0:	608b      	str	r3, [r1, #8]
 801d7a2:	2e00      	cmp	r6, #0
 801d7a4:	dd9b      	ble.n	801d6de <__sflush_r+0x22>
 801d7a6:	69e1      	ldr	r1, [r4, #28]
 801d7a8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 801d7ac:	4633      	mov	r3, r6
 801d7ae:	463a      	mov	r2, r7
 801d7b0:	4628      	mov	r0, r5
 801d7b2:	47e0      	blx	ip
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	dc06      	bgt.n	801d7c6 <__sflush_r+0x10a>
 801d7b8:	89a3      	ldrh	r3, [r4, #12]
 801d7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d7be:	81a3      	strh	r3, [r4, #12]
 801d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d7c4:	e78c      	b.n	801d6e0 <__sflush_r+0x24>
 801d7c6:	4407      	add	r7, r0
 801d7c8:	1a36      	subs	r6, r6, r0
 801d7ca:	e7ea      	b.n	801d7a2 <__sflush_r+0xe6>
 801d7cc:	20400001 	.word	0x20400001

0801d7d0 <_fflush_r>:
 801d7d0:	b538      	push	{r3, r4, r5, lr}
 801d7d2:	460c      	mov	r4, r1
 801d7d4:	4605      	mov	r5, r0
 801d7d6:	b118      	cbz	r0, 801d7e0 <_fflush_r+0x10>
 801d7d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d7da:	b90b      	cbnz	r3, 801d7e0 <_fflush_r+0x10>
 801d7dc:	f000 f864 	bl	801d8a8 <__sinit>
 801d7e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801d7e4:	b1b8      	cbz	r0, 801d816 <_fflush_r+0x46>
 801d7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7e8:	07db      	lsls	r3, r3, #31
 801d7ea:	d404      	bmi.n	801d7f6 <_fflush_r+0x26>
 801d7ec:	0581      	lsls	r1, r0, #22
 801d7ee:	d402      	bmi.n	801d7f6 <_fflush_r+0x26>
 801d7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d7f2:	f000 fb17 	bl	801de24 <__retarget_lock_acquire_recursive>
 801d7f6:	4628      	mov	r0, r5
 801d7f8:	4621      	mov	r1, r4
 801d7fa:	f7ff ff5f 	bl	801d6bc <__sflush_r>
 801d7fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d800:	07da      	lsls	r2, r3, #31
 801d802:	4605      	mov	r5, r0
 801d804:	d405      	bmi.n	801d812 <_fflush_r+0x42>
 801d806:	89a3      	ldrh	r3, [r4, #12]
 801d808:	059b      	lsls	r3, r3, #22
 801d80a:	d402      	bmi.n	801d812 <_fflush_r+0x42>
 801d80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d80e:	f000 fb0a 	bl	801de26 <__retarget_lock_release_recursive>
 801d812:	4628      	mov	r0, r5
 801d814:	bd38      	pop	{r3, r4, r5, pc}
 801d816:	4605      	mov	r5, r0
 801d818:	e7fb      	b.n	801d812 <_fflush_r+0x42>
	...

0801d81c <std>:
 801d81c:	2300      	movs	r3, #0
 801d81e:	b510      	push	{r4, lr}
 801d820:	4604      	mov	r4, r0
 801d822:	e9c0 3300 	strd	r3, r3, [r0]
 801d826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d82a:	6083      	str	r3, [r0, #8]
 801d82c:	8181      	strh	r1, [r0, #12]
 801d82e:	6643      	str	r3, [r0, #100]	; 0x64
 801d830:	81c2      	strh	r2, [r0, #14]
 801d832:	6183      	str	r3, [r0, #24]
 801d834:	4619      	mov	r1, r3
 801d836:	2208      	movs	r2, #8
 801d838:	305c      	adds	r0, #92	; 0x5c
 801d83a:	f7fc fbdd 	bl	8019ff8 <memset>
 801d83e:	4b07      	ldr	r3, [pc, #28]	; (801d85c <std+0x40>)
 801d840:	6223      	str	r3, [r4, #32]
 801d842:	4b07      	ldr	r3, [pc, #28]	; (801d860 <std+0x44>)
 801d844:	6263      	str	r3, [r4, #36]	; 0x24
 801d846:	4b07      	ldr	r3, [pc, #28]	; (801d864 <std+0x48>)
 801d848:	62a3      	str	r3, [r4, #40]	; 0x28
 801d84a:	4b07      	ldr	r3, [pc, #28]	; (801d868 <std+0x4c>)
 801d84c:	61e4      	str	r4, [r4, #28]
 801d84e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d850:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d858:	f000 bae2 	b.w	801de20 <__retarget_lock_init_recursive>
 801d85c:	0801ee11 	.word	0x0801ee11
 801d860:	0801ee33 	.word	0x0801ee33
 801d864:	0801ee6b 	.word	0x0801ee6b
 801d868:	0801ee8f 	.word	0x0801ee8f

0801d86c <_cleanup_r>:
 801d86c:	4901      	ldr	r1, [pc, #4]	; (801d874 <_cleanup_r+0x8>)
 801d86e:	f000 bab3 	b.w	801ddd8 <_fwalk_reent>
 801d872:	bf00      	nop
 801d874:	0801fb3d 	.word	0x0801fb3d

0801d878 <__sfp_lock_acquire>:
 801d878:	4801      	ldr	r0, [pc, #4]	; (801d880 <__sfp_lock_acquire+0x8>)
 801d87a:	f000 bad3 	b.w	801de24 <__retarget_lock_acquire_recursive>
 801d87e:	bf00      	nop
 801d880:	20001da6 	.word	0x20001da6

0801d884 <__sfp_lock_release>:
 801d884:	4801      	ldr	r0, [pc, #4]	; (801d88c <__sfp_lock_release+0x8>)
 801d886:	f000 bace 	b.w	801de26 <__retarget_lock_release_recursive>
 801d88a:	bf00      	nop
 801d88c:	20001da6 	.word	0x20001da6

0801d890 <__sinit_lock_acquire>:
 801d890:	4801      	ldr	r0, [pc, #4]	; (801d898 <__sinit_lock_acquire+0x8>)
 801d892:	f000 bac7 	b.w	801de24 <__retarget_lock_acquire_recursive>
 801d896:	bf00      	nop
 801d898:	20001da7 	.word	0x20001da7

0801d89c <__sinit_lock_release>:
 801d89c:	4801      	ldr	r0, [pc, #4]	; (801d8a4 <__sinit_lock_release+0x8>)
 801d89e:	f000 bac2 	b.w	801de26 <__retarget_lock_release_recursive>
 801d8a2:	bf00      	nop
 801d8a4:	20001da7 	.word	0x20001da7

0801d8a8 <__sinit>:
 801d8a8:	b510      	push	{r4, lr}
 801d8aa:	4604      	mov	r4, r0
 801d8ac:	f7ff fff0 	bl	801d890 <__sinit_lock_acquire>
 801d8b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801d8b2:	b11a      	cbz	r2, 801d8bc <__sinit+0x14>
 801d8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8b8:	f7ff bff0 	b.w	801d89c <__sinit_lock_release>
 801d8bc:	4b0d      	ldr	r3, [pc, #52]	; (801d8f4 <__sinit+0x4c>)
 801d8be:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d8c0:	2303      	movs	r3, #3
 801d8c2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801d8c6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801d8ca:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801d8ce:	6860      	ldr	r0, [r4, #4]
 801d8d0:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801d8d4:	2104      	movs	r1, #4
 801d8d6:	f7ff ffa1 	bl	801d81c <std>
 801d8da:	68a0      	ldr	r0, [r4, #8]
 801d8dc:	2201      	movs	r2, #1
 801d8de:	2109      	movs	r1, #9
 801d8e0:	f7ff ff9c 	bl	801d81c <std>
 801d8e4:	68e0      	ldr	r0, [r4, #12]
 801d8e6:	2202      	movs	r2, #2
 801d8e8:	2112      	movs	r1, #18
 801d8ea:	f7ff ff97 	bl	801d81c <std>
 801d8ee:	2301      	movs	r3, #1
 801d8f0:	63a3      	str	r3, [r4, #56]	; 0x38
 801d8f2:	e7df      	b.n	801d8b4 <__sinit+0xc>
 801d8f4:	0801d86d 	.word	0x0801d86d

0801d8f8 <__libc_fini_array>:
 801d8f8:	b538      	push	{r3, r4, r5, lr}
 801d8fa:	4d07      	ldr	r5, [pc, #28]	; (801d918 <__libc_fini_array+0x20>)
 801d8fc:	4c07      	ldr	r4, [pc, #28]	; (801d91c <__libc_fini_array+0x24>)
 801d8fe:	1b64      	subs	r4, r4, r5
 801d900:	10a4      	asrs	r4, r4, #2
 801d902:	b91c      	cbnz	r4, 801d90c <__libc_fini_array+0x14>
 801d904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d908:	f002 bb8c 	b.w	8020024 <_fini>
 801d90c:	3c01      	subs	r4, #1
 801d90e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801d912:	4798      	blx	r3
 801d914:	e7f5      	b.n	801d902 <__libc_fini_array+0xa>
 801d916:	bf00      	nop
 801d918:	08020c9c 	.word	0x08020c9c
 801d91c:	08020ca0 	.word	0x08020ca0

0801d920 <_malloc_trim_r>:
 801d920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d924:	4606      	mov	r6, r0
 801d926:	2008      	movs	r0, #8
 801d928:	460c      	mov	r4, r1
 801d92a:	f001 fb42 	bl	801efb2 <sysconf>
 801d92e:	4f23      	ldr	r7, [pc, #140]	; (801d9bc <_malloc_trim_r+0x9c>)
 801d930:	4680      	mov	r8, r0
 801d932:	4630      	mov	r0, r6
 801d934:	f000 fd48 	bl	801e3c8 <__malloc_lock>
 801d938:	68bb      	ldr	r3, [r7, #8]
 801d93a:	685d      	ldr	r5, [r3, #4]
 801d93c:	f025 0503 	bic.w	r5, r5, #3
 801d940:	1b2c      	subs	r4, r5, r4
 801d942:	3c11      	subs	r4, #17
 801d944:	4444      	add	r4, r8
 801d946:	fbb4 f4f8 	udiv	r4, r4, r8
 801d94a:	3c01      	subs	r4, #1
 801d94c:	fb08 f404 	mul.w	r4, r8, r4
 801d950:	45a0      	cmp	r8, r4
 801d952:	dd05      	ble.n	801d960 <_malloc_trim_r+0x40>
 801d954:	4630      	mov	r0, r6
 801d956:	f000 fd3d 	bl	801e3d4 <__malloc_unlock>
 801d95a:	2000      	movs	r0, #0
 801d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d960:	2100      	movs	r1, #0
 801d962:	4630      	mov	r0, r6
 801d964:	f001 fa44 	bl	801edf0 <_sbrk_r>
 801d968:	68bb      	ldr	r3, [r7, #8]
 801d96a:	442b      	add	r3, r5
 801d96c:	4298      	cmp	r0, r3
 801d96e:	d1f1      	bne.n	801d954 <_malloc_trim_r+0x34>
 801d970:	4261      	negs	r1, r4
 801d972:	4630      	mov	r0, r6
 801d974:	f001 fa3c 	bl	801edf0 <_sbrk_r>
 801d978:	3001      	adds	r0, #1
 801d97a:	d110      	bne.n	801d99e <_malloc_trim_r+0x7e>
 801d97c:	2100      	movs	r1, #0
 801d97e:	4630      	mov	r0, r6
 801d980:	f001 fa36 	bl	801edf0 <_sbrk_r>
 801d984:	68ba      	ldr	r2, [r7, #8]
 801d986:	1a83      	subs	r3, r0, r2
 801d988:	2b0f      	cmp	r3, #15
 801d98a:	dde3      	ble.n	801d954 <_malloc_trim_r+0x34>
 801d98c:	490c      	ldr	r1, [pc, #48]	; (801d9c0 <_malloc_trim_r+0xa0>)
 801d98e:	6809      	ldr	r1, [r1, #0]
 801d990:	1a40      	subs	r0, r0, r1
 801d992:	490c      	ldr	r1, [pc, #48]	; (801d9c4 <_malloc_trim_r+0xa4>)
 801d994:	f043 0301 	orr.w	r3, r3, #1
 801d998:	6008      	str	r0, [r1, #0]
 801d99a:	6053      	str	r3, [r2, #4]
 801d99c:	e7da      	b.n	801d954 <_malloc_trim_r+0x34>
 801d99e:	68bb      	ldr	r3, [r7, #8]
 801d9a0:	4a08      	ldr	r2, [pc, #32]	; (801d9c4 <_malloc_trim_r+0xa4>)
 801d9a2:	1b2d      	subs	r5, r5, r4
 801d9a4:	f045 0501 	orr.w	r5, r5, #1
 801d9a8:	605d      	str	r5, [r3, #4]
 801d9aa:	6813      	ldr	r3, [r2, #0]
 801d9ac:	4630      	mov	r0, r6
 801d9ae:	1b1b      	subs	r3, r3, r4
 801d9b0:	6013      	str	r3, [r2, #0]
 801d9b2:	f000 fd0f 	bl	801e3d4 <__malloc_unlock>
 801d9b6:	2001      	movs	r0, #1
 801d9b8:	e7d0      	b.n	801d95c <_malloc_trim_r+0x3c>
 801d9ba:	bf00      	nop
 801d9bc:	2000051c 	.word	0x2000051c
 801d9c0:	20000924 	.word	0x20000924
 801d9c4:	20001da8 	.word	0x20001da8

0801d9c8 <_free_r>:
 801d9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9ca:	4605      	mov	r5, r0
 801d9cc:	460f      	mov	r7, r1
 801d9ce:	2900      	cmp	r1, #0
 801d9d0:	f000 80b1 	beq.w	801db36 <_free_r+0x16e>
 801d9d4:	f000 fcf8 	bl	801e3c8 <__malloc_lock>
 801d9d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801d9dc:	4856      	ldr	r0, [pc, #344]	; (801db38 <_free_r+0x170>)
 801d9de:	f022 0401 	bic.w	r4, r2, #1
 801d9e2:	f1a7 0308 	sub.w	r3, r7, #8
 801d9e6:	eb03 0c04 	add.w	ip, r3, r4
 801d9ea:	6881      	ldr	r1, [r0, #8]
 801d9ec:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801d9f0:	4561      	cmp	r1, ip
 801d9f2:	f026 0603 	bic.w	r6, r6, #3
 801d9f6:	f002 0201 	and.w	r2, r2, #1
 801d9fa:	d11b      	bne.n	801da34 <_free_r+0x6c>
 801d9fc:	4434      	add	r4, r6
 801d9fe:	b93a      	cbnz	r2, 801da10 <_free_r+0x48>
 801da00:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801da04:	1a9b      	subs	r3, r3, r2
 801da06:	4414      	add	r4, r2
 801da08:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801da0c:	60ca      	str	r2, [r1, #12]
 801da0e:	6091      	str	r1, [r2, #8]
 801da10:	f044 0201 	orr.w	r2, r4, #1
 801da14:	605a      	str	r2, [r3, #4]
 801da16:	6083      	str	r3, [r0, #8]
 801da18:	4b48      	ldr	r3, [pc, #288]	; (801db3c <_free_r+0x174>)
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	42a3      	cmp	r3, r4
 801da1e:	d804      	bhi.n	801da2a <_free_r+0x62>
 801da20:	4b47      	ldr	r3, [pc, #284]	; (801db40 <_free_r+0x178>)
 801da22:	4628      	mov	r0, r5
 801da24:	6819      	ldr	r1, [r3, #0]
 801da26:	f7ff ff7b 	bl	801d920 <_malloc_trim_r>
 801da2a:	4628      	mov	r0, r5
 801da2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801da30:	f000 bcd0 	b.w	801e3d4 <__malloc_unlock>
 801da34:	f8cc 6004 	str.w	r6, [ip, #4]
 801da38:	2a00      	cmp	r2, #0
 801da3a:	d138      	bne.n	801daae <_free_r+0xe6>
 801da3c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801da40:	1a5b      	subs	r3, r3, r1
 801da42:	440c      	add	r4, r1
 801da44:	6899      	ldr	r1, [r3, #8]
 801da46:	f100 0708 	add.w	r7, r0, #8
 801da4a:	42b9      	cmp	r1, r7
 801da4c:	d031      	beq.n	801dab2 <_free_r+0xea>
 801da4e:	68df      	ldr	r7, [r3, #12]
 801da50:	60cf      	str	r7, [r1, #12]
 801da52:	60b9      	str	r1, [r7, #8]
 801da54:	eb0c 0106 	add.w	r1, ip, r6
 801da58:	6849      	ldr	r1, [r1, #4]
 801da5a:	07c9      	lsls	r1, r1, #31
 801da5c:	d40b      	bmi.n	801da76 <_free_r+0xae>
 801da5e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801da62:	4434      	add	r4, r6
 801da64:	bb3a      	cbnz	r2, 801dab6 <_free_r+0xee>
 801da66:	4e37      	ldr	r6, [pc, #220]	; (801db44 <_free_r+0x17c>)
 801da68:	42b1      	cmp	r1, r6
 801da6a:	d124      	bne.n	801dab6 <_free_r+0xee>
 801da6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da70:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801da74:	2201      	movs	r2, #1
 801da76:	f044 0101 	orr.w	r1, r4, #1
 801da7a:	6059      	str	r1, [r3, #4]
 801da7c:	511c      	str	r4, [r3, r4]
 801da7e:	2a00      	cmp	r2, #0
 801da80:	d1d3      	bne.n	801da2a <_free_r+0x62>
 801da82:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801da86:	d21b      	bcs.n	801dac0 <_free_r+0xf8>
 801da88:	0961      	lsrs	r1, r4, #5
 801da8a:	08e2      	lsrs	r2, r4, #3
 801da8c:	2401      	movs	r4, #1
 801da8e:	408c      	lsls	r4, r1
 801da90:	6841      	ldr	r1, [r0, #4]
 801da92:	3201      	adds	r2, #1
 801da94:	430c      	orrs	r4, r1
 801da96:	6044      	str	r4, [r0, #4]
 801da98:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801da9c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801daa0:	3908      	subs	r1, #8
 801daa2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801daa6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801daaa:	60e3      	str	r3, [r4, #12]
 801daac:	e7bd      	b.n	801da2a <_free_r+0x62>
 801daae:	2200      	movs	r2, #0
 801dab0:	e7d0      	b.n	801da54 <_free_r+0x8c>
 801dab2:	2201      	movs	r2, #1
 801dab4:	e7ce      	b.n	801da54 <_free_r+0x8c>
 801dab6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801daba:	60ce      	str	r6, [r1, #12]
 801dabc:	60b1      	str	r1, [r6, #8]
 801dabe:	e7da      	b.n	801da76 <_free_r+0xae>
 801dac0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801dac4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801dac8:	d214      	bcs.n	801daf4 <_free_r+0x12c>
 801daca:	09a2      	lsrs	r2, r4, #6
 801dacc:	3238      	adds	r2, #56	; 0x38
 801dace:	1c51      	adds	r1, r2, #1
 801dad0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801dad4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801dad8:	428e      	cmp	r6, r1
 801dada:	d125      	bne.n	801db28 <_free_r+0x160>
 801dadc:	2401      	movs	r4, #1
 801dade:	1092      	asrs	r2, r2, #2
 801dae0:	fa04 f202 	lsl.w	r2, r4, r2
 801dae4:	6844      	ldr	r4, [r0, #4]
 801dae6:	4322      	orrs	r2, r4
 801dae8:	6042      	str	r2, [r0, #4]
 801daea:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801daee:	60b3      	str	r3, [r6, #8]
 801daf0:	60cb      	str	r3, [r1, #12]
 801daf2:	e79a      	b.n	801da2a <_free_r+0x62>
 801daf4:	2a14      	cmp	r2, #20
 801daf6:	d801      	bhi.n	801dafc <_free_r+0x134>
 801daf8:	325b      	adds	r2, #91	; 0x5b
 801dafa:	e7e8      	b.n	801dace <_free_r+0x106>
 801dafc:	2a54      	cmp	r2, #84	; 0x54
 801dafe:	d802      	bhi.n	801db06 <_free_r+0x13e>
 801db00:	0b22      	lsrs	r2, r4, #12
 801db02:	326e      	adds	r2, #110	; 0x6e
 801db04:	e7e3      	b.n	801dace <_free_r+0x106>
 801db06:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801db0a:	d802      	bhi.n	801db12 <_free_r+0x14a>
 801db0c:	0be2      	lsrs	r2, r4, #15
 801db0e:	3277      	adds	r2, #119	; 0x77
 801db10:	e7dd      	b.n	801dace <_free_r+0x106>
 801db12:	f240 5154 	movw	r1, #1364	; 0x554
 801db16:	428a      	cmp	r2, r1
 801db18:	bf9a      	itte	ls
 801db1a:	0ca2      	lsrls	r2, r4, #18
 801db1c:	327c      	addls	r2, #124	; 0x7c
 801db1e:	227e      	movhi	r2, #126	; 0x7e
 801db20:	e7d5      	b.n	801dace <_free_r+0x106>
 801db22:	6889      	ldr	r1, [r1, #8]
 801db24:	428e      	cmp	r6, r1
 801db26:	d004      	beq.n	801db32 <_free_r+0x16a>
 801db28:	684a      	ldr	r2, [r1, #4]
 801db2a:	f022 0203 	bic.w	r2, r2, #3
 801db2e:	42a2      	cmp	r2, r4
 801db30:	d8f7      	bhi.n	801db22 <_free_r+0x15a>
 801db32:	68ce      	ldr	r6, [r1, #12]
 801db34:	e7d9      	b.n	801daea <_free_r+0x122>
 801db36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db38:	2000051c 	.word	0x2000051c
 801db3c:	20000928 	.word	0x20000928
 801db40:	20001dd8 	.word	0x20001dd8
 801db44:	20000524 	.word	0x20000524

0801db48 <__sfvwrite_r>:
 801db48:	6893      	ldr	r3, [r2, #8]
 801db4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4e:	4606      	mov	r6, r0
 801db50:	460c      	mov	r4, r1
 801db52:	4690      	mov	r8, r2
 801db54:	b91b      	cbnz	r3, 801db5e <__sfvwrite_r+0x16>
 801db56:	2000      	movs	r0, #0
 801db58:	b003      	add	sp, #12
 801db5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db5e:	898b      	ldrh	r3, [r1, #12]
 801db60:	0718      	lsls	r0, r3, #28
 801db62:	d550      	bpl.n	801dc06 <__sfvwrite_r+0xbe>
 801db64:	690b      	ldr	r3, [r1, #16]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d04d      	beq.n	801dc06 <__sfvwrite_r+0xbe>
 801db6a:	89a3      	ldrh	r3, [r4, #12]
 801db6c:	f8d8 7000 	ldr.w	r7, [r8]
 801db70:	f013 0902 	ands.w	r9, r3, #2
 801db74:	d16b      	bne.n	801dc4e <__sfvwrite_r+0x106>
 801db76:	f013 0301 	ands.w	r3, r3, #1
 801db7a:	f000 809b 	beq.w	801dcb4 <__sfvwrite_r+0x16c>
 801db7e:	4648      	mov	r0, r9
 801db80:	46ca      	mov	sl, r9
 801db82:	46cb      	mov	fp, r9
 801db84:	f1bb 0f00 	cmp.w	fp, #0
 801db88:	f000 8102 	beq.w	801dd90 <__sfvwrite_r+0x248>
 801db8c:	b950      	cbnz	r0, 801dba4 <__sfvwrite_r+0x5c>
 801db8e:	465a      	mov	r2, fp
 801db90:	210a      	movs	r1, #10
 801db92:	4650      	mov	r0, sl
 801db94:	f7e2 fafc 	bl	8000190 <memchr>
 801db98:	2800      	cmp	r0, #0
 801db9a:	f000 80fe 	beq.w	801dd9a <__sfvwrite_r+0x252>
 801db9e:	3001      	adds	r0, #1
 801dba0:	eba0 090a 	sub.w	r9, r0, sl
 801dba4:	6820      	ldr	r0, [r4, #0]
 801dba6:	6921      	ldr	r1, [r4, #16]
 801dba8:	6963      	ldr	r3, [r4, #20]
 801dbaa:	45d9      	cmp	r9, fp
 801dbac:	464a      	mov	r2, r9
 801dbae:	bf28      	it	cs
 801dbb0:	465a      	movcs	r2, fp
 801dbb2:	4288      	cmp	r0, r1
 801dbb4:	f240 80f4 	bls.w	801dda0 <__sfvwrite_r+0x258>
 801dbb8:	68a5      	ldr	r5, [r4, #8]
 801dbba:	441d      	add	r5, r3
 801dbbc:	42aa      	cmp	r2, r5
 801dbbe:	f340 80ef 	ble.w	801dda0 <__sfvwrite_r+0x258>
 801dbc2:	4651      	mov	r1, sl
 801dbc4:	462a      	mov	r2, r5
 801dbc6:	f000 fbe5 	bl	801e394 <memmove>
 801dbca:	6823      	ldr	r3, [r4, #0]
 801dbcc:	442b      	add	r3, r5
 801dbce:	6023      	str	r3, [r4, #0]
 801dbd0:	4621      	mov	r1, r4
 801dbd2:	4630      	mov	r0, r6
 801dbd4:	f7ff fdfc 	bl	801d7d0 <_fflush_r>
 801dbd8:	2800      	cmp	r0, #0
 801dbda:	d166      	bne.n	801dcaa <__sfvwrite_r+0x162>
 801dbdc:	ebb9 0905 	subs.w	r9, r9, r5
 801dbe0:	f040 80f6 	bne.w	801ddd0 <__sfvwrite_r+0x288>
 801dbe4:	4621      	mov	r1, r4
 801dbe6:	4630      	mov	r0, r6
 801dbe8:	f7ff fdf2 	bl	801d7d0 <_fflush_r>
 801dbec:	2800      	cmp	r0, #0
 801dbee:	d15c      	bne.n	801dcaa <__sfvwrite_r+0x162>
 801dbf0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801dbf4:	44aa      	add	sl, r5
 801dbf6:	ebab 0b05 	sub.w	fp, fp, r5
 801dbfa:	1b55      	subs	r5, r2, r5
 801dbfc:	f8c8 5008 	str.w	r5, [r8, #8]
 801dc00:	2d00      	cmp	r5, #0
 801dc02:	d1bf      	bne.n	801db84 <__sfvwrite_r+0x3c>
 801dc04:	e7a7      	b.n	801db56 <__sfvwrite_r+0xe>
 801dc06:	4621      	mov	r1, r4
 801dc08:	4630      	mov	r0, r6
 801dc0a:	f7fe feb1 	bl	801c970 <__swsetup_r>
 801dc0e:	2800      	cmp	r0, #0
 801dc10:	d0ab      	beq.n	801db6a <__sfvwrite_r+0x22>
 801dc12:	f04f 30ff 	mov.w	r0, #4294967295
 801dc16:	e79f      	b.n	801db58 <__sfvwrite_r+0x10>
 801dc18:	e9d7 b500 	ldrd	fp, r5, [r7]
 801dc1c:	3708      	adds	r7, #8
 801dc1e:	2d00      	cmp	r5, #0
 801dc20:	d0fa      	beq.n	801dc18 <__sfvwrite_r+0xd0>
 801dc22:	4555      	cmp	r5, sl
 801dc24:	462b      	mov	r3, r5
 801dc26:	69e1      	ldr	r1, [r4, #28]
 801dc28:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 801dc2c:	bf28      	it	cs
 801dc2e:	4653      	movcs	r3, sl
 801dc30:	465a      	mov	r2, fp
 801dc32:	4630      	mov	r0, r6
 801dc34:	47e0      	blx	ip
 801dc36:	2800      	cmp	r0, #0
 801dc38:	dd37      	ble.n	801dcaa <__sfvwrite_r+0x162>
 801dc3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc3e:	4483      	add	fp, r0
 801dc40:	1a2d      	subs	r5, r5, r0
 801dc42:	1a18      	subs	r0, r3, r0
 801dc44:	f8c8 0008 	str.w	r0, [r8, #8]
 801dc48:	2800      	cmp	r0, #0
 801dc4a:	d1e8      	bne.n	801dc1e <__sfvwrite_r+0xd6>
 801dc4c:	e783      	b.n	801db56 <__sfvwrite_r+0xe>
 801dc4e:	f04f 0b00 	mov.w	fp, #0
 801dc52:	f8df a180 	ldr.w	sl, [pc, #384]	; 801ddd4 <__sfvwrite_r+0x28c>
 801dc56:	465d      	mov	r5, fp
 801dc58:	e7e1      	b.n	801dc1e <__sfvwrite_r+0xd6>
 801dc5a:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801dc5e:	3708      	adds	r7, #8
 801dc60:	f1ba 0f00 	cmp.w	sl, #0
 801dc64:	d0f9      	beq.n	801dc5a <__sfvwrite_r+0x112>
 801dc66:	89a3      	ldrh	r3, [r4, #12]
 801dc68:	6820      	ldr	r0, [r4, #0]
 801dc6a:	68a2      	ldr	r2, [r4, #8]
 801dc6c:	0599      	lsls	r1, r3, #22
 801dc6e:	d563      	bpl.n	801dd38 <__sfvwrite_r+0x1f0>
 801dc70:	4552      	cmp	r2, sl
 801dc72:	d836      	bhi.n	801dce2 <__sfvwrite_r+0x19a>
 801dc74:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801dc78:	d033      	beq.n	801dce2 <__sfvwrite_r+0x19a>
 801dc7a:	6921      	ldr	r1, [r4, #16]
 801dc7c:	6965      	ldr	r5, [r4, #20]
 801dc7e:	eba0 0b01 	sub.w	fp, r0, r1
 801dc82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dc86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dc8a:	f10b 0201 	add.w	r2, fp, #1
 801dc8e:	106d      	asrs	r5, r5, #1
 801dc90:	4452      	add	r2, sl
 801dc92:	4295      	cmp	r5, r2
 801dc94:	bf38      	it	cc
 801dc96:	4615      	movcc	r5, r2
 801dc98:	055b      	lsls	r3, r3, #21
 801dc9a:	d53d      	bpl.n	801dd18 <__sfvwrite_r+0x1d0>
 801dc9c:	4629      	mov	r1, r5
 801dc9e:	4630      	mov	r0, r6
 801dca0:	f000 f92e 	bl	801df00 <_malloc_r>
 801dca4:	b948      	cbnz	r0, 801dcba <__sfvwrite_r+0x172>
 801dca6:	230c      	movs	r3, #12
 801dca8:	6033      	str	r3, [r6, #0]
 801dcaa:	89a3      	ldrh	r3, [r4, #12]
 801dcac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dcb0:	81a3      	strh	r3, [r4, #12]
 801dcb2:	e7ae      	b.n	801dc12 <__sfvwrite_r+0xca>
 801dcb4:	4699      	mov	r9, r3
 801dcb6:	469a      	mov	sl, r3
 801dcb8:	e7d2      	b.n	801dc60 <__sfvwrite_r+0x118>
 801dcba:	465a      	mov	r2, fp
 801dcbc:	6921      	ldr	r1, [r4, #16]
 801dcbe:	9001      	str	r0, [sp, #4]
 801dcc0:	f000 fb5a 	bl	801e378 <memcpy>
 801dcc4:	89a2      	ldrh	r2, [r4, #12]
 801dcc6:	9b01      	ldr	r3, [sp, #4]
 801dcc8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801dccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801dcd0:	81a2      	strh	r2, [r4, #12]
 801dcd2:	6123      	str	r3, [r4, #16]
 801dcd4:	6165      	str	r5, [r4, #20]
 801dcd6:	445b      	add	r3, fp
 801dcd8:	eba5 050b 	sub.w	r5, r5, fp
 801dcdc:	6023      	str	r3, [r4, #0]
 801dcde:	4652      	mov	r2, sl
 801dce0:	60a5      	str	r5, [r4, #8]
 801dce2:	4552      	cmp	r2, sl
 801dce4:	bf28      	it	cs
 801dce6:	4652      	movcs	r2, sl
 801dce8:	6820      	ldr	r0, [r4, #0]
 801dcea:	9201      	str	r2, [sp, #4]
 801dcec:	4649      	mov	r1, r9
 801dcee:	f000 fb51 	bl	801e394 <memmove>
 801dcf2:	68a3      	ldr	r3, [r4, #8]
 801dcf4:	9a01      	ldr	r2, [sp, #4]
 801dcf6:	1a9b      	subs	r3, r3, r2
 801dcf8:	60a3      	str	r3, [r4, #8]
 801dcfa:	6823      	ldr	r3, [r4, #0]
 801dcfc:	441a      	add	r2, r3
 801dcfe:	4655      	mov	r5, sl
 801dd00:	6022      	str	r2, [r4, #0]
 801dd02:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801dd06:	44a9      	add	r9, r5
 801dd08:	ebaa 0a05 	sub.w	sl, sl, r5
 801dd0c:	1b45      	subs	r5, r0, r5
 801dd0e:	f8c8 5008 	str.w	r5, [r8, #8]
 801dd12:	2d00      	cmp	r5, #0
 801dd14:	d1a4      	bne.n	801dc60 <__sfvwrite_r+0x118>
 801dd16:	e71e      	b.n	801db56 <__sfvwrite_r+0xe>
 801dd18:	462a      	mov	r2, r5
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	f000 fe90 	bl	801ea40 <_realloc_r>
 801dd20:	4603      	mov	r3, r0
 801dd22:	2800      	cmp	r0, #0
 801dd24:	d1d5      	bne.n	801dcd2 <__sfvwrite_r+0x18a>
 801dd26:	6921      	ldr	r1, [r4, #16]
 801dd28:	4630      	mov	r0, r6
 801dd2a:	f7ff fe4d 	bl	801d9c8 <_free_r>
 801dd2e:	89a3      	ldrh	r3, [r4, #12]
 801dd30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dd34:	81a3      	strh	r3, [r4, #12]
 801dd36:	e7b6      	b.n	801dca6 <__sfvwrite_r+0x15e>
 801dd38:	6923      	ldr	r3, [r4, #16]
 801dd3a:	4283      	cmp	r3, r0
 801dd3c:	d302      	bcc.n	801dd44 <__sfvwrite_r+0x1fc>
 801dd3e:	6961      	ldr	r1, [r4, #20]
 801dd40:	4551      	cmp	r1, sl
 801dd42:	d915      	bls.n	801dd70 <__sfvwrite_r+0x228>
 801dd44:	4552      	cmp	r2, sl
 801dd46:	bf28      	it	cs
 801dd48:	4652      	movcs	r2, sl
 801dd4a:	4649      	mov	r1, r9
 801dd4c:	4615      	mov	r5, r2
 801dd4e:	f000 fb21 	bl	801e394 <memmove>
 801dd52:	68a3      	ldr	r3, [r4, #8]
 801dd54:	6822      	ldr	r2, [r4, #0]
 801dd56:	1b5b      	subs	r3, r3, r5
 801dd58:	442a      	add	r2, r5
 801dd5a:	60a3      	str	r3, [r4, #8]
 801dd5c:	6022      	str	r2, [r4, #0]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d1cf      	bne.n	801dd02 <__sfvwrite_r+0x1ba>
 801dd62:	4621      	mov	r1, r4
 801dd64:	4630      	mov	r0, r6
 801dd66:	f7ff fd33 	bl	801d7d0 <_fflush_r>
 801dd6a:	2800      	cmp	r0, #0
 801dd6c:	d0c9      	beq.n	801dd02 <__sfvwrite_r+0x1ba>
 801dd6e:	e79c      	b.n	801dcaa <__sfvwrite_r+0x162>
 801dd70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801dd74:	459a      	cmp	sl, r3
 801dd76:	bf38      	it	cc
 801dd78:	4653      	movcc	r3, sl
 801dd7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801dd7c:	fb93 f3f1 	sdiv	r3, r3, r1
 801dd80:	464a      	mov	r2, r9
 801dd82:	434b      	muls	r3, r1
 801dd84:	4630      	mov	r0, r6
 801dd86:	69e1      	ldr	r1, [r4, #28]
 801dd88:	47a8      	blx	r5
 801dd8a:	1e05      	subs	r5, r0, #0
 801dd8c:	dcb9      	bgt.n	801dd02 <__sfvwrite_r+0x1ba>
 801dd8e:	e78c      	b.n	801dcaa <__sfvwrite_r+0x162>
 801dd90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801dd94:	2000      	movs	r0, #0
 801dd96:	3708      	adds	r7, #8
 801dd98:	e6f4      	b.n	801db84 <__sfvwrite_r+0x3c>
 801dd9a:	f10b 0901 	add.w	r9, fp, #1
 801dd9e:	e701      	b.n	801dba4 <__sfvwrite_r+0x5c>
 801dda0:	4293      	cmp	r3, r2
 801dda2:	dc08      	bgt.n	801ddb6 <__sfvwrite_r+0x26e>
 801dda4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801dda6:	69e1      	ldr	r1, [r4, #28]
 801dda8:	4652      	mov	r2, sl
 801ddaa:	4630      	mov	r0, r6
 801ddac:	47a8      	blx	r5
 801ddae:	1e05      	subs	r5, r0, #0
 801ddb0:	f73f af14 	bgt.w	801dbdc <__sfvwrite_r+0x94>
 801ddb4:	e779      	b.n	801dcaa <__sfvwrite_r+0x162>
 801ddb6:	4651      	mov	r1, sl
 801ddb8:	9201      	str	r2, [sp, #4]
 801ddba:	f000 faeb 	bl	801e394 <memmove>
 801ddbe:	9a01      	ldr	r2, [sp, #4]
 801ddc0:	68a3      	ldr	r3, [r4, #8]
 801ddc2:	1a9b      	subs	r3, r3, r2
 801ddc4:	60a3      	str	r3, [r4, #8]
 801ddc6:	6823      	ldr	r3, [r4, #0]
 801ddc8:	4413      	add	r3, r2
 801ddca:	6023      	str	r3, [r4, #0]
 801ddcc:	4615      	mov	r5, r2
 801ddce:	e705      	b.n	801dbdc <__sfvwrite_r+0x94>
 801ddd0:	2001      	movs	r0, #1
 801ddd2:	e70d      	b.n	801dbf0 <__sfvwrite_r+0xa8>
 801ddd4:	7ffffc00 	.word	0x7ffffc00

0801ddd8 <_fwalk_reent>:
 801ddd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dddc:	4606      	mov	r6, r0
 801ddde:	4688      	mov	r8, r1
 801dde0:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801dde4:	2700      	movs	r7, #0
 801dde6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ddea:	f1b9 0901 	subs.w	r9, r9, #1
 801ddee:	d505      	bpl.n	801ddfc <_fwalk_reent+0x24>
 801ddf0:	6824      	ldr	r4, [r4, #0]
 801ddf2:	2c00      	cmp	r4, #0
 801ddf4:	d1f7      	bne.n	801dde6 <_fwalk_reent+0xe>
 801ddf6:	4638      	mov	r0, r7
 801ddf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddfc:	89ab      	ldrh	r3, [r5, #12]
 801ddfe:	2b01      	cmp	r3, #1
 801de00:	d907      	bls.n	801de12 <_fwalk_reent+0x3a>
 801de02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801de06:	3301      	adds	r3, #1
 801de08:	d003      	beq.n	801de12 <_fwalk_reent+0x3a>
 801de0a:	4629      	mov	r1, r5
 801de0c:	4630      	mov	r0, r6
 801de0e:	47c0      	blx	r8
 801de10:	4307      	orrs	r7, r0
 801de12:	3568      	adds	r5, #104	; 0x68
 801de14:	e7e9      	b.n	801ddea <_fwalk_reent+0x12>
	...

0801de18 <_localeconv_r>:
 801de18:	4800      	ldr	r0, [pc, #0]	; (801de1c <_localeconv_r+0x4>)
 801de1a:	4770      	bx	lr
 801de1c:	20000a1c 	.word	0x20000a1c

0801de20 <__retarget_lock_init_recursive>:
 801de20:	4770      	bx	lr

0801de22 <__retarget_lock_close_recursive>:
 801de22:	4770      	bx	lr

0801de24 <__retarget_lock_acquire_recursive>:
 801de24:	4770      	bx	lr

0801de26 <__retarget_lock_release_recursive>:
 801de26:	4770      	bx	lr

0801de28 <__swhatbuf_r>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	460e      	mov	r6, r1
 801de2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de30:	2900      	cmp	r1, #0
 801de32:	b096      	sub	sp, #88	; 0x58
 801de34:	4614      	mov	r4, r2
 801de36:	461d      	mov	r5, r3
 801de38:	da0a      	bge.n	801de50 <__swhatbuf_r+0x28>
 801de3a:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 801de3e:	2300      	movs	r3, #0
 801de40:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 801de44:	602b      	str	r3, [r5, #0]
 801de46:	d116      	bne.n	801de76 <__swhatbuf_r+0x4e>
 801de48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de4c:	6023      	str	r3, [r4, #0]
 801de4e:	e015      	b.n	801de7c <__swhatbuf_r+0x54>
 801de50:	466a      	mov	r2, sp
 801de52:	f001 ff47 	bl	801fce4 <_fstat_r>
 801de56:	2800      	cmp	r0, #0
 801de58:	dbef      	blt.n	801de3a <__swhatbuf_r+0x12>
 801de5a:	9a01      	ldr	r2, [sp, #4]
 801de5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801de60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801de64:	425a      	negs	r2, r3
 801de66:	415a      	adcs	r2, r3
 801de68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de6c:	602a      	str	r2, [r5, #0]
 801de6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801de72:	6023      	str	r3, [r4, #0]
 801de74:	e002      	b.n	801de7c <__swhatbuf_r+0x54>
 801de76:	2240      	movs	r2, #64	; 0x40
 801de78:	6022      	str	r2, [r4, #0]
 801de7a:	4618      	mov	r0, r3
 801de7c:	b016      	add	sp, #88	; 0x58
 801de7e:	bd70      	pop	{r4, r5, r6, pc}

0801de80 <__smakebuf_r>:
 801de80:	898b      	ldrh	r3, [r1, #12]
 801de82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801de84:	079d      	lsls	r5, r3, #30
 801de86:	4606      	mov	r6, r0
 801de88:	460c      	mov	r4, r1
 801de8a:	d507      	bpl.n	801de9c <__smakebuf_r+0x1c>
 801de8c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801de90:	6023      	str	r3, [r4, #0]
 801de92:	6123      	str	r3, [r4, #16]
 801de94:	2301      	movs	r3, #1
 801de96:	6163      	str	r3, [r4, #20]
 801de98:	b002      	add	sp, #8
 801de9a:	bd70      	pop	{r4, r5, r6, pc}
 801de9c:	ab01      	add	r3, sp, #4
 801de9e:	466a      	mov	r2, sp
 801dea0:	f7ff ffc2 	bl	801de28 <__swhatbuf_r>
 801dea4:	9900      	ldr	r1, [sp, #0]
 801dea6:	4605      	mov	r5, r0
 801dea8:	4630      	mov	r0, r6
 801deaa:	f000 f829 	bl	801df00 <_malloc_r>
 801deae:	b948      	cbnz	r0, 801dec4 <__smakebuf_r+0x44>
 801deb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801deb4:	059a      	lsls	r2, r3, #22
 801deb6:	d4ef      	bmi.n	801de98 <__smakebuf_r+0x18>
 801deb8:	f023 0303 	bic.w	r3, r3, #3
 801debc:	f043 0302 	orr.w	r3, r3, #2
 801dec0:	81a3      	strh	r3, [r4, #12]
 801dec2:	e7e3      	b.n	801de8c <__smakebuf_r+0xc>
 801dec4:	4b0d      	ldr	r3, [pc, #52]	; (801defc <__smakebuf_r+0x7c>)
 801dec6:	63f3      	str	r3, [r6, #60]	; 0x3c
 801dec8:	89a3      	ldrh	r3, [r4, #12]
 801deca:	6020      	str	r0, [r4, #0]
 801decc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ded0:	81a3      	strh	r3, [r4, #12]
 801ded2:	9b00      	ldr	r3, [sp, #0]
 801ded4:	6163      	str	r3, [r4, #20]
 801ded6:	9b01      	ldr	r3, [sp, #4]
 801ded8:	6120      	str	r0, [r4, #16]
 801deda:	b15b      	cbz	r3, 801def4 <__smakebuf_r+0x74>
 801dedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dee0:	4630      	mov	r0, r6
 801dee2:	f001 ff11 	bl	801fd08 <_isatty_r>
 801dee6:	b128      	cbz	r0, 801def4 <__smakebuf_r+0x74>
 801dee8:	89a3      	ldrh	r3, [r4, #12]
 801deea:	f023 0303 	bic.w	r3, r3, #3
 801deee:	f043 0301 	orr.w	r3, r3, #1
 801def2:	81a3      	strh	r3, [r4, #12]
 801def4:	89a0      	ldrh	r0, [r4, #12]
 801def6:	4305      	orrs	r5, r0
 801def8:	81a5      	strh	r5, [r4, #12]
 801defa:	e7cd      	b.n	801de98 <__smakebuf_r+0x18>
 801defc:	0801d86d 	.word	0x0801d86d

0801df00 <_malloc_r>:
 801df00:	f101 030b 	add.w	r3, r1, #11
 801df04:	2b16      	cmp	r3, #22
 801df06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df0a:	4605      	mov	r5, r0
 801df0c:	d906      	bls.n	801df1c <_malloc_r+0x1c>
 801df0e:	f033 0707 	bics.w	r7, r3, #7
 801df12:	d504      	bpl.n	801df1e <_malloc_r+0x1e>
 801df14:	230c      	movs	r3, #12
 801df16:	602b      	str	r3, [r5, #0]
 801df18:	2400      	movs	r4, #0
 801df1a:	e1a3      	b.n	801e264 <_malloc_r+0x364>
 801df1c:	2710      	movs	r7, #16
 801df1e:	42b9      	cmp	r1, r7
 801df20:	d8f8      	bhi.n	801df14 <_malloc_r+0x14>
 801df22:	4628      	mov	r0, r5
 801df24:	f000 fa50 	bl	801e3c8 <__malloc_lock>
 801df28:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801df2c:	4eaf      	ldr	r6, [pc, #700]	; (801e1ec <_malloc_r+0x2ec>)
 801df2e:	d237      	bcs.n	801dfa0 <_malloc_r+0xa0>
 801df30:	f107 0208 	add.w	r2, r7, #8
 801df34:	4432      	add	r2, r6
 801df36:	f1a2 0108 	sub.w	r1, r2, #8
 801df3a:	6854      	ldr	r4, [r2, #4]
 801df3c:	428c      	cmp	r4, r1
 801df3e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801df42:	d102      	bne.n	801df4a <_malloc_r+0x4a>
 801df44:	68d4      	ldr	r4, [r2, #12]
 801df46:	42a2      	cmp	r2, r4
 801df48:	d010      	beq.n	801df6c <_malloc_r+0x6c>
 801df4a:	6863      	ldr	r3, [r4, #4]
 801df4c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801df50:	f023 0303 	bic.w	r3, r3, #3
 801df54:	60ca      	str	r2, [r1, #12]
 801df56:	4423      	add	r3, r4
 801df58:	6091      	str	r1, [r2, #8]
 801df5a:	685a      	ldr	r2, [r3, #4]
 801df5c:	f042 0201 	orr.w	r2, r2, #1
 801df60:	605a      	str	r2, [r3, #4]
 801df62:	4628      	mov	r0, r5
 801df64:	f000 fa36 	bl	801e3d4 <__malloc_unlock>
 801df68:	3408      	adds	r4, #8
 801df6a:	e17b      	b.n	801e264 <_malloc_r+0x364>
 801df6c:	3302      	adds	r3, #2
 801df6e:	6934      	ldr	r4, [r6, #16]
 801df70:	499f      	ldr	r1, [pc, #636]	; (801e1f0 <_malloc_r+0x2f0>)
 801df72:	428c      	cmp	r4, r1
 801df74:	d077      	beq.n	801e066 <_malloc_r+0x166>
 801df76:	6862      	ldr	r2, [r4, #4]
 801df78:	f022 0c03 	bic.w	ip, r2, #3
 801df7c:	ebac 0007 	sub.w	r0, ip, r7
 801df80:	280f      	cmp	r0, #15
 801df82:	dd48      	ble.n	801e016 <_malloc_r+0x116>
 801df84:	19e2      	adds	r2, r4, r7
 801df86:	f040 0301 	orr.w	r3, r0, #1
 801df8a:	f047 0701 	orr.w	r7, r7, #1
 801df8e:	6067      	str	r7, [r4, #4]
 801df90:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801df94:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801df98:	6053      	str	r3, [r2, #4]
 801df9a:	f844 000c 	str.w	r0, [r4, ip]
 801df9e:	e7e0      	b.n	801df62 <_malloc_r+0x62>
 801dfa0:	0a7b      	lsrs	r3, r7, #9
 801dfa2:	d02a      	beq.n	801dffa <_malloc_r+0xfa>
 801dfa4:	2b04      	cmp	r3, #4
 801dfa6:	d812      	bhi.n	801dfce <_malloc_r+0xce>
 801dfa8:	09bb      	lsrs	r3, r7, #6
 801dfaa:	3338      	adds	r3, #56	; 0x38
 801dfac:	1c5a      	adds	r2, r3, #1
 801dfae:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801dfb2:	f1a2 0c08 	sub.w	ip, r2, #8
 801dfb6:	6854      	ldr	r4, [r2, #4]
 801dfb8:	4564      	cmp	r4, ip
 801dfba:	d006      	beq.n	801dfca <_malloc_r+0xca>
 801dfbc:	6862      	ldr	r2, [r4, #4]
 801dfbe:	f022 0203 	bic.w	r2, r2, #3
 801dfc2:	1bd0      	subs	r0, r2, r7
 801dfc4:	280f      	cmp	r0, #15
 801dfc6:	dd1c      	ble.n	801e002 <_malloc_r+0x102>
 801dfc8:	3b01      	subs	r3, #1
 801dfca:	3301      	adds	r3, #1
 801dfcc:	e7cf      	b.n	801df6e <_malloc_r+0x6e>
 801dfce:	2b14      	cmp	r3, #20
 801dfd0:	d801      	bhi.n	801dfd6 <_malloc_r+0xd6>
 801dfd2:	335b      	adds	r3, #91	; 0x5b
 801dfd4:	e7ea      	b.n	801dfac <_malloc_r+0xac>
 801dfd6:	2b54      	cmp	r3, #84	; 0x54
 801dfd8:	d802      	bhi.n	801dfe0 <_malloc_r+0xe0>
 801dfda:	0b3b      	lsrs	r3, r7, #12
 801dfdc:	336e      	adds	r3, #110	; 0x6e
 801dfde:	e7e5      	b.n	801dfac <_malloc_r+0xac>
 801dfe0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801dfe4:	d802      	bhi.n	801dfec <_malloc_r+0xec>
 801dfe6:	0bfb      	lsrs	r3, r7, #15
 801dfe8:	3377      	adds	r3, #119	; 0x77
 801dfea:	e7df      	b.n	801dfac <_malloc_r+0xac>
 801dfec:	f240 5254 	movw	r2, #1364	; 0x554
 801dff0:	4293      	cmp	r3, r2
 801dff2:	d804      	bhi.n	801dffe <_malloc_r+0xfe>
 801dff4:	0cbb      	lsrs	r3, r7, #18
 801dff6:	337c      	adds	r3, #124	; 0x7c
 801dff8:	e7d8      	b.n	801dfac <_malloc_r+0xac>
 801dffa:	233f      	movs	r3, #63	; 0x3f
 801dffc:	e7d6      	b.n	801dfac <_malloc_r+0xac>
 801dffe:	237e      	movs	r3, #126	; 0x7e
 801e000:	e7d4      	b.n	801dfac <_malloc_r+0xac>
 801e002:	2800      	cmp	r0, #0
 801e004:	68e1      	ldr	r1, [r4, #12]
 801e006:	db04      	blt.n	801e012 <_malloc_r+0x112>
 801e008:	68a3      	ldr	r3, [r4, #8]
 801e00a:	60d9      	str	r1, [r3, #12]
 801e00c:	608b      	str	r3, [r1, #8]
 801e00e:	18a3      	adds	r3, r4, r2
 801e010:	e7a3      	b.n	801df5a <_malloc_r+0x5a>
 801e012:	460c      	mov	r4, r1
 801e014:	e7d0      	b.n	801dfb8 <_malloc_r+0xb8>
 801e016:	2800      	cmp	r0, #0
 801e018:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801e01c:	db07      	blt.n	801e02e <_malloc_r+0x12e>
 801e01e:	44a4      	add	ip, r4
 801e020:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801e024:	f043 0301 	orr.w	r3, r3, #1
 801e028:	f8cc 3004 	str.w	r3, [ip, #4]
 801e02c:	e799      	b.n	801df62 <_malloc_r+0x62>
 801e02e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801e032:	6870      	ldr	r0, [r6, #4]
 801e034:	f080 8094 	bcs.w	801e160 <_malloc_r+0x260>
 801e038:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801e03c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801e040:	f04f 0c01 	mov.w	ip, #1
 801e044:	3201      	adds	r2, #1
 801e046:	fa0c fc0e 	lsl.w	ip, ip, lr
 801e04a:	ea4c 0000 	orr.w	r0, ip, r0
 801e04e:	6070      	str	r0, [r6, #4]
 801e050:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801e054:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801e058:	3808      	subs	r0, #8
 801e05a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801e05e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801e062:	f8cc 400c 	str.w	r4, [ip, #12]
 801e066:	2001      	movs	r0, #1
 801e068:	109a      	asrs	r2, r3, #2
 801e06a:	fa00 f202 	lsl.w	r2, r0, r2
 801e06e:	6870      	ldr	r0, [r6, #4]
 801e070:	4290      	cmp	r0, r2
 801e072:	d326      	bcc.n	801e0c2 <_malloc_r+0x1c2>
 801e074:	4210      	tst	r0, r2
 801e076:	d106      	bne.n	801e086 <_malloc_r+0x186>
 801e078:	f023 0303 	bic.w	r3, r3, #3
 801e07c:	0052      	lsls	r2, r2, #1
 801e07e:	4210      	tst	r0, r2
 801e080:	f103 0304 	add.w	r3, r3, #4
 801e084:	d0fa      	beq.n	801e07c <_malloc_r+0x17c>
 801e086:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801e08a:	46c1      	mov	r9, r8
 801e08c:	469e      	mov	lr, r3
 801e08e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801e092:	454c      	cmp	r4, r9
 801e094:	f040 80b8 	bne.w	801e208 <_malloc_r+0x308>
 801e098:	f10e 0e01 	add.w	lr, lr, #1
 801e09c:	f01e 0f03 	tst.w	lr, #3
 801e0a0:	f109 0908 	add.w	r9, r9, #8
 801e0a4:	d1f3      	bne.n	801e08e <_malloc_r+0x18e>
 801e0a6:	0798      	lsls	r0, r3, #30
 801e0a8:	f040 80e2 	bne.w	801e270 <_malloc_r+0x370>
 801e0ac:	6873      	ldr	r3, [r6, #4]
 801e0ae:	ea23 0302 	bic.w	r3, r3, r2
 801e0b2:	6073      	str	r3, [r6, #4]
 801e0b4:	6870      	ldr	r0, [r6, #4]
 801e0b6:	0052      	lsls	r2, r2, #1
 801e0b8:	4290      	cmp	r0, r2
 801e0ba:	d302      	bcc.n	801e0c2 <_malloc_r+0x1c2>
 801e0bc:	2a00      	cmp	r2, #0
 801e0be:	f040 80e4 	bne.w	801e28a <_malloc_r+0x38a>
 801e0c2:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801e0c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e0ca:	f023 0903 	bic.w	r9, r3, #3
 801e0ce:	45b9      	cmp	r9, r7
 801e0d0:	d304      	bcc.n	801e0dc <_malloc_r+0x1dc>
 801e0d2:	eba9 0207 	sub.w	r2, r9, r7
 801e0d6:	2a0f      	cmp	r2, #15
 801e0d8:	f300 8142 	bgt.w	801e360 <_malloc_r+0x460>
 801e0dc:	4b45      	ldr	r3, [pc, #276]	; (801e1f4 <_malloc_r+0x2f4>)
 801e0de:	6819      	ldr	r1, [r3, #0]
 801e0e0:	3110      	adds	r1, #16
 801e0e2:	4439      	add	r1, r7
 801e0e4:	2008      	movs	r0, #8
 801e0e6:	9101      	str	r1, [sp, #4]
 801e0e8:	f000 ff63 	bl	801efb2 <sysconf>
 801e0ec:	4a42      	ldr	r2, [pc, #264]	; (801e1f8 <_malloc_r+0x2f8>)
 801e0ee:	9901      	ldr	r1, [sp, #4]
 801e0f0:	6813      	ldr	r3, [r2, #0]
 801e0f2:	3301      	adds	r3, #1
 801e0f4:	bf1f      	itttt	ne
 801e0f6:	f101 31ff 	addne.w	r1, r1, #4294967295
 801e0fa:	1809      	addne	r1, r1, r0
 801e0fc:	4243      	negne	r3, r0
 801e0fe:	4019      	andne	r1, r3
 801e100:	4680      	mov	r8, r0
 801e102:	4628      	mov	r0, r5
 801e104:	9101      	str	r1, [sp, #4]
 801e106:	f000 fe73 	bl	801edf0 <_sbrk_r>
 801e10a:	1c42      	adds	r2, r0, #1
 801e10c:	eb0a 0b09 	add.w	fp, sl, r9
 801e110:	4604      	mov	r4, r0
 801e112:	f000 80f8 	beq.w	801e306 <_malloc_r+0x406>
 801e116:	4583      	cmp	fp, r0
 801e118:	9901      	ldr	r1, [sp, #4]
 801e11a:	4a37      	ldr	r2, [pc, #220]	; (801e1f8 <_malloc_r+0x2f8>)
 801e11c:	d902      	bls.n	801e124 <_malloc_r+0x224>
 801e11e:	45b2      	cmp	sl, r6
 801e120:	f040 80f1 	bne.w	801e306 <_malloc_r+0x406>
 801e124:	4b35      	ldr	r3, [pc, #212]	; (801e1fc <_malloc_r+0x2fc>)
 801e126:	6818      	ldr	r0, [r3, #0]
 801e128:	45a3      	cmp	fp, r4
 801e12a:	4408      	add	r0, r1
 801e12c:	6018      	str	r0, [r3, #0]
 801e12e:	f108 3cff 	add.w	ip, r8, #4294967295
 801e132:	f040 80ac 	bne.w	801e28e <_malloc_r+0x38e>
 801e136:	ea1b 0f0c 	tst.w	fp, ip
 801e13a:	f040 80a8 	bne.w	801e28e <_malloc_r+0x38e>
 801e13e:	68b2      	ldr	r2, [r6, #8]
 801e140:	4449      	add	r1, r9
 801e142:	f041 0101 	orr.w	r1, r1, #1
 801e146:	6051      	str	r1, [r2, #4]
 801e148:	4a2d      	ldr	r2, [pc, #180]	; (801e200 <_malloc_r+0x300>)
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	6811      	ldr	r1, [r2, #0]
 801e14e:	428b      	cmp	r3, r1
 801e150:	bf88      	it	hi
 801e152:	6013      	strhi	r3, [r2, #0]
 801e154:	4a2b      	ldr	r2, [pc, #172]	; (801e204 <_malloc_r+0x304>)
 801e156:	6811      	ldr	r1, [r2, #0]
 801e158:	428b      	cmp	r3, r1
 801e15a:	bf88      	it	hi
 801e15c:	6013      	strhi	r3, [r2, #0]
 801e15e:	e0d2      	b.n	801e306 <_malloc_r+0x406>
 801e160:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801e164:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801e168:	d218      	bcs.n	801e19c <_malloc_r+0x29c>
 801e16a:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801e16e:	3238      	adds	r2, #56	; 0x38
 801e170:	f102 0e01 	add.w	lr, r2, #1
 801e174:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801e178:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801e17c:	45f0      	cmp	r8, lr
 801e17e:	d12b      	bne.n	801e1d8 <_malloc_r+0x2d8>
 801e180:	1092      	asrs	r2, r2, #2
 801e182:	f04f 0c01 	mov.w	ip, #1
 801e186:	fa0c f202 	lsl.w	r2, ip, r2
 801e18a:	4310      	orrs	r0, r2
 801e18c:	6070      	str	r0, [r6, #4]
 801e18e:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801e192:	f8c8 4008 	str.w	r4, [r8, #8]
 801e196:	f8ce 400c 	str.w	r4, [lr, #12]
 801e19a:	e764      	b.n	801e066 <_malloc_r+0x166>
 801e19c:	2a14      	cmp	r2, #20
 801e19e:	d801      	bhi.n	801e1a4 <_malloc_r+0x2a4>
 801e1a0:	325b      	adds	r2, #91	; 0x5b
 801e1a2:	e7e5      	b.n	801e170 <_malloc_r+0x270>
 801e1a4:	2a54      	cmp	r2, #84	; 0x54
 801e1a6:	d803      	bhi.n	801e1b0 <_malloc_r+0x2b0>
 801e1a8:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801e1ac:	326e      	adds	r2, #110	; 0x6e
 801e1ae:	e7df      	b.n	801e170 <_malloc_r+0x270>
 801e1b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801e1b4:	d803      	bhi.n	801e1be <_malloc_r+0x2be>
 801e1b6:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801e1ba:	3277      	adds	r2, #119	; 0x77
 801e1bc:	e7d8      	b.n	801e170 <_malloc_r+0x270>
 801e1be:	f240 5e54 	movw	lr, #1364	; 0x554
 801e1c2:	4572      	cmp	r2, lr
 801e1c4:	bf9a      	itte	ls
 801e1c6:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801e1ca:	327c      	addls	r2, #124	; 0x7c
 801e1cc:	227e      	movhi	r2, #126	; 0x7e
 801e1ce:	e7cf      	b.n	801e170 <_malloc_r+0x270>
 801e1d0:	f8de e008 	ldr.w	lr, [lr, #8]
 801e1d4:	45f0      	cmp	r8, lr
 801e1d6:	d005      	beq.n	801e1e4 <_malloc_r+0x2e4>
 801e1d8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e1dc:	f022 0203 	bic.w	r2, r2, #3
 801e1e0:	4562      	cmp	r2, ip
 801e1e2:	d8f5      	bhi.n	801e1d0 <_malloc_r+0x2d0>
 801e1e4:	f8de 800c 	ldr.w	r8, [lr, #12]
 801e1e8:	e7d1      	b.n	801e18e <_malloc_r+0x28e>
 801e1ea:	bf00      	nop
 801e1ec:	2000051c 	.word	0x2000051c
 801e1f0:	20000524 	.word	0x20000524
 801e1f4:	20001dd8 	.word	0x20001dd8
 801e1f8:	20000924 	.word	0x20000924
 801e1fc:	20001da8 	.word	0x20001da8
 801e200:	20001dd0 	.word	0x20001dd0
 801e204:	20001dd4 	.word	0x20001dd4
 801e208:	6860      	ldr	r0, [r4, #4]
 801e20a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801e20e:	f020 0003 	bic.w	r0, r0, #3
 801e212:	eba0 0a07 	sub.w	sl, r0, r7
 801e216:	f1ba 0f0f 	cmp.w	sl, #15
 801e21a:	dd12      	ble.n	801e242 <_malloc_r+0x342>
 801e21c:	68a3      	ldr	r3, [r4, #8]
 801e21e:	19e2      	adds	r2, r4, r7
 801e220:	f047 0701 	orr.w	r7, r7, #1
 801e224:	6067      	str	r7, [r4, #4]
 801e226:	f8c3 c00c 	str.w	ip, [r3, #12]
 801e22a:	f8cc 3008 	str.w	r3, [ip, #8]
 801e22e:	f04a 0301 	orr.w	r3, sl, #1
 801e232:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801e236:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801e23a:	6053      	str	r3, [r2, #4]
 801e23c:	f844 a000 	str.w	sl, [r4, r0]
 801e240:	e68f      	b.n	801df62 <_malloc_r+0x62>
 801e242:	f1ba 0f00 	cmp.w	sl, #0
 801e246:	db11      	blt.n	801e26c <_malloc_r+0x36c>
 801e248:	4420      	add	r0, r4
 801e24a:	6843      	ldr	r3, [r0, #4]
 801e24c:	f043 0301 	orr.w	r3, r3, #1
 801e250:	6043      	str	r3, [r0, #4]
 801e252:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801e256:	4628      	mov	r0, r5
 801e258:	f8c3 c00c 	str.w	ip, [r3, #12]
 801e25c:	f8cc 3008 	str.w	r3, [ip, #8]
 801e260:	f000 f8b8 	bl	801e3d4 <__malloc_unlock>
 801e264:	4620      	mov	r0, r4
 801e266:	b003      	add	sp, #12
 801e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e26c:	4664      	mov	r4, ip
 801e26e:	e710      	b.n	801e092 <_malloc_r+0x192>
 801e270:	f858 0908 	ldr.w	r0, [r8], #-8
 801e274:	4540      	cmp	r0, r8
 801e276:	f103 33ff 	add.w	r3, r3, #4294967295
 801e27a:	f43f af14 	beq.w	801e0a6 <_malloc_r+0x1a6>
 801e27e:	e719      	b.n	801e0b4 <_malloc_r+0x1b4>
 801e280:	3304      	adds	r3, #4
 801e282:	0052      	lsls	r2, r2, #1
 801e284:	4210      	tst	r0, r2
 801e286:	d0fb      	beq.n	801e280 <_malloc_r+0x380>
 801e288:	e6fd      	b.n	801e086 <_malloc_r+0x186>
 801e28a:	4673      	mov	r3, lr
 801e28c:	e7fa      	b.n	801e284 <_malloc_r+0x384>
 801e28e:	f8d2 e000 	ldr.w	lr, [r2]
 801e292:	f1be 3fff 	cmp.w	lr, #4294967295
 801e296:	bf1b      	ittet	ne
 801e298:	eba4 0b0b 	subne.w	fp, r4, fp
 801e29c:	eb0b 0200 	addne.w	r2, fp, r0
 801e2a0:	6014      	streq	r4, [r2, #0]
 801e2a2:	601a      	strne	r2, [r3, #0]
 801e2a4:	f014 0b07 	ands.w	fp, r4, #7
 801e2a8:	bf1a      	itte	ne
 801e2aa:	f1cb 0008 	rsbne	r0, fp, #8
 801e2ae:	1824      	addne	r4, r4, r0
 801e2b0:	4658      	moveq	r0, fp
 801e2b2:	1862      	adds	r2, r4, r1
 801e2b4:	ea02 010c 	and.w	r1, r2, ip
 801e2b8:	4480      	add	r8, r0
 801e2ba:	eba8 0801 	sub.w	r8, r8, r1
 801e2be:	ea08 080c 	and.w	r8, r8, ip
 801e2c2:	4641      	mov	r1, r8
 801e2c4:	4628      	mov	r0, r5
 801e2c6:	9201      	str	r2, [sp, #4]
 801e2c8:	f000 fd92 	bl	801edf0 <_sbrk_r>
 801e2cc:	1c43      	adds	r3, r0, #1
 801e2ce:	9a01      	ldr	r2, [sp, #4]
 801e2d0:	4b28      	ldr	r3, [pc, #160]	; (801e374 <_malloc_r+0x474>)
 801e2d2:	d107      	bne.n	801e2e4 <_malloc_r+0x3e4>
 801e2d4:	f1bb 0f00 	cmp.w	fp, #0
 801e2d8:	d023      	beq.n	801e322 <_malloc_r+0x422>
 801e2da:	f1ab 0008 	sub.w	r0, fp, #8
 801e2de:	4410      	add	r0, r2
 801e2e0:	f04f 0800 	mov.w	r8, #0
 801e2e4:	681a      	ldr	r2, [r3, #0]
 801e2e6:	60b4      	str	r4, [r6, #8]
 801e2e8:	1b00      	subs	r0, r0, r4
 801e2ea:	4440      	add	r0, r8
 801e2ec:	4442      	add	r2, r8
 801e2ee:	f040 0001 	orr.w	r0, r0, #1
 801e2f2:	45b2      	cmp	sl, r6
 801e2f4:	601a      	str	r2, [r3, #0]
 801e2f6:	6060      	str	r0, [r4, #4]
 801e2f8:	f43f af26 	beq.w	801e148 <_malloc_r+0x248>
 801e2fc:	f1b9 0f0f 	cmp.w	r9, #15
 801e300:	d812      	bhi.n	801e328 <_malloc_r+0x428>
 801e302:	2301      	movs	r3, #1
 801e304:	6063      	str	r3, [r4, #4]
 801e306:	68b3      	ldr	r3, [r6, #8]
 801e308:	685b      	ldr	r3, [r3, #4]
 801e30a:	f023 0303 	bic.w	r3, r3, #3
 801e30e:	42bb      	cmp	r3, r7
 801e310:	eba3 0207 	sub.w	r2, r3, r7
 801e314:	d301      	bcc.n	801e31a <_malloc_r+0x41a>
 801e316:	2a0f      	cmp	r2, #15
 801e318:	dc22      	bgt.n	801e360 <_malloc_r+0x460>
 801e31a:	4628      	mov	r0, r5
 801e31c:	f000 f85a 	bl	801e3d4 <__malloc_unlock>
 801e320:	e5fa      	b.n	801df18 <_malloc_r+0x18>
 801e322:	4610      	mov	r0, r2
 801e324:	46d8      	mov	r8, fp
 801e326:	e7dd      	b.n	801e2e4 <_malloc_r+0x3e4>
 801e328:	f8da 2004 	ldr.w	r2, [sl, #4]
 801e32c:	f1a9 090c 	sub.w	r9, r9, #12
 801e330:	f029 0907 	bic.w	r9, r9, #7
 801e334:	f002 0201 	and.w	r2, r2, #1
 801e338:	ea42 0209 	orr.w	r2, r2, r9
 801e33c:	f8ca 2004 	str.w	r2, [sl, #4]
 801e340:	2105      	movs	r1, #5
 801e342:	eb0a 0209 	add.w	r2, sl, r9
 801e346:	f1b9 0f0f 	cmp.w	r9, #15
 801e34a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801e34e:	f67f aefb 	bls.w	801e148 <_malloc_r+0x248>
 801e352:	f10a 0108 	add.w	r1, sl, #8
 801e356:	4628      	mov	r0, r5
 801e358:	f7ff fb36 	bl	801d9c8 <_free_r>
 801e35c:	4b05      	ldr	r3, [pc, #20]	; (801e374 <_malloc_r+0x474>)
 801e35e:	e6f3      	b.n	801e148 <_malloc_r+0x248>
 801e360:	68b4      	ldr	r4, [r6, #8]
 801e362:	f047 0301 	orr.w	r3, r7, #1
 801e366:	4427      	add	r7, r4
 801e368:	f042 0201 	orr.w	r2, r2, #1
 801e36c:	6063      	str	r3, [r4, #4]
 801e36e:	60b7      	str	r7, [r6, #8]
 801e370:	607a      	str	r2, [r7, #4]
 801e372:	e5f6      	b.n	801df62 <_malloc_r+0x62>
 801e374:	20001da8 	.word	0x20001da8

0801e378 <memcpy>:
 801e378:	440a      	add	r2, r1
 801e37a:	4291      	cmp	r1, r2
 801e37c:	f100 33ff 	add.w	r3, r0, #4294967295
 801e380:	d100      	bne.n	801e384 <memcpy+0xc>
 801e382:	4770      	bx	lr
 801e384:	b510      	push	{r4, lr}
 801e386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e38e:	4291      	cmp	r1, r2
 801e390:	d1f9      	bne.n	801e386 <memcpy+0xe>
 801e392:	bd10      	pop	{r4, pc}

0801e394 <memmove>:
 801e394:	4288      	cmp	r0, r1
 801e396:	b510      	push	{r4, lr}
 801e398:	eb01 0402 	add.w	r4, r1, r2
 801e39c:	d902      	bls.n	801e3a4 <memmove+0x10>
 801e39e:	4284      	cmp	r4, r0
 801e3a0:	4623      	mov	r3, r4
 801e3a2:	d807      	bhi.n	801e3b4 <memmove+0x20>
 801e3a4:	1e43      	subs	r3, r0, #1
 801e3a6:	42a1      	cmp	r1, r4
 801e3a8:	d008      	beq.n	801e3bc <memmove+0x28>
 801e3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e3b2:	e7f8      	b.n	801e3a6 <memmove+0x12>
 801e3b4:	4402      	add	r2, r0
 801e3b6:	4601      	mov	r1, r0
 801e3b8:	428a      	cmp	r2, r1
 801e3ba:	d100      	bne.n	801e3be <memmove+0x2a>
 801e3bc:	bd10      	pop	{r4, pc}
 801e3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e3c6:	e7f7      	b.n	801e3b8 <memmove+0x24>

0801e3c8 <__malloc_lock>:
 801e3c8:	4801      	ldr	r0, [pc, #4]	; (801e3d0 <__malloc_lock+0x8>)
 801e3ca:	f7ff bd2b 	b.w	801de24 <__retarget_lock_acquire_recursive>
 801e3ce:	bf00      	nop
 801e3d0:	20001da5 	.word	0x20001da5

0801e3d4 <__malloc_unlock>:
 801e3d4:	4801      	ldr	r0, [pc, #4]	; (801e3dc <__malloc_unlock+0x8>)
 801e3d6:	f7ff bd26 	b.w	801de26 <__retarget_lock_release_recursive>
 801e3da:	bf00      	nop
 801e3dc:	20001da5 	.word	0x20001da5

0801e3e0 <_Balloc>:
 801e3e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801e3e2:	b570      	push	{r4, r5, r6, lr}
 801e3e4:	4605      	mov	r5, r0
 801e3e6:	460c      	mov	r4, r1
 801e3e8:	b17b      	cbz	r3, 801e40a <_Balloc+0x2a>
 801e3ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e3ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e3f0:	b9a0      	cbnz	r0, 801e41c <_Balloc+0x3c>
 801e3f2:	2101      	movs	r1, #1
 801e3f4:	fa01 f604 	lsl.w	r6, r1, r4
 801e3f8:	1d72      	adds	r2, r6, #5
 801e3fa:	0092      	lsls	r2, r2, #2
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	f001 fb57 	bl	801fab0 <_calloc_r>
 801e402:	b148      	cbz	r0, 801e418 <_Balloc+0x38>
 801e404:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801e408:	e00b      	b.n	801e422 <_Balloc+0x42>
 801e40a:	2221      	movs	r2, #33	; 0x21
 801e40c:	2104      	movs	r1, #4
 801e40e:	f001 fb4f 	bl	801fab0 <_calloc_r>
 801e412:	64e8      	str	r0, [r5, #76]	; 0x4c
 801e414:	2800      	cmp	r0, #0
 801e416:	d1e8      	bne.n	801e3ea <_Balloc+0xa>
 801e418:	2000      	movs	r0, #0
 801e41a:	bd70      	pop	{r4, r5, r6, pc}
 801e41c:	6802      	ldr	r2, [r0, #0]
 801e41e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801e422:	2300      	movs	r3, #0
 801e424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e428:	e7f7      	b.n	801e41a <_Balloc+0x3a>

0801e42a <_Bfree>:
 801e42a:	b131      	cbz	r1, 801e43a <_Bfree+0x10>
 801e42c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801e42e:	684a      	ldr	r2, [r1, #4]
 801e430:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e434:	6008      	str	r0, [r1, #0]
 801e436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801e43a:	4770      	bx	lr

0801e43c <__multadd>:
 801e43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e440:	690d      	ldr	r5, [r1, #16]
 801e442:	4607      	mov	r7, r0
 801e444:	460c      	mov	r4, r1
 801e446:	461e      	mov	r6, r3
 801e448:	f101 0c14 	add.w	ip, r1, #20
 801e44c:	2000      	movs	r0, #0
 801e44e:	f8dc 3000 	ldr.w	r3, [ip]
 801e452:	b299      	uxth	r1, r3
 801e454:	fb02 6101 	mla	r1, r2, r1, r6
 801e458:	0c1e      	lsrs	r6, r3, #16
 801e45a:	0c0b      	lsrs	r3, r1, #16
 801e45c:	fb02 3306 	mla	r3, r2, r6, r3
 801e460:	b289      	uxth	r1, r1
 801e462:	3001      	adds	r0, #1
 801e464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e468:	4285      	cmp	r5, r0
 801e46a:	f84c 1b04 	str.w	r1, [ip], #4
 801e46e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e472:	dcec      	bgt.n	801e44e <__multadd+0x12>
 801e474:	b30e      	cbz	r6, 801e4ba <__multadd+0x7e>
 801e476:	68a3      	ldr	r3, [r4, #8]
 801e478:	42ab      	cmp	r3, r5
 801e47a:	dc19      	bgt.n	801e4b0 <__multadd+0x74>
 801e47c:	6861      	ldr	r1, [r4, #4]
 801e47e:	4638      	mov	r0, r7
 801e480:	3101      	adds	r1, #1
 801e482:	f7ff ffad 	bl	801e3e0 <_Balloc>
 801e486:	4680      	mov	r8, r0
 801e488:	b928      	cbnz	r0, 801e496 <__multadd+0x5a>
 801e48a:	4602      	mov	r2, r0
 801e48c:	4b0c      	ldr	r3, [pc, #48]	; (801e4c0 <__multadd+0x84>)
 801e48e:	480d      	ldr	r0, [pc, #52]	; (801e4c4 <__multadd+0x88>)
 801e490:	21b5      	movs	r1, #181	; 0xb5
 801e492:	f001 faef 	bl	801fa74 <__assert_func>
 801e496:	6922      	ldr	r2, [r4, #16]
 801e498:	3202      	adds	r2, #2
 801e49a:	f104 010c 	add.w	r1, r4, #12
 801e49e:	0092      	lsls	r2, r2, #2
 801e4a0:	300c      	adds	r0, #12
 801e4a2:	f7ff ff69 	bl	801e378 <memcpy>
 801e4a6:	4621      	mov	r1, r4
 801e4a8:	4638      	mov	r0, r7
 801e4aa:	f7ff ffbe 	bl	801e42a <_Bfree>
 801e4ae:	4644      	mov	r4, r8
 801e4b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e4b4:	3501      	adds	r5, #1
 801e4b6:	615e      	str	r6, [r3, #20]
 801e4b8:	6125      	str	r5, [r4, #16]
 801e4ba:	4620      	mov	r0, r4
 801e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4c0:	08020959 	.word	0x08020959
 801e4c4:	080209c5 	.word	0x080209c5

0801e4c8 <__hi0bits>:
 801e4c8:	0c02      	lsrs	r2, r0, #16
 801e4ca:	0412      	lsls	r2, r2, #16
 801e4cc:	4603      	mov	r3, r0
 801e4ce:	b9ca      	cbnz	r2, 801e504 <__hi0bits+0x3c>
 801e4d0:	0403      	lsls	r3, r0, #16
 801e4d2:	2010      	movs	r0, #16
 801e4d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e4d8:	bf04      	itt	eq
 801e4da:	021b      	lsleq	r3, r3, #8
 801e4dc:	3008      	addeq	r0, #8
 801e4de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e4e2:	bf04      	itt	eq
 801e4e4:	011b      	lsleq	r3, r3, #4
 801e4e6:	3004      	addeq	r0, #4
 801e4e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e4ec:	bf04      	itt	eq
 801e4ee:	009b      	lsleq	r3, r3, #2
 801e4f0:	3002      	addeq	r0, #2
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	db05      	blt.n	801e502 <__hi0bits+0x3a>
 801e4f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801e4fa:	f100 0001 	add.w	r0, r0, #1
 801e4fe:	bf08      	it	eq
 801e500:	2020      	moveq	r0, #32
 801e502:	4770      	bx	lr
 801e504:	2000      	movs	r0, #0
 801e506:	e7e5      	b.n	801e4d4 <__hi0bits+0xc>

0801e508 <__lo0bits>:
 801e508:	6803      	ldr	r3, [r0, #0]
 801e50a:	4602      	mov	r2, r0
 801e50c:	f013 0007 	ands.w	r0, r3, #7
 801e510:	d00b      	beq.n	801e52a <__lo0bits+0x22>
 801e512:	07d9      	lsls	r1, r3, #31
 801e514:	d421      	bmi.n	801e55a <__lo0bits+0x52>
 801e516:	0798      	lsls	r0, r3, #30
 801e518:	bf49      	itett	mi
 801e51a:	085b      	lsrmi	r3, r3, #1
 801e51c:	089b      	lsrpl	r3, r3, #2
 801e51e:	2001      	movmi	r0, #1
 801e520:	6013      	strmi	r3, [r2, #0]
 801e522:	bf5c      	itt	pl
 801e524:	6013      	strpl	r3, [r2, #0]
 801e526:	2002      	movpl	r0, #2
 801e528:	4770      	bx	lr
 801e52a:	b299      	uxth	r1, r3
 801e52c:	b909      	cbnz	r1, 801e532 <__lo0bits+0x2a>
 801e52e:	0c1b      	lsrs	r3, r3, #16
 801e530:	2010      	movs	r0, #16
 801e532:	b2d9      	uxtb	r1, r3
 801e534:	b909      	cbnz	r1, 801e53a <__lo0bits+0x32>
 801e536:	3008      	adds	r0, #8
 801e538:	0a1b      	lsrs	r3, r3, #8
 801e53a:	0719      	lsls	r1, r3, #28
 801e53c:	bf04      	itt	eq
 801e53e:	091b      	lsreq	r3, r3, #4
 801e540:	3004      	addeq	r0, #4
 801e542:	0799      	lsls	r1, r3, #30
 801e544:	bf04      	itt	eq
 801e546:	089b      	lsreq	r3, r3, #2
 801e548:	3002      	addeq	r0, #2
 801e54a:	07d9      	lsls	r1, r3, #31
 801e54c:	d403      	bmi.n	801e556 <__lo0bits+0x4e>
 801e54e:	085b      	lsrs	r3, r3, #1
 801e550:	f100 0001 	add.w	r0, r0, #1
 801e554:	d003      	beq.n	801e55e <__lo0bits+0x56>
 801e556:	6013      	str	r3, [r2, #0]
 801e558:	4770      	bx	lr
 801e55a:	2000      	movs	r0, #0
 801e55c:	4770      	bx	lr
 801e55e:	2020      	movs	r0, #32
 801e560:	4770      	bx	lr
	...

0801e564 <__i2b>:
 801e564:	b510      	push	{r4, lr}
 801e566:	460c      	mov	r4, r1
 801e568:	2101      	movs	r1, #1
 801e56a:	f7ff ff39 	bl	801e3e0 <_Balloc>
 801e56e:	4602      	mov	r2, r0
 801e570:	b928      	cbnz	r0, 801e57e <__i2b+0x1a>
 801e572:	4b05      	ldr	r3, [pc, #20]	; (801e588 <__i2b+0x24>)
 801e574:	4805      	ldr	r0, [pc, #20]	; (801e58c <__i2b+0x28>)
 801e576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e57a:	f001 fa7b 	bl	801fa74 <__assert_func>
 801e57e:	2301      	movs	r3, #1
 801e580:	6144      	str	r4, [r0, #20]
 801e582:	6103      	str	r3, [r0, #16]
 801e584:	bd10      	pop	{r4, pc}
 801e586:	bf00      	nop
 801e588:	08020959 	.word	0x08020959
 801e58c:	080209c5 	.word	0x080209c5

0801e590 <__multiply>:
 801e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e594:	4691      	mov	r9, r2
 801e596:	690a      	ldr	r2, [r1, #16]
 801e598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e59c:	429a      	cmp	r2, r3
 801e59e:	bfb8      	it	lt
 801e5a0:	460b      	movlt	r3, r1
 801e5a2:	460c      	mov	r4, r1
 801e5a4:	bfbc      	itt	lt
 801e5a6:	464c      	movlt	r4, r9
 801e5a8:	4699      	movlt	r9, r3
 801e5aa:	6927      	ldr	r7, [r4, #16]
 801e5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e5b0:	68a3      	ldr	r3, [r4, #8]
 801e5b2:	6861      	ldr	r1, [r4, #4]
 801e5b4:	eb07 060a 	add.w	r6, r7, sl
 801e5b8:	42b3      	cmp	r3, r6
 801e5ba:	b085      	sub	sp, #20
 801e5bc:	bfb8      	it	lt
 801e5be:	3101      	addlt	r1, #1
 801e5c0:	f7ff ff0e 	bl	801e3e0 <_Balloc>
 801e5c4:	b930      	cbnz	r0, 801e5d4 <__multiply+0x44>
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	4b43      	ldr	r3, [pc, #268]	; (801e6d8 <__multiply+0x148>)
 801e5ca:	4844      	ldr	r0, [pc, #272]	; (801e6dc <__multiply+0x14c>)
 801e5cc:	f240 115d 	movw	r1, #349	; 0x15d
 801e5d0:	f001 fa50 	bl	801fa74 <__assert_func>
 801e5d4:	f100 0514 	add.w	r5, r0, #20
 801e5d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e5dc:	462b      	mov	r3, r5
 801e5de:	2200      	movs	r2, #0
 801e5e0:	4543      	cmp	r3, r8
 801e5e2:	d321      	bcc.n	801e628 <__multiply+0x98>
 801e5e4:	f104 0314 	add.w	r3, r4, #20
 801e5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e5ec:	f109 0314 	add.w	r3, r9, #20
 801e5f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e5f4:	9202      	str	r2, [sp, #8]
 801e5f6:	1b3a      	subs	r2, r7, r4
 801e5f8:	3a15      	subs	r2, #21
 801e5fa:	f022 0203 	bic.w	r2, r2, #3
 801e5fe:	3204      	adds	r2, #4
 801e600:	f104 0115 	add.w	r1, r4, #21
 801e604:	428f      	cmp	r7, r1
 801e606:	bf38      	it	cc
 801e608:	2204      	movcc	r2, #4
 801e60a:	9201      	str	r2, [sp, #4]
 801e60c:	9a02      	ldr	r2, [sp, #8]
 801e60e:	9303      	str	r3, [sp, #12]
 801e610:	429a      	cmp	r2, r3
 801e612:	d80c      	bhi.n	801e62e <__multiply+0x9e>
 801e614:	2e00      	cmp	r6, #0
 801e616:	dd03      	ble.n	801e620 <__multiply+0x90>
 801e618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d059      	beq.n	801e6d4 <__multiply+0x144>
 801e620:	6106      	str	r6, [r0, #16]
 801e622:	b005      	add	sp, #20
 801e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e628:	f843 2b04 	str.w	r2, [r3], #4
 801e62c:	e7d8      	b.n	801e5e0 <__multiply+0x50>
 801e62e:	f8b3 a000 	ldrh.w	sl, [r3]
 801e632:	f1ba 0f00 	cmp.w	sl, #0
 801e636:	d023      	beq.n	801e680 <__multiply+0xf0>
 801e638:	f104 0e14 	add.w	lr, r4, #20
 801e63c:	46a9      	mov	r9, r5
 801e63e:	f04f 0c00 	mov.w	ip, #0
 801e642:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e646:	f8d9 1000 	ldr.w	r1, [r9]
 801e64a:	fa1f fb82 	uxth.w	fp, r2
 801e64e:	b289      	uxth	r1, r1
 801e650:	fb0a 110b 	mla	r1, sl, fp, r1
 801e654:	4461      	add	r1, ip
 801e656:	f8d9 c000 	ldr.w	ip, [r9]
 801e65a:	0c12      	lsrs	r2, r2, #16
 801e65c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e660:	fb0a c202 	mla	r2, sl, r2, ip
 801e664:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e668:	b289      	uxth	r1, r1
 801e66a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e66e:	4577      	cmp	r7, lr
 801e670:	f849 1b04 	str.w	r1, [r9], #4
 801e674:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e678:	d8e3      	bhi.n	801e642 <__multiply+0xb2>
 801e67a:	9a01      	ldr	r2, [sp, #4]
 801e67c:	f845 c002 	str.w	ip, [r5, r2]
 801e680:	9a03      	ldr	r2, [sp, #12]
 801e682:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e686:	3304      	adds	r3, #4
 801e688:	f1b9 0f00 	cmp.w	r9, #0
 801e68c:	d020      	beq.n	801e6d0 <__multiply+0x140>
 801e68e:	6829      	ldr	r1, [r5, #0]
 801e690:	f104 0c14 	add.w	ip, r4, #20
 801e694:	46ae      	mov	lr, r5
 801e696:	f04f 0a00 	mov.w	sl, #0
 801e69a:	f8bc b000 	ldrh.w	fp, [ip]
 801e69e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e6a2:	fb09 220b 	mla	r2, r9, fp, r2
 801e6a6:	4492      	add	sl, r2
 801e6a8:	b289      	uxth	r1, r1
 801e6aa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e6ae:	f84e 1b04 	str.w	r1, [lr], #4
 801e6b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e6b6:	f8be 1000 	ldrh.w	r1, [lr]
 801e6ba:	0c12      	lsrs	r2, r2, #16
 801e6bc:	fb09 1102 	mla	r1, r9, r2, r1
 801e6c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e6c4:	4567      	cmp	r7, ip
 801e6c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e6ca:	d8e6      	bhi.n	801e69a <__multiply+0x10a>
 801e6cc:	9a01      	ldr	r2, [sp, #4]
 801e6ce:	50a9      	str	r1, [r5, r2]
 801e6d0:	3504      	adds	r5, #4
 801e6d2:	e79b      	b.n	801e60c <__multiply+0x7c>
 801e6d4:	3e01      	subs	r6, #1
 801e6d6:	e79d      	b.n	801e614 <__multiply+0x84>
 801e6d8:	08020959 	.word	0x08020959
 801e6dc:	080209c5 	.word	0x080209c5

0801e6e0 <__pow5mult>:
 801e6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6e4:	4615      	mov	r5, r2
 801e6e6:	f012 0203 	ands.w	r2, r2, #3
 801e6ea:	4606      	mov	r6, r0
 801e6ec:	460f      	mov	r7, r1
 801e6ee:	d007      	beq.n	801e700 <__pow5mult+0x20>
 801e6f0:	4c1a      	ldr	r4, [pc, #104]	; (801e75c <__pow5mult+0x7c>)
 801e6f2:	3a01      	subs	r2, #1
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e6fa:	f7ff fe9f 	bl	801e43c <__multadd>
 801e6fe:	4607      	mov	r7, r0
 801e700:	10ad      	asrs	r5, r5, #2
 801e702:	d027      	beq.n	801e754 <__pow5mult+0x74>
 801e704:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801e706:	b944      	cbnz	r4, 801e71a <__pow5mult+0x3a>
 801e708:	f240 2171 	movw	r1, #625	; 0x271
 801e70c:	4630      	mov	r0, r6
 801e70e:	f7ff ff29 	bl	801e564 <__i2b>
 801e712:	2300      	movs	r3, #0
 801e714:	64b0      	str	r0, [r6, #72]	; 0x48
 801e716:	4604      	mov	r4, r0
 801e718:	6003      	str	r3, [r0, #0]
 801e71a:	f04f 0900 	mov.w	r9, #0
 801e71e:	07eb      	lsls	r3, r5, #31
 801e720:	d50a      	bpl.n	801e738 <__pow5mult+0x58>
 801e722:	4639      	mov	r1, r7
 801e724:	4622      	mov	r2, r4
 801e726:	4630      	mov	r0, r6
 801e728:	f7ff ff32 	bl	801e590 <__multiply>
 801e72c:	4639      	mov	r1, r7
 801e72e:	4680      	mov	r8, r0
 801e730:	4630      	mov	r0, r6
 801e732:	f7ff fe7a 	bl	801e42a <_Bfree>
 801e736:	4647      	mov	r7, r8
 801e738:	106d      	asrs	r5, r5, #1
 801e73a:	d00b      	beq.n	801e754 <__pow5mult+0x74>
 801e73c:	6820      	ldr	r0, [r4, #0]
 801e73e:	b938      	cbnz	r0, 801e750 <__pow5mult+0x70>
 801e740:	4622      	mov	r2, r4
 801e742:	4621      	mov	r1, r4
 801e744:	4630      	mov	r0, r6
 801e746:	f7ff ff23 	bl	801e590 <__multiply>
 801e74a:	6020      	str	r0, [r4, #0]
 801e74c:	f8c0 9000 	str.w	r9, [r0]
 801e750:	4604      	mov	r4, r0
 801e752:	e7e4      	b.n	801e71e <__pow5mult+0x3e>
 801e754:	4638      	mov	r0, r7
 801e756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e75a:	bf00      	nop
 801e75c:	08020b18 	.word	0x08020b18

0801e760 <__lshift>:
 801e760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e764:	460c      	mov	r4, r1
 801e766:	6849      	ldr	r1, [r1, #4]
 801e768:	6923      	ldr	r3, [r4, #16]
 801e76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e76e:	68a3      	ldr	r3, [r4, #8]
 801e770:	4607      	mov	r7, r0
 801e772:	4691      	mov	r9, r2
 801e774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e778:	f108 0601 	add.w	r6, r8, #1
 801e77c:	42b3      	cmp	r3, r6
 801e77e:	db0b      	blt.n	801e798 <__lshift+0x38>
 801e780:	4638      	mov	r0, r7
 801e782:	f7ff fe2d 	bl	801e3e0 <_Balloc>
 801e786:	4605      	mov	r5, r0
 801e788:	b948      	cbnz	r0, 801e79e <__lshift+0x3e>
 801e78a:	4602      	mov	r2, r0
 801e78c:	4b2a      	ldr	r3, [pc, #168]	; (801e838 <__lshift+0xd8>)
 801e78e:	482b      	ldr	r0, [pc, #172]	; (801e83c <__lshift+0xdc>)
 801e790:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e794:	f001 f96e 	bl	801fa74 <__assert_func>
 801e798:	3101      	adds	r1, #1
 801e79a:	005b      	lsls	r3, r3, #1
 801e79c:	e7ee      	b.n	801e77c <__lshift+0x1c>
 801e79e:	2300      	movs	r3, #0
 801e7a0:	f100 0114 	add.w	r1, r0, #20
 801e7a4:	f100 0210 	add.w	r2, r0, #16
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	4553      	cmp	r3, sl
 801e7ac:	db37      	blt.n	801e81e <__lshift+0xbe>
 801e7ae:	6920      	ldr	r0, [r4, #16]
 801e7b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e7b4:	f104 0314 	add.w	r3, r4, #20
 801e7b8:	f019 091f 	ands.w	r9, r9, #31
 801e7bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e7c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e7c4:	d02f      	beq.n	801e826 <__lshift+0xc6>
 801e7c6:	f1c9 0e20 	rsb	lr, r9, #32
 801e7ca:	468a      	mov	sl, r1
 801e7cc:	f04f 0c00 	mov.w	ip, #0
 801e7d0:	681a      	ldr	r2, [r3, #0]
 801e7d2:	fa02 f209 	lsl.w	r2, r2, r9
 801e7d6:	ea42 020c 	orr.w	r2, r2, ip
 801e7da:	f84a 2b04 	str.w	r2, [sl], #4
 801e7de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e7e2:	4298      	cmp	r0, r3
 801e7e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e7e8:	d8f2      	bhi.n	801e7d0 <__lshift+0x70>
 801e7ea:	1b03      	subs	r3, r0, r4
 801e7ec:	3b15      	subs	r3, #21
 801e7ee:	f023 0303 	bic.w	r3, r3, #3
 801e7f2:	3304      	adds	r3, #4
 801e7f4:	f104 0215 	add.w	r2, r4, #21
 801e7f8:	4290      	cmp	r0, r2
 801e7fa:	bf38      	it	cc
 801e7fc:	2304      	movcc	r3, #4
 801e7fe:	f841 c003 	str.w	ip, [r1, r3]
 801e802:	f1bc 0f00 	cmp.w	ip, #0
 801e806:	d001      	beq.n	801e80c <__lshift+0xac>
 801e808:	f108 0602 	add.w	r6, r8, #2
 801e80c:	3e01      	subs	r6, #1
 801e80e:	4638      	mov	r0, r7
 801e810:	612e      	str	r6, [r5, #16]
 801e812:	4621      	mov	r1, r4
 801e814:	f7ff fe09 	bl	801e42a <_Bfree>
 801e818:	4628      	mov	r0, r5
 801e81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e81e:	f842 0f04 	str.w	r0, [r2, #4]!
 801e822:	3301      	adds	r3, #1
 801e824:	e7c1      	b.n	801e7aa <__lshift+0x4a>
 801e826:	3904      	subs	r1, #4
 801e828:	f853 2b04 	ldr.w	r2, [r3], #4
 801e82c:	f841 2f04 	str.w	r2, [r1, #4]!
 801e830:	4298      	cmp	r0, r3
 801e832:	d8f9      	bhi.n	801e828 <__lshift+0xc8>
 801e834:	e7ea      	b.n	801e80c <__lshift+0xac>
 801e836:	bf00      	nop
 801e838:	08020959 	.word	0x08020959
 801e83c:	080209c5 	.word	0x080209c5

0801e840 <__mcmp>:
 801e840:	690a      	ldr	r2, [r1, #16]
 801e842:	4603      	mov	r3, r0
 801e844:	6900      	ldr	r0, [r0, #16]
 801e846:	1a80      	subs	r0, r0, r2
 801e848:	b530      	push	{r4, r5, lr}
 801e84a:	d10d      	bne.n	801e868 <__mcmp+0x28>
 801e84c:	3314      	adds	r3, #20
 801e84e:	3114      	adds	r1, #20
 801e850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e860:	4295      	cmp	r5, r2
 801e862:	d002      	beq.n	801e86a <__mcmp+0x2a>
 801e864:	d304      	bcc.n	801e870 <__mcmp+0x30>
 801e866:	2001      	movs	r0, #1
 801e868:	bd30      	pop	{r4, r5, pc}
 801e86a:	42a3      	cmp	r3, r4
 801e86c:	d3f4      	bcc.n	801e858 <__mcmp+0x18>
 801e86e:	e7fb      	b.n	801e868 <__mcmp+0x28>
 801e870:	f04f 30ff 	mov.w	r0, #4294967295
 801e874:	e7f8      	b.n	801e868 <__mcmp+0x28>
	...

0801e878 <__mdiff>:
 801e878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e87c:	460d      	mov	r5, r1
 801e87e:	4607      	mov	r7, r0
 801e880:	4611      	mov	r1, r2
 801e882:	4628      	mov	r0, r5
 801e884:	4614      	mov	r4, r2
 801e886:	f7ff ffdb 	bl	801e840 <__mcmp>
 801e88a:	1e06      	subs	r6, r0, #0
 801e88c:	d111      	bne.n	801e8b2 <__mdiff+0x3a>
 801e88e:	4631      	mov	r1, r6
 801e890:	4638      	mov	r0, r7
 801e892:	f7ff fda5 	bl	801e3e0 <_Balloc>
 801e896:	4602      	mov	r2, r0
 801e898:	b928      	cbnz	r0, 801e8a6 <__mdiff+0x2e>
 801e89a:	4b39      	ldr	r3, [pc, #228]	; (801e980 <__mdiff+0x108>)
 801e89c:	f240 2132 	movw	r1, #562	; 0x232
 801e8a0:	4838      	ldr	r0, [pc, #224]	; (801e984 <__mdiff+0x10c>)
 801e8a2:	f001 f8e7 	bl	801fa74 <__assert_func>
 801e8a6:	2301      	movs	r3, #1
 801e8a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801e8ac:	4610      	mov	r0, r2
 801e8ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8b2:	bfa4      	itt	ge
 801e8b4:	4623      	movge	r3, r4
 801e8b6:	462c      	movge	r4, r5
 801e8b8:	4638      	mov	r0, r7
 801e8ba:	6861      	ldr	r1, [r4, #4]
 801e8bc:	bfa6      	itte	ge
 801e8be:	461d      	movge	r5, r3
 801e8c0:	2600      	movge	r6, #0
 801e8c2:	2601      	movlt	r6, #1
 801e8c4:	f7ff fd8c 	bl	801e3e0 <_Balloc>
 801e8c8:	4602      	mov	r2, r0
 801e8ca:	b918      	cbnz	r0, 801e8d4 <__mdiff+0x5c>
 801e8cc:	4b2c      	ldr	r3, [pc, #176]	; (801e980 <__mdiff+0x108>)
 801e8ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e8d2:	e7e5      	b.n	801e8a0 <__mdiff+0x28>
 801e8d4:	6927      	ldr	r7, [r4, #16]
 801e8d6:	60c6      	str	r6, [r0, #12]
 801e8d8:	692e      	ldr	r6, [r5, #16]
 801e8da:	f104 0014 	add.w	r0, r4, #20
 801e8de:	f105 0914 	add.w	r9, r5, #20
 801e8e2:	f102 0e14 	add.w	lr, r2, #20
 801e8e6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801e8ea:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e8ee:	3410      	adds	r4, #16
 801e8f0:	46f2      	mov	sl, lr
 801e8f2:	2100      	movs	r1, #0
 801e8f4:	f859 3b04 	ldr.w	r3, [r9], #4
 801e8f8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801e8fc:	fa1f f883 	uxth.w	r8, r3
 801e900:	fa11 f18b 	uxtah	r1, r1, fp
 801e904:	0c1b      	lsrs	r3, r3, #16
 801e906:	eba1 0808 	sub.w	r8, r1, r8
 801e90a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e90e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e912:	fa1f f888 	uxth.w	r8, r8
 801e916:	1419      	asrs	r1, r3, #16
 801e918:	454e      	cmp	r6, r9
 801e91a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e91e:	f84a 3b04 	str.w	r3, [sl], #4
 801e922:	d8e7      	bhi.n	801e8f4 <__mdiff+0x7c>
 801e924:	1b73      	subs	r3, r6, r5
 801e926:	3b15      	subs	r3, #21
 801e928:	f023 0303 	bic.w	r3, r3, #3
 801e92c:	3304      	adds	r3, #4
 801e92e:	3515      	adds	r5, #21
 801e930:	42ae      	cmp	r6, r5
 801e932:	bf38      	it	cc
 801e934:	2304      	movcc	r3, #4
 801e936:	4418      	add	r0, r3
 801e938:	4473      	add	r3, lr
 801e93a:	469e      	mov	lr, r3
 801e93c:	4606      	mov	r6, r0
 801e93e:	4566      	cmp	r6, ip
 801e940:	d30e      	bcc.n	801e960 <__mdiff+0xe8>
 801e942:	f10c 0103 	add.w	r1, ip, #3
 801e946:	1a09      	subs	r1, r1, r0
 801e948:	f021 0103 	bic.w	r1, r1, #3
 801e94c:	3803      	subs	r0, #3
 801e94e:	4584      	cmp	ip, r0
 801e950:	bf38      	it	cc
 801e952:	2100      	movcc	r1, #0
 801e954:	4419      	add	r1, r3
 801e956:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801e95a:	b17b      	cbz	r3, 801e97c <__mdiff+0x104>
 801e95c:	6117      	str	r7, [r2, #16]
 801e95e:	e7a5      	b.n	801e8ac <__mdiff+0x34>
 801e960:	f856 8b04 	ldr.w	r8, [r6], #4
 801e964:	fa11 f488 	uxtah	r4, r1, r8
 801e968:	1425      	asrs	r5, r4, #16
 801e96a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801e96e:	b2a4      	uxth	r4, r4
 801e970:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801e974:	f84e 4b04 	str.w	r4, [lr], #4
 801e978:	1429      	asrs	r1, r5, #16
 801e97a:	e7e0      	b.n	801e93e <__mdiff+0xc6>
 801e97c:	3f01      	subs	r7, #1
 801e97e:	e7ea      	b.n	801e956 <__mdiff+0xde>
 801e980:	08020959 	.word	0x08020959
 801e984:	080209c5 	.word	0x080209c5

0801e988 <__d2b>:
 801e988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e98c:	2101      	movs	r1, #1
 801e98e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801e992:	4690      	mov	r8, r2
 801e994:	461d      	mov	r5, r3
 801e996:	f7ff fd23 	bl	801e3e0 <_Balloc>
 801e99a:	4604      	mov	r4, r0
 801e99c:	b930      	cbnz	r0, 801e9ac <__d2b+0x24>
 801e99e:	4602      	mov	r2, r0
 801e9a0:	4b25      	ldr	r3, [pc, #148]	; (801ea38 <__d2b+0xb0>)
 801e9a2:	4826      	ldr	r0, [pc, #152]	; (801ea3c <__d2b+0xb4>)
 801e9a4:	f240 310a 	movw	r1, #778	; 0x30a
 801e9a8:	f001 f864 	bl	801fa74 <__assert_func>
 801e9ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801e9b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801e9b4:	bb2d      	cbnz	r5, 801ea02 <__d2b+0x7a>
 801e9b6:	9301      	str	r3, [sp, #4]
 801e9b8:	f1b8 0300 	subs.w	r3, r8, #0
 801e9bc:	d026      	beq.n	801ea0c <__d2b+0x84>
 801e9be:	4668      	mov	r0, sp
 801e9c0:	9300      	str	r3, [sp, #0]
 801e9c2:	f7ff fda1 	bl	801e508 <__lo0bits>
 801e9c6:	9900      	ldr	r1, [sp, #0]
 801e9c8:	b1f0      	cbz	r0, 801ea08 <__d2b+0x80>
 801e9ca:	9a01      	ldr	r2, [sp, #4]
 801e9cc:	f1c0 0320 	rsb	r3, r0, #32
 801e9d0:	fa02 f303 	lsl.w	r3, r2, r3
 801e9d4:	430b      	orrs	r3, r1
 801e9d6:	40c2      	lsrs	r2, r0
 801e9d8:	6163      	str	r3, [r4, #20]
 801e9da:	9201      	str	r2, [sp, #4]
 801e9dc:	9b01      	ldr	r3, [sp, #4]
 801e9de:	61a3      	str	r3, [r4, #24]
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	bf14      	ite	ne
 801e9e4:	2102      	movne	r1, #2
 801e9e6:	2101      	moveq	r1, #1
 801e9e8:	6121      	str	r1, [r4, #16]
 801e9ea:	b1c5      	cbz	r5, 801ea1e <__d2b+0x96>
 801e9ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e9f0:	4405      	add	r5, r0
 801e9f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e9f6:	603d      	str	r5, [r7, #0]
 801e9f8:	6030      	str	r0, [r6, #0]
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	b002      	add	sp, #8
 801e9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ea06:	e7d6      	b.n	801e9b6 <__d2b+0x2e>
 801ea08:	6161      	str	r1, [r4, #20]
 801ea0a:	e7e7      	b.n	801e9dc <__d2b+0x54>
 801ea0c:	a801      	add	r0, sp, #4
 801ea0e:	f7ff fd7b 	bl	801e508 <__lo0bits>
 801ea12:	9b01      	ldr	r3, [sp, #4]
 801ea14:	6163      	str	r3, [r4, #20]
 801ea16:	2101      	movs	r1, #1
 801ea18:	6121      	str	r1, [r4, #16]
 801ea1a:	3020      	adds	r0, #32
 801ea1c:	e7e5      	b.n	801e9ea <__d2b+0x62>
 801ea1e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801ea22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ea26:	6038      	str	r0, [r7, #0]
 801ea28:	6918      	ldr	r0, [r3, #16]
 801ea2a:	f7ff fd4d 	bl	801e4c8 <__hi0bits>
 801ea2e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801ea32:	6031      	str	r1, [r6, #0]
 801ea34:	e7e1      	b.n	801e9fa <__d2b+0x72>
 801ea36:	bf00      	nop
 801ea38:	08020959 	.word	0x08020959
 801ea3c:	080209c5 	.word	0x080209c5

0801ea40 <_realloc_r>:
 801ea40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea44:	460c      	mov	r4, r1
 801ea46:	4681      	mov	r9, r0
 801ea48:	4611      	mov	r1, r2
 801ea4a:	b924      	cbnz	r4, 801ea56 <_realloc_r+0x16>
 801ea4c:	b003      	add	sp, #12
 801ea4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea52:	f7ff ba55 	b.w	801df00 <_malloc_r>
 801ea56:	9201      	str	r2, [sp, #4]
 801ea58:	f7ff fcb6 	bl	801e3c8 <__malloc_lock>
 801ea5c:	9901      	ldr	r1, [sp, #4]
 801ea5e:	f101 080b 	add.w	r8, r1, #11
 801ea62:	f1b8 0f16 	cmp.w	r8, #22
 801ea66:	d90b      	bls.n	801ea80 <_realloc_r+0x40>
 801ea68:	f038 0807 	bics.w	r8, r8, #7
 801ea6c:	d50a      	bpl.n	801ea84 <_realloc_r+0x44>
 801ea6e:	230c      	movs	r3, #12
 801ea70:	f8c9 3000 	str.w	r3, [r9]
 801ea74:	f04f 0b00 	mov.w	fp, #0
 801ea78:	4658      	mov	r0, fp
 801ea7a:	b003      	add	sp, #12
 801ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea80:	f04f 0810 	mov.w	r8, #16
 801ea84:	4588      	cmp	r8, r1
 801ea86:	d3f2      	bcc.n	801ea6e <_realloc_r+0x2e>
 801ea88:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801ea8c:	f025 0603 	bic.w	r6, r5, #3
 801ea90:	45b0      	cmp	r8, r6
 801ea92:	f1a4 0a08 	sub.w	sl, r4, #8
 801ea96:	f340 816e 	ble.w	801ed76 <_realloc_r+0x336>
 801ea9a:	4a9b      	ldr	r2, [pc, #620]	; (801ed08 <_realloc_r+0x2c8>)
 801ea9c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801eaa0:	eb0a 0306 	add.w	r3, sl, r6
 801eaa4:	459c      	cmp	ip, r3
 801eaa6:	685a      	ldr	r2, [r3, #4]
 801eaa8:	d005      	beq.n	801eab6 <_realloc_r+0x76>
 801eaaa:	f022 0001 	bic.w	r0, r2, #1
 801eaae:	4418      	add	r0, r3
 801eab0:	6840      	ldr	r0, [r0, #4]
 801eab2:	07c7      	lsls	r7, r0, #31
 801eab4:	d427      	bmi.n	801eb06 <_realloc_r+0xc6>
 801eab6:	f022 0203 	bic.w	r2, r2, #3
 801eaba:	459c      	cmp	ip, r3
 801eabc:	eb06 0702 	add.w	r7, r6, r2
 801eac0:	d119      	bne.n	801eaf6 <_realloc_r+0xb6>
 801eac2:	f108 0010 	add.w	r0, r8, #16
 801eac6:	42b8      	cmp	r0, r7
 801eac8:	dc1f      	bgt.n	801eb0a <_realloc_r+0xca>
 801eaca:	eb0a 0308 	add.w	r3, sl, r8
 801eace:	4a8e      	ldr	r2, [pc, #568]	; (801ed08 <_realloc_r+0x2c8>)
 801ead0:	eba7 0708 	sub.w	r7, r7, r8
 801ead4:	f047 0701 	orr.w	r7, r7, #1
 801ead8:	6093      	str	r3, [r2, #8]
 801eada:	605f      	str	r7, [r3, #4]
 801eadc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801eae0:	f003 0301 	and.w	r3, r3, #1
 801eae4:	ea43 0308 	orr.w	r3, r3, r8
 801eae8:	f844 3c04 	str.w	r3, [r4, #-4]
 801eaec:	4648      	mov	r0, r9
 801eaee:	f7ff fc71 	bl	801e3d4 <__malloc_unlock>
 801eaf2:	46a3      	mov	fp, r4
 801eaf4:	e7c0      	b.n	801ea78 <_realloc_r+0x38>
 801eaf6:	45b8      	cmp	r8, r7
 801eaf8:	dc07      	bgt.n	801eb0a <_realloc_r+0xca>
 801eafa:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801eafe:	60da      	str	r2, [r3, #12]
 801eb00:	6093      	str	r3, [r2, #8]
 801eb02:	4655      	mov	r5, sl
 801eb04:	e07f      	b.n	801ec06 <_realloc_r+0x1c6>
 801eb06:	2200      	movs	r2, #0
 801eb08:	4613      	mov	r3, r2
 801eb0a:	07e8      	lsls	r0, r5, #31
 801eb0c:	f100 80e5 	bmi.w	801ecda <_realloc_r+0x29a>
 801eb10:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801eb14:	ebaa 0505 	sub.w	r5, sl, r5
 801eb18:	6868      	ldr	r0, [r5, #4]
 801eb1a:	f020 0003 	bic.w	r0, r0, #3
 801eb1e:	eb00 0b06 	add.w	fp, r0, r6
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	f000 80a5 	beq.w	801ec72 <_realloc_r+0x232>
 801eb28:	459c      	cmp	ip, r3
 801eb2a:	eb02 070b 	add.w	r7, r2, fp
 801eb2e:	d14a      	bne.n	801ebc6 <_realloc_r+0x186>
 801eb30:	f108 0310 	add.w	r3, r8, #16
 801eb34:	42bb      	cmp	r3, r7
 801eb36:	f300 809c 	bgt.w	801ec72 <_realloc_r+0x232>
 801eb3a:	46ab      	mov	fp, r5
 801eb3c:	68eb      	ldr	r3, [r5, #12]
 801eb3e:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801eb42:	60d3      	str	r3, [r2, #12]
 801eb44:	609a      	str	r2, [r3, #8]
 801eb46:	1f32      	subs	r2, r6, #4
 801eb48:	2a24      	cmp	r2, #36	; 0x24
 801eb4a:	d837      	bhi.n	801ebbc <_realloc_r+0x17c>
 801eb4c:	2a13      	cmp	r2, #19
 801eb4e:	d933      	bls.n	801ebb8 <_realloc_r+0x178>
 801eb50:	6823      	ldr	r3, [r4, #0]
 801eb52:	60ab      	str	r3, [r5, #8]
 801eb54:	6863      	ldr	r3, [r4, #4]
 801eb56:	60eb      	str	r3, [r5, #12]
 801eb58:	2a1b      	cmp	r2, #27
 801eb5a:	d81b      	bhi.n	801eb94 <_realloc_r+0x154>
 801eb5c:	3408      	adds	r4, #8
 801eb5e:	f105 0310 	add.w	r3, r5, #16
 801eb62:	6822      	ldr	r2, [r4, #0]
 801eb64:	601a      	str	r2, [r3, #0]
 801eb66:	6862      	ldr	r2, [r4, #4]
 801eb68:	605a      	str	r2, [r3, #4]
 801eb6a:	68a2      	ldr	r2, [r4, #8]
 801eb6c:	609a      	str	r2, [r3, #8]
 801eb6e:	eb05 0308 	add.w	r3, r5, r8
 801eb72:	4a65      	ldr	r2, [pc, #404]	; (801ed08 <_realloc_r+0x2c8>)
 801eb74:	eba7 0708 	sub.w	r7, r7, r8
 801eb78:	f047 0701 	orr.w	r7, r7, #1
 801eb7c:	6093      	str	r3, [r2, #8]
 801eb7e:	605f      	str	r7, [r3, #4]
 801eb80:	686b      	ldr	r3, [r5, #4]
 801eb82:	f003 0301 	and.w	r3, r3, #1
 801eb86:	ea43 0308 	orr.w	r3, r3, r8
 801eb8a:	606b      	str	r3, [r5, #4]
 801eb8c:	4648      	mov	r0, r9
 801eb8e:	f7ff fc21 	bl	801e3d4 <__malloc_unlock>
 801eb92:	e771      	b.n	801ea78 <_realloc_r+0x38>
 801eb94:	68a3      	ldr	r3, [r4, #8]
 801eb96:	612b      	str	r3, [r5, #16]
 801eb98:	68e3      	ldr	r3, [r4, #12]
 801eb9a:	616b      	str	r3, [r5, #20]
 801eb9c:	2a24      	cmp	r2, #36	; 0x24
 801eb9e:	bf01      	itttt	eq
 801eba0:	6923      	ldreq	r3, [r4, #16]
 801eba2:	61ab      	streq	r3, [r5, #24]
 801eba4:	6962      	ldreq	r2, [r4, #20]
 801eba6:	61ea      	streq	r2, [r5, #28]
 801eba8:	bf19      	ittee	ne
 801ebaa:	3410      	addne	r4, #16
 801ebac:	f105 0318 	addne.w	r3, r5, #24
 801ebb0:	f105 0320 	addeq.w	r3, r5, #32
 801ebb4:	3418      	addeq	r4, #24
 801ebb6:	e7d4      	b.n	801eb62 <_realloc_r+0x122>
 801ebb8:	465b      	mov	r3, fp
 801ebba:	e7d2      	b.n	801eb62 <_realloc_r+0x122>
 801ebbc:	4621      	mov	r1, r4
 801ebbe:	4658      	mov	r0, fp
 801ebc0:	f7ff fbe8 	bl	801e394 <memmove>
 801ebc4:	e7d3      	b.n	801eb6e <_realloc_r+0x12e>
 801ebc6:	45b8      	cmp	r8, r7
 801ebc8:	dc53      	bgt.n	801ec72 <_realloc_r+0x232>
 801ebca:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801ebce:	4628      	mov	r0, r5
 801ebd0:	60da      	str	r2, [r3, #12]
 801ebd2:	6093      	str	r3, [r2, #8]
 801ebd4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801ebd8:	68eb      	ldr	r3, [r5, #12]
 801ebda:	60d3      	str	r3, [r2, #12]
 801ebdc:	609a      	str	r2, [r3, #8]
 801ebde:	1f32      	subs	r2, r6, #4
 801ebe0:	2a24      	cmp	r2, #36	; 0x24
 801ebe2:	d842      	bhi.n	801ec6a <_realloc_r+0x22a>
 801ebe4:	2a13      	cmp	r2, #19
 801ebe6:	d908      	bls.n	801ebfa <_realloc_r+0x1ba>
 801ebe8:	6823      	ldr	r3, [r4, #0]
 801ebea:	60ab      	str	r3, [r5, #8]
 801ebec:	6863      	ldr	r3, [r4, #4]
 801ebee:	60eb      	str	r3, [r5, #12]
 801ebf0:	2a1b      	cmp	r2, #27
 801ebf2:	d828      	bhi.n	801ec46 <_realloc_r+0x206>
 801ebf4:	3408      	adds	r4, #8
 801ebf6:	f105 0010 	add.w	r0, r5, #16
 801ebfa:	6823      	ldr	r3, [r4, #0]
 801ebfc:	6003      	str	r3, [r0, #0]
 801ebfe:	6863      	ldr	r3, [r4, #4]
 801ec00:	6043      	str	r3, [r0, #4]
 801ec02:	68a3      	ldr	r3, [r4, #8]
 801ec04:	6083      	str	r3, [r0, #8]
 801ec06:	686b      	ldr	r3, [r5, #4]
 801ec08:	eba7 0008 	sub.w	r0, r7, r8
 801ec0c:	280f      	cmp	r0, #15
 801ec0e:	f003 0301 	and.w	r3, r3, #1
 801ec12:	eb05 0207 	add.w	r2, r5, r7
 801ec16:	f240 80b0 	bls.w	801ed7a <_realloc_r+0x33a>
 801ec1a:	eb05 0108 	add.w	r1, r5, r8
 801ec1e:	ea48 0303 	orr.w	r3, r8, r3
 801ec22:	f040 0001 	orr.w	r0, r0, #1
 801ec26:	606b      	str	r3, [r5, #4]
 801ec28:	6048      	str	r0, [r1, #4]
 801ec2a:	6853      	ldr	r3, [r2, #4]
 801ec2c:	f043 0301 	orr.w	r3, r3, #1
 801ec30:	6053      	str	r3, [r2, #4]
 801ec32:	3108      	adds	r1, #8
 801ec34:	4648      	mov	r0, r9
 801ec36:	f7fe fec7 	bl	801d9c8 <_free_r>
 801ec3a:	4648      	mov	r0, r9
 801ec3c:	f7ff fbca 	bl	801e3d4 <__malloc_unlock>
 801ec40:	f105 0b08 	add.w	fp, r5, #8
 801ec44:	e718      	b.n	801ea78 <_realloc_r+0x38>
 801ec46:	68a3      	ldr	r3, [r4, #8]
 801ec48:	612b      	str	r3, [r5, #16]
 801ec4a:	68e3      	ldr	r3, [r4, #12]
 801ec4c:	616b      	str	r3, [r5, #20]
 801ec4e:	2a24      	cmp	r2, #36	; 0x24
 801ec50:	bf01      	itttt	eq
 801ec52:	6923      	ldreq	r3, [r4, #16]
 801ec54:	61ab      	streq	r3, [r5, #24]
 801ec56:	6963      	ldreq	r3, [r4, #20]
 801ec58:	61eb      	streq	r3, [r5, #28]
 801ec5a:	bf19      	ittee	ne
 801ec5c:	3410      	addne	r4, #16
 801ec5e:	f105 0018 	addne.w	r0, r5, #24
 801ec62:	f105 0020 	addeq.w	r0, r5, #32
 801ec66:	3418      	addeq	r4, #24
 801ec68:	e7c7      	b.n	801ebfa <_realloc_r+0x1ba>
 801ec6a:	4621      	mov	r1, r4
 801ec6c:	f7ff fb92 	bl	801e394 <memmove>
 801ec70:	e7c9      	b.n	801ec06 <_realloc_r+0x1c6>
 801ec72:	45d8      	cmp	r8, fp
 801ec74:	dc31      	bgt.n	801ecda <_realloc_r+0x29a>
 801ec76:	4628      	mov	r0, r5
 801ec78:	68eb      	ldr	r3, [r5, #12]
 801ec7a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801ec7e:	60d3      	str	r3, [r2, #12]
 801ec80:	609a      	str	r2, [r3, #8]
 801ec82:	1f32      	subs	r2, r6, #4
 801ec84:	2a24      	cmp	r2, #36	; 0x24
 801ec86:	d824      	bhi.n	801ecd2 <_realloc_r+0x292>
 801ec88:	2a13      	cmp	r2, #19
 801ec8a:	d908      	bls.n	801ec9e <_realloc_r+0x25e>
 801ec8c:	6823      	ldr	r3, [r4, #0]
 801ec8e:	60ab      	str	r3, [r5, #8]
 801ec90:	6863      	ldr	r3, [r4, #4]
 801ec92:	60eb      	str	r3, [r5, #12]
 801ec94:	2a1b      	cmp	r2, #27
 801ec96:	d80a      	bhi.n	801ecae <_realloc_r+0x26e>
 801ec98:	3408      	adds	r4, #8
 801ec9a:	f105 0010 	add.w	r0, r5, #16
 801ec9e:	6823      	ldr	r3, [r4, #0]
 801eca0:	6003      	str	r3, [r0, #0]
 801eca2:	6863      	ldr	r3, [r4, #4]
 801eca4:	6043      	str	r3, [r0, #4]
 801eca6:	68a3      	ldr	r3, [r4, #8]
 801eca8:	6083      	str	r3, [r0, #8]
 801ecaa:	465f      	mov	r7, fp
 801ecac:	e7ab      	b.n	801ec06 <_realloc_r+0x1c6>
 801ecae:	68a3      	ldr	r3, [r4, #8]
 801ecb0:	612b      	str	r3, [r5, #16]
 801ecb2:	68e3      	ldr	r3, [r4, #12]
 801ecb4:	616b      	str	r3, [r5, #20]
 801ecb6:	2a24      	cmp	r2, #36	; 0x24
 801ecb8:	bf01      	itttt	eq
 801ecba:	6923      	ldreq	r3, [r4, #16]
 801ecbc:	61ab      	streq	r3, [r5, #24]
 801ecbe:	6963      	ldreq	r3, [r4, #20]
 801ecc0:	61eb      	streq	r3, [r5, #28]
 801ecc2:	bf19      	ittee	ne
 801ecc4:	3410      	addne	r4, #16
 801ecc6:	f105 0018 	addne.w	r0, r5, #24
 801ecca:	f105 0020 	addeq.w	r0, r5, #32
 801ecce:	3418      	addeq	r4, #24
 801ecd0:	e7e5      	b.n	801ec9e <_realloc_r+0x25e>
 801ecd2:	4621      	mov	r1, r4
 801ecd4:	f7ff fb5e 	bl	801e394 <memmove>
 801ecd8:	e7e7      	b.n	801ecaa <_realloc_r+0x26a>
 801ecda:	4648      	mov	r0, r9
 801ecdc:	f7ff f910 	bl	801df00 <_malloc_r>
 801ece0:	4683      	mov	fp, r0
 801ece2:	2800      	cmp	r0, #0
 801ece4:	f43f af52 	beq.w	801eb8c <_realloc_r+0x14c>
 801ece8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ecec:	f023 0301 	bic.w	r3, r3, #1
 801ecf0:	4453      	add	r3, sl
 801ecf2:	f1a0 0208 	sub.w	r2, r0, #8
 801ecf6:	4293      	cmp	r3, r2
 801ecf8:	d108      	bne.n	801ed0c <_realloc_r+0x2cc>
 801ecfa:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801ecfe:	f027 0703 	bic.w	r7, r7, #3
 801ed02:	4437      	add	r7, r6
 801ed04:	e6fd      	b.n	801eb02 <_realloc_r+0xc2>
 801ed06:	bf00      	nop
 801ed08:	2000051c 	.word	0x2000051c
 801ed0c:	1f32      	subs	r2, r6, #4
 801ed0e:	2a24      	cmp	r2, #36	; 0x24
 801ed10:	d82d      	bhi.n	801ed6e <_realloc_r+0x32e>
 801ed12:	2a13      	cmp	r2, #19
 801ed14:	d928      	bls.n	801ed68 <_realloc_r+0x328>
 801ed16:	6823      	ldr	r3, [r4, #0]
 801ed18:	6003      	str	r3, [r0, #0]
 801ed1a:	6863      	ldr	r3, [r4, #4]
 801ed1c:	6043      	str	r3, [r0, #4]
 801ed1e:	2a1b      	cmp	r2, #27
 801ed20:	d80e      	bhi.n	801ed40 <_realloc_r+0x300>
 801ed22:	f104 0208 	add.w	r2, r4, #8
 801ed26:	f100 0308 	add.w	r3, r0, #8
 801ed2a:	6811      	ldr	r1, [r2, #0]
 801ed2c:	6019      	str	r1, [r3, #0]
 801ed2e:	6851      	ldr	r1, [r2, #4]
 801ed30:	6059      	str	r1, [r3, #4]
 801ed32:	6892      	ldr	r2, [r2, #8]
 801ed34:	609a      	str	r2, [r3, #8]
 801ed36:	4621      	mov	r1, r4
 801ed38:	4648      	mov	r0, r9
 801ed3a:	f7fe fe45 	bl	801d9c8 <_free_r>
 801ed3e:	e725      	b.n	801eb8c <_realloc_r+0x14c>
 801ed40:	68a3      	ldr	r3, [r4, #8]
 801ed42:	6083      	str	r3, [r0, #8]
 801ed44:	68e3      	ldr	r3, [r4, #12]
 801ed46:	60c3      	str	r3, [r0, #12]
 801ed48:	2a24      	cmp	r2, #36	; 0x24
 801ed4a:	bf01      	itttt	eq
 801ed4c:	6923      	ldreq	r3, [r4, #16]
 801ed4e:	6103      	streq	r3, [r0, #16]
 801ed50:	6961      	ldreq	r1, [r4, #20]
 801ed52:	6141      	streq	r1, [r0, #20]
 801ed54:	bf19      	ittee	ne
 801ed56:	f104 0210 	addne.w	r2, r4, #16
 801ed5a:	f100 0310 	addne.w	r3, r0, #16
 801ed5e:	f104 0218 	addeq.w	r2, r4, #24
 801ed62:	f100 0318 	addeq.w	r3, r0, #24
 801ed66:	e7e0      	b.n	801ed2a <_realloc_r+0x2ea>
 801ed68:	4603      	mov	r3, r0
 801ed6a:	4622      	mov	r2, r4
 801ed6c:	e7dd      	b.n	801ed2a <_realloc_r+0x2ea>
 801ed6e:	4621      	mov	r1, r4
 801ed70:	f7ff fb10 	bl	801e394 <memmove>
 801ed74:	e7df      	b.n	801ed36 <_realloc_r+0x2f6>
 801ed76:	4637      	mov	r7, r6
 801ed78:	e6c3      	b.n	801eb02 <_realloc_r+0xc2>
 801ed7a:	431f      	orrs	r7, r3
 801ed7c:	606f      	str	r7, [r5, #4]
 801ed7e:	6853      	ldr	r3, [r2, #4]
 801ed80:	f043 0301 	orr.w	r3, r3, #1
 801ed84:	6053      	str	r3, [r2, #4]
 801ed86:	e758      	b.n	801ec3a <_realloc_r+0x1fa>

0801ed88 <frexp>:
 801ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed8a:	4617      	mov	r7, r2
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	603a      	str	r2, [r7, #0]
 801ed90:	4a14      	ldr	r2, [pc, #80]	; (801ede4 <frexp+0x5c>)
 801ed92:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ed96:	4296      	cmp	r6, r2
 801ed98:	4604      	mov	r4, r0
 801ed9a:	460d      	mov	r5, r1
 801ed9c:	460b      	mov	r3, r1
 801ed9e:	dc1e      	bgt.n	801edde <frexp+0x56>
 801eda0:	4602      	mov	r2, r0
 801eda2:	4332      	orrs	r2, r6
 801eda4:	d01b      	beq.n	801edde <frexp+0x56>
 801eda6:	4a10      	ldr	r2, [pc, #64]	; (801ede8 <frexp+0x60>)
 801eda8:	400a      	ands	r2, r1
 801edaa:	b952      	cbnz	r2, 801edc2 <frexp+0x3a>
 801edac:	4b0f      	ldr	r3, [pc, #60]	; (801edec <frexp+0x64>)
 801edae:	2200      	movs	r2, #0
 801edb0:	f7e1 fbfa 	bl	80005a8 <__aeabi_dmul>
 801edb4:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801edb8:	4604      	mov	r4, r0
 801edba:	460b      	mov	r3, r1
 801edbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801edc0:	603a      	str	r2, [r7, #0]
 801edc2:	683a      	ldr	r2, [r7, #0]
 801edc4:	1536      	asrs	r6, r6, #20
 801edc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801edca:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 801edce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801edd2:	4416      	add	r6, r2
 801edd4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801edd8:	603e      	str	r6, [r7, #0]
 801edda:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801edde:	4620      	mov	r0, r4
 801ede0:	4629      	mov	r1, r5
 801ede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ede4:	7fefffff 	.word	0x7fefffff
 801ede8:	7ff00000 	.word	0x7ff00000
 801edec:	43500000 	.word	0x43500000

0801edf0 <_sbrk_r>:
 801edf0:	b538      	push	{r3, r4, r5, lr}
 801edf2:	4d06      	ldr	r5, [pc, #24]	; (801ee0c <_sbrk_r+0x1c>)
 801edf4:	2300      	movs	r3, #0
 801edf6:	4604      	mov	r4, r0
 801edf8:	4608      	mov	r0, r1
 801edfa:	602b      	str	r3, [r5, #0]
 801edfc:	f7e4 fdd6 	bl	80039ac <_sbrk>
 801ee00:	1c43      	adds	r3, r0, #1
 801ee02:	d102      	bne.n	801ee0a <_sbrk_r+0x1a>
 801ee04:	682b      	ldr	r3, [r5, #0]
 801ee06:	b103      	cbz	r3, 801ee0a <_sbrk_r+0x1a>
 801ee08:	6023      	str	r3, [r4, #0]
 801ee0a:	bd38      	pop	{r3, r4, r5, pc}
 801ee0c:	20001ddc 	.word	0x20001ddc

0801ee10 <__sread>:
 801ee10:	b510      	push	{r4, lr}
 801ee12:	460c      	mov	r4, r1
 801ee14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee18:	f000 ffb0 	bl	801fd7c <_read_r>
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	bfab      	itete	ge
 801ee20:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801ee22:	89a3      	ldrhlt	r3, [r4, #12]
 801ee24:	181b      	addge	r3, r3, r0
 801ee26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ee2a:	bfac      	ite	ge
 801ee2c:	6523      	strge	r3, [r4, #80]	; 0x50
 801ee2e:	81a3      	strhlt	r3, [r4, #12]
 801ee30:	bd10      	pop	{r4, pc}

0801ee32 <__swrite>:
 801ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee36:	461f      	mov	r7, r3
 801ee38:	898b      	ldrh	r3, [r1, #12]
 801ee3a:	05db      	lsls	r3, r3, #23
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	460c      	mov	r4, r1
 801ee40:	4616      	mov	r6, r2
 801ee42:	d505      	bpl.n	801ee50 <__swrite+0x1e>
 801ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee48:	2302      	movs	r3, #2
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	f000 ff72 	bl	801fd34 <_lseek_r>
 801ee50:	89a3      	ldrh	r3, [r4, #12]
 801ee52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ee5a:	81a3      	strh	r3, [r4, #12]
 801ee5c:	4632      	mov	r2, r6
 801ee5e:	463b      	mov	r3, r7
 801ee60:	4628      	mov	r0, r5
 801ee62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee66:	f000 bdb1 	b.w	801f9cc <_write_r>

0801ee6a <__sseek>:
 801ee6a:	b510      	push	{r4, lr}
 801ee6c:	460c      	mov	r4, r1
 801ee6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee72:	f000 ff5f 	bl	801fd34 <_lseek_r>
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	89a3      	ldrh	r3, [r4, #12]
 801ee7a:	bf15      	itete	ne
 801ee7c:	6520      	strne	r0, [r4, #80]	; 0x50
 801ee7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ee82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ee86:	81a3      	strheq	r3, [r4, #12]
 801ee88:	bf18      	it	ne
 801ee8a:	81a3      	strhne	r3, [r4, #12]
 801ee8c:	bd10      	pop	{r4, pc}

0801ee8e <__sclose>:
 801ee8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee92:	f000 be43 	b.w	801fb1c <_close_r>

0801ee96 <strncpy>:
 801ee96:	b510      	push	{r4, lr}
 801ee98:	3901      	subs	r1, #1
 801ee9a:	4603      	mov	r3, r0
 801ee9c:	b132      	cbz	r2, 801eeac <strncpy+0x16>
 801ee9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801eea2:	f803 4b01 	strb.w	r4, [r3], #1
 801eea6:	3a01      	subs	r2, #1
 801eea8:	2c00      	cmp	r4, #0
 801eeaa:	d1f7      	bne.n	801ee9c <strncpy+0x6>
 801eeac:	441a      	add	r2, r3
 801eeae:	2100      	movs	r1, #0
 801eeb0:	4293      	cmp	r3, r2
 801eeb2:	d100      	bne.n	801eeb6 <strncpy+0x20>
 801eeb4:	bd10      	pop	{r4, pc}
 801eeb6:	f803 1b01 	strb.w	r1, [r3], #1
 801eeba:	e7f9      	b.n	801eeb0 <strncpy+0x1a>

0801eebc <__ssprint_r>:
 801eebc:	6893      	ldr	r3, [r2, #8]
 801eebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec2:	4680      	mov	r8, r0
 801eec4:	460c      	mov	r4, r1
 801eec6:	4617      	mov	r7, r2
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d061      	beq.n	801ef90 <__ssprint_r+0xd4>
 801eecc:	2300      	movs	r3, #0
 801eece:	f8d2 a000 	ldr.w	sl, [r2]
 801eed2:	9301      	str	r3, [sp, #4]
 801eed4:	469b      	mov	fp, r3
 801eed6:	f1bb 0f00 	cmp.w	fp, #0
 801eeda:	d02b      	beq.n	801ef34 <__ssprint_r+0x78>
 801eedc:	68a6      	ldr	r6, [r4, #8]
 801eede:	455e      	cmp	r6, fp
 801eee0:	d844      	bhi.n	801ef6c <__ssprint_r+0xb0>
 801eee2:	89a2      	ldrh	r2, [r4, #12]
 801eee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801eee8:	d03e      	beq.n	801ef68 <__ssprint_r+0xac>
 801eeea:	6820      	ldr	r0, [r4, #0]
 801eeec:	6921      	ldr	r1, [r4, #16]
 801eeee:	6965      	ldr	r5, [r4, #20]
 801eef0:	eba0 0901 	sub.w	r9, r0, r1
 801eef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eefc:	f109 0001 	add.w	r0, r9, #1
 801ef00:	106d      	asrs	r5, r5, #1
 801ef02:	4458      	add	r0, fp
 801ef04:	4285      	cmp	r5, r0
 801ef06:	bf38      	it	cc
 801ef08:	4605      	movcc	r5, r0
 801ef0a:	0553      	lsls	r3, r2, #21
 801ef0c:	d545      	bpl.n	801ef9a <__ssprint_r+0xde>
 801ef0e:	4629      	mov	r1, r5
 801ef10:	4640      	mov	r0, r8
 801ef12:	f7fe fff5 	bl	801df00 <_malloc_r>
 801ef16:	4606      	mov	r6, r0
 801ef18:	b9a0      	cbnz	r0, 801ef44 <__ssprint_r+0x88>
 801ef1a:	230c      	movs	r3, #12
 801ef1c:	f8c8 3000 	str.w	r3, [r8]
 801ef20:	89a3      	ldrh	r3, [r4, #12]
 801ef22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef26:	81a3      	strh	r3, [r4, #12]
 801ef28:	2300      	movs	r3, #0
 801ef2a:	e9c7 3301 	strd	r3, r3, [r7, #4]
 801ef2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ef32:	e02f      	b.n	801ef94 <__ssprint_r+0xd8>
 801ef34:	f8da 3000 	ldr.w	r3, [sl]
 801ef38:	f8da b004 	ldr.w	fp, [sl, #4]
 801ef3c:	9301      	str	r3, [sp, #4]
 801ef3e:	f10a 0a08 	add.w	sl, sl, #8
 801ef42:	e7c8      	b.n	801eed6 <__ssprint_r+0x1a>
 801ef44:	464a      	mov	r2, r9
 801ef46:	6921      	ldr	r1, [r4, #16]
 801ef48:	f7ff fa16 	bl	801e378 <memcpy>
 801ef4c:	89a2      	ldrh	r2, [r4, #12]
 801ef4e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801ef52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801ef56:	81a2      	strh	r2, [r4, #12]
 801ef58:	6126      	str	r6, [r4, #16]
 801ef5a:	6165      	str	r5, [r4, #20]
 801ef5c:	444e      	add	r6, r9
 801ef5e:	eba5 0509 	sub.w	r5, r5, r9
 801ef62:	6026      	str	r6, [r4, #0]
 801ef64:	60a5      	str	r5, [r4, #8]
 801ef66:	465e      	mov	r6, fp
 801ef68:	455e      	cmp	r6, fp
 801ef6a:	d900      	bls.n	801ef6e <__ssprint_r+0xb2>
 801ef6c:	465e      	mov	r6, fp
 801ef6e:	4632      	mov	r2, r6
 801ef70:	9901      	ldr	r1, [sp, #4]
 801ef72:	6820      	ldr	r0, [r4, #0]
 801ef74:	f7ff fa0e 	bl	801e394 <memmove>
 801ef78:	68a2      	ldr	r2, [r4, #8]
 801ef7a:	1b92      	subs	r2, r2, r6
 801ef7c:	60a2      	str	r2, [r4, #8]
 801ef7e:	6822      	ldr	r2, [r4, #0]
 801ef80:	4432      	add	r2, r6
 801ef82:	6022      	str	r2, [r4, #0]
 801ef84:	68ba      	ldr	r2, [r7, #8]
 801ef86:	eba2 030b 	sub.w	r3, r2, fp
 801ef8a:	60bb      	str	r3, [r7, #8]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d1d1      	bne.n	801ef34 <__ssprint_r+0x78>
 801ef90:	2000      	movs	r0, #0
 801ef92:	6078      	str	r0, [r7, #4]
 801ef94:	b003      	add	sp, #12
 801ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef9a:	462a      	mov	r2, r5
 801ef9c:	4640      	mov	r0, r8
 801ef9e:	f7ff fd4f 	bl	801ea40 <_realloc_r>
 801efa2:	4606      	mov	r6, r0
 801efa4:	2800      	cmp	r0, #0
 801efa6:	d1d7      	bne.n	801ef58 <__ssprint_r+0x9c>
 801efa8:	6921      	ldr	r1, [r4, #16]
 801efaa:	4640      	mov	r0, r8
 801efac:	f7fe fd0c 	bl	801d9c8 <_free_r>
 801efb0:	e7b3      	b.n	801ef1a <__ssprint_r+0x5e>

0801efb2 <sysconf>:
 801efb2:	2808      	cmp	r0, #8
 801efb4:	b508      	push	{r3, lr}
 801efb6:	d006      	beq.n	801efc6 <sysconf+0x14>
 801efb8:	f7fa fff4 	bl	8019fa4 <__errno>
 801efbc:	2316      	movs	r3, #22
 801efbe:	6003      	str	r3, [r0, #0]
 801efc0:	f04f 30ff 	mov.w	r0, #4294967295
 801efc4:	bd08      	pop	{r3, pc}
 801efc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801efca:	e7fb      	b.n	801efc4 <sysconf+0x12>

0801efcc <__sprint_r>:
 801efcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd0:	6893      	ldr	r3, [r2, #8]
 801efd2:	4680      	mov	r8, r0
 801efd4:	460f      	mov	r7, r1
 801efd6:	4614      	mov	r4, r2
 801efd8:	b91b      	cbnz	r3, 801efe2 <__sprint_r+0x16>
 801efda:	6053      	str	r3, [r2, #4]
 801efdc:	4618      	mov	r0, r3
 801efde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801efe4:	049d      	lsls	r5, r3, #18
 801efe6:	d520      	bpl.n	801f02a <__sprint_r+0x5e>
 801efe8:	6815      	ldr	r5, [r2, #0]
 801efea:	3508      	adds	r5, #8
 801efec:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801eff0:	f04f 0900 	mov.w	r9, #0
 801eff4:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801eff8:	45ca      	cmp	sl, r9
 801effa:	dc0b      	bgt.n	801f014 <__sprint_r+0x48>
 801effc:	68a0      	ldr	r0, [r4, #8]
 801effe:	f026 0603 	bic.w	r6, r6, #3
 801f002:	1b80      	subs	r0, r0, r6
 801f004:	60a0      	str	r0, [r4, #8]
 801f006:	3508      	adds	r5, #8
 801f008:	2800      	cmp	r0, #0
 801f00a:	d1ef      	bne.n	801efec <__sprint_r+0x20>
 801f00c:	2300      	movs	r3, #0
 801f00e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801f012:	e7e4      	b.n	801efde <__sprint_r+0x12>
 801f014:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801f018:	463a      	mov	r2, r7
 801f01a:	4640      	mov	r0, r8
 801f01c:	f000 fe39 	bl	801fc92 <_fputwc_r>
 801f020:	1c43      	adds	r3, r0, #1
 801f022:	d0f3      	beq.n	801f00c <__sprint_r+0x40>
 801f024:	f109 0901 	add.w	r9, r9, #1
 801f028:	e7e6      	b.n	801eff8 <__sprint_r+0x2c>
 801f02a:	f7fe fd8d 	bl	801db48 <__sfvwrite_r>
 801f02e:	e7ed      	b.n	801f00c <__sprint_r+0x40>

0801f030 <_vfiprintf_r>:
 801f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f034:	b0bb      	sub	sp, #236	; 0xec
 801f036:	460f      	mov	r7, r1
 801f038:	9202      	str	r2, [sp, #8]
 801f03a:	461d      	mov	r5, r3
 801f03c:	461c      	mov	r4, r3
 801f03e:	4681      	mov	r9, r0
 801f040:	b118      	cbz	r0, 801f04a <_vfiprintf_r+0x1a>
 801f042:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801f044:	b90b      	cbnz	r3, 801f04a <_vfiprintf_r+0x1a>
 801f046:	f7fe fc2f 	bl	801d8a8 <__sinit>
 801f04a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f04c:	07d8      	lsls	r0, r3, #31
 801f04e:	d405      	bmi.n	801f05c <_vfiprintf_r+0x2c>
 801f050:	89bb      	ldrh	r3, [r7, #12]
 801f052:	0599      	lsls	r1, r3, #22
 801f054:	d402      	bmi.n	801f05c <_vfiprintf_r+0x2c>
 801f056:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f058:	f7fe fee4 	bl	801de24 <__retarget_lock_acquire_recursive>
 801f05c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801f060:	049a      	lsls	r2, r3, #18
 801f062:	d406      	bmi.n	801f072 <_vfiprintf_r+0x42>
 801f064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801f068:	81bb      	strh	r3, [r7, #12]
 801f06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f06c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f070:	667b      	str	r3, [r7, #100]	; 0x64
 801f072:	89bb      	ldrh	r3, [r7, #12]
 801f074:	071e      	lsls	r6, r3, #28
 801f076:	d501      	bpl.n	801f07c <_vfiprintf_r+0x4c>
 801f078:	693b      	ldr	r3, [r7, #16]
 801f07a:	b9ab      	cbnz	r3, 801f0a8 <_vfiprintf_r+0x78>
 801f07c:	4639      	mov	r1, r7
 801f07e:	4648      	mov	r0, r9
 801f080:	f7fd fc76 	bl	801c970 <__swsetup_r>
 801f084:	b180      	cbz	r0, 801f0a8 <_vfiprintf_r+0x78>
 801f086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f088:	07d8      	lsls	r0, r3, #31
 801f08a:	d506      	bpl.n	801f09a <_vfiprintf_r+0x6a>
 801f08c:	f04f 33ff 	mov.w	r3, #4294967295
 801f090:	9303      	str	r3, [sp, #12]
 801f092:	9803      	ldr	r0, [sp, #12]
 801f094:	b03b      	add	sp, #236	; 0xec
 801f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f09a:	89bb      	ldrh	r3, [r7, #12]
 801f09c:	0599      	lsls	r1, r3, #22
 801f09e:	d4f5      	bmi.n	801f08c <_vfiprintf_r+0x5c>
 801f0a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f0a2:	f7fe fec0 	bl	801de26 <__retarget_lock_release_recursive>
 801f0a6:	e7f1      	b.n	801f08c <_vfiprintf_r+0x5c>
 801f0a8:	89bb      	ldrh	r3, [r7, #12]
 801f0aa:	f003 021a 	and.w	r2, r3, #26
 801f0ae:	2a0a      	cmp	r2, #10
 801f0b0:	d114      	bne.n	801f0dc <_vfiprintf_r+0xac>
 801f0b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801f0b6:	2a00      	cmp	r2, #0
 801f0b8:	db10      	blt.n	801f0dc <_vfiprintf_r+0xac>
 801f0ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f0bc:	07d2      	lsls	r2, r2, #31
 801f0be:	d404      	bmi.n	801f0ca <_vfiprintf_r+0x9a>
 801f0c0:	059e      	lsls	r6, r3, #22
 801f0c2:	d402      	bmi.n	801f0ca <_vfiprintf_r+0x9a>
 801f0c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f0c6:	f7fe feae 	bl	801de26 <__retarget_lock_release_recursive>
 801f0ca:	9a02      	ldr	r2, [sp, #8]
 801f0cc:	462b      	mov	r3, r5
 801f0ce:	4639      	mov	r1, r7
 801f0d0:	4648      	mov	r0, r9
 801f0d2:	b03b      	add	sp, #236	; 0xec
 801f0d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0d8:	f000 bc38 	b.w	801f94c <__sbprintf>
 801f0dc:	2300      	movs	r3, #0
 801f0de:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801f0e2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801f0e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801f0ea:	ae11      	add	r6, sp, #68	; 0x44
 801f0ec:	960e      	str	r6, [sp, #56]	; 0x38
 801f0ee:	9303      	str	r3, [sp, #12]
 801f0f0:	9b02      	ldr	r3, [sp, #8]
 801f0f2:	461d      	mov	r5, r3
 801f0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f0f8:	b10a      	cbz	r2, 801f0fe <_vfiprintf_r+0xce>
 801f0fa:	2a25      	cmp	r2, #37	; 0x25
 801f0fc:	d1f9      	bne.n	801f0f2 <_vfiprintf_r+0xc2>
 801f0fe:	9b02      	ldr	r3, [sp, #8]
 801f100:	ebb5 0803 	subs.w	r8, r5, r3
 801f104:	d00d      	beq.n	801f122 <_vfiprintf_r+0xf2>
 801f106:	e9c6 3800 	strd	r3, r8, [r6]
 801f10a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f10c:	4443      	add	r3, r8
 801f10e:	9310      	str	r3, [sp, #64]	; 0x40
 801f110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f112:	3301      	adds	r3, #1
 801f114:	2b07      	cmp	r3, #7
 801f116:	930f      	str	r3, [sp, #60]	; 0x3c
 801f118:	dc75      	bgt.n	801f206 <_vfiprintf_r+0x1d6>
 801f11a:	3608      	adds	r6, #8
 801f11c:	9b03      	ldr	r3, [sp, #12]
 801f11e:	4443      	add	r3, r8
 801f120:	9303      	str	r3, [sp, #12]
 801f122:	782b      	ldrb	r3, [r5, #0]
 801f124:	2b00      	cmp	r3, #0
 801f126:	f000 83d5 	beq.w	801f8d4 <_vfiprintf_r+0x8a4>
 801f12a:	2300      	movs	r3, #0
 801f12c:	f04f 31ff 	mov.w	r1, #4294967295
 801f130:	1c6a      	adds	r2, r5, #1
 801f132:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801f136:	9101      	str	r1, [sp, #4]
 801f138:	9304      	str	r3, [sp, #16]
 801f13a:	469a      	mov	sl, r3
 801f13c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801f140:	9202      	str	r2, [sp, #8]
 801f142:	f1a3 0220 	sub.w	r2, r3, #32
 801f146:	2a5a      	cmp	r2, #90	; 0x5a
 801f148:	f200 831d 	bhi.w	801f786 <_vfiprintf_r+0x756>
 801f14c:	e8df f012 	tbh	[pc, r2, lsl #1]
 801f150:	031b009a 	.word	0x031b009a
 801f154:	00a2031b 	.word	0x00a2031b
 801f158:	031b031b 	.word	0x031b031b
 801f15c:	0082031b 	.word	0x0082031b
 801f160:	031b031b 	.word	0x031b031b
 801f164:	00af00a5 	.word	0x00af00a5
 801f168:	00ac031b 	.word	0x00ac031b
 801f16c:	031b00b1 	.word	0x031b00b1
 801f170:	00cf00cc 	.word	0x00cf00cc
 801f174:	00cf00cf 	.word	0x00cf00cf
 801f178:	00cf00cf 	.word	0x00cf00cf
 801f17c:	00cf00cf 	.word	0x00cf00cf
 801f180:	00cf00cf 	.word	0x00cf00cf
 801f184:	031b031b 	.word	0x031b031b
 801f188:	031b031b 	.word	0x031b031b
 801f18c:	031b031b 	.word	0x031b031b
 801f190:	031b031b 	.word	0x031b031b
 801f194:	00f9031b 	.word	0x00f9031b
 801f198:	031b0107 	.word	0x031b0107
 801f19c:	031b031b 	.word	0x031b031b
 801f1a0:	031b031b 	.word	0x031b031b
 801f1a4:	031b031b 	.word	0x031b031b
 801f1a8:	031b031b 	.word	0x031b031b
 801f1ac:	0157031b 	.word	0x0157031b
 801f1b0:	031b031b 	.word	0x031b031b
 801f1b4:	01a0031b 	.word	0x01a0031b
 801f1b8:	027d031b 	.word	0x027d031b
 801f1bc:	031b031b 	.word	0x031b031b
 801f1c0:	031b029d 	.word	0x031b029d
 801f1c4:	031b031b 	.word	0x031b031b
 801f1c8:	031b031b 	.word	0x031b031b
 801f1cc:	031b031b 	.word	0x031b031b
 801f1d0:	031b031b 	.word	0x031b031b
 801f1d4:	00f9031b 	.word	0x00f9031b
 801f1d8:	031b0109 	.word	0x031b0109
 801f1dc:	031b031b 	.word	0x031b031b
 801f1e0:	010900df 	.word	0x010900df
 801f1e4:	031b00f3 	.word	0x031b00f3
 801f1e8:	031b00ec 	.word	0x031b00ec
 801f1ec:	01590135 	.word	0x01590135
 801f1f0:	00f3018e 	.word	0x00f3018e
 801f1f4:	01a0031b 	.word	0x01a0031b
 801f1f8:	027f0098 	.word	0x027f0098
 801f1fc:	031b031b 	.word	0x031b031b
 801f200:	031b0065 	.word	0x031b0065
 801f204:	0098      	.short	0x0098
 801f206:	aa0e      	add	r2, sp, #56	; 0x38
 801f208:	4639      	mov	r1, r7
 801f20a:	4648      	mov	r0, r9
 801f20c:	f7ff fede 	bl	801efcc <__sprint_r>
 801f210:	2800      	cmp	r0, #0
 801f212:	f040 833e 	bne.w	801f892 <_vfiprintf_r+0x862>
 801f216:	ae11      	add	r6, sp, #68	; 0x44
 801f218:	e780      	b.n	801f11c <_vfiprintf_r+0xec>
 801f21a:	4a9c      	ldr	r2, [pc, #624]	; (801f48c <_vfiprintf_r+0x45c>)
 801f21c:	9206      	str	r2, [sp, #24]
 801f21e:	f01a 0220 	ands.w	r2, sl, #32
 801f222:	f000 8234 	beq.w	801f68e <_vfiprintf_r+0x65e>
 801f226:	3407      	adds	r4, #7
 801f228:	f024 0207 	bic.w	r2, r4, #7
 801f22c:	4693      	mov	fp, r2
 801f22e:	6855      	ldr	r5, [r2, #4]
 801f230:	f85b 4b08 	ldr.w	r4, [fp], #8
 801f234:	f01a 0f01 	tst.w	sl, #1
 801f238:	d009      	beq.n	801f24e <_vfiprintf_r+0x21e>
 801f23a:	ea54 0205 	orrs.w	r2, r4, r5
 801f23e:	bf1f      	itttt	ne
 801f240:	2230      	movne	r2, #48	; 0x30
 801f242:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 801f246:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 801f24a:	f04a 0a02 	orrne.w	sl, sl, #2
 801f24e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801f252:	e119      	b.n	801f488 <_vfiprintf_r+0x458>
 801f254:	4648      	mov	r0, r9
 801f256:	f7fe fddf 	bl	801de18 <_localeconv_r>
 801f25a:	6843      	ldr	r3, [r0, #4]
 801f25c:	9309      	str	r3, [sp, #36]	; 0x24
 801f25e:	4618      	mov	r0, r3
 801f260:	f7e0 ff8e 	bl	8000180 <strlen>
 801f264:	9008      	str	r0, [sp, #32]
 801f266:	4648      	mov	r0, r9
 801f268:	f7fe fdd6 	bl	801de18 <_localeconv_r>
 801f26c:	6883      	ldr	r3, [r0, #8]
 801f26e:	9307      	str	r3, [sp, #28]
 801f270:	9b08      	ldr	r3, [sp, #32]
 801f272:	b12b      	cbz	r3, 801f280 <_vfiprintf_r+0x250>
 801f274:	9b07      	ldr	r3, [sp, #28]
 801f276:	b11b      	cbz	r3, 801f280 <_vfiprintf_r+0x250>
 801f278:	781b      	ldrb	r3, [r3, #0]
 801f27a:	b10b      	cbz	r3, 801f280 <_vfiprintf_r+0x250>
 801f27c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801f280:	9a02      	ldr	r2, [sp, #8]
 801f282:	e75b      	b.n	801f13c <_vfiprintf_r+0x10c>
 801f284:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d1f9      	bne.n	801f280 <_vfiprintf_r+0x250>
 801f28c:	2320      	movs	r3, #32
 801f28e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801f292:	e7f5      	b.n	801f280 <_vfiprintf_r+0x250>
 801f294:	f04a 0a01 	orr.w	sl, sl, #1
 801f298:	e7f2      	b.n	801f280 <_vfiprintf_r+0x250>
 801f29a:	f854 3b04 	ldr.w	r3, [r4], #4
 801f29e:	9304      	str	r3, [sp, #16]
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	daed      	bge.n	801f280 <_vfiprintf_r+0x250>
 801f2a4:	425b      	negs	r3, r3
 801f2a6:	9304      	str	r3, [sp, #16]
 801f2a8:	f04a 0a04 	orr.w	sl, sl, #4
 801f2ac:	e7e8      	b.n	801f280 <_vfiprintf_r+0x250>
 801f2ae:	232b      	movs	r3, #43	; 0x2b
 801f2b0:	e7ed      	b.n	801f28e <_vfiprintf_r+0x25e>
 801f2b2:	9a02      	ldr	r2, [sp, #8]
 801f2b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801f2b8:	2b2a      	cmp	r3, #42	; 0x2a
 801f2ba:	d112      	bne.n	801f2e2 <_vfiprintf_r+0x2b2>
 801f2bc:	f854 0b04 	ldr.w	r0, [r4], #4
 801f2c0:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801f2c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801f2c8:	e7da      	b.n	801f280 <_vfiprintf_r+0x250>
 801f2ca:	9b01      	ldr	r3, [sp, #4]
 801f2cc:	200a      	movs	r0, #10
 801f2ce:	fb00 1303 	mla	r3, r0, r3, r1
 801f2d2:	9301      	str	r3, [sp, #4]
 801f2d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801f2d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f2dc:	2909      	cmp	r1, #9
 801f2de:	d9f4      	bls.n	801f2ca <_vfiprintf_r+0x29a>
 801f2e0:	e72e      	b.n	801f140 <_vfiprintf_r+0x110>
 801f2e2:	2100      	movs	r1, #0
 801f2e4:	9101      	str	r1, [sp, #4]
 801f2e6:	e7f7      	b.n	801f2d8 <_vfiprintf_r+0x2a8>
 801f2e8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801f2ec:	e7c8      	b.n	801f280 <_vfiprintf_r+0x250>
 801f2ee:	2100      	movs	r1, #0
 801f2f0:	9a02      	ldr	r2, [sp, #8]
 801f2f2:	9104      	str	r1, [sp, #16]
 801f2f4:	9904      	ldr	r1, [sp, #16]
 801f2f6:	3b30      	subs	r3, #48	; 0x30
 801f2f8:	200a      	movs	r0, #10
 801f2fa:	fb00 3301 	mla	r3, r0, r1, r3
 801f2fe:	9304      	str	r3, [sp, #16]
 801f300:	f812 3b01 	ldrb.w	r3, [r2], #1
 801f304:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f308:	2909      	cmp	r1, #9
 801f30a:	d9f3      	bls.n	801f2f4 <_vfiprintf_r+0x2c4>
 801f30c:	e718      	b.n	801f140 <_vfiprintf_r+0x110>
 801f30e:	9b02      	ldr	r3, [sp, #8]
 801f310:	781b      	ldrb	r3, [r3, #0]
 801f312:	2b68      	cmp	r3, #104	; 0x68
 801f314:	bf01      	itttt	eq
 801f316:	9b02      	ldreq	r3, [sp, #8]
 801f318:	3301      	addeq	r3, #1
 801f31a:	9302      	streq	r3, [sp, #8]
 801f31c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801f320:	bf18      	it	ne
 801f322:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801f326:	e7ab      	b.n	801f280 <_vfiprintf_r+0x250>
 801f328:	9b02      	ldr	r3, [sp, #8]
 801f32a:	781b      	ldrb	r3, [r3, #0]
 801f32c:	2b6c      	cmp	r3, #108	; 0x6c
 801f32e:	d105      	bne.n	801f33c <_vfiprintf_r+0x30c>
 801f330:	9b02      	ldr	r3, [sp, #8]
 801f332:	3301      	adds	r3, #1
 801f334:	9302      	str	r3, [sp, #8]
 801f336:	f04a 0a20 	orr.w	sl, sl, #32
 801f33a:	e7a1      	b.n	801f280 <_vfiprintf_r+0x250>
 801f33c:	f04a 0a10 	orr.w	sl, sl, #16
 801f340:	e79e      	b.n	801f280 <_vfiprintf_r+0x250>
 801f342:	46a3      	mov	fp, r4
 801f344:	2100      	movs	r1, #0
 801f346:	f85b 3b04 	ldr.w	r3, [fp], #4
 801f34a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801f34e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801f352:	2301      	movs	r3, #1
 801f354:	9301      	str	r3, [sp, #4]
 801f356:	460d      	mov	r5, r1
 801f358:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 801f35c:	e0ad      	b.n	801f4ba <_vfiprintf_r+0x48a>
 801f35e:	f04a 0a10 	orr.w	sl, sl, #16
 801f362:	f01a 0f20 	tst.w	sl, #32
 801f366:	d011      	beq.n	801f38c <_vfiprintf_r+0x35c>
 801f368:	3407      	adds	r4, #7
 801f36a:	f024 0307 	bic.w	r3, r4, #7
 801f36e:	469b      	mov	fp, r3
 801f370:	685d      	ldr	r5, [r3, #4]
 801f372:	f85b 4b08 	ldr.w	r4, [fp], #8
 801f376:	2d00      	cmp	r5, #0
 801f378:	da06      	bge.n	801f388 <_vfiprintf_r+0x358>
 801f37a:	4264      	negs	r4, r4
 801f37c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801f380:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801f384:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801f388:	2301      	movs	r3, #1
 801f38a:	e04a      	b.n	801f422 <_vfiprintf_r+0x3f2>
 801f38c:	46a3      	mov	fp, r4
 801f38e:	f01a 0f10 	tst.w	sl, #16
 801f392:	f85b 5b04 	ldr.w	r5, [fp], #4
 801f396:	d002      	beq.n	801f39e <_vfiprintf_r+0x36e>
 801f398:	462c      	mov	r4, r5
 801f39a:	17ed      	asrs	r5, r5, #31
 801f39c:	e7eb      	b.n	801f376 <_vfiprintf_r+0x346>
 801f39e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801f3a2:	d003      	beq.n	801f3ac <_vfiprintf_r+0x37c>
 801f3a4:	b22c      	sxth	r4, r5
 801f3a6:	f345 35c0 	sbfx	r5, r5, #15, #1
 801f3aa:	e7e4      	b.n	801f376 <_vfiprintf_r+0x346>
 801f3ac:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801f3b0:	d0f2      	beq.n	801f398 <_vfiprintf_r+0x368>
 801f3b2:	b26c      	sxtb	r4, r5
 801f3b4:	f345 15c0 	sbfx	r5, r5, #7, #1
 801f3b8:	e7dd      	b.n	801f376 <_vfiprintf_r+0x346>
 801f3ba:	f01a 0f20 	tst.w	sl, #32
 801f3be:	f104 0b04 	add.w	fp, r4, #4
 801f3c2:	d007      	beq.n	801f3d4 <_vfiprintf_r+0x3a4>
 801f3c4:	9a03      	ldr	r2, [sp, #12]
 801f3c6:	6823      	ldr	r3, [r4, #0]
 801f3c8:	9903      	ldr	r1, [sp, #12]
 801f3ca:	17d2      	asrs	r2, r2, #31
 801f3cc:	e9c3 1200 	strd	r1, r2, [r3]
 801f3d0:	465c      	mov	r4, fp
 801f3d2:	e68d      	b.n	801f0f0 <_vfiprintf_r+0xc0>
 801f3d4:	f01a 0f10 	tst.w	sl, #16
 801f3d8:	d003      	beq.n	801f3e2 <_vfiprintf_r+0x3b2>
 801f3da:	6823      	ldr	r3, [r4, #0]
 801f3dc:	9a03      	ldr	r2, [sp, #12]
 801f3de:	601a      	str	r2, [r3, #0]
 801f3e0:	e7f6      	b.n	801f3d0 <_vfiprintf_r+0x3a0>
 801f3e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801f3e6:	d003      	beq.n	801f3f0 <_vfiprintf_r+0x3c0>
 801f3e8:	6823      	ldr	r3, [r4, #0]
 801f3ea:	9a03      	ldr	r2, [sp, #12]
 801f3ec:	801a      	strh	r2, [r3, #0]
 801f3ee:	e7ef      	b.n	801f3d0 <_vfiprintf_r+0x3a0>
 801f3f0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801f3f4:	d0f1      	beq.n	801f3da <_vfiprintf_r+0x3aa>
 801f3f6:	6823      	ldr	r3, [r4, #0]
 801f3f8:	9a03      	ldr	r2, [sp, #12]
 801f3fa:	701a      	strb	r2, [r3, #0]
 801f3fc:	e7e8      	b.n	801f3d0 <_vfiprintf_r+0x3a0>
 801f3fe:	f04a 0a10 	orr.w	sl, sl, #16
 801f402:	f01a 0320 	ands.w	r3, sl, #32
 801f406:	d01f      	beq.n	801f448 <_vfiprintf_r+0x418>
 801f408:	3407      	adds	r4, #7
 801f40a:	f024 0307 	bic.w	r3, r4, #7
 801f40e:	469b      	mov	fp, r3
 801f410:	685d      	ldr	r5, [r3, #4]
 801f412:	f85b 4b08 	ldr.w	r4, [fp], #8
 801f416:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801f41a:	2300      	movs	r3, #0
 801f41c:	2200      	movs	r2, #0
 801f41e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801f422:	9a01      	ldr	r2, [sp, #4]
 801f424:	3201      	adds	r2, #1
 801f426:	f000 8262 	beq.w	801f8ee <_vfiprintf_r+0x8be>
 801f42a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801f42e:	9205      	str	r2, [sp, #20]
 801f430:	ea54 0205 	orrs.w	r2, r4, r5
 801f434:	f040 8261 	bne.w	801f8fa <_vfiprintf_r+0x8ca>
 801f438:	9a01      	ldr	r2, [sp, #4]
 801f43a:	2a00      	cmp	r2, #0
 801f43c:	f000 8198 	beq.w	801f770 <_vfiprintf_r+0x740>
 801f440:	2b01      	cmp	r3, #1
 801f442:	f040 825d 	bne.w	801f900 <_vfiprintf_r+0x8d0>
 801f446:	e139      	b.n	801f6bc <_vfiprintf_r+0x68c>
 801f448:	46a3      	mov	fp, r4
 801f44a:	f01a 0510 	ands.w	r5, sl, #16
 801f44e:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f452:	d001      	beq.n	801f458 <_vfiprintf_r+0x428>
 801f454:	461d      	mov	r5, r3
 801f456:	e7de      	b.n	801f416 <_vfiprintf_r+0x3e6>
 801f458:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801f45c:	d001      	beq.n	801f462 <_vfiprintf_r+0x432>
 801f45e:	b2a4      	uxth	r4, r4
 801f460:	e7d9      	b.n	801f416 <_vfiprintf_r+0x3e6>
 801f462:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801f466:	d0d6      	beq.n	801f416 <_vfiprintf_r+0x3e6>
 801f468:	b2e4      	uxtb	r4, r4
 801f46a:	e7f3      	b.n	801f454 <_vfiprintf_r+0x424>
 801f46c:	2330      	movs	r3, #48	; 0x30
 801f46e:	46a3      	mov	fp, r4
 801f470:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801f474:	2378      	movs	r3, #120	; 0x78
 801f476:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801f47a:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f47e:	4b03      	ldr	r3, [pc, #12]	; (801f48c <_vfiprintf_r+0x45c>)
 801f480:	9306      	str	r3, [sp, #24]
 801f482:	2500      	movs	r5, #0
 801f484:	f04a 0a02 	orr.w	sl, sl, #2
 801f488:	2302      	movs	r3, #2
 801f48a:	e7c7      	b.n	801f41c <_vfiprintf_r+0x3ec>
 801f48c:	080208e8 	.word	0x080208e8
 801f490:	9b01      	ldr	r3, [sp, #4]
 801f492:	46a3      	mov	fp, r4
 801f494:	2500      	movs	r5, #0
 801f496:	1c5c      	adds	r4, r3, #1
 801f498:	f85b 8b04 	ldr.w	r8, [fp], #4
 801f49c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 801f4a0:	f000 80ce 	beq.w	801f640 <_vfiprintf_r+0x610>
 801f4a4:	461a      	mov	r2, r3
 801f4a6:	4629      	mov	r1, r5
 801f4a8:	4640      	mov	r0, r8
 801f4aa:	f7e0 fe71 	bl	8000190 <memchr>
 801f4ae:	2800      	cmp	r0, #0
 801f4b0:	f000 8173 	beq.w	801f79a <_vfiprintf_r+0x76a>
 801f4b4:	eba0 0308 	sub.w	r3, r0, r8
 801f4b8:	9301      	str	r3, [sp, #4]
 801f4ba:	9b01      	ldr	r3, [sp, #4]
 801f4bc:	42ab      	cmp	r3, r5
 801f4be:	bfb8      	it	lt
 801f4c0:	462b      	movlt	r3, r5
 801f4c2:	9305      	str	r3, [sp, #20]
 801f4c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801f4c8:	b113      	cbz	r3, 801f4d0 <_vfiprintf_r+0x4a0>
 801f4ca:	9b05      	ldr	r3, [sp, #20]
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	9305      	str	r3, [sp, #20]
 801f4d0:	f01a 0302 	ands.w	r3, sl, #2
 801f4d4:	930a      	str	r3, [sp, #40]	; 0x28
 801f4d6:	bf1e      	ittt	ne
 801f4d8:	9b05      	ldrne	r3, [sp, #20]
 801f4da:	3302      	addne	r3, #2
 801f4dc:	9305      	strne	r3, [sp, #20]
 801f4de:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801f4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f4e4:	d11f      	bne.n	801f526 <_vfiprintf_r+0x4f6>
 801f4e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801f4ea:	1a9c      	subs	r4, r3, r2
 801f4ec:	2c00      	cmp	r4, #0
 801f4ee:	dd1a      	ble.n	801f526 <_vfiprintf_r+0x4f6>
 801f4f0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801f4f4:	48aa      	ldr	r0, [pc, #680]	; (801f7a0 <_vfiprintf_r+0x770>)
 801f4f6:	6030      	str	r0, [r6, #0]
 801f4f8:	2c10      	cmp	r4, #16
 801f4fa:	f103 0301 	add.w	r3, r3, #1
 801f4fe:	f106 0108 	add.w	r1, r6, #8
 801f502:	f300 8153 	bgt.w	801f7ac <_vfiprintf_r+0x77c>
 801f506:	6074      	str	r4, [r6, #4]
 801f508:	2b07      	cmp	r3, #7
 801f50a:	4414      	add	r4, r2
 801f50c:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801f510:	f340 815e 	ble.w	801f7d0 <_vfiprintf_r+0x7a0>
 801f514:	aa0e      	add	r2, sp, #56	; 0x38
 801f516:	4639      	mov	r1, r7
 801f518:	4648      	mov	r0, r9
 801f51a:	f7ff fd57 	bl	801efcc <__sprint_r>
 801f51e:	2800      	cmp	r0, #0
 801f520:	f040 81b7 	bne.w	801f892 <_vfiprintf_r+0x862>
 801f524:	ae11      	add	r6, sp, #68	; 0x44
 801f526:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801f52a:	b173      	cbz	r3, 801f54a <_vfiprintf_r+0x51a>
 801f52c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801f530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f532:	6032      	str	r2, [r6, #0]
 801f534:	2201      	movs	r2, #1
 801f536:	6072      	str	r2, [r6, #4]
 801f538:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f53a:	3301      	adds	r3, #1
 801f53c:	3201      	adds	r2, #1
 801f53e:	2b07      	cmp	r3, #7
 801f540:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801f544:	f300 8146 	bgt.w	801f7d4 <_vfiprintf_r+0x7a4>
 801f548:	3608      	adds	r6, #8
 801f54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f54c:	b16b      	cbz	r3, 801f56a <_vfiprintf_r+0x53a>
 801f54e:	aa0d      	add	r2, sp, #52	; 0x34
 801f550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f552:	6032      	str	r2, [r6, #0]
 801f554:	2202      	movs	r2, #2
 801f556:	6072      	str	r2, [r6, #4]
 801f558:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f55a:	3301      	adds	r3, #1
 801f55c:	3202      	adds	r2, #2
 801f55e:	2b07      	cmp	r3, #7
 801f560:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801f564:	f300 813f 	bgt.w	801f7e6 <_vfiprintf_r+0x7b6>
 801f568:	3608      	adds	r6, #8
 801f56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f56c:	2b80      	cmp	r3, #128	; 0x80
 801f56e:	d11f      	bne.n	801f5b0 <_vfiprintf_r+0x580>
 801f570:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801f574:	1a9c      	subs	r4, r3, r2
 801f576:	2c00      	cmp	r4, #0
 801f578:	dd1a      	ble.n	801f5b0 <_vfiprintf_r+0x580>
 801f57a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801f57e:	4889      	ldr	r0, [pc, #548]	; (801f7a4 <_vfiprintf_r+0x774>)
 801f580:	6030      	str	r0, [r6, #0]
 801f582:	2c10      	cmp	r4, #16
 801f584:	f103 0301 	add.w	r3, r3, #1
 801f588:	f106 0108 	add.w	r1, r6, #8
 801f58c:	f300 8134 	bgt.w	801f7f8 <_vfiprintf_r+0x7c8>
 801f590:	6074      	str	r4, [r6, #4]
 801f592:	2b07      	cmp	r3, #7
 801f594:	4414      	add	r4, r2
 801f596:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801f59a:	f340 813f 	ble.w	801f81c <_vfiprintf_r+0x7ec>
 801f59e:	aa0e      	add	r2, sp, #56	; 0x38
 801f5a0:	4639      	mov	r1, r7
 801f5a2:	4648      	mov	r0, r9
 801f5a4:	f7ff fd12 	bl	801efcc <__sprint_r>
 801f5a8:	2800      	cmp	r0, #0
 801f5aa:	f040 8172 	bne.w	801f892 <_vfiprintf_r+0x862>
 801f5ae:	ae11      	add	r6, sp, #68	; 0x44
 801f5b0:	9b01      	ldr	r3, [sp, #4]
 801f5b2:	1aec      	subs	r4, r5, r3
 801f5b4:	2c00      	cmp	r4, #0
 801f5b6:	dd1a      	ble.n	801f5ee <_vfiprintf_r+0x5be>
 801f5b8:	4d7a      	ldr	r5, [pc, #488]	; (801f7a4 <_vfiprintf_r+0x774>)
 801f5ba:	6035      	str	r5, [r6, #0]
 801f5bc:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 801f5c0:	2c10      	cmp	r4, #16
 801f5c2:	f103 0301 	add.w	r3, r3, #1
 801f5c6:	f106 0208 	add.w	r2, r6, #8
 801f5ca:	f300 8129 	bgt.w	801f820 <_vfiprintf_r+0x7f0>
 801f5ce:	6074      	str	r4, [r6, #4]
 801f5d0:	2b07      	cmp	r3, #7
 801f5d2:	440c      	add	r4, r1
 801f5d4:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801f5d8:	f340 8133 	ble.w	801f842 <_vfiprintf_r+0x812>
 801f5dc:	aa0e      	add	r2, sp, #56	; 0x38
 801f5de:	4639      	mov	r1, r7
 801f5e0:	4648      	mov	r0, r9
 801f5e2:	f7ff fcf3 	bl	801efcc <__sprint_r>
 801f5e6:	2800      	cmp	r0, #0
 801f5e8:	f040 8153 	bne.w	801f892 <_vfiprintf_r+0x862>
 801f5ec:	ae11      	add	r6, sp, #68	; 0x44
 801f5ee:	9b01      	ldr	r3, [sp, #4]
 801f5f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f5f2:	6073      	str	r3, [r6, #4]
 801f5f4:	4418      	add	r0, r3
 801f5f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f5f8:	f8c6 8000 	str.w	r8, [r6]
 801f5fc:	3301      	adds	r3, #1
 801f5fe:	2b07      	cmp	r3, #7
 801f600:	9010      	str	r0, [sp, #64]	; 0x40
 801f602:	930f      	str	r3, [sp, #60]	; 0x3c
 801f604:	f300 811f 	bgt.w	801f846 <_vfiprintf_r+0x816>
 801f608:	f106 0308 	add.w	r3, r6, #8
 801f60c:	f01a 0f04 	tst.w	sl, #4
 801f610:	f040 8121 	bne.w	801f856 <_vfiprintf_r+0x826>
 801f614:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801f618:	9905      	ldr	r1, [sp, #20]
 801f61a:	428a      	cmp	r2, r1
 801f61c:	bfac      	ite	ge
 801f61e:	189b      	addge	r3, r3, r2
 801f620:	185b      	addlt	r3, r3, r1
 801f622:	9303      	str	r3, [sp, #12]
 801f624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f626:	b13b      	cbz	r3, 801f638 <_vfiprintf_r+0x608>
 801f628:	aa0e      	add	r2, sp, #56	; 0x38
 801f62a:	4639      	mov	r1, r7
 801f62c:	4648      	mov	r0, r9
 801f62e:	f7ff fccd 	bl	801efcc <__sprint_r>
 801f632:	2800      	cmp	r0, #0
 801f634:	f040 812d 	bne.w	801f892 <_vfiprintf_r+0x862>
 801f638:	2300      	movs	r3, #0
 801f63a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f63c:	ae11      	add	r6, sp, #68	; 0x44
 801f63e:	e6c7      	b.n	801f3d0 <_vfiprintf_r+0x3a0>
 801f640:	4640      	mov	r0, r8
 801f642:	f7e0 fd9d 	bl	8000180 <strlen>
 801f646:	9001      	str	r0, [sp, #4]
 801f648:	e737      	b.n	801f4ba <_vfiprintf_r+0x48a>
 801f64a:	f04a 0a10 	orr.w	sl, sl, #16
 801f64e:	f01a 0320 	ands.w	r3, sl, #32
 801f652:	d008      	beq.n	801f666 <_vfiprintf_r+0x636>
 801f654:	3407      	adds	r4, #7
 801f656:	f024 0307 	bic.w	r3, r4, #7
 801f65a:	469b      	mov	fp, r3
 801f65c:	685d      	ldr	r5, [r3, #4]
 801f65e:	f85b 4b08 	ldr.w	r4, [fp], #8
 801f662:	2301      	movs	r3, #1
 801f664:	e6da      	b.n	801f41c <_vfiprintf_r+0x3ec>
 801f666:	46a3      	mov	fp, r4
 801f668:	f01a 0510 	ands.w	r5, sl, #16
 801f66c:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f670:	d001      	beq.n	801f676 <_vfiprintf_r+0x646>
 801f672:	461d      	mov	r5, r3
 801f674:	e7f5      	b.n	801f662 <_vfiprintf_r+0x632>
 801f676:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801f67a:	d001      	beq.n	801f680 <_vfiprintf_r+0x650>
 801f67c:	b2a4      	uxth	r4, r4
 801f67e:	e7f0      	b.n	801f662 <_vfiprintf_r+0x632>
 801f680:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801f684:	d0ed      	beq.n	801f662 <_vfiprintf_r+0x632>
 801f686:	b2e4      	uxtb	r4, r4
 801f688:	e7f3      	b.n	801f672 <_vfiprintf_r+0x642>
 801f68a:	4a47      	ldr	r2, [pc, #284]	; (801f7a8 <_vfiprintf_r+0x778>)
 801f68c:	e5c6      	b.n	801f21c <_vfiprintf_r+0x1ec>
 801f68e:	46a3      	mov	fp, r4
 801f690:	f01a 0510 	ands.w	r5, sl, #16
 801f694:	f85b 4b04 	ldr.w	r4, [fp], #4
 801f698:	d001      	beq.n	801f69e <_vfiprintf_r+0x66e>
 801f69a:	4615      	mov	r5, r2
 801f69c:	e5ca      	b.n	801f234 <_vfiprintf_r+0x204>
 801f69e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801f6a2:	d001      	beq.n	801f6a8 <_vfiprintf_r+0x678>
 801f6a4:	b2a4      	uxth	r4, r4
 801f6a6:	e5c5      	b.n	801f234 <_vfiprintf_r+0x204>
 801f6a8:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801f6ac:	f43f adc2 	beq.w	801f234 <_vfiprintf_r+0x204>
 801f6b0:	b2e4      	uxtb	r4, r4
 801f6b2:	e7f2      	b.n	801f69a <_vfiprintf_r+0x66a>
 801f6b4:	2c0a      	cmp	r4, #10
 801f6b6:	f175 0300 	sbcs.w	r3, r5, #0
 801f6ba:	d205      	bcs.n	801f6c8 <_vfiprintf_r+0x698>
 801f6bc:	3430      	adds	r4, #48	; 0x30
 801f6be:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 801f6c2:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 801f6c6:	e137      	b.n	801f938 <_vfiprintf_r+0x908>
 801f6c8:	ab3a      	add	r3, sp, #232	; 0xe8
 801f6ca:	930a      	str	r3, [sp, #40]	; 0x28
 801f6cc:	9b05      	ldr	r3, [sp, #20]
 801f6ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f6d2:	f04f 0a00 	mov.w	sl, #0
 801f6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 801f6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6da:	220a      	movs	r2, #10
 801f6dc:	f103 38ff 	add.w	r8, r3, #4294967295
 801f6e0:	4620      	mov	r0, r4
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	4629      	mov	r1, r5
 801f6e6:	f7e1 fd2b 	bl	8001140 <__aeabi_uldivmod>
 801f6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f6ec:	3230      	adds	r2, #48	; 0x30
 801f6ee:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6f4:	f10a 0a01 	add.w	sl, sl, #1
 801f6f8:	b1d3      	cbz	r3, 801f730 <_vfiprintf_r+0x700>
 801f6fa:	9b07      	ldr	r3, [sp, #28]
 801f6fc:	781b      	ldrb	r3, [r3, #0]
 801f6fe:	4553      	cmp	r3, sl
 801f700:	d116      	bne.n	801f730 <_vfiprintf_r+0x700>
 801f702:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f706:	d013      	beq.n	801f730 <_vfiprintf_r+0x700>
 801f708:	2c0a      	cmp	r4, #10
 801f70a:	f175 0300 	sbcs.w	r3, r5, #0
 801f70e:	d30f      	bcc.n	801f730 <_vfiprintf_r+0x700>
 801f710:	9b08      	ldr	r3, [sp, #32]
 801f712:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f714:	eba8 0803 	sub.w	r8, r8, r3
 801f718:	461a      	mov	r2, r3
 801f71a:	4640      	mov	r0, r8
 801f71c:	f7ff fbbb 	bl	801ee96 <strncpy>
 801f720:	9b07      	ldr	r3, [sp, #28]
 801f722:	785b      	ldrb	r3, [r3, #1]
 801f724:	b1a3      	cbz	r3, 801f750 <_vfiprintf_r+0x720>
 801f726:	9b07      	ldr	r3, [sp, #28]
 801f728:	3301      	adds	r3, #1
 801f72a:	9307      	str	r3, [sp, #28]
 801f72c:	f04f 0a00 	mov.w	sl, #0
 801f730:	2300      	movs	r3, #0
 801f732:	220a      	movs	r2, #10
 801f734:	4620      	mov	r0, r4
 801f736:	4629      	mov	r1, r5
 801f738:	f7e1 fd02 	bl	8001140 <__aeabi_uldivmod>
 801f73c:	2c0a      	cmp	r4, #10
 801f73e:	f175 0300 	sbcs.w	r3, r5, #0
 801f742:	f0c0 80f9 	bcc.w	801f938 <_vfiprintf_r+0x908>
 801f746:	4604      	mov	r4, r0
 801f748:	460d      	mov	r5, r1
 801f74a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801f74e:	e7c3      	b.n	801f6d8 <_vfiprintf_r+0x6a8>
 801f750:	469a      	mov	sl, r3
 801f752:	e7ed      	b.n	801f730 <_vfiprintf_r+0x700>
 801f754:	f004 030f 	and.w	r3, r4, #15
 801f758:	9a06      	ldr	r2, [sp, #24]
 801f75a:	0924      	lsrs	r4, r4, #4
 801f75c:	5cd3      	ldrb	r3, [r2, r3]
 801f75e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801f762:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801f766:	092d      	lsrs	r5, r5, #4
 801f768:	ea54 0305 	orrs.w	r3, r4, r5
 801f76c:	d1f2      	bne.n	801f754 <_vfiprintf_r+0x724>
 801f76e:	e0e3      	b.n	801f938 <_vfiprintf_r+0x908>
 801f770:	b933      	cbnz	r3, 801f780 <_vfiprintf_r+0x750>
 801f772:	f01a 0f01 	tst.w	sl, #1
 801f776:	d003      	beq.n	801f780 <_vfiprintf_r+0x750>
 801f778:	2330      	movs	r3, #48	; 0x30
 801f77a:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 801f77e:	e7a0      	b.n	801f6c2 <_vfiprintf_r+0x692>
 801f780:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 801f784:	e0d8      	b.n	801f938 <_vfiprintf_r+0x908>
 801f786:	2b00      	cmp	r3, #0
 801f788:	f000 80a4 	beq.w	801f8d4 <_vfiprintf_r+0x8a4>
 801f78c:	2100      	movs	r1, #0
 801f78e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801f792:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801f796:	46a3      	mov	fp, r4
 801f798:	e5db      	b.n	801f352 <_vfiprintf_r+0x322>
 801f79a:	4605      	mov	r5, r0
 801f79c:	e68d      	b.n	801f4ba <_vfiprintf_r+0x48a>
 801f79e:	bf00      	nop
 801f7a0:	08020b24 	.word	0x08020b24
 801f7a4:	08020b34 	.word	0x08020b34
 801f7a8:	080208f9 	.word	0x080208f9
 801f7ac:	2010      	movs	r0, #16
 801f7ae:	4402      	add	r2, r0
 801f7b0:	2b07      	cmp	r3, #7
 801f7b2:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801f7b6:	6070      	str	r0, [r6, #4]
 801f7b8:	dd07      	ble.n	801f7ca <_vfiprintf_r+0x79a>
 801f7ba:	aa0e      	add	r2, sp, #56	; 0x38
 801f7bc:	4639      	mov	r1, r7
 801f7be:	4648      	mov	r0, r9
 801f7c0:	f7ff fc04 	bl	801efcc <__sprint_r>
 801f7c4:	2800      	cmp	r0, #0
 801f7c6:	d164      	bne.n	801f892 <_vfiprintf_r+0x862>
 801f7c8:	a911      	add	r1, sp, #68	; 0x44
 801f7ca:	3c10      	subs	r4, #16
 801f7cc:	460e      	mov	r6, r1
 801f7ce:	e68f      	b.n	801f4f0 <_vfiprintf_r+0x4c0>
 801f7d0:	460e      	mov	r6, r1
 801f7d2:	e6a8      	b.n	801f526 <_vfiprintf_r+0x4f6>
 801f7d4:	aa0e      	add	r2, sp, #56	; 0x38
 801f7d6:	4639      	mov	r1, r7
 801f7d8:	4648      	mov	r0, r9
 801f7da:	f7ff fbf7 	bl	801efcc <__sprint_r>
 801f7de:	2800      	cmp	r0, #0
 801f7e0:	d157      	bne.n	801f892 <_vfiprintf_r+0x862>
 801f7e2:	ae11      	add	r6, sp, #68	; 0x44
 801f7e4:	e6b1      	b.n	801f54a <_vfiprintf_r+0x51a>
 801f7e6:	aa0e      	add	r2, sp, #56	; 0x38
 801f7e8:	4639      	mov	r1, r7
 801f7ea:	4648      	mov	r0, r9
 801f7ec:	f7ff fbee 	bl	801efcc <__sprint_r>
 801f7f0:	2800      	cmp	r0, #0
 801f7f2:	d14e      	bne.n	801f892 <_vfiprintf_r+0x862>
 801f7f4:	ae11      	add	r6, sp, #68	; 0x44
 801f7f6:	e6b8      	b.n	801f56a <_vfiprintf_r+0x53a>
 801f7f8:	2010      	movs	r0, #16
 801f7fa:	4402      	add	r2, r0
 801f7fc:	2b07      	cmp	r3, #7
 801f7fe:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801f802:	6070      	str	r0, [r6, #4]
 801f804:	dd07      	ble.n	801f816 <_vfiprintf_r+0x7e6>
 801f806:	aa0e      	add	r2, sp, #56	; 0x38
 801f808:	4639      	mov	r1, r7
 801f80a:	4648      	mov	r0, r9
 801f80c:	f7ff fbde 	bl	801efcc <__sprint_r>
 801f810:	2800      	cmp	r0, #0
 801f812:	d13e      	bne.n	801f892 <_vfiprintf_r+0x862>
 801f814:	a911      	add	r1, sp, #68	; 0x44
 801f816:	3c10      	subs	r4, #16
 801f818:	460e      	mov	r6, r1
 801f81a:	e6ae      	b.n	801f57a <_vfiprintf_r+0x54a>
 801f81c:	460e      	mov	r6, r1
 801f81e:	e6c7      	b.n	801f5b0 <_vfiprintf_r+0x580>
 801f820:	2010      	movs	r0, #16
 801f822:	4401      	add	r1, r0
 801f824:	2b07      	cmp	r3, #7
 801f826:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 801f82a:	6070      	str	r0, [r6, #4]
 801f82c:	dd06      	ble.n	801f83c <_vfiprintf_r+0x80c>
 801f82e:	aa0e      	add	r2, sp, #56	; 0x38
 801f830:	4639      	mov	r1, r7
 801f832:	4648      	mov	r0, r9
 801f834:	f7ff fbca 	bl	801efcc <__sprint_r>
 801f838:	bb58      	cbnz	r0, 801f892 <_vfiprintf_r+0x862>
 801f83a:	aa11      	add	r2, sp, #68	; 0x44
 801f83c:	3c10      	subs	r4, #16
 801f83e:	4616      	mov	r6, r2
 801f840:	e6bb      	b.n	801f5ba <_vfiprintf_r+0x58a>
 801f842:	4616      	mov	r6, r2
 801f844:	e6d3      	b.n	801f5ee <_vfiprintf_r+0x5be>
 801f846:	aa0e      	add	r2, sp, #56	; 0x38
 801f848:	4639      	mov	r1, r7
 801f84a:	4648      	mov	r0, r9
 801f84c:	f7ff fbbe 	bl	801efcc <__sprint_r>
 801f850:	b9f8      	cbnz	r0, 801f892 <_vfiprintf_r+0x862>
 801f852:	ab11      	add	r3, sp, #68	; 0x44
 801f854:	e6da      	b.n	801f60c <_vfiprintf_r+0x5dc>
 801f856:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801f85a:	1a54      	subs	r4, r2, r1
 801f85c:	2c00      	cmp	r4, #0
 801f85e:	f77f aed9 	ble.w	801f614 <_vfiprintf_r+0x5e4>
 801f862:	4d39      	ldr	r5, [pc, #228]	; (801f948 <_vfiprintf_r+0x918>)
 801f864:	2610      	movs	r6, #16
 801f866:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 801f86a:	2c10      	cmp	r4, #16
 801f86c:	f102 0201 	add.w	r2, r2, #1
 801f870:	601d      	str	r5, [r3, #0]
 801f872:	dc1d      	bgt.n	801f8b0 <_vfiprintf_r+0x880>
 801f874:	605c      	str	r4, [r3, #4]
 801f876:	2a07      	cmp	r2, #7
 801f878:	440c      	add	r4, r1
 801f87a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 801f87e:	f77f aec9 	ble.w	801f614 <_vfiprintf_r+0x5e4>
 801f882:	aa0e      	add	r2, sp, #56	; 0x38
 801f884:	4639      	mov	r1, r7
 801f886:	4648      	mov	r0, r9
 801f888:	f7ff fba0 	bl	801efcc <__sprint_r>
 801f88c:	2800      	cmp	r0, #0
 801f88e:	f43f aec1 	beq.w	801f614 <_vfiprintf_r+0x5e4>
 801f892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f894:	07d9      	lsls	r1, r3, #31
 801f896:	d405      	bmi.n	801f8a4 <_vfiprintf_r+0x874>
 801f898:	89bb      	ldrh	r3, [r7, #12]
 801f89a:	059a      	lsls	r2, r3, #22
 801f89c:	d402      	bmi.n	801f8a4 <_vfiprintf_r+0x874>
 801f89e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801f8a0:	f7fe fac1 	bl	801de26 <__retarget_lock_release_recursive>
 801f8a4:	89bb      	ldrh	r3, [r7, #12]
 801f8a6:	065b      	lsls	r3, r3, #25
 801f8a8:	f57f abf3 	bpl.w	801f092 <_vfiprintf_r+0x62>
 801f8ac:	f7ff bbee 	b.w	801f08c <_vfiprintf_r+0x5c>
 801f8b0:	3110      	adds	r1, #16
 801f8b2:	2a07      	cmp	r2, #7
 801f8b4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 801f8b8:	605e      	str	r6, [r3, #4]
 801f8ba:	dc02      	bgt.n	801f8c2 <_vfiprintf_r+0x892>
 801f8bc:	3308      	adds	r3, #8
 801f8be:	3c10      	subs	r4, #16
 801f8c0:	e7d1      	b.n	801f866 <_vfiprintf_r+0x836>
 801f8c2:	aa0e      	add	r2, sp, #56	; 0x38
 801f8c4:	4639      	mov	r1, r7
 801f8c6:	4648      	mov	r0, r9
 801f8c8:	f7ff fb80 	bl	801efcc <__sprint_r>
 801f8cc:	2800      	cmp	r0, #0
 801f8ce:	d1e0      	bne.n	801f892 <_vfiprintf_r+0x862>
 801f8d0:	ab11      	add	r3, sp, #68	; 0x44
 801f8d2:	e7f4      	b.n	801f8be <_vfiprintf_r+0x88e>
 801f8d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8d6:	b913      	cbnz	r3, 801f8de <_vfiprintf_r+0x8ae>
 801f8d8:	2300      	movs	r3, #0
 801f8da:	930f      	str	r3, [sp, #60]	; 0x3c
 801f8dc:	e7d9      	b.n	801f892 <_vfiprintf_r+0x862>
 801f8de:	aa0e      	add	r2, sp, #56	; 0x38
 801f8e0:	4639      	mov	r1, r7
 801f8e2:	4648      	mov	r0, r9
 801f8e4:	f7ff fb72 	bl	801efcc <__sprint_r>
 801f8e8:	2800      	cmp	r0, #0
 801f8ea:	d0f5      	beq.n	801f8d8 <_vfiprintf_r+0x8a8>
 801f8ec:	e7d1      	b.n	801f892 <_vfiprintf_r+0x862>
 801f8ee:	ea54 0205 	orrs.w	r2, r4, r5
 801f8f2:	f8cd a014 	str.w	sl, [sp, #20]
 801f8f6:	f43f ada3 	beq.w	801f440 <_vfiprintf_r+0x410>
 801f8fa:	2b01      	cmp	r3, #1
 801f8fc:	f43f aeda 	beq.w	801f6b4 <_vfiprintf_r+0x684>
 801f900:	2b02      	cmp	r3, #2
 801f902:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 801f906:	f43f af25 	beq.w	801f754 <_vfiprintf_r+0x724>
 801f90a:	f004 0307 	and.w	r3, r4, #7
 801f90e:	08e4      	lsrs	r4, r4, #3
 801f910:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801f914:	08ed      	lsrs	r5, r5, #3
 801f916:	3330      	adds	r3, #48	; 0x30
 801f918:	ea54 0105 	orrs.w	r1, r4, r5
 801f91c:	4642      	mov	r2, r8
 801f91e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801f922:	d1f2      	bne.n	801f90a <_vfiprintf_r+0x8da>
 801f924:	9905      	ldr	r1, [sp, #20]
 801f926:	07c8      	lsls	r0, r1, #31
 801f928:	d506      	bpl.n	801f938 <_vfiprintf_r+0x908>
 801f92a:	2b30      	cmp	r3, #48	; 0x30
 801f92c:	d004      	beq.n	801f938 <_vfiprintf_r+0x908>
 801f92e:	2330      	movs	r3, #48	; 0x30
 801f930:	f808 3c01 	strb.w	r3, [r8, #-1]
 801f934:	f1a2 0802 	sub.w	r8, r2, #2
 801f938:	ab3a      	add	r3, sp, #232	; 0xe8
 801f93a:	eba3 0308 	sub.w	r3, r3, r8
 801f93e:	9d01      	ldr	r5, [sp, #4]
 801f940:	f8dd a014 	ldr.w	sl, [sp, #20]
 801f944:	9301      	str	r3, [sp, #4]
 801f946:	e5b8      	b.n	801f4ba <_vfiprintf_r+0x48a>
 801f948:	08020b24 	.word	0x08020b24

0801f94c <__sbprintf>:
 801f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f94e:	461f      	mov	r7, r3
 801f950:	898b      	ldrh	r3, [r1, #12]
 801f952:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801f956:	f023 0302 	bic.w	r3, r3, #2
 801f95a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f95e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801f960:	9319      	str	r3, [sp, #100]	; 0x64
 801f962:	89cb      	ldrh	r3, [r1, #14]
 801f964:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f968:	69cb      	ldr	r3, [r1, #28]
 801f96a:	9307      	str	r3, [sp, #28]
 801f96c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801f96e:	9309      	str	r3, [sp, #36]	; 0x24
 801f970:	ab1a      	add	r3, sp, #104	; 0x68
 801f972:	9300      	str	r3, [sp, #0]
 801f974:	9304      	str	r3, [sp, #16]
 801f976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f97a:	4615      	mov	r5, r2
 801f97c:	4606      	mov	r6, r0
 801f97e:	9302      	str	r3, [sp, #8]
 801f980:	9305      	str	r3, [sp, #20]
 801f982:	a816      	add	r0, sp, #88	; 0x58
 801f984:	2300      	movs	r3, #0
 801f986:	460c      	mov	r4, r1
 801f988:	9306      	str	r3, [sp, #24]
 801f98a:	f7fe fa49 	bl	801de20 <__retarget_lock_init_recursive>
 801f98e:	462a      	mov	r2, r5
 801f990:	463b      	mov	r3, r7
 801f992:	4669      	mov	r1, sp
 801f994:	4630      	mov	r0, r6
 801f996:	f7ff fb4b 	bl	801f030 <_vfiprintf_r>
 801f99a:	1e05      	subs	r5, r0, #0
 801f99c:	db07      	blt.n	801f9ae <__sbprintf+0x62>
 801f99e:	4669      	mov	r1, sp
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	f7fd ff15 	bl	801d7d0 <_fflush_r>
 801f9a6:	2800      	cmp	r0, #0
 801f9a8:	bf18      	it	ne
 801f9aa:	f04f 35ff 	movne.w	r5, #4294967295
 801f9ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f9b2:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f9b4:	065b      	lsls	r3, r3, #25
 801f9b6:	bf42      	ittt	mi
 801f9b8:	89a3      	ldrhmi	r3, [r4, #12]
 801f9ba:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801f9be:	81a3      	strhmi	r3, [r4, #12]
 801f9c0:	f7fe fa2f 	bl	801de22 <__retarget_lock_close_recursive>
 801f9c4:	4628      	mov	r0, r5
 801f9c6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801f9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f9cc <_write_r>:
 801f9cc:	b538      	push	{r3, r4, r5, lr}
 801f9ce:	4d07      	ldr	r5, [pc, #28]	; (801f9ec <_write_r+0x20>)
 801f9d0:	4604      	mov	r4, r0
 801f9d2:	4608      	mov	r0, r1
 801f9d4:	4611      	mov	r1, r2
 801f9d6:	2200      	movs	r2, #0
 801f9d8:	602a      	str	r2, [r5, #0]
 801f9da:	461a      	mov	r2, r3
 801f9dc:	f7e3 ff99 	bl	8003912 <_write>
 801f9e0:	1c43      	adds	r3, r0, #1
 801f9e2:	d102      	bne.n	801f9ea <_write_r+0x1e>
 801f9e4:	682b      	ldr	r3, [r5, #0]
 801f9e6:	b103      	cbz	r3, 801f9ea <_write_r+0x1e>
 801f9e8:	6023      	str	r3, [r4, #0]
 801f9ea:	bd38      	pop	{r3, r4, r5, pc}
 801f9ec:	20001ddc 	.word	0x20001ddc

0801f9f0 <__register_exitproc>:
 801f9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 801fa6c <__register_exitproc+0x7c>
 801f9f8:	4606      	mov	r6, r0
 801f9fa:	f8da 0000 	ldr.w	r0, [sl]
 801f9fe:	4698      	mov	r8, r3
 801fa00:	460f      	mov	r7, r1
 801fa02:	4691      	mov	r9, r2
 801fa04:	f7fe fa0e 	bl	801de24 <__retarget_lock_acquire_recursive>
 801fa08:	4b19      	ldr	r3, [pc, #100]	; (801fa70 <__register_exitproc+0x80>)
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801fa10:	b91c      	cbnz	r4, 801fa1a <__register_exitproc+0x2a>
 801fa12:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801fa16:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801fa1a:	6865      	ldr	r5, [r4, #4]
 801fa1c:	f8da 0000 	ldr.w	r0, [sl]
 801fa20:	2d1f      	cmp	r5, #31
 801fa22:	dd05      	ble.n	801fa30 <__register_exitproc+0x40>
 801fa24:	f7fe f9ff 	bl	801de26 <__retarget_lock_release_recursive>
 801fa28:	f04f 30ff 	mov.w	r0, #4294967295
 801fa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa30:	b19e      	cbz	r6, 801fa5a <__register_exitproc+0x6a>
 801fa32:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801fa36:	2201      	movs	r2, #1
 801fa38:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801fa3c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801fa40:	40aa      	lsls	r2, r5
 801fa42:	4313      	orrs	r3, r2
 801fa44:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801fa48:	2e02      	cmp	r6, #2
 801fa4a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801fa4e:	bf02      	ittt	eq
 801fa50:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801fa54:	4313      	orreq	r3, r2
 801fa56:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801fa5a:	1c6b      	adds	r3, r5, #1
 801fa5c:	3502      	adds	r5, #2
 801fa5e:	6063      	str	r3, [r4, #4]
 801fa60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801fa64:	f7fe f9df 	bl	801de26 <__retarget_lock_release_recursive>
 801fa68:	2000      	movs	r0, #0
 801fa6a:	e7df      	b.n	801fa2c <__register_exitproc+0x3c>
 801fa6c:	20000518 	.word	0x20000518
 801fa70:	080208d4 	.word	0x080208d4

0801fa74 <__assert_func>:
 801fa74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fa76:	4614      	mov	r4, r2
 801fa78:	461a      	mov	r2, r3
 801fa7a:	4b09      	ldr	r3, [pc, #36]	; (801faa0 <__assert_func+0x2c>)
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	4605      	mov	r5, r0
 801fa80:	68d8      	ldr	r0, [r3, #12]
 801fa82:	b14c      	cbz	r4, 801fa98 <__assert_func+0x24>
 801fa84:	4b07      	ldr	r3, [pc, #28]	; (801faa4 <__assert_func+0x30>)
 801fa86:	9100      	str	r1, [sp, #0]
 801fa88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fa8c:	4906      	ldr	r1, [pc, #24]	; (801faa8 <__assert_func+0x34>)
 801fa8e:	462b      	mov	r3, r5
 801fa90:	f000 f8ac 	bl	801fbec <fiprintf>
 801fa94:	f000 f9f1 	bl	801fe7a <abort>
 801fa98:	4b04      	ldr	r3, [pc, #16]	; (801faac <__assert_func+0x38>)
 801fa9a:	461c      	mov	r4, r3
 801fa9c:	e7f3      	b.n	801fa86 <__assert_func+0x12>
 801fa9e:	bf00      	nop
 801faa0:	200000e8 	.word	0x200000e8
 801faa4:	08020b44 	.word	0x08020b44
 801faa8:	08020b51 	.word	0x08020b51
 801faac:	08020b7f 	.word	0x08020b7f

0801fab0 <_calloc_r>:
 801fab0:	b538      	push	{r3, r4, r5, lr}
 801fab2:	fba1 1502 	umull	r1, r5, r1, r2
 801fab6:	b92d      	cbnz	r5, 801fac4 <_calloc_r+0x14>
 801fab8:	f7fe fa22 	bl	801df00 <_malloc_r>
 801fabc:	4604      	mov	r4, r0
 801fabe:	b938      	cbnz	r0, 801fad0 <_calloc_r+0x20>
 801fac0:	4620      	mov	r0, r4
 801fac2:	bd38      	pop	{r3, r4, r5, pc}
 801fac4:	f7fa fa6e 	bl	8019fa4 <__errno>
 801fac8:	230c      	movs	r3, #12
 801faca:	6003      	str	r3, [r0, #0]
 801facc:	2400      	movs	r4, #0
 801face:	e7f7      	b.n	801fac0 <_calloc_r+0x10>
 801fad0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801fad4:	f022 0203 	bic.w	r2, r2, #3
 801fad8:	3a04      	subs	r2, #4
 801fada:	2a24      	cmp	r2, #36	; 0x24
 801fadc:	d819      	bhi.n	801fb12 <_calloc_r+0x62>
 801fade:	2a13      	cmp	r2, #19
 801fae0:	d915      	bls.n	801fb0e <_calloc_r+0x5e>
 801fae2:	2a1b      	cmp	r2, #27
 801fae4:	e9c0 5500 	strd	r5, r5, [r0]
 801fae8:	d806      	bhi.n	801faf8 <_calloc_r+0x48>
 801faea:	f100 0308 	add.w	r3, r0, #8
 801faee:	2200      	movs	r2, #0
 801faf0:	e9c3 2200 	strd	r2, r2, [r3]
 801faf4:	609a      	str	r2, [r3, #8]
 801faf6:	e7e3      	b.n	801fac0 <_calloc_r+0x10>
 801faf8:	2a24      	cmp	r2, #36	; 0x24
 801fafa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801fafe:	bf11      	iteee	ne
 801fb00:	f100 0310 	addne.w	r3, r0, #16
 801fb04:	6105      	streq	r5, [r0, #16]
 801fb06:	f100 0318 	addeq.w	r3, r0, #24
 801fb0a:	6145      	streq	r5, [r0, #20]
 801fb0c:	e7ef      	b.n	801faee <_calloc_r+0x3e>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	e7ed      	b.n	801faee <_calloc_r+0x3e>
 801fb12:	4629      	mov	r1, r5
 801fb14:	f7fa fa70 	bl	8019ff8 <memset>
 801fb18:	e7d2      	b.n	801fac0 <_calloc_r+0x10>
	...

0801fb1c <_close_r>:
 801fb1c:	b538      	push	{r3, r4, r5, lr}
 801fb1e:	4d06      	ldr	r5, [pc, #24]	; (801fb38 <_close_r+0x1c>)
 801fb20:	2300      	movs	r3, #0
 801fb22:	4604      	mov	r4, r0
 801fb24:	4608      	mov	r0, r1
 801fb26:	602b      	str	r3, [r5, #0]
 801fb28:	f7e3 ff0f 	bl	800394a <_close>
 801fb2c:	1c43      	adds	r3, r0, #1
 801fb2e:	d102      	bne.n	801fb36 <_close_r+0x1a>
 801fb30:	682b      	ldr	r3, [r5, #0]
 801fb32:	b103      	cbz	r3, 801fb36 <_close_r+0x1a>
 801fb34:	6023      	str	r3, [r4, #0]
 801fb36:	bd38      	pop	{r3, r4, r5, pc}
 801fb38:	20001ddc 	.word	0x20001ddc

0801fb3c <_fclose_r>:
 801fb3c:	b570      	push	{r4, r5, r6, lr}
 801fb3e:	4606      	mov	r6, r0
 801fb40:	460c      	mov	r4, r1
 801fb42:	b911      	cbnz	r1, 801fb4a <_fclose_r+0xe>
 801fb44:	2500      	movs	r5, #0
 801fb46:	4628      	mov	r0, r5
 801fb48:	bd70      	pop	{r4, r5, r6, pc}
 801fb4a:	b118      	cbz	r0, 801fb54 <_fclose_r+0x18>
 801fb4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801fb4e:	b90b      	cbnz	r3, 801fb54 <_fclose_r+0x18>
 801fb50:	f7fd feaa 	bl	801d8a8 <__sinit>
 801fb54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb56:	07d8      	lsls	r0, r3, #31
 801fb58:	d405      	bmi.n	801fb66 <_fclose_r+0x2a>
 801fb5a:	89a3      	ldrh	r3, [r4, #12]
 801fb5c:	0599      	lsls	r1, r3, #22
 801fb5e:	d402      	bmi.n	801fb66 <_fclose_r+0x2a>
 801fb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb62:	f7fe f95f 	bl	801de24 <__retarget_lock_acquire_recursive>
 801fb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb6a:	b93b      	cbnz	r3, 801fb7c <_fclose_r+0x40>
 801fb6c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801fb6e:	f015 0501 	ands.w	r5, r5, #1
 801fb72:	d1e7      	bne.n	801fb44 <_fclose_r+0x8>
 801fb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb76:	f7fe f956 	bl	801de26 <__retarget_lock_release_recursive>
 801fb7a:	e7e4      	b.n	801fb46 <_fclose_r+0xa>
 801fb7c:	4621      	mov	r1, r4
 801fb7e:	4630      	mov	r0, r6
 801fb80:	f7fd fd9c 	bl	801d6bc <__sflush_r>
 801fb84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801fb86:	4605      	mov	r5, r0
 801fb88:	b133      	cbz	r3, 801fb98 <_fclose_r+0x5c>
 801fb8a:	69e1      	ldr	r1, [r4, #28]
 801fb8c:	4630      	mov	r0, r6
 801fb8e:	4798      	blx	r3
 801fb90:	2800      	cmp	r0, #0
 801fb92:	bfb8      	it	lt
 801fb94:	f04f 35ff 	movlt.w	r5, #4294967295
 801fb98:	89a3      	ldrh	r3, [r4, #12]
 801fb9a:	061a      	lsls	r2, r3, #24
 801fb9c:	d503      	bpl.n	801fba6 <_fclose_r+0x6a>
 801fb9e:	6921      	ldr	r1, [r4, #16]
 801fba0:	4630      	mov	r0, r6
 801fba2:	f7fd ff11 	bl	801d9c8 <_free_r>
 801fba6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fba8:	b141      	cbz	r1, 801fbbc <_fclose_r+0x80>
 801fbaa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801fbae:	4299      	cmp	r1, r3
 801fbb0:	d002      	beq.n	801fbb8 <_fclose_r+0x7c>
 801fbb2:	4630      	mov	r0, r6
 801fbb4:	f7fd ff08 	bl	801d9c8 <_free_r>
 801fbb8:	2300      	movs	r3, #0
 801fbba:	6323      	str	r3, [r4, #48]	; 0x30
 801fbbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801fbbe:	b121      	cbz	r1, 801fbca <_fclose_r+0x8e>
 801fbc0:	4630      	mov	r0, r6
 801fbc2:	f7fd ff01 	bl	801d9c8 <_free_r>
 801fbc6:	2300      	movs	r3, #0
 801fbc8:	6463      	str	r3, [r4, #68]	; 0x44
 801fbca:	f7fd fe55 	bl	801d878 <__sfp_lock_acquire>
 801fbce:	2300      	movs	r3, #0
 801fbd0:	81a3      	strh	r3, [r4, #12]
 801fbd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbd4:	07db      	lsls	r3, r3, #31
 801fbd6:	d402      	bmi.n	801fbde <_fclose_r+0xa2>
 801fbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbda:	f7fe f924 	bl	801de26 <__retarget_lock_release_recursive>
 801fbde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fbe0:	f7fe f91f 	bl	801de22 <__retarget_lock_close_recursive>
 801fbe4:	f7fd fe4e 	bl	801d884 <__sfp_lock_release>
 801fbe8:	e7ad      	b.n	801fb46 <_fclose_r+0xa>
	...

0801fbec <fiprintf>:
 801fbec:	b40e      	push	{r1, r2, r3}
 801fbee:	b503      	push	{r0, r1, lr}
 801fbf0:	4601      	mov	r1, r0
 801fbf2:	ab03      	add	r3, sp, #12
 801fbf4:	4805      	ldr	r0, [pc, #20]	; (801fc0c <fiprintf+0x20>)
 801fbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbfa:	6800      	ldr	r0, [r0, #0]
 801fbfc:	9301      	str	r3, [sp, #4]
 801fbfe:	f7ff fa17 	bl	801f030 <_vfiprintf_r>
 801fc02:	b002      	add	sp, #8
 801fc04:	f85d eb04 	ldr.w	lr, [sp], #4
 801fc08:	b003      	add	sp, #12
 801fc0a:	4770      	bx	lr
 801fc0c:	200000e8 	.word	0x200000e8

0801fc10 <__fputwc>:
 801fc10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fc14:	4680      	mov	r8, r0
 801fc16:	460e      	mov	r6, r1
 801fc18:	4615      	mov	r5, r2
 801fc1a:	f000 f885 	bl	801fd28 <__locale_mb_cur_max>
 801fc1e:	2801      	cmp	r0, #1
 801fc20:	4604      	mov	r4, r0
 801fc22:	d11b      	bne.n	801fc5c <__fputwc+0x4c>
 801fc24:	1e73      	subs	r3, r6, #1
 801fc26:	2bfe      	cmp	r3, #254	; 0xfe
 801fc28:	d818      	bhi.n	801fc5c <__fputwc+0x4c>
 801fc2a:	f88d 6004 	strb.w	r6, [sp, #4]
 801fc2e:	2700      	movs	r7, #0
 801fc30:	f10d 0904 	add.w	r9, sp, #4
 801fc34:	42a7      	cmp	r7, r4
 801fc36:	d020      	beq.n	801fc7a <__fputwc+0x6a>
 801fc38:	68ab      	ldr	r3, [r5, #8]
 801fc3a:	f817 1009 	ldrb.w	r1, [r7, r9]
 801fc3e:	3b01      	subs	r3, #1
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	60ab      	str	r3, [r5, #8]
 801fc44:	da04      	bge.n	801fc50 <__fputwc+0x40>
 801fc46:	69aa      	ldr	r2, [r5, #24]
 801fc48:	4293      	cmp	r3, r2
 801fc4a:	db1a      	blt.n	801fc82 <__fputwc+0x72>
 801fc4c:	290a      	cmp	r1, #10
 801fc4e:	d018      	beq.n	801fc82 <__fputwc+0x72>
 801fc50:	682b      	ldr	r3, [r5, #0]
 801fc52:	1c5a      	adds	r2, r3, #1
 801fc54:	602a      	str	r2, [r5, #0]
 801fc56:	7019      	strb	r1, [r3, #0]
 801fc58:	3701      	adds	r7, #1
 801fc5a:	e7eb      	b.n	801fc34 <__fputwc+0x24>
 801fc5c:	4632      	mov	r2, r6
 801fc5e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801fc62:	a901      	add	r1, sp, #4
 801fc64:	4640      	mov	r0, r8
 801fc66:	f000 f8e5 	bl	801fe34 <_wcrtomb_r>
 801fc6a:	1c42      	adds	r2, r0, #1
 801fc6c:	4604      	mov	r4, r0
 801fc6e:	d1de      	bne.n	801fc2e <__fputwc+0x1e>
 801fc70:	89ab      	ldrh	r3, [r5, #12]
 801fc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc76:	81ab      	strh	r3, [r5, #12]
 801fc78:	4606      	mov	r6, r0
 801fc7a:	4630      	mov	r0, r6
 801fc7c:	b003      	add	sp, #12
 801fc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fc82:	462a      	mov	r2, r5
 801fc84:	4640      	mov	r0, r8
 801fc86:	f000 f88b 	bl	801fda0 <__swbuf_r>
 801fc8a:	1c43      	adds	r3, r0, #1
 801fc8c:	d1e4      	bne.n	801fc58 <__fputwc+0x48>
 801fc8e:	4606      	mov	r6, r0
 801fc90:	e7f3      	b.n	801fc7a <__fputwc+0x6a>

0801fc92 <_fputwc_r>:
 801fc92:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801fc94:	07db      	lsls	r3, r3, #31
 801fc96:	b570      	push	{r4, r5, r6, lr}
 801fc98:	4605      	mov	r5, r0
 801fc9a:	460e      	mov	r6, r1
 801fc9c:	4614      	mov	r4, r2
 801fc9e:	d405      	bmi.n	801fcac <_fputwc_r+0x1a>
 801fca0:	8993      	ldrh	r3, [r2, #12]
 801fca2:	0598      	lsls	r0, r3, #22
 801fca4:	d402      	bmi.n	801fcac <_fputwc_r+0x1a>
 801fca6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801fca8:	f7fe f8bc 	bl	801de24 <__retarget_lock_acquire_recursive>
 801fcac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcb0:	0499      	lsls	r1, r3, #18
 801fcb2:	d406      	bmi.n	801fcc2 <_fputwc_r+0x30>
 801fcb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fcb8:	81a3      	strh	r3, [r4, #12]
 801fcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fcbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fcc0:	6663      	str	r3, [r4, #100]	; 0x64
 801fcc2:	4622      	mov	r2, r4
 801fcc4:	4628      	mov	r0, r5
 801fcc6:	4631      	mov	r1, r6
 801fcc8:	f7ff ffa2 	bl	801fc10 <__fputwc>
 801fccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fcce:	07da      	lsls	r2, r3, #31
 801fcd0:	4605      	mov	r5, r0
 801fcd2:	d405      	bmi.n	801fce0 <_fputwc_r+0x4e>
 801fcd4:	89a3      	ldrh	r3, [r4, #12]
 801fcd6:	059b      	lsls	r3, r3, #22
 801fcd8:	d402      	bmi.n	801fce0 <_fputwc_r+0x4e>
 801fcda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fcdc:	f7fe f8a3 	bl	801de26 <__retarget_lock_release_recursive>
 801fce0:	4628      	mov	r0, r5
 801fce2:	bd70      	pop	{r4, r5, r6, pc}

0801fce4 <_fstat_r>:
 801fce4:	b538      	push	{r3, r4, r5, lr}
 801fce6:	4d07      	ldr	r5, [pc, #28]	; (801fd04 <_fstat_r+0x20>)
 801fce8:	2300      	movs	r3, #0
 801fcea:	4604      	mov	r4, r0
 801fcec:	4608      	mov	r0, r1
 801fcee:	4611      	mov	r1, r2
 801fcf0:	602b      	str	r3, [r5, #0]
 801fcf2:	f7e3 fe35 	bl	8003960 <_fstat>
 801fcf6:	1c43      	adds	r3, r0, #1
 801fcf8:	d102      	bne.n	801fd00 <_fstat_r+0x1c>
 801fcfa:	682b      	ldr	r3, [r5, #0]
 801fcfc:	b103      	cbz	r3, 801fd00 <_fstat_r+0x1c>
 801fcfe:	6023      	str	r3, [r4, #0]
 801fd00:	bd38      	pop	{r3, r4, r5, pc}
 801fd02:	bf00      	nop
 801fd04:	20001ddc 	.word	0x20001ddc

0801fd08 <_isatty_r>:
 801fd08:	b538      	push	{r3, r4, r5, lr}
 801fd0a:	4d06      	ldr	r5, [pc, #24]	; (801fd24 <_isatty_r+0x1c>)
 801fd0c:	2300      	movs	r3, #0
 801fd0e:	4604      	mov	r4, r0
 801fd10:	4608      	mov	r0, r1
 801fd12:	602b      	str	r3, [r5, #0]
 801fd14:	f7e3 fe33 	bl	800397e <_isatty>
 801fd18:	1c43      	adds	r3, r0, #1
 801fd1a:	d102      	bne.n	801fd22 <_isatty_r+0x1a>
 801fd1c:	682b      	ldr	r3, [r5, #0]
 801fd1e:	b103      	cbz	r3, 801fd22 <_isatty_r+0x1a>
 801fd20:	6023      	str	r3, [r4, #0]
 801fd22:	bd38      	pop	{r3, r4, r5, pc}
 801fd24:	20001ddc 	.word	0x20001ddc

0801fd28 <__locale_mb_cur_max>:
 801fd28:	4b01      	ldr	r3, [pc, #4]	; (801fd30 <__locale_mb_cur_max+0x8>)
 801fd2a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801fd2e:	4770      	bx	lr
 801fd30:	2000092c 	.word	0x2000092c

0801fd34 <_lseek_r>:
 801fd34:	b538      	push	{r3, r4, r5, lr}
 801fd36:	4d07      	ldr	r5, [pc, #28]	; (801fd54 <_lseek_r+0x20>)
 801fd38:	4604      	mov	r4, r0
 801fd3a:	4608      	mov	r0, r1
 801fd3c:	4611      	mov	r1, r2
 801fd3e:	2200      	movs	r2, #0
 801fd40:	602a      	str	r2, [r5, #0]
 801fd42:	461a      	mov	r2, r3
 801fd44:	f7e3 fe25 	bl	8003992 <_lseek>
 801fd48:	1c43      	adds	r3, r0, #1
 801fd4a:	d102      	bne.n	801fd52 <_lseek_r+0x1e>
 801fd4c:	682b      	ldr	r3, [r5, #0]
 801fd4e:	b103      	cbz	r3, 801fd52 <_lseek_r+0x1e>
 801fd50:	6023      	str	r3, [r4, #0]
 801fd52:	bd38      	pop	{r3, r4, r5, pc}
 801fd54:	20001ddc 	.word	0x20001ddc

0801fd58 <__ascii_mbtowc>:
 801fd58:	b082      	sub	sp, #8
 801fd5a:	b901      	cbnz	r1, 801fd5e <__ascii_mbtowc+0x6>
 801fd5c:	a901      	add	r1, sp, #4
 801fd5e:	b142      	cbz	r2, 801fd72 <__ascii_mbtowc+0x1a>
 801fd60:	b14b      	cbz	r3, 801fd76 <__ascii_mbtowc+0x1e>
 801fd62:	7813      	ldrb	r3, [r2, #0]
 801fd64:	600b      	str	r3, [r1, #0]
 801fd66:	7812      	ldrb	r2, [r2, #0]
 801fd68:	1e10      	subs	r0, r2, #0
 801fd6a:	bf18      	it	ne
 801fd6c:	2001      	movne	r0, #1
 801fd6e:	b002      	add	sp, #8
 801fd70:	4770      	bx	lr
 801fd72:	4610      	mov	r0, r2
 801fd74:	e7fb      	b.n	801fd6e <__ascii_mbtowc+0x16>
 801fd76:	f06f 0001 	mvn.w	r0, #1
 801fd7a:	e7f8      	b.n	801fd6e <__ascii_mbtowc+0x16>

0801fd7c <_read_r>:
 801fd7c:	b538      	push	{r3, r4, r5, lr}
 801fd7e:	4d07      	ldr	r5, [pc, #28]	; (801fd9c <_read_r+0x20>)
 801fd80:	4604      	mov	r4, r0
 801fd82:	4608      	mov	r0, r1
 801fd84:	4611      	mov	r1, r2
 801fd86:	2200      	movs	r2, #0
 801fd88:	602a      	str	r2, [r5, #0]
 801fd8a:	461a      	mov	r2, r3
 801fd8c:	f7e3 fda4 	bl	80038d8 <_read>
 801fd90:	1c43      	adds	r3, r0, #1
 801fd92:	d102      	bne.n	801fd9a <_read_r+0x1e>
 801fd94:	682b      	ldr	r3, [r5, #0]
 801fd96:	b103      	cbz	r3, 801fd9a <_read_r+0x1e>
 801fd98:	6023      	str	r3, [r4, #0]
 801fd9a:	bd38      	pop	{r3, r4, r5, pc}
 801fd9c:	20001ddc 	.word	0x20001ddc

0801fda0 <__swbuf_r>:
 801fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fda2:	460e      	mov	r6, r1
 801fda4:	4614      	mov	r4, r2
 801fda6:	4605      	mov	r5, r0
 801fda8:	b118      	cbz	r0, 801fdb2 <__swbuf_r+0x12>
 801fdaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801fdac:	b90b      	cbnz	r3, 801fdb2 <__swbuf_r+0x12>
 801fdae:	f7fd fd7b 	bl	801d8a8 <__sinit>
 801fdb2:	69a3      	ldr	r3, [r4, #24]
 801fdb4:	60a3      	str	r3, [r4, #8]
 801fdb6:	89a3      	ldrh	r3, [r4, #12]
 801fdb8:	0719      	lsls	r1, r3, #28
 801fdba:	d529      	bpl.n	801fe10 <__swbuf_r+0x70>
 801fdbc:	6923      	ldr	r3, [r4, #16]
 801fdbe:	b33b      	cbz	r3, 801fe10 <__swbuf_r+0x70>
 801fdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdc4:	b2f6      	uxtb	r6, r6
 801fdc6:	049a      	lsls	r2, r3, #18
 801fdc8:	4637      	mov	r7, r6
 801fdca:	d52a      	bpl.n	801fe22 <__swbuf_r+0x82>
 801fdcc:	6823      	ldr	r3, [r4, #0]
 801fdce:	6920      	ldr	r0, [r4, #16]
 801fdd0:	1a18      	subs	r0, r3, r0
 801fdd2:	6963      	ldr	r3, [r4, #20]
 801fdd4:	4283      	cmp	r3, r0
 801fdd6:	dc04      	bgt.n	801fde2 <__swbuf_r+0x42>
 801fdd8:	4621      	mov	r1, r4
 801fdda:	4628      	mov	r0, r5
 801fddc:	f7fd fcf8 	bl	801d7d0 <_fflush_r>
 801fde0:	b9e0      	cbnz	r0, 801fe1c <__swbuf_r+0x7c>
 801fde2:	68a3      	ldr	r3, [r4, #8]
 801fde4:	3b01      	subs	r3, #1
 801fde6:	60a3      	str	r3, [r4, #8]
 801fde8:	6823      	ldr	r3, [r4, #0]
 801fdea:	1c5a      	adds	r2, r3, #1
 801fdec:	6022      	str	r2, [r4, #0]
 801fdee:	701e      	strb	r6, [r3, #0]
 801fdf0:	6962      	ldr	r2, [r4, #20]
 801fdf2:	1c43      	adds	r3, r0, #1
 801fdf4:	429a      	cmp	r2, r3
 801fdf6:	d004      	beq.n	801fe02 <__swbuf_r+0x62>
 801fdf8:	89a3      	ldrh	r3, [r4, #12]
 801fdfa:	07db      	lsls	r3, r3, #31
 801fdfc:	d506      	bpl.n	801fe0c <__swbuf_r+0x6c>
 801fdfe:	2e0a      	cmp	r6, #10
 801fe00:	d104      	bne.n	801fe0c <__swbuf_r+0x6c>
 801fe02:	4621      	mov	r1, r4
 801fe04:	4628      	mov	r0, r5
 801fe06:	f7fd fce3 	bl	801d7d0 <_fflush_r>
 801fe0a:	b938      	cbnz	r0, 801fe1c <__swbuf_r+0x7c>
 801fe0c:	4638      	mov	r0, r7
 801fe0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe10:	4621      	mov	r1, r4
 801fe12:	4628      	mov	r0, r5
 801fe14:	f7fc fdac 	bl	801c970 <__swsetup_r>
 801fe18:	2800      	cmp	r0, #0
 801fe1a:	d0d1      	beq.n	801fdc0 <__swbuf_r+0x20>
 801fe1c:	f04f 37ff 	mov.w	r7, #4294967295
 801fe20:	e7f4      	b.n	801fe0c <__swbuf_r+0x6c>
 801fe22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fe26:	81a3      	strh	r3, [r4, #12]
 801fe28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fe2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fe2e:	6663      	str	r3, [r4, #100]	; 0x64
 801fe30:	e7cc      	b.n	801fdcc <__swbuf_r+0x2c>
	...

0801fe34 <_wcrtomb_r>:
 801fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe36:	4c09      	ldr	r4, [pc, #36]	; (801fe5c <_wcrtomb_r+0x28>)
 801fe38:	b085      	sub	sp, #20
 801fe3a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801fe3e:	4605      	mov	r5, r0
 801fe40:	461e      	mov	r6, r3
 801fe42:	b909      	cbnz	r1, 801fe48 <_wcrtomb_r+0x14>
 801fe44:	460a      	mov	r2, r1
 801fe46:	a901      	add	r1, sp, #4
 801fe48:	47b8      	blx	r7
 801fe4a:	1c43      	adds	r3, r0, #1
 801fe4c:	bf01      	itttt	eq
 801fe4e:	2300      	moveq	r3, #0
 801fe50:	6033      	streq	r3, [r6, #0]
 801fe52:	238a      	moveq	r3, #138	; 0x8a
 801fe54:	602b      	streq	r3, [r5, #0]
 801fe56:	b005      	add	sp, #20
 801fe58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe5a:	bf00      	nop
 801fe5c:	2000092c 	.word	0x2000092c

0801fe60 <__ascii_wctomb>:
 801fe60:	4603      	mov	r3, r0
 801fe62:	4608      	mov	r0, r1
 801fe64:	b141      	cbz	r1, 801fe78 <__ascii_wctomb+0x18>
 801fe66:	2aff      	cmp	r2, #255	; 0xff
 801fe68:	d904      	bls.n	801fe74 <__ascii_wctomb+0x14>
 801fe6a:	228a      	movs	r2, #138	; 0x8a
 801fe6c:	601a      	str	r2, [r3, #0]
 801fe6e:	f04f 30ff 	mov.w	r0, #4294967295
 801fe72:	4770      	bx	lr
 801fe74:	700a      	strb	r2, [r1, #0]
 801fe76:	2001      	movs	r0, #1
 801fe78:	4770      	bx	lr

0801fe7a <abort>:
 801fe7a:	b508      	push	{r3, lr}
 801fe7c:	2006      	movs	r0, #6
 801fe7e:	f000 f82d 	bl	801fedc <raise>
 801fe82:	2001      	movs	r0, #1
 801fe84:	f7e3 fd1e 	bl	80038c4 <_exit>

0801fe88 <_raise_r>:
 801fe88:	291f      	cmp	r1, #31
 801fe8a:	b538      	push	{r3, r4, r5, lr}
 801fe8c:	4604      	mov	r4, r0
 801fe8e:	460d      	mov	r5, r1
 801fe90:	d904      	bls.n	801fe9c <_raise_r+0x14>
 801fe92:	2316      	movs	r3, #22
 801fe94:	6003      	str	r3, [r0, #0]
 801fe96:	f04f 30ff 	mov.w	r0, #4294967295
 801fe9a:	bd38      	pop	{r3, r4, r5, pc}
 801fe9c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801fea0:	b112      	cbz	r2, 801fea8 <_raise_r+0x20>
 801fea2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fea6:	b94b      	cbnz	r3, 801febc <_raise_r+0x34>
 801fea8:	4620      	mov	r0, r4
 801feaa:	f000 f831 	bl	801ff10 <_getpid_r>
 801feae:	462a      	mov	r2, r5
 801feb0:	4601      	mov	r1, r0
 801feb2:	4620      	mov	r0, r4
 801feb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801feb8:	f000 b818 	b.w	801feec <_kill_r>
 801febc:	2b01      	cmp	r3, #1
 801febe:	d00a      	beq.n	801fed6 <_raise_r+0x4e>
 801fec0:	1c59      	adds	r1, r3, #1
 801fec2:	d103      	bne.n	801fecc <_raise_r+0x44>
 801fec4:	2316      	movs	r3, #22
 801fec6:	6003      	str	r3, [r0, #0]
 801fec8:	2001      	movs	r0, #1
 801feca:	e7e6      	b.n	801fe9a <_raise_r+0x12>
 801fecc:	2400      	movs	r4, #0
 801fece:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fed2:	4628      	mov	r0, r5
 801fed4:	4798      	blx	r3
 801fed6:	2000      	movs	r0, #0
 801fed8:	e7df      	b.n	801fe9a <_raise_r+0x12>
	...

0801fedc <raise>:
 801fedc:	4b02      	ldr	r3, [pc, #8]	; (801fee8 <raise+0xc>)
 801fede:	4601      	mov	r1, r0
 801fee0:	6818      	ldr	r0, [r3, #0]
 801fee2:	f7ff bfd1 	b.w	801fe88 <_raise_r>
 801fee6:	bf00      	nop
 801fee8:	200000e8 	.word	0x200000e8

0801feec <_kill_r>:
 801feec:	b538      	push	{r3, r4, r5, lr}
 801feee:	4d07      	ldr	r5, [pc, #28]	; (801ff0c <_kill_r+0x20>)
 801fef0:	2300      	movs	r3, #0
 801fef2:	4604      	mov	r4, r0
 801fef4:	4608      	mov	r0, r1
 801fef6:	4611      	mov	r1, r2
 801fef8:	602b      	str	r3, [r5, #0]
 801fefa:	f7e3 fcd3 	bl	80038a4 <_kill>
 801fefe:	1c43      	adds	r3, r0, #1
 801ff00:	d102      	bne.n	801ff08 <_kill_r+0x1c>
 801ff02:	682b      	ldr	r3, [r5, #0]
 801ff04:	b103      	cbz	r3, 801ff08 <_kill_r+0x1c>
 801ff06:	6023      	str	r3, [r4, #0]
 801ff08:	bd38      	pop	{r3, r4, r5, pc}
 801ff0a:	bf00      	nop
 801ff0c:	20001ddc 	.word	0x20001ddc

0801ff10 <_getpid_r>:
 801ff10:	f7e3 bcc1 	b.w	8003896 <_getpid>
 801ff14:	0000      	movs	r0, r0
	...

0801ff18 <floor>:
 801ff18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff1c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ff20:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ff24:	2e13      	cmp	r6, #19
 801ff26:	4602      	mov	r2, r0
 801ff28:	460b      	mov	r3, r1
 801ff2a:	4607      	mov	r7, r0
 801ff2c:	460c      	mov	r4, r1
 801ff2e:	4605      	mov	r5, r0
 801ff30:	dc33      	bgt.n	801ff9a <floor+0x82>
 801ff32:	2e00      	cmp	r6, #0
 801ff34:	da14      	bge.n	801ff60 <floor+0x48>
 801ff36:	a334      	add	r3, pc, #208	; (adr r3, 8020008 <floor+0xf0>)
 801ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff3c:	f7e0 f97e 	bl	800023c <__adddf3>
 801ff40:	2200      	movs	r2, #0
 801ff42:	2300      	movs	r3, #0
 801ff44:	f7e0 fdc0 	bl	8000ac8 <__aeabi_dcmpgt>
 801ff48:	b138      	cbz	r0, 801ff5a <floor+0x42>
 801ff4a:	2c00      	cmp	r4, #0
 801ff4c:	da58      	bge.n	8020000 <floor+0xe8>
 801ff4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ff52:	431d      	orrs	r5, r3
 801ff54:	d001      	beq.n	801ff5a <floor+0x42>
 801ff56:	4c2e      	ldr	r4, [pc, #184]	; (8020010 <floor+0xf8>)
 801ff58:	2500      	movs	r5, #0
 801ff5a:	4623      	mov	r3, r4
 801ff5c:	462f      	mov	r7, r5
 801ff5e:	e025      	b.n	801ffac <floor+0x94>
 801ff60:	4a2c      	ldr	r2, [pc, #176]	; (8020014 <floor+0xfc>)
 801ff62:	fa42 f806 	asr.w	r8, r2, r6
 801ff66:	ea01 0208 	and.w	r2, r1, r8
 801ff6a:	4302      	orrs	r2, r0
 801ff6c:	d01e      	beq.n	801ffac <floor+0x94>
 801ff6e:	a326      	add	r3, pc, #152	; (adr r3, 8020008 <floor+0xf0>)
 801ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff74:	f7e0 f962 	bl	800023c <__adddf3>
 801ff78:	2200      	movs	r2, #0
 801ff7a:	2300      	movs	r3, #0
 801ff7c:	f7e0 fda4 	bl	8000ac8 <__aeabi_dcmpgt>
 801ff80:	2800      	cmp	r0, #0
 801ff82:	d0ea      	beq.n	801ff5a <floor+0x42>
 801ff84:	2c00      	cmp	r4, #0
 801ff86:	bfbe      	ittt	lt
 801ff88:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ff8c:	fa43 f606 	asrlt.w	r6, r3, r6
 801ff90:	19a4      	addlt	r4, r4, r6
 801ff92:	ea24 0408 	bic.w	r4, r4, r8
 801ff96:	2500      	movs	r5, #0
 801ff98:	e7df      	b.n	801ff5a <floor+0x42>
 801ff9a:	2e33      	cmp	r6, #51	; 0x33
 801ff9c:	dd0a      	ble.n	801ffb4 <floor+0x9c>
 801ff9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ffa2:	d103      	bne.n	801ffac <floor+0x94>
 801ffa4:	f7e0 f94a 	bl	800023c <__adddf3>
 801ffa8:	4607      	mov	r7, r0
 801ffaa:	460b      	mov	r3, r1
 801ffac:	4638      	mov	r0, r7
 801ffae:	4619      	mov	r1, r3
 801ffb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ffb4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ffb8:	f04f 32ff 	mov.w	r2, #4294967295
 801ffbc:	fa22 f808 	lsr.w	r8, r2, r8
 801ffc0:	ea18 0f00 	tst.w	r8, r0
 801ffc4:	d0f2      	beq.n	801ffac <floor+0x94>
 801ffc6:	a310      	add	r3, pc, #64	; (adr r3, 8020008 <floor+0xf0>)
 801ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffcc:	f7e0 f936 	bl	800023c <__adddf3>
 801ffd0:	2200      	movs	r2, #0
 801ffd2:	2300      	movs	r3, #0
 801ffd4:	f7e0 fd78 	bl	8000ac8 <__aeabi_dcmpgt>
 801ffd8:	2800      	cmp	r0, #0
 801ffda:	d0be      	beq.n	801ff5a <floor+0x42>
 801ffdc:	2c00      	cmp	r4, #0
 801ffde:	da02      	bge.n	801ffe6 <floor+0xce>
 801ffe0:	2e14      	cmp	r6, #20
 801ffe2:	d103      	bne.n	801ffec <floor+0xd4>
 801ffe4:	3401      	adds	r4, #1
 801ffe6:	ea25 0508 	bic.w	r5, r5, r8
 801ffea:	e7b6      	b.n	801ff5a <floor+0x42>
 801ffec:	2301      	movs	r3, #1
 801ffee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fff2:	fa03 f606 	lsl.w	r6, r3, r6
 801fff6:	4435      	add	r5, r6
 801fff8:	42bd      	cmp	r5, r7
 801fffa:	bf38      	it	cc
 801fffc:	18e4      	addcc	r4, r4, r3
 801fffe:	e7f2      	b.n	801ffe6 <floor+0xce>
 8020000:	2500      	movs	r5, #0
 8020002:	462c      	mov	r4, r5
 8020004:	e7a9      	b.n	801ff5a <floor+0x42>
 8020006:	bf00      	nop
 8020008:	8800759c 	.word	0x8800759c
 802000c:	7e37e43c 	.word	0x7e37e43c
 8020010:	bff00000 	.word	0xbff00000
 8020014:	000fffff 	.word	0x000fffff

08020018 <_init>:
 8020018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802001a:	bf00      	nop
 802001c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802001e:	bc08      	pop	{r3}
 8020020:	469e      	mov	lr, r3
 8020022:	4770      	bx	lr

08020024 <_fini>:
 8020024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020026:	bf00      	nop
 8020028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802002a:	bc08      	pop	{r3}
 802002c:	469e      	mov	lr, r3
 802002e:	4770      	bx	lr
